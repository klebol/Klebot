
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000204c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002204  08002204  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002208  08002208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800220c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002218  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002218  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce1d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcd  00000000  00000000  0002ce9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0002ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b23  00000000  00000000  0002fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002018  00000000  00000000  000307d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f82  00000000  00000000  000327eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf0b  00000000  00000000  0004576d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c00  00000000  00000000  000d1678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d5278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080021cc 	.word	0x080021cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080021cc 	.word	0x080021cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
 80004ee:	4b50      	ldr	r3, [pc, #320]	; (8000630 <MX_GPIO_Init+0x15c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a4f      	ldr	r2, [pc, #316]	; (8000630 <MX_GPIO_Init+0x15c>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <MX_GPIO_Init+0x15c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b49      	ldr	r3, [pc, #292]	; (8000630 <MX_GPIO_Init+0x15c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a48      	ldr	r2, [pc, #288]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b46      	ldr	r3, [pc, #280]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b42      	ldr	r3, [pc, #264]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a41      	ldr	r2, [pc, #260]	; (8000630 <MX_GPIO_Init+0x15c>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a3a      	ldr	r2, [pc, #232]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b38      	ldr	r3, [pc, #224]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a33      	ldr	r2, [pc, #204]	; (8000630 <MX_GPIO_Init+0x15c>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <MX_GPIO_Init+0x15c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2124      	movs	r1, #36	; 0x24
 800057a:	482e      	ldr	r0, [pc, #184]	; (8000634 <MX_GPIO_Init+0x160>)
 800057c:	f000 fdfc 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	21c0      	movs	r1, #192	; 0xc0
 8000584:	482c      	ldr	r0, [pc, #176]	; (8000638 <MX_GPIO_Init+0x164>)
 8000586:	f000 fdf7 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_ENC_Pin;
 800058a:	2320      	movs	r3, #32
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_ENC_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4827      	ldr	r0, [pc, #156]	; (800063c <MX_GPIO_Init+0x168>)
 800059e:	f000 fc67 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|KEEP_ALIVE_Pin;
 80005a2:	2324      	movs	r3, #36	; 0x24
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	481e      	ldr	r0, [pc, #120]	; (8000634 <MX_GPIO_Init+0x160>)
 80005ba:	f000 fc59 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <MX_GPIO_Init+0x160>)
 80005d6:	f000 fc4b 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 80005da:	23c0      	movs	r3, #192	; 0xc0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <MX_GPIO_Init+0x164>)
 80005f2:	f000 fc3d 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x164>)
 800060c:	f000 fc30 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8000610:	2304      	movs	r3, #4
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <MX_GPIO_Init+0x16c>)
 8000624:	f000 fc24 	bl	8000e70 <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40020400 	.word	0x40020400
 8000638:	40020800 	.word	0x40020800
 800063c:	40020000 	.word	0x40020000
 8000640:	40020c00 	.word	0x40020c00

08000644 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C3_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_I2C3_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C3_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_I2C3_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C3_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C3_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_I2C3_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_I2C3_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2C3_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_I2C3_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2C3_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_I2C3_Init+0x50>)
 8000682:	f000 fd93 	bl	80011ac <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f8ea 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40005c00 	.word	0x40005c00
 800069c:	00061a80 	.word	0x00061a80

080006a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a29      	ldr	r2, [pc, #164]	; (8000764 <HAL_I2C_MspInit+0xc4>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d14b      	bne.n	800075a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 80006fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000700:	2312      	movs	r3, #18
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800070c:	2304      	movs	r3, #4
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4815      	ldr	r0, [pc, #84]	; (800076c <HAL_I2C_MspInit+0xcc>)
 8000718:	f000 fbaa 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000722:	2312      	movs	r3, #18
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800072e:	2304      	movs	r3, #4
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <HAL_I2C_MspInit+0xd0>)
 800073a:	f000 fb99 	bl	8000e70 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 8000748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_I2C_MspInit+0xc8>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40005c00 	.word	0x40005c00
 8000768:	40023800 	.word	0x40023800
 800076c:	40020800 	.word	0x40020800
 8000770:	40020000 	.word	0x40020000

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 fa22 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f80a 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f7ff fea8 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000784:	f7ff ff5e 	bl	8000644 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000788:	f000 f872 	bl	8000870 <MX_SPI2_Init>
  MX_TIM3_Init();
 800078c:	f000 f952 	bl	8000a34 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000790:	e7fe      	b.n	8000790 <main+0x1c>
	...

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fce6 	bl	8002174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <SystemClock_Config+0xc8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <SystemClock_Config+0xc8>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <SystemClock_Config+0xc8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <SystemClock_Config+0xcc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a20      	ldr	r2, [pc, #128]	; (8000860 <SystemClock_Config+0xcc>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <SystemClock_Config+0xcc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000808:	2364      	movs	r3, #100	; 0x64
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fe0b 	bl	8001434 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000824:	f000 f81e 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2103      	movs	r1, #3
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f86d 	bl	8001924 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000850:	f000 f808 	bl	8000864 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	; 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI2_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_SPI2_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI2_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI2_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI2_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI2_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI2_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI2_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI2_Init+0x64>)
 80008c2:	f001 fa39 	bl	8001d38 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008cc:	f7ff ffca 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	40003800 	.word	0x40003800

080008dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <HAL_SPI_MspInit+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12c      	bne.n	8000958 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_SPI_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_SPI_MspInit+0x88>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_SPI_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_SPI_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_SPI_MspInit+0x88>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_SPI_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8000936:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000948:	2305      	movs	r3, #5
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 8000954:	f000 fa8c 	bl	8000e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40003800 	.word	0x40003800
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f92c 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2224      	movs	r2, #36	; 0x24
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fb96 	bl	8002174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000a52:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <MX_TIM3_Init+0xa4>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000aa2:	f001 f9d2 	bl	8001e4a <HAL_TIM_Encoder_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f7ff feda 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM3_Init+0xa0>)
 8000abe:	f001 faeb 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ac8:	f7ff fecc 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000d4 	.word	0x200000d4
 8000ad8:	40000400 	.word	0x40000400

08000adc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_TIM_Encoder_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000b36:	23c0      	movs	r3, #192	; 0xc0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b46:	2302      	movs	r3, #2
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b52:	f000 f98d 	bl	8000e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b96:	f7ff ff3b 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f001 faf3 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fde9 	bl	8000774 <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb0:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb8:	20000120 	.word	0x20000120

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f90d 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff feba 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f917 	bl	8000e56 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f8ed 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	2000011c 	.word	0x2000011c

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000011c 	.word	0x2000011c

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff47 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff5c 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff8e 	bl	8000d5c <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5d 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffb0 	bl	8000dc4 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e159      	b.n	8001140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8148 	bne.w	800113a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a2 	beq.w	800113a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b57      	ldr	r3, [pc, #348]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a56      	ldr	r2, [pc, #344]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b54      	ldr	r3, [pc, #336]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <HAL_GPIO_Init+0x2f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x202>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1fe>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_GPIO_Init+0x2f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1fa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1f6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_Init+0x300>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1f2>
 800105e:	2304      	movs	r3, #4
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001062:	2307      	movs	r3, #7
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a24      	ldr	r2, [pc, #144]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x304>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f aea2 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e12b      	b.n	8001416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fa64 	bl	80006a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2224      	movs	r2, #36	; 0x24
 80011dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800120e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001210:	f000 fd7e 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8001214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a81      	ldr	r2, [pc, #516]	; (8001420 <HAL_I2C_Init+0x274>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d807      	bhi.n	8001230 <HAL_I2C_Init+0x84>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_I2C_Init+0x278>)
 8001224:	4293      	cmp	r3, r2
 8001226:	bf94      	ite	ls
 8001228:	2301      	movls	r3, #1
 800122a:	2300      	movhi	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	e006      	b.n	800123e <HAL_I2C_Init+0x92>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a7d      	ldr	r2, [pc, #500]	; (8001428 <HAL_I2C_Init+0x27c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	bf94      	ite	ls
 8001238:	2301      	movls	r3, #1
 800123a:	2300      	movhi	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0e7      	b.n	8001416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a78      	ldr	r2, [pc, #480]	; (800142c <HAL_I2C_Init+0x280>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a6a      	ldr	r2, [pc, #424]	; (8001420 <HAL_I2C_Init+0x274>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d802      	bhi.n	8001280 <HAL_I2C_Init+0xd4>
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3301      	adds	r3, #1
 800127e:	e009      	b.n	8001294 <HAL_I2C_Init+0xe8>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	4a69      	ldr	r2, [pc, #420]	; (8001430 <HAL_I2C_Init+0x284>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	3301      	adds	r3, #1
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	430b      	orrs	r3, r1
 800129a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	495c      	ldr	r1, [pc, #368]	; (8001420 <HAL_I2C_Init+0x274>)
 80012b0:	428b      	cmp	r3, r1
 80012b2:	d819      	bhi.n	80012e8 <HAL_I2C_Init+0x13c>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1e59      	subs	r1, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c2:	1c59      	adds	r1, r3, #1
 80012c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012c8:	400b      	ands	r3, r1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <HAL_I2C_Init+0x138>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1e59      	subs	r1, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e2:	e051      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e04f      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d111      	bne.n	8001314 <HAL_I2C_Init+0x168>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e58      	subs	r0, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001302:	3301      	adds	r3, #1
 8001304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	e012      	b.n	800133a <HAL_I2C_Init+0x18e>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1e58      	subs	r0, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	0099      	lsls	r1, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	fbb0 f3f3 	udiv	r3, r0, r3
 800132a:	3301      	adds	r3, #1
 800132c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Init+0x196>
 800133e:	2301      	movs	r3, #1
 8001340:	e022      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10e      	bne.n	8001368 <HAL_I2C_Init+0x1bc>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1e58      	subs	r0, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	440b      	add	r3, r1
 8001358:	fbb0 f3f3 	udiv	r3, r0, r3
 800135c:	3301      	adds	r3, #1
 800135e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001366:	e00f      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1e58      	subs	r0, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	0099      	lsls	r1, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	fbb0 f3f3 	udiv	r3, r0, r3
 800137e:	3301      	adds	r3, #1
 8001380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	6809      	ldr	r1, [r1, #0]
 800138c:	4313      	orrs	r3, r2
 800138e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6911      	ldr	r1, [r2, #16]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68d2      	ldr	r2, [r2, #12]
 80013c2:	4311      	orrs	r1, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2220      	movs	r2, #32
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	000186a0 	.word	0x000186a0
 8001424:	001e847f 	.word	0x001e847f
 8001428:	003d08ff 	.word	0x003d08ff
 800142c:	431bde83 	.word	0x431bde83
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e267      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d00c      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b82      	ldr	r3, [pc, #520]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b69      	ldr	r3, [pc, #420]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a68      	ldr	r2, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbce 	bl	8000c8c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fbca 	bl	8000c8c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e207      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fbba 	bl	8000c8c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fbb6 	bl	8000c8c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4937      	ldr	r1, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb6f 	bl	8000c8c <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fb6b 	bl	8000c8c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a8      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4925      	ldr	r1, [pc, #148]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb4e 	bl	8000c8c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fb4a 	bl	8000c8c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e187      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d036      	beq.n	800168c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fb2e 	bl	8000c8c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fb2a 	bl	8000c8c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e167      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
 8001652:	e01b      	b.n	800168c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fb17 	bl	8000c8c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fb13 	bl	8000c8c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	42470000 	.word	0x42470000
 800167c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a7c      	ldr	r2, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fad3 	bl	8000c8c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff facf 	bl	8000c8c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e10c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x2ea>
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a63      	ldr	r2, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x30c>
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fa94 	bl	8000c8c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fa90 	bl	8000c8c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0cb      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ee      	beq.n	8001768 <HAL_RCC_OscConfig+0x334>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fa7e 	bl	8000c8c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fa7a 	bl	8000c8c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0b5      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a1 	beq.w	8001914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d05c      	beq.n	8001898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d141      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa4e 	bl	8000c8c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fa4a 	bl	8000c8c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e087      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fa23 	bl	8000c8c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fa1f 	bl	8000c8c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e05c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x416>
 8001868:	e054      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fa0c 	bl	8000c8c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fa08 	bl	8000c8c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e038      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d028      	beq.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90c      	bls.n	8001960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d044      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4934      	ldr	r1, [pc, #208]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff f93a 	bl	8000c8c <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f936 	bl	8000c8c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f89a 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	080021e4 	.word	0x080021e4
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	; 0x50
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b08:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d00d      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	f200 80e1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b22:	e0db      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b28:	e0db      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2e:	e0d8      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	0159      	lsls	r1, r3, #5
 8001b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b74:	0150      	lsls	r0, r2, #5
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1a51      	subs	r1, r2, r1
 8001b7e:	6139      	str	r1, [r7, #16]
 8001b80:	4629      	mov	r1, r5
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b94:	4659      	mov	r1, fp
 8001b96:	018b      	lsls	r3, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	018a      	lsls	r2, r1, #6
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba8:	4659      	mov	r1, fp
 8001baa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	eb18 0303 	adds.w	r3, r8, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb49 0303 	adc.w	r3, r9, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c00:	f7fe faea 	bl	80001d8 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	4611      	mov	r1, r2
 8001c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c28:	4642      	mov	r2, r8
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0159      	lsls	r1, r3, #5
 8001c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3a:	0150      	lsls	r0, r2, #5
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4641      	mov	r1, r8
 8001c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c46:	4649      	mov	r1, r9
 8001c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c60:	ebb2 040a 	subs.w	r4, r2, sl
 8001c64:	eb63 050b 	sbc.w	r5, r3, fp
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	00eb      	lsls	r3, r5, #3
 8001c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c76:	00e2      	lsls	r2, r4, #3
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	18e3      	adds	r3, r4, r3
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	464b      	mov	r3, r9
 8001c84:	eb45 0303 	adc.w	r3, r5, r3
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	2200      	movs	r2, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	61fa      	str	r2, [r7, #28]
 8001cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb4:	f7fe fa90 	bl	80001d8 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3750      	adds	r7, #80	; 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	080021f4 	.word	0x080021f4

08001d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07b      	b.n	8001e42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d5a:	d009      	beq.n	8001d70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
 8001d62:	e005      	b.n	8001d70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fda6 	bl	80008dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	ea42 0103 	orr.w	r1, r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f003 0104 	and.w	r1, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f003 0210 	and.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e097      	b.n	8001f8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fe32 	bl	8000adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f000 f87a 	bl	8001f98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	f023 0303 	bic.w	r3, r3, #3
 8001ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	4313      	orrs	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001eea:	f023 030c 	bic.w	r3, r3, #12
 8001eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4313      	orrs	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	011a      	lsls	r2, r3, #4
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	031b      	lsls	r3, r3, #12
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001f30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a34      	ldr	r2, [pc, #208]	; (800207c <TIM_Base_SetConfig+0xe4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00f      	beq.n	8001fd0 <TIM_Base_SetConfig+0x38>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x38>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <TIM_Base_SetConfig+0xe8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a30      	ldr	r2, [pc, #192]	; (8002084 <TIM_Base_SetConfig+0xec>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <TIM_Base_SetConfig+0xf0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <TIM_Base_SetConfig+0xe4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01b      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d017      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <TIM_Base_SetConfig+0xe8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <TIM_Base_SetConfig+0xec>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00f      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <TIM_Base_SetConfig+0xf0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00b      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1f      	ldr	r2, [pc, #124]	; (800208c <TIM_Base_SetConfig+0xf4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <TIM_Base_SetConfig+0xf8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <TIM_Base_SetConfig+0xfc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d108      	bne.n	8002034 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <TIM_Base_SetConfig+0xe4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d103      	bne.n	8002068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	615a      	str	r2, [r3, #20]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40010000 	.word	0x40010000
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800
 8002088:	40000c00 	.word	0x40000c00
 800208c:	40014000 	.word	0x40014000
 8002090:	40014400 	.word	0x40014400
 8002094:	40014800 	.word	0x40014800

08002098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e050      	b.n	8002152 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d013      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a18      	ldr	r2, [pc, #96]	; (8002164 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4313      	orrs	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000
 8002164:	40000400 	.word	0x40000400
 8002168:	40000800 	.word	0x40000800
 800216c:	40000c00 	.word	0x40000c00
 8002170:	40014000 	.word	0x40014000

08002174 <memset>:
 8002174:	4402      	add	r2, r0
 8002176:	4603      	mov	r3, r0
 8002178:	4293      	cmp	r3, r2
 800217a:	d100      	bne.n	800217e <memset+0xa>
 800217c:	4770      	bx	lr
 800217e:	f803 1b01 	strb.w	r1, [r3], #1
 8002182:	e7f9      	b.n	8002178 <memset+0x4>

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4d0d      	ldr	r5, [pc, #52]	; (80021bc <__libc_init_array+0x38>)
 8002188:	4c0d      	ldr	r4, [pc, #52]	; (80021c0 <__libc_init_array+0x3c>)
 800218a:	1b64      	subs	r4, r4, r5
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	2600      	movs	r6, #0
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	4d0b      	ldr	r5, [pc, #44]	; (80021c4 <__libc_init_array+0x40>)
 8002196:	4c0c      	ldr	r4, [pc, #48]	; (80021c8 <__libc_init_array+0x44>)
 8002198:	f000 f818 	bl	80021cc <_init>
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2600      	movs	r6, #0
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08002204 	.word	0x08002204
 80021c0:	08002204 	.word	0x08002204
 80021c4:	08002204 	.word	0x08002204
 80021c8:	08002208 	.word	0x08002208

080021cc <_init>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr

080021d8 <_fini>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr
