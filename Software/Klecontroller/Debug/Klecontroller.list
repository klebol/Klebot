
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006944  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  2000009c  08006e44  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08006e44  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160b1  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7e  00000000  00000000  000361c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  00039f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001074  00000000  00000000  0003b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a17a  00000000  00000000  0003c53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c70f  00000000  00000000  000566b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d858  00000000  00000000  00072dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005748  00000000  00000000  00110620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00115d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000009c 	.word	0x2000009c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ac4 	.word	0x08006ac4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	08006ac4 	.word	0x08006ac4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f6:	3301      	adds	r3, #1
 80004f8:	425a      	negs	r2, r3
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	f002 021f 	and.w	r2, r2, #31
 8000502:	bf58      	it	pl
 8000504:	4253      	negpl	r3, r2
 8000506:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800050e:	7bfa      	ldrb	r2, [r7, #15]
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	e00b      	b.n	8000530 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	78fa      	ldrb	r2, [r7, #3]
 8000524:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	7bfa      	ldrb	r2, [r7, #15]
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054c:	3301      	adds	r3, #1
 800054e:	425a      	negs	r2, r3
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	f002 021f 	and.w	r2, r2, #31
 8000558:	bf58      	it	pl
 800055a:	4253      	negpl	r3, r2
 800055c:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800056a:	429a      	cmp	r2, r3
 800056c:	d101      	bne.n	8000572 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 800056e:	2301      	movs	r3, #1
 8000570:	e00c      	b.n	800058c <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	5c9a      	ldrb	r2, [r3, r2]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7bfa      	ldrb	r2, [r7, #15]
 8000586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <MX_ADC1_Init+0xec>)
 80005ac:	4a36      	ldr	r2, [pc, #216]	; (8000688 <MX_ADC1_Init+0xf0>)
 80005ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MX_ADC1_Init+0xec>)
 80005b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b32      	ldr	r3, [pc, #200]	; (8000684 <MX_ADC1_Init+0xec>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005be:	4b31      	ldr	r3, [pc, #196]	; (8000684 <MX_ADC1_Init+0xec>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c4:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_ADC1_Init+0xec>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <MX_ADC1_Init+0xec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <MX_ADC1_Init+0xec>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_ADC1_Init+0xec>)
 80005da:	4a2c      	ldr	r2, [pc, #176]	; (800068c <MX_ADC1_Init+0xf4>)
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <MX_ADC1_Init+0xec>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <MX_ADC1_Init+0xec>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_ADC1_Init+0xec>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_ADC1_Init+0xec>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	4822      	ldr	r0, [pc, #136]	; (8000684 <MX_ADC1_Init+0xec>)
 80005fa:	f002 fab7 	bl	8002b6c <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000604:	f000 ff61 	bl	80014ca <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000608:	230b      	movs	r3, #11
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000610:	2307      	movs	r3, #7
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <MX_ADC1_Init+0xec>)
 800061a:	f002 fd09 	bl	8003030 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000624:	f000 ff51 	bl	80014ca <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000628:	230c      	movs	r3, #12
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <MX_ADC1_Init+0xec>)
 8000636:	f002 fcfb 	bl	8003030 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000640:	f000 ff43 	bl	80014ca <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000644:	2301      	movs	r3, #1
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ADC1_Init+0xec>)
 8000652:	f002 fced 	bl	8003030 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800065c:	f000 ff35 	bl	80014ca <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000660:	2302      	movs	r3, #2
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0xec>)
 800066e:	f002 fcdf 	bl	8003030 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000678:	f000 ff27 	bl	80014ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000b8 	.word	0x200000b8
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <HAL_ADC_MspInit+0x110>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d171      	bne.n	8000796 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000706:	2306      	movs	r3, #6
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4823      	ldr	r0, [pc, #140]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800071a:	f003 fbe7 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 800071e:	2306      	movs	r3, #6
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	481e      	ldr	r0, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x11c>)
 8000732:	f003 fbdb 	bl	8003eec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0x124>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000764:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800077c:	f003 f824 	bl	80037c8 <HAL_DMA_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000786:	f000 fea0 	bl	80014ca <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800078e:	639a      	str	r2, [r3, #56]	; 0x38
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012000 	.word	0x40012000
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020000 	.word	0x40020000
 80007b0:	20000100 	.word	0x20000100
 80007b4:	40026410 	.word	0x40026410

080007b8 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <Inputs_Init+0xa8>)
 80007c0:	f005 fd64 	bl	800628c <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 80007c4:	2228      	movs	r2, #40	; 0x28
 80007c6:	4927      	ldr	r1, [pc, #156]	; (8000864 <Inputs_Init+0xac>)
 80007c8:	4827      	ldr	r0, [pc, #156]	; (8000868 <Inputs_Init+0xb0>)
 80007ca:	f002 fb23 	bl	8002e14 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f002 f9a8 	bl	8002b24 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <Inputs_Init+0xb4>)
 80007d6:	4926      	ldr	r1, [pc, #152]	; (8000870 <Inputs_Init+0xb8>)
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <Inputs_Init+0xbc>)
 80007da:	f000 fc05 	bl	8000fe8 <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <Inputs_Init+0xc0>)
 80007e0:	4926      	ldr	r1, [pc, #152]	; (800087c <Inputs_Init+0xc4>)
 80007e2:	4827      	ldr	r0, [pc, #156]	; (8000880 <Inputs_Init+0xc8>)
 80007e4:	f000 fc00 	bl	8000fe8 <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 80007e8:	4822      	ldr	r0, [pc, #136]	; (8000874 <Inputs_Init+0xbc>)
 80007ea:	f000 fc18 	bl	800101e <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 80007ee:	4824      	ldr	r0, [pc, #144]	; (8000880 <Inputs_Init+0xc8>)
 80007f0:	f000 fc15 	bl	800101e <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80007f4:	213c      	movs	r1, #60	; 0x3c
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <Inputs_Init+0xa8>)
 80007f8:	f005 fe48 	bl	800648c <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 100, 1000);
 80007fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000808:	491e      	ldr	r1, [pc, #120]	; (8000884 <Inputs_Init+0xcc>)
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <Inputs_Init+0xd0>)
 800080c:	f000 f938 	bl	8000a80 <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 100, 1000);
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	491c      	ldr	r1, [pc, #112]	; (800088c <Inputs_Init+0xd4>)
 800081c:	481c      	ldr	r0, [pc, #112]	; (8000890 <Inputs_Init+0xd8>)
 800081e:	f000 f92f 	bl	8000a80 <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 100, 1000);
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	4915      	ldr	r1, [pc, #84]	; (8000884 <Inputs_Init+0xcc>)
 800082e:	4819      	ldr	r0, [pc, #100]	; (8000894 <Inputs_Init+0xdc>)
 8000830:	f000 f926 	bl	8000a80 <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 100, 1000);
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2201      	movs	r2, #1
 800083e:	4916      	ldr	r1, [pc, #88]	; (8000898 <Inputs_Init+0xe0>)
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Inputs_Init+0xe4>)
 8000842:	f000 f91d 	bl	8000a80 <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 100, 1000);
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	2220      	movs	r2, #32
 8000850:	4911      	ldr	r1, [pc, #68]	; (8000898 <Inputs_Init+0xe0>)
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <Inputs_Init+0xe8>)
 8000854:	f000 f914 	bl	8000a80 <DB_ButtonInit>
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000808 	.word	0x20000808
 8000864:	20000160 	.word	0x20000160
 8000868:	200000b8 	.word	0x200000b8
 800086c:	200001b2 	.word	0x200001b2
 8000870:	200001b0 	.word	0x200001b0
 8000874:	200001b8 	.word	0x200001b8
 8000878:	200001b6 	.word	0x200001b6
 800087c:	200001b4 	.word	0x200001b4
 8000880:	200001d0 	.word	0x200001d0
 8000884:	40020800 	.word	0x40020800
 8000888:	200001e8 	.word	0x200001e8
 800088c:	40020c00 	.word	0x40020c00
 8000890:	20000208 	.word	0x20000208
 8000894:	20000228 	.word	0x20000228
 8000898:	40020000 	.word	0x40020000
 800089c:	20000248 	.word	0x20000248
 80008a0:	20000268 	.word	0x20000268

080008a4 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 80008bc:	2300      	movs	r3, #0
 80008be:	77fb      	strb	r3, [r7, #31]
 80008c0:	e021      	b.n	8000906 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7ffa      	ldrb	r2, [r7, #31]
 80008c6:	4924      	ldr	r1, [pc, #144]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008c8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008cc:	4413      	add	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	7ffa      	ldrb	r2, [r7, #31]
 80008d4:	3201      	adds	r2, #1
 80008d6:	4920      	ldr	r1, [pc, #128]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008dc:	4413      	add	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	7ffa      	ldrb	r2, [r7, #31]
 80008e4:	3202      	adds	r2, #2
 80008e6:	491c      	ldr	r1, [pc, #112]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008ec:	4413      	add	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	7ffa      	ldrb	r2, [r7, #31]
 80008f4:	3203      	adds	r2, #3
 80008f6:	4918      	ldr	r1, [pc, #96]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008f8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000900:	7ffb      	ldrb	r3, [r7, #31]
 8000902:	3304      	adds	r3, #4
 8000904:	77fb      	strb	r3, [r7, #31]
 8000906:	7ffb      	ldrb	r3, [r7, #31]
 8000908:	2b24      	cmp	r3, #36	; 0x24
 800090a:	d9da      	bls.n	80008c2 <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800091a:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800092a:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800093a:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800094a:	80da      	strh	r2, [r3, #6]
}
 800094c:	bf00      	nop
 800094e:	3724      	adds	r7, #36	; 0x24
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	20000160 	.word	0x20000160
 800095c:	cccccccd 	.word	0xcccccccd
 8000960:	200001b0 	.word	0x200001b0

08000964 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <Inputs_GetEncoderCount+0x4c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <Inputs_GetEncoderCount+0x50>)
 8000972:	8812      	ldrh	r2, [r2, #0]
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	dc03      	bgt.n	8000986 <Inputs_GetEncoderCount+0x22>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f113 0f03 	cmn.w	r3, #3
 8000984:	da0d      	bge.n	80009a2 <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <Inputs_GetEncoderCount+0x4c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <Inputs_GetEncoderCount+0x50>)
 8000990:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	da00      	bge.n	800099a <Inputs_GetEncoderCount+0x36>
 8000998:	3303      	adds	r3, #3
 800099a:	109b      	asrs	r3, r3, #2
 800099c:	425b      	negs	r3, r3
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	e000      	b.n	80009a4 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 80009a2:	2300      	movs	r3, #0
	}
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	20000808 	.word	0x20000808
 80009b4:	20000288 	.word	0x20000288

080009b8 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <Inputs_ButtonsRoutine+0x28>)
 80009be:	f000 f8ab 	bl	8000b18 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <Inputs_ButtonsRoutine+0x2c>)
 80009c4:	f000 f8a8 	bl	8000b18 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <Inputs_ButtonsRoutine+0x30>)
 80009ca:	f000 f8a5 	bl	8000b18 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <Inputs_ButtonsRoutine+0x34>)
 80009d0:	f000 f8a2 	bl	8000b18 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <Inputs_ButtonsRoutine+0x38>)
 80009d6:	f000 f89f 	bl	8000b18 <DB_ButtonProcess>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001e8 	.word	0x200001e8
 80009e4:	20000208 	.word	0x20000208
 80009e8:	20000248 	.word	0x20000248
 80009ec:	20000228 	.word	0x20000228
 80009f0:	20000268 	.word	0x20000268

080009f4 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d82b      	bhi.n	8000a60 <Inputs_ButtonsRegisterCallback+0x6c>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <Inputs_ButtonsRegisterCallback+0x1c>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a31 	.word	0x08000a31
 8000a18:	08000a3d 	.word	0x08000a3d
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000a55 	.word	0x08000a55
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	68b9      	ldr	r1, [r7, #8]
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <Inputs_ButtonsRegisterCallback+0x78>)
 8000a2a:	f000 f84c 	bl	8000ac6 <DB_ButtonPressCallbackRegister>
		break;
 8000a2e:	e018      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <Inputs_ButtonsRegisterCallback+0x7c>)
 8000a36:	f000 f846 	bl	8000ac6 <DB_ButtonPressCallbackRegister>
		break;
 8000a3a:	e012      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	68b9      	ldr	r1, [r7, #8]
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <Inputs_ButtonsRegisterCallback+0x80>)
 8000a42:	f000 f840 	bl	8000ac6 <DB_ButtonPressCallbackRegister>
		break;
 8000a46:	e00c      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <Inputs_ButtonsRegisterCallback+0x84>)
 8000a4e:	f000 f83a 	bl	8000ac6 <DB_ButtonPressCallbackRegister>
		break;
 8000a52:	e006      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <Inputs_ButtonsRegisterCallback+0x88>)
 8000a5a:	f000 f834 	bl	8000ac6 <DB_ButtonPressCallbackRegister>
		break;
 8000a5e:	e000      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 8000a60:	bf00      	nop
	}
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001e8 	.word	0x200001e8
 8000a70:	20000208 	.word	0x20000208
 8000a74:	20000228 	.word	0x20000228
 8000a78:	20000248 	.word	0x20000248
 8000a7c:	20000268 	.word	0x20000268

08000a80 <DB_ButtonInit>:


#include "debounce.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	88fa      	ldrh	r2, [r7, #6]
 8000a9a:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	615a      	str	r2, [r3, #20]
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f003 fb79 	bl	80041f4 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <DB_IsButtonPressed+0x22>
	{
		return 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 8000b0c:	2300      	movs	r3, #0
	}
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d879      	bhi.n	8000c1c <DB_ButtonProcess+0x104>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <DB_ButtonProcess+0x18>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b41 	.word	0x08000b41
 8000b34:	08000b5f 	.word	0x08000b5f
 8000b38:	08000b99 	.word	0x08000b99
 8000b3c:	08000bdd 	.word	0x08000bdd
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffd2 	bl	8000aea <DB_IsButtonPressed>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d062      	beq.n	8000c12 <DB_ButtonProcess+0xfa>
		{
			Button->ButtonState = DEBOUNCE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 8000b52:	f001 ffdb 	bl	8002b0c <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	61da      	str	r2, [r3, #28]
		}
		break;
 8000b5c:	e059      	b.n	8000c12 <DB_ButtonProcess+0xfa>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8000b5e:	f001 ffd5 	bl	8002b0c <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	1ad2      	subs	r2, r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d951      	bls.n	8000c16 <DB_ButtonProcess+0xfe>
		{
			if(DB_IsButtonPressed(Button))
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffb9 	bl	8000aea <DB_IsButtonPressed>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2202      	movs	r2, #2
 8000b82:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8000b84:	f001 ffc2 	bl	8002b0c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	61da      	str	r2, [r3, #28]
			else
			{
				Button->ButtonState = IDLE;
			}
		}
		break;
 8000b8e:	e042      	b.n	8000c16 <DB_ButtonProcess+0xfe>
				Button->ButtonState = IDLE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	761a      	strb	r2, [r3, #24]
		break;
 8000b96:	e03e      	b.n	8000c16 <DB_ButtonProcess+0xfe>
	case PRESSED:
		if(HAL_GetTick() - (Button->LastTick) > 50 )
 8000b98:	f001 ffb8 	bl	8002b0c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	2b32      	cmp	r3, #50	; 0x32
 8000ba6:	d938      	bls.n	8000c1a <DB_ButtonProcess+0x102>
		{
			if(DB_IsButtonPressed(Button))
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff9e 	bl	8000aea <DB_IsButtonPressed>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d008      	beq.n	8000bc6 <DB_ButtonProcess+0xae>
			{
				Button->ButtonState = HOLD;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8000bba:	f001 ffa7 	bl	8002b0c <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonPressAction();
				Button->ButtonState = IDLE;
			}
		}
		break;
 8000bc4:	e029      	b.n	8000c1a <DB_ButtonProcess+0x102>
			else if(NULL != Button->ButtonPressAction)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d025      	beq.n	8000c1a <DB_ButtonProcess+0x102>
				Button->ButtonPressAction();
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	4798      	blx	r3
				Button->ButtonState = IDLE;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	761a      	strb	r2, [r3, #24]
		break;
 8000bda:	e01e      	b.n	8000c1a <DB_ButtonProcess+0x102>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 8000bdc:	f001 ff96 	bl	8002b0c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d915      	bls.n	8000c1c <DB_ButtonProcess+0x104>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonPressAction)
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff7a 	bl	8000aea <DB_IsButtonPressed>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <DB_ButtonProcess+0xf2>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <DB_ButtonProcess+0xf2>
			{
				Button->ButtonHoldAction();
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
		}
	}
}
 8000c10:	e004      	b.n	8000c1c <DB_ButtonProcess+0x104>
		break;
 8000c12:	bf00      	nop
 8000c14:	e002      	b.n	8000c1c <DB_ButtonProcess+0x104>
		break;
 8000c16:	bf00      	nop
 8000c18:	e000      	b.n	8000c1c <DB_ButtonProcess+0x104>
		break;
 8000c1a:	bf00      	nop
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_DMA_Init+0x3c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <MX_DMA_Init+0x3c>)
 8000c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_DMA_Init+0x3c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2038      	movs	r0, #56	; 0x38
 8000c4c:	f002 fd85 	bl	800375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c50:	2038      	movs	r0, #56	; 0x38
 8000c52:	f002 fd9e 	bl	8003792 <HAL_NVIC_EnableIRQ>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b57      	ldr	r3, [pc, #348]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a56      	ldr	r2, [pc, #344]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a4f      	ldr	r2, [pc, #316]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a41      	ldr	r2, [pc, #260]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <MX_GPIO_Init+0x178>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2124      	movs	r1, #36	; 0x24
 8000d0a:	4835      	ldr	r0, [pc, #212]	; (8000de0 <MX_GPIO_Init+0x17c>)
 8000d0c:	f003 fa8a 	bl	8004224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	21c0      	movs	r1, #192	; 0xc0
 8000d14:	4833      	ldr	r0, [pc, #204]	; (8000de4 <MX_GPIO_Init+0x180>)
 8000d16:	f003 fa85 	bl	8004224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 8000d1a:	f240 4301 	movw	r3, #1025	; 0x401
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_GPIO_Init+0x180>)
 8000d30:	f003 f8dc 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 8000d34:	2321      	movs	r3, #33	; 0x21
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4828      	ldr	r0, [pc, #160]	; (8000de8 <MX_GPIO_Init+0x184>)
 8000d48:	f003 f8d0 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	481f      	ldr	r0, [pc, #124]	; (8000de0 <MX_GPIO_Init+0x17c>)
 8000d64:	f003 f8c2 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <MX_GPIO_Init+0x17c>)
 8000d80:	f003 f8b4 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8000d84:	23c0      	movs	r3, #192	; 0xc0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_GPIO_Init+0x180>)
 8000d9c:	f003 f8a6 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8000da0:	2304      	movs	r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_GPIO_Init+0x188>)
 8000db4:	f003 f89a 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_GPIO_Init+0x17c>)
 8000dd0:	f003 f88c 	bl	8003eec <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x58>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e2e:	f003 fa45 	bl	80042bc <HAL_I2C_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e38:	f000 fb47 	bl	80014ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000028c 	.word	0x2000028c
 8000e44:	40005400 	.word	0x40005400
 8000e48:	00061a80 	.word	0x00061a80

08000e4c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <MX_I2C3_Init+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_I2C3_Init+0x58>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e8a:	f003 fa17 	bl	80042bc <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 fb19 	bl	80014ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200002e0 	.word	0x200002e0
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	00061a80 	.word	0x00061a80

08000ea8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a42      	ldr	r2, [pc, #264]	; (8000fd0 <HAL_I2C_MspInit+0x128>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12d      	bne.n	8000f26 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eec:	2312      	movs	r3, #18
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4835      	ldr	r0, [pc, #212]	; (8000fd8 <HAL_I2C_MspInit+0x130>)
 8000f04:	f002 fff2 	bl	8003eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
 8000f18:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f24:	e050      	b.n	8000fc8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <HAL_I2C_MspInit+0x134>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d14b      	bne.n	8000fc8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <HAL_I2C_MspInit+0x138>)
 8000f86:	f002 ffb1 	bl	8003eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <HAL_I2C_MspInit+0x13c>)
 8000fa8:	f002 ffa0 	bl	8003eec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000fb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_I2C_MspInit+0x12c>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	3730      	adds	r7, #48	; 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40005c00 	.word	0x40005c00
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <JoyS_Init+0x18>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 8001026:	f001 fd71 	bl	8002b0c <HAL_GetTick>
 800102a:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 800102c:	e015      	b.n	800105a <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d104      	bne.n	8001042 <JoyS_SetIdleValues+0x24>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e007      	b.n	800106a <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 800105a:	f001 fd57 	bl	8002b0c <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b63      	cmp	r3, #99	; 0x63
 8001066:	d9e2      	bls.n	800102e <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 8001068:	2303      	movs	r3, #3
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 ffe7 	bl	8002050 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 8001082:	4906      	ldr	r1, [pc, #24]	; (800109c <Radio_Init+0x28>)
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fe00 	bl	8001c8a <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <Radio_Init+0x2c>)
 800108c:	f000 fe36 	bl	8001cfc <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 8001090:	f000 fc40 	bl	8001914 <nRF24_TX_Mode>
#endif
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08006adc 	.word	0x08006adc
 80010a0:	08006ae0 	.word	0x08006ae0

080010a4 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]
 80010b8:	e010      	b.n	80010dc <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <Radio_RxBufferPut+0x4c>)
 80010c2:	f7ff fa0f 	bl	80004e4 <RBuffer_Write>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	3301      	adds	r3, #1
 80010da:	73bb      	strb	r3, [r7, #14]
 80010dc:	7bba      	ldrb	r2, [r7, #14]
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3ea      	bcc.n	80010ba <Radio_RxBufferPut+0x16>
	}
	return Status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000035c 	.word	0x2000035c

080010f4 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);			//Get first byte
 8001106:	f107 030d 	add.w	r3, r7, #13
 800110a:	4619      	mov	r1, r3
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <Radio_RxBufferGet+0x6c>)
 800110e:	f7ff fa15 	bl	800053c <RBuffer_Read>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	4313      	orrs	r3, r2
 800111a:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 800111c:	e012      	b.n	8001144 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	7b7a      	ldrb	r2, [r7, #13]
 8001126:	701a      	strb	r2, [r3, #0]
		Length++;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3301      	adds	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);
 800112e:	f107 030d 	add.w	r3, r7, #13
 8001132:	4619      	mov	r1, r3
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <Radio_RxBufferGet+0x6c>)
 8001136:	f7ff fa01 	bl	800053c <RBuffer_Read>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	4313      	orrs	r3, r2
 8001142:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d002      	beq.n	8001150 <Radio_RxBufferGet+0x5c>
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0e6      	beq.n	800111e <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	701a      	strb	r2, [r3, #0]
	return Status;
 8001156:	7bbb      	ldrb	r3, [r7, #14]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000035c 	.word	0x2000035c

08001164 <Radio_TxBufferSend>:
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
	return Status;
}

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800117a:	1d3a      	adds	r2, r7, #4
 800117c:	4413      	add	r3, r2
 800117e:	4619      	mov	r1, r3
 8001180:	4819      	ldr	r0, [pc, #100]	; (80011e8 <Radio_TxBufferSend+0x84>)
 8001182:	f7ff f9db 	bl	800053c <RBuffer_Read>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800118e:	4313      	orrs	r3, r2
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800119e:	3328      	adds	r3, #40	; 0x28
 80011a0:	443b      	add	r3, r7
 80011a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d003      	beq.n	80011b2 <Radio_TxBufferSend+0x4e>
 80011aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0e1      	beq.n	8001176 <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 80011b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d110      	bne.n	80011dc <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 80011ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 feb2 	bl	8001f2c <nRF24_SendPacket>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d0:	4313      	orrs	r3, r2
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <Radio_TxBufferSend+0x88>)
 80011d8:	2202      	movs	r2, #2
 80011da:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000338 	.word	0x20000338
 80011ec:	20000335 	.word	0x20000335

080011f0 <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 80011f6:	f240 4305 	movw	r3, #1029	; 0x405
 80011fa:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <Radio_SendConnectionCheck+0x28>)
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2102      	movs	r1, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fe90 	bl	8001f2c <nRF24_SendPacket>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000335 	.word	0x20000335

0800121c <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process( void (*UserParser)(uint8_t *command, uint8_t length) )			//Process to put in main loop
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	nRF24_Event();											//check for irq's
 8001224:	f000 feec 	bl	8002000 <nRF24_Event>

#ifdef CONTROLLER
	static uint32_t LastTick;

	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 8001228:	f001 fc70 	bl	8002b0c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <Radio_Process+0x90>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b32      	cmp	r3, #50	; 0x32
 8001236:	d91c      	bls.n	8001272 <Radio_Process+0x56>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <Radio_Process+0x94>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <Radio_Process+0x34>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8001240:	f7ff ff90 	bl	8001164 <Radio_TxBufferSend>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10e      	bne.n	8001268 <Radio_Process+0x4c>
			{
				Radio_SendConnectionCheck();
 800124a:	f7ff ffd1 	bl	80011f0 <Radio_SendConnectionCheck>
 800124e:	e00b      	b.n	8001268 <Radio_Process+0x4c>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <Radio_Process+0x94>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <Radio_Process+0x4c>
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <Radio_Process+0x98>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d103      	bne.n	8001268 <Radio_Process+0x4c>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8001260:	f000 f864 	bl	800132c <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 8001264:	f7ff ffc4 	bl	80011f0 <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8001268:	f001 fc50 	bl	8002b0c <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <Radio_Process+0x90>)
 8001270:	6013      	str	r3, [r2, #0]
	{
		Radio_TxBufferSend();	//send ack payload
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <Radio_Process+0x9c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d114      	bne.n	80012a4 <Radio_Process+0x88>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
		uint8_t ReceivedLength;
		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 800127a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff35 	bl	80010f4 <Radio_RxBufferGet>
		if(UserParser != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <Radio_Process+0x82>
		{
			UserParser(ReceivedCommand,ReceivedLength);
 8001290:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001294:	f107 020c 	add.w	r2, r7, #12
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4610      	mov	r0, r2
 800129c:	4798      	blx	r3
		}
		RxStatus = RADIO_OK;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Radio_Process+0x9c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	}
}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000380 	.word	0x20000380
 80012b0:	20000335 	.word	0x20000335
 80012b4:	20000334 	.word	0x20000334
 80012b8:	20000336 	.word	0x20000336

080012bc <nRF24_EventTxCallback>:

//
// -- INTERRUPT --
//
void nRF24_EventTxCallback(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <nRF24_EventTxCallback+0x1c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <nRF24_EventTxCallback+0x20>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000335 	.word	0x20000335
 80012dc:	20000334 	.word	0x20000334

080012e0 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
	RxStatus = RADIO_NEW_RX;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <nRF24_EventRxCallback+0x30>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	701a      	strb	r2, [r3, #0]
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 80012ec:	1dfa      	adds	r2, r7, #7
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fe03 	bl	8001f00 <nRF24_ReadRXPaylaod>
	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 80012fa:	79fa      	ldrb	r2, [r7, #7]
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fece 	bl	80010a4 <Radio_RxBufferPut>
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000336 	.word	0x20000336

08001314 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <nRF24_EventMrCallback+0x14>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20000334 	.word	0x20000334

0800132c <Radio_NoConnectionCallback>:

__weak void Radio_NoConnectionCallback(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f001 fb7e 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f82e 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f7ff fc8c 	bl	8000c64 <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f7ff fc6a 	bl	8000c24 <MX_DMA_Init>
  MX_I2C1_Init();
 8001350:	f7ff fd4e 	bl	8000df0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001354:	f7ff fd7a 	bl	8000e4c <MX_I2C3_Init>
  MX_SPI2_Init();
 8001358:	f000 ff1e 	bl	8002198 <MX_SPI2_Init>
  MX_TIM3_Init();
 800135c:	f001 fa5e 	bl	800281c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001360:	f7ff f91a 	bl	8000598 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001364:	f001 faae 	bl	80028c4 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001368:	f000 f884 	bl	8001474 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2120      	movs	r1, #32
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <main+0x5c>)
 8001372:	f002 ff57 	bl	8004224 <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <main+0x60>)
 8001378:	f7ff fe7c 	bl	8001074 <Radio_Init>
  Inputs_Init();
 800137c:	f7ff fa1c 	bl	80007b8 <Inputs_Init>
  OLED_Init(&hi2c3);
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <main+0x64>)
 8001382:	f000 ffbd 	bl	8002300 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Radio_Process(NULL);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff48 	bl	800121c <Radio_Process>
	  SimpleScheduler();
 800138c:	f000 fefe 	bl	800218c <SimpleScheduler>
	  Inputs_ButtonsRoutine();
 8001390:	f7ff fb12 	bl	80009b8 <Inputs_ButtonsRoutine>
	  Radio_Process(NULL);
 8001394:	e7f7      	b.n	8001386 <main+0x4a>
 8001396:	bf00      	nop
 8001398:	40020400 	.word	0x40020400
 800139c:	200003a0 	.word	0x200003a0
 80013a0:	200002e0 	.word	0x200002e0

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2230      	movs	r2, #48	; 0x30
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fb5a 	bl	8006a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <SystemClock_Config+0xc8>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <SystemClock_Config+0xc8>)
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <SystemClock_Config+0xc8>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <SystemClock_Config+0xcc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a20      	ldr	r2, [pc, #128]	; (8001470 <SystemClock_Config+0xcc>)
 80013ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <SystemClock_Config+0xcc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001414:	2308      	movs	r3, #8
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001420:	2304      	movs	r3, #4
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fba3 	bl	8004b74 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001434:	f000 f849 	bl	80014ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2103      	movs	r1, #3
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fe05 	bl	8005064 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001460:	f000 f833 	bl	80014ca <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	; 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2028      	movs	r0, #40	; 0x28
 800147e:	f002 f96c 	bl	800375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001482:	2028      	movs	r0, #40	; 0x28
 8001484:	f002 f985 	bl	8003792 <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2024      	movs	r0, #36	; 0x24
 800148e:	f002 f964 	bl	800375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001492:	2024      	movs	r0, #36	; 0x24
 8001494:	f002 f97d 	bl	8003792 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2012      	movs	r0, #18
 800149e:	f002 f95c 	bl	800375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014a2:	2012      	movs	r0, #18
 80014a4:	f002 f975 	bl	8003792 <HAL_NVIC_EnableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 80014be:	f000 fd4d 	bl	8001f5c <nRF24_IRQ_Handler>
	}

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ce:	b672      	cpsid	i
}
 80014d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <Error_Handler+0x8>

080014d4 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	if(LastMenuPtr == MenuCurrentMember) return;
 80014de:	4b56      	ldr	r3, [pc, #344]	; (8001638 <Menu_RefreshScreen+0x164>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <Menu_RefreshScreen+0x168>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	f000 80a2 	beq.w	8001630 <Menu_RefreshScreen+0x15c>

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 80014ec:	e00c      	b.n	8001508 <Menu_RefreshScreen+0x34>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <Menu_RefreshScreen+0x16c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4a54      	ldr	r2, [pc, #336]	; (8001644 <Menu_RefreshScreen+0x170>)
 80014f4:	5cd2      	ldrb	r2, [r2, r3]
 80014f6:	3201      	adds	r2, #1
 80014f8:	b2d1      	uxtb	r1, r2
 80014fa:	4a52      	ldr	r2, [pc, #328]	; (8001644 <Menu_RefreshScreen+0x170>)
 80014fc:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <Menu_RefreshScreen+0x174>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a50      	ldr	r2, [pc, #320]	; (8001648 <Menu_RefreshScreen+0x174>)
 8001506:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <Menu_RefreshScreen+0x16c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b4f      	ldr	r3, [pc, #316]	; (800164c <Menu_RefreshScreen+0x178>)
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	461a      	mov	r2, r3
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <Menu_RefreshScreen+0x16c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <Menu_RefreshScreen+0x170>)
 800151c:	5c5b      	ldrb	r3, [r3, r1]
 800151e:	3305      	adds	r3, #5
 8001520:	429a      	cmp	r2, r3
 8001522:	dce4      	bgt.n	80014ee <Menu_RefreshScreen+0x1a>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001524:	e00c      	b.n	8001540 <Menu_RefreshScreen+0x6c>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <Menu_RefreshScreen+0x16c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4a46      	ldr	r2, [pc, #280]	; (8001644 <Menu_RefreshScreen+0x170>)
 800152c:	5cd2      	ldrb	r2, [r2, r3]
 800152e:	3a01      	subs	r2, #1
 8001530:	b2d1      	uxtb	r1, r2
 8001532:	4a44      	ldr	r2, [pc, #272]	; (8001644 <Menu_RefreshScreen+0x170>)
 8001534:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <Menu_RefreshScreen+0x174>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a42      	ldr	r2, [pc, #264]	; (8001648 <Menu_RefreshScreen+0x174>)
 800153e:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <Menu_RefreshScreen+0x16c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <Menu_RefreshScreen+0x178>)
 8001548:	5c9a      	ldrb	r2, [r3, r2]
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <Menu_RefreshScreen+0x16c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <Menu_RefreshScreen+0x170>)
 8001552:	5c5b      	ldrb	r3, [r3, r1]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3e6      	bcc.n	8001526 <Menu_RefreshScreen+0x52>
	}

	OLED_ClearBuffer(BLACK);
 8001558:	2000      	movs	r0, #0
 800155a:	f000 ffdb 	bl	8002514 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f000 ff1d 	bl	80023a0 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8001566:	2101      	movs	r1, #1
 8001568:	4839      	ldr	r0, [pc, #228]	; (8001650 <Menu_RefreshScreen+0x17c>)
 800156a:	f001 f89d 	bl	80026a8 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <Menu_RefreshScreen+0x174>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001574:	e04f      	b.n	8001616 <Menu_RefreshScreen+0x142>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <Menu_RefreshScreen+0x168>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	d126      	bne.n	80015ce <Menu_RefreshScreen+0xfa>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe27 	bl	80001d8 <strlen>
 800158a:	4602      	mov	r2, r0
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	3301      	adds	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	78bb      	ldrb	r3, [r7, #2]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fef8 	bl	80023a0 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 80015b0:	2101      	movs	r1, #1
 80015b2:	4828      	ldr	r0, [pc, #160]	; (8001654 <Menu_RefreshScreen+0x180>)
 80015b4:	f001 f878 	bl	80026a8 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f872 	bl	80026a8 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 80015c4:	2101      	movs	r1, #1
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <Menu_RefreshScreen+0x184>)
 80015c8:	f001 f86e 	bl	80026a8 <OLED_WriteString>
 80015cc:	e01d      	b.n	800160a <Menu_RefreshScreen+0x136>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fe00 	bl	80001d8 <strlen>
 80015d8:	4602      	mov	r2, r0
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	78bb      	ldrb	r3, [r7, #2]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fed1 	bl	80023a0 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f001 f84f 	bl	80026a8 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	3301      	adds	r3, #1
 800160e:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b06      	cmp	r3, #6
 800161a:	d002      	beq.n	8001622 <Menu_RefreshScreen+0x14e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1a9      	bne.n	8001576 <Menu_RefreshScreen+0xa2>
	}
	OLED_SendBuffer();
 8001622:	f000 ff4b 	bl	80024bc <OLED_SendBuffer>
	LastMenuPtr = MenuCurrentMember;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <Menu_RefreshScreen+0x168>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a03      	ldr	r2, [pc, #12]	; (8001638 <Menu_RefreshScreen+0x164>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e000      	b.n	8001632 <Menu_RefreshScreen+0x15e>
	if(LastMenuPtr == MenuCurrentMember) return;
 8001630:	bf00      	nop

}
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000390 	.word	0x20000390
 800163c:	20000078 	.word	0x20000078
 8001640:	2000038c 	.word	0x2000038c
 8001644:	20000388 	.word	0x20000388
 8001648:	2000007c 	.word	0x2000007c
 800164c:	20000384 	.word	0x20000384
 8001650:	08006b14 	.word	0x08006b14
 8001654:	08006b2c 	.word	0x08006b2c
 8001658:	08006b30 	.word	0x08006b30

0800165c <Menu_Next>:

void Menu_Next(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <Menu_Next+0x54>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <Menu_Next+0x54>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <Menu_Next+0x54>)
 8001672:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <Menu_Next+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <Menu_Next+0x5c>)
 800167a:	5cd2      	ldrb	r2, [r2, r3]
 800167c:	3201      	adds	r2, #1
 800167e:	b2d1      	uxtb	r1, r2
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <Menu_Next+0x5c>)
 8001682:	54d1      	strb	r1, [r2, r3]
 8001684:	e00f      	b.n	80016a6 <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <Menu_Next+0x54>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <Menu_Next+0x54>)
 800168e:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Menu_Next+0x54>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f5      	bne.n	8001686 <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <Menu_Next+0x58>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <Menu_Next+0x5c>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 80016a6:	f7ff ff15 	bl	80014d4 <Menu_RefreshScreen>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000078 	.word	0x20000078
 80016b4:	2000038c 	.word	0x2000038c
 80016b8:	20000384 	.word	0x20000384

080016bc <Menu_Prev>:

void Menu_Prev(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <Menu_Prev+0x58>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01a      	beq.n	8001700 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <Menu_Prev+0x58>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a10      	ldr	r2, [pc, #64]	; (8001714 <Menu_Prev+0x58>)
 80016d2:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <Menu_Prev+0x5c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4a10      	ldr	r2, [pc, #64]	; (800171c <Menu_Prev+0x60>)
 80016da:	5cd2      	ldrb	r2, [r2, r3]
 80016dc:	3a01      	subs	r2, #1
 80016de:	b2d1      	uxtb	r1, r2
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <Menu_Prev+0x60>)
 80016e2:	54d1      	strb	r1, [r2, r3]
 80016e4:	e011      	b.n	800170a <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <Menu_Prev+0x58>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a09      	ldr	r2, [pc, #36]	; (8001714 <Menu_Prev+0x58>)
 80016ee:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <Menu_Prev+0x5c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4a09      	ldr	r2, [pc, #36]	; (800171c <Menu_Prev+0x60>)
 80016f6:	5cd2      	ldrb	r2, [r2, r3]
 80016f8:	3201      	adds	r2, #1
 80016fa:	b2d1      	uxtb	r1, r2
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <Menu_Prev+0x60>)
 80016fe:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <Menu_Prev+0x58>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ed      	bne.n	80016e6 <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 800170a:	f7ff fee3 	bl	80014d4 <Menu_RefreshScreen>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000078 	.word	0x20000078
 8001718:	2000038c 	.word	0x2000038c
 800171c:	20000384 	.word	0x20000384

08001720 <Menu_Select>:



void Menu_Select(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <Menu_Select+0x48>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00e      	beq.n	800174c <Menu_Select+0x2c>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <Menu_Select+0x48>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <Menu_Select+0x48>)
 8001736:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <Menu_Select+0x48>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <Menu_Select+0x4c>)
 800173e:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <Menu_Select+0x50>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <Menu_Select+0x50>)
 800174a:	701a      	strb	r2, [r3, #0]
	}

	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <Menu_Select+0x48>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <Menu_Select+0x3e>
	{
		MenuCurrentMember->FunctionPtr();
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <Menu_Select+0x48>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	4798      	blx	r3
	}

	Menu_RefreshScreen();
 800175e:	f7ff feb9 	bl	80014d4 <Menu_RefreshScreen>
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000078 	.word	0x20000078
 800176c:	2000007c 	.word	0x2000007c
 8001770:	2000038c 	.word	0x2000038c

08001774 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f001 f9cf 	bl	8002b24 <HAL_Delay>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <nRF24_SendSpi+0x28>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	f003 feee 	bl	800558a <HAL_SPI_Transmit>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000394 	.word	0x20000394

080017bc <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <nRF24_ReadSpi+0x28>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	f004 f814 	bl	8005802 <HAL_SPI_Receive>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000394 	.word	0x20000394

080017e8 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <nRF24_ReadRegister+0x44>)
 80017fc:	f002 fd12 	bl	8004224 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	2101      	movs	r1, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ffc3 	bl	8001790 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800180a:	f107 030f 	add.w	r3, r7, #15
 800180e:	2101      	movs	r1, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ffd3 	bl	80017bc <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001816:	2201      	movs	r2, #1
 8001818:	2140      	movs	r1, #64	; 0x40
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <nRF24_ReadRegister+0x44>)
 800181c:	f002 fd02 	bl	8004224 <HAL_GPIO_WritePin>

	return result;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020800 	.word	0x40020800

08001830 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <nRF24_ReadRegisters+0x44>)
 800184a:	f002 fceb 	bl	8004224 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff9c 	bl	8001790 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	4619      	mov	r1, r3
 800185c:	6838      	ldr	r0, [r7, #0]
 800185e:	f7ff ffad 	bl	80017bc <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001862:	2201      	movs	r2, #1
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <nRF24_ReadRegisters+0x44>)
 8001868:	f002 fcdc 	bl	8004224 <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020800 	.word	0x40020800

08001878 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	460a      	mov	r2, r1
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	b2db      	uxtb	r3, r3
 8001890:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001896:	2200      	movs	r2, #0
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	4809      	ldr	r0, [pc, #36]	; (80018c0 <nRF24_WriteRegister+0x48>)
 800189c:	f002 fcc2 	bl	8004224 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2102      	movs	r1, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff72 	bl	8001790 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80018ac:	2201      	movs	r2, #1
 80018ae:	2140      	movs	r1, #64	; 0x40
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <nRF24_WriteRegister+0x48>)
 80018b2:	f002 fcb7 	bl	8004224 <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40020800 	.word	0x40020800

080018c4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80018de:	2200      	movs	r2, #0
 80018e0:	2140      	movs	r1, #64	; 0x40
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <nRF24_WriteRegisters+0x4c>)
 80018e4:	f002 fc9e 	bl	8004224 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff4f 	bl	8001790 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	4619      	mov	r1, r3
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f7ff ff4a 	bl	8001790 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80018fc:	2201      	movs	r2, #1
 80018fe:	2140      	movs	r1, #64	; 0x40
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <nRF24_WriteRegisters+0x4c>)
 8001902:	f002 fc8f 	bl	8004224 <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020800 	.word	0x40020800

08001914 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800191a:	2200      	movs	r2, #0
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <nRF24_TX_Mode+0x4c>)
 8001920:	f002 fc80 	bl	8004224 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001924:	f000 f81e 	bl	8001964 <nRF24_ReadConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f818 	bl	8001974 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001944:	2070      	movs	r0, #112	; 0x70
 8001946:	f000 f870 	bl	8001a2a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800194a:	f000 f87d 	bl	8001a48 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800194e:	f000 f895 	bl	8001a7c <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff ff0e 	bl	8001774 <nRF24_Delay_ms>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020800 	.word	0x40020800

08001964 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff ff3d 	bl	80017e8 <nRF24_ReadRegister>
 800196e:	4603      	mov	r3, r0
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}

08001974 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4619      	mov	r1, r3
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff ff78 	bl	8001878 <nRF24_WriteRegister>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800199a:	2006      	movs	r0, #6
 800199c:	f7ff ff24 	bl	80017e8 <nRF24_ReadRegister>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	b25a      	sxtb	r2, r3
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	4619      	mov	r1, r3
 80019c0:	2006      	movs	r0, #6
 80019c2:	f7ff ff59 	bl	8001878 <nRF24_WriteRegister>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80019d8:	2006      	movs	r0, #6
 80019da:	f7ff ff05 	bl	80017e8 <nRF24_ReadRegister>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80019e8:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d104      	bne.n	80019fa <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e006      	b.n	8001a08 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d103      	bne.n	8001a08 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2006      	movs	r0, #6
 8001a0e:	f7ff ff33 	bl	8001878 <nRF24_WriteRegister>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f7ff fee2 	bl	80017e8 <nRF24_ReadRegister>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	4619      	mov	r1, r3
 8001a38:	2007      	movs	r0, #7
 8001a3a:	f7ff ff1d 	bl	8001878 <nRF24_WriteRegister>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001a4e:	23e2      	movs	r3, #226	; 0xe2
 8001a50:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001a52:	2200      	movs	r2, #0
 8001a54:	2140      	movs	r1, #64	; 0x40
 8001a56:	4808      	ldr	r0, [pc, #32]	; (8001a78 <nRF24_FlushRX+0x30>)
 8001a58:	f002 fbe4 	bl	8004224 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fe95 	bl	8001790 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001a66:	2201      	movs	r2, #1
 8001a68:	2140      	movs	r1, #64	; 0x40
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <nRF24_FlushRX+0x30>)
 8001a6c:	f002 fbda 	bl	8004224 <HAL_GPIO_WritePin>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40020800 	.word	0x40020800

08001a7c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8001a82:	23e1      	movs	r3, #225	; 0xe1
 8001a84:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001a86:	2200      	movs	r2, #0
 8001a88:	2140      	movs	r1, #64	; 0x40
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <nRF24_FlushTX+0x30>)
 8001a8c:	f002 fbca 	bl	8004224 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe7b 	bl	8001790 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2140      	movs	r1, #64	; 0x40
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <nRF24_FlushTX+0x30>)
 8001aa0:	f002 fbc0 	bl	8004224 <HAL_GPIO_WritePin>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40020800 	.word	0x40020800

08001ab0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001aba:	f7ff ff53 	bl	8001964 <nRF24_ReadConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e003      	b.n	8001ada <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	f023 0308 	bic.w	r3, r3, #8
 8001ad8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff49 	bl	8001974 <nRF24_WriteConfig>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001af4:	f7ff ff36 	bl	8001964 <nRF24_ReadConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d104      	bne.n	8001b0c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e003      	b.n	8001b14 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff2c 	bl	8001974 <nRF24_WriteConfig>
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f7ff fe93 	bl	8001878 <nRF24_WriteRegister>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2005      	movs	r0, #5
 8001b70:	f7ff fe82 	bl	8001878 <nRF24_WriteRegister>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d901      	bls.n	8001b96 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001b92:	2305      	movs	r3, #5
 8001b94:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7ff fe26 	bl	80017e8 <nRF24_ReadRegister>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d10a      	bne.n	8001bbc <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	b25a      	sxtb	r2, r3
 8001bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e00b      	b.n	8001bd4 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	b25a      	sxtb	r2, r3
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff fe4d 	bl	8001878 <nRF24_WriteRegister>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	460a      	mov	r2, r1
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d901      	bls.n	8001c00 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff fdf1 	bl	80017e8 <nRF24_ReadRegister>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10a      	bne.n	8001c26 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2201      	movs	r2, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	b25a      	sxtb	r2, r3
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e00b      	b.n	8001c3e <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4619      	mov	r1, r3
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff fe18 	bl	8001878 <nRF24_WriteRegister>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d901      	bls.n	8001c64 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001c60:	2305      	movs	r3, #5
 8001c62:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d801      	bhi.n	8001c6e <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	3b02      	subs	r3, #2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f7ff fdfb 	bl	8001878 <nRF24_WriteRegister>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	6039      	str	r1, [r7, #0]
 8001c94:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <nRF24_SetRXAddress+0x18>
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d11d      	bne.n	8001cde <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e00d      	b.n	8001cc4 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	441a      	add	r2, r3
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	f1c3 0302 	rsb	r3, r3, #2
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	3310      	adds	r3, #16
 8001cb8:	443b      	add	r3, r7
 8001cba:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d9ee      	bls.n	8001ca8 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	330a      	adds	r3, #10
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f107 010c 	add.w	r1, r7, #12
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fdf4 	bl	80018c4 <nRF24_WriteRegisters>
	{
 8001cdc:	e00a      	b.n	8001cf4 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	330a      	adds	r3, #10
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7ff fdc3 	bl	8001878 <nRF24_WriteRegister>
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7ff fd8f 	bl	8001830 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e00c      	b.n	8001d32 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	f1c3 0302 	rsb	r3, r3, #2
 8001d20:	3210      	adds	r2, #16
 8001d22:	443a      	add	r2, r7
 8001d24:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <nRF24_SetTXAddress+0x88>)
 8001d2a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d9ef      	bls.n	8001d18 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e00d      	b.n	8001d5a <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	441a      	add	r2, r3
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	f1c3 0302 	rsb	r3, r3, #2
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	443b      	add	r3, r7
 8001d50:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	3301      	adds	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d9ee      	bls.n	8001d3e <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2203      	movs	r2, #3
 8001d66:	4619      	mov	r1, r3
 8001d68:	200a      	movs	r0, #10
 8001d6a:	f7ff fdab 	bl	80018c4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2203      	movs	r2, #3
 8001d74:	4619      	mov	r1, r3
 8001d76:	2010      	movs	r0, #16
 8001d78:	f7ff fda4 	bl	80018c4 <nRF24_WriteRegisters>

}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000398 	.word	0x20000398

08001d88 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001d8e:	f7ff fe44 	bl	8001a1a <nRF24_ReadStatus>
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d9c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fe42 	bl	8001a2a <nRF24_WriteStatus>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8001db8:	2060      	movs	r0, #96	; 0x60
 8001dba:	f7ff fd15 	bl	80017e8 <nRF24_ReadRegister>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d906      	bls.n	8001dd6 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8001dc8:	f7ff fe3e 	bl	8001a48 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f7ff fcd1 	bl	8001774 <nRF24_Delay_ms>
        return 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001dea:	f7ff fdbb 	bl	8001964 <nRF24_ReadConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e003      	b.n	8001e0a <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e08:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fdb1 	bl	8001974 <nRF24_WriteConfig>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001e24:	f7ff fd9e 	bl	8001964 <nRF24_ReadConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d104      	bne.n	8001e3c <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	e003      	b.n	8001e44 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	f023 0320 	bic.w	r3, r3, #32
 8001e42:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fd94 	bl	8001974 <nRF24_WriteConfig>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001e5e:	f7ff fd81 	bl	8001964 <nRF24_ReadConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e003      	b.n	8001e7e <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	f023 0310 	bic.w	r3, r3, #16
 8001e7c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fd77 	bl	8001974 <nRF24_WriteConfig>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	20a0      	movs	r0, #160	; 0xa0
 8001ea2:	f7ff fd0f 	bl	80018c4 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <nRF24_WaitTX+0x4c>)
 8001ebc:	f002 f9b2 	bl	8004224 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff fc57 	bl	8001774 <nRF24_Delay_ms>
	NRF24_CE_LOW;
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <nRF24_WaitTX+0x4c>)
 8001ecc:	f002 f9aa 	bl	8004224 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff fc4f 	bl	8001774 <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 8001ed6:	f7ff fda0 	bl	8001a1a <nRF24_ReadStatus>
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <nRF24_WaitTX+0x42>
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ee      	beq.n	8001ed0 <nRF24_WaitTX+0x20>

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020800 	.word	0x40020800

08001f00 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8001f0a:	f7ff ff50 	bl	8001dae <nRF24_GetDynamicPayloadSize>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	2061      	movs	r0, #97	; 0x61
 8001f20:	f7ff fc86 	bl	8001830 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d901      	bls.n	8001f42 <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e007      	b.n	8001f52 <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa1 	bl	8001e8e <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 8001f4c:	f7ff ffb0 	bl	8001eb0 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <nRF24_IRQ_Handler+0x14>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	2000039e 	.word	0x2000039e

08001f74 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <nRF24_IRQ_Read+0x7c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d130      	bne.n	8001fe6 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <nRF24_IRQ_Read+0x7c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8001f8a:	f7ff fd46 	bl	8001a1a <nRF24_ReadStatus>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <nRF24_IRQ_Read+0x80>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fac:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8001fae:	79bb      	ldrb	r3, [r7, #6]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <nRF24_IRQ_Read+0x84>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <nRF24_IRQ_Read+0x88>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fd22 	bl	8001a2a <nRF24_WriteStatus>
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000039e 	.word	0x2000039e
 8001ff4:	2000039b 	.word	0x2000039b
 8001ff8:	2000039c 	.word	0x2000039c
 8001ffc:	2000039d 	.word	0x2000039d

08002000 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8002004:	f7ff ffb6 	bl	8001f74 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <nRF24_Event+0x44>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002010:	f7ff f966 	bl	80012e0 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <nRF24_Event+0x44>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <nRF24_Event+0x48>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002022:	f7ff f94b 	bl	80012bc <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <nRF24_Event+0x48>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <nRF24_Event+0x4c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002034:	f7ff f96e 	bl	8001314 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <nRF24_Event+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
	}
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000039b 	.word	0x2000039b
 8002048:	2000039c 	.word	0x2000039c
 800204c:	2000039d 	.word	0x2000039d

08002050 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002058:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <nRF24_Init+0xc4>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	482d      	ldr	r0, [pc, #180]	; (8002118 <nRF24_Init+0xc8>)
 8002064:	f002 f8de 	bl	8004224 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002068:	2201      	movs	r2, #1
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	482a      	ldr	r0, [pc, #168]	; (8002118 <nRF24_Init+0xc8>)
 800206e:	f002 f8d9 	bl	8004224 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002072:	2005      	movs	r0, #5
 8002074:	f7ff fb7e 	bl	8001774 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002078:	2003      	movs	r0, #3
 800207a:	f7ff fc89 	bl	8001990 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800207e:	2002      	movs	r0, #2
 8002080:	f7ff fca5 	bl	80019ce <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff fd13 	bl	8001ab0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff fd2d 	bl	8001aea <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002090:	2107      	movs	r1, #7
 8002092:	2004      	movs	r0, #4
 8002094:	f7ff fd46 	bl	8001b24 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002098:	201d      	movs	r0, #29
 800209a:	f7ff fba5 	bl	80017e8 <nRF24_ReadRegister>
 800209e:	4603      	mov	r3, r0
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	201d      	movs	r0, #29
 80020aa:	f7ff fbe5 	bl	8001878 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80020ae:	213f      	movs	r1, #63	; 0x3f
 80020b0:	201c      	movs	r0, #28
 80020b2:	f7ff fbe1 	bl	8001878 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80020b6:	200a      	movs	r0, #10
 80020b8:	f7ff fd4f 	bl	8001b5a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80020bc:	2101      	movs	r1, #1
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff fd5c 	bl	8001b7c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80020c4:	2101      	movs	r1, #1
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fd8d 	bl	8001be6 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80020cc:	2003      	movs	r0, #3
 80020ce:	f7ff fdbf 	bl	8001c50 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff fb4e 	bl	8001774 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff fe81 	bl	8001de0 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff fe9b 	bl	8001e1a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff feb5 	bl	8001e54 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff fb42 	bl	8001774 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80020f0:	f7ff fe4a 	bl	8001d88 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 80020f4:	201d      	movs	r0, #29
 80020f6:	f7ff fb77 	bl	80017e8 <nRF24_ReadRegister>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	201d      	movs	r0, #29
 8002106:	f7ff fbb7 	bl	8001878 <nRF24_WriteRegister>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000394 	.word	0x20000394
 8002118:	40020800 	.word	0x40020800

0800211c <ToggleLed>:

//
//Programs
//
void ToggleLed(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002120:	2104      	movs	r1, #4
 8002122:	4802      	ldr	r0, [pc, #8]	; (800212c <ToggleLed+0x10>)
 8002124:	f002 f897 	bl	8004256 <HAL_GPIO_TogglePin>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40020400 	.word	0x40020400

08002130 <MenuTask>:

void MenuTask(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
	static uint8_t FirstEnterFlag = 0;
	int8_t EncoderRotation = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	71fb      	strb	r3, [r7, #7]

	if(0 == FirstEnterFlag)
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MenuTask+0x50>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <MenuTask+0x26>
	{
		Menu_RefreshScreen();
 8002142:	f7ff f9c7 	bl	80014d4 <Menu_RefreshScreen>
		FirstEnterFlag = 1;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MenuTask+0x50>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]

		Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, ToggleLed);
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <MenuTask+0x54>)
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <MenuTask+0x58>)
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fc4f 	bl	80009f4 <Inputs_ButtonsRegisterCallback>
	}

	EncoderRotation = Inputs_GetEncoderCount();
 8002156:	f7fe fc05 	bl	8000964 <Inputs_GetEncoderCount>
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	dd02      	ble.n	800216c <MenuTask+0x3c>
	{
		Menu_Next();
 8002166:	f7ff fa79 	bl	800165c <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 800216a:	e005      	b.n	8002178 <MenuTask+0x48>
	else if(EncoderRotation < 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	da01      	bge.n	8002178 <MenuTask+0x48>
		Menu_Prev();
 8002174:	f7ff faa2 	bl	80016bc <Menu_Prev>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000039f 	.word	0x2000039f
 8002184:	0800211d 	.word	0x0800211d
 8002188:	08001721 	.word	0x08001721

0800218c <SimpleScheduler>:

void SimpleScheduler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	MenuTask();
 8002190:	f7ff ffce 	bl	8002130 <MenuTask>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_SPI2_Init+0x64>)
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <MX_SPI2_Init+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_SPI2_Init+0x64>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_SPI2_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_SPI2_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_SPI2_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_SPI2_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_SPI2_Init+0x64>)
 80021c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_SPI2_Init+0x64>)
 80021cc:	2218      	movs	r2, #24
 80021ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_SPI2_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_SPI2_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <MX_SPI2_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_SPI2_Init+0x64>)
 80021e4:	220a      	movs	r2, #10
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <MX_SPI2_Init+0x64>)
 80021ea:	f003 f945 	bl	8005478 <HAL_SPI_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021f4:	f7ff f969 	bl	80014ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200003a0 	.word	0x200003a0
 8002200:	40003800 	.word	0x40003800

08002204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_SPI_MspInit+0x84>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12c      	bne.n	8002280 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_SPI_MspInit+0x88>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_SPI_MspInit+0x88>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_SPI_MspInit+0x88>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_SPI_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_SPI_MspInit+0x88>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_SPI_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800225e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002270:	2305      	movs	r3, #5
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <HAL_SPI_MspInit+0x8c>)
 800227c:	f001 fe36 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40003800 	.word	0x40003800
 800228c:	40023800 	.word	0x40023800
 8002290:	40020400 	.word	0x40020400

08002294 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af04      	add	r7, sp, #16
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <OLED_SendCmdSequence+0x34>)
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	9202      	str	r2, [sp, #8]
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	2200      	movs	r2, #0
 80022b6:	2178      	movs	r1, #120	; 0x78
 80022b8:	f002 f944 	bl	8004544 <HAL_I2C_Mem_Write>
 80022bc:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200003f8 	.word	0x200003f8

080022cc <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af04      	add	r7, sp, #16
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <OLED_SendData+0x30>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2301      	movs	r3, #1
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	2178      	movs	r1, #120	; 0x78
 80022ee:	f002 f929 	bl	8004544 <HAL_I2C_Mem_Write>
 80022f2:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200003f8 	.word	0x200003f8

08002300 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <OLED_Init+0x28>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <OLED_Init+0x2c>)
 8002310:	f000 f916 	bl	8002540 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002314:	2110      	movs	r1, #16
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <OLED_Init+0x30>)
 8002318:	f7ff ffbc 	bl	8002294 <OLED_SendCmdSequence>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200003f8 	.word	0x200003f8
 800232c:	08006b34 	.word	0x08006b34
 8002330:	20000080 	.word	0x20000080

08002334 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d802      	bhi.n	8002354 <OLED_SetDeviceCursor+0x20>
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d901      	bls.n	8002358 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e01f      	b.n	8002398 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	3302      	adds	r3, #2
 800235c:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	b2db      	uxtb	r3, r3
 8002366:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f043 0310 	orr.w	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002376:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	b25b      	sxtb	r3, r3
 8002380:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002384:	b25b      	sxtb	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	2103      	movs	r1, #3
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff7f 	bl	8002294 <OLED_SendCmdSequence>

	return Status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	460a      	mov	r2, r1
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db02      	blt.n	80023be <OLED_MoveCursor+0x1e>
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	2b3f      	cmp	r3, #63	; 0x3f
 80023bc:	d901      	bls.n	80023c2 <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00b      	b.n	80023da <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <OLED_MoveCursor+0x48>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <OLED_MoveCursor+0x48>)
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <OLED_MoveCursor+0x48>)
 80023d6:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200003fc 	.word	0x200003fc

080023ec <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e04f      	b.n	80024a2 <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002402:	78bb      	ldrb	r3, [r7, #2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d116      	bne.n	8002436 <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002410:	789b      	ldrb	r3, [r3, #2]
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	4413      	add	r3, r2
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <OLED_WriteToBuffer+0xcc>)
 8002418:	5cd1      	ldrb	r1, [r2, r3]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002426:	789b      	ldrb	r3, [r3, #2]
 8002428:	01db      	lsls	r3, r3, #7
 800242a:	4403      	add	r3, r0
 800242c:	430a      	orrs	r2, r1
 800242e:	b2d1      	uxtb	r1, r2
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <OLED_WriteToBuffer+0xcc>)
 8002432:	54d1      	strb	r1, [r2, r3]
 8002434:	e020      	b.n	8002478 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002436:	78bb      	ldrb	r3, [r7, #2]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11b      	bne.n	8002474 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002444:	789b      	ldrb	r3, [r3, #2]
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	4413      	add	r3, r2
 800244a:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <OLED_WriteToBuffer+0xcc>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	b25a      	sxtb	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b25b      	sxtb	r3, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	b25b      	sxtb	r3, r3
 800245a:	4013      	ands	r3, r2
 800245c:	b25a      	sxtb	r2, r3
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002466:	789b      	ldrb	r3, [r3, #2]
 8002468:	01db      	lsls	r3, r3, #7
 800246a:	440b      	add	r3, r1
 800246c:	b2d1      	uxtb	r1, r2
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <OLED_WriteToBuffer+0xcc>)
 8002470:	54d1      	strb	r1, [r2, r3]
 8002472:	e001      	b.n	8002478 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e019      	b.n	80024ac <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <OLED_WriteToBuffer+0xc8>)
 8002482:	7852      	ldrb	r2, [r2, #1]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff8a 	bl	80023a0 <OLED_MoveCursor>
 800248c:	4603      	mov	r3, r0
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00a      	b.n	80024ac <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3301      	adds	r3, #1
 800249a:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3301      	adds	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3ab      	bcc.n	8002402 <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200003fc 	.word	0x200003fc
 80024b8:	20000408 	.word	0x20000408

080024bc <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	71bb      	strb	r3, [r7, #6]
 80024ca:	e019      	b.n	8002500 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	4619      	mov	r1, r3
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7ff ff2f 	bl	8002334 <OLED_SetDeviceCursor>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4313      	orrs	r3, r2
 80024de:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	01db      	lsls	r3, r3, #7
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <OLED_SendBuffer+0x54>)
 80024e6:	4413      	add	r3, r2
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff feee 	bl	80022cc <OLED_SendData>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	3301      	adds	r3, #1
 80024fe:	71bb      	strb	r3, [r7, #6]
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	2b07      	cmp	r3, #7
 8002504:	d9e2      	bls.n	80024cc <OLED_SendBuffer+0x10>
	}
	return Status;
 8002506:	79fb      	ldrb	r3, [r7, #7]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000408 	.word	0x20000408

08002514 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	4613      	mov	r3, r2
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252a:	4619      	mov	r1, r3
 800252c:	4803      	ldr	r0, [pc, #12]	; (800253c <OLED_ClearBuffer+0x28>)
 800252e:	f004 fa9d 	bl	8006a6c <memset>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000408 	.word	0x20000408

08002540 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3301      	adds	r3, #1
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3302      	adds	r3, #2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002558:	7bbb      	ldrb	r3, [r7, #14]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d802      	bhi.n	8002564 <OLED_ChangeFont+0x24>
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d901      	bls.n	8002568 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e00e      	b.n	8002586 <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <OLED_ChangeFont+0x54>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <OLED_ChangeFont+0x54>)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <OLED_ChangeFont+0x54>)
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3303      	adds	r3, #3
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <OLED_ChangeFont+0x54>)
 8002582:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000400 	.word	0x20000400

08002598 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d901      	bls.n	80025b6 <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06f      	b.n	8002696 <OLED_WriteChar+0xfe>
	}
	switch(character)
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b0a      	cmp	r3, #10
 80025ba:	d009      	beq.n	80025d0 <OLED_WriteChar+0x38>
 80025bc:	2b0d      	cmp	r3, #13
 80025be:	d113      	bne.n	80025e8 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <OLED_WriteChar+0x108>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	4619      	mov	r1, r3
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff feea 	bl	80023a0 <OLED_MoveCursor>
 80025cc:	4603      	mov	r3, r0
 80025ce:	e062      	b.n	8002696 <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <OLED_WriteChar+0x108>)
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <OLED_WriteChar+0x108>)
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	3308      	adds	r3, #8
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7ff fede 	bl	80023a0 <OLED_MoveCursor>
 80025e4:	4603      	mov	r3, r0
 80025e6:	e056      	b.n	8002696 <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <OLED_WriteChar+0x10c>)
 80025ec:	7912      	ldrb	r2, [r2, #4]
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <OLED_WriteChar+0x10c>)
 80025f4:	795b      	ldrb	r3, [r3, #5]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	fb12 f303 	smulbb	r3, r2, r3
 80025fc:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <OLED_WriteChar+0x10c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	3304      	adds	r3, #4
 8002606:	4413      	add	r3, r2
 8002608:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 800260a:	2300      	movs	r3, #0
 800260c:	75bb      	strb	r3, [r7, #22]
 800260e:	e00c      	b.n	800262a <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8002610:	7dbb      	ldrb	r3, [r7, #22]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	3318      	adds	r3, #24
 8002618:	443b      	add	r3, r7
 800261a:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3301      	adds	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002624:	7dbb      	ldrb	r3, [r7, #22]
 8002626:	3301      	adds	r3, #1
 8002628:	75bb      	strb	r3, [r7, #22]
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <OLED_WriteChar+0x10c>)
 800262c:	795b      	ldrb	r3, [r3, #5]
 800262e:	7dba      	ldrb	r2, [r7, #22]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3ed      	bcc.n	8002610 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <OLED_WriteChar+0x10c>)
 8002636:	7959      	ldrb	r1, [r3, #5]
 8002638:	79ba      	ldrb	r2, [r7, #6]
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fed4 	bl	80023ec <OLED_WriteToBuffer>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	4313      	orrs	r3, r2
 800264c:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <OLED_WriteChar+0x108>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <OLED_WriteChar+0x10c>)
 8002656:	795b      	ldrb	r3, [r3, #5]
 8002658:	4413      	add	r3, r2
 800265a:	2b7f      	cmp	r3, #127	; 0x7f
 800265c:	dd1a      	ble.n	8002694 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <OLED_WriteChar+0x108>)
 8002660:	785b      	ldrb	r3, [r3, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8002666:	2100      	movs	r1, #0
 8002668:	2000      	movs	r0, #0
 800266a:	f7ff fe99 	bl	80023a0 <OLED_MoveCursor>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	4313      	orrs	r3, r2
 8002676:	75fb      	strb	r3, [r7, #23]
 8002678:	e00c      	b.n	8002694 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <OLED_WriteChar+0x108>)
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	3308      	adds	r3, #8
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff fe8b 	bl	80023a0 <OLED_MoveCursor>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	4313      	orrs	r3, r2
 8002692:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 8002694:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200003fc 	.word	0x200003fc
 80026a4:	20000400 	.word	0x20000400

080026a8 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d910      	bls.n	80026e0 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e013      	b.n	80026ea <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff64 	bl	8002598 <OLED_WriteChar>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	73fb      	strb	r3, [r7, #15]
		String++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3301      	adds	r3, #1
 80026de:	607b      	str	r3, [r7, #4]
	while(*String)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ec      	bne.n	80026c2 <OLED_WriteString+0x1a>
	}
	return Status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_MspInit+0x4c>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_MspInit+0x4c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_MspInit+0x4c>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_MspInit+0x4c>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <NMI_Handler+0x4>

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002790:	f000 f9a8 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <ADC_IRQHandler+0x10>)
 800279e:	f000 fa28 	bl	8002bf2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200000b8 	.word	0x200000b8

080027ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027b2:	f003 fef9 	bl	80065a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000850 	.word	0x20000850

080027c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <SPI2_IRQHandler+0x10>)
 80027c6:	f003 facf 	bl	8005d68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200003a0 	.word	0x200003a0

080027d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80027d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027dc:	f001 fd56 	bl	800428c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <DMA2_Stream0_IRQHandler+0x10>)
 80027ea:	f001 f915 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000100 	.word	0x20000100

080027f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <SystemInit+0x20>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <SystemInit+0x20>)
 8002804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	; 0x30
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f004 f91e 	bl	8006a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <MX_TIM3_Init+0xa0>)
 800283a:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <MX_TIM3_Init+0xa4>)
 800283c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_TIM3_Init+0xa0>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_TIM3_Init+0xa0>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_TIM3_Init+0xa0>)
 800284c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002850:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_TIM3_Init+0xa0>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_TIM3_Init+0xa0>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800285e:	2303      	movs	r3, #3
 8002860:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002866:	2301      	movs	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002876:	2301      	movs	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	4619      	mov	r1, r3
 8002888:	480c      	ldr	r0, [pc, #48]	; (80028bc <MX_TIM3_Init+0xa0>)
 800288a:	f003 fd59 	bl	8006340 <HAL_TIM_Encoder_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002894:	f7fe fe19 	bl	80014ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_TIM3_Init+0xa0>)
 80028a6:	f004 f85f 	bl	8006968 <HAL_TIMEx_MasterConfigSynchronization>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80028b0:	f7fe fe0b 	bl	80014ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000808 	.word	0x20000808
 80028c0:	40000400 	.word	0x40000400

080028c4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_TIM10_Init+0x40>)
 80028ca:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <MX_TIM10_Init+0x44>)
 80028cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_TIM10_Init+0x40>)
 80028d0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80028d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_TIM10_Init+0x40>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_TIM10_Init+0x40>)
 80028de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_TIM10_Init+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_TIM10_Init+0x40>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_TIM10_Init+0x40>)
 80028f2:	f003 fc7b 	bl	80061ec <HAL_TIM_Base_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80028fc:	f7fe fde5 	bl	80014ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000850 	.word	0x20000850
 8002908:	40014400 	.word	0x40014400

0800290c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_TIM_Encoder_MspInit+0x84>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12b      	bne.n	8002986 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_TIM_Encoder_MspInit+0x88>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_TIM_Encoder_MspInit+0x88>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_TIM_Encoder_MspInit+0x88>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_TIM_Encoder_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_TIM_Encoder_MspInit+0x88>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_TIM_Encoder_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002966:	23c0      	movs	r3, #192	; 0xc0
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002976:	2302      	movs	r3, #2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002982:	f001 fab3 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40000400 	.word	0x40000400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020000 	.word	0x40020000

0800299c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_TIM_Base_MspInit+0x48>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d115      	bne.n	80029da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_TIM_Base_MspInit+0x4c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_TIM_Base_MspInit+0x4c>)
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_Base_MspInit+0x4c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2019      	movs	r0, #25
 80029d0:	f000 fec3 	bl	800375a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029d4:	2019      	movs	r0, #25
 80029d6:	f000 fedc 	bl	8003792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40023800 	.word	0x40023800

080029ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a08:	4c0b      	ldr	r4, [pc, #44]	; (8002a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a16:	f7ff feef 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f004 f82f 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1e:	f7fe fc8d 	bl	800133c <main>
  bx  lr    
 8002a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a2c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002a30:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 8002a34:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002a38:	2000089c 	.word	0x2000089c

08002a3c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <DMA1_Stream0_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 fe6b 	bl	8003744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fe3e 	bl	80026f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fe83 	bl	80037ae <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 fe4b 	bl	800375a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000090 	.word	0x20000090
 8002adc:	20000098 	.word	0x20000098
 8002ae0:	20000094 	.word	0x20000094

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000098 	.word	0x20000098
 8002b08:	20000898 	.word	0x20000898

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000898 	.word	0x20000898

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000098 	.word	0x20000098

08002b6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e033      	b.n	8002bea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fd fd80 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bb2:	f023 0302 	bic.w	r3, r3, #2
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fb68 	bl	8003294 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bda:	e001      	b.n	8002be0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d049      	beq.n	8002cbc <HAL_ADC_IRQHandler+0xca>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d046      	beq.n	8002cbc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d12b      	bne.n	8002cac <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d127      	bne.n	8002cac <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d119      	bne.n	8002cac <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0220 	bic.w	r2, r2, #32
 8002c86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fd fdf9 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0212 	mvn.w	r2, #18
 8002cba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d057      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x190>
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d054      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d139      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d12b      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d124      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d119      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fc0c 	bl	8003590 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 020c 	mvn.w	r2, #12
 8002d80:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <HAL_ADC_IRQHandler+0x1d6>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d014      	beq.n	8002dc8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10d      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f925 	bl	8003008 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0201 	mvn.w	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dd6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <HAL_ADC_IRQHandler+0x218>
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0202 	orr.w	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0220 	mvn.w	r2, #32
 8002df8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f90e 	bl	800301c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0220 	mvn.w	r2, #32
 8002e08:	601a      	str	r2, [r3, #0]
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Start_DMA+0x1e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e0ce      	b.n	8002fd0 <HAL_ADC_Start_DMA+0x1bc>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d018      	beq.n	8002e7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e58:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <HAL_ADC_Start_DMA+0x1c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5f      	ldr	r2, [pc, #380]	; (8002fdc <HAL_ADC_Start_DMA+0x1c8>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0c9a      	lsrs	r2, r3, #18
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d107      	bne.n	8002e9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 8086 	bne.w	8002fb6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f023 0206 	bic.w	r2, r3, #6
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_ADC_Start_DMA+0x1cc>)
 8002f08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <HAL_ADC_Start_DMA+0x1d0>)
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <HAL_ADC_Start_DMA+0x1d4>)
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	4a33      	ldr	r2, [pc, #204]	; (8002fec <HAL_ADC_Start_DMA+0x1d8>)
 8002f20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	334c      	adds	r3, #76	; 0x4c
 8002f56:	4619      	mov	r1, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f000 fce2 	bl	8003924 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10f      	bne.n	8002f8c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d129      	bne.n	8002fce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	e020      	b.n	8002fce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_ADC_Start_DMA+0x1dc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d11b      	bne.n	8002fce <HAL_ADC_Start_DMA+0x1ba>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d114      	bne.n	8002fce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e00b      	b.n	8002fce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000090 	.word	0x20000090
 8002fdc:	431bde83 	.word	0x431bde83
 8002fe0:	40012300 	.word	0x40012300
 8002fe4:	0800348d 	.word	0x0800348d
 8002fe8:	08003547 	.word	0x08003547
 8002fec:	08003563 	.word	0x08003563
 8002ff0:	40012000 	.word	0x40012000

08002ff4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e113      	b.n	8003274 <HAL_ADC_ConfigChannel+0x244>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d925      	bls.n	80030a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	3b1e      	subs	r3, #30
 8003072:	2207      	movs	r2, #7
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43da      	mvns	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	400a      	ands	r2, r1
 8003080:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68d9      	ldr	r1, [r3, #12]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	4603      	mov	r3, r0
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4403      	add	r3, r0
 800309a:	3b1e      	subs	r3, #30
 800309c:	409a      	lsls	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	e022      	b.n	80030ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6919      	ldr	r1, [r3, #16]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	2207      	movs	r2, #7
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4403      	add	r3, r0
 80030e4:	409a      	lsls	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d824      	bhi.n	8003140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	3b05      	subs	r3, #5
 8003108:	221f      	movs	r2, #31
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	400a      	ands	r2, r1
 8003116:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b05      	subs	r3, #5
 8003132:	fa00 f203 	lsl.w	r2, r0, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	635a      	str	r2, [r3, #52]	; 0x34
 800313e:	e04c      	b.n	80031da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d824      	bhi.n	8003192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b23      	subs	r3, #35	; 0x23
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b23      	subs	r3, #35	; 0x23
 8003184:	fa00 f203 	lsl.w	r2, r0, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
 8003190:	e023      	b.n	80031da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b41      	subs	r3, #65	; 0x41
 80031a4:	221f      	movs	r2, #31
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b41      	subs	r3, #65	; 0x41
 80031ce:	fa00 f203 	lsl.w	r2, r0, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031da:	4b29      	ldr	r3, [pc, #164]	; (8003280 <HAL_ADC_ConfigChannel+0x250>)
 80031dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a28      	ldr	r2, [pc, #160]	; (8003284 <HAL_ADC_ConfigChannel+0x254>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10f      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1d8>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d10b      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_ADC_ConfigChannel+0x254>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d12b      	bne.n	800326a <HAL_ADC_ConfigChannel+0x23a>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_ADC_ConfigChannel+0x258>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x1f4>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b11      	cmp	r3, #17
 8003222:	d122      	bne.n	800326a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <HAL_ADC_ConfigChannel+0x258>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_ADC_ConfigChannel+0x25c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_ADC_ConfigChannel+0x260>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	0c9a      	lsrs	r2, r3, #18
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800325c:	e002      	b.n	8003264 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3b01      	subs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f9      	bne.n	800325e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40012300 	.word	0x40012300
 8003284:	40012000 	.word	0x40012000
 8003288:	10000012 	.word	0x10000012
 800328c:	20000090 	.word	0x20000090
 8003290:	431bde83 	.word	0x431bde83

08003294 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <ADC_Init+0x1f0>)
 800329e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	021a      	lsls	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	4a58      	ldr	r2, [pc, #352]	; (8003488 <ADC_Init+0x1f4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800333a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800335c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	e00f      	b.n	8003392 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003390:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0202 	bic.w	r2, r2, #2
 80033a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6899      	ldr	r1, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e1b      	ldrb	r3, [r3, #24]
 80033ac:	005a      	lsls	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	3b01      	subs	r3, #1
 80033ec:	035a      	lsls	r2, r3, #13
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	e007      	b.n	8003408 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003406:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	3b01      	subs	r3, #1
 8003424:	051a      	lsls	r2, r3, #20
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800343c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800344a:	025a      	lsls	r2, r3, #9
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	029a      	lsls	r2, r3, #10
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012300 	.word	0x40012300
 8003488:	0f000001 	.word	0x0f000001

0800348c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d13c      	bne.n	8003520 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d12b      	bne.n	8003518 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d127      	bne.n	8003518 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d119      	bne.n	8003518 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0220 	bic.w	r2, r2, #32
 80034f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7fd f9c3 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800351e:	e00e      	b.n	800353e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fd75 	bl	800301c <HAL_ADC_ErrorCallback>
}
 8003532:	e004      	b.n	800353e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fd4d 	bl	8002ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2240      	movs	r2, #64	; 0x40
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff fd4a 	bl	800301c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c0:	4013      	ands	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d6:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	60d3      	str	r3, [r2, #12]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <__NVIC_GetPriorityGrouping+0x18>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 0307 	and.w	r3, r3, #7
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db0b      	blt.n	8003632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	4907      	ldr	r1, [pc, #28]	; (8003640 <__NVIC_EnableIRQ+0x38>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100

08003644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db0a      	blt.n	800366e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	490c      	ldr	r1, [pc, #48]	; (8003690 <__NVIC_SetPriority+0x4c>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	440b      	add	r3, r1
 8003668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800366c:	e00a      	b.n	8003684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4908      	ldr	r1, [pc, #32]	; (8003694 <__NVIC_SetPriority+0x50>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3b04      	subs	r3, #4
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	440b      	add	r3, r1
 8003682:	761a      	strb	r2, [r3, #24]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f1c3 0307 	rsb	r3, r3, #7
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	bf28      	it	cs
 80036b6:	2304      	movcs	r3, #4
 80036b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3304      	adds	r3, #4
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d902      	bls.n	80036c8 <NVIC_EncodePriority+0x30>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3b03      	subs	r3, #3
 80036c6:	e000      	b.n	80036ca <NVIC_EncodePriority+0x32>
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	401a      	ands	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e0:	f04f 31ff 	mov.w	r1, #4294967295
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	43d9      	mvns	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	4313      	orrs	r3, r2
         );
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003710:	d301      	bcc.n	8003716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003712:	2301      	movs	r3, #1
 8003714:	e00f      	b.n	8003736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <SysTick_Config+0x40>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371e:	210f      	movs	r1, #15
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	f7ff ff8e 	bl	8003644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <SysTick_Config+0x40>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <SysTick_Config+0x40>)
 8003730:	2207      	movs	r2, #7
 8003732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	e000e010 	.word	0xe000e010

08003744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff29 	bl	80035a4 <__NVIC_SetPriorityGrouping>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800376c:	f7ff ff3e 	bl	80035ec <__NVIC_GetPriorityGrouping>
 8003770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f7ff ff8e 	bl	8003698 <NVIC_EncodePriority>
 800377c:	4602      	mov	r2, r0
 800377e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff5d 	bl	8003644 <__NVIC_SetPriority>
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff31 	bl	8003608 <__NVIC_EnableIRQ>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffa2 	bl	8003700 <SysTick_Config>
 80037bc:	4603      	mov	r3, r0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff f99a 	bl	8002b0c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e099      	b.n	8003918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003804:	e00f      	b.n	8003826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003806:	f7ff f981 	bl	8002b0c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b05      	cmp	r3, #5
 8003812:	d908      	bls.n	8003826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2203      	movs	r2, #3
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e078      	b.n	8003918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e8      	bne.n	8003806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4b38      	ldr	r3, [pc, #224]	; (8003920 <HAL_DMA_Init+0x158>)
 8003840:	4013      	ands	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4313      	orrs	r3, r2
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d117      	bne.n	80038ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa91 	bl	8003df4 <DMA_CheckFifoParam>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038e6:	2301      	movs	r3, #1
 80038e8:	e016      	b.n	8003918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa48 	bl	8003d88 <DMA_CalcBaseAndBitshift>
 80038f8:	4603      	mov	r3, r0
 80038fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	223f      	movs	r2, #63	; 0x3f
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	f010803f 	.word	0xf010803f

08003924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_DMA_Start_IT+0x26>
 8003946:	2302      	movs	r3, #2
 8003948:	e040      	b.n	80039cc <HAL_DMA_Start_IT+0xa8>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d12f      	bne.n	80039be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f9da 	bl	8003d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	223f      	movs	r2, #63	; 0x3f
 800397e:	409a      	lsls	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0216 	orr.w	r2, r2, #22
 8003992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0208 	orr.w	r2, r2, #8
 80039aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e005      	b.n	80039ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e00c      	b.n	8003a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2205      	movs	r2, #5
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a24:	4b8e      	ldr	r3, [pc, #568]	; (8003c60 <HAL_DMA_IRQHandler+0x248>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a8e      	ldr	r2, [pc, #568]	; (8003c64 <HAL_DMA_IRQHandler+0x24c>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2208      	movs	r2, #8
 8003a44:	409a      	lsls	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01a      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2208      	movs	r2, #8
 8003a72:	409a      	lsls	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0202 	orr.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2204      	movs	r2, #4
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	2204      	movs	r2, #4
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	2210      	movs	r2, #16
 8003af6:	409a      	lsls	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d043      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d03c      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2210      	movs	r2, #16
 8003b14:	409a      	lsls	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d024      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
 8003b46:	e01f      	b.n	8003b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
 8003b58:	e016      	b.n	8003b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0208 	bic.w	r2, r2, #8
 8003b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 808f 	beq.w	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8087 	beq.w	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	2220      	movs	r2, #32
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d136      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0216 	bic.w	r2, r2, #22
 8003bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <HAL_DMA_IRQHandler+0x1da>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0208 	bic.w	r2, r2, #8
 8003c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	223f      	movs	r2, #63	; 0x3f
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d07e      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
        }
        return;
 8003c2e:	e079      	b.n	8003d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d031      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
 8003c5c:	e02c      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
 8003c5e:	bf00      	nop
 8003c60:	20000090 	.word	0x20000090
 8003c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d023      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
 8003c78:	e01e      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10f      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0210 	bic.w	r2, r2, #16
 8003c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d032      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2205      	movs	r2, #5
 8003cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d307      	bcc.n	8003d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f2      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x2cc>
 8003cfe:	e000      	b.n	8003d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
 8003d22:	e000      	b.n	8003d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d24:	bf00      	nop
    }
  }
}
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d108      	bne.n	8003d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d6a:	e007      	b.n	8003d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	60da      	str	r2, [r3, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3b10      	subs	r3, #16
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <DMA_CalcBaseAndBitshift+0x64>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003da2:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <DMA_CalcBaseAndBitshift+0x68>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d909      	bls.n	8003dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8003dc8:	e007      	b.n	8003dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	aaaaaaab 	.word	0xaaaaaaab
 8003df0:	08006d90 	.word	0x08006d90

08003df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11f      	bne.n	8003e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d856      	bhi.n	8003ec2 <DMA_CheckFifoParam+0xce>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <DMA_CheckFifoParam+0x28>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e2d 	.word	0x08003e2d
 8003e20:	08003e3f 	.word	0x08003e3f
 8003e24:	08003e2d 	.word	0x08003e2d
 8003e28:	08003ec3 	.word	0x08003ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d046      	beq.n	8003ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3c:	e043      	b.n	8003ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e46:	d140      	bne.n	8003eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e03d      	b.n	8003eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e56:	d121      	bne.n	8003e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d837      	bhi.n	8003ece <DMA_CheckFifoParam+0xda>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <DMA_CheckFifoParam+0x70>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e7b 	.word	0x08003e7b
 8003e6c:	08003e75 	.word	0x08003e75
 8003e70:	08003e8d 	.word	0x08003e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e030      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d025      	beq.n	8003ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8a:	e022      	b.n	8003ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e94:	d11f      	bne.n	8003ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e9a:	e01c      	b.n	8003ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d903      	bls.n	8003eaa <DMA_CheckFifoParam+0xb6>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d003      	beq.n	8003eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ea8:	e018      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
      break;
 8003eae:	e015      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00e      	beq.n	8003eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e00b      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e00a      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e008      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e006      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e004      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <DMA_CheckFifoParam+0xe8>
      break;
 8003eda:	bf00      	nop
    }
  } 
  
  return status; 
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e159      	b.n	80041bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	f040 8148 	bne.w	80041b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d005      	beq.n	8003f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d130      	bne.n	8003fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	2203      	movs	r2, #3
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f74:	2201      	movs	r2, #1
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 0201 	and.w	r2, r3, #1
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d017      	beq.n	8003fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d123      	bne.n	8004030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	08da      	lsrs	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3208      	adds	r2, #8
 8003ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	08da      	lsrs	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3208      	adds	r2, #8
 800402a:	69b9      	ldr	r1, [r7, #24]
 800402c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2203      	movs	r2, #3
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0203 	and.w	r2, r3, #3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a2 	beq.w	80041b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <HAL_GPIO_Init+0x2e8>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4a56      	ldr	r2, [pc, #344]	; (80041d4 <HAL_GPIO_Init+0x2e8>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	6453      	str	r3, [r2, #68]	; 0x44
 8004082:	4b54      	ldr	r3, [pc, #336]	; (80041d4 <HAL_GPIO_Init+0x2e8>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408e:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_GPIO_Init+0x2ec>)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	3302      	adds	r3, #2
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	220f      	movs	r2, #15
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a49      	ldr	r2, [pc, #292]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d019      	beq.n	80040ee <HAL_GPIO_Init+0x202>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <HAL_GPIO_Init+0x2f4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_GPIO_Init+0x1fe>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a47      	ldr	r2, [pc, #284]	; (80041e4 <HAL_GPIO_Init+0x2f8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00d      	beq.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <HAL_GPIO_Init+0x2fc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <HAL_GPIO_Init+0x1f6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a45      	ldr	r2, [pc, #276]	; (80041ec <HAL_GPIO_Init+0x300>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <HAL_GPIO_Init+0x1f2>
 80040da:	2304      	movs	r3, #4
 80040dc:	e008      	b.n	80040f0 <HAL_GPIO_Init+0x204>
 80040de:	2307      	movs	r3, #7
 80040e0:	e006      	b.n	80040f0 <HAL_GPIO_Init+0x204>
 80040e2:	2303      	movs	r3, #3
 80040e4:	e004      	b.n	80040f0 <HAL_GPIO_Init+0x204>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e002      	b.n	80040f0 <HAL_GPIO_Init+0x204>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_GPIO_Init+0x204>
 80040ee:	2300      	movs	r3, #0
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	f002 0203 	and.w	r2, r2, #3
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	4093      	lsls	r3, r2
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004100:	4935      	ldr	r1, [pc, #212]	; (80041d8 <HAL_GPIO_Init+0x2ec>)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	3302      	adds	r3, #2
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800410e:	4b38      	ldr	r3, [pc, #224]	; (80041f0 <HAL_GPIO_Init+0x304>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <HAL_GPIO_Init+0x304>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004138:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <HAL_GPIO_Init+0x304>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800415c:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <HAL_GPIO_Init+0x304>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <HAL_GPIO_Init+0x304>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004186:	4a1a      	ldr	r2, [pc, #104]	; (80041f0 <HAL_GPIO_Init+0x304>)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_GPIO_Init+0x304>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b0:	4a0f      	ldr	r2, [pc, #60]	; (80041f0 <HAL_GPIO_Init+0x304>)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3301      	adds	r3, #1
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b0f      	cmp	r3, #15
 80041c0:	f67f aea2 	bls.w	8003f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3724      	adds	r7, #36	; 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40013800 	.word	0x40013800
 80041dc:	40020000 	.word	0x40020000
 80041e0:	40020400 	.word	0x40020400
 80041e4:	40020800 	.word	0x40020800
 80041e8:	40020c00 	.word	0x40020c00
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40013c00 	.word	0x40013c00

080041f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e001      	b.n	8004216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	807b      	strh	r3, [r7, #2]
 8004230:	4613      	mov	r3, r2
 8004232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004234:	787b      	ldrb	r3, [r7, #1]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423a:	887a      	ldrh	r2, [r7, #2]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004240:	e003      	b.n	800424a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004242:	887b      	ldrh	r3, [r7, #2]
 8004244:	041a      	lsls	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	619a      	str	r2, [r3, #24]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4013      	ands	r3, r2
 800426e:	041a      	lsls	r2, r3, #16
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	43d9      	mvns	r1, r3
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	400b      	ands	r3, r1
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042a2:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd f8fe 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e12b      	b.n	8004526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fde0 	bl	8000ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004320:	f001 f896 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8004324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a81      	ldr	r2, [pc, #516]	; (8004530 <HAL_I2C_Init+0x274>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d807      	bhi.n	8004340 <HAL_I2C_Init+0x84>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_I2C_Init+0x278>)
 8004334:	4293      	cmp	r3, r2
 8004336:	bf94      	ite	ls
 8004338:	2301      	movls	r3, #1
 800433a:	2300      	movhi	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e006      	b.n	800434e <HAL_I2C_Init+0x92>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a7d      	ldr	r2, [pc, #500]	; (8004538 <HAL_I2C_Init+0x27c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	bf94      	ite	ls
 8004348:	2301      	movls	r3, #1
 800434a:	2300      	movhi	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e0e7      	b.n	8004526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a78      	ldr	r2, [pc, #480]	; (800453c <HAL_I2C_Init+0x280>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0c9b      	lsrs	r3, r3, #18
 8004360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a6a      	ldr	r2, [pc, #424]	; (8004530 <HAL_I2C_Init+0x274>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d802      	bhi.n	8004390 <HAL_I2C_Init+0xd4>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3301      	adds	r3, #1
 800438e:	e009      	b.n	80043a4 <HAL_I2C_Init+0xe8>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	4a69      	ldr	r2, [pc, #420]	; (8004540 <HAL_I2C_Init+0x284>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	3301      	adds	r3, #1
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	495c      	ldr	r1, [pc, #368]	; (8004530 <HAL_I2C_Init+0x274>)
 80043c0:	428b      	cmp	r3, r1
 80043c2:	d819      	bhi.n	80043f8 <HAL_I2C_Init+0x13c>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1e59      	subs	r1, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d8:	400b      	ands	r3, r1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_I2C_Init+0x138>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1e59      	subs	r1, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	e051      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 80043f4:	2304      	movs	r3, #4
 80043f6:	e04f      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <HAL_I2C_Init+0x168>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1e58      	subs	r0, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e012      	b.n	800444a <HAL_I2C_Init+0x18e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	0099      	lsls	r1, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	fbb0 f3f3 	udiv	r3, r0, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Init+0x196>
 800444e:	2301      	movs	r3, #1
 8004450:	e022      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <HAL_I2C_Init+0x1bc>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1e58      	subs	r0, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	440b      	add	r3, r1
 8004468:	fbb0 f3f3 	udiv	r3, r0, r3
 800446c:	3301      	adds	r3, #1
 800446e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004476:	e00f      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1e58      	subs	r0, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	0099      	lsls	r1, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	fbb0 f3f3 	udiv	r3, r0, r3
 800448e:	3301      	adds	r3, #1
 8004490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	6809      	ldr	r1, [r1, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6911      	ldr	r1, [r2, #16]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68d2      	ldr	r2, [r2, #12]
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	000186a0 	.word	0x000186a0
 8004534:	001e847f 	.word	0x001e847f
 8004538:	003d08ff 	.word	0x003d08ff
 800453c:	431bde83 	.word	0x431bde83
 8004540:	10624dd3 	.word	0x10624dd3

08004544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	460b      	mov	r3, r1
 8004558:	813b      	strh	r3, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800455e:	f7fe fad5 	bl	8002b0c <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	f040 80d9 	bne.w	8004724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2319      	movs	r3, #25
 8004578:	2201      	movs	r2, #1
 800457a:	496d      	ldr	r1, [pc, #436]	; (8004730 <HAL_I2C_Mem_Write+0x1ec>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f971 	bl	8004864 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004588:	2302      	movs	r3, #2
 800458a:	e0cc      	b.n	8004726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_I2C_Mem_Write+0x56>
 8004596:	2302      	movs	r3, #2
 8004598:	e0c5      	b.n	8004726 <HAL_I2C_Mem_Write+0x1e2>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d007      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2221      	movs	r2, #33	; 0x21
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a3a      	ldr	r2, [r7, #32]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_I2C_Mem_Write+0x1f0>)
 8004600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004602:	88f8      	ldrh	r0, [r7, #6]
 8004604:	893a      	ldrh	r2, [r7, #8]
 8004606:	8979      	ldrh	r1, [r7, #10]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	4603      	mov	r3, r0
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f890 	bl	8004738 <I2C_RequestMemoryWrite>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d052      	beq.n	80046c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e081      	b.n	8004726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f9f2 	bl	8004a10 <I2C_WaitOnTXEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b04      	cmp	r3, #4
 8004638:	d107      	bne.n	800464a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e06b      	b.n	8004726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d11b      	bne.n	80046c4 <HAL_I2C_Mem_Write+0x180>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d017      	beq.n	80046c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1aa      	bne.n	8004622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f9de 	bl	8004a92 <I2C_WaitOnBTFFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d107      	bne.n	80046f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e016      	b.n	8004726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	00100002 	.word	0x00100002
 8004734:	ffff0000 	.word	0xffff0000

08004738 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	4603      	mov	r3, r0
 8004748:	817b      	strh	r3, [r7, #10]
 800474a:	460b      	mov	r3, r1
 800474c:	813b      	strh	r3, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2200      	movs	r2, #0
 800476a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f878 	bl	8004864 <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	d103      	bne.n	8004792 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e05f      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	492d      	ldr	r1, [pc, #180]	; (8004860 <I2C_RequestMemoryWrite+0x128>)
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f8b0 	bl	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e04c      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	6a39      	ldr	r1, [r7, #32]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f91a 	bl	8004a10 <I2C_WaitOnTXEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d107      	bne.n	80047fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e02b      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	e021      	b.n	8004854 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004810:	893b      	ldrh	r3, [r7, #8]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	b29b      	uxth	r3, r3
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8f4 	bl	8004a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b04      	cmp	r3, #4
 8004834:	d107      	bne.n	8004846 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e005      	b.n	8004856 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800484a:	893b      	ldrh	r3, [r7, #8]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	00010002 	.word	0x00010002

08004864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004874:	e025      	b.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d021      	beq.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fe f945 	bl	8002b0c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_WaitOnFlagUntilTimeout+0x30>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e023      	b.n	800490a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10d      	bne.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	43da      	mvns	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	e00c      	b.n	8004902 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d0b6      	beq.n	8004876 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004920:	e051      	b.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d123      	bne.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004940:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800494a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e046      	b.n	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d021      	beq.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fe f8c3 	bl	8002b0c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e020      	b.n	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10c      	bne.n	80049ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	43da      	mvns	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e00b      	b.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	43da      	mvns	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d18d      	bne.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a1c:	e02d      	b.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f878 	bl	8004b14 <I2C_IsAcknowledgeFailed>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e02d      	b.n	8004a8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe f869 	bl	8002b0c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e007      	b.n	8004a8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d1ca      	bne.n	8004a1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a9e:	e02d      	b.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f837 	bl	8004b14 <I2C_IsAcknowledgeFailed>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e02d      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d021      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab8:	f7fe f828 	bl	8002b0c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d116      	bne.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d1ca      	bne.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d11b      	bne.n	8004b64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	f043 0204 	orr.w	r2, r3, #4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e267      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d075      	beq.n	8004c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b92:	4b88      	ldr	r3, [pc, #544]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9e:	4b85      	ldr	r3, [pc, #532]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d112      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004baa:	4b82      	ldr	r3, [pc, #520]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	4b7e      	ldr	r3, [pc, #504]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d05b      	beq.n	8004c7c <HAL_RCC_OscConfig+0x108>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d157      	bne.n	8004c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e242      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d106      	bne.n	8004be8 <HAL_RCC_OscConfig+0x74>
 8004bda:	4b76      	ldr	r3, [pc, #472]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a75      	ldr	r2, [pc, #468]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e01d      	b.n	8004c24 <HAL_RCC_OscConfig+0xb0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x98>
 8004bf2:	4b70      	ldr	r3, [pc, #448]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6f      	ldr	r2, [pc, #444]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b6d      	ldr	r3, [pc, #436]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6c      	ldr	r2, [pc, #432]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCC_OscConfig+0xb0>
 8004c0c:	4b69      	ldr	r3, [pc, #420]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a68      	ldr	r2, [pc, #416]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b66      	ldr	r3, [pc, #408]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a65      	ldr	r2, [pc, #404]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d013      	beq.n	8004c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fd ff6e 	bl	8002b0c <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c34:	f7fd ff6a 	bl	8002b0c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b64      	cmp	r3, #100	; 0x64
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e207      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b5b      	ldr	r3, [pc, #364]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0xc0>
 8004c52:	e014      	b.n	8004c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fd ff5a 	bl	8002b0c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5c:	f7fd ff56 	bl	8002b0c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	; 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e1f3      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6e:	4b51      	ldr	r3, [pc, #324]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0xe8>
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d063      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d11c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca2:	4b44      	ldr	r3, [pc, #272]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d116      	bne.n	8004cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cae:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x152>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1c7      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4937      	ldr	r1, [pc, #220]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	e03a      	b.n	8004d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fd ff0f 	bl	8002b0c <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fd ff0b 	bl	8002b0c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e1a8      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d10:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4925      	ldr	r1, [pc, #148]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]
 8004d24:	e015      	b.n	8004d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fd feee 	bl	8002b0c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d34:	f7fd feea 	bl	8002b0c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e187      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d036      	beq.n	8004dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_RCC_OscConfig+0x248>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fd fece 	bl	8002b0c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d74:	f7fd feca 	bl	8002b0c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e167      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x200>
 8004d92:	e01b      	b.n	8004dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_OscConfig+0x248>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9a:	f7fd feb7 	bl	8002b0c <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da0:	e00e      	b.n	8004dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da2:	f7fd feb3 	bl	8002b0c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d907      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e150      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	42470000 	.word	0x42470000
 8004dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ea      	bne.n	8004da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8097 	beq.w	8004f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dde:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	4b7d      	ldr	r3, [pc, #500]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a7c      	ldr	r2, [pc, #496]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0a:	4b77      	ldr	r3, [pc, #476]	; (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d118      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e16:	4b74      	ldr	r3, [pc, #464]	; (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a73      	ldr	r2, [pc, #460]	; (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e22:	f7fd fe73 	bl	8002b0c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2a:	f7fd fe6f 	bl	8002b0c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e10c      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	4b6a      	ldr	r3, [pc, #424]	; (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x2ea>
 8004e50:	4b64      	ldr	r3, [pc, #400]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a63      	ldr	r2, [pc, #396]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	e01c      	b.n	8004e98 <HAL_RCC_OscConfig+0x324>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x30c>
 8004e66:	4b5f      	ldr	r3, [pc, #380]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a5e      	ldr	r2, [pc, #376]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70
 8004e72:	4b5c      	ldr	r3, [pc, #368]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a5b      	ldr	r2, [pc, #364]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0x324>
 8004e80:	4b58      	ldr	r3, [pc, #352]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	4b55      	ldr	r3, [pc, #340]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a54      	ldr	r2, [pc, #336]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e92:	f023 0304 	bic.w	r3, r3, #4
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fd fe34 	bl	8002b0c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea8:	f7fd fe30 	bl	8002b0c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e0cb      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ee      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x334>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ecc:	f7fd fe1e 	bl	8002b0c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fd fe1a 	bl	8002b0c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0b5      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eea:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ee      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efc:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	4a38      	ldr	r2, [pc, #224]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a1 	beq.w	8005054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f12:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d05c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d141      	bne.n	8004faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_RCC_OscConfig+0x478>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fdee 	bl	8002b0c <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fd fdea 	bl	8002b0c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e087      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	491b      	ldr	r1, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x478>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fd fdc3 	bl	8002b0c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fd fdbf 	bl	8002b0c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e05c      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x416>
 8004fa8:	e054      	b.n	8005054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <HAL_RCC_OscConfig+0x478>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fd fdac 	bl	8002b0c <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fd fda8 	bl	8002b0c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e045      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x444>
 8004fd6:	e03d      	b.n	8005054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e038      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x4ec>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d028      	beq.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d121      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d11a      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	4293      	cmp	r3, r2
 800502a:	d111      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	3b01      	subs	r3, #1
 800503a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d107      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0cc      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b68      	ldr	r3, [pc, #416]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90c      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b65      	ldr	r3, [pc, #404]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b63      	ldr	r3, [pc, #396]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0b8      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a58      	ldr	r2, [pc, #352]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d0:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a52      	ldr	r2, [pc, #328]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	4b50      	ldr	r3, [pc, #320]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	494d      	ldr	r1, [pc, #308]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d044      	beq.n	8005184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d119      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e07f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d003      	beq.n	8005122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511e:	2b03      	cmp	r3, #3
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b3f      	ldr	r3, [pc, #252]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e06f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e067      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b37      	ldr	r3, [pc, #220]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4934      	ldr	r1, [pc, #208]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005154:	f7fd fcda 	bl	8002b0c <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fd fcd6 	bl	8002b0c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e04f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d20c      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b22      	ldr	r3, [pc, #136]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e032      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4916      	ldr	r1, [pc, #88]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	490e      	ldr	r1, [pc, #56]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ea:	f000 f821 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	490a      	ldr	r1, [pc, #40]	; (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 80051fc:	5ccb      	ldrb	r3, [r1, r3]
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd fc3a 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023c00 	.word	0x40023c00
 8005220:	40023800 	.word	0x40023800
 8005224:	08006d78 	.word	0x08006d78
 8005228:	20000090 	.word	0x20000090
 800522c:	20000094 	.word	0x20000094

08005230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005234:	b094      	sub	sp, #80	; 0x50
 8005236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	647b      	str	r3, [r7, #68]	; 0x44
 800523c:	2300      	movs	r3, #0
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005240:	2300      	movs	r3, #0
 8005242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005248:	4b79      	ldr	r3, [pc, #484]	; (8005430 <HAL_RCC_GetSysClockFreq+0x200>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 030c 	and.w	r3, r3, #12
 8005250:	2b08      	cmp	r3, #8
 8005252:	d00d      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x40>
 8005254:	2b08      	cmp	r3, #8
 8005256:	f200 80e1 	bhi.w	800541c <HAL_RCC_GetSysClockFreq+0x1ec>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x34>
 800525e:	2b04      	cmp	r3, #4
 8005260:	d003      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0x3a>
 8005262:	e0db      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005264:	4b73      	ldr	r3, [pc, #460]	; (8005434 <HAL_RCC_GetSysClockFreq+0x204>)
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005268:	e0db      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800526a:	4b72      	ldr	r3, [pc, #456]	; (8005434 <HAL_RCC_GetSysClockFreq+0x204>)
 800526c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800526e:	e0d8      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005270:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <HAL_RCC_GetSysClockFreq+0x200>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800527a:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <HAL_RCC_GetSysClockFreq+0x200>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d063      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005286:	4b6a      	ldr	r3, [pc, #424]	; (8005430 <HAL_RCC_GetSysClockFreq+0x200>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	099b      	lsrs	r3, r3, #6
 800528c:	2200      	movs	r2, #0
 800528e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052a2:	4622      	mov	r2, r4
 80052a4:	462b      	mov	r3, r5
 80052a6:	f04f 0000 	mov.w	r0, #0
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	0159      	lsls	r1, r3, #5
 80052b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052b4:	0150      	lsls	r0, r2, #5
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4621      	mov	r1, r4
 80052bc:	1a51      	subs	r1, r2, r1
 80052be:	6139      	str	r1, [r7, #16]
 80052c0:	4629      	mov	r1, r5
 80052c2:	eb63 0301 	sbc.w	r3, r3, r1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d4:	4659      	mov	r1, fp
 80052d6:	018b      	lsls	r3, r1, #6
 80052d8:	4651      	mov	r1, sl
 80052da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052de:	4651      	mov	r1, sl
 80052e0:	018a      	lsls	r2, r1, #6
 80052e2:	4651      	mov	r1, sl
 80052e4:	ebb2 0801 	subs.w	r8, r2, r1
 80052e8:	4659      	mov	r1, fp
 80052ea:	eb63 0901 	sbc.w	r9, r3, r1
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005302:	4690      	mov	r8, r2
 8005304:	4699      	mov	r9, r3
 8005306:	4623      	mov	r3, r4
 8005308:	eb18 0303 	adds.w	r3, r8, r3
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	462b      	mov	r3, r5
 8005310:	eb49 0303 	adc.w	r3, r9, r3
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005322:	4629      	mov	r1, r5
 8005324:	028b      	lsls	r3, r1, #10
 8005326:	4621      	mov	r1, r4
 8005328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800532c:	4621      	mov	r1, r4
 800532e:	028a      	lsls	r2, r1, #10
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005336:	2200      	movs	r2, #0
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
 800533a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800533c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005340:	f7fa ff52 	bl	80001e8 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4613      	mov	r3, r2
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800534c:	e058      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534e:	4b38      	ldr	r3, [pc, #224]	; (8005430 <HAL_RCC_GetSysClockFreq+0x200>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	099b      	lsrs	r3, r3, #6
 8005354:	2200      	movs	r2, #0
 8005356:	4618      	mov	r0, r3
 8005358:	4611      	mov	r1, r2
 800535a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800535e:	623b      	str	r3, [r7, #32]
 8005360:	2300      	movs	r3, #0
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
 8005364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	f04f 0000 	mov.w	r0, #0
 8005370:	f04f 0100 	mov.w	r1, #0
 8005374:	0159      	lsls	r1, r3, #5
 8005376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800537a:	0150      	lsls	r0, r2, #5
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4641      	mov	r1, r8
 8005382:	ebb2 0a01 	subs.w	sl, r2, r1
 8005386:	4649      	mov	r1, r9
 8005388:	eb63 0b01 	sbc.w	fp, r3, r1
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800539c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053a0:	ebb2 040a 	subs.w	r4, r2, sl
 80053a4:	eb63 050b 	sbc.w	r5, r3, fp
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	00eb      	lsls	r3, r5, #3
 80053b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053b6:	00e2      	lsls	r2, r4, #3
 80053b8:	4614      	mov	r4, r2
 80053ba:	461d      	mov	r5, r3
 80053bc:	4643      	mov	r3, r8
 80053be:	18e3      	adds	r3, r4, r3
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	464b      	mov	r3, r9
 80053c4:	eb45 0303 	adc.w	r3, r5, r3
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053d6:	4629      	mov	r1, r5
 80053d8:	028b      	lsls	r3, r1, #10
 80053da:	4621      	mov	r1, r4
 80053dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e0:	4621      	mov	r1, r4
 80053e2:	028a      	lsls	r2, r1, #10
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	2200      	movs	r2, #0
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	61fa      	str	r2, [r7, #28]
 80053f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f4:	f7fa fef8 	bl	80001e8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_GetSysClockFreq+0x200>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	3301      	adds	r3, #1
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800541a:	e002      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <HAL_RCC_GetSysClockFreq+0x204>)
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005424:	4618      	mov	r0, r3
 8005426:	3750      	adds	r7, #80	; 0x50
 8005428:	46bd      	mov	sp, r7
 800542a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800
 8005434:	00f42400 	.word	0x00f42400

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <HAL_RCC_GetHCLKFreq+0x14>)
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000090 	.word	0x20000090

08005450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005454:	f7ff fff0 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0a9b      	lsrs	r3, r3, #10
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4903      	ldr	r1, [pc, #12]	; (8005474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800
 8005474:	08006d88 	.word	0x08006d88

08005478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e07b      	b.n	8005582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549a:	d009      	beq.n	80054b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	61da      	str	r2, [r3, #28]
 80054a2:	e005      	b.n	80054b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fc fe9a 	bl	8002204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	ea42 0103 	orr.w	r1, r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	f003 0104 	and.w	r1, r3, #4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0210 	and.w	r2, r3, #16
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_SPI_Transmit+0x22>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e126      	b.n	80057fa <HAL_SPI_Transmit+0x270>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b4:	f7fd faaa 	bl	8002b0c <HAL_GetTick>
 80055b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ce:	e10b      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_SPI_Transmit+0x52>
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e0:	e102      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2203      	movs	r2, #3
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005628:	d10f      	bne.n	800564a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d007      	beq.n	8005668 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d14b      	bne.n	800570a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Transmit+0xf6>
 800567a:	8afb      	ldrh	r3, [r7, #22]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d13e      	bne.n	80056fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	1c9a      	adds	r2, r3, #2
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056a4:	e02b      	b.n	80056fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d112      	bne.n	80056da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	881a      	ldrh	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d8:	e011      	b.n	80056fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fd fa17 	bl	8002b0c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x168>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x16e>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056fc:	e074      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ce      	bne.n	80056a6 <HAL_SPI_Transmit+0x11c>
 8005708:	e04c      	b.n	80057a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0x18e>
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d140      	bne.n	800579a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800573e:	e02c      	b.n	800579a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d113      	bne.n	8005776 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	86da      	strh	r2, [r3, #54]	; 0x36
 8005774:	e011      	b.n	800579a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005776:	f7fd f9c9 	bl	8002b0c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d803      	bhi.n	800578e <HAL_SPI_Transmit+0x204>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d102      	bne.n	8005794 <HAL_SPI_Transmit+0x20a>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005798:	e026      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1cd      	bne.n	8005740 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fcdd 	bl	8006168 <SPI_EndRxTxTransaction>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e000      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b088      	sub	sp, #32
 8005806:	af02      	add	r7, sp, #8
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581e:	d112      	bne.n	8005846 <HAL_SPI_Receive+0x44>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10e      	bne.n	8005846 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2204      	movs	r2, #4
 800582c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f8f1 	bl	8005a24 <HAL_SPI_TransmitReceive>
 8005842:	4603      	mov	r3, r0
 8005844:	e0ea      	b.n	8005a1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_SPI_Receive+0x52>
 8005850:	2302      	movs	r3, #2
 8005852:	e0e3      	b.n	8005a1c <HAL_SPI_Receive+0x21a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585c:	f7fd f956 	bl	8002b0c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d002      	beq.n	8005874 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800586e:	2302      	movs	r3, #2
 8005870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005872:	e0ca      	b.n	8005a0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Receive+0x7e>
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005884:	e0c1      	b.n	8005a0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2204      	movs	r2, #4
 800588a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	d10f      	bne.n	80058ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d007      	beq.n	800590c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d162      	bne.n	80059da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005914:	e02e      	b.n	8005974 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d115      	bne.n	8005950 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f103 020c 	add.w	r2, r3, #12
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594e:	e011      	b.n	8005974 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005950:	f7fd f8dc 	bl	8002b0c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d803      	bhi.n	8005968 <HAL_SPI_Receive+0x166>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d102      	bne.n	800596e <HAL_SPI_Receive+0x16c>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005972:	e04a      	b.n	8005a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1cb      	bne.n	8005916 <HAL_SPI_Receive+0x114>
 800597e:	e031      	b.n	80059e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d113      	bne.n	80059b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	b292      	uxth	r2, r2
 800599a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	1c9a      	adds	r2, r3, #2
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b4:	e011      	b.n	80059da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b6:	f7fd f8a9 	bl	8002b0c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d803      	bhi.n	80059ce <HAL_SPI_Receive+0x1cc>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d102      	bne.n	80059d4 <HAL_SPI_Receive+0x1d2>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059d8:	e017      	b.n	8005a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1cd      	bne.n	8005980 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fb57 	bl	800609c <SPI_EndRxTransaction>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
 8005a06:	e000      	b.n	8005a0a <HAL_SPI_Receive+0x208>
  }

error :
 8005a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	; 0x30
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a32:	2301      	movs	r3, #1
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x26>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e18a      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x33c>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a52:	f7fd f85b 	bl	8002b0c <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d00f      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x70>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7a:	d107      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x68>
 8005a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d003      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a92:	e15b      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_SPI_TransmitReceive+0x82>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_TransmitReceive+0x82>
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aac:	e14e      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2205      	movs	r2, #5
 8005abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	887a      	ldrh	r2, [r7, #2]
 8005ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	887a      	ldrh	r2, [r7, #2]
 8005ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	887a      	ldrh	r2, [r7, #2]
 8005aea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d007      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1e:	d178      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_TransmitReceive+0x10a>
 8005b28:	8b7b      	ldrh	r3, [r7, #26]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d166      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b52:	e053      	b.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d11b      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x176>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d016      	beq.n	8005b9a <HAL_SPI_TransmitReceive+0x176>
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d113      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d119      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x1b8>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d014      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bdc:	f7fc ff96 	bl	8002b0c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d807      	bhi.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d003      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bfa:	e0a7      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1a6      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x130>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1a1      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x130>
 8005c10:	e07c      	b.n	8005d0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x1fc>
 8005c1a:	8b7b      	ldrh	r3, [r7, #26]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d16b      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	7812      	ldrb	r2, [r2, #0]
 8005c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c46:	e057      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d11c      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x26c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0x26c>
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d114      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d119      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x2ae>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d014      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cd2:	f7fc ff1b 	bl	8002b0c <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d803      	bhi.n	8005cea <HAL_SPI_TransmitReceive+0x2c6>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x2cc>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d103      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cf6:	e029      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1a2      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x224>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d19d      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fa29 	bl	8006168 <SPI_EndRxTxTransaction>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d28:	e010      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	e000      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3730      	adds	r7, #48	; 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10e      	bne.n	8005da8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
    return;
 8005da6:	e0ce      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <HAL_SPI_IRQHandler+0x5e>
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
    return;
 8005dc4:	e0bf      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <HAL_SPI_IRQHandler+0x7e>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80b0 	beq.w	8005f46 <HAL_SPI_IRQHandler+0x1de>
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80aa 	beq.w	8005f46 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d023      	beq.n	8005e44 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d011      	beq.n	8005e2c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0c:	f043 0204 	orr.w	r2, r3, #4
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	e00b      	b.n	8005e44 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]
        return;
 8005e42:	e080      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d014      	beq.n	8005e78 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	f043 0208 	orr.w	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d04f      	beq.n	8005f44 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <HAL_SPI_IRQHandler+0x168>
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d034      	beq.n	8005f3a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0203 	bic.w	r2, r2, #3
 8005ede:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d011      	beq.n	8005f0c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eec:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_SPI_IRQHandler+0x1e4>)
 8005eee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fd fd6d 	bl	80039d4 <HAL_DMA_Abort_IT>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f18:	4a0c      	ldr	r2, [pc, #48]	; (8005f4c <HAL_SPI_IRQHandler+0x1e4>)
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fd fd57 	bl	80039d4 <HAL_DMA_Abort_IT>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f38:	e003      	b.n	8005f42 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f808 	bl	8005f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f40:	e000      	b.n	8005f44 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f42:	bf00      	nop
    return;
 8005f44:	bf00      	nop
  }
}
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	08005f65 	.word	0x08005f65

08005f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ffe6 	bl	8005f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f9c:	f7fc fdb6 	bl	8002b0c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fac:	f7fc fdae 	bl	8002b0c <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb2:	4b39      	ldr	r3, [pc, #228]	; (8006098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	015b      	lsls	r3, r3, #5
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc2:	e054      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d050      	beq.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fcc:	f7fc fd9e 	bl	8002b0c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d902      	bls.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d13d      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffa:	d111      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006004:	d004      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600e:	d107      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d10f      	bne.n	800604a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e017      	b.n	800608e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3b01      	subs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d19b      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000090 	.word	0x20000090

0800609c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b0:	d111      	bne.n	80060d6 <SPI_EndRxTransaction+0x3a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ba:	d004      	beq.n	80060c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c4:	d107      	bne.n	80060d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060de:	d12a      	bne.n	8006136 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e8:	d012      	beq.n	8006110 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff ff49 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02d      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e026      	b.n	800615e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	2101      	movs	r1, #1
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff36 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01a      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e013      	b.n	800615e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	2101      	movs	r1, #1
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff23 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e000      	b.n	800615e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <SPI_EndRxTxTransaction+0x7c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <SPI_EndRxTxTransaction+0x80>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	0d5b      	lsrs	r3, r3, #21
 8006180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006184:	fb02 f303 	mul.w	r3, r2, r3
 8006188:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d112      	bne.n	80061ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	2180      	movs	r1, #128	; 0x80
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fef4 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	f043 0220 	orr.w	r2, r3, #32
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e00f      	b.n	80061da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d0:	2b80      	cmp	r3, #128	; 0x80
 80061d2:	d0f2      	beq.n	80061ba <SPI_EndRxTxTransaction+0x52>
 80061d4:	e000      	b.n	80061d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061d6:	bf00      	nop
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000090 	.word	0x20000090
 80061e8:	165e9f81 	.word	0x165e9f81

080061ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e041      	b.n	8006282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fc fbc2 	bl	800299c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f000 faf6 	bl	800681c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e03c      	b.n	800631e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_TIM_Base_Start+0xa0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d018      	beq.n	80062e8 <HAL_TIM_Base_Start+0x5c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062be:	d013      	beq.n	80062e8 <HAL_TIM_Base_Start+0x5c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1a      	ldr	r2, [pc, #104]	; (8006330 <HAL_TIM_Base_Start+0xa4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00e      	beq.n	80062e8 <HAL_TIM_Base_Start+0x5c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a19      	ldr	r2, [pc, #100]	; (8006334 <HAL_TIM_Base_Start+0xa8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_TIM_Base_Start+0x5c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a17      	ldr	r2, [pc, #92]	; (8006338 <HAL_TIM_Base_Start+0xac>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIM_Base_Start+0x5c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a16      	ldr	r2, [pc, #88]	; (800633c <HAL_TIM_Base_Start+0xb0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d111      	bne.n	800630c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d010      	beq.n	800631c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	e007      	b.n	800631c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40014000 	.word	0x40014000

08006340 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e097      	b.n	8006484 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7fc facf 	bl	800290c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fa41 	bl	800681c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	4313      	orrs	r3, r2
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063e0:	f023 030c 	bic.w	r3, r3, #12
 80063e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	4313      	orrs	r3, r2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	011a      	lsls	r2, r3, #4
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	031b      	lsls	r3, r3, #12
 8006410:	4313      	orrs	r3, r2
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	4313      	orrs	r3, r2
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d110      	bne.n	80064de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d102      	bne.n	80064c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c2:	7b7b      	ldrb	r3, [r7, #13]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d001      	beq.n	80064cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e069      	b.n	80065a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064dc:	e031      	b.n	8006542 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d110      	bne.n	8006506 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d102      	bne.n	80064f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064ea:	7b3b      	ldrb	r3, [r7, #12]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d001      	beq.n	80064f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e055      	b.n	80065a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006504:	e01d      	b.n	8006542 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d108      	bne.n	800651e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d105      	bne.n	800651e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006512:	7b7b      	ldrb	r3, [r7, #13]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d102      	bne.n	800651e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006518:	7b3b      	ldrb	r3, [r7, #12]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d001      	beq.n	8006522 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e03e      	b.n	80065a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_TIM_Encoder_Start+0xc4>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b04      	cmp	r3, #4
 800654c:	d008      	beq.n	8006560 <HAL_TIM_Encoder_Start+0xd4>
 800654e:	e00f      	b.n	8006570 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f000 f9df 	bl	800691c <TIM_CCxChannelCmd>
      break;
 800655e:	e016      	b.n	800658e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2201      	movs	r2, #1
 8006566:	2104      	movs	r1, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f9d7 	bl	800691c <TIM_CCxChannelCmd>
      break;
 800656e:	e00e      	b.n	800658e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f9cf 	bl	800691c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2201      	movs	r2, #1
 8006584:	2104      	movs	r1, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f9c8 	bl	800691c <TIM_CCxChannelCmd>
      break;
 800658c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0202 	mvn.w	r2, #2
 80065d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8f8 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f8ea 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f8fb 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b04      	cmp	r3, #4
 8006610:	d122      	bne.n	8006658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0204 	mvn.w	r2, #4
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8ce 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8c0 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f8d1 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b08      	cmp	r3, #8
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b08      	cmp	r3, #8
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0208 	mvn.w	r2, #8
 800667c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2204      	movs	r2, #4
 8006682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8a4 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f896 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f8a7 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d122      	bne.n	8006700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d11b      	bne.n	8006700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0210 	mvn.w	r2, #16
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2208      	movs	r2, #8
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f87a 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f86c 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f87d 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10e      	bne.n	800672c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b01      	cmp	r3, #1
 800671a:	d107      	bne.n	800672c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0201 	mvn.w	r2, #1
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f846 	bl	80067b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006736:	2b80      	cmp	r3, #128	; 0x80
 8006738:	d10e      	bne.n	8006758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b80      	cmp	r3, #128	; 0x80
 8006746:	d107      	bne.n	8006758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f980 	bl	8006a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d10e      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d107      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f842 	bl	8006808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b20      	cmp	r3, #32
 8006790:	d10e      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b20      	cmp	r3, #32
 800679e:	d107      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0220 	mvn.w	r2, #32
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f94a 	bl	8006a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a34      	ldr	r2, [pc, #208]	; (8006900 <TIM_Base_SetConfig+0xe4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00f      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683a:	d00b      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a31      	ldr	r2, [pc, #196]	; (8006904 <TIM_Base_SetConfig+0xe8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a30      	ldr	r2, [pc, #192]	; (8006908 <TIM_Base_SetConfig+0xec>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a2f      	ldr	r2, [pc, #188]	; (800690c <TIM_Base_SetConfig+0xf0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a25      	ldr	r2, [pc, #148]	; (8006900 <TIM_Base_SetConfig+0xe4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01b      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006874:	d017      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a22      	ldr	r2, [pc, #136]	; (8006904 <TIM_Base_SetConfig+0xe8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a21      	ldr	r2, [pc, #132]	; (8006908 <TIM_Base_SetConfig+0xec>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00f      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a20      	ldr	r2, [pc, #128]	; (800690c <TIM_Base_SetConfig+0xf0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00b      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <TIM_Base_SetConfig+0xf4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <TIM_Base_SetConfig+0xf8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a1d      	ldr	r2, [pc, #116]	; (8006918 <TIM_Base_SetConfig+0xfc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d108      	bne.n	80068b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <TIM_Base_SetConfig+0xe4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d103      	bne.n	80068ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	615a      	str	r2, [r3, #20]
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2201      	movs	r2, #1
 8006930:	fa02 f303 	lsl.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	43db      	mvns	r3, r3
 800693e:	401a      	ands	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1a      	ldr	r2, [r3, #32]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	fa01 f303 	lsl.w	r3, r1, r3
 8006954:	431a      	orrs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800697c:	2302      	movs	r3, #2
 800697e:	e050      	b.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d018      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069cc:	d013      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a18      	ldr	r2, [pc, #96]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10c      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40014000 	.word	0x40014000

08006a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <memset>:
 8006a6c:	4402      	add	r2, r0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d100      	bne.n	8006a76 <memset+0xa>
 8006a74:	4770      	bx	lr
 8006a76:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7a:	e7f9      	b.n	8006a70 <memset+0x4>

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4d0d      	ldr	r5, [pc, #52]	; (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2600      	movs	r6, #0
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4d0b      	ldr	r5, [pc, #44]	; (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f000 f818 	bl	8006ac4 <_init>
 8006a94:	1b64      	subs	r4, r4, r5
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08006da0 	.word	0x08006da0
 8006ab8:	08006da0 	.word	0x08006da0
 8006abc:	08006da0 	.word	0x08006da0
 8006ac0:	08006da4 	.word	0x08006da4

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
