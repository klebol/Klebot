
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007998  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea8  08007ea8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea8  08007ea8  00017ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb0  08007eb0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  20000170  08008028  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  08008028  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017863  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046ca  00000000  00000000  00037a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d8  00000000  00000000  0003d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c37b  00000000  00000000  0003ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022bd0  00000000  00000000  0005adeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0030  00000000  00000000  0007d9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006448  00000000  00000000  0011d9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00123e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b18 	.word	0x08007b18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08007b18 	.word	0x08007b18

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Programs_DiodeTestSendOnCmd>:

//
// -- Setting LED on/off --
//
static void Programs_DiodeTestSendOnCmd(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 80004ea:	23d0      	movs	r3, #208	; 0xd0
 80004ec:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_ON;
 80004ee:	2320      	movs	r3, #32
 80004f0:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2102      	movs	r1, #2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f87a 	bl	80015f0 <Radio_TxBufferPut>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <Programs_DiodeTestSendOffCmd>:

static void Programs_DiodeTestSendOffCmd(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 800050a:	23d0      	movs	r3, #208	; 0xd0
 800050c:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_OFF;
 800050e:	2321      	movs	r3, #33	; 0x21
 8000510:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2102      	movs	r1, #2
 8000516:	4618      	mov	r0, r3
 8000518:	f001 f86a 	bl	80015f0 <Radio_TxBufferPut>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <Programs_DiodeTestSet>:
//
// -- Program start/exit --
//

void Programs_DiodeTestSet(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	/* Send start command to robot */
	Programs_SendProgramStartCommand(DIODE_TEST);
 8000528:	20d0      	movs	r0, #208	; 0xd0
 800052a:	f000 f96d 	bl	8000808 <Programs_SendProgramStartCommand>
	/* Set this program in this device */
	//Programs_SetProgram(Programs_DiodeTestProgram);
	/* Setting proper buttons funcionality for this program */
	Inputs_ClearButtonsCallbacks();
 800052e:	f000 fc89 	bl	8000e44 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Programs_DiodeTestSendOnCmd, &Programs_DiodeTestExitProgram);
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <Programs_DiodeTestSet+0x30>)
 8000534:	4908      	ldr	r1, [pc, #32]	; (8000558 <Programs_DiodeTestSet+0x34>)
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fc3e 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, &Programs_DiodeTestSendOffCmd, NULL);
 800053c:	2200      	movs	r2, #0
 800053e:	4907      	ldr	r1, [pc, #28]	; (800055c <Programs_DiodeTestSet+0x38>)
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fc39 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	/* Timestamp for counting timeout for program launch on Klebot */
	DiodeTestDatabase.TimeoutStamp = HAL_GetTick();
 8000546:	f002 fea5 	bl	8003294 <HAL_GetTick>
 800054a:	4603      	mov	r3, r0
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <Programs_DiodeTestSet+0x3c>)
 800054e:	6053      	str	r3, [r2, #4]
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08000565 	.word	0x08000565
 8000558:	080004e5 	.word	0x080004e5
 800055c:	08000505 	.word	0x08000505
 8000560:	2000018c 	.word	0x2000018c

08000564 <Programs_DiodeTestExitProgram>:

void Programs_DiodeTestExitProgram(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	DiodeTestDatabase.ProgramExitFlag = 1;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <Programs_DiodeTestExitProgram+0x20>)
 800056a:	2201      	movs	r2, #1
 800056c:	705a      	strb	r2, [r3, #1]
	Programs_SendProgramExitCommand(DIODE_TEST);
 800056e:	20d0      	movs	r0, #208	; 0xd0
 8000570:	f000 f95e 	bl	8000830 <Programs_SendProgramExitCommand>
	/* Timestamp for counting timeout for program exit on Klebot */
	DiodeTestDatabase.TimeoutStamp = HAL_GetTick();
 8000574:	f002 fe8e 	bl	8003294 <HAL_GetTick>
 8000578:	4603      	mov	r3, r0
 800057a:	4a02      	ldr	r2, [pc, #8]	; (8000584 <Programs_DiodeTestExitProgram+0x20>)
 800057c:	6053      	str	r3, [r2, #4]
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000018c 	.word	0x2000018c

08000588 <Programs_DiodeTestParser>:
//
// -- Program Parser --
//

void Programs_DiodeTestParser(uint8_t *command, uint8_t length)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b22      	cmp	r3, #34	; 0x22
 800059e:	d011      	beq.n	80005c4 <Programs_DiodeTestParser+0x3c>
 80005a0:	2b22      	cmp	r3, #34	; 0x22
 80005a2:	dc20      	bgt.n	80005e6 <Programs_DiodeTestParser+0x5e>
 80005a4:	2b10      	cmp	r3, #16
 80005a6:	d002      	beq.n	80005ae <Programs_DiodeTestParser+0x26>
 80005a8:	2b11      	cmp	r3, #17
 80005aa:	d013      	beq.n	80005d4 <Programs_DiodeTestParser+0x4c>
			Programs_ClearCurrentRobotProgramID();
		}

	default:

		break;
 80005ac:	e01b      	b.n	80005e6 <Programs_DiodeTestParser+0x5e>
		CurrentByte++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2bf0      	cmp	r3, #240	; 0xf0
 80005ba:	d116      	bne.n	80005ea <Programs_DiodeTestParser+0x62>
			Programs_SetCurrentRobotProgramID(DIODE_TEST);				//ack that program has started
 80005bc:	20d0      	movs	r0, #208	; 0xd0
 80005be:	f000 f94b 	bl	8000858 <Programs_SetCurrentRobotProgramID>
		break;
 80005c2:	e012      	b.n	80005ea <Programs_DiodeTestParser+0x62>
		CurrentByte++;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3301      	adds	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
		DiodeTestDatabase.DiodeState = *CurrentByte;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <Programs_DiodeTestParser+0x6c>)
 80005d0:	701a      	strb	r2, [r3, #0]
		break;
 80005d2:	e00b      	b.n	80005ec <Programs_DiodeTestParser+0x64>
		CurrentByte++;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2bf0      	cmp	r3, #240	; 0xf0
 80005e0:	d101      	bne.n	80005e6 <Programs_DiodeTestParser+0x5e>
			Programs_ClearCurrentRobotProgramID();
 80005e2:	f000 f955 	bl	8000890 <Programs_ClearCurrentRobotProgramID>
		break;
 80005e6:	bf00      	nop
 80005e8:	e000      	b.n	80005ec <Programs_DiodeTestParser+0x64>
		break;
 80005ea:	bf00      	nop
	}
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000018c 	.word	0x2000018c

080005f8 <Programs_MotorsDebugControllProgram>:
//
// -- Main Diode Test Program for Controller --
//

Programs_status_t Programs_MotorsDebugControllProgram(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	/*First entry, code which will be performed only at the first entry to this program after launching it */
	if(0 == FirstEntry)
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <Programs_MotorsDebugControllProgram+0xc0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10f      	bne.n	8000624 <Programs_MotorsDebugControllProgram+0x2c>
	{
		/* Clearing display */
		OLED_ClearBuffer(BLACK);
 8000604:	2000      	movs	r0, #0
 8000606:	f002 faa5 	bl	8002b54 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	f002 f9e7 	bl	80029e0 <OLED_MoveCursor>
		OLED_WriteString("Launching Motor Debug ...", WHITE);
 8000612:	2101      	movs	r1, #1
 8000614:	4829      	ldr	r0, [pc, #164]	; (80006bc <Programs_MotorsDebugControllProgram+0xc4>)
 8000616:	f002 fb67 	bl	8002ce8 <OLED_WriteString>
		OLED_SendBuffer();
 800061a:	f002 fa6f 	bl	8002afc <OLED_SendBuffer>
		FirstEntry = 1;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <Programs_MotorsDebugControllProgram+0xc0>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
	}

	/* Program exit process */
	if(1 == MotorsProgramDatabase.ProgramExitFlag)
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <Programs_MotorsDebugControllProgram+0xc8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d11f      	bne.n	800066c <Programs_MotorsDebugControllProgram+0x74>
	{

		/* If there was an exit ACK, CurrentRobotProgramID was cleared by parser */
		if(NO_PROGRAM_SET == Programs_GetCurrentRobotProgramID() )
 800062c:	f000 f924 	bl	8000878 <Programs_GetCurrentRobotProgramID>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d107      	bne.n	8000646 <Programs_MotorsDebugControllProgram+0x4e>
		{
			MotorsProgramDatabase.ProgramExitFlag = 0;
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <Programs_MotorsDebugControllProgram+0xc8>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <Programs_MotorsDebugControllProgram+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
			return PROGRAM_COMPLETED;
 8000642:	2301      	movs	r3, #1
 8000644:	e035      	b.n	80006b2 <Programs_MotorsDebugControllProgram+0xba>
		}
		/* If ACK have not came before timeout, exit program with error */
		else if(HAL_GetTick() - MotorsProgramDatabase.TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
 8000646:	f002 fe25 	bl	8003294 <HAL_GetTick>
 800064a:	4602      	mov	r2, r0
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <Programs_MotorsDebugControllProgram+0xc8>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000656:	d909      	bls.n	800066c <Programs_MotorsDebugControllProgram+0x74>
		{
			MotorsProgramDatabase.ProgramExitFlag = 0;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <Programs_MotorsDebugControllProgram+0xc8>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <Programs_MotorsDebugControllProgram+0xc0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			Programs_ClearCurrentRobotProgramID();
 8000664:	f000 f914 	bl	8000890 <Programs_ClearCurrentRobotProgramID>
			return PROGRAM_EXIT_ERROR;
 8000668:	2304      	movs	r3, #4
 800066a:	e022      	b.n	80006b2 <Programs_MotorsDebugControllProgram+0xba>
	}

	/* Program launch process */
	/* Check if we had response from robot that program has properly started
	 * (parser is writing CurrentRobotProgramID if robot sends start ACK*/
	if(MOTORS_DEBUG != Programs_GetCurrentRobotProgramID() )
 800066c:	f000 f904 	bl	8000878 <Programs_GetCurrentRobotProgramID>
 8000670:	4603      	mov	r3, r0
 8000672:	2bd1      	cmp	r3, #209	; 0xd1
 8000674:	d00f      	beq.n	8000696 <Programs_MotorsDebugControllProgram+0x9e>
	{
		if(HAL_GetTick() - MotorsProgramDatabase.TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 8000676:	f002 fe0d 	bl	8003294 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <Programs_MotorsDebugControllProgram+0xc8>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000686:	d904      	bls.n	8000692 <Programs_MotorsDebugControllProgram+0x9a>
		{
			FirstEntry = 0;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <Programs_MotorsDebugControllProgram+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
			return PROGRAM_LAUNCH_ERROR;
 800068e:	2303      	movs	r3, #3
 8000690:	e00f      	b.n	80006b2 <Programs_MotorsDebugControllProgram+0xba>
		}
		else
		{
			return PROGRAM_IN_PROGRESS;
 8000692:	2302      	movs	r3, #2
 8000694:	e00d      	b.n	80006b2 <Programs_MotorsDebugControllProgram+0xba>
		}
	}

	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 8000696:	2000      	movs	r0, #0
 8000698:	f002 fa5c 	bl	8002b54 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800069c:	2100      	movs	r1, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	f002 f99e 	bl	80029e0 <OLED_MoveCursor>
	OLED_WriteString("TEMPLATE", WHITE);
 80006a4:	2101      	movs	r1, #1
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <Programs_MotorsDebugControllProgram+0xcc>)
 80006a8:	f002 fb1e 	bl	8002ce8 <OLED_WriteString>

	OLED_SendBuffer();
 80006ac:	f002 fa26 	bl	8002afc <OLED_SendBuffer>





	return PROGRAM_IN_PROGRESS;
 80006b0:	2302      	movs	r3, #2
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200001a0 	.word	0x200001a0
 80006bc:	08007b30 	.word	0x08007b30
 80006c0:	20000194 	.word	0x20000194
 80006c4:	08007b4c 	.word	0x08007b4c

080006c8 <Programs_MotorsDebugControllSet>:
//
// -- Program start/exit --
//

void Programs_MotorsDebugControllSet(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	/* Send start command to robot */
	Programs_SendProgramStartCommand(MOTORS_DEBUG);
 80006cc:	20d1      	movs	r0, #209	; 0xd1
 80006ce:	f000 f89b 	bl	8000808 <Programs_SendProgramStartCommand>
	/* Set this program in this device */
	Programs_SetProgram(Programs_MotorsDebugControllProgram);
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <Programs_MotorsDebugControllSet+0x38>)
 80006d4:	f000 f858 	bl	8000788 <Programs_SetProgram>
	/* Setting proper buttons funcionality for this program */
	Inputs_ClearButtonsCallbacks();
 80006d8:	f000 fbb4 	bl	8000e44 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, NULL, &Programs_MotorsDebugControllExitProgram);
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <Programs_MotorsDebugControllSet+0x3c>)
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fb69 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, NULL, NULL);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fb64 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	/* Timestamp for counting timeout for program launch on Klebot */
	MotorsProgramDatabase.TimeoutStamp = HAL_GetTick();
 80006f0:	f002 fdd0 	bl	8003294 <HAL_GetTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <Programs_MotorsDebugControllSet+0x40>)
 80006f8:	6053      	str	r3, [r2, #4]
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	080005f9 	.word	0x080005f9
 8000704:	0800070d 	.word	0x0800070d
 8000708:	20000194 	.word	0x20000194

0800070c <Programs_MotorsDebugControllExitProgram>:

void Programs_MotorsDebugControllExitProgram(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	MotorsProgramDatabase.ProgramExitFlag = 1;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <Programs_MotorsDebugControllExitProgram+0x20>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
	Programs_SendProgramExitCommand(MOTORS_DEBUG);
 8000716:	20d1      	movs	r0, #209	; 0xd1
 8000718:	f000 f88a 	bl	8000830 <Programs_SendProgramExitCommand>
	/* Timestamp for counting timeout for program exit on Klebot */
	MotorsProgramDatabase.TimeoutStamp = HAL_GetTick();
 800071c:	f002 fdba 	bl	8003294 <HAL_GetTick>
 8000720:	4603      	mov	r3, r0
 8000722:	4a02      	ldr	r2, [pc, #8]	; (800072c <Programs_MotorsDebugControllExitProgram+0x20>)
 8000724:	6053      	str	r3, [r2, #4]
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000194 	.word	0x20000194

08000730 <Programs_MotorsDebugControllParser>:
//
// -- Program Parser --
//

void Programs_MotorsDebugControllParser(uint8_t *command, uint8_t length)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b10      	cmp	r3, #16
 8000746:	d002      	beq.n	800074e <Programs_MotorsDebugControllParser+0x1e>
 8000748:	2b11      	cmp	r3, #17
 800074a:	d00b      	beq.n	8000764 <Programs_MotorsDebugControllParser+0x34>
			Programs_ClearCurrentRobotProgramID();
		}

	default:

		break;
 800074c:	e016      	b.n	800077c <Programs_MotorsDebugControllParser+0x4c>
		CurrentByte++;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2bf0      	cmp	r3, #240	; 0xf0
 800075a:	d10d      	bne.n	8000778 <Programs_MotorsDebugControllParser+0x48>
			Programs_SetCurrentRobotProgramID(MOTORS_DEBUG);				//ack that program has started
 800075c:	20d1      	movs	r0, #209	; 0xd1
 800075e:	f000 f87b 	bl	8000858 <Programs_SetCurrentRobotProgramID>
		break;
 8000762:	e009      	b.n	8000778 <Programs_MotorsDebugControllParser+0x48>
		CurrentByte++;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2bf0      	cmp	r3, #240	; 0xf0
 8000770:	d104      	bne.n	800077c <Programs_MotorsDebugControllParser+0x4c>
			Programs_ClearCurrentRobotProgramID();
 8000772:	f000 f88d 	bl	8000890 <Programs_ClearCurrentRobotProgramID>
		break;
 8000776:	e001      	b.n	800077c <Programs_MotorsDebugControllParser+0x4c>
		break;
 8000778:	bf00      	nop
 800077a:	e000      	b.n	800077e <Programs_MotorsDebugControllParser+0x4e>
		break;
 800077c:	bf00      	nop
	}
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <Programs_SetProgram>:
// -- General functions to manage programs --
//

/* Function for setting current pointer to program */
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToSet)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <Programs_SetProgram+0x12>
	{
		return PROGRAMS_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <Programs_SetProgram+0x30>
	}

	if(NULL == CurrentlyRunningProg)
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Programs_SetProgram+0x38>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d109      	bne.n	80007b6 <Programs_SetProgram+0x2e>
	{
		CurrentlyRunningProg = ProgramToSet;
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <Programs_SetProgram+0x38>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6013      	str	r3, [r2, #0]
		Programs_SendProgramStartCommand(ProgramToSet->ProgramID);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f82b 	bl	8000808 <Programs_SendProgramStartCommand>
		return PROGRAMS_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <Programs_SetProgram+0x30>
	}
	else
	{
		return PROGRAMS_ERROR;
 80007b6:	2301      	movs	r3, #1
	}
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001a4 	.word	0x200001a4

080007c4 <Programs_ClearProgram>:
{
	return ProgramToPerform;
}

void Programs_ClearProgram(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	ProgramToPerform = NULL;
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <Programs_ClearProgram+0x14>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	200001a8 	.word	0x200001a8

080007dc <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	Programs_status_t status;
	/* If there is a program to perform... */
	if(NULL != ProgramToPerform)
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <Programs_PerformProgram+0x28>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d005      	beq.n	80007f6 <Programs_PerformProgram+0x1a>
	{
	/* Perform it and return it's status */
		status = ProgramToPerform();
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <Programs_PerformProgram+0x28>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4798      	blx	r3
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	e001      	b.n	80007fa <Programs_PerformProgram+0x1e>
	}
	else
	{
		status = NO_PROGRAM_SET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001a8 	.word	0x200001a8

08000808 <Programs_SendProgramStartCommand>:
//
//	-- Sending programs start/exit commands --
//

Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	733b      	strb	r3, [r7, #12]
	Buffer[1] = START_PROGRAM;
 8000816:	2310      	movs	r3, #16
 8000818:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2102      	movs	r1, #2
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fee5 	bl	80015f0 <Radio_TxBufferPut>
 8000826:	4603      	mov	r3, r0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Programs_SendProgramExitCommand>:

Programs_error_t Programs_SendProgramExitCommand(uint8_t ProgramID)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	733b      	strb	r3, [r7, #12]
	Buffer[1] = EXIT_PROGRAM;
 800083e:	2311      	movs	r3, #17
 8000840:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2102      	movs	r1, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fed1 	bl	80015f0 <Radio_TxBufferPut>
 800084e:	4603      	mov	r3, r0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <Programs_SetCurrentRobotProgramID>:
//
//	-- Program which is currently running on robot identifier --
//

void Programs_SetCurrentRobotProgramID(uint8_t ID)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	CurrentRobotProgramID = ID;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <Programs_SetCurrentRobotProgramID+0x1c>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	7013      	strb	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	200001ac 	.word	0x200001ac

08000878 <Programs_GetCurrentRobotProgramID>:

uint8_t Programs_GetCurrentRobotProgramID(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	return CurrentRobotProgramID;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <Programs_GetCurrentRobotProgramID+0x14>)
 800087e:	781b      	ldrb	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	200001ac 	.word	0x200001ac

08000890 <Programs_ClearCurrentRobotProgramID>:

void Programs_ClearCurrentRobotProgramID(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	CurrentRobotProgramID = NO_PROGRAM_SET;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <Programs_ClearCurrentRobotProgramID+0x14>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	200001ac 	.word	0x200001ac

080008a8 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008ba:	3301      	adds	r3, #1
 80008bc:	425a      	negs	r2, r3
 80008be:	f003 031f 	and.w	r3, r3, #31
 80008c2:	f002 021f 	and.w	r2, r2, #31
 80008c6:	bf58      	it	pl
 80008c8:	4253      	negpl	r3, r2
 80008ca:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d101      	bne.n	80008dc <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	e00b      	b.n	80008f4 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008e2:	4619      	mov	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	78fa      	ldrb	r2, [r7, #3]
 80008e8:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000910:	3301      	adds	r3, #1
 8000912:	425a      	negs	r2, r3
 8000914:	f003 031f 	and.w	r3, r3, #31
 8000918:	f002 021f 	and.w	r2, r2, #31
 800091c:	bf58      	it	pl
 800091e:	4253      	negpl	r3, r2
 8000920:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800092e:	429a      	cmp	r2, r3
 8000930:	d101      	bne.n	8000936 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000932:	2301      	movs	r3, #1
 8000934:	e00c      	b.n	8000950 <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	5c9a      	ldrb	r2, [r3, r2]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000970:	4a36      	ldr	r2, [pc, #216]	; (8000a4c <MX_ADC1_Init+0xf0>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000976:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800097a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <MX_ADC1_Init+0xec>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000984:	2201      	movs	r2, #1
 8000986:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <MX_ADC1_Init+0xec>)
 800098a:	2201      	movs	r2, #1
 800098c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000996:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_ADC1_Init+0xec>)
 800099e:	4a2c      	ldr	r2, [pc, #176]	; (8000a50 <MX_ADC1_Init+0xf4>)
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009bc:	4822      	ldr	r0, [pc, #136]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009be:	f002 fc99 	bl	80032f4 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c8:	f001 f820 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009cc:	230b      	movs	r3, #11
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009d4:	2307      	movs	r3, #7
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	481a      	ldr	r0, [pc, #104]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009de:	f002 feeb 	bl	80037b8 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e8:	f001 f810 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009ec:	230c      	movs	r3, #12
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_ADC1_Init+0xec>)
 80009fa:	f002 fedd 	bl	80037b8 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a04:	f001 f802 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000a16:	f002 fecf 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a20:	f000 fff4 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_ADC1_Init+0xec>)
 8000a32:	f002 fec1 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a3c:	f000 ffe6 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001b0 	.word	0x200001b0
 8000a4c:	40012000 	.word	0x40012000
 8000a50:	0f000001 	.word	0x0f000001

08000a54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3c      	ldr	r2, [pc, #240]	; (8000b64 <HAL_ADC_MspInit+0x110>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d171      	bne.n	8000b5a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <HAL_ADC_MspInit+0x114>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000aca:	2306      	movs	r3, #6
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4823      	ldr	r0, [pc, #140]	; (8000b6c <HAL_ADC_MspInit+0x118>)
 8000ade:	f003 fdc9 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	481e      	ldr	r0, [pc, #120]	; (8000b70 <HAL_ADC_MspInit+0x11c>)
 8000af6:	f003 fdbd 	bl	8004674 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x124>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b40:	f003 fa06 	bl	8003f50 <HAL_DMA_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000b4a:	f000 ff5f 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_ADC_MspInit+0x120>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40012000 	.word	0x40012000
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	200001f8 	.word	0x200001f8
 8000b78:	40026410 	.word	0x40026410

08000b7c <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000b82:	4828      	ldr	r0, [pc, #160]	; (8000c24 <Inputs_Init+0xa8>)
 8000b84:	f005 ff2c 	bl	80069e0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 8000b88:	2228      	movs	r2, #40	; 0x28
 8000b8a:	4927      	ldr	r1, [pc, #156]	; (8000c28 <Inputs_Init+0xac>)
 8000b8c:	4827      	ldr	r0, [pc, #156]	; (8000c2c <Inputs_Init+0xb0>)
 8000b8e:	f002 fd05 	bl	800359c <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000b92:	2032      	movs	r0, #50	; 0x32
 8000b94:	f002 fb8a 	bl	80032ac <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 8000b98:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <Inputs_Init+0xb4>)
 8000b9a:	4926      	ldr	r1, [pc, #152]	; (8000c34 <Inputs_Init+0xb8>)
 8000b9c:	4826      	ldr	r0, [pc, #152]	; (8000c38 <Inputs_Init+0xbc>)
 8000b9e:	f000 fc69 	bl	8001474 <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000ba2:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <Inputs_Init+0xc0>)
 8000ba4:	4926      	ldr	r1, [pc, #152]	; (8000c40 <Inputs_Init+0xc4>)
 8000ba6:	4827      	ldr	r0, [pc, #156]	; (8000c44 <Inputs_Init+0xc8>)
 8000ba8:	f000 fc64 	bl	8001474 <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <Inputs_Init+0xbc>)
 8000bae:	f000 fc7c 	bl	80014aa <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000bb2:	4824      	ldr	r0, [pc, #144]	; (8000c44 <Inputs_Init+0xc8>)
 8000bb4:	f000 fc79 	bl	80014aa <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bb8:	213c      	movs	r1, #60	; 0x3c
 8000bba:	481a      	ldr	r0, [pc, #104]	; (8000c24 <Inputs_Init+0xa8>)
 8000bbc:	f006 f810 	bl	8006be0 <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
 8000bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2332      	movs	r3, #50	; 0x32
 8000bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bcc:	491e      	ldr	r1, [pc, #120]	; (8000c48 <Inputs_Init+0xcc>)
 8000bce:	481f      	ldr	r0, [pc, #124]	; (8000c4c <Inputs_Init+0xd0>)
 8000bd0:	f000 f98d 	bl	8000eee <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
 8000bd4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2332      	movs	r3, #50	; 0x32
 8000bdc:	2204      	movs	r2, #4
 8000bde:	491c      	ldr	r1, [pc, #112]	; (8000c50 <Inputs_Init+0xd4>)
 8000be0:	481c      	ldr	r0, [pc, #112]	; (8000c54 <Inputs_Init+0xd8>)
 8000be2:	f000 f984 	bl	8000eee <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
 8000be6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2332      	movs	r3, #50	; 0x32
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4915      	ldr	r1, [pc, #84]	; (8000c48 <Inputs_Init+0xcc>)
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <Inputs_Init+0xdc>)
 8000bf4:	f000 f97b 	bl	8000eee <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
 8000bf8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2332      	movs	r3, #50	; 0x32
 8000c00:	2201      	movs	r2, #1
 8000c02:	4916      	ldr	r1, [pc, #88]	; (8000c5c <Inputs_Init+0xe0>)
 8000c04:	4816      	ldr	r0, [pc, #88]	; (8000c60 <Inputs_Init+0xe4>)
 8000c06:	f000 f972 	bl	8000eee <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
 8000c0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2332      	movs	r3, #50	; 0x32
 8000c12:	2220      	movs	r2, #32
 8000c14:	4911      	ldr	r1, [pc, #68]	; (8000c5c <Inputs_Init+0xe0>)
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <Inputs_Init+0xe8>)
 8000c18:	f000 f969 	bl	8000eee <DB_ButtonInit>
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000900 	.word	0x20000900
 8000c28:	20000258 	.word	0x20000258
 8000c2c:	200001b0 	.word	0x200001b0
 8000c30:	200002aa 	.word	0x200002aa
 8000c34:	200002a8 	.word	0x200002a8
 8000c38:	200002b0 	.word	0x200002b0
 8000c3c:	200002ae 	.word	0x200002ae
 8000c40:	200002ac 	.word	0x200002ac
 8000c44:	200002c8 	.word	0x200002c8
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	200002e0 	.word	0x200002e0
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	20000300 	.word	0x20000300
 8000c58:	20000320 	.word	0x20000320
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	20000340 	.word	0x20000340
 8000c64:	20000360 	.word	0x20000360

08000c68 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 8000c80:	2300      	movs	r3, #0
 8000c82:	77fb      	strb	r3, [r7, #31]
 8000c84:	e021      	b.n	8000cca <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	7ffa      	ldrb	r2, [r7, #31]
 8000c8a:	4924      	ldr	r1, [pc, #144]	; (8000d1c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000c8c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c90:	4413      	add	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	7ffa      	ldrb	r2, [r7, #31]
 8000c98:	3201      	adds	r2, #1
 8000c9a:	4920      	ldr	r1, [pc, #128]	; (8000d1c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000c9c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	7ffa      	ldrb	r2, [r7, #31]
 8000ca8:	3202      	adds	r2, #2
 8000caa:	491c      	ldr	r1, [pc, #112]	; (8000d1c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000cac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	7ffa      	ldrb	r2, [r7, #31]
 8000cb8:	3203      	adds	r2, #3
 8000cba:	4918      	ldr	r1, [pc, #96]	; (8000d1c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000cbc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000cc4:	7ffb      	ldrb	r3, [r7, #31]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	77fb      	strb	r3, [r7, #31]
 8000cca:	7ffb      	ldrb	r3, [r7, #31]
 8000ccc:	2b24      	cmp	r3, #36	; 0x24
 8000cce:	d9da      	bls.n	8000c86 <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000cde:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000cee:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000cfe:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	08db      	lsrs	r3, r3, #3
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000d0e:	80da      	strh	r2, [r3, #6]
}
 8000d10:	bf00      	nop
 8000d12:	3724      	adds	r7, #36	; 0x24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000258 	.word	0x20000258
 8000d20:	cccccccd 	.word	0xcccccccd
 8000d24:	200002a8 	.word	0x200002a8

08000d28 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <Inputs_GetEncoderCount+0x4c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <Inputs_GetEncoderCount+0x50>)
 8000d36:	8812      	ldrh	r2, [r2, #0]
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	dc03      	bgt.n	8000d4a <Inputs_GetEncoderCount+0x22>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f113 0f03 	cmn.w	r3, #3
 8000d48:	da0d      	bge.n	8000d66 <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <Inputs_GetEncoderCount+0x4c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <Inputs_GetEncoderCount+0x50>)
 8000d54:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da00      	bge.n	8000d5e <Inputs_GetEncoderCount+0x36>
 8000d5c:	3303      	adds	r3, #3
 8000d5e:	109b      	asrs	r3, r3, #2
 8000d60:	425b      	negs	r3, r3
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	e000      	b.n	8000d68 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 8000d66:	2300      	movs	r3, #0
	}
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000900 	.word	0x20000900
 8000d78:	20000380 	.word	0x20000380

08000d7c <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <Inputs_ButtonsRoutine+0x28>)
 8000d82:	f000 f8ff 	bl	8000f84 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <Inputs_ButtonsRoutine+0x2c>)
 8000d88:	f000 f8fc 	bl	8000f84 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <Inputs_ButtonsRoutine+0x30>)
 8000d8e:	f000 f8f9 	bl	8000f84 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <Inputs_ButtonsRoutine+0x34>)
 8000d94:	f000 f8f6 	bl	8000f84 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <Inputs_ButtonsRoutine+0x38>)
 8000d9a:	f000 f8f3 	bl	8000f84 <DB_ButtonProcess>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200002e0 	.word	0x200002e0
 8000da8:	20000300 	.word	0x20000300
 8000dac:	20000340 	.word	0x20000340
 8000db0:	20000320 	.word	0x20000320
 8000db4:	20000360 	.word	0x20000360

08000db8 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d82b      	bhi.n	8000e24 <Inputs_ButtonsRegisterCallback+0x6c>
 8000dcc:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <Inputs_ButtonsRegisterCallback+0x1c>)
 8000dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd2:	bf00      	nop
 8000dd4:	08000de9 	.word	0x08000de9
 8000dd8:	08000df5 	.word	0x08000df5
 8000ddc:	08000e01 	.word	0x08000e01
 8000de0:	08000e0d 	.word	0x08000e0d
 8000de4:	08000e19 	.word	0x08000e19
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	4810      	ldr	r0, [pc, #64]	; (8000e30 <Inputs_ButtonsRegisterCallback+0x78>)
 8000dee:	f000 f8a1 	bl	8000f34 <DB_ButtonPressCallbackRegister>
		break;
 8000df2:	e018      	b.n	8000e26 <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <Inputs_ButtonsRegisterCallback+0x7c>)
 8000dfa:	f000 f89b 	bl	8000f34 <DB_ButtonPressCallbackRegister>
		break;
 8000dfe:	e012      	b.n	8000e26 <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <Inputs_ButtonsRegisterCallback+0x80>)
 8000e06:	f000 f895 	bl	8000f34 <DB_ButtonPressCallbackRegister>
		break;
 8000e0a:	e00c      	b.n	8000e26 <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <Inputs_ButtonsRegisterCallback+0x84>)
 8000e12:	f000 f88f 	bl	8000f34 <DB_ButtonPressCallbackRegister>
		break;
 8000e16:	e006      	b.n	8000e26 <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <Inputs_ButtonsRegisterCallback+0x88>)
 8000e1e:	f000 f889 	bl	8000f34 <DB_ButtonPressCallbackRegister>
		break;
 8000e22:	e000      	b.n	8000e26 <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 8000e24:	bf00      	nop
	}
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002e0 	.word	0x200002e0
 8000e34:	20000300 	.word	0x20000300
 8000e38:	20000320 	.word	0x20000320
 8000e3c:	20000340 	.word	0x20000340
 8000e40:	20000360 	.word	0x20000360

08000e44 <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <Inputs_ClearButtonsCallbacks+0x3c>)
 8000e4e:	f000 f871 	bl	8000f34 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <Inputs_ClearButtonsCallbacks+0x40>)
 8000e58:	f000 f86c 	bl	8000f34 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <Inputs_ClearButtonsCallbacks+0x44>)
 8000e62:	f000 f867 	bl	8000f34 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4808      	ldr	r0, [pc, #32]	; (8000e8c <Inputs_ClearButtonsCallbacks+0x48>)
 8000e6c:	f000 f862 	bl	8000f34 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <Inputs_ClearButtonsCallbacks+0x4c>)
 8000e76:	f000 f85d 	bl	8000f34 <DB_ButtonPressCallbackRegister>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200002e0 	.word	0x200002e0
 8000e84:	20000300 	.word	0x20000300
 8000e88:	20000320 	.word	0x20000320
 8000e8c:	20000340 	.word	0x20000340
 8000e90:	20000360 	.word	0x20000360

08000e94 <Parser_Controller>:
#include "Programs/DiodeTest_Prog.h"
#include "Programs/MotorsDebugControll_Prog.h"


void Parser_Controller(uint8_t *command, uint8_t length)							//main parser funciton
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
	uint8_t Length = length;
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	72fb      	strb	r3, [r7, #11]



	switch(*CurrentByte)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2bd0      	cmp	r3, #208	; 0xd0
 8000eae:	d002      	beq.n	8000eb6 <Parser_Controller+0x22>
 8000eb0:	2bd1      	cmp	r3, #209	; 0xd1
 8000eb2:	d00c      	beq.n	8000ece <Parser_Controller+0x3a>
		Programs_MotorsDebugControllParser(CurrentByte, Length);;
		break;

	default:

		break;
 8000eb4:	e017      	b.n	8000ee6 <Parser_Controller+0x52>
		CurrentByte++;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
		Length--;
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	72fb      	strb	r3, [r7, #11]
		Programs_DiodeTestParser(CurrentByte, Length);
 8000ec2:	7afb      	ldrb	r3, [r7, #11]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff fb5e 	bl	8000588 <Programs_DiodeTestParser>
		break;
 8000ecc:	e00b      	b.n	8000ee6 <Parser_Controller+0x52>
		CurrentByte++;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
		Length--;
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	72fb      	strb	r3, [r7, #11]
		Programs_MotorsDebugControllParser(CurrentByte, Length);;
 8000eda:	7afb      	ldrb	r3, [r7, #11]
 8000edc:	4619      	mov	r1, r3
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff fc26 	bl	8000730 <Programs_MotorsDebugControllParser>
		break;
 8000ee4:	bf00      	nop
	}


}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <DB_ButtonInit>:

#include "debounce.h"
#include "stdio.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	615a      	str	r2, [r3, #20]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f003 fd06 	bl	800497c <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <DB_IsButtonPressed+0x22>
	{
		return 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 8000f7a:	2300      	movs	r3, #0
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e1b      	ldrb	r3, [r3, #24]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	f200 8082 	bhi.w	800109a <DB_ButtonProcess+0x116>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <DB_ButtonProcess+0x18>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fcb 	.word	0x08000fcb
 8000fa4:	0800100b 	.word	0x0800100b
 8000fa8:	08001055 	.word	0x08001055
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffd3 	bl	8000f58 <DB_IsButtonPressed>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d06b      	beq.n	8001090 <DB_ButtonProcess+0x10c>
		{
			Button->ButtonState = DEBOUNCE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 8000fbe:	f002 f969 	bl	8003294 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	61da      	str	r2, [r3, #28]
		}
		break;
 8000fc8:	e062      	b.n	8001090 <DB_ButtonProcess+0x10c>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8000fca:	f002 f963 	bl	8003294 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d95a      	bls.n	8001094 <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button))
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffba 	bl	8000f58 <DB_IsButtonPressed>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2202      	movs	r2, #2
 8000fee:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8000ff0:	f002 f950 	bl	8003294 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonState = IDLE;
				printf("Debounce: Button bounced \n");
			}
		}
		break;
 8000ffa:	e04b      	b.n	8001094 <DB_ButtonProcess+0x110>
				Button->ButtonState = IDLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button bounced \n");
 8001002:	4828      	ldr	r0, [pc, #160]	; (80010a4 <DB_ButtonProcess+0x120>)
 8001004:	f006 f9f2 	bl	80073ec <puts>
		break;
 8001008:	e044      	b.n	8001094 <DB_ButtonProcess+0x110>
	case PRESSED:

		if(0 == DB_IsButtonPressed(Button))
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa4 	bl	8000f58 <DB_IsButtonPressed>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10d      	bne.n	8001032 <DB_ButtonProcess+0xae>
		{
			if(NULL != Button->ButtonPressAction)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <DB_ButtonProcess+0xa0>
			{
				Button->ButtonPressAction();
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button pressed! \n");
 800102a:	481f      	ldr	r0, [pc, #124]	; (80010a8 <DB_ButtonProcess+0x124>)
 800102c:	f006 f9de 	bl	80073ec <puts>
			{
				Button->ButtonState = HOLD;
				Button->LastTick = HAL_GetTick();
			}
		}
		break;
 8001030:	e032      	b.n	8001098 <DB_ButtonProcess+0x114>
			if(HAL_GetTick() - (Button->LastTick) > 150 )
 8001032:	f002 f92f 	bl	8003294 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b96      	cmp	r3, #150	; 0x96
 8001040:	d92a      	bls.n	8001098 <DB_ButtonProcess+0x114>
				Button->ButtonState = HOLD;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001048:	f002 f924 	bl	8003294 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	61da      	str	r2, [r3, #28]
		break;
 8001052:	e021      	b.n	8001098 <DB_ButtonProcess+0x114>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 8001054:	f002 f91e 	bl	8003294 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	429a      	cmp	r2, r3
 8001066:	d918      	bls.n	800109a <DB_ButtonProcess+0x116>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonHoldAction)
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff75 	bl	8000f58 <DB_IsButtonPressed>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d009      	beq.n	8001088 <DB_ButtonProcess+0x104>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <DB_ButtonProcess+0x104>
			{
				Button->ButtonHoldAction();
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4798      	blx	r3
				printf("Debounce: Button held! \r\n");
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <DB_ButtonProcess+0x128>)
 8001084:	f006 f9b2 	bl	80073ec <puts>
			}
			Button->ButtonState = IDLE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	761a      	strb	r2, [r3, #24]
		}
	}
}
 800108e:	e004      	b.n	800109a <DB_ButtonProcess+0x116>
		break;
 8001090:	bf00      	nop
 8001092:	e002      	b.n	800109a <DB_ButtonProcess+0x116>
		break;
 8001094:	bf00      	nop
 8001096:	e000      	b.n	800109a <DB_ButtonProcess+0x116>
		break;
 8001098:	bf00      	nop
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	08007b58 	.word	0x08007b58
 80010a8:	08007b74 	.word	0x08007b74
 80010ac:	08007b90 	.word	0x08007b90

080010b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_DMA_Init+0x3c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <MX_DMA_Init+0x3c>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_DMA_Init+0x3c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2038      	movs	r0, #56	; 0x38
 80010d8:	f002 ff03 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010dc:	2038      	movs	r0, #56	; 0x38
 80010de:	f002 ff1c 	bl	8003f1a <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b57      	ldr	r3, [pc, #348]	; (8001268 <MX_GPIO_Init+0x178>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a56      	ldr	r2, [pc, #344]	; (8001268 <MX_GPIO_Init+0x178>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b54      	ldr	r3, [pc, #336]	; (8001268 <MX_GPIO_Init+0x178>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <MX_GPIO_Init+0x178>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <MX_GPIO_Init+0x178>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <MX_GPIO_Init+0x178>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <MX_GPIO_Init+0x178>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a48      	ldr	r2, [pc, #288]	; (8001268 <MX_GPIO_Init+0x178>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <MX_GPIO_Init+0x178>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <MX_GPIO_Init+0x178>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a41      	ldr	r2, [pc, #260]	; (8001268 <MX_GPIO_Init+0x178>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <MX_GPIO_Init+0x178>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <MX_GPIO_Init+0x178>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a3a      	ldr	r2, [pc, #232]	; (8001268 <MX_GPIO_Init+0x178>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b38      	ldr	r3, [pc, #224]	; (8001268 <MX_GPIO_Init+0x178>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2124      	movs	r1, #36	; 0x24
 8001196:	4835      	ldr	r0, [pc, #212]	; (800126c <MX_GPIO_Init+0x17c>)
 8001198:	f003 fc08 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	21c0      	movs	r1, #192	; 0xc0
 80011a0:	4833      	ldr	r0, [pc, #204]	; (8001270 <MX_GPIO_Init+0x180>)
 80011a2:	f003 fc03 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 80011a6:	f240 4301 	movw	r3, #1025	; 0x401
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <MX_GPIO_Init+0x180>)
 80011bc:	f003 fa5a 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 80011c0:	2321      	movs	r3, #33	; 0x21
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4828      	ldr	r0, [pc, #160]	; (8001274 <MX_GPIO_Init+0x184>)
 80011d4:	f003 fa4e 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011d8:	2304      	movs	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	481f      	ldr	r0, [pc, #124]	; (800126c <MX_GPIO_Init+0x17c>)
 80011f0:	f003 fa40 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <MX_GPIO_Init+0x17c>)
 800120c:	f003 fa32 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8001210:	23c0      	movs	r3, #192	; 0xc0
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0x180>)
 8001228:	f003 fa24 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 800122c:	2304      	movs	r3, #4
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_GPIO_Init+0x188>)
 8001240:	f003 fa18 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8001244:	2320      	movs	r3, #32
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0x17c>)
 800125c:	f003 fa0a 	bl	8004674 <HAL_GPIO_Init>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020c00 	.word	0x40020c00

0800127c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C1_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_I2C1_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C1_Init+0x50>)
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x58>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_I2C1_Init+0x50>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ba:	f003 fba9 	bl	8004a10 <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c4:	f000 fba2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000384 	.word	0x20000384
 80012d0:	40005400 	.word	0x40005400
 80012d4:	00061a80 	.word	0x00061a80

080012d8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_I2C3_Init+0x50>)
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <MX_I2C3_Init+0x54>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_I2C3_Init+0x50>)
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <MX_I2C3_Init+0x58>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_I2C3_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_I2C3_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_I2C3_Init+0x50>)
 80012f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_I2C3_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_I2C3_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_I2C3_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_I2C3_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_I2C3_Init+0x50>)
 8001316:	f003 fb7b 	bl	8004a10 <HAL_I2C_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001320:	f000 fb74 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200003d8 	.word	0x200003d8
 800132c:	40005c00 	.word	0x40005c00
 8001330:	00061a80 	.word	0x00061a80

08001334 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a42      	ldr	r2, [pc, #264]	; (800145c <HAL_I2C_MspInit+0x128>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12d      	bne.n	80013b2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a40      	ldr	r2, [pc, #256]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2312      	movs	r3, #18
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001384:	2304      	movs	r3, #4
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4835      	ldr	r0, [pc, #212]	; (8001464 <HAL_I2C_MspInit+0x130>)
 8001390:	f003 f970 	bl	8004674 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a30      	ldr	r2, [pc, #192]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 800139e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80013b0:	e050      	b.n	8001454 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <HAL_I2C_MspInit+0x134>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d14b      	bne.n	8001454 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001406:	2304      	movs	r3, #4
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <HAL_I2C_MspInit+0x138>)
 8001412:	f003 f92f 	bl	8004674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001428:	2304      	movs	r3, #4
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	480f      	ldr	r0, [pc, #60]	; (8001470 <HAL_I2C_MspInit+0x13c>)
 8001434:	f003 f91e 	bl	8004674 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 8001442:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_I2C_MspInit+0x12c>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005400 	.word	0x40005400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400
 8001468:	40005c00 	.word	0x40005c00
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000

08001474 <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <JoyS_Init+0x18>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e000      	b.n	800149e <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 80014b2:	f001 feef 	bl	8003294 <HAL_GetTick>
 80014b6:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 80014b8:	e015      	b.n	80014e6 <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d104      	bne.n	80014ce <JoyS_SetIdleValues+0x24>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	881a      	ldrh	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e007      	b.n	80014f6 <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 80014e6:	f001 fed5 	bl	8003294 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b63      	cmp	r3, #99	; 0x63
 80014f2:	d9e2      	bls.n	80014ba <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 f87d 	bl	8002608 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 800150e:	4906      	ldr	r1, [pc, #24]	; (8001528 <Radio_Init+0x28>)
 8001510:	2000      	movs	r0, #0
 8001512:	f000 fe96 	bl	8002242 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <Radio_Init+0x2c>)
 8001518:	f000 fecc 	bl	80022b4 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 800151c:	f000 fcd6 	bl	8001ecc <nRF24_TX_Mode>
#endif
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	08007bac 	.word	0x08007bac
 800152c:	08007bb0 	.word	0x08007bb0

08001530 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001540:	2300      	movs	r3, #0
 8001542:	73bb      	strb	r3, [r7, #14]
 8001544:	e010      	b.n	8001568 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <Radio_RxBufferPut+0x4c>)
 800154e:	f7ff f9ab 	bl	80008a8 <RBuffer_Write>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4313      	orrs	r3, r2
 800155a:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	3301      	adds	r3, #1
 8001566:	73bb      	strb	r3, [r7, #14]
 8001568:	7bba      	ldrb	r2, [r7, #14]
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3ea      	bcc.n	8001546 <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000454 	.word	0x20000454

08001580 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8001592:	f107 030d 	add.w	r3, r7, #13
 8001596:	4619      	mov	r1, r3
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <Radio_RxBufferGet+0x6c>)
 800159a:	f7ff f9b1 	bl	8000900 <RBuffer_Read>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80015a8:	e012      	b.n	80015d0 <Radio_RxBufferGet+0x50>
	{

		*(CommandDestination+Length) = Data;				//write received byte to destination
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	7b7a      	ldrb	r2, [r7, #13]
 80015b2:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 80015ba:	f107 030d 	add.w	r3, r7, #13
 80015be:	4619      	mov	r1, r3
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <Radio_RxBufferGet+0x6c>)
 80015c2:	f7ff f99d 	bl	8000900 <RBuffer_Read>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d002      	beq.n	80015dc <Radio_RxBufferGet+0x5c>
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0e6      	beq.n	80015aa <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	701a      	strb	r2, [r3, #0]
	return Status;
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000454 	.word	0x20000454

080015f0 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001600:	2300      	movs	r3, #0
 8001602:	73bb      	strb	r3, [r7, #14]
 8001604:	e010      	b.n	8001628 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <Radio_TxBufferPut+0x5c>)
 800160e:	f7ff f94b 	bl	80008a8 <RBuffer_Write>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	4313      	orrs	r3, r2
 800161a:	73fb      	strb	r3, [r7, #15]
		Command++;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	3301      	adds	r3, #1
 8001626:	73bb      	strb	r3, [r7, #14]
 8001628:	7bba      	ldrb	r2, [r7, #14]
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3ea      	bcc.n	8001606 <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001630:	2104      	movs	r1, #4
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <Radio_TxBufferPut+0x5c>)
 8001634:	f7ff f938 	bl	80008a8 <RBuffer_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	4313      	orrs	r3, r2
 8001640:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000430 	.word	0x20000430

08001650 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001666:	1d3a      	adds	r2, r7, #4
 8001668:	4413      	add	r3, r2
 800166a:	4619      	mov	r1, r3
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <Radio_TxBufferSend+0x84>)
 800166e:	f7ff f947 	bl	8000900 <RBuffer_Read>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800167a:	4313      	orrs	r3, r2
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800168a:	3328      	adds	r3, #40	; 0x28
 800168c:	443b      	add	r3, r7
 800168e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001692:	2b04      	cmp	r3, #4
 8001694:	d003      	beq.n	800169e <Radio_TxBufferSend+0x4e>
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0e1      	beq.n	8001662 <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 800169e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d110      	bne.n	80016c8 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 80016a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 ff18 	bl	80024e4 <nRF24_SendPacket>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016bc:	4313      	orrs	r3, r2
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <Radio_TxBufferSend+0x88>)
 80016c4:	2202      	movs	r2, #2
 80016c6:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 80016c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000430 	.word	0x20000430
 80016d8:	2000042d 	.word	0x2000042d

080016dc <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
#ifdef CONTROLLER
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 80016e2:	f240 4305 	movw	r3, #1029	; 0x405
 80016e6:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <Radio_SendConnectionCheck+0x28>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fef6 	bl	80024e4 <nRF24_SendPacket>
 80016f8:	4603      	mov	r3, r0
#ifdef ROBOT
	uint8_t Command [3] = {CONNECTION_HOLD, _OK, COMM_END};
	TxStatus = RADIO_BUSY;
	return nRF24_WriteAckPayload(0, Command, 3);
#endif
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000042d 	.word	0x2000042d

08001708 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 800170e:	f000 ff53 	bl	80025b8 <nRF24_Event>

#ifdef CONTROLLER

	static uint32_t LastTick;
	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 8001712:	f001 fdbf 	bl	8003294 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <Radio_Process+0x88>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b32      	cmp	r3, #50	; 0x32
 8001720:	d91c      	bls.n	800175c <Radio_Process+0x54>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <Radio_Process+0x8c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d107      	bne.n	800173a <Radio_Process+0x32>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 800172a:	f7ff ff91 	bl	8001650 <Radio_TxBufferSend>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10e      	bne.n	8001752 <Radio_Process+0x4a>
			{
				Radio_SendConnectionCheck();
 8001734:	f7ff ffd2 	bl	80016dc <Radio_SendConnectionCheck>
 8001738:	e00b      	b.n	8001752 <Radio_Process+0x4a>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <Radio_Process+0x8c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <Radio_Process+0x4a>
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <Radio_Process+0x90>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d103      	bne.n	8001752 <Radio_Process+0x4a>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 800174a:	f000 f829 	bl	80017a0 <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 800174e:	f7ff ffc5 	bl	80016dc <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8001752:	f001 fd9f 	bl	8003294 <HAL_GetTick>
 8001756:	4603      	mov	r3, r0
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <Radio_Process+0x88>)
 800175a:	6013      	str	r3, [r2, #0]
		ConnectionStatus = RADIO_ERROR;
		Radio_NoConnectionCallback();
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <Radio_Process+0x94>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d110      	bne.n	8001786 <Radio_Process+0x7e>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001764:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff07 	bl	8001580 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001772:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f001 f81c 	bl	80027b8 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <Radio_Process+0x94>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
	}
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000478 	.word	0x20000478
 8001794:	2000042d 	.word	0x2000042d
 8001798:	2000042c 	.word	0x2000042c
 800179c:	2000042e 	.word	0x2000042e

080017a0 <Radio_NoConnectionCallback>:
{
	nRF24_IRQ_Handler();
}

__weak void Radio_NoConnectionCallback(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <nRF24_EventTxCallback+0x1c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <nRF24_EventTxCallback+0x20>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2000042d 	.word	0x2000042d
 80017d0:	2000042c 	.word	0x2000042c

080017d4 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 80017da:	1dfa      	adds	r2, r7, #7
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fe68 	bl	80024b8 <nRF24_ReadRXPaylaod>
	ConnectionStatus = RADIO_OK;
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe9d 	bl	8001530 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 80017f6:	4b03      	ldr	r3, [pc, #12]	; (8001804 <nRF24_EventRxCallback+0x30>)
 80017f8:	2203      	movs	r2, #3
 80017fa:	701a      	strb	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000042e 	.word	0x2000042e

08001808 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <nRF24_EventMrCallback+0x14>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	2000042c 	.word	0x2000042c

08001820 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001828:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800182c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001838:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800183c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001840:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001848:	e000      	b.n	800184c <ITM_SendChar+0x2c>
    {
      __NOP();
 800184a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800184c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f9      	beq.n	800184a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001856:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f001 fca8 	bl	80031c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f828 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f7ff fc38 	bl	80010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001880:	f7ff fc16 	bl	80010b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001884:	f7ff fcfa 	bl	800127c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001888:	f7ff fd26 	bl	80012d8 <MX_I2C3_Init>
  MX_SPI2_Init();
 800188c:	f000 ffa4 	bl	80027d8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001890:	f001 fb88 	bl	8002fa4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001894:	f7ff f862 	bl	800095c <MX_ADC1_Init>
  MX_TIM10_Init();
 8001898:	f001 fbd8 	bl	800304c <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800189c:	f000 f87e 	bl	800199c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2120      	movs	r1, #32
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <main+0x50>)
 80018a6:	f003 f881 	bl	80049ac <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <main+0x54>)
 80018ac:	f7ff fe28 	bl	8001500 <Radio_Init>
  Inputs_Init();
 80018b0:	f7ff f964 	bl	8000b7c <Inputs_Init>
  OLED_Init(&hi2c3);
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <main+0x58>)
 80018b6:	f001 f843 	bl	8002940 <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SimpleScheduler();
 80018ba:	f000 ff3f 	bl	800273c <SimpleScheduler>
 80018be:	e7fc      	b.n	80018ba <main+0x4a>
 80018c0:	40020400 	.word	0x40020400
 80018c4:	20000494 	.word	0x20000494
 80018c8:	200003d8 	.word	0x200003d8

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2230      	movs	r2, #48	; 0x30
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f005 fe66 	bl	80075ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <SystemClock_Config+0xc8>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	4a26      	ldr	r2, [pc, #152]	; (8001994 <SystemClock_Config+0xc8>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <SystemClock_Config+0xc8>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <SystemClock_Config+0xcc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <SystemClock_Config+0xcc>)
 8001916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <SystemClock_Config+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800192c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001932:	2302      	movs	r3, #2
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800193c:	2308      	movs	r3, #8
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001948:	2304      	movs	r3, #4
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fcb9 	bl	80052c8 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800195c:	f000 f856 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
 8001962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001964:	2302      	movs	r3, #2
 8001966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2103      	movs	r1, #3
 800197c:	4618      	mov	r0, r3
 800197e:	f003 ff1b 	bl	80057b8 <HAL_RCC_ClockConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001988:	f000 f840 	bl	8001a0c <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3750      	adds	r7, #80	; 0x50
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2028      	movs	r0, #40	; 0x28
 80019a6:	f002 fa9c 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019aa:	2028      	movs	r0, #40	; 0x28
 80019ac:	f002 fab5 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2024      	movs	r0, #36	; 0x24
 80019b6:	f002 fa94 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019ba:	2024      	movs	r0, #36	; 0x24
 80019bc:	f002 faad 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2012      	movs	r0, #18
 80019c6:	f002 fa8c 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019ca:	2012      	movs	r0, #18
 80019cc:	f002 faa5 	bl	8003f1a <HAL_NVIC_EnableIRQ>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff1e 	bl	8001820 <ITM_SendChar>

	return ch;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001a00:	f000 fd88 	bl	8002514 <nRF24_IRQ_Handler>
	}

}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>
	...

08001a18 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	//static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	//if(LastMenuPtr == MenuCurrentMember) return;  TODO: IS THIS NEEDED?

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001a22:	e00c      	b.n	8001a3e <Menu_RefreshScreen+0x26>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <Menu_RefreshScreen+0x14c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <Menu_RefreshScreen+0x150>)
 8001a2a:	5cd2      	ldrb	r2, [r2, r3]
 8001a2c:	3201      	adds	r2, #1
 8001a2e:	b2d1      	uxtb	r1, r2
 8001a30:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <Menu_RefreshScreen+0x150>)
 8001a32:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <Menu_RefreshScreen+0x154>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <Menu_RefreshScreen+0x154>)
 8001a3c:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <Menu_RefreshScreen+0x14c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <Menu_RefreshScreen+0x158>)
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <Menu_RefreshScreen+0x14c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <Menu_RefreshScreen+0x150>)
 8001a52:	5c5b      	ldrb	r3, [r3, r1]
 8001a54:	3305      	adds	r3, #5
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dce4      	bgt.n	8001a24 <Menu_RefreshScreen+0xc>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001a5a:	e00c      	b.n	8001a76 <Menu_RefreshScreen+0x5e>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <Menu_RefreshScreen+0x14c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4a41      	ldr	r2, [pc, #260]	; (8001b68 <Menu_RefreshScreen+0x150>)
 8001a62:	5cd2      	ldrb	r2, [r2, r3]
 8001a64:	3a01      	subs	r2, #1
 8001a66:	b2d1      	uxtb	r1, r2
 8001a68:	4a3f      	ldr	r2, [pc, #252]	; (8001b68 <Menu_RefreshScreen+0x150>)
 8001a6a:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <Menu_RefreshScreen+0x154>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4a3e      	ldr	r2, [pc, #248]	; (8001b6c <Menu_RefreshScreen+0x154>)
 8001a74:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <Menu_RefreshScreen+0x14c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <Menu_RefreshScreen+0x158>)
 8001a7e:	5c9a      	ldrb	r2, [r3, r2]
 8001a80:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <Menu_RefreshScreen+0x14c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <Menu_RefreshScreen+0x150>)
 8001a88:	5c5b      	ldrb	r3, [r3, r1]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3e6      	bcc.n	8001a5c <Menu_RefreshScreen+0x44>
	}

	OLED_ClearBuffer(BLACK);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f001 f860 	bl	8002b54 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8001a94:	2100      	movs	r1, #0
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 ffa2 	bl	80029e0 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4835      	ldr	r0, [pc, #212]	; (8001b74 <Menu_RefreshScreen+0x15c>)
 8001aa0:	f001 f922 	bl	8002ce8 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <Menu_RefreshScreen+0x154>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001aaa:	e04f      	b.n	8001b4c <Menu_RefreshScreen+0x134>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8001aac:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <Menu_RefreshScreen+0x160>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d126      	bne.n	8001b04 <Menu_RefreshScreen+0xec>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fb8c 	bl	80001d8 <strlen>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	78bb      	ldrb	r3, [r7, #2]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 ff7d 	bl	80029e0 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4824      	ldr	r0, [pc, #144]	; (8001b7c <Menu_RefreshScreen+0x164>)
 8001aea:	f001 f8fd 	bl	8002ce8 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 f8f7 	bl	8002ce8 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 8001afa:	2101      	movs	r1, #1
 8001afc:	4820      	ldr	r0, [pc, #128]	; (8001b80 <Menu_RefreshScreen+0x168>)
 8001afe:	f001 f8f3 	bl	8002ce8 <OLED_WriteString>
 8001b02:	e01d      	b.n	8001b40 <Menu_RefreshScreen+0x128>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fb65 	bl	80001d8 <strlen>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 ff56 	bl	80029e0 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 f8d4 	bl	8002ce8 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	3301      	adds	r3, #1
 8001b44:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d002      	beq.n	8001b58 <Menu_RefreshScreen+0x140>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1a9      	bne.n	8001aac <Menu_RefreshScreen+0x94>
	}
	OLED_SendBuffer();
 8001b58:	f000 ffd0 	bl	8002afc <OLED_SendBuffer>
	//LastMenuPtr = MenuCurrentMember;

}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000484 	.word	0x20000484
 8001b68:	20000480 	.word	0x20000480
 8001b6c:	200000f4 	.word	0x200000f4
 8001b70:	2000047c 	.word	0x2000047c
 8001b74:	08007c24 	.word	0x08007c24
 8001b78:	200000f0 	.word	0x200000f0
 8001b7c:	08007c3c 	.word	0x08007c3c
 8001b80:	08007c40 	.word	0x08007c40

08001b84 <Menu_Next>:

void Menu_Next(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <Menu_Next+0x54>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <Menu_Next+0x54>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <Menu_Next+0x54>)
 8001b9a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <Menu_Next+0x58>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <Menu_Next+0x5c>)
 8001ba2:	5cd2      	ldrb	r2, [r2, r3]
 8001ba4:	3201      	adds	r2, #1
 8001ba6:	b2d1      	uxtb	r1, r2
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <Menu_Next+0x5c>)
 8001baa:	54d1      	strb	r1, [r2, r3]
 8001bac:	e00f      	b.n	8001bce <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <Menu_Next+0x54>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <Menu_Next+0x54>)
 8001bb6:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <Menu_Next+0x54>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f5      	bne.n	8001bae <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <Menu_Next+0x58>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <Menu_Next+0x5c>)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8001bce:	f7ff ff23 	bl	8001a18 <Menu_RefreshScreen>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200000f0 	.word	0x200000f0
 8001bdc:	20000484 	.word	0x20000484
 8001be0:	2000047c 	.word	0x2000047c

08001be4 <Menu_Prev>:

void Menu_Prev(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <Menu_Prev+0x58>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01a      	beq.n	8001c28 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <Menu_Prev+0x58>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <Menu_Prev+0x58>)
 8001bfa:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <Menu_Prev+0x5c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <Menu_Prev+0x60>)
 8001c02:	5cd2      	ldrb	r2, [r2, r3]
 8001c04:	3a01      	subs	r2, #1
 8001c06:	b2d1      	uxtb	r1, r2
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <Menu_Prev+0x60>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
 8001c0c:	e011      	b.n	8001c32 <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <Menu_Prev+0x58>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <Menu_Prev+0x58>)
 8001c16:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <Menu_Prev+0x5c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <Menu_Prev+0x60>)
 8001c1e:	5cd2      	ldrb	r2, [r2, r3]
 8001c20:	3201      	adds	r2, #1
 8001c22:	b2d1      	uxtb	r1, r2
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <Menu_Prev+0x60>)
 8001c26:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <Menu_Prev+0x58>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ed      	bne.n	8001c0e <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 8001c32:	f7ff fef1 	bl	8001a18 <Menu_RefreshScreen>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200000f0 	.word	0x200000f0
 8001c40:	20000484 	.word	0x20000484
 8001c44:	2000047c 	.word	0x2000047c

08001c48 <Menu_Select>:



void Menu_Select(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <Menu_Select+0x48>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <Menu_Select+0x16>
	{
		MenuCurrentMember->FunctionPtr();
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <Menu_Select+0x48>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4798      	blx	r3
	}

	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <Menu_Select+0x48>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <Menu_Select+0x3e>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <Menu_Select+0x48>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <Menu_Select+0x48>)
 8001c70:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <Menu_Select+0x48>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <Menu_Select+0x4c>)
 8001c78:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <Menu_Select+0x50>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <Menu_Select+0x50>)
 8001c84:	701a      	strb	r2, [r3, #0]
	}

	Menu_RefreshScreen();
 8001c86:	f7ff fec7 	bl	8001a18 <Menu_RefreshScreen>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200000f0 	.word	0x200000f0
 8001c94:	200000f4 	.word	0x200000f4
 8001c98:	20000484 	.word	0x20000484

08001c9c <Menu_Back>:

void Menu_Back(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <Menu_Back+0x7c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02e      	beq.n	8001d0a <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <Menu_Back+0x80>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <Menu_Back+0x84>)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <Menu_Back+0x7c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <Menu_Back+0x7c>)
 8001cc0:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <Menu_Back+0x7c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <Menu_Back+0x88>)
 8001cc8:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <Menu_Back+0x80>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <Menu_Back+0x80>)
 8001cd4:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	71fb      	strb	r3, [r7, #7]
 8001cda:	e007      	b.n	8001cec <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <Menu_Back+0x88>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <Menu_Back+0x88>)
 8001ce4:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	79fa      	ldrb	r2, [r7, #7]
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <Menu_Back+0x80>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <Menu_Back+0x84>)
 8001cf6:	5c5b      	ldrb	r3, [r3, r1]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <Menu_Back+0x80>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <Menu_Back+0x8c>)
 8001d02:	5c1b      	ldrb	r3, [r3, r0]
 8001d04:	1acb      	subs	r3, r1, r3
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbe8      	blt.n	8001cdc <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 8001d0a:	f7ff fe85 	bl	8001a18 <Menu_RefreshScreen>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200000f0 	.word	0x200000f0
 8001d1c:	20000484 	.word	0x20000484
 8001d20:	2000047c 	.word	0x2000047c
 8001d24:	200000f4 	.word	0x200000f4
 8001d28:	20000480 	.word	0x20000480

08001d2c <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fab7 	bl	80032ac <HAL_Delay>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <nRF24_SendSpi+0x28>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	f003 ffbc 	bl	8005cde <HAL_SPI_Transmit>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000488 	.word	0x20000488

08001d74 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <nRF24_ReadSpi+0x28>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	f004 f8e2 	bl	8005f56 <HAL_SPI_Receive>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000488 	.word	0x20000488

08001da0 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dae:	2200      	movs	r2, #0
 8001db0:	2140      	movs	r1, #64	; 0x40
 8001db2:	480c      	ldr	r0, [pc, #48]	; (8001de4 <nRF24_ReadRegister+0x44>)
 8001db4:	f002 fdfa 	bl	80049ac <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ffc3 	bl	8001d48 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001dc2:	f107 030f 	add.w	r3, r7, #15
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffd3 	bl	8001d74 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2140      	movs	r1, #64	; 0x40
 8001dd2:	4804      	ldr	r0, [pc, #16]	; (8001de4 <nRF24_ReadRegister+0x44>)
 8001dd4:	f002 fdea 	bl	80049ac <HAL_GPIO_WritePin>

	return result;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40020800 	.word	0x40020800

08001de8 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2140      	movs	r1, #64	; 0x40
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <nRF24_ReadRegisters+0x44>)
 8001e02:	f002 fdd3 	bl	80049ac <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff9c 	bl	8001d48 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	4619      	mov	r1, r3
 8001e14:	6838      	ldr	r0, [r7, #0]
 8001e16:	f7ff ffad 	bl	8001d74 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2140      	movs	r1, #64	; 0x40
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <nRF24_ReadRegisters+0x44>)
 8001e20:	f002 fdc4 	bl	80049ac <HAL_GPIO_WritePin>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40020800 	.word	0x40020800

08001e30 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2140      	movs	r1, #64	; 0x40
 8001e52:	4809      	ldr	r0, [pc, #36]	; (8001e78 <nRF24_WriteRegister+0x48>)
 8001e54:	f002 fdaa 	bl	80049ac <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff72 	bl	8001d48 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e64:	2201      	movs	r2, #1
 8001e66:	2140      	movs	r1, #64	; 0x40
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <nRF24_WriteRegister+0x48>)
 8001e6a:	f002 fd9f 	bl	80049ac <HAL_GPIO_WritePin>
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020800 	.word	0x40020800

08001e7c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e96:	2200      	movs	r2, #0
 8001e98:	2140      	movs	r1, #64	; 0x40
 8001e9a:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <nRF24_WriteRegisters+0x4c>)
 8001e9c:	f002 fd86 	bl	80049ac <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff4f 	bl	8001d48 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6838      	ldr	r0, [r7, #0]
 8001eb0:	f7ff ff4a 	bl	8001d48 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <nRF24_WriteRegisters+0x4c>)
 8001eba:	f002 fd77 	bl	80049ac <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020800 	.word	0x40020800

08001ecc <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	4810      	ldr	r0, [pc, #64]	; (8001f18 <nRF24_TX_Mode+0x4c>)
 8001ed8:	f002 fd68 	bl	80049ac <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001edc:	f000 f81e 	bl	8001f1c <nRF24_ReadConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f818 	bl	8001f2c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001efc:	2070      	movs	r0, #112	; 0x70
 8001efe:	f000 f870 	bl	8001fe2 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f02:	f000 f87d 	bl	8002000 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f06:	f000 f895 	bl	8002034 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff ff0e 	bl	8001d2c <nRF24_Delay_ms>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40020800 	.word	0x40020800

08001f1c <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ff3d 	bl	8001da0 <nRF24_ReadRegister>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff ff78 	bl	8001e30 <nRF24_WriteRegister>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001f52:	2006      	movs	r0, #6
 8001f54:	f7ff ff24 	bl	8001da0 <nRF24_ReadRegister>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	f023 0307 	bic.w	r3, r3, #7
 8001f62:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b25a      	sxtb	r2, r3
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b25b      	sxtb	r3, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	4619      	mov	r1, r3
 8001f78:	2006      	movs	r0, #6
 8001f7a:	f7ff ff59 	bl	8001e30 <nRF24_WriteRegister>
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001f90:	2006      	movs	r0, #6
 8001f92:	f7ff ff05 	bl	8001da0 <nRF24_ReadRegister>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001fa0:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d104      	bne.n	8001fb2 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e006      	b.n	8001fc0 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d103      	bne.n	8001fc0 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2006      	movs	r0, #6
 8001fc6:	f7ff ff33 	bl	8001e30 <nRF24_WriteRegister>
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001fd6:	2007      	movs	r0, #7
 8001fd8:	f7ff fee2 	bl	8001da0 <nRF24_ReadRegister>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	2007      	movs	r0, #7
 8001ff2:	f7ff ff1d 	bl	8001e30 <nRF24_WriteRegister>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002006:	23e2      	movs	r3, #226	; 0xe2
 8002008:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800200a:	2200      	movs	r2, #0
 800200c:	2140      	movs	r1, #64	; 0x40
 800200e:	4808      	ldr	r0, [pc, #32]	; (8002030 <nRF24_FlushRX+0x30>)
 8002010:	f002 fccc 	bl	80049ac <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe95 	bl	8001d48 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800201e:	2201      	movs	r2, #1
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	4803      	ldr	r0, [pc, #12]	; (8002030 <nRF24_FlushRX+0x30>)
 8002024:	f002 fcc2 	bl	80049ac <HAL_GPIO_WritePin>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40020800 	.word	0x40020800

08002034 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800203a:	23e1      	movs	r3, #225	; 0xe1
 800203c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800203e:	2200      	movs	r2, #0
 8002040:	2140      	movs	r1, #64	; 0x40
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <nRF24_FlushTX+0x30>)
 8002044:	f002 fcb2 	bl	80049ac <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	2101      	movs	r1, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe7b 	bl	8001d48 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002052:	2201      	movs	r2, #1
 8002054:	2140      	movs	r1, #64	; 0x40
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <nRF24_FlushTX+0x30>)
 8002058:	f002 fca8 	bl	80049ac <HAL_GPIO_WritePin>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020800 	.word	0x40020800

08002068 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002072:	f7ff ff53 	bl	8001f1c <nRF24_ReadConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e003      	b.n	8002092 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	f023 0308 	bic.w	r3, r3, #8
 8002090:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff49 	bl	8001f2c <nRF24_WriteConfig>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020ac:	f7ff ff36 	bl	8001f1c <nRF24_ReadConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d104      	bne.n	80020c4 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e003      	b.n	80020cc <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff2c 	bl	8001f2c <nRF24_WriteConfig>
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	460a      	mov	r2, r1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	b25a      	sxtb	r2, r3
 80020f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	2004      	movs	r0, #4
 8002106:	f7ff fe93 	bl	8001e30 <nRF24_WriteRegister>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	2005      	movs	r0, #5
 8002128:	f7ff fe82 	bl	8001e30 <nRF24_WriteRegister>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	460a      	mov	r2, r1
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	4613      	mov	r3, r2
 8002142:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d901      	bls.n	800214e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800214a:	2305      	movs	r3, #5
 800214c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff fe26 	bl	8001da0 <nRF24_ReadRegister>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10a      	bne.n	8002174 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2201      	movs	r2, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	b25a      	sxtb	r2, r3
 8002168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216c:	4313      	orrs	r3, r2
 800216e:	b25b      	sxtb	r3, r3
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e00b      	b.n	800218c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2201      	movs	r2, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	b25b      	sxtb	r3, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	b25a      	sxtb	r2, r3
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4013      	ands	r3, r2
 8002188:	b25b      	sxtb	r3, r3
 800218a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	4619      	mov	r1, r3
 8002190:	2002      	movs	r0, #2
 8002192:	f7ff fe4d 	bl	8001e30 <nRF24_WriteRegister>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	460a      	mov	r2, r1
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d901      	bls.n	80021b8 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80021b4:	2305      	movs	r3, #5
 80021b6:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7ff fdf1 	bl	8001da0 <nRF24_ReadRegister>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10a      	bne.n	80021de <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2201      	movs	r2, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	b25a      	sxtb	r2, r3
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e00b      	b.n	80021f6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2201      	movs	r2, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f0:	4013      	ands	r3, r2
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4619      	mov	r1, r3
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff fe18 	bl	8001e30 <nRF24_WriteRegister>
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d901      	bls.n	800221c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002218:	2305      	movs	r3, #5
 800221a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d801      	bhi.n	8002226 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002222:	2303      	movs	r3, #3
 8002224:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	3b02      	subs	r3, #2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
 8002234:	2003      	movs	r0, #3
 8002236:	f7ff fdfb 	bl	8001e30 <nRF24_WriteRegister>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	6039      	str	r1, [r7, #0]
 800224c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <nRF24_SetRXAddress+0x18>
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d11d      	bne.n	8002296 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e00d      	b.n	800227c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	441a      	add	r2, r3
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	f1c3 0302 	rsb	r3, r3, #2
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	3310      	adds	r3, #16
 8002270:	443b      	add	r3, r7
 8002272:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	3301      	adds	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d9ee      	bls.n	8002260 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	330a      	adds	r3, #10
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f107 010c 	add.w	r1, r7, #12
 800228c:	2203      	movs	r2, #3
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fdf4 	bl	8001e7c <nRF24_WriteRegisters>
	{
 8002294:	e00a      	b.n	80022ac <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	330a      	adds	r3, #10
 800229a:	b2da      	uxtb	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	3302      	adds	r3, #2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7ff fdc3 	bl	8001e30 <nRF24_WriteRegister>
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2203      	movs	r2, #3
 80022c2:	4619      	mov	r1, r3
 80022c4:	200a      	movs	r0, #10
 80022c6:	f7ff fd8f 	bl	8001de8 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e00c      	b.n	80022ea <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	f1c3 0302 	rsb	r3, r3, #2
 80022d8:	3210      	adds	r2, #16
 80022da:	443a      	add	r2, r7
 80022dc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80022e0:	4a16      	ldr	r2, [pc, #88]	; (800233c <nRF24_SetTXAddress+0x88>)
 80022e2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d9ef      	bls.n	80022d0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e00d      	b.n	8002312 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	441a      	add	r2, r3
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	f1c3 0302 	rsb	r3, r3, #2
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	3310      	adds	r3, #16
 8002306:	443b      	add	r3, r7
 8002308:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d9ee      	bls.n	80022f6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2203      	movs	r2, #3
 800231e:	4619      	mov	r1, r3
 8002320:	200a      	movs	r0, #10
 8002322:	f7ff fdab 	bl	8001e7c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2203      	movs	r2, #3
 800232c:	4619      	mov	r1, r3
 800232e:	2010      	movs	r0, #16
 8002330:	f7ff fda4 	bl	8001e7c <nRF24_WriteRegisters>

}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	2000048c 	.word	0x2000048c

08002340 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002346:	f7ff fe44 	bl	8001fd2 <nRF24_ReadStatus>
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002354:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe42 	bl	8001fe2 <nRF24_WriteStatus>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002370:	2060      	movs	r0, #96	; 0x60
 8002372:	f7ff fd15 	bl	8001da0 <nRF24_ReadRegister>
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b20      	cmp	r3, #32
 800237e:	d906      	bls.n	800238e <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8002380:	f7ff fe3e 	bl	8002000 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8002384:	2002      	movs	r0, #2
 8002386:	f7ff fcd1 	bl	8001d2c <nRF24_Delay_ms>
        return 0;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 800238e:	79fb      	ldrb	r3, [r7, #7]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80023a2:	f7ff fdbb 	bl	8001f1c <nRF24_ReadConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e003      	b.n	80023c2 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fdb1 	bl	8001f2c <nRF24_WriteConfig>
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80023dc:	f7ff fd9e 	bl	8001f1c <nRF24_ReadConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	f043 0320 	orr.w	r3, r3, #32
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e003      	b.n	80023fc <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	f023 0320 	bic.w	r3, r3, #32
 80023fa:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fd94 	bl	8001f2c <nRF24_WriteConfig>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002416:	f7ff fd81 	bl	8001f1c <nRF24_ReadConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e003      	b.n	8002436 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	f023 0310 	bic.w	r3, r3, #16
 8002434:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fd77 	bl	8001f2c <nRF24_WriteConfig>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	461a      	mov	r2, r3
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	20a0      	movs	r0, #160	; 0xa0
 800245a:	f7ff fd0f 	bl	8001e7c <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800246e:	2201      	movs	r2, #1
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	4810      	ldr	r0, [pc, #64]	; (80024b4 <nRF24_WaitTX+0x4c>)
 8002474:	f002 fa9a 	bl	80049ac <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8002478:	2001      	movs	r0, #1
 800247a:	f7ff fc57 	bl	8001d2c <nRF24_Delay_ms>
	NRF24_CE_LOW;
 800247e:	2200      	movs	r2, #0
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <nRF24_WaitTX+0x4c>)
 8002484:	f002 fa92 	bl	80049ac <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff fc4f 	bl	8001d2c <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 800248e:	f7ff fda0 	bl	8001fd2 <nRF24_ReadStatus>
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d104      	bne.n	80024aa <nRF24_WaitTX+0x42>
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ee      	beq.n	8002488 <nRF24_WaitTX+0x20>

}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40020800 	.word	0x40020800

080024b8 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 80024c2:	f7ff ff50 	bl	8002366 <nRF24_GetDynamicPayloadSize>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	2061      	movs	r0, #97	; 0x61
 80024d8:	f7ff fc86 	bl	8001de8 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d901      	bls.n	80024fa <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e007      	b.n	800250a <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa1 	bl	8002446 <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 8002504:	f7ff ffb0 	bl	8002468 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <nRF24_IRQ_Handler+0x14>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	20000492 	.word	0x20000492

0800252c <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <nRF24_IRQ_Read+0x7c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d130      	bne.n	800259e <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <nRF24_IRQ_Read+0x7c>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8002542:	f7ff fd46 	bl	8001fd2 <nRF24_ReadStatus>
 8002546:	4603      	mov	r3, r0
 8002548:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 800254e:	79bb      	ldrb	r3, [r7, #6]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <nRF24_IRQ_Read+0x80>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002564:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <nRF24_IRQ_Read+0x84>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f043 0320 	orr.w	r3, r3, #32
 800257c:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <nRF24_IRQ_Read+0x88>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fd22 	bl	8001fe2 <nRF24_WriteStatus>
	}
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000492 	.word	0x20000492
 80025ac:	2000048f 	.word	0x2000048f
 80025b0:	20000490 	.word	0x20000490
 80025b4:	20000491 	.word	0x20000491

080025b8 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 80025bc:	f7ff ffb6 	bl	800252c <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <nRF24_Event+0x44>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 80025c8:	f7ff f904 	bl	80017d4 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <nRF24_Event+0x44>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <nRF24_Event+0x48>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 80025da:	f7ff f8e9 	bl	80017b0 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <nRF24_Event+0x48>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <nRF24_Event+0x4c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 80025ec:	f7ff f90c 	bl	8001808 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <nRF24_Event+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
	}
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000048f 	.word	0x2000048f
 8002600:	20000490 	.word	0x20000490
 8002604:	20000491 	.word	0x20000491

08002608 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002610:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <nRF24_Init+0xc4>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	482d      	ldr	r0, [pc, #180]	; (80026d0 <nRF24_Init+0xc8>)
 800261c:	f002 f9c6 	bl	80049ac <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002620:	2201      	movs	r2, #1
 8002622:	2140      	movs	r1, #64	; 0x40
 8002624:	482a      	ldr	r0, [pc, #168]	; (80026d0 <nRF24_Init+0xc8>)
 8002626:	f002 f9c1 	bl	80049ac <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 800262a:	2005      	movs	r0, #5
 800262c:	f7ff fb7e 	bl	8001d2c <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002630:	2003      	movs	r0, #3
 8002632:	f7ff fc89 	bl	8001f48 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002636:	2002      	movs	r0, #2
 8002638:	f7ff fca5 	bl	8001f86 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800263c:	2001      	movs	r0, #1
 800263e:	f7ff fd13 	bl	8002068 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002642:	2000      	movs	r0, #0
 8002644:	f7ff fd2d 	bl	80020a2 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002648:	2107      	movs	r1, #7
 800264a:	2004      	movs	r0, #4
 800264c:	f7ff fd46 	bl	80020dc <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002650:	201d      	movs	r0, #29
 8002652:	f7ff fba5 	bl	8001da0 <nRF24_ReadRegister>
 8002656:	4603      	mov	r3, r0
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4619      	mov	r1, r3
 8002660:	201d      	movs	r0, #29
 8002662:	f7ff fbe5 	bl	8001e30 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002666:	213f      	movs	r1, #63	; 0x3f
 8002668:	201c      	movs	r0, #28
 800266a:	f7ff fbe1 	bl	8001e30 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800266e:	200a      	movs	r0, #10
 8002670:	f7ff fd4f 	bl	8002112 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002674:	2101      	movs	r1, #1
 8002676:	2000      	movs	r0, #0
 8002678:	f7ff fd5c 	bl	8002134 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800267c:	2101      	movs	r1, #1
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fd8d 	bl	800219e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002684:	2003      	movs	r0, #3
 8002686:	f7ff fdbf 	bl	8002208 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff fb4e 	bl	8001d2c <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f7ff fe81 	bl	8002398 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002696:	2001      	movs	r0, #1
 8002698:	f7ff fe9b 	bl	80023d2 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff feb5 	bl	800240c <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7ff fb42 	bl	8001d2c <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80026a8:	f7ff fe4a 	bl	8002340 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 80026ac:	201d      	movs	r0, #29
 80026ae:	f7ff fb77 	bl	8001da0 <nRF24_ReadRegister>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	201d      	movs	r0, #29
 80026be:	f7ff fbb7 	bl	8001e30 <nRF24_WriteRegister>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000488 	.word	0x20000488
 80026d0:	40020800 	.word	0x40020800

080026d4 <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <MenuTaskInit+0x2c>)
 80026da:	490a      	ldr	r1, [pc, #40]	; (8002704 <MenuTaskInit+0x30>)
 80026dc:	2004      	movs	r0, #4
 80026de:	f7fe fb6b 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 80026e2:	2200      	movs	r2, #0
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <MenuTaskInit+0x30>)
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fb66 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, Menu_Back, NULL);
 80026ec:	2200      	movs	r2, #0
 80026ee:	4904      	ldr	r1, [pc, #16]	; (8002700 <MenuTaskInit+0x2c>)
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7fe fb61 	bl	8000db8 <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 80026f6:	f7ff f98f 	bl	8001a18 <Menu_RefreshScreen>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	08001c9d 	.word	0x08001c9d
 8002704:	08001c49 	.word	0x08001c49

08002708 <MenuTask>:

static void MenuTask(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 8002712:	f7fe fb09 	bl	8000d28 <Inputs_GetEncoderCount>
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	dd02      	ble.n	8002728 <MenuTask+0x20>
	{
		Menu_Next();
 8002722:	f7ff fa2f 	bl	8001b84 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 8002726:	e005      	b.n	8002734 <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	da01      	bge.n	8002734 <MenuTask+0x2c>
		Menu_Prev();
 8002730:	f7ff fa58 	bl	8001be4 <Menu_Prev>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <SimpleScheduler>:

void SimpleScheduler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 8002742:	f7fe ffe1 	bl	8001708 <Radio_Process>

	if(0 == StartupInitFlag)
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <SimpleScheduler+0x78>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <SimpleScheduler+0x1c>
	{
		MenuTaskInit();								//Init for menu
 800274e:	f7ff ffc1 	bl	80026d4 <MenuTaskInit>
		StartupInitFlag = 1;
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <SimpleScheduler+0x78>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
	}

	Inputs_ButtonsRoutine();
 8002758:	f7fe fb10 	bl	8000d7c <Inputs_ButtonsRoutine>
	SubProgramStatus = Programs_PerformProgram();
 800275c:	f7fe f83e 	bl	80007dc <Programs_PerformProgram>
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d106      	bne.n	8002778 <SimpleScheduler+0x3c>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 800276a:	f7fe f82b 	bl	80007c4 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 800276e:	f7fe fb69 	bl	8000e44 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002772:	f7ff ffaf 	bl	80026d4 <MenuTaskInit>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
		MenuTaskInit(); 							//Init for menu again
	}
}
 8002776:	e018      	b.n	80027aa <SimpleScheduler+0x6e>
	else if(SubProgramStatus == NO_PROGRAM_SET)		//if there is no pointer to program, perform menu task
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <SimpleScheduler+0x48>
		MenuTask();
 800277e:	f7ff ffc3 	bl	8002708 <MenuTask>
}
 8002782:	e012      	b.n	80027aa <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_LAUNCH_ERROR)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d106      	bne.n	8002798 <SimpleScheduler+0x5c>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 800278a:	f7fe f81b 	bl	80007c4 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 800278e:	f7fe fb59 	bl	8000e44 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002792:	f7ff ff9f 	bl	80026d4 <MenuTaskInit>
}
 8002796:	e008      	b.n	80027aa <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_EXIT_ERROR)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d105      	bne.n	80027aa <SimpleScheduler+0x6e>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 800279e:	f7fe f811 	bl	80007c4 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 80027a2:	f7fe fb4f 	bl	8000e44 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 80027a6:	f7ff ff95 	bl	80026d4 <MenuTaskInit>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000493 	.word	0x20000493

080027b8 <Radio_NewCommandReceivedCallback>:
//
//
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
	Parser_Controller(command, length);
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fe fb63 	bl	8000e94 <Parser_Controller>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_SPI2_Init+0x64>)
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <MX_SPI2_Init+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_SPI2_Init+0x64>)
 80027e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_SPI2_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_SPI2_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_SPI2_Init+0x64>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_SPI2_Init+0x64>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_SPI2_Init+0x64>)
 8002804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002808:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_SPI2_Init+0x64>)
 800280c:	2218      	movs	r2, #24
 800280e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_SPI2_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_SPI2_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <MX_SPI2_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_SPI2_Init+0x64>)
 8002824:	220a      	movs	r2, #10
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <MX_SPI2_Init+0x64>)
 800282a:	f003 f9cf 	bl	8005bcc <HAL_SPI_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002834:	f7ff f8ea 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000494 	.word	0x20000494
 8002840:	40003800 	.word	0x40003800

08002844 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_SPI_MspInit+0x84>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d12c      	bne.n	80028c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_SPI_MspInit+0x88>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_SPI_MspInit+0x88>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_SPI_MspInit+0x88>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_SPI_MspInit+0x88>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_SPI_MspInit+0x88>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_SPI_MspInit+0x88>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800289e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028b0:	2305      	movs	r3, #5
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 80028bc:	f001 feda 	bl	8004674 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028c0:	bf00      	nop
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40003800 	.word	0x40003800
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020400 	.word	0x40020400

080028d4 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af04      	add	r7, sp, #16
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <OLED_SendCmdSequence+0x34>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2264      	movs	r2, #100	; 0x64
 80028ea:	9202      	str	r2, [sp, #8]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2301      	movs	r3, #1
 80028f4:	2200      	movs	r2, #0
 80028f6:	2178      	movs	r1, #120	; 0x78
 80028f8:	f002 f9ce 	bl	8004c98 <HAL_I2C_Mem_Write>
 80028fc:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200004ec 	.word	0x200004ec

0800290c <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af04      	add	r7, sp, #16
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <OLED_SendData+0x30>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	2364      	movs	r3, #100	; 0x64
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	2178      	movs	r1, #120	; 0x78
 800292e:	f002 f9b3 	bl	8004c98 <HAL_I2C_Mem_Write>
 8002932:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200004ec 	.word	0x200004ec

08002940 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <OLED_Init+0x28>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 800294e:	4807      	ldr	r0, [pc, #28]	; (800296c <OLED_Init+0x2c>)
 8002950:	f000 f916 	bl	8002b80 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002954:	2110      	movs	r1, #16
 8002956:	4806      	ldr	r0, [pc, #24]	; (8002970 <OLED_Init+0x30>)
 8002958:	f7ff ffbc 	bl	80028d4 <OLED_SendCmdSequence>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200004ec 	.word	0x200004ec
 800296c:	08007c44 	.word	0x08007c44
 8002970:	200000f8 	.word	0x200000f8

08002974 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	460a      	mov	r2, r1
 800297e:	71fb      	strb	r3, [r7, #7]
 8002980:	4613      	mov	r3, r2
 8002982:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d802      	bhi.n	8002994 <OLED_SetDeviceCursor+0x20>
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d901      	bls.n	8002998 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e01f      	b.n	80029d8 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	3302      	adds	r3, #2
 800299c:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 80029b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	2103      	movs	r1, #3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff7f 	bl	80028d4 <OLED_SendCmdSequence>

	return Status;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	460a      	mov	r2, r1
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db02      	blt.n	80029fe <OLED_MoveCursor+0x1e>
 80029f8:	79bb      	ldrb	r3, [r7, #6]
 80029fa:	2b3f      	cmp	r3, #63	; 0x3f
 80029fc:	d901      	bls.n	8002a02 <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00b      	b.n	8002a1a <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <OLED_MoveCursor+0x48>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002a08:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <OLED_MoveCursor+0x48>)
 8002a0a:	79bb      	ldrb	r3, [r7, #6]
 8002a0c:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <OLED_MoveCursor+0x48>)
 8002a16:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200004f0 	.word	0x200004f0

08002a2c <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e04f      	b.n	8002ae2 <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002a42:	78bb      	ldrb	r3, [r7, #2]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d116      	bne.n	8002a76 <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002a50:	789b      	ldrb	r3, [r3, #2]
 8002a52:	01db      	lsls	r3, r3, #7
 8002a54:	4413      	add	r3, r2
 8002a56:	4a28      	ldr	r2, [pc, #160]	; (8002af8 <OLED_WriteToBuffer+0xcc>)
 8002a58:	5cd1      	ldrb	r1, [r2, r3]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002a66:	789b      	ldrb	r3, [r3, #2]
 8002a68:	01db      	lsls	r3, r3, #7
 8002a6a:	4403      	add	r3, r0
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	b2d1      	uxtb	r1, r2
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <OLED_WriteToBuffer+0xcc>)
 8002a72:	54d1      	strb	r1, [r2, r3]
 8002a74:	e020      	b.n	8002ab8 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002a76:	78bb      	ldrb	r3, [r7, #2]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11b      	bne.n	8002ab4 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002a84:	789b      	ldrb	r3, [r3, #2]
 8002a86:	01db      	lsls	r3, r3, #7
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <OLED_WriteToBuffer+0xcc>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	b25a      	sxtb	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b25a      	sxtb	r2, r3
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	01db      	lsls	r3, r3, #7
 8002aaa:	440b      	add	r3, r1
 8002aac:	b2d1      	uxtb	r1, r2
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <OLED_WriteToBuffer+0xcc>)
 8002ab0:	54d1      	strb	r1, [r2, r3]
 8002ab2:	e001      	b.n	8002ab8 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e019      	b.n	8002aec <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <OLED_WriteToBuffer+0xc8>)
 8002ac2:	7852      	ldrb	r2, [r2, #1]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff8a 	bl	80029e0 <OLED_MoveCursor>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00a      	b.n	8002aec <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3ab      	bcc.n	8002a42 <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200004f0 	.word	0x200004f0
 8002af8:	200004fc 	.word	0x200004fc

08002afc <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	71bb      	strb	r3, [r7, #6]
 8002b0a:	e019      	b.n	8002b40 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002b0c:	79bb      	ldrb	r3, [r7, #6]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff ff2f 	bl	8002974 <OLED_SetDeviceCursor>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	01db      	lsls	r3, r3, #7
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <OLED_SendBuffer+0x54>)
 8002b26:	4413      	add	r3, r2
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff feee 	bl	800290c <OLED_SendData>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8002b3a:	79bb      	ldrb	r3, [r7, #6]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	71bb      	strb	r3, [r7, #6]
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d9e2      	bls.n	8002b0c <OLED_SendBuffer+0x10>
	}
	return Status;
 8002b46:	79fb      	ldrb	r3, [r7, #7]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200004fc 	.word	0x200004fc

08002b54 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	4613      	mov	r3, r2
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4803      	ldr	r0, [pc, #12]	; (8002b7c <OLED_ClearBuffer+0x28>)
 8002b6e:	f004 fd1d 	bl	80075ac <memset>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200004fc 	.word	0x200004fc

08002b80 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3302      	adds	r3, #2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002b98:	7bbb      	ldrb	r3, [r7, #14]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d802      	bhi.n	8002ba4 <OLED_ChangeFont+0x24>
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d901      	bls.n	8002ba8 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e00e      	b.n	8002bc6 <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <OLED_ChangeFont+0x54>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <OLED_ChangeFont+0x54>)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002bb4:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <OLED_ChangeFont+0x54>)
 8002bb6:	7bbb      	ldrb	r3, [r7, #14]
 8002bb8:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3303      	adds	r3, #3
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <OLED_ChangeFont+0x54>)
 8002bc2:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	200004f4 	.word	0x200004f4

08002bd8 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	460a      	mov	r2, r1
 8002be2:	71fb      	strb	r3, [r7, #7]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002bec:	79bb      	ldrb	r3, [r7, #6]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d901      	bls.n	8002bf6 <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e06f      	b.n	8002cd6 <OLED_WriteChar+0xfe>
	}
	switch(character)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b0a      	cmp	r3, #10
 8002bfa:	d009      	beq.n	8002c10 <OLED_WriteChar+0x38>
 8002bfc:	2b0d      	cmp	r3, #13
 8002bfe:	d113      	bne.n	8002c28 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <OLED_WriteChar+0x108>)
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	4619      	mov	r1, r3
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7ff feea 	bl	80029e0 <OLED_MoveCursor>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	e062      	b.n	8002cd6 <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <OLED_WriteChar+0x108>)
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <OLED_WriteChar+0x108>)
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7ff fede 	bl	80029e0 <OLED_MoveCursor>
 8002c24:	4603      	mov	r3, r0
 8002c26:	e056      	b.n	8002cd6 <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	4a2e      	ldr	r2, [pc, #184]	; (8002ce4 <OLED_WriteChar+0x10c>)
 8002c2c:	7912      	ldrb	r2, [r2, #4]
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <OLED_WriteChar+0x10c>)
 8002c34:	795b      	ldrb	r3, [r3, #5]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	fb12 f303 	smulbb	r3, r2, r3
 8002c3c:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 8002c3e:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <OLED_WriteChar+0x10c>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4413      	add	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75bb      	strb	r3, [r7, #22]
 8002c4e:	e00c      	b.n	8002c6a <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8002c50:	7dbb      	ldrb	r3, [r7, #22]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	3318      	adds	r3, #24
 8002c58:	443b      	add	r3, r7
 8002c5a:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3301      	adds	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002c64:	7dbb      	ldrb	r3, [r7, #22]
 8002c66:	3301      	adds	r3, #1
 8002c68:	75bb      	strb	r3, [r7, #22]
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <OLED_WriteChar+0x10c>)
 8002c6c:	795b      	ldrb	r3, [r3, #5]
 8002c6e:	7dba      	ldrb	r2, [r7, #22]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d3ed      	bcc.n	8002c50 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <OLED_WriteChar+0x10c>)
 8002c76:	7959      	ldrb	r1, [r3, #5]
 8002c78:	79ba      	ldrb	r2, [r7, #6]
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fed4 	bl	8002a2c <OLED_WriteToBuffer>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <OLED_WriteChar+0x108>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <OLED_WriteChar+0x10c>)
 8002c96:	795b      	ldrb	r3, [r3, #5]
 8002c98:	4413      	add	r3, r2
 8002c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c9c:	dd1a      	ble.n	8002cd4 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <OLED_WriteChar+0x108>)
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff fe99 	bl	80029e0 <OLED_MoveCursor>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	75fb      	strb	r3, [r7, #23]
 8002cb8:	e00c      	b.n	8002cd4 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <OLED_WriteChar+0x108>)
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff fe8b 	bl	80029e0 <OLED_MoveCursor>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200004f0 	.word	0x200004f0
 8002ce4:	200004f4 	.word	0x200004f4

08002ce8 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d910      	bls.n	8002d20 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e013      	b.n	8002d2a <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff64 	bl	8002bd8 <OLED_WriteChar>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	73fb      	strb	r3, [r7, #15]
		String++;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
	while(*String)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ec      	bne.n	8002d02 <OLED_WriteString+0x1a>
	}
	return Status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_MspInit+0x4c>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_MspInit+0x4c>)
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d48:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_MspInit+0x4c>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_MspInit+0x4c>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <HAL_MspInit+0x4c>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_MspInit+0x4c>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <NMI_Handler+0x4>

08002d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d8e:	e7fe      	b.n	8002d8e <HardFault_Handler+0x4>

08002d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <MemManage_Handler+0x4>

08002d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <BusFault_Handler+0x4>

08002d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <UsageFault_Handler+0x4>

08002da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd0:	f000 fa4c 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <ADC_IRQHandler+0x10>)
 8002dde:	f000 facc 	bl	800337a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200001b0 	.word	0x200001b0

08002dec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002df2:	f003 ff83 	bl	8006cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000948 	.word	0x20000948

08002e00 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <SPI2_IRQHandler+0x10>)
 8002e06:	f003 fb59 	bl	80064bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000494 	.word	0x20000494

08002e14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002e18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e1c:	f001 fde0 	bl	80049e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <DMA2_Stream0_IRQHandler+0x10>)
 8002e2a:	f001 f9b9 	bl	80041a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200001f8 	.word	0x200001f8

08002e38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e00a      	b.n	8002e60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e4a:	f3af 8000 	nop.w
 8002e4e:	4601      	mov	r1, r0
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	60ba      	str	r2, [r7, #8]
 8002e56:	b2ca      	uxtb	r2, r1
 8002e58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	dbf0      	blt.n	8002e4a <_read+0x12>
  }

  return len;
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e009      	b.n	8002e98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	60ba      	str	r2, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fda1 	bl	80019d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	dbf1      	blt.n	8002e84 <_write+0x12>
  }
  return len;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_close>:

int _close(int file)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <_isatty>:

int _isatty(int file)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eea:	2301      	movs	r3, #1
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <_sbrk+0x5c>)
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <_sbrk+0x60>)
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <_sbrk+0x64>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <_sbrk+0x64>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <_sbrk+0x68>)
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <_sbrk+0x64>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d207      	bcs.n	8002f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f44:	f004 fb80 	bl	8007648 <__errno>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	e009      	b.n	8002f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <_sbrk+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <_sbrk+0x64>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <_sbrk+0x64>)
 8002f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f66:	68fb      	ldr	r3, [r7, #12]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20020000 	.word	0x20020000
 8002f74:	00000400 	.word	0x00000400
 8002f78:	200008fc 	.word	0x200008fc
 8002f7c:	20000ae0 	.word	0x20000ae0

08002f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <SystemInit+0x20>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <SystemInit+0x20>)
 8002f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fafa 	bl	80075ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <MX_TIM3_Init+0xa0>)
 8002fc2:	4a21      	ldr	r2, [pc, #132]	; (8003048 <MX_TIM3_Init+0xa4>)
 8002fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <MX_TIM3_Init+0xa0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <MX_TIM3_Init+0xa0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <MX_TIM3_Init+0xa0>)
 8002fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <MX_TIM3_Init+0xa0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <MX_TIM3_Init+0xa0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003002:	2300      	movs	r3, #0
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	4619      	mov	r1, r3
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <MX_TIM3_Init+0xa0>)
 8003012:	f003 fd3f 	bl	8006a94 <HAL_TIM_Encoder_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800301c:	f7fe fcf6 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_TIM3_Init+0xa0>)
 800302e:	f004 f845 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003038:	f7fe fce8 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	3730      	adds	r7, #48	; 0x30
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000900 	.word	0x20000900
 8003048:	40000400 	.word	0x40000400

0800304c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_TIM10_Init+0x40>)
 8003052:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <MX_TIM10_Init+0x44>)
 8003054:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <MX_TIM10_Init+0x40>)
 8003058:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800305c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <MX_TIM10_Init+0x40>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_TIM10_Init+0x40>)
 8003066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800306a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <MX_TIM10_Init+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_TIM10_Init+0x40>)
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <MX_TIM10_Init+0x40>)
 800307a:	f003 fc61 	bl	8006940 <HAL_TIM_Base_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003084:	f7fe fcc2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000948 	.word	0x20000948
 8003090:	40014400 	.word	0x40014400

08003094 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_TIM_Encoder_MspInit+0x84>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d12b      	bne.n	800310e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_TIM_Encoder_MspInit+0x88>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_TIM_Encoder_MspInit+0x88>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_TIM_Encoder_MspInit+0x88>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_TIM_Encoder_MspInit+0x88>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a10      	ldr	r2, [pc, #64]	; (800311c <HAL_TIM_Encoder_MspInit+0x88>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_TIM_Encoder_MspInit+0x88>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80030ee:	23c0      	movs	r3, #192	; 0xc0
 80030f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030fe:	2302      	movs	r3, #2
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	4805      	ldr	r0, [pc, #20]	; (8003120 <HAL_TIM_Encoder_MspInit+0x8c>)
 800310a:	f001 fab3 	bl	8004674 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800310e:	bf00      	nop
 8003110:	3728      	adds	r7, #40	; 0x28
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40000400 	.word	0x40000400
 800311c:	40023800 	.word	0x40023800
 8003120:	40020000 	.word	0x40020000

08003124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0e      	ldr	r2, [pc, #56]	; (800316c <HAL_TIM_Base_MspInit+0x48>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d115      	bne.n	8003162 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_TIM_Base_MspInit+0x4c>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_TIM_Base_MspInit+0x4c>)
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_TIM_Base_MspInit+0x4c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	2019      	movs	r0, #25
 8003158:	f000 fec3 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800315c:	2019      	movs	r0, #25
 800315e:	f000 fedc 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40014400 	.word	0x40014400
 8003170:	40023800 	.word	0x40023800

08003174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003178:	480d      	ldr	r0, [pc, #52]	; (80031b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800317a:	490e      	ldr	r1, [pc, #56]	; (80031b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003190:	4c0b      	ldr	r4, [pc, #44]	; (80031c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800319e:	f7ff feef 	bl	8002f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a2:	f004 fa57 	bl	8007654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a6:	f7fe fb63 	bl	8001870 <main>
  bx  lr    
 80031aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b4:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80031b8:	08007eb8 	.word	0x08007eb8
  ldr r2, =_sbss
 80031bc:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80031c0:	20000ae0 	.word	0x20000ae0

080031c4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c4:	e7fe      	b.n	80031c4 <DMA1_Stream0_IRQHandler>
	...

080031c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_Init+0x40>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_Init+0x40>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_Init+0x40>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 fe6b 	bl	8003ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	200f      	movs	r0, #15
 80031f8:	f000 f808 	bl	800320c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7ff fd9a 	bl	8002d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_InitTick+0x54>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_InitTick+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fe83 	bl	8003f36 <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 fe4b 	bl	8003ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	; (8003268 <HAL_InitTick+0x5c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000108 	.word	0x20000108
 8003264:	20000110 	.word	0x20000110
 8003268:	2000010c 	.word	0x2000010c

0800326c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_IncTick+0x20>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x24>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_IncTick+0x24>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000110 	.word	0x20000110
 8003290:	20000990 	.word	0x20000990

08003294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return uwTick;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_GetTick+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000990 	.word	0x20000990

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff ffee 	bl	8003294 <HAL_GetTick>
 80032b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_Delay+0x44>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032d2:	bf00      	nop
 80032d4:	f7ff ffde 	bl	8003294 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000110 	.word	0x20000110

080032f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e033      	b.n	8003372 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fb9e 	bl	8000a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800333a:	f023 0302 	bic.w	r3, r3, #2
 800333e:	f043 0202 	orr.w	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fb68 	bl	8003a1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
 8003362:	e001      	b.n	8003368 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d049      	beq.n	8003444 <HAL_ADC_IRQHandler+0xca>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d046      	beq.n	8003444 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d12b      	bne.n	8003434 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d127      	bne.n	8003434 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d119      	bne.n	8003434 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0220 	bic.w	r2, r2, #32
 800340e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fd fc17 	bl	8000c68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0212 	mvn.w	r2, #18
 8003442:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d057      	beq.n	800350a <HAL_ADC_IRQHandler+0x190>
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d054      	beq.n	800350a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d139      	bne.n	80034fa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d12b      	bne.n	80034fa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d124      	bne.n	80034fa <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d119      	bne.n	80034fa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fc0c 	bl	8003d18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 020c 	mvn.w	r2, #12
 8003508:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d017      	beq.n	8003550 <HAL_ADC_IRQHandler+0x1d6>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d014      	beq.n	8003550 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10d      	bne.n	8003550 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f925 	bl	8003790 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f06f 0201 	mvn.w	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d015      	beq.n	8003592 <HAL_ADC_IRQHandler+0x218>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f043 0202 	orr.w	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0220 	mvn.w	r2, #32
 8003580:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f90e 	bl	80037a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	601a      	str	r2, [r3, #0]
  }
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_Start_DMA+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0ce      	b.n	8003758 <HAL_ADC_Start_DMA+0x1bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d018      	beq.n	8003602 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035e0:	4b5f      	ldr	r3, [pc, #380]	; (8003760 <HAL_ADC_Start_DMA+0x1c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5f      	ldr	r2, [pc, #380]	; (8003764 <HAL_ADC_Start_DMA+0x1c8>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9a      	lsrs	r2, r3, #18
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035f4:	e002      	b.n	80035fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f9      	bne.n	80035f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003610:	d107      	bne.n	8003622 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003620:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 8086 	bne.w	800373e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800365c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d106      	bne.n	8003680 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f023 0206 	bic.w	r2, r3, #6
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
 800367e:	e002      	b.n	8003686 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_ADC_Start_DMA+0x1cc>)
 8003690:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_ADC_Start_DMA+0x1d0>)
 8003698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	4a34      	ldr	r2, [pc, #208]	; (8003770 <HAL_ADC_Start_DMA+0x1d4>)
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	4a33      	ldr	r2, [pc, #204]	; (8003774 <HAL_ADC_Start_DMA+0x1d8>)
 80036a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	334c      	adds	r3, #76	; 0x4c
 80036de:	4619      	mov	r1, r3
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f000 fce2 	bl	80040ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d129      	bne.n	8003756 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	e020      	b.n	8003756 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_ADC_Start_DMA+0x1dc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d11b      	bne.n	8003756 <HAL_ADC_Start_DMA+0x1ba>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d114      	bne.n	8003756 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	e00b      	b.n	8003756 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000108 	.word	0x20000108
 8003764:	431bde83 	.word	0x431bde83
 8003768:	40012300 	.word	0x40012300
 800376c:	08003c15 	.word	0x08003c15
 8003770:	08003ccf 	.word	0x08003ccf
 8003774:	08003ceb 	.word	0x08003ceb
 8003778:	40012000 	.word	0x40012000

0800377c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x1c>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e113      	b.n	80039fc <HAL_ADC_ConfigChannel+0x244>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d925      	bls.n	8003830 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68d9      	ldr	r1, [r3, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	3b1e      	subs	r3, #30
 80037fa:	2207      	movs	r2, #7
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43da      	mvns	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	400a      	ands	r2, r1
 8003808:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68d9      	ldr	r1, [r3, #12]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	4618      	mov	r0, r3
 800381c:	4603      	mov	r3, r0
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4403      	add	r3, r0
 8003822:	3b1e      	subs	r3, #30
 8003824:	409a      	lsls	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	e022      	b.n	8003876 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6919      	ldr	r1, [r3, #16]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	2207      	movs	r2, #7
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6919      	ldr	r1, [r3, #16]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	4618      	mov	r0, r3
 8003866:	4603      	mov	r3, r0
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4403      	add	r3, r0
 800386c:	409a      	lsls	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b06      	cmp	r3, #6
 800387c:	d824      	bhi.n	80038c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	3b05      	subs	r3, #5
 8003890:	221f      	movs	r2, #31
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	400a      	ands	r2, r1
 800389e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b05      	subs	r3, #5
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34
 80038c6:	e04c      	b.n	8003962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d824      	bhi.n	800391a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	3b23      	subs	r3, #35	; 0x23
 80038e2:	221f      	movs	r2, #31
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43da      	mvns	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	400a      	ands	r2, r1
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	3b23      	subs	r3, #35	; 0x23
 800390c:	fa00 f203 	lsl.w	r2, r0, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
 8003918:	e023      	b.n	8003962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	3b41      	subs	r3, #65	; 0x41
 800392c:	221f      	movs	r2, #31
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	400a      	ands	r2, r1
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	4618      	mov	r0, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	3b41      	subs	r3, #65	; 0x41
 8003956:	fa00 f203 	lsl.w	r2, r0, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003962:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <HAL_ADC_ConfigChannel+0x250>)
 8003964:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_ADC_ConfigChannel+0x254>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d10f      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1d8>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b12      	cmp	r3, #18
 8003976:	d10b      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_ADC_ConfigChannel+0x254>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d12b      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x23a>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_ADC_ConfigChannel+0x258>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <HAL_ADC_ConfigChannel+0x1f4>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d122      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_ADC_ConfigChannel+0x258>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d111      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_ADC_ConfigChannel+0x25c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_ADC_ConfigChannel+0x260>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	0c9a      	lsrs	r2, r3, #18
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039e4:	e002      	b.n	80039ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f9      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40012300 	.word	0x40012300
 8003a0c:	40012000 	.word	0x40012000
 8003a10:	10000012 	.word	0x10000012
 8003a14:	20000108 	.word	0x20000108
 8003a18:	431bde83 	.word	0x431bde83

08003a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a24:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <ADC_Init+0x1f0>)
 8003a26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	021a      	lsls	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6899      	ldr	r1, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <ADC_Init+0x1f4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e00f      	b.n	8003b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0202 	bic.w	r2, r2, #2
 8003b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7e1b      	ldrb	r3, [r3, #24]
 8003b34:	005a      	lsls	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01b      	beq.n	8003b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	3b01      	subs	r3, #1
 8003b74:	035a      	lsls	r2, r3, #13
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	e007      	b.n	8003b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	051a      	lsls	r2, r3, #20
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bd2:	025a      	lsls	r2, r3, #9
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	029a      	lsls	r2, r3, #10
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40012300 	.word	0x40012300
 8003c10:	0f000001 	.word	0x0f000001

08003c14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d13c      	bne.n	8003ca8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d12b      	bne.n	8003ca0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d127      	bne.n	8003ca0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d119      	bne.n	8003ca0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0220 	bic.w	r2, r2, #32
 8003c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7fc ffe1 	bl	8000c68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ca6:	e00e      	b.n	8003cc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fd75 	bl	80037a4 <HAL_ADC_ErrorCallback>
}
 8003cba:	e004      	b.n	8003cc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff fd4d 	bl	800377c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2240      	movs	r2, #64	; 0x40
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f043 0204 	orr.w	r2, r3, #4
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fd4a 	bl	80037a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <__NVIC_SetPriorityGrouping>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5e:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	60d3      	str	r3, [r2, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_GetPriorityGrouping>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <__NVIC_GetPriorityGrouping+0x18>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 0307 	and.w	r3, r3, #7
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_EnableIRQ>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db0b      	blt.n	8003dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <__NVIC_EnableIRQ+0x38>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2001      	movs	r0, #1
 8003db2:	fa00 f202 	lsl.w	r2, r0, r2
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_SetPriority>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	; 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <SysTick_Config>:
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e98:	d301      	bcc.n	8003e9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00f      	b.n	8003ebe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <SysTick_Config+0x40>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	f7ff ff8e 	bl	8003dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <SysTick_Config+0x40>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <SysTick_Config+0x40>)
 8003eb8:	2207      	movs	r2, #7
 8003eba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff29 	bl	8003d2c <__NVIC_SetPriorityGrouping>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef4:	f7ff ff3e 	bl	8003d74 <__NVIC_GetPriorityGrouping>
 8003ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f7ff ff8e 	bl	8003e20 <NVIC_EncodePriority>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff5d 	bl	8003dcc <__NVIC_SetPriority>
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff31 	bl	8003d90 <__NVIC_EnableIRQ>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ffa2 	bl	8003e88 <SysTick_Config>
 8003f44:	4603      	mov	r3, r0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7ff f99a 	bl	8003294 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e099      	b.n	80040a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f8c:	e00f      	b.n	8003fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f8e:	f7ff f981 	bl	8003294 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d908      	bls.n	8003fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e078      	b.n	80040a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e8      	bne.n	8003f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <HAL_DMA_Init+0x158>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2b04      	cmp	r3, #4
 8004006:	d107      	bne.n	8004018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	4313      	orrs	r3, r2
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b04      	cmp	r3, #4
 8004040:	d117      	bne.n	8004072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fa91 	bl	800457c <DMA_CheckFifoParam>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2240      	movs	r2, #64	; 0x40
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800406e:	2301      	movs	r3, #1
 8004070:	e016      	b.n	80040a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fa48 	bl	8004510 <DMA_CalcBaseAndBitshift>
 8004080:	4603      	mov	r3, r0
 8004082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	223f      	movs	r2, #63	; 0x3f
 800408a:	409a      	lsls	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	f010803f 	.word	0xf010803f

080040ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA_Start_IT+0x26>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e040      	b.n	8004154 <HAL_DMA_Start_IT+0xa8>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d12f      	bne.n	8004146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f9da 	bl	80044b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	223f      	movs	r2, #63	; 0x3f
 8004106:	409a      	lsls	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0216 	orr.w	r2, r2, #22
 800411a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0208 	orr.w	r2, r2, #8
 8004132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e005      	b.n	8004152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800414e:	2302      	movs	r3, #2
 8004150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004152:	7dfb      	ldrb	r3, [r7, #23]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d004      	beq.n	800417a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e00c      	b.n	8004194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2205      	movs	r2, #5
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041ac:	4b8e      	ldr	r3, [pc, #568]	; (80043e8 <HAL_DMA_IRQHandler+0x248>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a8e      	ldr	r2, [pc, #568]	; (80043ec <HAL_DMA_IRQHandler+0x24c>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2208      	movs	r2, #8
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01a      	beq.n	800420c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0204 	bic.w	r2, r2, #4
 80041f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2208      	movs	r2, #8
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2204      	movs	r2, #4
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	2210      	movs	r2, #16
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d043      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d03c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2210      	movs	r2, #16
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d018      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d024      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
 80042ce:	e01f      	b.n	8004310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
 80042e0:	e016      	b.n	8004310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0208 	bic.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	2220      	movs	r2, #32
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 808f 	beq.w	8004440 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8087 	beq.w	8004440 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	2220      	movs	r2, #32
 8004338:	409a      	lsls	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b05      	cmp	r3, #5
 8004348:	d136      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0216 	bic.w	r2, r2, #22
 8004358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_DMA_IRQHandler+0x1da>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0208 	bic.w	r2, r2, #8
 8004388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	223f      	movs	r2, #63	; 0x3f
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d07e      	beq.n	80044ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
        }
        return;
 80043b6:	e079      	b.n	80044ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d031      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
 80043e4:	e02c      	b.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
 80043e6:	bf00      	nop
 80043e8:	20000108 	.word	0x20000108
 80043ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e01e      	b.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d032      	beq.n	80044ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2205      	movs	r2, #5
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	429a      	cmp	r2, r3
 8004476:	d307      	bcc.n	8004488 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f2      	bne.n	800446c <HAL_DMA_IRQHandler+0x2cc>
 8004486:	e000      	b.n	800448a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004488:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	e000      	b.n	80044ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80044ac:	bf00      	nop
    }
  }
}
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d108      	bne.n	80044f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044f2:	e007      	b.n	8004504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	3b10      	subs	r3, #16
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <DMA_CalcBaseAndBitshift+0x64>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <DMA_CalcBaseAndBitshift+0x68>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d909      	bls.n	8004552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	659a      	str	r2, [r3, #88]	; 0x58
 8004550:	e007      	b.n	8004562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	aaaaaaab 	.word	0xaaaaaaab
 8004578:	08007ea0 	.word	0x08007ea0

0800457c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11f      	bne.n	80045d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d856      	bhi.n	800464a <DMA_CheckFifoParam+0xce>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <DMA_CheckFifoParam+0x28>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045c7 	.word	0x080045c7
 80045ac:	080045b5 	.word	0x080045b5
 80045b0:	0800464b 	.word	0x0800464b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d046      	beq.n	800464e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c4:	e043      	b.n	800464e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ce:	d140      	bne.n	8004652 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d4:	e03d      	b.n	8004652 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045de:	d121      	bne.n	8004624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d837      	bhi.n	8004656 <DMA_CheckFifoParam+0xda>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <DMA_CheckFifoParam+0x70>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	08004603 	.word	0x08004603
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004615 	.word	0x08004615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e030      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d025      	beq.n	800465a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004612:	e022      	b.n	800465a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800461c:	d11f      	bne.n	800465e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004622:	e01c      	b.n	800465e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d903      	bls.n	8004632 <DMA_CheckFifoParam+0xb6>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d003      	beq.n	8004638 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004630:	e018      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      break;
 8004636:	e015      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00e      	beq.n	8004662 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e00b      	b.n	8004662 <DMA_CheckFifoParam+0xe6>
      break;
 800464a:	bf00      	nop
 800464c:	e00a      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e008      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e006      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;   
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
    }
  } 
  
  return status; 
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop

08004674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	e159      	b.n	8004944 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004690:	2201      	movs	r2, #1
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	f040 8148 	bne.w	800493e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d005      	beq.n	80046c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d130      	bne.n	8004728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	2203      	movs	r2, #3
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046fc:	2201      	movs	r2, #1
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 0201 	and.w	r2, r3, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b03      	cmp	r3, #3
 8004732:	d017      	beq.n	8004764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d123      	bne.n	80047b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	08da      	lsrs	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3208      	adds	r2, #8
 8004778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	220f      	movs	r2, #15
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	08da      	lsrs	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3208      	adds	r2, #8
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	2203      	movs	r2, #3
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0203 	and.w	r2, r3, #3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a2 	beq.w	800493e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	4b57      	ldr	r3, [pc, #348]	; (800495c <HAL_GPIO_Init+0x2e8>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a56      	ldr	r2, [pc, #344]	; (800495c <HAL_GPIO_Init+0x2e8>)
 8004804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b54      	ldr	r3, [pc, #336]	; (800495c <HAL_GPIO_Init+0x2e8>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004816:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_GPIO_Init+0x2ec>)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	3302      	adds	r3, #2
 800481e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	220f      	movs	r2, #15
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a49      	ldr	r2, [pc, #292]	; (8004964 <HAL_GPIO_Init+0x2f0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <HAL_GPIO_Init+0x202>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a48      	ldr	r2, [pc, #288]	; (8004968 <HAL_GPIO_Init+0x2f4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x1fe>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a47      	ldr	r2, [pc, #284]	; (800496c <HAL_GPIO_Init+0x2f8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x1fa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a46      	ldr	r2, [pc, #280]	; (8004970 <HAL_GPIO_Init+0x2fc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x1f6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a45      	ldr	r2, [pc, #276]	; (8004974 <HAL_GPIO_Init+0x300>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x1f2>
 8004862:	2304      	movs	r3, #4
 8004864:	e008      	b.n	8004878 <HAL_GPIO_Init+0x204>
 8004866:	2307      	movs	r3, #7
 8004868:	e006      	b.n	8004878 <HAL_GPIO_Init+0x204>
 800486a:	2303      	movs	r3, #3
 800486c:	e004      	b.n	8004878 <HAL_GPIO_Init+0x204>
 800486e:	2302      	movs	r3, #2
 8004870:	e002      	b.n	8004878 <HAL_GPIO_Init+0x204>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_GPIO_Init+0x204>
 8004876:	2300      	movs	r3, #0
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	f002 0203 	and.w	r2, r2, #3
 800487e:	0092      	lsls	r2, r2, #2
 8004880:	4093      	lsls	r3, r2
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004888:	4935      	ldr	r1, [pc, #212]	; (8004960 <HAL_GPIO_Init+0x2ec>)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	3302      	adds	r3, #2
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004896:	4b38      	ldr	r3, [pc, #224]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ba:	4a2f      	ldr	r2, [pc, #188]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048e4:	4a24      	ldr	r2, [pc, #144]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ea:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800490e:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <HAL_GPIO_Init+0x304>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b0f      	cmp	r3, #15
 8004948:	f67f aea2 	bls.w	8004690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40013800 	.word	0x40013800
 8004964:	40020000 	.word	0x40020000
 8004968:	40020400 	.word	0x40020400
 800496c:	40020800 	.word	0x40020800
 8004970:	40020c00 	.word	0x40020c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40013c00 	.word	0x40013c00

0800497c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
 8004998:	e001      	b.n	800499e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
 80049b8:	4613      	mov	r3, r2
 80049ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049bc:	787b      	ldrb	r3, [r7, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049c8:	e003      	b.n	80049d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	041a      	lsls	r2, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	619a      	str	r2, [r3, #24]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049f6:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fff5 	bl	80019ee <HAL_GPIO_EXTI_Callback>
  }
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40013c00 	.word	0x40013c00

08004a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e12b      	b.n	8004c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fc7c 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a74:	f001 f896 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8004a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4a81      	ldr	r2, [pc, #516]	; (8004c84 <HAL_I2C_Init+0x274>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d807      	bhi.n	8004a94 <HAL_I2C_Init+0x84>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a80      	ldr	r2, [pc, #512]	; (8004c88 <HAL_I2C_Init+0x278>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf94      	ite	ls
 8004a8c:	2301      	movls	r3, #1
 8004a8e:	2300      	movhi	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e006      	b.n	8004aa2 <HAL_I2C_Init+0x92>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a7d      	ldr	r2, [pc, #500]	; (8004c8c <HAL_I2C_Init+0x27c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bf94      	ite	ls
 8004a9c:	2301      	movls	r3, #1
 8004a9e:	2300      	movhi	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0e7      	b.n	8004c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a78      	ldr	r2, [pc, #480]	; (8004c90 <HAL_I2C_Init+0x280>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	0c9b      	lsrs	r3, r3, #18
 8004ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4a6a      	ldr	r2, [pc, #424]	; (8004c84 <HAL_I2C_Init+0x274>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d802      	bhi.n	8004ae4 <HAL_I2C_Init+0xd4>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	e009      	b.n	8004af8 <HAL_I2C_Init+0xe8>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	4a69      	ldr	r2, [pc, #420]	; (8004c94 <HAL_I2C_Init+0x284>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	3301      	adds	r3, #1
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	495c      	ldr	r1, [pc, #368]	; (8004c84 <HAL_I2C_Init+0x274>)
 8004b14:	428b      	cmp	r3, r1
 8004b16:	d819      	bhi.n	8004b4c <HAL_I2C_Init+0x13c>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e59      	subs	r1, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b2c:	400b      	ands	r3, r1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_I2C_Init+0x138>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1e59      	subs	r1, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b40:	3301      	adds	r3, #1
 8004b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b46:	e051      	b.n	8004bec <HAL_I2C_Init+0x1dc>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	e04f      	b.n	8004bec <HAL_I2C_Init+0x1dc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d111      	bne.n	8004b78 <HAL_I2C_Init+0x168>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1e58      	subs	r0, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	440b      	add	r3, r1
 8004b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e012      	b.n	8004b9e <HAL_I2C_Init+0x18e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1e58      	subs	r0, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6859      	ldr	r1, [r3, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	0099      	lsls	r1, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8e:	3301      	adds	r3, #1
 8004b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Init+0x196>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_I2C_Init+0x1dc>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10e      	bne.n	8004bcc <HAL_I2C_Init+0x1bc>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1e58      	subs	r0, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6859      	ldr	r1, [r3, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	440b      	add	r3, r1
 8004bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bca:	e00f      	b.n	8004bec <HAL_I2C_Init+0x1dc>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1e58      	subs	r0, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6859      	ldr	r1, [r3, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	0099      	lsls	r1, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be2:	3301      	adds	r3, #1
 8004be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	6809      	ldr	r1, [r1, #0]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6911      	ldr	r1, [r2, #16]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68d2      	ldr	r2, [r2, #12]
 8004c26:	4311      	orrs	r1, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	000186a0 	.word	0x000186a0
 8004c88:	001e847f 	.word	0x001e847f
 8004c8c:	003d08ff 	.word	0x003d08ff
 8004c90:	431bde83 	.word	0x431bde83
 8004c94:	10624dd3 	.word	0x10624dd3

08004c98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb2:	f7fe faef 	bl	8003294 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	f040 80d9 	bne.w	8004e78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2319      	movs	r3, #25
 8004ccc:	2201      	movs	r2, #1
 8004cce:	496d      	ldr	r1, [pc, #436]	; (8004e84 <HAL_I2C_Mem_Write+0x1ec>)
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f971 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e0cc      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2C_Mem_Write+0x56>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0c5      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d007      	beq.n	8004d14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	; 0x21
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2240      	movs	r2, #64	; 0x40
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a3a      	ldr	r2, [r7, #32]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a4d      	ldr	r2, [pc, #308]	; (8004e88 <HAL_I2C_Mem_Write+0x1f0>)
 8004d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d56:	88f8      	ldrh	r0, [r7, #6]
 8004d58:	893a      	ldrh	r2, [r7, #8]
 8004d5a:	8979      	ldrh	r1, [r7, #10]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4603      	mov	r3, r0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f890 	bl	8004e8c <I2C_RequestMemoryWrite>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d052      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e081      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f9f2 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d107      	bne.n	8004d9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06b      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d11b      	bne.n	8004e18 <HAL_I2C_Mem_Write+0x180>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d017      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1aa      	bne.n	8004d76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f9de 	bl	80051e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d107      	bne.n	8004e48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e016      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	00100002 	.word	0x00100002
 8004e88:	ffff0000 	.word	0xffff0000

08004e8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f878 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004edc:	d103      	bne.n	8004ee6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e05f      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eea:	897b      	ldrh	r3, [r7, #10]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	492d      	ldr	r1, [pc, #180]	; (8004fb4 <I2C_RequestMemoryWrite+0x128>)
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f8b0 	bl	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e04c      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f91a 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d107      	bne.n	8004f4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02b      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f58:	893b      	ldrh	r3, [r7, #8]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	611a      	str	r2, [r3, #16]
 8004f62:	e021      	b.n	8004fa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f64:	893b      	ldrh	r3, [r7, #8]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6a39      	ldr	r1, [r7, #32]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f8f4 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d107      	bne.n	8004f9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e005      	b.n	8004faa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9e:	893b      	ldrh	r3, [r7, #8]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	00010002 	.word	0x00010002

08004fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc8:	e025      	b.n	8005016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d021      	beq.n	8005016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fe f95f 	bl	8003294 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d116      	bne.n	8005016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e023      	b.n	800505e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10d      	bne.n	800503c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	e00c      	b.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	43da      	mvns	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4013      	ands	r3, r2
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	429a      	cmp	r2, r3
 800505a:	d0b6      	beq.n	8004fca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005074:	e051      	b.n	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005084:	d123      	bne.n	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800509e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e046      	b.n	800515c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d021      	beq.n	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fe f8dd 	bl	8003294 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d116      	bne.n	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e020      	b.n	800515c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10c      	bne.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e00b      	b.n	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	43da      	mvns	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d18d      	bne.n	8005076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005170:	e02d      	b.n	80051ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f878 	bl	8005268 <I2C_IsAcknowledgeFailed>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e02d      	b.n	80051de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d021      	beq.n	80051ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fe f883 	bl	8003294 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e007      	b.n	80051de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d1ca      	bne.n	8005172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f2:	e02d      	b.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f837 	bl	8005268 <I2C_IsAcknowledgeFailed>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e02d      	b.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d021      	beq.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520c:	f7fe f842 	bl	8003294 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d116      	bne.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e007      	b.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d1ca      	bne.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527e:	d11b      	bne.n	80052b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e267      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d075      	beq.n	80053d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052e6:	4b88      	ldr	r3, [pc, #544]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00c      	beq.n	800530c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f2:	4b85      	ldr	r3, [pc, #532]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d112      	bne.n	8005324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fe:	4b82      	ldr	r3, [pc, #520]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530a:	d10b      	bne.n	8005324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	4b7e      	ldr	r3, [pc, #504]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d05b      	beq.n	80053d0 <HAL_RCC_OscConfig+0x108>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d157      	bne.n	80053d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e242      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d106      	bne.n	800533c <HAL_RCC_OscConfig+0x74>
 800532e:	4b76      	ldr	r3, [pc, #472]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a75      	ldr	r2, [pc, #468]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e01d      	b.n	8005378 <HAL_RCC_OscConfig+0xb0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x98>
 8005346:	4b70      	ldr	r3, [pc, #448]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6f      	ldr	r2, [pc, #444]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b6d      	ldr	r3, [pc, #436]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6c      	ldr	r2, [pc, #432]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0xb0>
 8005360:	4b69      	ldr	r3, [pc, #420]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a68      	ldr	r2, [pc, #416]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b66      	ldr	r3, [pc, #408]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a65      	ldr	r2, [pc, #404]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd ff88 	bl	8003294 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005388:	f7fd ff84 	bl	8003294 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	; 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e207      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0xc0>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd ff74 	bl	8003294 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd ff70 	bl	8003294 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1f3      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0xe8>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d063      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053de:	4b4a      	ldr	r3, [pc, #296]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d11c      	bne.n	8005430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f6:	4b44      	ldr	r3, [pc, #272]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCC_OscConfig+0x152>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d001      	beq.n	800541a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e1c7      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4937      	ldr	r1, [pc, #220]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542e:	e03a      	b.n	80054a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005438:	4b34      	ldr	r3, [pc, #208]	; (800550c <HAL_RCC_OscConfig+0x244>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fd ff29 	bl	8003294 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005446:	f7fd ff25 	bl	8003294 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e1a8      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b28      	ldr	r3, [pc, #160]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4925      	ldr	r1, [pc, #148]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]
 8005478:	e015      	b.n	80054a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <HAL_RCC_OscConfig+0x244>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd ff08 	bl	8003294 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005488:	f7fd ff04 	bl	8003294 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e187      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d036      	beq.n	8005520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <HAL_RCC_OscConfig+0x248>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fd fee8 	bl	8003294 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c8:	f7fd fee4 	bl	8003294 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e167      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_OscConfig+0x240>)
 80054dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x200>
 80054e6:	e01b      	b.n	8005520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_RCC_OscConfig+0x248>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ee:	f7fd fed1 	bl	8003294 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f4:	e00e      	b.n	8005514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f6:	f7fd fecd 	bl	8003294 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d907      	bls.n	8005514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e150      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
 8005508:	40023800 	.word	0x40023800
 800550c:	42470000 	.word	0x42470000
 8005510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005514:	4b88      	ldr	r3, [pc, #544]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ea      	bne.n	80054f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8097 	beq.w	800565c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005532:	4b81      	ldr	r3, [pc, #516]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	4b7d      	ldr	r3, [pc, #500]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	4a7c      	ldr	r2, [pc, #496]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554c:	6413      	str	r3, [r2, #64]	; 0x40
 800554e:	4b7a      	ldr	r3, [pc, #488]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555a:	2301      	movs	r3, #1
 800555c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555e:	4b77      	ldr	r3, [pc, #476]	; (800573c <HAL_RCC_OscConfig+0x474>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d118      	bne.n	800559c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556a:	4b74      	ldr	r3, [pc, #464]	; (800573c <HAL_RCC_OscConfig+0x474>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a73      	ldr	r2, [pc, #460]	; (800573c <HAL_RCC_OscConfig+0x474>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005576:	f7fd fe8d 	bl	8003294 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557e:	f7fd fe89 	bl	8003294 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e10c      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005590:	4b6a      	ldr	r3, [pc, #424]	; (800573c <HAL_RCC_OscConfig+0x474>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_OscConfig+0x2ea>
 80055a4:	4b64      	ldr	r3, [pc, #400]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	4a63      	ldr	r2, [pc, #396]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6713      	str	r3, [r2, #112]	; 0x70
 80055b0:	e01c      	b.n	80055ec <HAL_RCC_OscConfig+0x324>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x30c>
 80055ba:	4b5f      	ldr	r3, [pc, #380]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a5e      	ldr	r2, [pc, #376]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055c0:	f043 0304 	orr.w	r3, r3, #4
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
 80055c6:	4b5c      	ldr	r3, [pc, #368]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a5b      	ldr	r2, [pc, #364]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6713      	str	r3, [r2, #112]	; 0x70
 80055d2:	e00b      	b.n	80055ec <HAL_RCC_OscConfig+0x324>
 80055d4:	4b58      	ldr	r3, [pc, #352]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a57      	ldr	r2, [pc, #348]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
 80055e0:	4b55      	ldr	r3, [pc, #340]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	4a54      	ldr	r2, [pc, #336]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80055e6:	f023 0304 	bic.w	r3, r3, #4
 80055ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fd fe4e 	bl	8003294 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fd fe4a 	bl	8003294 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0cb      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005612:	4b49      	ldr	r3, [pc, #292]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ee      	beq.n	80055fc <HAL_RCC_OscConfig+0x334>
 800561e:	e014      	b.n	800564a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005620:	f7fd fe38 	bl	8003294 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005626:	e00a      	b.n	800563e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005628:	f7fd fe34 	bl	8003294 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	; 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e0b5      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563e:	4b3e      	ldr	r3, [pc, #248]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ee      	bne.n	8005628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005650:	4b39      	ldr	r3, [pc, #228]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	4a38      	ldr	r2, [pc, #224]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80a1 	beq.w	80057a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005666:	4b34      	ldr	r3, [pc, #208]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b08      	cmp	r3, #8
 8005670:	d05c      	beq.n	800572c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d141      	bne.n	80056fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b31      	ldr	r3, [pc, #196]	; (8005740 <HAL_RCC_OscConfig+0x478>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fd fe08 	bl	8003294 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005688:	f7fd fe04 	bl	8003294 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e087      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	3b01      	subs	r3, #1
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	491b      	ldr	r1, [pc, #108]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_RCC_OscConfig+0x478>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fd fddd 	bl	8003294 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056de:	f7fd fdd9 	bl	8003294 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e05c      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f0:	4b11      	ldr	r3, [pc, #68]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x416>
 80056fc:	e054      	b.n	80057a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_RCC_OscConfig+0x478>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fd fdc6 	bl	8003294 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd fdc2 	bl	8003294 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e045      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_RCC_OscConfig+0x470>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x444>
 800572a:	e03d      	b.n	80057a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d107      	bne.n	8005744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e038      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
 8005738:	40023800 	.word	0x40023800
 800573c:	40007000 	.word	0x40007000
 8005740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <HAL_RCC_OscConfig+0x4ec>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d028      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d121      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d11a      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800577a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800577c:	4293      	cmp	r3, r2
 800577e:	d111      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	3b01      	subs	r3, #1
 800578e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800

080057b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0cc      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057cc:	4b68      	ldr	r3, [pc, #416]	; (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d90c      	bls.n	80057f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b65      	ldr	r3, [pc, #404]	; (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b63      	ldr	r3, [pc, #396]	; (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0b8      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d020      	beq.n	8005842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800580c:	4b59      	ldr	r3, [pc, #356]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4a58      	ldr	r2, [pc, #352]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005824:	4b53      	ldr	r3, [pc, #332]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a52      	ldr	r2, [pc, #328]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800582e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005830:	4b50      	ldr	r3, [pc, #320]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	494d      	ldr	r1, [pc, #308]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d044      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d107      	bne.n	8005866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	4b47      	ldr	r3, [pc, #284]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d119      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e07f      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d003      	beq.n	8005876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005872:	2b03      	cmp	r3, #3
 8005874:	d107      	bne.n	8005886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005876:	4b3f      	ldr	r3, [pc, #252]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e06f      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005886:	4b3b      	ldr	r3, [pc, #236]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e067      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005896:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f023 0203 	bic.w	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4934      	ldr	r1, [pc, #208]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a8:	f7fd fcf4 	bl	8003294 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b0:	f7fd fcf0 	bl	8003294 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e04f      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 020c 	and.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1eb      	bne.n	80058b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d20c      	bcs.n	8005900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b22      	ldr	r3, [pc, #136]	; (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	4b20      	ldr	r3, [pc, #128]	; (8005970 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e032      	b.n	8005966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4916      	ldr	r1, [pc, #88]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	490e      	ldr	r1, [pc, #56]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800593e:	f000 f821 	bl	8005984 <HAL_RCC_GetSysClockFreq>
 8005942:	4602      	mov	r2, r0
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	490a      	ldr	r1, [pc, #40]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 8005950:	5ccb      	ldrb	r3, [r1, r3]
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_RCC_ClockConfig+0x1c8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7fd fc54 	bl	800320c <HAL_InitTick>

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40023c00 	.word	0x40023c00
 8005974:	40023800 	.word	0x40023800
 8005978:	08007e88 	.word	0x08007e88
 800597c:	20000108 	.word	0x20000108
 8005980:	2000010c 	.word	0x2000010c

08005984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b094      	sub	sp, #80	; 0x50
 800598a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
 8005990:	2300      	movs	r3, #0
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005994:	2300      	movs	r3, #0
 8005996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800599c:	4b79      	ldr	r3, [pc, #484]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 030c 	and.w	r3, r3, #12
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d00d      	beq.n	80059c4 <HAL_RCC_GetSysClockFreq+0x40>
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	f200 80e1 	bhi.w	8005b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x34>
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d003      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0x3a>
 80059b6:	e0db      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b73      	ldr	r3, [pc, #460]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059bc:	e0db      	b.n	8005b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059be:	4b72      	ldr	r3, [pc, #456]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80059c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059c2:	e0d8      	b.n	8005b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c4:	4b6f      	ldr	r3, [pc, #444]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ce:	4b6d      	ldr	r3, [pc, #436]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d063      	beq.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059da:	4b6a      	ldr	r3, [pc, #424]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	2200      	movs	r2, #0
 80059e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30
 80059ee:	2300      	movs	r3, #0
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
 80059f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059f6:	4622      	mov	r2, r4
 80059f8:	462b      	mov	r3, r5
 80059fa:	f04f 0000 	mov.w	r0, #0
 80059fe:	f04f 0100 	mov.w	r1, #0
 8005a02:	0159      	lsls	r1, r3, #5
 8005a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a08:	0150      	lsls	r0, r2, #5
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4621      	mov	r1, r4
 8005a10:	1a51      	subs	r1, r2, r1
 8005a12:	6139      	str	r1, [r7, #16]
 8005a14:	4629      	mov	r1, r5
 8005a16:	eb63 0301 	sbc.w	r3, r3, r1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a28:	4659      	mov	r1, fp
 8005a2a:	018b      	lsls	r3, r1, #6
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a32:	4651      	mov	r1, sl
 8005a34:	018a      	lsls	r2, r1, #6
 8005a36:	4651      	mov	r1, sl
 8005a38:	ebb2 0801 	subs.w	r8, r2, r1
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a56:	4690      	mov	r8, r2
 8005a58:	4699      	mov	r9, r3
 8005a5a:	4623      	mov	r3, r4
 8005a5c:	eb18 0303 	adds.w	r3, r8, r3
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	462b      	mov	r3, r5
 8005a64:	eb49 0303 	adc.w	r3, r9, r3
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a76:	4629      	mov	r1, r5
 8005a78:	028b      	lsls	r3, r1, #10
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a80:	4621      	mov	r1, r4
 8005a82:	028a      	lsls	r2, r1, #10
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a94:	f7fa fba8 	bl	80001e8 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa0:	e058      	b.n	8005b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	4611      	mov	r1, r2
 8005aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005abc:	4642      	mov	r2, r8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	f04f 0000 	mov.w	r0, #0
 8005ac4:	f04f 0100 	mov.w	r1, #0
 8005ac8:	0159      	lsls	r1, r3, #5
 8005aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ace:	0150      	lsls	r0, r2, #5
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ada:	4649      	mov	r1, r9
 8005adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005af4:	ebb2 040a 	subs.w	r4, r2, sl
 8005af8:	eb63 050b 	sbc.w	r5, r3, fp
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	00eb      	lsls	r3, r5, #3
 8005b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b0a:	00e2      	lsls	r2, r4, #3
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	461d      	mov	r5, r3
 8005b10:	4643      	mov	r3, r8
 8005b12:	18e3      	adds	r3, r4, r3
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	464b      	mov	r3, r9
 8005b18:	eb45 0303 	adc.w	r3, r5, r3
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	028b      	lsls	r3, r1, #10
 8005b2e:	4621      	mov	r1, r4
 8005b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b34:	4621      	mov	r1, r4
 8005b36:	028a      	lsls	r2, r1, #10
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3e:	2200      	movs	r2, #0
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	61fa      	str	r2, [r7, #28]
 8005b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b48:	f7fa fb4e 	bl	80001e8 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4613      	mov	r3, r2
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b6e:	e002      	b.n	8005b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3750      	adds	r7, #80	; 0x50
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b82:	bf00      	nop
 8005b84:	40023800 	.word	0x40023800
 8005b88:	00f42400 	.word	0x00f42400

08005b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000108 	.word	0x20000108

08005ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba8:	f7ff fff0 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0a9b      	lsrs	r3, r3, #10
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4903      	ldr	r1, [pc, #12]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	08007e98 	.word	0x08007e98

08005bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07b      	b.n	8005cd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d108      	bne.n	8005bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bee:	d009      	beq.n	8005c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	61da      	str	r2, [r3, #28]
 8005bf6:	e005      	b.n	8005c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fc fe10 	bl	8002844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c88:	ea42 0103 	orr.w	r1, r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	f003 0104 	and.w	r1, r3, #4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	f003 0210 	and.w	r2, r3, #16
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_SPI_Transmit+0x22>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e126      	b.n	8005f4e <HAL_SPI_Transmit+0x270>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d08:	f7fd fac4 	bl	8003294 <HAL_GetTick>
 8005d0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d22:	e10b      	b.n	8005f3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_Transmit+0x52>
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d34:	e102      	b.n	8005f3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7c:	d10f      	bne.n	8005d9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d007      	beq.n	8005dbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc4:	d14b      	bne.n	8005e5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0xf6>
 8005dce:	8afb      	ldrh	r3, [r7, #22]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d13e      	bne.n	8005e52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	1c9a      	adds	r2, r3, #2
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005df8:	e02b      	b.n	8005e52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d112      	bne.n	8005e2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e2c:	e011      	b.n	8005e52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2e:	f7fd fa31 	bl	8003294 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d803      	bhi.n	8005e46 <HAL_SPI_Transmit+0x168>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d102      	bne.n	8005e4c <HAL_SPI_Transmit+0x16e>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e50:	e074      	b.n	8005f3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ce      	bne.n	8005dfa <HAL_SPI_Transmit+0x11c>
 8005e5c:	e04c      	b.n	8005ef8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Transmit+0x18e>
 8005e66:	8afb      	ldrh	r3, [r7, #22]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d140      	bne.n	8005eee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e92:	e02c      	b.n	8005eee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d113      	bne.n	8005eca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ec8:	e011      	b.n	8005eee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eca:	f7fd f9e3 	bl	8003294 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d803      	bhi.n	8005ee2 <HAL_SPI_Transmit+0x204>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d102      	bne.n	8005ee8 <HAL_SPI_Transmit+0x20a>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eec:	e026      	b.n	8005f3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1cd      	bne.n	8005e94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fcdd 	bl	80068bc <SPI_EndRxTxTransaction>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e000      	b.n	8005f3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af02      	add	r7, sp, #8
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f72:	d112      	bne.n	8005f9a <HAL_SPI_Receive+0x44>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10e      	bne.n	8005f9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2204      	movs	r2, #4
 8005f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f84:	88fa      	ldrh	r2, [r7, #6]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f8f1 	bl	8006178 <HAL_SPI_TransmitReceive>
 8005f96:	4603      	mov	r3, r0
 8005f98:	e0ea      	b.n	8006170 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_SPI_Receive+0x52>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e0e3      	b.n	8006170 <HAL_SPI_Receive+0x21a>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb0:	f7fd f970 	bl	8003294 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fc6:	e0ca      	b.n	800615e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_SPI_Receive+0x7e>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fd8:	e0c1      	b.n	800615e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006020:	d10f      	bne.n	8006042 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006040:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d007      	beq.n	8006060 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d162      	bne.n	800612e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006068:	e02e      	b.n	80060c8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d115      	bne.n	80060a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f103 020c 	add.w	r2, r3, #12
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	7812      	ldrb	r2, [r2, #0]
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060a2:	e011      	b.n	80060c8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a4:	f7fd f8f6 	bl	8003294 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d803      	bhi.n	80060bc <HAL_SPI_Receive+0x166>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d102      	bne.n	80060c2 <HAL_SPI_Receive+0x16c>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060c6:	e04a      	b.n	800615e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1cb      	bne.n	800606a <HAL_SPI_Receive+0x114>
 80060d2:	e031      	b.n	8006138 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d113      	bne.n	800610a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	b292      	uxth	r2, r2
 80060ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006108:	e011      	b.n	800612e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610a:	f7fd f8c3 	bl	8003294 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d803      	bhi.n	8006122 <HAL_SPI_Receive+0x1cc>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d102      	bne.n	8006128 <HAL_SPI_Receive+0x1d2>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800612c:	e017      	b.n	800615e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1cd      	bne.n	80060d4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fb57 	bl	80067f0 <SPI_EndRxTransaction>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
 800615a:	e000      	b.n	800615e <HAL_SPI_Receive+0x208>
  }

error :
 800615c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800616e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006186:	2301      	movs	r3, #1
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_SPI_TransmitReceive+0x26>
 800619a:	2302      	movs	r3, #2
 800619c:	e18a      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x33c>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a6:	f7fd f875 	bl	8003294 <HAL_GetTick>
 80061aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061bc:	887b      	ldrh	r3, [r7, #2]
 80061be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d00f      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x70>
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ce:	d107      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x68>
 80061d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d003      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061e6:	e15b      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x82>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x82>
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006200:	e14e      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b04      	cmp	r3, #4
 800620c:	d003      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2205      	movs	r2, #5
 8006212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	887a      	ldrh	r2, [r7, #2]
 8006226:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	887a      	ldrh	r2, [r7, #2]
 800622c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	887a      	ldrh	r2, [r7, #2]
 800623e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d007      	beq.n	800626a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006268:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006272:	d178      	bne.n	8006366 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_SPI_TransmitReceive+0x10a>
 800627c:	8b7b      	ldrh	r3, [r7, #26]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d166      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	881a      	ldrh	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	1c9a      	adds	r2, r3, #2
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a6:	e053      	b.n	8006350 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d11b      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x176>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d016      	beq.n	80062ee <HAL_SPI_TransmitReceive+0x176>
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d113      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	881a      	ldrh	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d119      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x1b8>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	b292      	uxth	r2, r2
 8006312:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	1c9a      	adds	r2, r3, #2
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800632c:	2301      	movs	r3, #1
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006330:	f7fc ffb0 	bl	8003294 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	429a      	cmp	r2, r3
 800633e:	d807      	bhi.n	8006350 <HAL_SPI_TransmitReceive+0x1d8>
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	d003      	beq.n	8006350 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800634e:	e0a7      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1a6      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x130>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1a1      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x130>
 8006364:	e07c      	b.n	8006460 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x1fc>
 800636e:	8b7b      	ldrh	r3, [r7, #26]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d16b      	bne.n	800644c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639a:	e057      	b.n	800644c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d11c      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x26c>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x26c>
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d114      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d119      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x2ae>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d014      	beq.n	8006426 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006422:	2301      	movs	r3, #1
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006426:	f7fc ff35 	bl	8003294 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006432:	429a      	cmp	r2, r3
 8006434:	d803      	bhi.n	800643e <HAL_SPI_TransmitReceive+0x2c6>
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d102      	bne.n	8006444 <HAL_SPI_TransmitReceive+0x2cc>
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800644a:	e029      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1a2      	bne.n	800639c <HAL_SPI_TransmitReceive+0x224>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d19d      	bne.n	800639c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fa29 	bl	80068bc <SPI_EndRxTxTransaction>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800647c:	e010      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	e000      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800649e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3730      	adds	r7, #48	; 0x30
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10e      	bne.n	80064fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
    return;
 80064fa:	e0ce      	b.n	800669a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_SPI_IRQHandler+0x5e>
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
    return;
 8006518:	e0bf      	b.n	800669a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <HAL_SPI_IRQHandler+0x7e>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80b0 	beq.w	800669a <HAL_SPI_IRQHandler+0x1de>
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80aa 	beq.w	800669a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d023      	beq.n	8006598 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b03      	cmp	r3, #3
 800655a:	d011      	beq.n	8006580 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006560:	f043 0204 	orr.w	r2, r3, #4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	e00b      	b.n	8006598 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
        return;
 8006596:	e080      	b.n	800669a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d014      	beq.n	80065cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f043 0201 	orr.w	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00c      	beq.n	80065f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	f043 0208 	orr.w	r2, r3, #8
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d04f      	beq.n	8006698 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006606:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <HAL_SPI_IRQHandler+0x168>
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d034      	beq.n	800668e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0203 	bic.w	r2, r2, #3
 8006632:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006640:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <HAL_SPI_IRQHandler+0x1e4>)
 8006642:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006648:	4618      	mov	r0, r3
 800664a:	f7fd fd87 	bl	800415c <HAL_DMA_Abort_IT>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006664:	2b00      	cmp	r3, #0
 8006666:	d016      	beq.n	8006696 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666c:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <HAL_SPI_IRQHandler+0x1e4>)
 800666e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006674:	4618      	mov	r0, r3
 8006676:	f7fd fd71 	bl	800415c <HAL_DMA_Abort_IT>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800668c:	e003      	b.n	8006696 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f808 	bl	80066a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006694:	e000      	b.n	8006698 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006696:	bf00      	nop
    return;
 8006698:	bf00      	nop
  }
}
 800669a:	3720      	adds	r7, #32
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	080066b9 	.word	0x080066b9

080066a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff ffe6 	bl	80066a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066f0:	f7fc fdd0 	bl	8003294 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	4413      	add	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006700:	f7fc fdc8 	bl	8003294 <HAL_GetTick>
 8006704:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006706:	4b39      	ldr	r3, [pc, #228]	; (80067ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	015b      	lsls	r3, r3, #5
 800670c:	0d1b      	lsrs	r3, r3, #20
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	fb02 f303 	mul.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006716:	e054      	b.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d050      	beq.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006720:	f7fc fdb8 	bl	8003294 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	429a      	cmp	r2, r3
 800672e:	d902      	bls.n	8006736 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d13d      	bne.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674e:	d111      	bne.n	8006774 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006758:	d004      	beq.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006762:	d107      	bne.n	8006774 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677c:	d10f      	bne.n	800679e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800679c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e017      	b.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3b01      	subs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4013      	ands	r3, r2
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	bf0c      	ite	eq
 80067d2:	2301      	moveq	r3, #1
 80067d4:	2300      	movne	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d19b      	bne.n	8006718 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000108 	.word	0x20000108

080067f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006804:	d111      	bne.n	800682a <SPI_EndRxTransaction+0x3a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	d004      	beq.n	800681a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d107      	bne.n	800682a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006832:	d12a      	bne.n	800688a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683c:	d012      	beq.n	8006864 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2200      	movs	r2, #0
 8006846:	2180      	movs	r1, #128	; 0x80
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff ff49 	bl	80066e0 <SPI_WaitFlagStateUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02d      	beq.n	80068b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	f043 0220 	orr.w	r2, r3, #32
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e026      	b.n	80068b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	2101      	movs	r1, #1
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff ff36 	bl	80066e0 <SPI_WaitFlagStateUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01a      	beq.n	80068b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e013      	b.n	80068b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	2101      	movs	r1, #1
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff ff23 	bl	80066e0 <SPI_WaitFlagStateUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e000      	b.n	80068b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068c8:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <SPI_EndRxTxTransaction+0x7c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <SPI_EndRxTxTransaction+0x80>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	0d5b      	lsrs	r3, r3, #21
 80068d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068d8:	fb02 f303 	mul.w	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e6:	d112      	bne.n	800690e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fef4 	bl	80066e0 <SPI_WaitFlagStateUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d016      	beq.n	800692c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e00f      	b.n	800692e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3b01      	subs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b80      	cmp	r3, #128	; 0x80
 8006926:	d0f2      	beq.n	800690e <SPI_EndRxTxTransaction+0x52>
 8006928:	e000      	b.n	800692c <SPI_EndRxTxTransaction+0x70>
        break;
 800692a:	bf00      	nop
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000108 	.word	0x20000108
 800693c:	165e9f81 	.word	0x165e9f81

08006940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fc fbdc 	bl	8003124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 faf6 	bl	8006f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d001      	beq.n	80069f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e03c      	b.n	8006a72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <HAL_TIM_Base_Start+0xa0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_TIM_Base_Start+0x5c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d013      	beq.n	8006a3c <HAL_TIM_Base_Start+0x5c>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_TIM_Base_Start+0xa4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_TIM_Base_Start+0x5c>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a19      	ldr	r2, [pc, #100]	; (8006a88 <HAL_TIM_Base_Start+0xa8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_TIM_Base_Start+0x5c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a17      	ldr	r2, [pc, #92]	; (8006a8c <HAL_TIM_Base_Start+0xac>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_TIM_Base_Start+0x5c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <HAL_TIM_Base_Start+0xb0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d111      	bne.n	8006a60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d010      	beq.n	8006a70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5e:	e007      	b.n	8006a70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40014000 	.word	0x40014000

08006a94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e097      	b.n	8006bd8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d106      	bne.n	8006ac2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fc fae9 	bl	8003094 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f000 fa41 	bl	8006f70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	4313      	orrs	r3, r2
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b34:	f023 030c 	bic.w	r3, r3, #12
 8006b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	4313      	orrs	r3, r2
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	011a      	lsls	r2, r3, #4
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	031b      	lsls	r3, r3, #12
 8006b64:	4313      	orrs	r3, r2
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	4313      	orrs	r3, r2
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bf0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bf8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d110      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d102      	bne.n	8006c1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c16:	7b7b      	ldrb	r3, [r7, #13]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d001      	beq.n	8006c20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e069      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c30:	e031      	b.n	8006c96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d110      	bne.n	8006c5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d102      	bne.n	8006c44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c3e:	7b3b      	ldrb	r3, [r7, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d001      	beq.n	8006c48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e055      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c58:	e01d      	b.n	8006c96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d108      	bne.n	8006c72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c66:	7b7b      	ldrb	r3, [r7, #13]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d102      	bne.n	8006c72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c6c:	7b3b      	ldrb	r3, [r7, #12]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d001      	beq.n	8006c76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e03e      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_TIM_Encoder_Start+0xc4>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d008      	beq.n	8006cb4 <HAL_TIM_Encoder_Start+0xd4>
 8006ca2:	e00f      	b.n	8006cc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f9df 	bl	8007070 <TIM_CCxChannelCmd>
      break;
 8006cb2:	e016      	b.n	8006ce2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2104      	movs	r1, #4
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f9d7 	bl	8007070 <TIM_CCxChannelCmd>
      break;
 8006cc2:	e00e      	b.n	8006ce2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f9cf 	bl	8007070 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	2104      	movs	r1, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f9c8 	bl	8007070 <TIM_CCxChannelCmd>
      break;
 8006ce0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d122      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d11b      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0202 	mvn.w	r2, #2
 8006d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8f8 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f8ea 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8fb 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d122      	bne.n	8006dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d11b      	bne.n	8006dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0204 	mvn.w	r2, #4
 8006d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8ce 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006d98:	e005      	b.n	8006da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f8c0 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f8d1 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d122      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d11b      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0208 	mvn.w	r2, #8
 8006dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f8a4 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006dec:	e005      	b.n	8006dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f896 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f8a7 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d122      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d11b      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0210 	mvn.w	r2, #16
 8006e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f87a 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006e40:	e005      	b.n	8006e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f86c 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f87d 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d10e      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d107      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f06f 0201 	mvn.w	r2, #1
 8006e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f846 	bl	8006f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d10e      	bne.n	8006eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	d107      	bne.n	8006eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f980 	bl	80071ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b40      	cmp	r3, #64	; 0x40
 8006ec6:	d107      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f842 	bl	8006f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d10e      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d107      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0220 	mvn.w	r2, #32
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f94a 	bl	8007198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a34      	ldr	r2, [pc, #208]	; (8007054 <TIM_Base_SetConfig+0xe4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00f      	beq.n	8006fa8 <TIM_Base_SetConfig+0x38>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_Base_SetConfig+0x38>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a31      	ldr	r2, [pc, #196]	; (8007058 <TIM_Base_SetConfig+0xe8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_Base_SetConfig+0x38>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a30      	ldr	r2, [pc, #192]	; (800705c <TIM_Base_SetConfig+0xec>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_Base_SetConfig+0x38>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <TIM_Base_SetConfig+0xf0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d108      	bne.n	8006fba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a25      	ldr	r2, [pc, #148]	; (8007054 <TIM_Base_SetConfig+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01b      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc8:	d017      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a22      	ldr	r2, [pc, #136]	; (8007058 <TIM_Base_SetConfig+0xe8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a21      	ldr	r2, [pc, #132]	; (800705c <TIM_Base_SetConfig+0xec>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00f      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a20      	ldr	r2, [pc, #128]	; (8007060 <TIM_Base_SetConfig+0xf0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00b      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	; (8007064 <TIM_Base_SetConfig+0xf4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d007      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <TIM_Base_SetConfig+0xf8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_Base_SetConfig+0x8a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	; (800706c <TIM_Base_SetConfig+0xfc>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d108      	bne.n	800700c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a08      	ldr	r2, [pc, #32]	; (8007054 <TIM_Base_SetConfig+0xe4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d103      	bne.n	8007040 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	615a      	str	r2, [r3, #20]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	43db      	mvns	r3, r3
 8007092:	401a      	ands	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	431a      	orrs	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e050      	b.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007120:	d013      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a16      	ldr	r2, [pc, #88]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10c      	bne.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40014000 	.word	0x40014000

08007198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <std>:
 80071c0:	2300      	movs	r3, #0
 80071c2:	b510      	push	{r4, lr}
 80071c4:	4604      	mov	r4, r0
 80071c6:	e9c0 3300 	strd	r3, r3, [r0]
 80071ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ce:	6083      	str	r3, [r0, #8]
 80071d0:	8181      	strh	r1, [r0, #12]
 80071d2:	6643      	str	r3, [r0, #100]	; 0x64
 80071d4:	81c2      	strh	r2, [r0, #14]
 80071d6:	6183      	str	r3, [r0, #24]
 80071d8:	4619      	mov	r1, r3
 80071da:	2208      	movs	r2, #8
 80071dc:	305c      	adds	r0, #92	; 0x5c
 80071de:	f000 f9e5 	bl	80075ac <memset>
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <std+0x58>)
 80071e4:	6263      	str	r3, [r4, #36]	; 0x24
 80071e6:	4b0d      	ldr	r3, [pc, #52]	; (800721c <std+0x5c>)
 80071e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <std+0x60>)
 80071ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ee:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <std+0x64>)
 80071f0:	6323      	str	r3, [r4, #48]	; 0x30
 80071f2:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <std+0x68>)
 80071f4:	6224      	str	r4, [r4, #32]
 80071f6:	429c      	cmp	r4, r3
 80071f8:	d006      	beq.n	8007208 <std+0x48>
 80071fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80071fe:	4294      	cmp	r4, r2
 8007200:	d002      	beq.n	8007208 <std+0x48>
 8007202:	33d0      	adds	r3, #208	; 0xd0
 8007204:	429c      	cmp	r4, r3
 8007206:	d105      	bne.n	8007214 <std+0x54>
 8007208:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800720c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007210:	f000 ba44 	b.w	800769c <__retarget_lock_init_recursive>
 8007214:	bd10      	pop	{r4, pc}
 8007216:	bf00      	nop
 8007218:	080073fd 	.word	0x080073fd
 800721c:	0800741f 	.word	0x0800741f
 8007220:	08007457 	.word	0x08007457
 8007224:	0800747b 	.word	0x0800747b
 8007228:	20000994 	.word	0x20000994

0800722c <stdio_exit_handler>:
 800722c:	4a02      	ldr	r2, [pc, #8]	; (8007238 <stdio_exit_handler+0xc>)
 800722e:	4903      	ldr	r1, [pc, #12]	; (800723c <stdio_exit_handler+0x10>)
 8007230:	4803      	ldr	r0, [pc, #12]	; (8007240 <stdio_exit_handler+0x14>)
 8007232:	f000 b869 	b.w	8007308 <_fwalk_sglue>
 8007236:	bf00      	nop
 8007238:	20000114 	.word	0x20000114
 800723c:	080079a1 	.word	0x080079a1
 8007240:	20000120 	.word	0x20000120

08007244 <cleanup_stdio>:
 8007244:	6841      	ldr	r1, [r0, #4]
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <cleanup_stdio+0x34>)
 8007248:	4299      	cmp	r1, r3
 800724a:	b510      	push	{r4, lr}
 800724c:	4604      	mov	r4, r0
 800724e:	d001      	beq.n	8007254 <cleanup_stdio+0x10>
 8007250:	f000 fba6 	bl	80079a0 <_fflush_r>
 8007254:	68a1      	ldr	r1, [r4, #8]
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <cleanup_stdio+0x38>)
 8007258:	4299      	cmp	r1, r3
 800725a:	d002      	beq.n	8007262 <cleanup_stdio+0x1e>
 800725c:	4620      	mov	r0, r4
 800725e:	f000 fb9f 	bl	80079a0 <_fflush_r>
 8007262:	68e1      	ldr	r1, [r4, #12]
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <cleanup_stdio+0x3c>)
 8007266:	4299      	cmp	r1, r3
 8007268:	d004      	beq.n	8007274 <cleanup_stdio+0x30>
 800726a:	4620      	mov	r0, r4
 800726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007270:	f000 bb96 	b.w	80079a0 <_fflush_r>
 8007274:	bd10      	pop	{r4, pc}
 8007276:	bf00      	nop
 8007278:	20000994 	.word	0x20000994
 800727c:	200009fc 	.word	0x200009fc
 8007280:	20000a64 	.word	0x20000a64

08007284 <global_stdio_init.part.0>:
 8007284:	b510      	push	{r4, lr}
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <global_stdio_init.part.0+0x30>)
 8007288:	4c0b      	ldr	r4, [pc, #44]	; (80072b8 <global_stdio_init.part.0+0x34>)
 800728a:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <global_stdio_init.part.0+0x38>)
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	4620      	mov	r0, r4
 8007290:	2200      	movs	r2, #0
 8007292:	2104      	movs	r1, #4
 8007294:	f7ff ff94 	bl	80071c0 <std>
 8007298:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800729c:	2201      	movs	r2, #1
 800729e:	2109      	movs	r1, #9
 80072a0:	f7ff ff8e 	bl	80071c0 <std>
 80072a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072a8:	2202      	movs	r2, #2
 80072aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ae:	2112      	movs	r1, #18
 80072b0:	f7ff bf86 	b.w	80071c0 <std>
 80072b4:	20000acc 	.word	0x20000acc
 80072b8:	20000994 	.word	0x20000994
 80072bc:	0800722d 	.word	0x0800722d

080072c0 <__sfp_lock_acquire>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__sfp_lock_acquire+0x8>)
 80072c2:	f000 b9ec 	b.w	800769e <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	20000ad5 	.word	0x20000ad5

080072cc <__sfp_lock_release>:
 80072cc:	4801      	ldr	r0, [pc, #4]	; (80072d4 <__sfp_lock_release+0x8>)
 80072ce:	f000 b9e7 	b.w	80076a0 <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000ad5 	.word	0x20000ad5

080072d8 <__sinit>:
 80072d8:	b510      	push	{r4, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	f7ff fff0 	bl	80072c0 <__sfp_lock_acquire>
 80072e0:	6a23      	ldr	r3, [r4, #32]
 80072e2:	b11b      	cbz	r3, 80072ec <__sinit+0x14>
 80072e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e8:	f7ff bff0 	b.w	80072cc <__sfp_lock_release>
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <__sinit+0x28>)
 80072ee:	6223      	str	r3, [r4, #32]
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <__sinit+0x2c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1f5      	bne.n	80072e4 <__sinit+0xc>
 80072f8:	f7ff ffc4 	bl	8007284 <global_stdio_init.part.0>
 80072fc:	e7f2      	b.n	80072e4 <__sinit+0xc>
 80072fe:	bf00      	nop
 8007300:	08007245 	.word	0x08007245
 8007304:	20000acc 	.word	0x20000acc

08007308 <_fwalk_sglue>:
 8007308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800730c:	4607      	mov	r7, r0
 800730e:	4688      	mov	r8, r1
 8007310:	4614      	mov	r4, r2
 8007312:	2600      	movs	r6, #0
 8007314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007318:	f1b9 0901 	subs.w	r9, r9, #1
 800731c:	d505      	bpl.n	800732a <_fwalk_sglue+0x22>
 800731e:	6824      	ldr	r4, [r4, #0]
 8007320:	2c00      	cmp	r4, #0
 8007322:	d1f7      	bne.n	8007314 <_fwalk_sglue+0xc>
 8007324:	4630      	mov	r0, r6
 8007326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d907      	bls.n	8007340 <_fwalk_sglue+0x38>
 8007330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007334:	3301      	adds	r3, #1
 8007336:	d003      	beq.n	8007340 <_fwalk_sglue+0x38>
 8007338:	4629      	mov	r1, r5
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	4306      	orrs	r6, r0
 8007340:	3568      	adds	r5, #104	; 0x68
 8007342:	e7e9      	b.n	8007318 <_fwalk_sglue+0x10>

08007344 <_puts_r>:
 8007344:	6a03      	ldr	r3, [r0, #32]
 8007346:	b570      	push	{r4, r5, r6, lr}
 8007348:	6884      	ldr	r4, [r0, #8]
 800734a:	4605      	mov	r5, r0
 800734c:	460e      	mov	r6, r1
 800734e:	b90b      	cbnz	r3, 8007354 <_puts_r+0x10>
 8007350:	f7ff ffc2 	bl	80072d8 <__sinit>
 8007354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007356:	07db      	lsls	r3, r3, #31
 8007358:	d405      	bmi.n	8007366 <_puts_r+0x22>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	0598      	lsls	r0, r3, #22
 800735e:	d402      	bmi.n	8007366 <_puts_r+0x22>
 8007360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007362:	f000 f99c 	bl	800769e <__retarget_lock_acquire_recursive>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	0719      	lsls	r1, r3, #28
 800736a:	d513      	bpl.n	8007394 <_puts_r+0x50>
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	b18b      	cbz	r3, 8007394 <_puts_r+0x50>
 8007370:	3e01      	subs	r6, #1
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007378:	3b01      	subs	r3, #1
 800737a:	60a3      	str	r3, [r4, #8]
 800737c:	b9e9      	cbnz	r1, 80073ba <_puts_r+0x76>
 800737e:	2b00      	cmp	r3, #0
 8007380:	da2e      	bge.n	80073e0 <_puts_r+0x9c>
 8007382:	4622      	mov	r2, r4
 8007384:	210a      	movs	r1, #10
 8007386:	4628      	mov	r0, r5
 8007388:	f000 f87b 	bl	8007482 <__swbuf_r>
 800738c:	3001      	adds	r0, #1
 800738e:	d007      	beq.n	80073a0 <_puts_r+0x5c>
 8007390:	250a      	movs	r5, #10
 8007392:	e007      	b.n	80073a4 <_puts_r+0x60>
 8007394:	4621      	mov	r1, r4
 8007396:	4628      	mov	r0, r5
 8007398:	f000 f8b0 	bl	80074fc <__swsetup_r>
 800739c:	2800      	cmp	r0, #0
 800739e:	d0e7      	beq.n	8007370 <_puts_r+0x2c>
 80073a0:	f04f 35ff 	mov.w	r5, #4294967295
 80073a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_puts_r+0x72>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	059b      	lsls	r3, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_puts_r+0x72>
 80073b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073b2:	f000 f975 	bl	80076a0 <__retarget_lock_release_recursive>
 80073b6:	4628      	mov	r0, r5
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da04      	bge.n	80073c8 <_puts_r+0x84>
 80073be:	69a2      	ldr	r2, [r4, #24]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	dc06      	bgt.n	80073d2 <_puts_r+0x8e>
 80073c4:	290a      	cmp	r1, #10
 80073c6:	d004      	beq.n	80073d2 <_puts_r+0x8e>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	7019      	strb	r1, [r3, #0]
 80073d0:	e7cf      	b.n	8007372 <_puts_r+0x2e>
 80073d2:	4622      	mov	r2, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f854 	bl	8007482 <__swbuf_r>
 80073da:	3001      	adds	r0, #1
 80073dc:	d1c9      	bne.n	8007372 <_puts_r+0x2e>
 80073de:	e7df      	b.n	80073a0 <_puts_r+0x5c>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	250a      	movs	r5, #10
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	6022      	str	r2, [r4, #0]
 80073e8:	701d      	strb	r5, [r3, #0]
 80073ea:	e7db      	b.n	80073a4 <_puts_r+0x60>

080073ec <puts>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <puts+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f7ff bfa7 	b.w	8007344 <_puts_r>
 80073f6:	bf00      	nop
 80073f8:	2000016c 	.word	0x2000016c

080073fc <__sread>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007404:	f000 f8fc 	bl	8007600 <_read_r>
 8007408:	2800      	cmp	r0, #0
 800740a:	bfab      	itete	ge
 800740c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800740e:	89a3      	ldrhlt	r3, [r4, #12]
 8007410:	181b      	addge	r3, r3, r0
 8007412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007416:	bfac      	ite	ge
 8007418:	6563      	strge	r3, [r4, #84]	; 0x54
 800741a:	81a3      	strhlt	r3, [r4, #12]
 800741c:	bd10      	pop	{r4, pc}

0800741e <__swrite>:
 800741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	461f      	mov	r7, r3
 8007424:	898b      	ldrh	r3, [r1, #12]
 8007426:	05db      	lsls	r3, r3, #23
 8007428:	4605      	mov	r5, r0
 800742a:	460c      	mov	r4, r1
 800742c:	4616      	mov	r6, r2
 800742e:	d505      	bpl.n	800743c <__swrite+0x1e>
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	2302      	movs	r3, #2
 8007436:	2200      	movs	r2, #0
 8007438:	f000 f8d0 	bl	80075dc <_lseek_r>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	4628      	mov	r0, r5
 800744e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	f000 b8e7 	b.w	8007624 <_write_r>

08007456 <__sseek>:
 8007456:	b510      	push	{r4, lr}
 8007458:	460c      	mov	r4, r1
 800745a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745e:	f000 f8bd 	bl	80075dc <_lseek_r>
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	bf15      	itete	ne
 8007468:	6560      	strne	r0, [r4, #84]	; 0x54
 800746a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800746e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007472:	81a3      	strheq	r3, [r4, #12]
 8007474:	bf18      	it	ne
 8007476:	81a3      	strhne	r3, [r4, #12]
 8007478:	bd10      	pop	{r4, pc}

0800747a <__sclose>:
 800747a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747e:	f000 b89d 	b.w	80075bc <_close_r>

08007482 <__swbuf_r>:
 8007482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007484:	460e      	mov	r6, r1
 8007486:	4614      	mov	r4, r2
 8007488:	4605      	mov	r5, r0
 800748a:	b118      	cbz	r0, 8007494 <__swbuf_r+0x12>
 800748c:	6a03      	ldr	r3, [r0, #32]
 800748e:	b90b      	cbnz	r3, 8007494 <__swbuf_r+0x12>
 8007490:	f7ff ff22 	bl	80072d8 <__sinit>
 8007494:	69a3      	ldr	r3, [r4, #24]
 8007496:	60a3      	str	r3, [r4, #8]
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	071a      	lsls	r2, r3, #28
 800749c:	d525      	bpl.n	80074ea <__swbuf_r+0x68>
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	b31b      	cbz	r3, 80074ea <__swbuf_r+0x68>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	6922      	ldr	r2, [r4, #16]
 80074a6:	1a98      	subs	r0, r3, r2
 80074a8:	6963      	ldr	r3, [r4, #20]
 80074aa:	b2f6      	uxtb	r6, r6
 80074ac:	4283      	cmp	r3, r0
 80074ae:	4637      	mov	r7, r6
 80074b0:	dc04      	bgt.n	80074bc <__swbuf_r+0x3a>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 fa73 	bl	80079a0 <_fflush_r>
 80074ba:	b9e0      	cbnz	r0, 80074f6 <__swbuf_r+0x74>
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	3b01      	subs	r3, #1
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	701e      	strb	r6, [r3, #0]
 80074ca:	6962      	ldr	r2, [r4, #20]
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d004      	beq.n	80074dc <__swbuf_r+0x5a>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	07db      	lsls	r3, r3, #31
 80074d6:	d506      	bpl.n	80074e6 <__swbuf_r+0x64>
 80074d8:	2e0a      	cmp	r6, #10
 80074da:	d104      	bne.n	80074e6 <__swbuf_r+0x64>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fa5e 	bl	80079a0 <_fflush_r>
 80074e4:	b938      	cbnz	r0, 80074f6 <__swbuf_r+0x74>
 80074e6:	4638      	mov	r0, r7
 80074e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ea:	4621      	mov	r1, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	f000 f805 	bl	80074fc <__swsetup_r>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d0d5      	beq.n	80074a2 <__swbuf_r+0x20>
 80074f6:	f04f 37ff 	mov.w	r7, #4294967295
 80074fa:	e7f4      	b.n	80074e6 <__swbuf_r+0x64>

080074fc <__swsetup_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4b2a      	ldr	r3, [pc, #168]	; (80075a8 <__swsetup_r+0xac>)
 8007500:	4605      	mov	r5, r0
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	460c      	mov	r4, r1
 8007506:	b118      	cbz	r0, 8007510 <__swsetup_r+0x14>
 8007508:	6a03      	ldr	r3, [r0, #32]
 800750a:	b90b      	cbnz	r3, 8007510 <__swsetup_r+0x14>
 800750c:	f7ff fee4 	bl	80072d8 <__sinit>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007516:	0718      	lsls	r0, r3, #28
 8007518:	d422      	bmi.n	8007560 <__swsetup_r+0x64>
 800751a:	06d9      	lsls	r1, r3, #27
 800751c:	d407      	bmi.n	800752e <__swsetup_r+0x32>
 800751e:	2309      	movs	r3, #9
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e034      	b.n	8007598 <__swsetup_r+0x9c>
 800752e:	0758      	lsls	r0, r3, #29
 8007530:	d512      	bpl.n	8007558 <__swsetup_r+0x5c>
 8007532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007534:	b141      	cbz	r1, 8007548 <__swsetup_r+0x4c>
 8007536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800753a:	4299      	cmp	r1, r3
 800753c:	d002      	beq.n	8007544 <__swsetup_r+0x48>
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f8b0 	bl	80076a4 <_free_r>
 8007544:	2300      	movs	r3, #0
 8007546:	6363      	str	r3, [r4, #52]	; 0x34
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	2300      	movs	r3, #0
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f043 0308 	orr.w	r3, r3, #8
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b94b      	cbnz	r3, 8007578 <__swsetup_r+0x7c>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800756a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756e:	d003      	beq.n	8007578 <__swsetup_r+0x7c>
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 fa62 	bl	8007a3c <__smakebuf_r>
 8007578:	89a0      	ldrh	r0, [r4, #12]
 800757a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800757e:	f010 0301 	ands.w	r3, r0, #1
 8007582:	d00a      	beq.n	800759a <__swsetup_r+0x9e>
 8007584:	2300      	movs	r3, #0
 8007586:	60a3      	str	r3, [r4, #8]
 8007588:	6963      	ldr	r3, [r4, #20]
 800758a:	425b      	negs	r3, r3
 800758c:	61a3      	str	r3, [r4, #24]
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	b943      	cbnz	r3, 80075a4 <__swsetup_r+0xa8>
 8007592:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007596:	d1c4      	bne.n	8007522 <__swsetup_r+0x26>
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	0781      	lsls	r1, r0, #30
 800759c:	bf58      	it	pl
 800759e:	6963      	ldrpl	r3, [r4, #20]
 80075a0:	60a3      	str	r3, [r4, #8]
 80075a2:	e7f4      	b.n	800758e <__swsetup_r+0x92>
 80075a4:	2000      	movs	r0, #0
 80075a6:	e7f7      	b.n	8007598 <__swsetup_r+0x9c>
 80075a8:	2000016c 	.word	0x2000016c

080075ac <memset>:
 80075ac:	4402      	add	r2, r0
 80075ae:	4603      	mov	r3, r0
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d100      	bne.n	80075b6 <memset+0xa>
 80075b4:	4770      	bx	lr
 80075b6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ba:	e7f9      	b.n	80075b0 <memset+0x4>

080075bc <_close_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d06      	ldr	r5, [pc, #24]	; (80075d8 <_close_r+0x1c>)
 80075c0:	2300      	movs	r3, #0
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	f7fb fc6f 	bl	8002eaa <_close>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_close_r+0x1a>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_close_r+0x1a>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	20000ad0 	.word	0x20000ad0

080075dc <_lseek_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d07      	ldr	r5, [pc, #28]	; (80075fc <_lseek_r+0x20>)
 80075e0:	4604      	mov	r4, r0
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	602a      	str	r2, [r5, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f7fb fc84 	bl	8002ef8 <_lseek>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_lseek_r+0x1e>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_lseek_r+0x1e>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	20000ad0 	.word	0x20000ad0

08007600 <_read_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4d07      	ldr	r5, [pc, #28]	; (8007620 <_read_r+0x20>)
 8007604:	4604      	mov	r4, r0
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	2200      	movs	r2, #0
 800760c:	602a      	str	r2, [r5, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f7fb fc12 	bl	8002e38 <_read>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_read_r+0x1e>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b103      	cbz	r3, 800761e <_read_r+0x1e>
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20000ad0 	.word	0x20000ad0

08007624 <_write_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d07      	ldr	r5, [pc, #28]	; (8007644 <_write_r+0x20>)
 8007628:	4604      	mov	r4, r0
 800762a:	4608      	mov	r0, r1
 800762c:	4611      	mov	r1, r2
 800762e:	2200      	movs	r2, #0
 8007630:	602a      	str	r2, [r5, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f7fb fc1d 	bl	8002e72 <_write>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_write_r+0x1e>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_write_r+0x1e>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	20000ad0 	.word	0x20000ad0

08007648 <__errno>:
 8007648:	4b01      	ldr	r3, [pc, #4]	; (8007650 <__errno+0x8>)
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	2000016c 	.word	0x2000016c

08007654 <__libc_init_array>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	4d0d      	ldr	r5, [pc, #52]	; (800768c <__libc_init_array+0x38>)
 8007658:	4c0d      	ldr	r4, [pc, #52]	; (8007690 <__libc_init_array+0x3c>)
 800765a:	1b64      	subs	r4, r4, r5
 800765c:	10a4      	asrs	r4, r4, #2
 800765e:	2600      	movs	r6, #0
 8007660:	42a6      	cmp	r6, r4
 8007662:	d109      	bne.n	8007678 <__libc_init_array+0x24>
 8007664:	4d0b      	ldr	r5, [pc, #44]	; (8007694 <__libc_init_array+0x40>)
 8007666:	4c0c      	ldr	r4, [pc, #48]	; (8007698 <__libc_init_array+0x44>)
 8007668:	f000 fa56 	bl	8007b18 <_init>
 800766c:	1b64      	subs	r4, r4, r5
 800766e:	10a4      	asrs	r4, r4, #2
 8007670:	2600      	movs	r6, #0
 8007672:	42a6      	cmp	r6, r4
 8007674:	d105      	bne.n	8007682 <__libc_init_array+0x2e>
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	f855 3b04 	ldr.w	r3, [r5], #4
 800767c:	4798      	blx	r3
 800767e:	3601      	adds	r6, #1
 8007680:	e7ee      	b.n	8007660 <__libc_init_array+0xc>
 8007682:	f855 3b04 	ldr.w	r3, [r5], #4
 8007686:	4798      	blx	r3
 8007688:	3601      	adds	r6, #1
 800768a:	e7f2      	b.n	8007672 <__libc_init_array+0x1e>
 800768c:	08007eb0 	.word	0x08007eb0
 8007690:	08007eb0 	.word	0x08007eb0
 8007694:	08007eb0 	.word	0x08007eb0
 8007698:	08007eb4 	.word	0x08007eb4

0800769c <__retarget_lock_init_recursive>:
 800769c:	4770      	bx	lr

0800769e <__retarget_lock_acquire_recursive>:
 800769e:	4770      	bx	lr

080076a0 <__retarget_lock_release_recursive>:
 80076a0:	4770      	bx	lr
	...

080076a4 <_free_r>:
 80076a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d044      	beq.n	8007734 <_free_r+0x90>
 80076aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ae:	9001      	str	r0, [sp, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f1a1 0404 	sub.w	r4, r1, #4
 80076b6:	bfb8      	it	lt
 80076b8:	18e4      	addlt	r4, r4, r3
 80076ba:	f000 f8df 	bl	800787c <__malloc_lock>
 80076be:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <_free_r+0x94>)
 80076c0:	9801      	ldr	r0, [sp, #4]
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	b933      	cbnz	r3, 80076d4 <_free_r+0x30>
 80076c6:	6063      	str	r3, [r4, #4]
 80076c8:	6014      	str	r4, [r2, #0]
 80076ca:	b003      	add	sp, #12
 80076cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d0:	f000 b8da 	b.w	8007888 <__malloc_unlock>
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	d908      	bls.n	80076ea <_free_r+0x46>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf01      	itttt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	1949      	addeq	r1, r1, r5
 80076e6:	6021      	streq	r1, [r4, #0]
 80076e8:	e7ed      	b.n	80076c6 <_free_r+0x22>
 80076ea:	461a      	mov	r2, r3
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b10b      	cbz	r3, 80076f4 <_free_r+0x50>
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	d9fa      	bls.n	80076ea <_free_r+0x46>
 80076f4:	6811      	ldr	r1, [r2, #0]
 80076f6:	1855      	adds	r5, r2, r1
 80076f8:	42a5      	cmp	r5, r4
 80076fa:	d10b      	bne.n	8007714 <_free_r+0x70>
 80076fc:	6824      	ldr	r4, [r4, #0]
 80076fe:	4421      	add	r1, r4
 8007700:	1854      	adds	r4, r2, r1
 8007702:	42a3      	cmp	r3, r4
 8007704:	6011      	str	r1, [r2, #0]
 8007706:	d1e0      	bne.n	80076ca <_free_r+0x26>
 8007708:	681c      	ldr	r4, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	6053      	str	r3, [r2, #4]
 800770e:	440c      	add	r4, r1
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	e7da      	b.n	80076ca <_free_r+0x26>
 8007714:	d902      	bls.n	800771c <_free_r+0x78>
 8007716:	230c      	movs	r3, #12
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	e7d6      	b.n	80076ca <_free_r+0x26>
 800771c:	6825      	ldr	r5, [r4, #0]
 800771e:	1961      	adds	r1, r4, r5
 8007720:	428b      	cmp	r3, r1
 8007722:	bf04      	itt	eq
 8007724:	6819      	ldreq	r1, [r3, #0]
 8007726:	685b      	ldreq	r3, [r3, #4]
 8007728:	6063      	str	r3, [r4, #4]
 800772a:	bf04      	itt	eq
 800772c:	1949      	addeq	r1, r1, r5
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	6054      	str	r4, [r2, #4]
 8007732:	e7ca      	b.n	80076ca <_free_r+0x26>
 8007734:	b003      	add	sp, #12
 8007736:	bd30      	pop	{r4, r5, pc}
 8007738:	20000ad8 	.word	0x20000ad8

0800773c <sbrk_aligned>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4e0e      	ldr	r6, [pc, #56]	; (8007778 <sbrk_aligned+0x3c>)
 8007740:	460c      	mov	r4, r1
 8007742:	6831      	ldr	r1, [r6, #0]
 8007744:	4605      	mov	r5, r0
 8007746:	b911      	cbnz	r1, 800774e <sbrk_aligned+0x12>
 8007748:	f000 f9d6 	bl	8007af8 <_sbrk_r>
 800774c:	6030      	str	r0, [r6, #0]
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f9d1 	bl	8007af8 <_sbrk_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d00a      	beq.n	8007770 <sbrk_aligned+0x34>
 800775a:	1cc4      	adds	r4, r0, #3
 800775c:	f024 0403 	bic.w	r4, r4, #3
 8007760:	42a0      	cmp	r0, r4
 8007762:	d007      	beq.n	8007774 <sbrk_aligned+0x38>
 8007764:	1a21      	subs	r1, r4, r0
 8007766:	4628      	mov	r0, r5
 8007768:	f000 f9c6 	bl	8007af8 <_sbrk_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d101      	bne.n	8007774 <sbrk_aligned+0x38>
 8007770:	f04f 34ff 	mov.w	r4, #4294967295
 8007774:	4620      	mov	r0, r4
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	20000adc 	.word	0x20000adc

0800777c <_malloc_r>:
 800777c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007780:	1ccd      	adds	r5, r1, #3
 8007782:	f025 0503 	bic.w	r5, r5, #3
 8007786:	3508      	adds	r5, #8
 8007788:	2d0c      	cmp	r5, #12
 800778a:	bf38      	it	cc
 800778c:	250c      	movcc	r5, #12
 800778e:	2d00      	cmp	r5, #0
 8007790:	4607      	mov	r7, r0
 8007792:	db01      	blt.n	8007798 <_malloc_r+0x1c>
 8007794:	42a9      	cmp	r1, r5
 8007796:	d905      	bls.n	80077a4 <_malloc_r+0x28>
 8007798:	230c      	movs	r3, #12
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	2600      	movs	r6, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007878 <_malloc_r+0xfc>
 80077a8:	f000 f868 	bl	800787c <__malloc_lock>
 80077ac:	f8d8 3000 	ldr.w	r3, [r8]
 80077b0:	461c      	mov	r4, r3
 80077b2:	bb5c      	cbnz	r4, 800780c <_malloc_r+0x90>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ffc0 	bl	800773c <sbrk_aligned>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	4604      	mov	r4, r0
 80077c0:	d155      	bne.n	800786e <_malloc_r+0xf2>
 80077c2:	f8d8 4000 	ldr.w	r4, [r8]
 80077c6:	4626      	mov	r6, r4
 80077c8:	2e00      	cmp	r6, #0
 80077ca:	d145      	bne.n	8007858 <_malloc_r+0xdc>
 80077cc:	2c00      	cmp	r4, #0
 80077ce:	d048      	beq.n	8007862 <_malloc_r+0xe6>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	4631      	mov	r1, r6
 80077d4:	4638      	mov	r0, r7
 80077d6:	eb04 0903 	add.w	r9, r4, r3
 80077da:	f000 f98d 	bl	8007af8 <_sbrk_r>
 80077de:	4581      	cmp	r9, r0
 80077e0:	d13f      	bne.n	8007862 <_malloc_r+0xe6>
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	1a6d      	subs	r5, r5, r1
 80077e6:	4629      	mov	r1, r5
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ffa7 	bl	800773c <sbrk_aligned>
 80077ee:	3001      	adds	r0, #1
 80077f0:	d037      	beq.n	8007862 <_malloc_r+0xe6>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	442b      	add	r3, r5
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	f8d8 3000 	ldr.w	r3, [r8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d038      	beq.n	8007872 <_malloc_r+0xf6>
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	42a2      	cmp	r2, r4
 8007804:	d12b      	bne.n	800785e <_malloc_r+0xe2>
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	e00f      	b.n	800782c <_malloc_r+0xb0>
 800780c:	6822      	ldr	r2, [r4, #0]
 800780e:	1b52      	subs	r2, r2, r5
 8007810:	d41f      	bmi.n	8007852 <_malloc_r+0xd6>
 8007812:	2a0b      	cmp	r2, #11
 8007814:	d917      	bls.n	8007846 <_malloc_r+0xca>
 8007816:	1961      	adds	r1, r4, r5
 8007818:	42a3      	cmp	r3, r4
 800781a:	6025      	str	r5, [r4, #0]
 800781c:	bf18      	it	ne
 800781e:	6059      	strne	r1, [r3, #4]
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	bf08      	it	eq
 8007824:	f8c8 1000 	streq.w	r1, [r8]
 8007828:	5162      	str	r2, [r4, r5]
 800782a:	604b      	str	r3, [r1, #4]
 800782c:	4638      	mov	r0, r7
 800782e:	f104 060b 	add.w	r6, r4, #11
 8007832:	f000 f829 	bl	8007888 <__malloc_unlock>
 8007836:	f026 0607 	bic.w	r6, r6, #7
 800783a:	1d23      	adds	r3, r4, #4
 800783c:	1af2      	subs	r2, r6, r3
 800783e:	d0ae      	beq.n	800779e <_malloc_r+0x22>
 8007840:	1b9b      	subs	r3, r3, r6
 8007842:	50a3      	str	r3, [r4, r2]
 8007844:	e7ab      	b.n	800779e <_malloc_r+0x22>
 8007846:	42a3      	cmp	r3, r4
 8007848:	6862      	ldr	r2, [r4, #4]
 800784a:	d1dd      	bne.n	8007808 <_malloc_r+0x8c>
 800784c:	f8c8 2000 	str.w	r2, [r8]
 8007850:	e7ec      	b.n	800782c <_malloc_r+0xb0>
 8007852:	4623      	mov	r3, r4
 8007854:	6864      	ldr	r4, [r4, #4]
 8007856:	e7ac      	b.n	80077b2 <_malloc_r+0x36>
 8007858:	4634      	mov	r4, r6
 800785a:	6876      	ldr	r6, [r6, #4]
 800785c:	e7b4      	b.n	80077c8 <_malloc_r+0x4c>
 800785e:	4613      	mov	r3, r2
 8007860:	e7cc      	b.n	80077fc <_malloc_r+0x80>
 8007862:	230c      	movs	r3, #12
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	4638      	mov	r0, r7
 8007868:	f000 f80e 	bl	8007888 <__malloc_unlock>
 800786c:	e797      	b.n	800779e <_malloc_r+0x22>
 800786e:	6025      	str	r5, [r4, #0]
 8007870:	e7dc      	b.n	800782c <_malloc_r+0xb0>
 8007872:	605b      	str	r3, [r3, #4]
 8007874:	deff      	udf	#255	; 0xff
 8007876:	bf00      	nop
 8007878:	20000ad8 	.word	0x20000ad8

0800787c <__malloc_lock>:
 800787c:	4801      	ldr	r0, [pc, #4]	; (8007884 <__malloc_lock+0x8>)
 800787e:	f7ff bf0e 	b.w	800769e <__retarget_lock_acquire_recursive>
 8007882:	bf00      	nop
 8007884:	20000ad4 	.word	0x20000ad4

08007888 <__malloc_unlock>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__malloc_unlock+0x8>)
 800788a:	f7ff bf09 	b.w	80076a0 <__retarget_lock_release_recursive>
 800788e:	bf00      	nop
 8007890:	20000ad4 	.word	0x20000ad4

08007894 <__sflush_r>:
 8007894:	898a      	ldrh	r2, [r1, #12]
 8007896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789a:	4605      	mov	r5, r0
 800789c:	0710      	lsls	r0, r2, #28
 800789e:	460c      	mov	r4, r1
 80078a0:	d458      	bmi.n	8007954 <__sflush_r+0xc0>
 80078a2:	684b      	ldr	r3, [r1, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc05      	bgt.n	80078b4 <__sflush_r+0x20>
 80078a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dc02      	bgt.n	80078b4 <__sflush_r+0x20>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d0f9      	beq.n	80078ae <__sflush_r+0x1a>
 80078ba:	2300      	movs	r3, #0
 80078bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078c0:	682f      	ldr	r7, [r5, #0]
 80078c2:	6a21      	ldr	r1, [r4, #32]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	d032      	beq.n	800792e <__sflush_r+0x9a>
 80078c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	075a      	lsls	r2, r3, #29
 80078ce:	d505      	bpl.n	80078dc <__sflush_r+0x48>
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	1ac0      	subs	r0, r0, r3
 80078d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078d6:	b10b      	cbz	r3, 80078dc <__sflush_r+0x48>
 80078d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078da:	1ac0      	subs	r0, r0, r3
 80078dc:	2300      	movs	r3, #0
 80078de:	4602      	mov	r2, r0
 80078e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078e2:	6a21      	ldr	r1, [r4, #32]
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b0      	blx	r6
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	d106      	bne.n	80078fc <__sflush_r+0x68>
 80078ee:	6829      	ldr	r1, [r5, #0]
 80078f0:	291d      	cmp	r1, #29
 80078f2:	d82b      	bhi.n	800794c <__sflush_r+0xb8>
 80078f4:	4a29      	ldr	r2, [pc, #164]	; (800799c <__sflush_r+0x108>)
 80078f6:	410a      	asrs	r2, r1
 80078f8:	07d6      	lsls	r6, r2, #31
 80078fa:	d427      	bmi.n	800794c <__sflush_r+0xb8>
 80078fc:	2200      	movs	r2, #0
 80078fe:	6062      	str	r2, [r4, #4]
 8007900:	04d9      	lsls	r1, r3, #19
 8007902:	6922      	ldr	r2, [r4, #16]
 8007904:	6022      	str	r2, [r4, #0]
 8007906:	d504      	bpl.n	8007912 <__sflush_r+0x7e>
 8007908:	1c42      	adds	r2, r0, #1
 800790a:	d101      	bne.n	8007910 <__sflush_r+0x7c>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b903      	cbnz	r3, 8007912 <__sflush_r+0x7e>
 8007910:	6560      	str	r0, [r4, #84]	; 0x54
 8007912:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007914:	602f      	str	r7, [r5, #0]
 8007916:	2900      	cmp	r1, #0
 8007918:	d0c9      	beq.n	80078ae <__sflush_r+0x1a>
 800791a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800791e:	4299      	cmp	r1, r3
 8007920:	d002      	beq.n	8007928 <__sflush_r+0x94>
 8007922:	4628      	mov	r0, r5
 8007924:	f7ff febe 	bl	80076a4 <_free_r>
 8007928:	2000      	movs	r0, #0
 800792a:	6360      	str	r0, [r4, #52]	; 0x34
 800792c:	e7c0      	b.n	80078b0 <__sflush_r+0x1c>
 800792e:	2301      	movs	r3, #1
 8007930:	4628      	mov	r0, r5
 8007932:	47b0      	blx	r6
 8007934:	1c41      	adds	r1, r0, #1
 8007936:	d1c8      	bne.n	80078ca <__sflush_r+0x36>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0c5      	beq.n	80078ca <__sflush_r+0x36>
 800793e:	2b1d      	cmp	r3, #29
 8007940:	d001      	beq.n	8007946 <__sflush_r+0xb2>
 8007942:	2b16      	cmp	r3, #22
 8007944:	d101      	bne.n	800794a <__sflush_r+0xb6>
 8007946:	602f      	str	r7, [r5, #0]
 8007948:	e7b1      	b.n	80078ae <__sflush_r+0x1a>
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	e7ad      	b.n	80078b0 <__sflush_r+0x1c>
 8007954:	690f      	ldr	r7, [r1, #16]
 8007956:	2f00      	cmp	r7, #0
 8007958:	d0a9      	beq.n	80078ae <__sflush_r+0x1a>
 800795a:	0793      	lsls	r3, r2, #30
 800795c:	680e      	ldr	r6, [r1, #0]
 800795e:	bf08      	it	eq
 8007960:	694b      	ldreq	r3, [r1, #20]
 8007962:	600f      	str	r7, [r1, #0]
 8007964:	bf18      	it	ne
 8007966:	2300      	movne	r3, #0
 8007968:	eba6 0807 	sub.w	r8, r6, r7
 800796c:	608b      	str	r3, [r1, #8]
 800796e:	f1b8 0f00 	cmp.w	r8, #0
 8007972:	dd9c      	ble.n	80078ae <__sflush_r+0x1a>
 8007974:	6a21      	ldr	r1, [r4, #32]
 8007976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007978:	4643      	mov	r3, r8
 800797a:	463a      	mov	r2, r7
 800797c:	4628      	mov	r0, r5
 800797e:	47b0      	blx	r6
 8007980:	2800      	cmp	r0, #0
 8007982:	dc06      	bgt.n	8007992 <__sflush_r+0xfe>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e78e      	b.n	80078b0 <__sflush_r+0x1c>
 8007992:	4407      	add	r7, r0
 8007994:	eba8 0800 	sub.w	r8, r8, r0
 8007998:	e7e9      	b.n	800796e <__sflush_r+0xda>
 800799a:	bf00      	nop
 800799c:	dfbffffe 	.word	0xdfbffffe

080079a0 <_fflush_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b913      	cbnz	r3, 80079b0 <_fflush_r+0x10>
 80079aa:	2500      	movs	r5, #0
 80079ac:	4628      	mov	r0, r5
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	b118      	cbz	r0, 80079ba <_fflush_r+0x1a>
 80079b2:	6a03      	ldr	r3, [r0, #32]
 80079b4:	b90b      	cbnz	r3, 80079ba <_fflush_r+0x1a>
 80079b6:	f7ff fc8f 	bl	80072d8 <__sinit>
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f3      	beq.n	80079aa <_fflush_r+0xa>
 80079c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079c4:	07d0      	lsls	r0, r2, #31
 80079c6:	d404      	bmi.n	80079d2 <_fflush_r+0x32>
 80079c8:	0599      	lsls	r1, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_fflush_r+0x32>
 80079cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ce:	f7ff fe66 	bl	800769e <__retarget_lock_acquire_recursive>
 80079d2:	4628      	mov	r0, r5
 80079d4:	4621      	mov	r1, r4
 80079d6:	f7ff ff5d 	bl	8007894 <__sflush_r>
 80079da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079dc:	07da      	lsls	r2, r3, #31
 80079de:	4605      	mov	r5, r0
 80079e0:	d4e4      	bmi.n	80079ac <_fflush_r+0xc>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	059b      	lsls	r3, r3, #22
 80079e6:	d4e1      	bmi.n	80079ac <_fflush_r+0xc>
 80079e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ea:	f7ff fe59 	bl	80076a0 <__retarget_lock_release_recursive>
 80079ee:	e7dd      	b.n	80079ac <_fflush_r+0xc>

080079f0 <__swhatbuf_r>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	b096      	sub	sp, #88	; 0x58
 80079fc:	4615      	mov	r5, r2
 80079fe:	461e      	mov	r6, r3
 8007a00:	da0d      	bge.n	8007a1e <__swhatbuf_r+0x2e>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	bf0c      	ite	eq
 8007a0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a12:	2340      	movne	r3, #64	; 0x40
 8007a14:	2000      	movs	r0, #0
 8007a16:	6031      	str	r1, [r6, #0]
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	b016      	add	sp, #88	; 0x58
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f000 f848 	bl	8007ab4 <_fstat_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dbec      	blt.n	8007a02 <__swhatbuf_r+0x12>
 8007a28:	9901      	ldr	r1, [sp, #4]
 8007a2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a32:	4259      	negs	r1, r3
 8007a34:	4159      	adcs	r1, r3
 8007a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3a:	e7eb      	b.n	8007a14 <__swhatbuf_r+0x24>

08007a3c <__smakebuf_r>:
 8007a3c:	898b      	ldrh	r3, [r1, #12]
 8007a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a40:	079d      	lsls	r5, r3, #30
 8007a42:	4606      	mov	r6, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	d507      	bpl.n	8007a58 <__smakebuf_r+0x1c>
 8007a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	2301      	movs	r3, #1
 8007a52:	6163      	str	r3, [r4, #20]
 8007a54:	b002      	add	sp, #8
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	ab01      	add	r3, sp, #4
 8007a5a:	466a      	mov	r2, sp
 8007a5c:	f7ff ffc8 	bl	80079f0 <__swhatbuf_r>
 8007a60:	9900      	ldr	r1, [sp, #0]
 8007a62:	4605      	mov	r5, r0
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7ff fe89 	bl	800777c <_malloc_r>
 8007a6a:	b948      	cbnz	r0, 8007a80 <__smakebuf_r+0x44>
 8007a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a70:	059a      	lsls	r2, r3, #22
 8007a72:	d4ef      	bmi.n	8007a54 <__smakebuf_r+0x18>
 8007a74:	f023 0303 	bic.w	r3, r3, #3
 8007a78:	f043 0302 	orr.w	r3, r3, #2
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	e7e3      	b.n	8007a48 <__smakebuf_r+0xc>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	6020      	str	r0, [r4, #0]
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	9b00      	ldr	r3, [sp, #0]
 8007a8c:	6163      	str	r3, [r4, #20]
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	6120      	str	r0, [r4, #16]
 8007a92:	b15b      	cbz	r3, 8007aac <__smakebuf_r+0x70>
 8007a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f81d 	bl	8007ad8 <_isatty_r>
 8007a9e:	b128      	cbz	r0, 8007aac <__smakebuf_r+0x70>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	431d      	orrs	r5, r3
 8007ab0:	81a5      	strh	r5, [r4, #12]
 8007ab2:	e7cf      	b.n	8007a54 <__smakebuf_r+0x18>

08007ab4 <_fstat_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	; (8007ad4 <_fstat_r+0x20>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	f7fb f9fe 	bl	8002ec2 <_fstat>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	d102      	bne.n	8007ad0 <_fstat_r+0x1c>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	b103      	cbz	r3, 8007ad0 <_fstat_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000ad0 	.word	0x20000ad0

08007ad8 <_isatty_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d06      	ldr	r5, [pc, #24]	; (8007af4 <_isatty_r+0x1c>)
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f7fb f9fd 	bl	8002ee2 <_isatty>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_isatty_r+0x1a>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_isatty_r+0x1a>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	20000ad0 	.word	0x20000ad0

08007af8 <_sbrk_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	; (8007b14 <_sbrk_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7fb fa06 	bl	8002f14 <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_sbrk_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_sbrk_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20000ad0 	.word	0x20000ad0

08007b18 <_init>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr

08007b24 <_fini>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr
