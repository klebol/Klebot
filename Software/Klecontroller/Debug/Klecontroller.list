
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f4  080089f4  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089fc  080089fc  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a00  08008a00  00018a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08008a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  20000188  08008b8c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08008b8c  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001778c  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045ba  00000000  00000000  00037987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cc  00000000  00000000  0003d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc06  00000000  00000000  0003e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000239cd  00000000  00000000  0005b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fea2  00000000  00000000  0007ee57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006644  00000000  00000000  0011ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00125340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000188 	.word	0x20000188
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085f8 	.word	0x080085f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	080085f8 	.word	0x080085f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Programs_DiodeTestSendOnCmd>:

//
// -- Setting LED on/off --
//
static void Programs_DiodeTestSendOnCmd(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000592:	23d0      	movs	r3, #208	; 0xd0
 8000594:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_ON;
 8000596:	2320      	movs	r3, #32
 8000598:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fa0e 	bl	80019c0 <Radio_TxBufferPut>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Programs_DiodeTestSendOffCmd>:

static void Programs_DiodeTestSendOffCmd(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 80005b2:	23d0      	movs	r3, #208	; 0xd0
 80005b4:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_OFF;
 80005b6:	2321      	movs	r3, #33	; 0x21
 80005b8:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f9fe 	bl	80019c0 <Radio_TxBufferPut>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <Programs_DiodeTestProgram>:
//
// -- Main Diode Test Program for Controller --
//

Programs_status_t Programs_DiodeTestProgram(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	/*First entry, code which will be performed only at the first entry to this program after launching it */
	if(0 == FirstEntry)
 80005d0:	4b36      	ldr	r3, [pc, #216]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10f      	bne.n	80005f8 <Programs_DiodeTestProgram+0x2c>
	{
		/* Clearing display */
		OLED_ClearBuffer(BLACK);
 80005d8:	2000      	movs	r0, #0
 80005da:	f002 fca3 	bl	8002f24 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 80005de:	2100      	movs	r1, #0
 80005e0:	2000      	movs	r0, #0
 80005e2:	f002 fbe5 	bl	8002db0 <OLED_MoveCursor>
		OLED_WriteString("Launching Diode Test ...", WHITE);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4831      	ldr	r0, [pc, #196]	; (80006b0 <Programs_DiodeTestProgram+0xe4>)
 80005ea:	f002 fd65 	bl	80030b8 <OLED_WriteString>
		OLED_SendBuffer();
 80005ee:	f002 fc6d 	bl	8002ecc <OLED_SendBuffer>
		FirstEntry = 1;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
	}

	/* Program exit process */
	if(1 == DiodeTestDatabase.ProgramExitFlag)
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d125      	bne.n	800064c <Programs_DiodeTestProgram+0x80>
	{

		/* If there was an exit ACK, CurrentRobotProgramID was cleared by parser */
		if(NO_PROGRAM_SET == Programs_GetCurrentRobotProgramID() )
 8000600:	f000 f940 	bl	8000884 <Programs_GetCurrentRobotProgramID>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10a      	bne.n	8000620 <Programs_DiodeTestProgram+0x54>
		{
			DiodeTestDatabase.ProgramExitFlag = 0;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
			DiodeTestDatabase.DiodeState = 0;
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
			return PROGRAM_COMPLETED;
 800061c:	2301      	movs	r3, #1
 800061e:	e042      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
		}
		/* If ACK have not came before timeout, exit program with error */
		else if(HAL_GetTick() - TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
 8000620:	f003 f840 	bl	80036a4 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <Programs_DiodeTestProgram+0xec>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000630:	d90c      	bls.n	800064c <Programs_DiodeTestProgram+0x80>
		{
			DiodeTestDatabase.ProgramExitFlag = 0;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	705a      	strb	r2, [r3, #1]
			DiodeTestDatabase.DiodeState = 0;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
			Programs_ClearCurrentRobotProgramID();
 8000644:	f000 f92a 	bl	800089c <Programs_ClearCurrentRobotProgramID>
			return PROGRAM_EXIT_ERROR;
 8000648:	2304      	movs	r3, #4
 800064a:	e02c      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
	}

	/* Program launch process */
	/* Check if we had response from robot that program has properly started
	 * (parser is writing CurrentRobotProgramID if robot sends start ACK*/
	if(DIODE_TEST != Programs_GetCurrentRobotProgramID() )
 800064c:	f000 f91a 	bl	8000884 <Programs_GetCurrentRobotProgramID>
 8000650:	4603      	mov	r3, r0
 8000652:	2bd0      	cmp	r3, #208	; 0xd0
 8000654:	d00f      	beq.n	8000676 <Programs_DiodeTestProgram+0xaa>
	{
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 8000656:	f003 f825 	bl	80036a4 <HAL_GetTick>
 800065a:	4602      	mov	r2, r0
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <Programs_DiodeTestProgram+0xec>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000666:	d904      	bls.n	8000672 <Programs_DiodeTestProgram+0xa6>
		{
			FirstEntry = 0;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			return PROGRAM_LAUNCH_ERROR;
 800066e:	2303      	movs	r3, #3
 8000670:	e019      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
		}
		else
		{
			return PROGRAM_IN_PROGRESS;
 8000672:	2302      	movs	r3, #2
 8000674:	e017      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
		}
	}

	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 8000676:	2000      	movs	r0, #0
 8000678:	f002 fc54 	bl	8002f24 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f002 fb96 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteString("LED STATE:", WHITE);
 8000684:	2101      	movs	r1, #1
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <Programs_DiodeTestProgram+0xf0>)
 8000688:	f002 fd16 	bl	80030b8 <OLED_WriteString>
	OLED_MoveCursor(0, 16);
 800068c:	2110      	movs	r1, #16
 800068e:	2000      	movs	r0, #0
 8000690:	f002 fb8e 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteInt(DiodeTestDatabase.DiodeState, WHITE);
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fd32 	bl	8003104 <OLED_WriteInt>
	OLED_SendBuffer();
 80006a0:	f002 fc14 	bl	8002ecc <OLED_SendBuffer>

	return PROGRAM_IN_PROGRESS;
 80006a4:	2302      	movs	r3, #2
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001ac 	.word	0x200001ac
 80006b0:	08008610 	.word	0x08008610
 80006b4:	200001a4 	.word	0x200001a4
 80006b8:	200001a8 	.word	0x200001a8
 80006bc:	0800862c 	.word	0x0800862c

080006c0 <Programs_DiodeTestSet>:
//
// -- Program start/exit --
//

void Programs_DiodeTestSet(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	/* Send start command to robot */
	Programs_SendProgramStartCommand(DIODE_TEST);
 80006c4:	20d0      	movs	r0, #208	; 0xd0
 80006c6:	f000 f8a5 	bl	8000814 <Programs_SendProgramStartCommand>
	/* Set this program in this device */
	Programs_SetProgram(Programs_DiodeTestProgram);
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <Programs_DiodeTestSet+0x38>)
 80006cc:	f000 f86a 	bl	80007a4 <Programs_SetProgram>
	/* Setting proper buttons funcionality for this program */
	Inputs_ClearButtonsCallbacks();
 80006d0:	f000 fd12 	bl	80010f8 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Programs_DiodeTestSendOnCmd, &Programs_DiodeTestExitProgram);
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <Programs_DiodeTestSet+0x3c>)
 80006d6:	490a      	ldr	r1, [pc, #40]	; (8000700 <Programs_DiodeTestSet+0x40>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fcc7 	bl	800106c <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, &Programs_DiodeTestSendOffCmd, NULL);
 80006de:	2200      	movs	r2, #0
 80006e0:	4908      	ldr	r1, [pc, #32]	; (8000704 <Programs_DiodeTestSet+0x44>)
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fcc2 	bl	800106c <Inputs_ButtonsRegisterCallback>
	/* Timestamp for counting timeout for program launch on Klebot */
	TimeoutStamp = HAL_GetTick();
 80006e8:	f002 ffdc 	bl	80036a4 <HAL_GetTick>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <Programs_DiodeTestSet+0x48>)
 80006f0:	6013      	str	r3, [r2, #0]
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	080005cd 	.word	0x080005cd
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	0800058d 	.word	0x0800058d
 8000704:	080005ad 	.word	0x080005ad
 8000708:	200001a8 	.word	0x200001a8

0800070c <Programs_DiodeTestExitProgram>:

void Programs_DiodeTestExitProgram(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	DiodeTestDatabase.ProgramExitFlag = 1;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <Programs_DiodeTestExitProgram+0x20>)
 8000712:	2201      	movs	r2, #1
 8000714:	705a      	strb	r2, [r3, #1]
	Programs_SendProgramExitCommand(DIODE_TEST);
 8000716:	20d0      	movs	r0, #208	; 0xd0
 8000718:	f000 f890 	bl	800083c <Programs_SendProgramExitCommand>
	/* Timestamp for counting timeout for program exit on Klebot */
	TimeoutStamp = HAL_GetTick();
 800071c:	f002 ffc2 	bl	80036a4 <HAL_GetTick>
 8000720:	4603      	mov	r3, r0
 8000722:	4a03      	ldr	r2, [pc, #12]	; (8000730 <Programs_DiodeTestExitProgram+0x24>)
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001a4 	.word	0x200001a4
 8000730:	200001a8 	.word	0x200001a8

08000734 <Programs_DiodeTestParser>:
//
// -- Program Parser --
//

void Programs_DiodeTestParser(uint8_t *command, uint8_t length)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b22      	cmp	r3, #34	; 0x22
 800074a:	d011      	beq.n	8000770 <Programs_DiodeTestParser+0x3c>
 800074c:	2b22      	cmp	r3, #34	; 0x22
 800074e:	dc20      	bgt.n	8000792 <Programs_DiodeTestParser+0x5e>
 8000750:	2b10      	cmp	r3, #16
 8000752:	d002      	beq.n	800075a <Programs_DiodeTestParser+0x26>
 8000754:	2b11      	cmp	r3, #17
 8000756:	d013      	beq.n	8000780 <Programs_DiodeTestParser+0x4c>
			Programs_ClearCurrentRobotProgramID();
		}

	default:

		break;
 8000758:	e01b      	b.n	8000792 <Programs_DiodeTestParser+0x5e>
		CurrentByte++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2bf0      	cmp	r3, #240	; 0xf0
 8000766:	d116      	bne.n	8000796 <Programs_DiodeTestParser+0x62>
			Programs_SetCurrentRobotProgramID(DIODE_TEST);				//ack that program has started
 8000768:	20d0      	movs	r0, #208	; 0xd0
 800076a:	f000 f87b 	bl	8000864 <Programs_SetCurrentRobotProgramID>
		break;
 800076e:	e012      	b.n	8000796 <Programs_DiodeTestParser+0x62>
		CurrentByte++;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
		DiodeTestDatabase.DiodeState = *CurrentByte;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <Programs_DiodeTestParser+0x6c>)
 800077c:	701a      	strb	r2, [r3, #0]
		break;
 800077e:	e00b      	b.n	8000798 <Programs_DiodeTestParser+0x64>
		CurrentByte++;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2bf0      	cmp	r3, #240	; 0xf0
 800078c:	d101      	bne.n	8000792 <Programs_DiodeTestParser+0x5e>
			Programs_ClearCurrentRobotProgramID();
 800078e:	f000 f885 	bl	800089c <Programs_ClearCurrentRobotProgramID>
		break;
 8000792:	bf00      	nop
 8000794:	e000      	b.n	8000798 <Programs_DiodeTestParser+0x64>
		break;
 8000796:	bf00      	nop
	}
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001a4 	.word	0x200001a4

080007a4 <Programs_SetProgram>:
// -- General functions to manage programs --
//

/* Function for setting current pointer to program */
Programs_error_t Programs_SetProgram(uint8_t (*Program)(void))
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToPerform)
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <Programs_SetProgram+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d104      	bne.n	80007be <Programs_SetProgram+0x1a>
	{
		ProgramToPerform = Program;
 80007b4:	4a05      	ldr	r2, [pc, #20]	; (80007cc <Programs_SetProgram+0x28>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
		return PROGRAMS_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <Programs_SetProgram+0x1c>
	}
	else
	{
		return PROGRAMS_ERROR;
 80007be:	2301      	movs	r3, #1
	}
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	200001b0 	.word	0x200001b0

080007d0 <Programs_ClearProgram>:
{
	return ProgramToPerform;
}

void Programs_ClearProgram(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	ProgramToPerform = NULL;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <Programs_ClearProgram+0x14>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	200001b0 	.word	0x200001b0

080007e8 <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	Programs_status_t status;
	/* If there is a program to perform... */
	if(NULL != ProgramToPerform)
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <Programs_PerformProgram+0x28>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d005      	beq.n	8000802 <Programs_PerformProgram+0x1a>
	{
	/* Perform it and return it's status */
		status = ProgramToPerform();
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <Programs_PerformProgram+0x28>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4798      	blx	r3
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	e001      	b.n	8000806 <Programs_PerformProgram+0x1e>
	}
	else
	{
		status = NO_PROGRAM_SET;
 8000802:	2300      	movs	r3, #0
 8000804:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8000806:	79fb      	ldrb	r3, [r7, #7]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200001b0 	.word	0x200001b0

08000814 <Programs_SendProgramStartCommand>:
//
//	-- Sending programs start/exit commands --
//

Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	733b      	strb	r3, [r7, #12]
	Buffer[1] = START_PROGRAM;
 8000822:	2310      	movs	r3, #16
 8000824:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2102      	movs	r1, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f001 f8c7 	bl	80019c0 <Radio_TxBufferPut>
 8000832:	4603      	mov	r3, r0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <Programs_SendProgramExitCommand>:

Programs_error_t Programs_SendProgramExitCommand(uint8_t ProgramID)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	733b      	strb	r3, [r7, #12]
	Buffer[1] = EXIT_PROGRAM;
 800084a:	2311      	movs	r3, #17
 800084c:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f8b3 	bl	80019c0 <Radio_TxBufferPut>
 800085a:	4603      	mov	r3, r0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Programs_SetCurrentRobotProgramID>:
//
//	-- Program which is currently running on robot identifier --
//

void Programs_SetCurrentRobotProgramID(uint8_t ID)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	CurrentRobotProgramID = ID;
 800086e:	4a04      	ldr	r2, [pc, #16]	; (8000880 <Programs_SetCurrentRobotProgramID+0x1c>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	7013      	strb	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	200001b4 	.word	0x200001b4

08000884 <Programs_GetCurrentRobotProgramID>:

uint8_t Programs_GetCurrentRobotProgramID(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	return CurrentRobotProgramID;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <Programs_GetCurrentRobotProgramID+0x14>)
 800088a:	781b      	ldrb	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200001b4 	.word	0x200001b4

0800089c <Programs_ClearCurrentRobotProgramID>:

void Programs_ClearCurrentRobotProgramID(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	CurrentRobotProgramID = NO_PROGRAM_SET;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <Programs_ClearCurrentRobotProgramID+0x14>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	200001b4 	.word	0x200001b4

080008b4 <TestBlinkProgram>:




Programs_status_t TestBlinkProgram(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	static uint32_t LastTick;
	static uint8_t state = 0;
	static uint8_t blinks = 0;


	if(0 == FirstEntry)
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <TestBlinkProgram+0xc4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d114      	bne.n	80008ea <TestBlinkProgram+0x36>
	{
		OLED_ClearBuffer(BLACK);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f002 fb2f 	bl	8002f24 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 fa71 	bl	8002db0 <OLED_MoveCursor>
		OLED_WriteString("Blinks:",WHITE);
 80008ce:	2101      	movs	r1, #1
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <TestBlinkProgram+0xc8>)
 80008d2:	f002 fbf1 	bl	80030b8 <OLED_WriteString>
		LastTick = HAL_GetTick();
 80008d6:	f002 fee5 	bl	80036a4 <HAL_GetTick>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <TestBlinkProgram+0xcc>)
 80008de:	6013      	str	r3, [r2, #0]
		OLED_SendBuffer();
 80008e0:	f002 faf4 	bl	8002ecc <OLED_SendBuffer>
		FirstEntry = 1;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <TestBlinkProgram+0xc4>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]





	if(HAL_GetTick() - LastTick > 1000)
 80008ea:	f002 fedb 	bl	80036a4 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <TestBlinkProgram+0xcc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008fa:	d934      	bls.n	8000966 <TestBlinkProgram+0xb2>
	{
		switch(state)
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <TestBlinkProgram+0xd0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <TestBlinkProgram+0x56>
 8000904:	2b01      	cmp	r3, #1
 8000906:	d00e      	beq.n	8000926 <TestBlinkProgram+0x72>
 8000908:	e02d      	b.n	8000966 <TestBlinkProgram+0xb2>
		{
		case 0:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	2104      	movs	r1, #4
 800090e:	481e      	ldr	r0, [pc, #120]	; (8000988 <TestBlinkProgram+0xd4>)
 8000910:	f004 fa54 	bl	8004dbc <HAL_GPIO_WritePin>
			LastTick = HAL_GetTick();
 8000914:	f002 fec6 	bl	80036a4 <HAL_GetTick>
 8000918:	4603      	mov	r3, r0
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <TestBlinkProgram+0xcc>)
 800091c:	6013      	str	r3, [r2, #0]
			state = 1;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <TestBlinkProgram+0xd0>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
			break;
 8000924:	e01f      	b.n	8000966 <TestBlinkProgram+0xb2>

		case 1:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2104      	movs	r1, #4
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <TestBlinkProgram+0xd4>)
 800092c:	f004 fa46 	bl	8004dbc <HAL_GPIO_WritePin>
			LastTick = HAL_GetTick();
 8000930:	f002 feb8 	bl	80036a4 <HAL_GetTick>
 8000934:	4603      	mov	r3, r0
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <TestBlinkProgram+0xcc>)
 8000938:	6013      	str	r3, [r2, #0]
			blinks++;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <TestBlinkProgram+0xd8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <TestBlinkProgram+0xd8>)
 8000944:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <TestBlinkProgram+0xd0>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]

			OLED_MoveCursor(64, 0);
 800094c:	2100      	movs	r1, #0
 800094e:	2040      	movs	r0, #64	; 0x40
 8000950:	f002 fa2e 	bl	8002db0 <OLED_MoveCursor>
			OLED_WriteInt(blinks, WHITE);
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <TestBlinkProgram+0xd8>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fbd2 	bl	8003104 <OLED_WriteInt>
			OLED_SendBuffer();
 8000960:	f002 fab4 	bl	8002ecc <OLED_SendBuffer>
			break;
 8000964:	bf00      	nop
	}




	if(blinks >= 10)
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <TestBlinkProgram+0xd8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b09      	cmp	r3, #9
 800096c:	d901      	bls.n	8000972 <TestBlinkProgram+0xbe>
	{
		return PROGRAM_COMPLETED;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <TestBlinkProgram+0xc0>
	}
	else
	{
		return PROGRAM_IN_PROGRESS;
 8000972:	2302      	movs	r3, #2
	}

}
 8000974:	4618      	mov	r0, r3
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200001b5 	.word	0x200001b5
 800097c:	08008638 	.word	0x08008638
 8000980:	200001b8 	.word	0x200001b8
 8000984:	200001bc 	.word	0x200001bc
 8000988:	40020400 	.word	0x40020400
 800098c:	200001bd 	.word	0x200001bd

08000990 <SetTestBlink>:

void SetTestBlink(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	ProgramToPerform = &TestBlinkProgram;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <SetTestBlink+0x14>)
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <SetTestBlink+0x18>)
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	200001b0 	.word	0x200001b0
 80009a8:	080008b5 	.word	0x080008b5

080009ac <SetFreeRideControll>:


void SetFreeRideControll(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	ProgramToPerform = &FreeRideControll;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <SetFreeRideControll+0x14>)
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <SetFreeRideControll+0x18>)
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	200001b0 	.word	0x200001b0
 80009c4:	080009c9 	.word	0x080009c9

080009c8 <FreeRideControll>:

Programs_status_t FreeRideControll(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	uint8_t Cmd[4];

	int8_t DevL;
	int8_t DevR, LastDevR = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]

	if(0 == FirstEntry)
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <FreeRideControll+0x10c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d116      	bne.n	8000a08 <FreeRideControll+0x40>
	{
		Cmd[0] = 0xA1;
 80009da:	23a1      	movs	r3, #161	; 0xa1
 80009dc:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x10;
 80009de:	2310      	movs	r3, #16
 80009e0:	707b      	strb	r3, [r7, #1]
		Radio_TxBufferPut(Cmd, 2);
 80009e2:	463b      	mov	r3, r7
 80009e4:	2102      	movs	r1, #2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 ffea 	bl	80019c0 <Radio_TxBufferPut>
		Inputs_ClearButtonsCallbacks();
 80009ec:	f000 fb84 	bl	80010f8 <Inputs_ClearButtonsCallbacks>
		OLED_ClearBuffer(BLACK);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f002 fa97 	bl	8002f24 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f002 f9d9 	bl	8002db0 <OLED_MoveCursor>
		OLED_SendBuffer();
 80009fe:	f002 fa65 	bl	8002ecc <OLED_SendBuffer>
		FirstEntry = 1;
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <FreeRideControll+0x10c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
	}
	OLED_ClearBuffer(BLACK);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f002 fa8b 	bl	8002f24 <OLED_ClearBuffer>

	DevR =  Inputs_GetRightJoystickDev(X_AXIS);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fa66 	bl	8000ee0 <Inputs_GetRightJoystickDev>
 8000a14:	4603      	mov	r3, r0
 8000a16:	71bb      	strb	r3, [r7, #6]
	if(DevR > 2 && DevR != LastDevR)
 8000a18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	dd28      	ble.n	8000a72 <FreeRideControll+0xaa>
 8000a20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d022      	beq.n	8000a72 <FreeRideControll+0xaa>
	{

		Cmd[0] = 0xA1;
 8000a2c:	23a1      	movs	r3, #161	; 0xa1
 8000a2e:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x22;
 8000a30:	2322      	movs	r3, #34	; 0x22
 8000a32:	707b      	strb	r3, [r7, #1]
		Cmd[2] = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	70bb      	strb	r3, [r7, #2]
		Radio_TxBufferPut(Cmd, 3);
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 ffbf 	bl	80019c0 <Radio_TxBufferPut>
		Cmd[0] = 0xA1;
 8000a42:	23a1      	movs	r3, #161	; 0xa1
 8000a44:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x20;
 8000a46:	2320      	movs	r3, #32
 8000a48:	707b      	strb	r3, [r7, #1]
		Cmd[2] = (DevR * 255) / 100;
 8000a4a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <FreeRideControll+0x110>)
 8000a56:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5a:	1152      	asrs	r2, r2, #5
 8000a5c:	17db      	asrs	r3, r3, #31
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	70bb      	strb	r3, [r7, #2]
		Radio_TxBufferPut(Cmd, 3);
 8000a64:	463b      	mov	r3, r7
 8000a66:	2103      	movs	r1, #3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 ffa9 	bl	80019c0 <Radio_TxBufferPut>
		LastDevR = DevR;
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	71fb      	strb	r3, [r7, #7]
	else
	{

	}

	OLED_MoveCursor(0, 0);
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f002 f99b 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteString("Right Motor: ", WHITE);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <FreeRideControll+0x114>)
 8000a7e:	f002 fb1b 	bl	80030b8 <OLED_WriteString>
	OLED_MoveCursor(90, 0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	205a      	movs	r0, #90	; 0x5a
 8000a86:	f002 f993 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteInt(DevR, WHITE);
 8000a8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fb37 	bl	8003104 <OLED_WriteInt>

//	OLED_MoveCursor(0, 8);
//	OLED_WriteInt(Inputs_GetRightJoystickDev(Y_AXIS), WHITE);

	DevL = Inputs_GetLeftJoystickDev(X_AXIS);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 fa04 	bl	8000ea4 <Inputs_GetLeftJoystickDev>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	717b      	strb	r3, [r7, #5]

	OLED_MoveCursor(0, 16);
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f002 f984 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteString("LEFT Motor: ", WHITE);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <FreeRideControll+0x118>)
 8000aac:	f002 fb04 	bl	80030b8 <OLED_WriteString>
	OLED_MoveCursor(90, 16);
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	205a      	movs	r0, #90	; 0x5a
 8000ab4:	f002 f97c 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteInt(DevL, WHITE);
 8000ab8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fb20 	bl	8003104 <OLED_WriteInt>

//	OLED_MoveCursor(0, 32);
//	OLED_WriteInt(Inputs_GetLeftJoystickDev(Y_AXIS), WHITE);

	OLED_SendBuffer();
 8000ac4:	f002 fa02 	bl	8002ecc <OLED_SendBuffer>

	return PROGRAM_IN_PROGRESS;
 8000ac8:	2302      	movs	r3, #2


}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001be 	.word	0x200001be
 8000ad8:	51eb851f 	.word	0x51eb851f
 8000adc:	08008640 	.word	0x08008640
 8000ae0:	08008650 	.word	0x08008650

08000ae4 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af6:	3301      	adds	r3, #1
 8000af8:	425a      	negs	r2, r3
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	f002 021f 	and.w	r2, r2, #31
 8000b02:	bf58      	it	pl
 8000b04:	4253      	negpl	r3, r2
 8000b06:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0e:	7bfa      	ldrb	r2, [r7, #15]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d101      	bne.n	8000b18 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e00b      	b.n	8000b30 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78fa      	ldrb	r2, [r7, #3]
 8000b24:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	425a      	negs	r2, r3
 8000b50:	f003 031f 	and.w	r3, r3, #31
 8000b54:	f002 021f 	and.w	r2, r2, #31
 8000b58:	bf58      	it	pl
 8000b5a:	4253      	negpl	r3, r2
 8000b5c:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d101      	bne.n	8000b72 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00c      	b.n	8000b8c <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b78:	461a      	mov	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	5c9a      	ldrb	r2, [r3, r2]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bac:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <MX_ADC1_Init+0xf0>)
 8000bae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bda:	4a2c      	ldr	r2, [pc, #176]	; (8000c8c <MX_ADC1_Init+0xf4>)
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf8:	4822      	ldr	r0, [pc, #136]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000bfa:	f002 fd83 	bl	8003704 <HAL_ADC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c04:	f001 f8ea 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c10:	2307      	movs	r3, #7
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	481a      	ldr	r0, [pc, #104]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000c1a:	f002 ffd5 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c24:	f001 f8da 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000c36:	f002 ffc7 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c40:	f001 f8cc 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000c52:	f002 ffb9 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000c5c:	f001 f8be 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC1_Init+0xec>)
 8000c6e:	f002 ffab 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c78:	f001 f8b0 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001c0 	.word	0x200001c0
 8000c88:	40012000 	.word	0x40012000
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <HAL_ADC_MspInit+0x110>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d171      	bne.n	8000d96 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a33      	ldr	r2, [pc, #204]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_ADC_MspInit+0x114>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000d06:	2306      	movs	r3, #6
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4823      	ldr	r0, [pc, #140]	; (8000da8 <HAL_ADC_MspInit+0x118>)
 8000d1a:	f003 feb3 	bl	8004a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 8000d1e:	2306      	movs	r3, #6
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481e      	ldr	r0, [pc, #120]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d32:	f003 fea7 	bl	8004a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <HAL_ADC_MspInit+0x124>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d7c:	f003 faf0 	bl	8004360 <HAL_DMA_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000d86:	f001 f829 	bl	8001ddc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40012000 	.word	0x40012000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	20000208 	.word	0x20000208
 8000db4:	40026410 	.word	0x40026410

08000db8 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <Inputs_Init+0xa8>)
 8000dc0:	f006 f816 	bl	8006df0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 8000dc4:	2228      	movs	r2, #40	; 0x28
 8000dc6:	4927      	ldr	r1, [pc, #156]	; (8000e64 <Inputs_Init+0xac>)
 8000dc8:	4827      	ldr	r0, [pc, #156]	; (8000e68 <Inputs_Init+0xb0>)
 8000dca:	f002 fdef 	bl	80039ac <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000dce:	2032      	movs	r0, #50	; 0x32
 8000dd0:	f002 fc74 	bl	80036bc <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 8000dd4:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <Inputs_Init+0xb4>)
 8000dd6:	4926      	ldr	r1, [pc, #152]	; (8000e70 <Inputs_Init+0xb8>)
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <Inputs_Init+0xbc>)
 8000dda:	f000 fc97 	bl	800170c <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000dde:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <Inputs_Init+0xc0>)
 8000de0:	4926      	ldr	r1, [pc, #152]	; (8000e7c <Inputs_Init+0xc4>)
 8000de2:	4827      	ldr	r0, [pc, #156]	; (8000e80 <Inputs_Init+0xc8>)
 8000de4:	f000 fc92 	bl	800170c <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000de8:	4822      	ldr	r0, [pc, #136]	; (8000e74 <Inputs_Init+0xbc>)
 8000dea:	f000 fcaa 	bl	8001742 <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000dee:	4824      	ldr	r0, [pc, #144]	; (8000e80 <Inputs_Init+0xc8>)
 8000df0:	f000 fca7 	bl	8001742 <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000df4:	213c      	movs	r1, #60	; 0x3c
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <Inputs_Init+0xa8>)
 8000df8:	f006 f8fa 	bl	8006ff0 <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
 8000dfc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2332      	movs	r3, #50	; 0x32
 8000e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e08:	491e      	ldr	r1, [pc, #120]	; (8000e84 <Inputs_Init+0xcc>)
 8000e0a:	481f      	ldr	r0, [pc, #124]	; (8000e88 <Inputs_Init+0xd0>)
 8000e0c:	f000 f9bb 	bl	8001186 <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
 8000e10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2332      	movs	r3, #50	; 0x32
 8000e18:	2204      	movs	r2, #4
 8000e1a:	491c      	ldr	r1, [pc, #112]	; (8000e8c <Inputs_Init+0xd4>)
 8000e1c:	481c      	ldr	r0, [pc, #112]	; (8000e90 <Inputs_Init+0xd8>)
 8000e1e:	f000 f9b2 	bl	8001186 <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
 8000e22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2332      	movs	r3, #50	; 0x32
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4915      	ldr	r1, [pc, #84]	; (8000e84 <Inputs_Init+0xcc>)
 8000e2e:	4819      	ldr	r0, [pc, #100]	; (8000e94 <Inputs_Init+0xdc>)
 8000e30:	f000 f9a9 	bl	8001186 <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
 8000e34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2332      	movs	r3, #50	; 0x32
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4916      	ldr	r1, [pc, #88]	; (8000e98 <Inputs_Init+0xe0>)
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <Inputs_Init+0xe4>)
 8000e42:	f000 f9a0 	bl	8001186 <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
 8000e46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	2220      	movs	r2, #32
 8000e50:	4911      	ldr	r1, [pc, #68]	; (8000e98 <Inputs_Init+0xe0>)
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <Inputs_Init+0xe8>)
 8000e54:	f000 f997 	bl	8001186 <DB_ButtonInit>
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000914 	.word	0x20000914
 8000e64:	20000268 	.word	0x20000268
 8000e68:	200001c0 	.word	0x200001c0
 8000e6c:	200002ba 	.word	0x200002ba
 8000e70:	200002b8 	.word	0x200002b8
 8000e74:	200002c0 	.word	0x200002c0
 8000e78:	200002be 	.word	0x200002be
 8000e7c:	200002bc 	.word	0x200002bc
 8000e80:	200002d8 	.word	0x200002d8
 8000e84:	40020800 	.word	0x40020800
 8000e88:	200002f4 	.word	0x200002f4
 8000e8c:	40020c00 	.word	0x40020c00
 8000e90:	20000314 	.word	0x20000314
 8000e94:	20000334 	.word	0x20000334
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	20000354 	.word	0x20000354
 8000ea0:	20000374 	.word	0x20000374

08000ea4 <Inputs_GetLeftJoystickDev>:

//
// J O Y S T I C K
//
int8_t Inputs_GetLeftJoystickDev(uint8_t axis)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if(JoysitckCalibrationFlag > 0)
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <Inputs_GetLeftJoystickDev+0x34>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <Inputs_GetLeftJoystickDev+0x20>
	{
		return Joy_GetDeviationPercentCal(&LeftJoystick, axis);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <Inputs_GetLeftJoystickDev+0x38>)
 8000ebc:	f000 fcac 	bl	8001818 <Joy_GetDeviationPercentCal>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	e005      	b.n	8000ed0 <Inputs_GetLeftJoystickDev+0x2c>
	}
	else
	{
		return Joy_GetDeviationPercent(&LeftJoystick, axis);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <Inputs_GetLeftJoystickDev+0x38>)
 8000eca:	f000 fc64 	bl	8001796 <Joy_GetDeviationPercent>
 8000ece:	4603      	mov	r3, r0
	}
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200002f0 	.word	0x200002f0
 8000edc:	200002c0 	.word	0x200002c0

08000ee0 <Inputs_GetRightJoystickDev>:

int8_t Inputs_GetRightJoystickDev(uint8_t axis)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	if(JoysitckCalibrationFlag > 0)
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <Inputs_GetRightJoystickDev+0x34>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <Inputs_GetRightJoystickDev+0x20>
	{
		return Joy_GetDeviationPercentCal(&RightJoystick, axis);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <Inputs_GetRightJoystickDev+0x38>)
 8000ef8:	f000 fc8e 	bl	8001818 <Joy_GetDeviationPercentCal>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e005      	b.n	8000f0c <Inputs_GetRightJoystickDev+0x2c>
	}
	else
	{
		return Joy_GetDeviationPercent(&RightJoystick, axis);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <Inputs_GetRightJoystickDev+0x38>)
 8000f06:	f000 fc46 	bl	8001796 <Joy_GetDeviationPercent>
 8000f0a:	4603      	mov	r3, r0
	}
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200002f0 	.word	0x200002f0
 8000f18:	200002d8 	.word	0x200002d8

08000f1c <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 8000f34:	2300      	movs	r3, #0
 8000f36:	77fb      	strb	r3, [r7, #31]
 8000f38:	e021      	b.n	8000f7e <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	7ffa      	ldrb	r2, [r7, #31]
 8000f3e:	4924      	ldr	r1, [pc, #144]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f40:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f44:	4413      	add	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	7ffa      	ldrb	r2, [r7, #31]
 8000f4c:	3201      	adds	r2, #1
 8000f4e:	4920      	ldr	r1, [pc, #128]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f50:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f54:	4413      	add	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	7ffa      	ldrb	r2, [r7, #31]
 8000f5c:	3202      	adds	r2, #2
 8000f5e:	491c      	ldr	r1, [pc, #112]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f60:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f64:	4413      	add	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	7ffa      	ldrb	r2, [r7, #31]
 8000f6c:	3203      	adds	r2, #3
 8000f6e:	4918      	ldr	r1, [pc, #96]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f70:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f74:	4413      	add	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000f78:	7ffb      	ldrb	r3, [r7, #31]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	77fb      	strb	r3, [r7, #31]
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
 8000f80:	2b24      	cmp	r3, #36	; 0x24
 8000f82:	d9da      	bls.n	8000f3a <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f92:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000fa2:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000fb2:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000fc2:	80da      	strh	r2, [r3, #6]
}
 8000fc4:	bf00      	nop
 8000fc6:	3724      	adds	r7, #36	; 0x24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000268 	.word	0x20000268
 8000fd4:	cccccccd 	.word	0xcccccccd
 8000fd8:	200002b8 	.word	0x200002b8

08000fdc <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <Inputs_GetEncoderCount+0x4c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <Inputs_GetEncoderCount+0x50>)
 8000fea:	8812      	ldrh	r2, [r2, #0]
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	dc03      	bgt.n	8000ffe <Inputs_GetEncoderCount+0x22>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f113 0f03 	cmn.w	r3, #3
 8000ffc:	da0d      	bge.n	800101a <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <Inputs_GetEncoderCount+0x4c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <Inputs_GetEncoderCount+0x50>)
 8001008:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	da00      	bge.n	8001012 <Inputs_GetEncoderCount+0x36>
 8001010:	3303      	adds	r3, #3
 8001012:	109b      	asrs	r3, r3, #2
 8001014:	425b      	negs	r3, r3
 8001016:	b25b      	sxtb	r3, r3
 8001018:	e000      	b.n	800101c <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 800101a:	2300      	movs	r3, #0
	}
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20000914 	.word	0x20000914
 800102c:	20000394 	.word	0x20000394

08001030 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <Inputs_ButtonsRoutine+0x28>)
 8001036:	f000 f8f1 	bl	800121c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <Inputs_ButtonsRoutine+0x2c>)
 800103c:	f000 f8ee 	bl	800121c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <Inputs_ButtonsRoutine+0x30>)
 8001042:	f000 f8eb 	bl	800121c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <Inputs_ButtonsRoutine+0x34>)
 8001048:	f000 f8e8 	bl	800121c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <Inputs_ButtonsRoutine+0x38>)
 800104e:	f000 f8e5 	bl	800121c <DB_ButtonProcess>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200002f4 	.word	0x200002f4
 800105c:	20000314 	.word	0x20000314
 8001060:	20000354 	.word	0x20000354
 8001064:	20000334 	.word	0x20000334
 8001068:	20000374 	.word	0x20000374

0800106c <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d82b      	bhi.n	80010d8 <Inputs_ButtonsRegisterCallback+0x6c>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <Inputs_ButtonsRegisterCallback+0x1c>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	0800109d 	.word	0x0800109d
 800108c:	080010a9 	.word	0x080010a9
 8001090:	080010b5 	.word	0x080010b5
 8001094:	080010c1 	.word	0x080010c1
 8001098:	080010cd 	.word	0x080010cd
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <Inputs_ButtonsRegisterCallback+0x78>)
 80010a2:	f000 f893 	bl	80011cc <DB_ButtonPressCallbackRegister>
		break;
 80010a6:	e018      	b.n	80010da <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <Inputs_ButtonsRegisterCallback+0x7c>)
 80010ae:	f000 f88d 	bl	80011cc <DB_ButtonPressCallbackRegister>
		break;
 80010b2:	e012      	b.n	80010da <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <Inputs_ButtonsRegisterCallback+0x80>)
 80010ba:	f000 f887 	bl	80011cc <DB_ButtonPressCallbackRegister>
		break;
 80010be:	e00c      	b.n	80010da <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <Inputs_ButtonsRegisterCallback+0x84>)
 80010c6:	f000 f881 	bl	80011cc <DB_ButtonPressCallbackRegister>
		break;
 80010ca:	e006      	b.n	80010da <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <Inputs_ButtonsRegisterCallback+0x88>)
 80010d2:	f000 f87b 	bl	80011cc <DB_ButtonPressCallbackRegister>
		break;
 80010d6:	e000      	b.n	80010da <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 80010d8:	bf00      	nop
	}
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200002f4 	.word	0x200002f4
 80010e8:	20000314 	.word	0x20000314
 80010ec:	20000334 	.word	0x20000334
 80010f0:	20000354 	.word	0x20000354
 80010f4:	20000374 	.word	0x20000374

080010f8 <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <Inputs_ClearButtonsCallbacks+0x3c>)
 8001102:	f000 f863 	bl	80011cc <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <Inputs_ClearButtonsCallbacks+0x40>)
 800110c:	f000 f85e 	bl	80011cc <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <Inputs_ClearButtonsCallbacks+0x44>)
 8001116:	f000 f859 	bl	80011cc <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <Inputs_ClearButtonsCallbacks+0x48>)
 8001120:	f000 f854 	bl	80011cc <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <Inputs_ClearButtonsCallbacks+0x4c>)
 800112a:	f000 f84f 	bl	80011cc <DB_ButtonPressCallbackRegister>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002f4 	.word	0x200002f4
 8001138:	20000314 	.word	0x20000314
 800113c:	20000334 	.word	0x20000334
 8001140:	20000354 	.word	0x20000354
 8001144:	20000374 	.word	0x20000374

08001148 <Parser_Controller>:
 */
#include "controller_parser.h"


void Parser_Controller(uint8_t *command, uint8_t length)							//main parser funciton
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60fb      	str	r3, [r7, #12]
	uint8_t Length = length;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	72fb      	strb	r3, [r7, #11]



	switch(*CurrentByte)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2bd0      	cmp	r3, #208	; 0xd0
 8001162:	d10b      	bne.n	800117c <Parser_Controller+0x34>
	{
	case DIODE_TEST:
		CurrentByte++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
		Length--;
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	3b01      	subs	r3, #1
 800116e:	72fb      	strb	r3, [r7, #11]
		Programs_DiodeTestParser(CurrentByte, Length);
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	4619      	mov	r1, r3
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff fadd 	bl	8000734 <Programs_DiodeTestParser>

		break;
 800117a:	e000      	b.n	800117e <Parser_Controller+0x36>

	default:

		break;
 800117c:	bf00      	nop
	}


}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <DB_ButtonInit>:


#include "debounce.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	615a      	str	r2, [r3, #20]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f003 fdc2 	bl	8004d8c <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <DB_IsButtonPressed+0x22>
	{
		return 1;
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 8001212:	2300      	movs	r3, #0
	}
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	2b03      	cmp	r3, #3
 800122a:	f200 8082 	bhi.w	8001332 <DB_ButtonProcess+0x116>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <DB_ButtonProcess+0x18>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	08001245 	.word	0x08001245
 8001238:	08001263 	.word	0x08001263
 800123c:	080012a3 	.word	0x080012a3
 8001240:	080012ed 	.word	0x080012ed
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffd3 	bl	80011f0 <DB_IsButtonPressed>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d06b      	beq.n	8001328 <DB_ButtonProcess+0x10c>
		{
			Button->ButtonState = DEBOUNCE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 8001256:	f002 fa25 	bl	80036a4 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	61da      	str	r2, [r3, #28]
		}
		break;
 8001260:	e062      	b.n	8001328 <DB_ButtonProcess+0x10c>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8001262:	f002 fa1f 	bl	80036a4 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	429a      	cmp	r2, r3
 8001274:	d95a      	bls.n	800132c <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button))
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffba 	bl	80011f0 <DB_IsButtonPressed>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001288:	f002 fa0c 	bl	80036a4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonState = IDLE;
				printf("Debounce: Button bounced \n");
			}
		}
		break;
 8001292:	e04b      	b.n	800132c <DB_ButtonProcess+0x110>
				Button->ButtonState = IDLE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button bounced \n");
 800129a:	4828      	ldr	r0, [pc, #160]	; (800133c <DB_ButtonProcess+0x120>)
 800129c:	f006 faae 	bl	80077fc <puts>
		break;
 80012a0:	e044      	b.n	800132c <DB_ButtonProcess+0x110>
	case PRESSED:

		if(0 == DB_IsButtonPressed(Button))
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <DB_IsButtonPressed>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <DB_ButtonProcess+0xae>
		{
			if(NULL != Button->ButtonPressAction)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <DB_ButtonProcess+0xa0>
			{
				Button->ButtonPressAction();
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button pressed! \n");
 80012c2:	481f      	ldr	r0, [pc, #124]	; (8001340 <DB_ButtonProcess+0x124>)
 80012c4:	f006 fa9a 	bl	80077fc <puts>
			{
				Button->ButtonState = HOLD;
				Button->LastTick = HAL_GetTick();
			}
		}
		break;
 80012c8:	e032      	b.n	8001330 <DB_ButtonProcess+0x114>
			if(HAL_GetTick() - (Button->LastTick) > 150 )
 80012ca:	f002 f9eb 	bl	80036a4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b96      	cmp	r3, #150	; 0x96
 80012d8:	d92a      	bls.n	8001330 <DB_ButtonProcess+0x114>
				Button->ButtonState = HOLD;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 80012e0:	f002 f9e0 	bl	80036a4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	61da      	str	r2, [r3, #28]
		break;
 80012ea:	e021      	b.n	8001330 <DB_ButtonProcess+0x114>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 80012ec:	f002 f9da 	bl	80036a4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d918      	bls.n	8001332 <DB_ButtonProcess+0x116>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonHoldAction)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff75 	bl	80011f0 <DB_IsButtonPressed>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <DB_ButtonProcess+0x104>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <DB_ButtonProcess+0x104>
			{
				Button->ButtonHoldAction();
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4798      	blx	r3
				printf("Debounce: Button held! \r\n");
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <DB_ButtonProcess+0x128>)
 800131c:	f006 fa6e 	bl	80077fc <puts>
			}
			Button->ButtonState = IDLE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	761a      	strb	r2, [r3, #24]
		}
	}
}
 8001326:	e004      	b.n	8001332 <DB_ButtonProcess+0x116>
		break;
 8001328:	bf00      	nop
 800132a:	e002      	b.n	8001332 <DB_ButtonProcess+0x116>
		break;
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <DB_ButtonProcess+0x116>
		break;
 8001330:	bf00      	nop
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08008660 	.word	0x08008660
 8001340:	0800867c 	.word	0x0800867c
 8001344:	08008698 	.word	0x08008698

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_DMA_Init+0x3c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <MX_DMA_Init+0x3c>)
 8001358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_DMA_Init+0x3c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2038      	movs	r0, #56	; 0x38
 8001370:	f002 ffbf 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001374:	2038      	movs	r0, #56	; 0x38
 8001376:	f002 ffd8 	bl	800432a <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <MX_GPIO_Init+0x178>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a56      	ldr	r2, [pc, #344]	; (8001500 <MX_GPIO_Init+0x178>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b54      	ldr	r3, [pc, #336]	; (8001500 <MX_GPIO_Init+0x178>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b50      	ldr	r3, [pc, #320]	; (8001500 <MX_GPIO_Init+0x178>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <MX_GPIO_Init+0x178>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <MX_GPIO_Init+0x178>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <MX_GPIO_Init+0x178>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <MX_GPIO_Init+0x178>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b46      	ldr	r3, [pc, #280]	; (8001500 <MX_GPIO_Init+0x178>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <MX_GPIO_Init+0x178>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a41      	ldr	r2, [pc, #260]	; (8001500 <MX_GPIO_Init+0x178>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <MX_GPIO_Init+0x178>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <MX_GPIO_Init+0x178>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a3a      	ldr	r2, [pc, #232]	; (8001500 <MX_GPIO_Init+0x178>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <MX_GPIO_Init+0x178>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2124      	movs	r1, #36	; 0x24
 800142e:	4835      	ldr	r0, [pc, #212]	; (8001504 <MX_GPIO_Init+0x17c>)
 8001430:	f003 fcc4 	bl	8004dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	21c0      	movs	r1, #192	; 0xc0
 8001438:	4833      	ldr	r0, [pc, #204]	; (8001508 <MX_GPIO_Init+0x180>)
 800143a:	f003 fcbf 	bl	8004dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 800143e:	f240 4301 	movw	r3, #1025	; 0x401
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	482d      	ldr	r0, [pc, #180]	; (8001508 <MX_GPIO_Init+0x180>)
 8001454:	f003 fb16 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 8001458:	2321      	movs	r3, #33	; 0x21
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4828      	ldr	r0, [pc, #160]	; (800150c <MX_GPIO_Init+0x184>)
 800146c:	f003 fb0a 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001470:	2304      	movs	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	481f      	ldr	r0, [pc, #124]	; (8001504 <MX_GPIO_Init+0x17c>)
 8001488:	f003 fafc 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001492:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_GPIO_Init+0x17c>)
 80014a4:	f003 faee 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 80014a8:	23c0      	movs	r3, #192	; 0xc0
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4812      	ldr	r0, [pc, #72]	; (8001508 <MX_GPIO_Init+0x180>)
 80014c0:	f003 fae0 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 80014c4:	2304      	movs	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <MX_GPIO_Init+0x188>)
 80014d8:	f003 fad4 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 80014dc:	2320      	movs	r3, #32
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_GPIO_Init+0x17c>)
 80014f4:	f003 fac6 	bl	8004a84 <HAL_GPIO_Init>

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020c00 	.word	0x40020c00

08001514 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_I2C1_Init+0x50>)
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <MX_I2C1_Init+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_I2C1_Init+0x50>)
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_I2C1_Init+0x58>)
 8001522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_I2C1_Init+0x50>)
 8001532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_I2C1_Init+0x50>)
 8001552:	f003 fc65 	bl	8004e20 <HAL_I2C_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800155c:	f000 fc3e 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000398 	.word	0x20000398
 8001568:	40005400 	.word	0x40005400
 800156c:	00061a80 	.word	0x00061a80

08001570 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C3_Init+0x50>)
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <MX_I2C3_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_I2C3_Init+0x50>)
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_I2C3_Init+0x58>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C3_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_I2C3_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_I2C3_Init+0x50>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_I2C3_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_I2C3_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_I2C3_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_I2C3_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_I2C3_Init+0x50>)
 80015ae:	f003 fc37 	bl	8004e20 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 fc10 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200003ec 	.word	0x200003ec
 80015c4:	40005c00 	.word	0x40005c00
 80015c8:	00061a80 	.word	0x00061a80

080015cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a42      	ldr	r2, [pc, #264]	; (80016f4 <HAL_I2C_MspInit+0x128>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12d      	bne.n	800164a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a40      	ldr	r2, [pc, #256]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161c:	2304      	movs	r3, #4
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4835      	ldr	r0, [pc, #212]	; (80016fc <HAL_I2C_MspInit+0x130>)
 8001628:	f003 fa2c 	bl	8004a84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a30      	ldr	r2, [pc, #192]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 8001636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001648:	e050      	b.n	80016ec <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a2c      	ldr	r2, [pc, #176]	; (8001700 <HAL_I2C_MspInit+0x134>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d14b      	bne.n	80016ec <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800168c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001692:	2312      	movs	r3, #18
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800169e:	2304      	movs	r3, #4
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4816      	ldr	r0, [pc, #88]	; (8001704 <HAL_I2C_MspInit+0x138>)
 80016aa:	f003 f9eb 	bl	8004a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b4:	2312      	movs	r3, #18
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016c0:	2304      	movs	r3, #4
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <HAL_I2C_MspInit+0x13c>)
 80016cc:	f003 f9da 	bl	8004a84 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 80016da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_I2C_MspInit+0x12c>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400
 8001700:	40005c00 	.word	0x40005c00
 8001704:	40020800 	.word	0x40020800
 8001708:	40020000 	.word	0x40020000

0800170c <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <JoyS_Init+0x18>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 800174a:	f001 ffab 	bl	80036a4 <HAL_GetTick>
 800174e:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 8001750:	e015      	b.n	800177e <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d104      	bne.n	8001766 <JoyS_SetIdleValues+0x24>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e007      	b.n	800178e <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 800177e:	f001 ff91 	bl	80036a4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b63      	cmp	r3, #99	; 0x63
 800178a:	d9e2      	bls.n	8001752 <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 800178c:	2303      	movs	r3, #3
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <Joy_GetDeviationPercent>:
	}
	return JOYS_OK;
}

int8_t Joy_GetDeviationPercent(Joystick_t *Joystick, uint8_t axis)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
	uint32_t CurrentValue;
	uint32_t IdleValue;

	if(axis == X_AXIS)
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <Joy_GetDeviationPercent+0x22>
	{
		CurrentValue = *(Joystick->ValX);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
		IdleValue = Joystick->IdleX;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	891b      	ldrh	r3, [r3, #8]
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	e00c      	b.n	80017d2 <Joy_GetDeviationPercent+0x3c>
	}
	else if(axis == Y_AXIS)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <Joy_GetDeviationPercent+0x38>
	{
		CurrentValue = *(Joystick->ValY);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
		IdleValue = Joystick->IdleY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	895b      	ldrh	r3, [r3, #10]
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	e001      	b.n	80017d2 <Joy_GetDeviationPercent+0x3c>
	}
	else return 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e01c      	b.n	800180c <Joy_GetDeviationPercent+0x76>


	if(CurrentValue >= IdleValue)
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d30d      	bcc.n	80017f6 <Joy_GetDeviationPercent+0x60>
	{
		return ( (CurrentValue - IdleValue) * 100) / (4095 - IdleValue);		//formula for positive deviation percentage
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2264      	movs	r2, #100	; 0x64
 80017e2:	fb03 f202 	mul.w	r2, r3, r2
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80017ec:	330f      	adds	r3, #15
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	e00a      	b.n	800180c <Joy_GetDeviationPercent+0x76>
	}
	else
	{
		return -100 + ((CurrentValue * 100) / IdleValue);	//formula for negative deviation percentage
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2264      	movs	r2, #100	; 0x64
 80017fa:	fb03 f202 	mul.w	r2, r3, r2
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	3b64      	subs	r3, #100	; 0x64
 8001808:	b2db      	uxtb	r3, r3
 800180a:	b25b      	sxtb	r3, r3
	}

}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <Joy_GetDeviationPercentCal>:


int8_t Joy_GetDeviationPercentCal(Joystick_t *Joystick, uint8_t axis)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
	uint32_t CurrentValue;
	uint32_t IdleValue;
	uint32_t MaxValue;
	uint32_t MinValue;

	if(axis == X_AXIS)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <Joy_GetDeviationPercentCal+0x2e>
	{
		CurrentValue = *(Joystick->ValX);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	617b      	str	r3, [r7, #20]
		IdleValue = Joystick->IdleX;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	891b      	ldrh	r3, [r3, #8]
 8001836:	613b      	str	r3, [r7, #16]
		MaxValue = Joystick->MaxX;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	89db      	ldrh	r3, [r3, #14]
 800183c:	60fb      	str	r3, [r7, #12]
		MinValue = Joystick->MinX;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	8a5b      	ldrh	r3, [r3, #18]
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	e012      	b.n	800186c <Joy_GetDeviationPercentCal+0x54>
	}
	else if(axis == Y_AXIS)
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10d      	bne.n	8001868 <Joy_GetDeviationPercentCal+0x50>
	{
		CurrentValue = *(Joystick->ValY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	617b      	str	r3, [r7, #20]
		IdleValue = Joystick->IdleY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	895b      	ldrh	r3, [r3, #10]
 8001858:	613b      	str	r3, [r7, #16]
		MaxValue = Joystick->MaxY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	899b      	ldrh	r3, [r3, #12]
 800185e:	60fb      	str	r3, [r7, #12]
		MinValue = Joystick->MinY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8a1b      	ldrh	r3, [r3, #16]
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	e001      	b.n	800186c <Joy_GetDeviationPercentCal+0x54>
	}
	else return 0;
 8001868:	2300      	movs	r3, #0
 800186a:	e02a      	b.n	80018c2 <Joy_GetDeviationPercentCal+0xaa>

	if(MaxValue == 0) return 0;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <Joy_GetDeviationPercentCal+0x5e>
 8001872:	2300      	movs	r3, #0
 8001874:	e025      	b.n	80018c2 <Joy_GetDeviationPercentCal+0xaa>

	if(CurrentValue < MinValue)
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d201      	bcs.n	8001882 <Joy_GetDeviationPercentCal+0x6a>
	{
		CurrentValue = MinValue;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	617b      	str	r3, [r7, #20]
	}
	if(CurrentValue >= IdleValue)
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d30c      	bcc.n	80018a4 <Joy_GetDeviationPercentCal+0x8c>
	{
		return ( (CurrentValue - IdleValue) * 100) / (MaxValue - IdleValue);		//formula for positive deviation percentage
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2264      	movs	r2, #100	; 0x64
 8001892:	fb03 f202 	mul.w	r2, r3, r2
 8001896:	68f9      	ldr	r1, [r7, #12]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1acb      	subs	r3, r1, r3
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	e00e      	b.n	80018c2 <Joy_GetDeviationPercentCal+0xaa>
	}
	else
	{
		return -100 + ((CurrentValue - MinValue) * 100) / (IdleValue - MinValue);	//formula for negative deviation percentage
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2264      	movs	r2, #100	; 0x64
 80018ac:	fb03 f202 	mul.w	r2, r3, r2
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1acb      	subs	r3, r1, r3
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3b64      	subs	r3, #100	; 0x64
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	b25b      	sxtb	r3, r3
	}
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 f87d 	bl	80029d8 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 80018de:	4906      	ldr	r1, [pc, #24]	; (80018f8 <Radio_Init+0x28>)
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 fe96 	bl	8002612 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <Radio_Init+0x2c>)
 80018e8:	f000 fecc 	bl	8002684 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 80018ec:	f000 fcd6 	bl	800229c <nRF24_TX_Mode>
#endif
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	080086b4 	.word	0x080086b4
 80018fc:	080086b8 	.word	0x080086b8

08001900 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001910:	2300      	movs	r3, #0
 8001912:	73bb      	strb	r3, [r7, #14]
 8001914:	e010      	b.n	8001938 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <Radio_RxBufferPut+0x4c>)
 800191e:	f7ff f8e1 	bl	8000ae4 <RBuffer_Write>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	4313      	orrs	r3, r2
 800192a:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	3301      	adds	r3, #1
 8001936:	73bb      	strb	r3, [r7, #14]
 8001938:	7bba      	ldrb	r2, [r7, #14]
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3ea      	bcc.n	8001916 <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000468 	.word	0x20000468

08001950 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8001962:	f107 030d 	add.w	r3, r7, #13
 8001966:	4619      	mov	r1, r3
 8001968:	4814      	ldr	r0, [pc, #80]	; (80019bc <Radio_RxBufferGet+0x6c>)
 800196a:	f7ff f8e7 	bl	8000b3c <RBuffer_Read>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	4313      	orrs	r3, r2
 8001976:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001978:	e012      	b.n	80019a0 <Radio_RxBufferGet+0x50>
	{

		*(CommandDestination+Length) = Data;				//write received byte to destination
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	7b7a      	ldrb	r2, [r7, #13]
 8001982:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	3301      	adds	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 800198a:	f107 030d 	add.w	r3, r7, #13
 800198e:	4619      	mov	r1, r3
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <Radio_RxBufferGet+0x6c>)
 8001992:	f7ff f8d3 	bl	8000b3c <RBuffer_Read>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	4313      	orrs	r3, r2
 800199e:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <Radio_RxBufferGet+0x5c>
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0e6      	beq.n	800197a <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	701a      	strb	r2, [r3, #0]
	return Status;
 80019b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000468 	.word	0x20000468

080019c0 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 80019d0:	2300      	movs	r3, #0
 80019d2:	73bb      	strb	r3, [r7, #14]
 80019d4:	e010      	b.n	80019f8 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	480f      	ldr	r0, [pc, #60]	; (8001a1c <Radio_TxBufferPut+0x5c>)
 80019de:	f7ff f881 	bl	8000ae4 <RBuffer_Write>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	73fb      	strb	r3, [r7, #15]
		Command++;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73bb      	strb	r3, [r7, #14]
 80019f8:	7bba      	ldrb	r2, [r7, #14]
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3ea      	bcc.n	80019d6 <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001a00:	2104      	movs	r1, #4
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <Radio_TxBufferPut+0x5c>)
 8001a04:	f7ff f86e 	bl	8000ae4 <RBuffer_Write>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000444 	.word	0x20000444

08001a20 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a36:	1d3a      	adds	r2, r7, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4819      	ldr	r0, [pc, #100]	; (8001aa4 <Radio_TxBufferSend+0x84>)
 8001a3e:	f7ff f87d 	bl	8000b3c <RBuffer_Read>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001a50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8001a5a:	3328      	adds	r3, #40	; 0x28
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d003      	beq.n	8001a6e <Radio_TxBufferSend+0x4e>
 8001a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0e1      	beq.n	8001a32 <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 8001a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d110      	bne.n	8001a98 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 8001a76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ff18 	bl	80028b4 <nRF24_SendPacket>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <Radio_TxBufferSend+0x88>)
 8001a94:	2202      	movs	r2, #2
 8001a96:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 8001a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000444 	.word	0x20000444
 8001aa8:	20000441 	.word	0x20000441

08001aac <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
#ifdef CONTROLLER
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 8001ab2:	f240 4305 	movw	r3, #1029	; 0x405
 8001ab6:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <Radio_SendConnectionCheck+0x28>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fef6 	bl	80028b4 <nRF24_SendPacket>
 8001ac8:	4603      	mov	r3, r0
#ifdef ROBOT
	uint8_t Command [3] = {CONNECTION_HOLD, _OK, COMM_END};
	TxStatus = RADIO_BUSY;
	return nRF24_WriteAckPayload(0, Command, 3);
#endif
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000441 	.word	0x20000441

08001ad8 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 8001ade:	f000 ff53 	bl	8002988 <nRF24_Event>

#ifdef CONTROLLER

	static uint32_t LastTick;
	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 8001ae2:	f001 fddf 	bl	80036a4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <Radio_Process+0x88>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b32      	cmp	r3, #50	; 0x32
 8001af0:	d91c      	bls.n	8001b2c <Radio_Process+0x54>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <Radio_Process+0x8c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d107      	bne.n	8001b0a <Radio_Process+0x32>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8001afa:	f7ff ff91 	bl	8001a20 <Radio_TxBufferSend>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d10e      	bne.n	8001b22 <Radio_Process+0x4a>
			{
				Radio_SendConnectionCheck();
 8001b04:	f7ff ffd2 	bl	8001aac <Radio_SendConnectionCheck>
 8001b08:	e00b      	b.n	8001b22 <Radio_Process+0x4a>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <Radio_Process+0x8c>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <Radio_Process+0x4a>
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <Radio_Process+0x90>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d103      	bne.n	8001b22 <Radio_Process+0x4a>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8001b1a:	f000 f829 	bl	8001b70 <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 8001b1e:	f7ff ffc5 	bl	8001aac <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8001b22:	f001 fdbf 	bl	80036a4 <HAL_GetTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <Radio_Process+0x88>)
 8001b2a:	6013      	str	r3, [r2, #0]
		ConnectionStatus = RADIO_ERROR;
		Radio_NoConnectionCallback();
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <Radio_Process+0x94>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d110      	bne.n	8001b56 <Radio_Process+0x7e>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001b34:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff07 	bl	8001950 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001b42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 f81c 	bl	8002b88 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <Radio_Process+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
	}
}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000048c 	.word	0x2000048c
 8001b64:	20000441 	.word	0x20000441
 8001b68:	20000440 	.word	0x20000440
 8001b6c:	20000442 	.word	0x20000442

08001b70 <Radio_NoConnectionCallback>:
{
	nRF24_IRQ_Handler();
}

__weak void Radio_NoConnectionCallback(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <nRF24_EventTxCallback+0x1c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <nRF24_EventTxCallback+0x20>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000441 	.word	0x20000441
 8001ba0:	20000440 	.word	0x20000440

08001ba4 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001baa:	1dfa      	adds	r2, r7, #7
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fe68 	bl	8002888 <nRF24_ReadRXPaylaod>
	ConnectionStatus = RADIO_OK;
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe9d 	bl	8001900 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001bc6:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <nRF24_EventRxCallback+0x30>)
 8001bc8:	2203      	movs	r2, #3
 8001bca:	701a      	strb	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000442 	.word	0x20000442

08001bd8 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <nRF24_EventMrCallback+0x14>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000440 	.word	0x20000440

08001bf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001bf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001bfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c18:	e000      	b.n	8001c1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f9      	beq.n	8001c1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c44:	f001 fcc8 	bl	80035d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c48:	f000 f828 	bl	8001c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c4c:	f7ff fb9c 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c50:	f7ff fb7a 	bl	8001348 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c54:	f7ff fc5e 	bl	8001514 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c58:	f7ff fc8a 	bl	8001570 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001c5c:	f000 ffa4 	bl	8002ba8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001c60:	f001 fba8 	bl	80033b4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001c64:	f7fe ff98 	bl	8000b98 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001c68:	f001 fbf8 	bl	800345c <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001c6c:	f000 f87e 	bl	8001d6c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2120      	movs	r1, #32
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <main+0x50>)
 8001c76:	f003 f8a1 	bl	8004dbc <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <main+0x54>)
 8001c7c:	f7ff fe28 	bl	80018d0 <Radio_Init>
  Inputs_Init();
 8001c80:	f7ff f89a 	bl	8000db8 <Inputs_Init>
  OLED_Init(&hi2c3);
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <main+0x58>)
 8001c86:	f001 f843 	bl	8002d10 <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SimpleScheduler();
 8001c8a:	f000 ff3f 	bl	8002b0c <SimpleScheduler>
 8001c8e:	e7fc      	b.n	8001c8a <main+0x4a>
 8001c90:	40020400 	.word	0x40020400
 8001c94:	200004a8 	.word	0x200004a8
 8001c98:	200003ec 	.word	0x200003ec

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b094      	sub	sp, #80	; 0x50
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2230      	movs	r2, #48	; 0x30
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f005 fea6 	bl	80079fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <SystemClock_Config+0xc8>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <SystemClock_Config+0xc8>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <SystemClock_Config+0xc8>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <SystemClock_Config+0xcc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <SystemClock_Config+0xcc>)
 8001ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <SystemClock_Config+0xcc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fcd9 	bl	80056d8 <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d2c:	f000 f856 	bl	8001ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d30:	230f      	movs	r3, #15
 8001d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	2302      	movs	r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 ff3b 	bl	8005bc8 <HAL_RCC_ClockConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d58:	f000 f840 	bl	8001ddc <Error_Handler>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3750      	adds	r7, #80	; 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2028      	movs	r0, #40	; 0x28
 8001d76:	f002 fabc 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d7a:	2028      	movs	r0, #40	; 0x28
 8001d7c:	f002 fad5 	bl	800432a <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2024      	movs	r0, #36	; 0x24
 8001d86:	f002 fab4 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d8a:	2024      	movs	r0, #36	; 0x24
 8001d8c:	f002 facd 	bl	800432a <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2012      	movs	r0, #18
 8001d96:	f002 faac 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d9a:	2012      	movs	r0, #18
 8001d9c:	f002 fac5 	bl	800432a <HAL_NVIC_EnableIRQ>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff1e 	bl	8001bf0 <ITM_SendChar>

	return ch;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dce:	d101      	bne.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001dd0:	f000 fd88 	bl	80028e4 <nRF24_IRQ_Handler>
	}

}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <Error_Handler+0x8>
	...

08001de8 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
	//static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	//if(LastMenuPtr == MenuCurrentMember) return;  TODO: IS THIS NEEDED?

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001df2:	e00c      	b.n	8001e0e <Menu_RefreshScreen+0x26>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <Menu_RefreshScreen+0x14c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <Menu_RefreshScreen+0x150>)
 8001dfa:	5cd2      	ldrb	r2, [r2, r3]
 8001dfc:	3201      	adds	r2, #1
 8001dfe:	b2d1      	uxtb	r1, r2
 8001e00:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <Menu_RefreshScreen+0x150>)
 8001e02:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <Menu_RefreshScreen+0x154>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <Menu_RefreshScreen+0x154>)
 8001e0c:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001e0e:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <Menu_RefreshScreen+0x14c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <Menu_RefreshScreen+0x158>)
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <Menu_RefreshScreen+0x14c>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4b45      	ldr	r3, [pc, #276]	; (8001f38 <Menu_RefreshScreen+0x150>)
 8001e22:	5c5b      	ldrb	r3, [r3, r1]
 8001e24:	3305      	adds	r3, #5
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dce4      	bgt.n	8001df4 <Menu_RefreshScreen+0xc>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001e2a:	e00c      	b.n	8001e46 <Menu_RefreshScreen+0x5e>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001e2c:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <Menu_RefreshScreen+0x14c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4a41      	ldr	r2, [pc, #260]	; (8001f38 <Menu_RefreshScreen+0x150>)
 8001e32:	5cd2      	ldrb	r2, [r2, r3]
 8001e34:	3a01      	subs	r2, #1
 8001e36:	b2d1      	uxtb	r1, r2
 8001e38:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <Menu_RefreshScreen+0x150>)
 8001e3a:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <Menu_RefreshScreen+0x154>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4a3e      	ldr	r2, [pc, #248]	; (8001f3c <Menu_RefreshScreen+0x154>)
 8001e44:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <Menu_RefreshScreen+0x14c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <Menu_RefreshScreen+0x158>)
 8001e4e:	5c9a      	ldrb	r2, [r3, r2]
 8001e50:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <Menu_RefreshScreen+0x14c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <Menu_RefreshScreen+0x150>)
 8001e58:	5c5b      	ldrb	r3, [r3, r1]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3e6      	bcc.n	8001e2c <Menu_RefreshScreen+0x44>
	}

	OLED_ClearBuffer(BLACK);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f001 f860 	bl	8002f24 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8001e64:	2100      	movs	r1, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 ffa2 	bl	8002db0 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4835      	ldr	r0, [pc, #212]	; (8001f44 <Menu_RefreshScreen+0x15c>)
 8001e70:	f001 f922 	bl	80030b8 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001e74:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <Menu_RefreshScreen+0x154>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001e7a:	e04f      	b.n	8001f1c <Menu_RefreshScreen+0x134>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8001e7c:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <Menu_RefreshScreen+0x160>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d126      	bne.n	8001ed4 <Menu_RefreshScreen+0xec>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe f9a8 	bl	80001e0 <strlen>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	78bb      	ldrb	r3, [r7, #2]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 ff7d 	bl	8002db0 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4824      	ldr	r0, [pc, #144]	; (8001f4c <Menu_RefreshScreen+0x164>)
 8001eba:	f001 f8fd 	bl	80030b8 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 f8f7 	bl	80030b8 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4820      	ldr	r0, [pc, #128]	; (8001f50 <Menu_RefreshScreen+0x168>)
 8001ece:	f001 f8f3 	bl	80030b8 <OLED_WriteString>
 8001ed2:	e01d      	b.n	8001f10 <Menu_RefreshScreen+0x128>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f981 	bl	80001e0 <strlen>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 ff56 	bl	8002db0 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 f8d4 	bl	80030b8 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	3301      	adds	r3, #1
 8001f14:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d002      	beq.n	8001f28 <Menu_RefreshScreen+0x140>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1a9      	bne.n	8001e7c <Menu_RefreshScreen+0x94>
	}
	OLED_SendBuffer();
 8001f28:	f000 ffd0 	bl	8002ecc <OLED_SendBuffer>
	//LastMenuPtr = MenuCurrentMember;

}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000498 	.word	0x20000498
 8001f38:	20000494 	.word	0x20000494
 8001f3c:	2000010c 	.word	0x2000010c
 8001f40:	20000490 	.word	0x20000490
 8001f44:	08008738 	.word	0x08008738
 8001f48:	20000108 	.word	0x20000108
 8001f4c:	08008750 	.word	0x08008750
 8001f50:	08008754 	.word	0x08008754

08001f54 <Menu_Next>:

void Menu_Next(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <Menu_Next+0x54>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <Menu_Next+0x54>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <Menu_Next+0x54>)
 8001f6a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <Menu_Next+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <Menu_Next+0x5c>)
 8001f72:	5cd2      	ldrb	r2, [r2, r3]
 8001f74:	3201      	adds	r2, #1
 8001f76:	b2d1      	uxtb	r1, r2
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <Menu_Next+0x5c>)
 8001f7a:	54d1      	strb	r1, [r2, r3]
 8001f7c:	e00f      	b.n	8001f9e <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <Menu_Next+0x54>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <Menu_Next+0x54>)
 8001f86:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <Menu_Next+0x54>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f5      	bne.n	8001f7e <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <Menu_Next+0x58>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <Menu_Next+0x5c>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8001f9e:	f7ff ff23 	bl	8001de8 <Menu_RefreshScreen>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000108 	.word	0x20000108
 8001fac:	20000498 	.word	0x20000498
 8001fb0:	20000490 	.word	0x20000490

08001fb4 <Menu_Prev>:

void Menu_Prev(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <Menu_Prev+0x58>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01a      	beq.n	8001ff8 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <Menu_Prev+0x58>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a10      	ldr	r2, [pc, #64]	; (800200c <Menu_Prev+0x58>)
 8001fca:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <Menu_Prev+0x5c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4a10      	ldr	r2, [pc, #64]	; (8002014 <Menu_Prev+0x60>)
 8001fd2:	5cd2      	ldrb	r2, [r2, r3]
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	b2d1      	uxtb	r1, r2
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <Menu_Prev+0x60>)
 8001fda:	54d1      	strb	r1, [r2, r3]
 8001fdc:	e011      	b.n	8002002 <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <Menu_Prev+0x58>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a09      	ldr	r2, [pc, #36]	; (800200c <Menu_Prev+0x58>)
 8001fe6:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <Menu_Prev+0x5c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4a09      	ldr	r2, [pc, #36]	; (8002014 <Menu_Prev+0x60>)
 8001fee:	5cd2      	ldrb	r2, [r2, r3]
 8001ff0:	3201      	adds	r2, #1
 8001ff2:	b2d1      	uxtb	r1, r2
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <Menu_Prev+0x60>)
 8001ff6:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <Menu_Prev+0x58>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 8002002:	f7ff fef1 	bl	8001de8 <Menu_RefreshScreen>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000108 	.word	0x20000108
 8002010:	20000498 	.word	0x20000498
 8002014:	20000490 	.word	0x20000490

08002018 <Menu_Select>:



void Menu_Select(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <Menu_Select+0x48>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <Menu_Select+0x16>
	{
		MenuCurrentMember->FunctionPtr();
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <Menu_Select+0x48>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	4798      	blx	r3
	}

	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <Menu_Select+0x48>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <Menu_Select+0x3e>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <Menu_Select+0x48>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <Menu_Select+0x48>)
 8002040:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <Menu_Select+0x48>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <Menu_Select+0x4c>)
 8002048:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <Menu_Select+0x50>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <Menu_Select+0x50>)
 8002054:	701a      	strb	r2, [r3, #0]
	}

	Menu_RefreshScreen();
 8002056:	f7ff fec7 	bl	8001de8 <Menu_RefreshScreen>
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000108 	.word	0x20000108
 8002064:	2000010c 	.word	0x2000010c
 8002068:	20000498 	.word	0x20000498

0800206c <Menu_Back>:

void Menu_Back(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <Menu_Back+0x7c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02e      	beq.n	80020da <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <Menu_Back+0x80>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <Menu_Back+0x84>)
 8002084:	2100      	movs	r1, #0
 8002086:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <Menu_Back+0x7c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <Menu_Back+0x7c>)
 8002090:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <Menu_Back+0x7c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <Menu_Back+0x88>)
 8002098:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <Menu_Back+0x80>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <Menu_Back+0x80>)
 80020a4:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	e007      	b.n	80020bc <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <Menu_Back+0x88>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <Menu_Back+0x88>)
 80020b4:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	3301      	adds	r3, #1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <Menu_Back+0x80>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <Menu_Back+0x84>)
 80020c6:	5c5b      	ldrb	r3, [r3, r1]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <Menu_Back+0x80>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <Menu_Back+0x8c>)
 80020d2:	5c1b      	ldrb	r3, [r3, r0]
 80020d4:	1acb      	subs	r3, r1, r3
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbe8      	blt.n	80020ac <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 80020da:	f7ff fe85 	bl	8001de8 <Menu_RefreshScreen>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000108 	.word	0x20000108
 80020ec:	20000498 	.word	0x20000498
 80020f0:	20000490 	.word	0x20000490
 80020f4:	2000010c 	.word	0x2000010c
 80020f8:	20000494 	.word	0x20000494

080020fc <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f001 fad7 	bl	80036bc <HAL_Delay>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <nRF24_SendSpi+0x28>)
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	b29a      	uxth	r2, r3
 800212c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	f003 ffdc 	bl	80060ee <HAL_SPI_Transmit>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000049c 	.word	0x2000049c

08002144 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <nRF24_ReadSpi+0x28>)
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	f004 f902 	bl	8006366 <HAL_SPI_Receive>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000049c 	.word	0x2000049c

08002170 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800217e:	2200      	movs	r2, #0
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <nRF24_ReadRegister+0x44>)
 8002184:	f002 fe1a 	bl	8004dbc <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ffc3 	bl	8002118 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8002192:	f107 030f 	add.w	r3, r7, #15
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ffd3 	bl	8002144 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800219e:	2201      	movs	r2, #1
 80021a0:	2140      	movs	r1, #64	; 0x40
 80021a2:	4804      	ldr	r0, [pc, #16]	; (80021b4 <nRF24_ReadRegister+0x44>)
 80021a4:	f002 fe0a 	bl	8004dbc <HAL_GPIO_WritePin>

	return result;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40020800 	.word	0x40020800

080021b8 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80021cc:	2200      	movs	r2, #0
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	480a      	ldr	r0, [pc, #40]	; (80021fc <nRF24_ReadRegisters+0x44>)
 80021d2:	f002 fdf3 	bl	8004dbc <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff9c 	bl	8002118 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f7ff ffad 	bl	8002144 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80021ea:	2201      	movs	r2, #1
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <nRF24_ReadRegisters+0x44>)
 80021f0:	f002 fde4 	bl	8004dbc <HAL_GPIO_WritePin>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40020800 	.word	0x40020800

08002200 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	460a      	mov	r2, r1
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	b2db      	uxtb	r3, r3
 8002218:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 800221e:	2200      	movs	r2, #0
 8002220:	2140      	movs	r1, #64	; 0x40
 8002222:	4809      	ldr	r0, [pc, #36]	; (8002248 <nRF24_WriteRegister+0x48>)
 8002224:	f002 fdca 	bl	8004dbc <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2102      	movs	r1, #2
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff72 	bl	8002118 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002234:	2201      	movs	r2, #1
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <nRF24_WriteRegister+0x48>)
 800223a:	f002 fdbf 	bl	8004dbc <HAL_GPIO_WritePin>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40020800 	.word	0x40020800

0800224c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	b2db      	uxtb	r3, r3
 8002264:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002266:	2200      	movs	r2, #0
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <nRF24_WriteRegisters+0x4c>)
 800226c:	f002 fda6 	bl	8004dbc <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff4f 	bl	8002118 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	4619      	mov	r1, r3
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f7ff ff4a 	bl	8002118 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002284:	2201      	movs	r2, #1
 8002286:	2140      	movs	r1, #64	; 0x40
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <nRF24_WriteRegisters+0x4c>)
 800228a:	f002 fd97 	bl	8004dbc <HAL_GPIO_WritePin>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40020800 	.word	0x40020800

0800229c <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 80022a2:	2200      	movs	r2, #0
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	4810      	ldr	r0, [pc, #64]	; (80022e8 <nRF24_TX_Mode+0x4c>)
 80022a8:	f002 fd88 	bl	8004dbc <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 80022ac:	f000 f81e 	bl	80022ec <nRF24_ReadConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f818 	bl	80022fc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80022cc:	2070      	movs	r0, #112	; 0x70
 80022ce:	f000 f870 	bl	80023b2 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80022d2:	f000 f87d 	bl	80023d0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80022d6:	f000 f895 	bl	8002404 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 80022da:	2001      	movs	r0, #1
 80022dc:	f7ff ff0e 	bl	80020fc <nRF24_Delay_ms>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40020800 	.word	0x40020800

080022ec <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff ff3d 	bl	8002170 <nRF24_ReadRegister>
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}

080022fc <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	4619      	mov	r1, r3
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff ff78 	bl	8002200 <nRF24_WriteRegister>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002322:	2006      	movs	r0, #6
 8002324:	f7ff ff24 	bl	8002170 <nRF24_ReadRegister>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	f023 0307 	bic.w	r3, r3, #7
 8002332:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	b25a      	sxtb	r2, r3
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4313      	orrs	r3, r2
 8002340:	b25b      	sxtb	r3, r3
 8002342:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	4619      	mov	r1, r3
 8002348:	2006      	movs	r0, #6
 800234a:	f7ff ff59 	bl	8002200 <nRF24_WriteRegister>
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002360:	2006      	movs	r0, #6
 8002362:	f7ff ff05 	bl	8002170 <nRF24_ReadRegister>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002370:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d104      	bne.n	8002382 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	f043 0320 	orr.w	r3, r3, #32
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e006      	b.n	8002390 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d103      	bne.n	8002390 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	f043 0308 	orr.w	r3, r3, #8
 800238e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	4619      	mov	r1, r3
 8002394:	2006      	movs	r0, #6
 8002396:	f7ff ff33 	bl	8002200 <nRF24_WriteRegister>
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80023a6:	2007      	movs	r0, #7
 80023a8:	f7ff fee2 	bl	8002170 <nRF24_ReadRegister>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4619      	mov	r1, r3
 80023c0:	2007      	movs	r0, #7
 80023c2:	f7ff ff1d 	bl	8002200 <nRF24_WriteRegister>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80023d6:	23e2      	movs	r3, #226	; 0xe2
 80023d8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80023da:	2200      	movs	r2, #0
 80023dc:	2140      	movs	r1, #64	; 0x40
 80023de:	4808      	ldr	r0, [pc, #32]	; (8002400 <nRF24_FlushRX+0x30>)
 80023e0:	f002 fcec 	bl	8004dbc <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe95 	bl	8002118 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80023ee:	2201      	movs	r2, #1
 80023f0:	2140      	movs	r1, #64	; 0x40
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <nRF24_FlushRX+0x30>)
 80023f4:	f002 fce2 	bl	8004dbc <HAL_GPIO_WritePin>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40020800 	.word	0x40020800

08002404 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800240a:	23e1      	movs	r3, #225	; 0xe1
 800240c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800240e:	2200      	movs	r2, #0
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	4808      	ldr	r0, [pc, #32]	; (8002434 <nRF24_FlushTX+0x30>)
 8002414:	f002 fcd2 	bl	8004dbc <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fe7b 	bl	8002118 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002422:	2201      	movs	r2, #1
 8002424:	2140      	movs	r1, #64	; 0x40
 8002426:	4803      	ldr	r0, [pc, #12]	; (8002434 <nRF24_FlushTX+0x30>)
 8002428:	f002 fcc8 	bl	8004dbc <HAL_GPIO_WritePin>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40020800 	.word	0x40020800

08002438 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002442:	f7ff ff53 	bl	80022ec <nRF24_ReadConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e003      	b.n	8002462 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	f023 0308 	bic.w	r3, r3, #8
 8002460:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff49 	bl	80022fc <nRF24_WriteConfig>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800247c:	f7ff ff36 	bl	80022ec <nRF24_ReadConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d104      	bne.n	8002494 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e003      	b.n	800249c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff2c 	bl	80022fc <nRF24_WriteConfig>
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	460a      	mov	r2, r1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	b25a      	sxtb	r2, r3
 80024c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	2004      	movs	r0, #4
 80024d6:	f7ff fe93 	bl	8002200 <nRF24_WriteRegister>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	2005      	movs	r0, #5
 80024f8:	f7ff fe82 	bl	8002200 <nRF24_WriteRegister>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	460a      	mov	r2, r1
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	4613      	mov	r3, r2
 8002512:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d901      	bls.n	800251e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800251a:	2305      	movs	r3, #5
 800251c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800251e:	2002      	movs	r0, #2
 8002520:	f7ff fe26 	bl	8002170 <nRF24_ReadRegister>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10a      	bne.n	8002544 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2201      	movs	r2, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	b25a      	sxtb	r2, r3
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253c:	4313      	orrs	r3, r2
 800253e:	b25b      	sxtb	r3, r3
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e00b      	b.n	800255c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2201      	movs	r2, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	b25b      	sxtb	r3, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	b25a      	sxtb	r2, r3
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4013      	ands	r3, r2
 8002558:	b25b      	sxtb	r3, r3
 800255a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4619      	mov	r1, r3
 8002560:	2002      	movs	r0, #2
 8002562:	f7ff fe4d 	bl	8002200 <nRF24_WriteRegister>
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	460a      	mov	r2, r1
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	4613      	mov	r3, r2
 800257c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d901      	bls.n	8002588 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002584:	2305      	movs	r3, #5
 8002586:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002588:	2001      	movs	r0, #1
 800258a:	f7ff fdf1 	bl	8002170 <nRF24_ReadRegister>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10a      	bne.n	80025ae <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2201      	movs	r2, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e00b      	b.n	80025c6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	b25a      	sxtb	r2, r3
 80025bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c0:	4013      	ands	r3, r2
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff fe18 	bl	8002200 <nRF24_WriteRegister>
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d901      	bls.n	80025ec <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80025e8:	2305      	movs	r3, #5
 80025ea:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d801      	bhi.n	80025f6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80025f2:	2303      	movs	r3, #3
 80025f4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	3b02      	subs	r3, #2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	2003      	movs	r0, #3
 8002606:	f7ff fdfb 	bl	8002200 <nRF24_WriteRegister>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	6039      	str	r1, [r7, #0]
 800261c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <nRF24_SetRXAddress+0x18>
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11d      	bne.n	8002666 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e00d      	b.n	800264c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	441a      	add	r2, r3
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	f1c3 0302 	rsb	r3, r3, #2
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	3310      	adds	r3, #16
 8002640:	443b      	add	r3, r7
 8002642:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3301      	adds	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d9ee      	bls.n	8002630 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	330a      	adds	r3, #10
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f107 010c 	add.w	r1, r7, #12
 800265c:	2203      	movs	r2, #3
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fdf4 	bl	800224c <nRF24_WriteRegisters>
	{
 8002664:	e00a      	b.n	800267c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	330a      	adds	r3, #10
 800266a:	b2da      	uxtb	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	3302      	adds	r3, #2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7ff fdc3 	bl	8002200 <nRF24_WriteRegister>
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2203      	movs	r2, #3
 8002692:	4619      	mov	r1, r3
 8002694:	200a      	movs	r0, #10
 8002696:	f7ff fd8f 	bl	80021b8 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e00c      	b.n	80026ba <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	f1c3 0302 	rsb	r3, r3, #2
 80026a8:	3210      	adds	r2, #16
 80026aa:	443a      	add	r2, r7
 80026ac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <nRF24_SetTXAddress+0x88>)
 80026b2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	3301      	adds	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d9ef      	bls.n	80026a0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e00d      	b.n	80026e2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	441a      	add	r2, r3
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	f1c3 0302 	rsb	r3, r3, #2
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	3310      	adds	r3, #16
 80026d6:	443b      	add	r3, r7
 80026d8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d9ee      	bls.n	80026c6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	2203      	movs	r2, #3
 80026ee:	4619      	mov	r1, r3
 80026f0:	200a      	movs	r0, #10
 80026f2:	f7ff fdab 	bl	800224c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	2203      	movs	r2, #3
 80026fc:	4619      	mov	r1, r3
 80026fe:	2010      	movs	r0, #16
 8002700:	f7ff fda4 	bl	800224c <nRF24_WriteRegisters>

}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200004a0 	.word	0x200004a0

08002710 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002716:	f7ff fe44 	bl	80023a2 <nRF24_ReadStatus>
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002724:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe42 	bl	80023b2 <nRF24_WriteStatus>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002740:	2060      	movs	r0, #96	; 0x60
 8002742:	f7ff fd15 	bl	8002170 <nRF24_ReadRegister>
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b20      	cmp	r3, #32
 800274e:	d906      	bls.n	800275e <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8002750:	f7ff fe3e 	bl	80023d0 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8002754:	2002      	movs	r0, #2
 8002756:	f7ff fcd1 	bl	80020fc <nRF24_Delay_ms>
        return 0;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 800275e:	79fb      	ldrb	r3, [r7, #7]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002772:	f7ff fdbb 	bl	80022ec <nRF24_ReadConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e003      	b.n	8002792 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002790:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fdb1 	bl	80022fc <nRF24_WriteConfig>
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80027ac:	f7ff fd9e 	bl	80022ec <nRF24_ReadConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e003      	b.n	80027cc <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	f023 0320 	bic.w	r3, r3, #32
 80027ca:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fd94 	bl	80022fc <nRF24_WriteConfig>
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80027e6:	f7ff fd81 	bl	80022ec <nRF24_ReadConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	f043 0310 	orr.w	r3, r3, #16
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e003      	b.n	8002806 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	f023 0310 	bic.w	r3, r3, #16
 8002804:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fd77 	bl	80022fc <nRF24_WriteConfig>
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	461a      	mov	r2, r3
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	20a0      	movs	r0, #160	; 0xa0
 800282a:	f7ff fd0f 	bl	800224c <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800283e:	2201      	movs	r2, #1
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	4810      	ldr	r0, [pc, #64]	; (8002884 <nRF24_WaitTX+0x4c>)
 8002844:	f002 faba 	bl	8004dbc <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8002848:	2001      	movs	r0, #1
 800284a:	f7ff fc57 	bl	80020fc <nRF24_Delay_ms>
	NRF24_CE_LOW;
 800284e:	2200      	movs	r2, #0
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	480c      	ldr	r0, [pc, #48]	; (8002884 <nRF24_WaitTX+0x4c>)
 8002854:	f002 fab2 	bl	8004dbc <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 8002858:	2001      	movs	r0, #1
 800285a:	f7ff fc4f 	bl	80020fc <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 800285e:	f7ff fda0 	bl	80023a2 <nRF24_ReadStatus>
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <nRF24_WaitTX+0x42>
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ee      	beq.n	8002858 <nRF24_WaitTX+0x20>

}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40020800 	.word	0x40020800

08002888 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8002892:	f7ff ff50 	bl	8002736 <nRF24_GetDynamicPayloadSize>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	2061      	movs	r0, #97	; 0x61
 80028a8:	f7ff fc86 	bl	80021b8 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d901      	bls.n	80028ca <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e007      	b.n	80028da <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa1 	bl	8002816 <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 80028d4:	f7ff ffb0 	bl	8002838 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <nRF24_IRQ_Handler+0x14>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	200004a6 	.word	0x200004a6

080028fc <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <nRF24_IRQ_Read+0x7c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d130      	bne.n	800296e <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <nRF24_IRQ_Read+0x7c>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8002912:	f7ff fd46 	bl	80023a2 <nRF24_ReadStatus>
 8002916:	4603      	mov	r3, r0
 8002918:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 800291e:	79bb      	ldrb	r3, [r7, #6]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <nRF24_IRQ_Read+0x80>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002934:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002936:	79bb      	ldrb	r3, [r7, #6]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <nRF24_IRQ_Read+0x84>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <nRF24_IRQ_Read+0x88>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fd22 	bl	80023b2 <nRF24_WriteStatus>
	}
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200004a6 	.word	0x200004a6
 800297c:	200004a3 	.word	0x200004a3
 8002980:	200004a4 	.word	0x200004a4
 8002984:	200004a5 	.word	0x200004a5

08002988 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 800298c:	f7ff ffb6 	bl	80028fc <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <nRF24_Event+0x44>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002998:	f7ff f904 	bl	8001ba4 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <nRF24_Event+0x44>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <nRF24_Event+0x48>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 80029aa:	f7ff f8e9 	bl	8001b80 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <nRF24_Event+0x48>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <nRF24_Event+0x4c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 80029bc:	f7ff f90c 	bl	8001bd8 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <nRF24_Event+0x4c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
	}
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200004a3 	.word	0x200004a3
 80029d0:	200004a4 	.word	0x200004a4
 80029d4:	200004a5 	.word	0x200004a5

080029d8 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80029e0:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <nRF24_Init+0xc4>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80029e6:	2200      	movs	r2, #0
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	482d      	ldr	r0, [pc, #180]	; (8002aa0 <nRF24_Init+0xc8>)
 80029ec:	f002 f9e6 	bl	8004dbc <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80029f0:	2201      	movs	r2, #1
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	482a      	ldr	r0, [pc, #168]	; (8002aa0 <nRF24_Init+0xc8>)
 80029f6:	f002 f9e1 	bl	8004dbc <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 80029fa:	2005      	movs	r0, #5
 80029fc:	f7ff fb7e 	bl	80020fc <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002a00:	2003      	movs	r0, #3
 8002a02:	f7ff fc89 	bl	8002318 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7ff fca5 	bl	8002356 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7ff fd13 	bl	8002438 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff fd2d 	bl	8002472 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002a18:	2107      	movs	r1, #7
 8002a1a:	2004      	movs	r0, #4
 8002a1c:	f7ff fd46 	bl	80024ac <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002a20:	201d      	movs	r0, #29
 8002a22:	f7ff fba5 	bl	8002170 <nRF24_ReadRegister>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	201d      	movs	r0, #29
 8002a32:	f7ff fbe5 	bl	8002200 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002a36:	213f      	movs	r1, #63	; 0x3f
 8002a38:	201c      	movs	r0, #28
 8002a3a:	f7ff fbe1 	bl	8002200 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f7ff fd4f 	bl	80024e2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002a44:	2101      	movs	r1, #1
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7ff fd5c 	bl	8002504 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7ff fd8d 	bl	800256e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002a54:	2003      	movs	r0, #3
 8002a56:	f7ff fdbf 	bl	80025d8 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f7ff fb4e 	bl	80020fc <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002a60:	2001      	movs	r0, #1
 8002a62:	f7ff fe81 	bl	8002768 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff fe9b 	bl	80027a2 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff feb5 	bl	80027dc <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7ff fb42 	bl	80020fc <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002a78:	f7ff fe4a 	bl	8002710 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8002a7c:	201d      	movs	r0, #29
 8002a7e:	f7ff fb77 	bl	8002170 <nRF24_ReadRegister>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	201d      	movs	r0, #29
 8002a8e:	f7ff fbb7 	bl	8002200 <nRF24_WriteRegister>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000049c 	.word	0x2000049c
 8002aa0:	40020800 	.word	0x40020800

08002aa4 <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <MenuTaskInit+0x2c>)
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <MenuTaskInit+0x30>)
 8002aac:	2004      	movs	r0, #4
 8002aae:	f7fe fadd 	bl	800106c <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <MenuTaskInit+0x30>)
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe fad8 	bl	800106c <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, Menu_Back, NULL);
 8002abc:	2200      	movs	r2, #0
 8002abe:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <MenuTaskInit+0x2c>)
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7fe fad3 	bl	800106c <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 8002ac6:	f7ff f98f 	bl	8001de8 <Menu_RefreshScreen>
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	0800206d 	.word	0x0800206d
 8002ad4:	08002019 	.word	0x08002019

08002ad8 <MenuTask>:

static void MenuTask(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 8002ae2:	f7fe fa7b 	bl	8000fdc <Inputs_GetEncoderCount>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dd02      	ble.n	8002af8 <MenuTask+0x20>
	{
		Menu_Next();
 8002af2:	f7ff fa2f 	bl	8001f54 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 8002af6:	e005      	b.n	8002b04 <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	da01      	bge.n	8002b04 <MenuTask+0x2c>
		Menu_Prev();
 8002b00:	f7ff fa58 	bl	8001fb4 <Menu_Prev>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <SimpleScheduler>:

void SimpleScheduler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 8002b12:	f7fe ffe1 	bl	8001ad8 <Radio_Process>

	if(0 == StartupInitFlag)
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <SimpleScheduler+0x78>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <SimpleScheduler+0x1c>
	{
		MenuTaskInit();								//Init for menu
 8002b1e:	f7ff ffc1 	bl	8002aa4 <MenuTaskInit>
		StartupInitFlag = 1;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <SimpleScheduler+0x78>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
	}

	Inputs_ButtonsRoutine();
 8002b28:	f7fe fa82 	bl	8001030 <Inputs_ButtonsRoutine>
	SubProgramStatus = Programs_PerformProgram();
 8002b2c:	f7fd fe5c 	bl	80007e8 <Programs_PerformProgram>
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d106      	bne.n	8002b48 <SimpleScheduler+0x3c>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002b3a:	f7fd fe49 	bl	80007d0 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002b3e:	f7fe fadb 	bl	80010f8 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002b42:	f7ff ffaf 	bl	8002aa4 <MenuTaskInit>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
		MenuTaskInit(); 							//Init for menu again
	}
}
 8002b46:	e018      	b.n	8002b7a <SimpleScheduler+0x6e>
	else if(SubProgramStatus == NO_PROGRAM_SET)		//if there is no pointer to program, perform menu task
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <SimpleScheduler+0x48>
		MenuTask();
 8002b4e:	f7ff ffc3 	bl	8002ad8 <MenuTask>
}
 8002b52:	e012      	b.n	8002b7a <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_LAUNCH_ERROR)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d106      	bne.n	8002b68 <SimpleScheduler+0x5c>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002b5a:	f7fd fe39 	bl	80007d0 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002b5e:	f7fe facb 	bl	80010f8 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002b62:	f7ff ff9f 	bl	8002aa4 <MenuTaskInit>
}
 8002b66:	e008      	b.n	8002b7a <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_EXIT_ERROR)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d105      	bne.n	8002b7a <SimpleScheduler+0x6e>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002b6e:	f7fd fe2f 	bl	80007d0 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002b72:	f7fe fac1 	bl	80010f8 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002b76:	f7ff ff95 	bl	8002aa4 <MenuTaskInit>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200004a7 	.word	0x200004a7

08002b88 <Radio_NewCommandReceivedCallback>:
//
//
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
	Parser_Controller(command, length);
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fe fad5 	bl	8001148 <Parser_Controller>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <MX_SPI2_Init+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bdc:	2218      	movs	r2, #24
 8002bde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bfa:	f003 f9ef 	bl	8005fdc <HAL_SPI_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c04:	f7ff f8ea 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200004a8 	.word	0x200004a8
 8002c10:	40003800 	.word	0x40003800

08002c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_SPI_MspInit+0x84>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12c      	bne.n	8002c90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c80:	2305      	movs	r3, #5
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <HAL_SPI_MspInit+0x8c>)
 8002c8c:	f001 fefa 	bl	8004a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40003800 	.word	0x40003800
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af04      	add	r7, sp, #16
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <OLED_SendCmdSequence+0x34>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2264      	movs	r2, #100	; 0x64
 8002cba:	9202      	str	r2, [sp, #8]
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2178      	movs	r1, #120	; 0x78
 8002cc8:	f002 f9ee 	bl	80050a8 <HAL_I2C_Mem_Write>
 8002ccc:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000500 	.word	0x20000500

08002cdc <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af04      	add	r7, sp, #16
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <OLED_SendData+0x30>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	2364      	movs	r3, #100	; 0x64
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	2178      	movs	r1, #120	; 0x78
 8002cfe:	f002 f9d3 	bl	80050a8 <HAL_I2C_Mem_Write>
 8002d02:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000500 	.word	0x20000500

08002d10 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <OLED_Init+0x28>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <OLED_Init+0x2c>)
 8002d20:	f000 f916 	bl	8002f50 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002d24:	2110      	movs	r1, #16
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <OLED_Init+0x30>)
 8002d28:	f7ff ffbc 	bl	8002ca4 <OLED_SendCmdSequence>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000500 	.word	0x20000500
 8002d3c:	0800875c 	.word	0x0800875c
 8002d40:	20000110 	.word	0x20000110

08002d44 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2b80      	cmp	r3, #128	; 0x80
 8002d5c:	d802      	bhi.n	8002d64 <OLED_SetDeviceCursor+0x20>
 8002d5e:	79bb      	ldrb	r3, [r7, #6]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d901      	bls.n	8002d68 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e01f      	b.n	8002da8 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f043 0310 	orr.w	r3, r3, #16
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002d86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002d94:	b25b      	sxtb	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	2103      	movs	r1, #3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff7f 	bl	8002ca4 <OLED_SendCmdSequence>

	return Status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	460a      	mov	r2, r1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db02      	blt.n	8002dce <OLED_MoveCursor+0x1e>
 8002dc8:	79bb      	ldrb	r3, [r7, #6]
 8002dca:	2b3f      	cmp	r3, #63	; 0x3f
 8002dcc:	d901      	bls.n	8002dd2 <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00b      	b.n	8002dea <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <OLED_MoveCursor+0x48>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002dd8:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <OLED_MoveCursor+0x48>)
 8002dda:	79bb      	ldrb	r3, [r7, #6]
 8002ddc:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002dde:	79bb      	ldrb	r3, [r7, #6]
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <OLED_MoveCursor+0x48>)
 8002de6:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000504 	.word	0x20000504

08002dfc <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
 8002e10:	e04f      	b.n	8002eb2 <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002e12:	78bb      	ldrb	r3, [r7, #2]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d116      	bne.n	8002e46 <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e20:	789b      	ldrb	r3, [r3, #2]
 8002e22:	01db      	lsls	r3, r3, #7
 8002e24:	4413      	add	r3, r2
 8002e26:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <OLED_WriteToBuffer+0xcc>)
 8002e28:	5cd1      	ldrb	r1, [r2, r3]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e36:	789b      	ldrb	r3, [r3, #2]
 8002e38:	01db      	lsls	r3, r3, #7
 8002e3a:	4403      	add	r3, r0
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	b2d1      	uxtb	r1, r2
 8002e40:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <OLED_WriteToBuffer+0xcc>)
 8002e42:	54d1      	strb	r1, [r2, r3]
 8002e44:	e020      	b.n	8002e88 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002e46:	78bb      	ldrb	r3, [r7, #2]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11b      	bne.n	8002e84 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e54:	789b      	ldrb	r3, [r3, #2]
 8002e56:	01db      	lsls	r3, r3, #7
 8002e58:	4413      	add	r3, r2
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <OLED_WriteToBuffer+0xcc>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	b25a      	sxtb	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b25a      	sxtb	r2, r3
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e76:	789b      	ldrb	r3, [r3, #2]
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	440b      	add	r3, r1
 8002e7c:	b2d1      	uxtb	r1, r2
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <OLED_WriteToBuffer+0xcc>)
 8002e80:	54d1      	strb	r1, [r2, r3]
 8002e82:	e001      	b.n	8002e88 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e019      	b.n	8002ebc <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <OLED_WriteToBuffer+0xc8>)
 8002e92:	7852      	ldrb	r2, [r2, #1]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff8a 	bl	8002db0 <OLED_MoveCursor>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00a      	b.n	8002ebc <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3ab      	bcc.n	8002e12 <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000504 	.word	0x20000504
 8002ec8:	20000510 	.word	0x20000510

08002ecc <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71bb      	strb	r3, [r7, #6]
 8002eda:	e019      	b.n	8002f10 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7ff ff2f 	bl	8002d44 <OLED_SetDeviceCursor>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	01db      	lsls	r3, r3, #7
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <OLED_SendBuffer+0x54>)
 8002ef6:	4413      	add	r3, r2
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff feee 	bl	8002cdc <OLED_SendData>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	71bb      	strb	r3, [r7, #6]
 8002f10:	79bb      	ldrb	r3, [r7, #6]
 8002f12:	2b07      	cmp	r3, #7
 8002f14:	d9e2      	bls.n	8002edc <OLED_SendBuffer+0x10>
	}
	return Status;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000510 	.word	0x20000510

08002f24 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	4613      	mov	r3, r2
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4803      	ldr	r0, [pc, #12]	; (8002f4c <OLED_ClearBuffer+0x28>)
 8002f3e:	f004 fd5d 	bl	80079fc <memset>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000510 	.word	0x20000510

08002f50 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3302      	adds	r3, #2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002f68:	7bbb      	ldrb	r3, [r7, #14]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d802      	bhi.n	8002f74 <OLED_ChangeFont+0x24>
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d901      	bls.n	8002f78 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e00e      	b.n	8002f96 <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <OLED_ChangeFont+0x54>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <OLED_ChangeFont+0x54>)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <OLED_ChangeFont+0x54>)
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <OLED_ChangeFont+0x54>)
 8002f92:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000508 	.word	0x20000508

08002fa8 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002fbc:	79bb      	ldrb	r3, [r7, #6]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d901      	bls.n	8002fc6 <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06f      	b.n	80030a6 <OLED_WriteChar+0xfe>
	}
	switch(character)
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	2b0a      	cmp	r3, #10
 8002fca:	d009      	beq.n	8002fe0 <OLED_WriteChar+0x38>
 8002fcc:	2b0d      	cmp	r3, #13
 8002fce:	d113      	bne.n	8002ff8 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <OLED_WriteChar+0x108>)
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff feea 	bl	8002db0 <OLED_MoveCursor>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	e062      	b.n	80030a6 <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <OLED_WriteChar+0x108>)
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <OLED_WriteChar+0x108>)
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	3308      	adds	r3, #8
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7ff fede 	bl	8002db0 <OLED_MoveCursor>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	e056      	b.n	80030a6 <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	4a2e      	ldr	r2, [pc, #184]	; (80030b4 <OLED_WriteChar+0x10c>)
 8002ffc:	7912      	ldrb	r2, [r2, #4]
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <OLED_WriteChar+0x10c>)
 8003004:	795b      	ldrb	r3, [r3, #5]
 8003006:	b29b      	uxth	r3, r3
 8003008:	fb12 f303 	smulbb	r3, r2, r3
 800300c:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <OLED_WriteChar+0x10c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	3304      	adds	r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 800301a:	2300      	movs	r3, #0
 800301c:	75bb      	strb	r3, [r7, #22]
 800301e:	e00c      	b.n	800303a <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8003020:	7dbb      	ldrb	r3, [r7, #22]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	3318      	adds	r3, #24
 8003028:	443b      	add	r3, r7
 800302a:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3301      	adds	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8003034:	7dbb      	ldrb	r3, [r7, #22]
 8003036:	3301      	adds	r3, #1
 8003038:	75bb      	strb	r3, [r7, #22]
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <OLED_WriteChar+0x10c>)
 800303c:	795b      	ldrb	r3, [r3, #5]
 800303e:	7dba      	ldrb	r2, [r7, #22]
 8003040:	429a      	cmp	r2, r3
 8003042:	d3ed      	bcc.n	8003020 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <OLED_WriteChar+0x10c>)
 8003046:	7959      	ldrb	r1, [r3, #5]
 8003048:	79ba      	ldrb	r2, [r7, #6]
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fed4 	bl	8002dfc <OLED_WriteToBuffer>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	4313      	orrs	r3, r2
 800305c:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <OLED_WriteChar+0x108>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <OLED_WriteChar+0x10c>)
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	4413      	add	r3, r2
 800306a:	2b7f      	cmp	r3, #127	; 0x7f
 800306c:	dd1a      	ble.n	80030a4 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <OLED_WriteChar+0x108>)
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8003076:	2100      	movs	r1, #0
 8003078:	2000      	movs	r0, #0
 800307a:	f7ff fe99 	bl	8002db0 <OLED_MoveCursor>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	4313      	orrs	r3, r2
 8003086:	75fb      	strb	r3, [r7, #23]
 8003088:	e00c      	b.n	80030a4 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <OLED_WriteChar+0x108>)
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	3308      	adds	r3, #8
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4619      	mov	r1, r3
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fe8b 	bl	8002db0 <OLED_MoveCursor>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000504 	.word	0x20000504
 80030b4:	20000508 	.word	0x20000508

080030b8 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d910      	bls.n	80030f0 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e013      	b.n	80030fa <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff64 	bl	8002fa8 <OLED_WriteChar>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	73fb      	strb	r3, [r7, #15]
		String++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3301      	adds	r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
	while(*String)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ec      	bne.n	80030d2 <OLED_WriteString+0x1a>
	}
	return Status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <OLED_WriteInt>:

OLED_Status OLED_WriteInt(int Value, uint8_t color)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
	if(color > 1)
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d901      	bls.n	800311a <OLED_WriteInt+0x16>
	{
		return OLED_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <OLED_WriteInt+0x34>
	}

	char Buffer[5];
	sprintf(Buffer,"%d",Value);
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4907      	ldr	r1, [pc, #28]	; (8003140 <OLED_WriteInt+0x3c>)
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fb72 	bl	800780c <siprintf>
	return OLED_WriteString(Buffer, color);
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ffc1 	bl	80030b8 <OLED_WriteString>
 8003136:	4603      	mov	r3, r0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	08008758 	.word	0x08008758

08003144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_MspInit+0x4c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <HAL_MspInit+0x4c>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_MspInit+0x4c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_MspInit+0x4c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_MspInit+0x4c>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_MspInit+0x4c>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <NMI_Handler+0x4>

0800319a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319e:	e7fe      	b.n	800319e <HardFault_Handler+0x4>

080031a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <MemManage_Handler+0x4>

080031a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031aa:	e7fe      	b.n	80031aa <BusFault_Handler+0x4>

080031ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <UsageFault_Handler+0x4>

080031b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e0:	f000 fa4c 	bl	800367c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <ADC_IRQHandler+0x10>)
 80031ee:	f000 facc 	bl	800378a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200001c0 	.word	0x200001c0

080031fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003202:	f003 ff83 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2000095c 	.word	0x2000095c

08003210 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <SPI2_IRQHandler+0x10>)
 8003216:	f003 fb59 	bl	80068cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200004a8 	.word	0x200004a8

08003224 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8003228:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800322c:	f001 fde0 	bl	8004df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <DMA2_Stream0_IRQHandler+0x10>)
 800323a:	f001 f9b9 	bl	80045b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000208 	.word	0x20000208

08003248 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e00a      	b.n	8003270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800325a:	f3af 8000 	nop.w
 800325e:	4601      	mov	r1, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	60ba      	str	r2, [r7, #8]
 8003266:	b2ca      	uxtb	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	dbf0      	blt.n	800325a <_read+0x12>
  }

  return len;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e009      	b.n	80032a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	60ba      	str	r2, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fd81 	bl	8001da4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dbf1      	blt.n	8003294 <_write+0x12>
  }
  return len;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_close>:

int _close(int file)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032e2:	605a      	str	r2, [r3, #4]
  return 0;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <_isatty>:

int _isatty(int file)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <_sbrk+0x5c>)
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <_sbrk+0x60>)
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <_sbrk+0x64>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <_sbrk+0x68>)
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <_sbrk+0x64>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003354:	f004 fba0 	bl	8007a98 <__errno>
 8003358:	4603      	mov	r3, r0
 800335a:	220c      	movs	r2, #12
 800335c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e009      	b.n	8003378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <_sbrk+0x64>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <_sbrk+0x64>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <_sbrk+0x64>)
 8003374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20020000 	.word	0x20020000
 8003384:	00000400 	.word	0x00000400
 8003388:	20000910 	.word	0x20000910
 800338c:	20000af8 	.word	0x20000af8

08003390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <SystemInit+0x20>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <SystemInit+0x20>)
 800339c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fb1a 	bl	80079fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <MX_TIM3_Init+0xa0>)
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <MX_TIM3_Init+0xa4>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <MX_TIM3_Init+0xa0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <MX_TIM3_Init+0xa0>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033e2:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <MX_TIM3_Init+0xa0>)
 80033e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <MX_TIM3_Init+0xa0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <MX_TIM3_Init+0xa0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033f6:	2303      	movs	r3, #3
 80033f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800340e:	2301      	movs	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003412:	2300      	movs	r3, #0
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	4619      	mov	r1, r3
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <MX_TIM3_Init+0xa0>)
 8003422:	f003 fd3f 	bl	8006ea4 <HAL_TIM_Encoder_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800342c:	f7fe fcd6 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <MX_TIM3_Init+0xa0>)
 800343e:	f004 f845 	bl	80074cc <HAL_TIMEx_MasterConfigSynchronization>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003448:	f7fe fcc8 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800344c:	bf00      	nop
 800344e:	3730      	adds	r7, #48	; 0x30
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000914 	.word	0x20000914
 8003458:	40000400 	.word	0x40000400

0800345c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_TIM10_Init+0x40>)
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <MX_TIM10_Init+0x44>)
 8003464:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <MX_TIM10_Init+0x40>)
 8003468:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800346c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <MX_TIM10_Init+0x40>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <MX_TIM10_Init+0x40>)
 8003476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <MX_TIM10_Init+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <MX_TIM10_Init+0x40>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003488:	4804      	ldr	r0, [pc, #16]	; (800349c <MX_TIM10_Init+0x40>)
 800348a:	f003 fc61 	bl	8006d50 <HAL_TIM_Base_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003494:	f7fe fca2 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	2000095c 	.word	0x2000095c
 80034a0:	40014400 	.word	0x40014400

080034a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <HAL_TIM_Encoder_MspInit+0x84>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d12b      	bne.n	800351e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_TIM_Encoder_MspInit+0x88>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a17      	ldr	r2, [pc, #92]	; (800352c <HAL_TIM_Encoder_MspInit+0x88>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_TIM_Encoder_MspInit+0x88>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_TIM_Encoder_MspInit+0x88>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a10      	ldr	r2, [pc, #64]	; (800352c <HAL_TIM_Encoder_MspInit+0x88>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_TIM_Encoder_MspInit+0x88>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80034fe:	23c0      	movs	r3, #192	; 0xc0
 8003500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800350e:	2302      	movs	r3, #2
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	4805      	ldr	r0, [pc, #20]	; (8003530 <HAL_TIM_Encoder_MspInit+0x8c>)
 800351a:	f001 fab3 	bl	8004a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800351e:	bf00      	nop
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40000400 	.word	0x40000400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020000 	.word	0x40020000

08003534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_TIM_Base_MspInit+0x48>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d115      	bne.n	8003572 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_TIM_Base_MspInit+0x4c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <HAL_TIM_Base_MspInit+0x4c>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_TIM_Base_MspInit+0x4c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2019      	movs	r0, #25
 8003568:	f000 fec3 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800356c:	2019      	movs	r0, #25
 800356e:	f000 fedc 	bl	800432a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40014400 	.word	0x40014400
 8003580:	40023800 	.word	0x40023800

08003584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003588:	480d      	ldr	r0, [pc, #52]	; (80035c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800358a:	490e      	ldr	r1, [pc, #56]	; (80035c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800358e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003590:	e002      	b.n	8003598 <LoopCopyDataInit>

08003592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003596:	3304      	adds	r3, #4

08003598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800359a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800359c:	d3f9      	bcc.n	8003592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035a0:	4c0b      	ldr	r4, [pc, #44]	; (80035d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a4:	e001      	b.n	80035aa <LoopFillZerobss>

080035a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a8:	3204      	adds	r2, #4

080035aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ac:	d3fb      	bcc.n	80035a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ae:	f7ff feef 	bl	8003390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035b2:	f004 fa77 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035b6:	f7fe fb43 	bl	8001c40 <main>
  bx  lr    
 80035ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035c4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80035c8:	08008a04 	.word	0x08008a04
  ldr r2, =_sbss
 80035cc:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80035d0:	20000af4 	.word	0x20000af4

080035d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035d4:	e7fe      	b.n	80035d4 <DMA1_Stream0_IRQHandler>
	...

080035d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_Init+0x40>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <HAL_Init+0x40>)
 80035e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_Init+0x40>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <HAL_Init+0x40>)
 80035ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_Init+0x40>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a07      	ldr	r2, [pc, #28]	; (8003618 <HAL_Init+0x40>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003600:	2003      	movs	r0, #3
 8003602:	f000 fe6b 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003606:	200f      	movs	r0, #15
 8003608:	f000 f808 	bl	800361c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800360c:	f7ff fd9a 	bl	8003144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023c00 	.word	0x40023c00

0800361c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_InitTick+0x54>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_InitTick+0x58>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4619      	mov	r1, r3
 800362e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003632:	fbb3 f3f1 	udiv	r3, r3, r1
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fe83 	bl	8004346 <HAL_SYSTICK_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e00e      	b.n	8003668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b0f      	cmp	r3, #15
 800364e:	d80a      	bhi.n	8003666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003650:	2200      	movs	r2, #0
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f000 fe4b 	bl	80042f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800365c:	4a06      	ldr	r2, [pc, #24]	; (8003678 <HAL_InitTick+0x5c>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000120 	.word	0x20000120
 8003674:	20000128 	.word	0x20000128
 8003678:	20000124 	.word	0x20000124

0800367c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_IncTick+0x20>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_IncTick+0x24>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4413      	add	r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_IncTick+0x24>)
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000128 	.word	0x20000128
 80036a0:	200009a4 	.word	0x200009a4

080036a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return uwTick;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_GetTick+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	200009a4 	.word	0x200009a4

080036bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c4:	f7ff ffee 	bl	80036a4 <HAL_GetTick>
 80036c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d005      	beq.n	80036e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_Delay+0x44>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036e2:	bf00      	nop
 80036e4:	f7ff ffde 	bl	80036a4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d8f7      	bhi.n	80036e4 <HAL_Delay+0x28>
  {
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000128 	.word	0x20000128

08003704 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e033      	b.n	8003782 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fab4 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800374a:	f023 0302 	bic.w	r3, r3, #2
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fb68 	bl	8003e2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
 8003772:	e001      	b.n	8003778 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d049      	beq.n	8003854 <HAL_ADC_IRQHandler+0xca>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d046      	beq.n	8003854 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d12b      	bne.n	8003844 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d127      	bne.n	8003844 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800380c:	2b00      	cmp	r3, #0
 800380e:	d119      	bne.n	8003844 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0220 	bic.w	r2, r2, #32
 800381e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fb69 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f06f 0212 	mvn.w	r2, #18
 8003852:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d057      	beq.n	800391a <HAL_ADC_IRQHandler+0x190>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d054      	beq.n	800391a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d139      	bne.n	800390a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d12b      	bne.n	800390a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d124      	bne.n	800390a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d119      	bne.n	800390a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fc0c 	bl	8004128 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 020c 	mvn.w	r2, #12
 8003918:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_ADC_IRQHandler+0x1d6>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d014      	beq.n	8003960 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10d      	bne.n	8003960 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f925 	bl	8003ba0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f06f 0201 	mvn.w	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800396e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_ADC_IRQHandler+0x218>
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f043 0202 	orr.w	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0220 	mvn.w	r2, #32
 8003990:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f90e 	bl	8003bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0220 	mvn.w	r2, #32
 80039a0:	601a      	str	r2, [r3, #0]
  }
}
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_Start_DMA+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0ce      	b.n	8003b68 <HAL_ADC_Start_DMA+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d018      	beq.n	8003a12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039f0:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_ADC_Start_DMA+0x1c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a5f      	ldr	r2, [pc, #380]	; (8003b74 <HAL_ADC_Start_DMA+0x1c8>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0c9a      	lsrs	r2, r3, #18
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d107      	bne.n	8003a32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 8086 	bne.w	8003b4e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d106      	bne.n	8003a90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f023 0206 	bic.w	r2, r3, #6
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a8e:	e002      	b.n	8003a96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_ADC_Start_DMA+0x1cc>)
 8003aa0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <HAL_ADC_Start_DMA+0x1d0>)
 8003aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	4a34      	ldr	r2, [pc, #208]	; (8003b80 <HAL_ADC_Start_DMA+0x1d4>)
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	4a33      	ldr	r2, [pc, #204]	; (8003b84 <HAL_ADC_Start_DMA+0x1d8>)
 8003ab8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ad2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	334c      	adds	r3, #76	; 0x4c
 8003aee:	4619      	mov	r1, r3
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f000 fce2 	bl	80044bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10f      	bne.n	8003b24 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d129      	bne.n	8003b66 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	e020      	b.n	8003b66 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_ADC_Start_DMA+0x1dc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d11b      	bne.n	8003b66 <HAL_ADC_Start_DMA+0x1ba>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d114      	bne.n	8003b66 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	e00b      	b.n	8003b66 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000120 	.word	0x20000120
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	40012300 	.word	0x40012300
 8003b7c:	08004025 	.word	0x08004025
 8003b80:	080040df 	.word	0x080040df
 8003b84:	080040fb 	.word	0x080040fb
 8003b88:	40012000 	.word	0x40012000

08003b8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x1c>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e113      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x244>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b09      	cmp	r3, #9
 8003bf2:	d925      	bls.n	8003c40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68d9      	ldr	r1, [r3, #12]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	3b1e      	subs	r3, #30
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43da      	mvns	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	400a      	ands	r2, r1
 8003c18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68d9      	ldr	r1, [r3, #12]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4403      	add	r3, r0
 8003c32:	3b1e      	subs	r3, #30
 8003c34:	409a      	lsls	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	e022      	b.n	8003c86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6919      	ldr	r1, [r3, #16]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	2207      	movs	r2, #7
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	400a      	ands	r2, r1
 8003c62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6919      	ldr	r1, [r3, #16]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4618      	mov	r0, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4403      	add	r3, r0
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3b05      	subs	r3, #5
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	400a      	ands	r2, r1
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b05      	subs	r3, #5
 8003cca:	fa00 f203 	lsl.w	r2, r0, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd6:	e04c      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d824      	bhi.n	8003d2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	3b23      	subs	r3, #35	; 0x23
 8003cf2:	221f      	movs	r2, #31
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	400a      	ands	r2, r1
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4618      	mov	r0, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b23      	subs	r3, #35	; 0x23
 8003d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
 8003d28:	e023      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	3b41      	subs	r3, #65	; 0x41
 8003d3c:	221f      	movs	r2, #31
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	400a      	ands	r2, r1
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4618      	mov	r0, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	3b41      	subs	r3, #65	; 0x41
 8003d66:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <HAL_ADC_ConfigChannel+0x250>)
 8003d74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <HAL_ADC_ConfigChannel+0x254>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10f      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x1d8>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b12      	cmp	r3, #18
 8003d86:	d10b      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_ADC_ConfigChannel+0x254>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d12b      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x23a>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_ADC_ConfigChannel+0x258>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x1f4>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b11      	cmp	r3, #17
 8003dba:	d122      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_ADC_ConfigChannel+0x258>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_ADC_ConfigChannel+0x25c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <HAL_ADC_ConfigChannel+0x260>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	0c9a      	lsrs	r2, r3, #18
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003df4:	e002      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f9      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40012300 	.word	0x40012300
 8003e1c:	40012000 	.word	0x40012000
 8003e20:	10000012 	.word	0x10000012
 8003e24:	20000120 	.word	0x20000120
 8003e28:	431bde83 	.word	0x431bde83

08003e2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <ADC_Init+0x1f0>)
 8003e36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	4a58      	ldr	r2, [pc, #352]	; (8004020 <ADC_Init+0x1f4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d022      	beq.n	8003f0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6899      	ldr	r1, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6899      	ldr	r1, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	e00f      	b.n	8003f2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0202 	bic.w	r2, r2, #2
 8003f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6899      	ldr	r1, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7e1b      	ldrb	r3, [r3, #24]
 8003f44:	005a      	lsls	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01b      	beq.n	8003f90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	3b01      	subs	r3, #1
 8003f84:	035a      	lsls	r2, r3, #13
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e007      	b.n	8003fa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	051a      	lsls	r2, r3, #20
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6899      	ldr	r1, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fe2:	025a      	lsls	r2, r3, #9
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6899      	ldr	r1, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	029a      	lsls	r2, r3, #10
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40012300 	.word	0x40012300
 8004020:	0f000001 	.word	0x0f000001

08004024 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	d13c      	bne.n	80040b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d12b      	bne.n	80040b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800405c:	2b00      	cmp	r3, #0
 800405e:	d127      	bne.n	80040b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004078:	2b00      	cmp	r3, #0
 800407a:	d119      	bne.n	80040b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0220 	bic.w	r2, r2, #32
 800408a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7fc ff33 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040b6:	e00e      	b.n	80040d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff fd75 	bl	8003bb4 <HAL_ADC_ErrorCallback>
}
 80040ca:	e004      	b.n	80040d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fd4d 	bl	8003b8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2240      	movs	r2, #64	; 0x40
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f043 0204 	orr.w	r2, r3, #4
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fd4a 	bl	8003bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <__NVIC_SetPriorityGrouping>:
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416e:	4a04      	ldr	r2, [pc, #16]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	60d3      	str	r3, [r2, #12]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_GetPriorityGrouping>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_SetPriority>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	; (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <__NVIC_SetPriority+0x50>)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <NVIC_EncodePriority>:
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f1c3 0307 	rsb	r3, r3, #7
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf28      	it	cs
 800424e:	2304      	movcs	r3, #4
 8004250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3304      	adds	r3, #4
 8004256:	2b06      	cmp	r3, #6
 8004258:	d902      	bls.n	8004260 <NVIC_EncodePriority+0x30>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3b03      	subs	r3, #3
 800425e:	e000      	b.n	8004262 <NVIC_EncodePriority+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	401a      	ands	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004278:	f04f 31ff 	mov.w	r1, #4294967295
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43d9      	mvns	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	4313      	orrs	r3, r2
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SysTick_Config>:
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a8:	d301      	bcc.n	80042ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <SysTick_Config+0x40>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b6:	210f      	movs	r1, #15
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	f7ff ff8e 	bl	80041dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <SysTick_Config+0x40>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <SysTick_Config+0x40>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff29 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004304:	f7ff ff3e 	bl	8004184 <__NVIC_GetPriorityGrouping>
 8004308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff ff8e 	bl	8004230 <NVIC_EncodePriority>
 8004314:	4602      	mov	r2, r0
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff5d 	bl	80041dc <__NVIC_SetPriority>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff31 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffa2 	bl	8004298 <SysTick_Config>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff f99a 	bl	80036a4 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e099      	b.n	80044b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439c:	e00f      	b.n	80043be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439e:	f7ff f981 	bl	80036a4 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d908      	bls.n	80043be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2203      	movs	r2, #3
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e078      	b.n	80044b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e8      	bne.n	800439e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_DMA_Init+0x158>)
 80043d8:	4013      	ands	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	4313      	orrs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	2b04      	cmp	r3, #4
 8004450:	d117      	bne.n	8004482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa91 	bl	800498c <DMA_CheckFifoParam>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800447e:	2301      	movs	r3, #1
 8004480:	e016      	b.n	80044b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa48 	bl	8004920 <DMA_CalcBaseAndBitshift>
 8004490:	4603      	mov	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	223f      	movs	r2, #63	; 0x3f
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	f010803f 	.word	0xf010803f

080044bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_DMA_Start_IT+0x26>
 80044de:	2302      	movs	r3, #2
 80044e0:	e040      	b.n	8004564 <HAL_DMA_Start_IT+0xa8>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12f      	bne.n	8004556 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f9da 	bl	80048c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	223f      	movs	r2, #63	; 0x3f
 8004516:	409a      	lsls	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0216 	orr.w	r2, r2, #22
 800452a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e005      	b.n	8004562 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800455e:	2302      	movs	r3, #2
 8004560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004562:	7dfb      	ldrb	r3, [r7, #23]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d004      	beq.n	800458a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e00c      	b.n	80045a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2205      	movs	r2, #5
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045bc:	4b8e      	ldr	r3, [pc, #568]	; (80047f8 <HAL_DMA_IRQHandler+0x248>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a8e      	ldr	r2, [pc, #568]	; (80047fc <HAL_DMA_IRQHandler+0x24c>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0a9b      	lsrs	r3, r3, #10
 80045c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	2208      	movs	r2, #8
 80045dc:	409a      	lsls	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01a      	beq.n	800461c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d013      	beq.n	800461c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0204 	bic.w	r2, r2, #4
 8004602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	2208      	movs	r2, #8
 800460a:	409a      	lsls	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	2201      	movs	r2, #1
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d012      	beq.n	8004652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	2201      	movs	r2, #1
 8004640:	409a      	lsls	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f043 0202 	orr.w	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	2204      	movs	r2, #4
 8004658:	409a      	lsls	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	2204      	movs	r2, #4
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0204 	orr.w	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2210      	movs	r2, #16
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d043      	beq.n	8004720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d03c      	beq.n	8004720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2210      	movs	r2, #16
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d018      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d024      	beq.n	8004720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
 80046de:	e01f      	b.n	8004720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01b      	beq.n	8004720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
 80046f0:	e016      	b.n	8004720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d107      	bne.n	8004710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0208 	bic.w	r2, r2, #8
 800470e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	2220      	movs	r2, #32
 8004726:	409a      	lsls	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 808f 	beq.w	8004850 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8087 	beq.w	8004850 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	2220      	movs	r2, #32
 8004748:	409a      	lsls	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b05      	cmp	r3, #5
 8004758:	d136      	bne.n	80047c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0216 	bic.w	r2, r2, #22
 8004768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_DMA_IRQHandler+0x1da>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0208 	bic.w	r2, r2, #8
 8004798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	223f      	movs	r2, #63	; 0x3f
 80047a0:	409a      	lsls	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d07e      	beq.n	80048bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
        }
        return;
 80047c6:	e079      	b.n	80048bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01d      	beq.n	8004812 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10d      	bne.n	8004800 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d031      	beq.n	8004850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
 80047f4:	e02c      	b.n	8004850 <HAL_DMA_IRQHandler+0x2a0>
 80047f6:	bf00      	nop
 80047f8:	20000120 	.word	0x20000120
 80047fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d023      	beq.n	8004850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
 8004810:	e01e      	b.n	8004850 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10f      	bne.n	8004840 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0210 	bic.w	r2, r2, #16
 800482e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	2b00      	cmp	r3, #0
 8004856:	d032      	beq.n	80048be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d022      	beq.n	80048aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2205      	movs	r2, #5
 8004868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3301      	adds	r3, #1
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	429a      	cmp	r2, r3
 8004886:	d307      	bcc.n	8004898 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f2      	bne.n	800487c <HAL_DMA_IRQHandler+0x2cc>
 8004896:	e000      	b.n	800489a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004898:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
 80048ba:	e000      	b.n	80048be <HAL_DMA_IRQHandler+0x30e>
        return;
 80048bc:	bf00      	nop
    }
  }
}
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d108      	bne.n	8004904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004902:	e007      	b.n	8004914 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	3b10      	subs	r3, #16
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <DMA_CalcBaseAndBitshift+0x64>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <DMA_CalcBaseAndBitshift+0x68>)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d909      	bls.n	8004962 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	659a      	str	r2, [r3, #88]	; 0x58
 8004960:	e007      	b.n	8004972 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	aaaaaaab 	.word	0xaaaaaaab
 8004988:	080089b8 	.word	0x080089b8

0800498c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11f      	bne.n	80049e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d856      	bhi.n	8004a5a <DMA_CheckFifoParam+0xce>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <DMA_CheckFifoParam+0x28>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049d7 	.word	0x080049d7
 80049bc:	080049c5 	.word	0x080049c5
 80049c0:	08004a5b 	.word	0x08004a5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d046      	beq.n	8004a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d4:	e043      	b.n	8004a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049de:	d140      	bne.n	8004a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e4:	e03d      	b.n	8004a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	d121      	bne.n	8004a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d837      	bhi.n	8004a66 <DMA_CheckFifoParam+0xda>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <DMA_CheckFifoParam+0x70>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a13 	.word	0x08004a13
 8004a04:	08004a0d 	.word	0x08004a0d
 8004a08:	08004a25 	.word	0x08004a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a10:	e030      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d025      	beq.n	8004a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a22:	e022      	b.n	8004a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a2c:	d11f      	bne.n	8004a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a32:	e01c      	b.n	8004a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d903      	bls.n	8004a42 <DMA_CheckFifoParam+0xb6>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d003      	beq.n	8004a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a40:	e018      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
      break;
 8004a46:	e015      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00e      	beq.n	8004a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      break;
 8004a58:	e00b      	b.n	8004a72 <DMA_CheckFifoParam+0xe6>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e00a      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e008      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      break;
 8004a62:	bf00      	nop
 8004a64:	e006      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      break;
 8004a66:	bf00      	nop
 8004a68:	e004      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e002      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <DMA_CheckFifoParam+0xe8>
      break;
 8004a72:	bf00      	nop
    }
  } 
  
  return status; 
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop

08004a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	; 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	e159      	b.n	8004d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	f040 8148 	bne.w	8004d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d005      	beq.n	8004ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d130      	bne.n	8004b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 0201 	and.w	r2, r3, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d017      	beq.n	8004b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d123      	bne.n	8004bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	08da      	lsrs	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3208      	adds	r2, #8
 8004b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	220f      	movs	r2, #15
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	08da      	lsrs	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	69b9      	ldr	r1, [r7, #24]
 8004bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0203 	and.w	r2, r3, #3
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a2 	beq.w	8004d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	4a56      	ldr	r2, [pc, #344]	; (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c18:	6453      	str	r3, [r2, #68]	; 0x44
 8004c1a:	4b54      	ldr	r3, [pc, #336]	; (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c26:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <HAL_GPIO_Init+0x2ec>)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	220f      	movs	r2, #15
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a49      	ldr	r2, [pc, #292]	; (8004d74 <HAL_GPIO_Init+0x2f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d019      	beq.n	8004c86 <HAL_GPIO_Init+0x202>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a48      	ldr	r2, [pc, #288]	; (8004d78 <HAL_GPIO_Init+0x2f4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_GPIO_Init+0x1fe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a47      	ldr	r2, [pc, #284]	; (8004d7c <HAL_GPIO_Init+0x2f8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00d      	beq.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a46      	ldr	r2, [pc, #280]	; (8004d80 <HAL_GPIO_Init+0x2fc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <HAL_GPIO_Init+0x1f6>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a45      	ldr	r2, [pc, #276]	; (8004d84 <HAL_GPIO_Init+0x300>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <HAL_GPIO_Init+0x1f2>
 8004c72:	2304      	movs	r3, #4
 8004c74:	e008      	b.n	8004c88 <HAL_GPIO_Init+0x204>
 8004c76:	2307      	movs	r3, #7
 8004c78:	e006      	b.n	8004c88 <HAL_GPIO_Init+0x204>
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e004      	b.n	8004c88 <HAL_GPIO_Init+0x204>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e002      	b.n	8004c88 <HAL_GPIO_Init+0x204>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_GPIO_Init+0x204>
 8004c86:	2300      	movs	r3, #0
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	f002 0203 	and.w	r2, r2, #3
 8004c8e:	0092      	lsls	r2, r2, #2
 8004c90:	4093      	lsls	r3, r2
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c98:	4935      	ldr	r1, [pc, #212]	; (8004d70 <HAL_GPIO_Init+0x2ec>)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ca6:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cca:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cfa:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d24:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d48:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <HAL_GPIO_Init+0x304>)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	f67f aea2 	bls.w	8004aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40020000 	.word	0x40020000
 8004d78:	40020400 	.word	0x40020400
 8004d7c:	40020800 	.word	0x40020800
 8004d80:	40020c00 	.word	0x40020c00
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40013c00 	.word	0x40013c00

08004d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e001      	b.n	8004dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	807b      	strh	r3, [r7, #2]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dcc:	787b      	ldrb	r3, [r7, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dd2:	887a      	ldrh	r2, [r7, #2]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dd8:	e003      	b.n	8004de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dda:	887b      	ldrh	r3, [r7, #2]
 8004ddc:	041a      	lsls	r2, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	619a      	str	r2, [r3, #24]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e06:	4a05      	ldr	r2, [pc, #20]	; (8004e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc ffd5 	bl	8001dbe <HAL_GPIO_EXTI_Callback>
  }
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40013c00 	.word	0x40013c00

08004e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e12b      	b.n	800508a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fbc0 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e84:	f001 f896 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4a81      	ldr	r2, [pc, #516]	; (8005094 <HAL_I2C_Init+0x274>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d807      	bhi.n	8004ea4 <HAL_I2C_Init+0x84>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a80      	ldr	r2, [pc, #512]	; (8005098 <HAL_I2C_Init+0x278>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bf94      	ite	ls
 8004e9c:	2301      	movls	r3, #1
 8004e9e:	2300      	movhi	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e006      	b.n	8004eb2 <HAL_I2C_Init+0x92>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a7d      	ldr	r2, [pc, #500]	; (800509c <HAL_I2C_Init+0x27c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bf94      	ite	ls
 8004eac:	2301      	movls	r3, #1
 8004eae:	2300      	movhi	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0e7      	b.n	800508a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a78      	ldr	r2, [pc, #480]	; (80050a0 <HAL_I2C_Init+0x280>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	0c9b      	lsrs	r3, r3, #18
 8004ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a6a      	ldr	r2, [pc, #424]	; (8005094 <HAL_I2C_Init+0x274>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d802      	bhi.n	8004ef4 <HAL_I2C_Init+0xd4>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	e009      	b.n	8004f08 <HAL_I2C_Init+0xe8>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	4a69      	ldr	r2, [pc, #420]	; (80050a4 <HAL_I2C_Init+0x284>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	099b      	lsrs	r3, r3, #6
 8004f06:	3301      	adds	r3, #1
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	495c      	ldr	r1, [pc, #368]	; (8005094 <HAL_I2C_Init+0x274>)
 8004f24:	428b      	cmp	r3, r1
 8004f26:	d819      	bhi.n	8004f5c <HAL_I2C_Init+0x13c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1e59      	subs	r1, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f36:	1c59      	adds	r1, r3, #1
 8004f38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f3c:	400b      	ands	r3, r1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_I2C_Init+0x138>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1e59      	subs	r1, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f50:	3301      	adds	r3, #1
 8004f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f56:	e051      	b.n	8004ffc <HAL_I2C_Init+0x1dc>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	e04f      	b.n	8004ffc <HAL_I2C_Init+0x1dc>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d111      	bne.n	8004f88 <HAL_I2C_Init+0x168>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1e58      	subs	r0, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6859      	ldr	r1, [r3, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	440b      	add	r3, r1
 8004f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f76:	3301      	adds	r3, #1
 8004f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e012      	b.n	8004fae <HAL_I2C_Init+0x18e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1e58      	subs	r0, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	0099      	lsls	r1, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Init+0x196>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e022      	b.n	8004ffc <HAL_I2C_Init+0x1dc>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10e      	bne.n	8004fdc <HAL_I2C_Init+0x1bc>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1e58      	subs	r0, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	440b      	add	r3, r1
 8004fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	e00f      	b.n	8004ffc <HAL_I2C_Init+0x1dc>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1e58      	subs	r0, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	0099      	lsls	r1, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	6809      	ldr	r1, [r1, #0]
 8005000:	4313      	orrs	r3, r2
 8005002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800502a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6911      	ldr	r1, [r2, #16]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	68d2      	ldr	r2, [r2, #12]
 8005036:	4311      	orrs	r1, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	430b      	orrs	r3, r1
 800503e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	000186a0 	.word	0x000186a0
 8005098:	001e847f 	.word	0x001e847f
 800509c:	003d08ff 	.word	0x003d08ff
 80050a0:	431bde83 	.word	0x431bde83
 80050a4:	10624dd3 	.word	0x10624dd3

080050a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	460b      	mov	r3, r1
 80050bc:	813b      	strh	r3, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050c2:	f7fe faef 	bl	80036a4 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	f040 80d9 	bne.w	8005288 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2319      	movs	r3, #25
 80050dc:	2201      	movs	r2, #1
 80050de:	496d      	ldr	r1, [pc, #436]	; (8005294 <HAL_I2C_Mem_Write+0x1ec>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f971 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0cc      	b.n	800528a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_I2C_Mem_Write+0x56>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0c5      	b.n	800528a <HAL_I2C_Mem_Write+0x1e2>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d007      	beq.n	8005124 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2221      	movs	r2, #33	; 0x21
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a4d      	ldr	r2, [pc, #308]	; (8005298 <HAL_I2C_Mem_Write+0x1f0>)
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005166:	88f8      	ldrh	r0, [r7, #6]
 8005168:	893a      	ldrh	r2, [r7, #8]
 800516a:	8979      	ldrh	r1, [r7, #10]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	4603      	mov	r3, r0
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f890 	bl	800529c <I2C_RequestMemoryWrite>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d052      	beq.n	8005228 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e081      	b.n	800528a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f9f2 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00d      	beq.n	80051b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b04      	cmp	r3, #4
 800519c:	d107      	bne.n	80051ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e06b      	b.n	800528a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d11b      	bne.n	8005228 <HAL_I2C_Mem_Write+0x180>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1aa      	bne.n	8005186 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f9de 	bl	80055f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2b04      	cmp	r3, #4
 8005246:	d107      	bne.n	8005258 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005256:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e016      	b.n	800528a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	e000      	b.n	800528a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	00100002 	.word	0x00100002
 8005298:	ffff0000 	.word	0xffff0000

0800529c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f878 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ec:	d103      	bne.n	80052f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e05f      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	6a3a      	ldr	r2, [r7, #32]
 800530e:	492d      	ldr	r1, [pc, #180]	; (80053c4 <I2C_RequestMemoryWrite+0x128>)
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f8b0 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e04c      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	6a39      	ldr	r1, [r7, #32]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f91a 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b04      	cmp	r3, #4
 800534c:	d107      	bne.n	800535e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e02b      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d105      	bne.n	8005374 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]
 8005372:	e021      	b.n	80053b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005374:	893b      	ldrh	r3, [r7, #8]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	b29b      	uxth	r3, r3
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	6a39      	ldr	r1, [r7, #32]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f8f4 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	2b04      	cmp	r3, #4
 8005398:	d107      	bne.n	80053aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e005      	b.n	80053ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ae:	893b      	ldrh	r3, [r7, #8]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	00010002 	.word	0x00010002

080053c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d8:	e025      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d021      	beq.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe f95f 	bl	80036a4 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e023      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10d      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	e00c      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	43da      	mvns	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	429a      	cmp	r2, r3
 800546a:	d0b6      	beq.n	80053da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005484:	e051      	b.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005494:	d123      	bne.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0204 	orr.w	r2, r3, #4
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e046      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d021      	beq.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fe f8dd 	bl	80036a4 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e020      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10c      	bne.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e00b      	b.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	43da      	mvns	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d18d      	bne.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005580:	e02d      	b.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f878 	bl	8005678 <I2C_IsAcknowledgeFailed>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e02d      	b.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d021      	beq.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fe f883 	bl	80036a4 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d116      	bne.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e007      	b.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d1ca      	bne.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005602:	e02d      	b.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f837 	bl	8005678 <I2C_IsAcknowledgeFailed>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e02d      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d021      	beq.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fe f842 	bl	80036a4 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d116      	bne.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e007      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d1ca      	bne.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568e:	d11b      	bne.n	80056c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f043 0204 	orr.w	r2, r3, #4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e267      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d075      	beq.n	80057e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056f6:	4b88      	ldr	r3, [pc, #544]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00c      	beq.n	800571c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005702:	4b85      	ldr	r3, [pc, #532]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800570a:	2b08      	cmp	r3, #8
 800570c:	d112      	bne.n	8005734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800570e:	4b82      	ldr	r3, [pc, #520]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571a:	d10b      	bne.n	8005734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	4b7e      	ldr	r3, [pc, #504]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05b      	beq.n	80057e0 <HAL_RCC_OscConfig+0x108>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d157      	bne.n	80057e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e242      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d106      	bne.n	800574c <HAL_RCC_OscConfig+0x74>
 800573e:	4b76      	ldr	r3, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a75      	ldr	r2, [pc, #468]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e01d      	b.n	8005788 <HAL_RCC_OscConfig+0xb0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005754:	d10c      	bne.n	8005770 <HAL_RCC_OscConfig+0x98>
 8005756:	4b70      	ldr	r3, [pc, #448]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6f      	ldr	r2, [pc, #444]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 800575c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b6d      	ldr	r3, [pc, #436]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6c      	ldr	r2, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e00b      	b.n	8005788 <HAL_RCC_OscConfig+0xb0>
 8005770:	4b69      	ldr	r3, [pc, #420]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a68      	ldr	r2, [pc, #416]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b66      	ldr	r3, [pc, #408]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a65      	ldr	r2, [pc, #404]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fd ff88 	bl	80036a4 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005798:	f7fd ff84 	bl	80036a4 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e207      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	4b5b      	ldr	r3, [pc, #364]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0xc0>
 80057b6:	e014      	b.n	80057e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fd ff74 	bl	80036a4 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fd ff70 	bl	80036a4 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e1f3      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d2:	4b51      	ldr	r3, [pc, #324]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0xe8>
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d063      	beq.n	80058b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ee:	4b4a      	ldr	r3, [pc, #296]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005802:	2b08      	cmp	r3, #8
 8005804:	d11c      	bne.n	8005840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005806:	4b44      	ldr	r3, [pc, #272]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d116      	bne.n	8005840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_RCC_OscConfig+0x152>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e1c7      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4937      	ldr	r1, [pc, #220]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583e:	e03a      	b.n	80058b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d020      	beq.n	800588a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005848:	4b34      	ldr	r3, [pc, #208]	; (800591c <HAL_RCC_OscConfig+0x244>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fd ff29 	bl	80036a4 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005856:	f7fd ff25 	bl	80036a4 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e1a8      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005868:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f0      	beq.n	8005856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005874:	4b28      	ldr	r3, [pc, #160]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4925      	ldr	r1, [pc, #148]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]
 8005888:	e015      	b.n	80058b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <HAL_RCC_OscConfig+0x244>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fd ff08 	bl	80036a4 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005898:	f7fd ff04 	bl	80036a4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e187      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d036      	beq.n	8005930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d016      	beq.n	80058f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <HAL_RCC_OscConfig+0x248>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fd fee8 	bl	80036a4 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d8:	f7fd fee4 	bl	80036a4 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e167      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_OscConfig+0x240>)
 80058ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0x200>
 80058f6:	e01b      	b.n	8005930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCC_OscConfig+0x248>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fe:	f7fd fed1 	bl	80036a4 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	e00e      	b.n	8005924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005906:	f7fd fecd 	bl	80036a4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d907      	bls.n	8005924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e150      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
 8005918:	40023800 	.word	0x40023800
 800591c:	42470000 	.word	0x42470000
 8005920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005924:	4b88      	ldr	r3, [pc, #544]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1ea      	bne.n	8005906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8097 	beq.w	8005a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005942:	4b81      	ldr	r3, [pc, #516]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10f      	bne.n	800596e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	4b7d      	ldr	r3, [pc, #500]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	4a7c      	ldr	r2, [pc, #496]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595c:	6413      	str	r3, [r2, #64]	; 0x40
 800595e:	4b7a      	ldr	r3, [pc, #488]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596e:	4b77      	ldr	r3, [pc, #476]	; (8005b4c <HAL_RCC_OscConfig+0x474>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d118      	bne.n	80059ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800597a:	4b74      	ldr	r3, [pc, #464]	; (8005b4c <HAL_RCC_OscConfig+0x474>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a73      	ldr	r2, [pc, #460]	; (8005b4c <HAL_RCC_OscConfig+0x474>)
 8005980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005986:	f7fd fe8d 	bl	80036a4 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598e:	f7fd fe89 	bl	80036a4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e10c      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a0:	4b6a      	ldr	r3, [pc, #424]	; (8005b4c <HAL_RCC_OscConfig+0x474>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_OscConfig+0x2ea>
 80059b4:	4b64      	ldr	r3, [pc, #400]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a63      	ldr	r2, [pc, #396]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
 80059c0:	e01c      	b.n	80059fc <HAL_RCC_OscConfig+0x324>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x30c>
 80059ca:	4b5f      	ldr	r3, [pc, #380]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	4a5e      	ldr	r2, [pc, #376]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059d0:	f043 0304 	orr.w	r3, r3, #4
 80059d4:	6713      	str	r3, [r2, #112]	; 0x70
 80059d6:	4b5c      	ldr	r3, [pc, #368]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	4a5b      	ldr	r2, [pc, #364]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
 80059e2:	e00b      	b.n	80059fc <HAL_RCC_OscConfig+0x324>
 80059e4:	4b58      	ldr	r3, [pc, #352]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	4a57      	ldr	r2, [pc, #348]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70
 80059f0:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4a54      	ldr	r2, [pc, #336]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fd fe4e 	bl	80036a4 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fd fe4a 	bl	80036a4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e0cb      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a22:	4b49      	ldr	r3, [pc, #292]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ee      	beq.n	8005a0c <HAL_RCC_OscConfig+0x334>
 8005a2e:	e014      	b.n	8005a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a30:	f7fd fe38 	bl	80036a4 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a36:	e00a      	b.n	8005a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a38:	f7fd fe34 	bl	80036a4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e0b5      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a4e:	4b3e      	ldr	r3, [pc, #248]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ee      	bne.n	8005a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d105      	bne.n	8005a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a60:	4b39      	ldr	r3, [pc, #228]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	4a38      	ldr	r2, [pc, #224]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a1 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a76:	4b34      	ldr	r3, [pc, #208]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d05c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d141      	bne.n	8005b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8a:	4b31      	ldr	r3, [pc, #196]	; (8005b50 <HAL_RCC_OscConfig+0x478>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fd fe08 	bl	80036a4 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a98:	f7fd fe04 	bl	80036a4 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e087      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	491b      	ldr	r1, [pc, #108]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <HAL_RCC_OscConfig+0x478>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fd fddd 	bl	80036a4 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fd fdd9 	bl	80036a4 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e05c      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x416>
 8005b0c:	e054      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <HAL_RCC_OscConfig+0x478>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fd fdc6 	bl	80036a4 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fd fdc2 	bl	80036a4 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e045      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x444>
 8005b3a:	e03d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e038      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b54:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <HAL_RCC_OscConfig+0x4ec>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d028      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d121      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d11a      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b84:	4013      	ands	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d111      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800

08005bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0cc      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b68      	ldr	r3, [pc, #416]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d90c      	bls.n	8005c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b65      	ldr	r3, [pc, #404]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b63      	ldr	r3, [pc, #396]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0b8      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c1c:	4b59      	ldr	r3, [pc, #356]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a58      	ldr	r2, [pc, #352]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c34:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4a52      	ldr	r2, [pc, #328]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	494d      	ldr	r1, [pc, #308]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d044      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c66:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d119      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e07f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c86:	4b3f      	ldr	r3, [pc, #252]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c96:	4b3b      	ldr	r3, [pc, #236]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e067      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca6:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4934      	ldr	r1, [pc, #208]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb8:	f7fd fcf4 	bl	80036a4 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fd fcf0 	bl	80036a4 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e04f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 020c 	and.w	r2, r3, #12
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1eb      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d20c      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e032      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4916      	ldr	r1, [pc, #88]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	490e      	ldr	r1, [pc, #56]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d4e:	f000 f821 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	490a      	ldr	r1, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005d60:	5ccb      	ldrb	r3, [r1, r3]
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd fc54 	bl	800361c <HAL_InitTick>

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023c00 	.word	0x40023c00
 8005d84:	40023800 	.word	0x40023800
 8005d88:	080089a0 	.word	0x080089a0
 8005d8c:	20000120 	.word	0x20000120
 8005d90:	20000124 	.word	0x20000124

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d98:	b094      	sub	sp, #80	; 0x50
 8005d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005da0:	2300      	movs	r3, #0
 8005da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da4:	2300      	movs	r3, #0
 8005da6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dac:	4b79      	ldr	r3, [pc, #484]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 030c 	and.w	r3, r3, #12
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d00d      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	f200 80e1 	bhi.w	8005f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d003      	beq.n	8005dce <HAL_RCC_GetSysClockFreq+0x3a>
 8005dc6:	e0db      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dc8:	4b73      	ldr	r3, [pc, #460]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005dcc:	e0db      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dce:	4b72      	ldr	r3, [pc, #456]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dd2:	e0d8      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dd4:	4b6f      	ldr	r3, [pc, #444]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ddc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dde:	4b6d      	ldr	r3, [pc, #436]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d063      	beq.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dea:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	099b      	lsrs	r3, r3, #6
 8005df0:	2200      	movs	r2, #0
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dfe:	2300      	movs	r3, #0
 8005e00:	637b      	str	r3, [r7, #52]	; 0x34
 8005e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	f04f 0000 	mov.w	r0, #0
 8005e0e:	f04f 0100 	mov.w	r1, #0
 8005e12:	0159      	lsls	r1, r3, #5
 8005e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e18:	0150      	lsls	r0, r2, #5
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4621      	mov	r1, r4
 8005e20:	1a51      	subs	r1, r2, r1
 8005e22:	6139      	str	r1, [r7, #16]
 8005e24:	4629      	mov	r1, r5
 8005e26:	eb63 0301 	sbc.w	r3, r3, r1
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e38:	4659      	mov	r1, fp
 8005e3a:	018b      	lsls	r3, r1, #6
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e42:	4651      	mov	r1, sl
 8005e44:	018a      	lsls	r2, r1, #6
 8005e46:	4651      	mov	r1, sl
 8005e48:	ebb2 0801 	subs.w	r8, r2, r1
 8005e4c:	4659      	mov	r1, fp
 8005e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e66:	4690      	mov	r8, r2
 8005e68:	4699      	mov	r9, r3
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	eb18 0303 	adds.w	r3, r8, r3
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	462b      	mov	r3, r5
 8005e74:	eb49 0303 	adc.w	r3, r9, r3
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e86:	4629      	mov	r1, r5
 8005e88:	028b      	lsls	r3, r1, #10
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e90:	4621      	mov	r1, r4
 8005e92:	028a      	lsls	r2, r1, #10
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ea4:	f7fa f9f4 	bl	8000290 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb0:	e058      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb2:	4b38      	ldr	r3, [pc, #224]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	f04f 0000 	mov.w	r0, #0
 8005ed4:	f04f 0100 	mov.w	r1, #0
 8005ed8:	0159      	lsls	r1, r3, #5
 8005eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ede:	0150      	lsls	r0, r2, #5
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eea:	4649      	mov	r1, r9
 8005eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f04:	ebb2 040a 	subs.w	r4, r2, sl
 8005f08:	eb63 050b 	sbc.w	r5, r3, fp
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	00eb      	lsls	r3, r5, #3
 8005f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f1a:	00e2      	lsls	r2, r4, #3
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	461d      	mov	r5, r3
 8005f20:	4643      	mov	r3, r8
 8005f22:	18e3      	adds	r3, r4, r3
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	464b      	mov	r3, r9
 8005f28:	eb45 0303 	adc.w	r3, r5, r3
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	028b      	lsls	r3, r1, #10
 8005f3e:	4621      	mov	r1, r4
 8005f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f44:	4621      	mov	r1, r4
 8005f46:	028a      	lsls	r2, r1, #10
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4e:	2200      	movs	r2, #0
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	61fa      	str	r2, [r7, #28]
 8005f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f58:	f7fa f99a 	bl	8000290 <__aeabi_uldivmod>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4613      	mov	r3, r2
 8005f62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	3301      	adds	r3, #1
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f7e:	e002      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3750      	adds	r7, #80	; 0x50
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800
 8005f98:	00f42400 	.word	0x00f42400

08005f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000120 	.word	0x20000120

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fb8:	f7ff fff0 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	0a9b      	lsrs	r3, r3, #10
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	080089b0 	.word	0x080089b0

08005fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e07b      	b.n	80060e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d108      	bne.n	8006008 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffe:	d009      	beq.n	8006014 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	61da      	str	r2, [r3, #28]
 8006006:	e005      	b.n	8006014 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fc fdf0 	bl	8002c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006098:	ea42 0103 	orr.w	r1, r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	f003 0104 	and.w	r1, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f003 0210 	and.w	r2, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b088      	sub	sp, #32
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_SPI_Transmit+0x22>
 800610c:	2302      	movs	r3, #2
 800610e:	e126      	b.n	800635e <HAL_SPI_Transmit+0x270>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006118:	f7fd fac4 	bl	80036a4 <HAL_GetTick>
 800611c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d002      	beq.n	8006134 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800612e:	2302      	movs	r3, #2
 8006130:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006132:	e10b      	b.n	800634c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_SPI_Transmit+0x52>
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006144:	e102      	b.n	800634c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2203      	movs	r2, #3
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d10f      	bne.n	80061ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d007      	beq.n	80061cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d4:	d14b      	bne.n	800626e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_SPI_Transmit+0xf6>
 80061de:	8afb      	ldrh	r3, [r7, #22]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d13e      	bne.n	8006262 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	881a      	ldrh	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	1c9a      	adds	r2, r3, #2
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006208:	e02b      	b.n	8006262 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b02      	cmp	r3, #2
 8006216:	d112      	bne.n	800623e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	881a      	ldrh	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	1c9a      	adds	r2, r3, #2
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	86da      	strh	r2, [r3, #54]	; 0x36
 800623c:	e011      	b.n	8006262 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800623e:	f7fd fa31 	bl	80036a4 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d803      	bhi.n	8006256 <HAL_SPI_Transmit+0x168>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d102      	bne.n	800625c <HAL_SPI_Transmit+0x16e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006260:	e074      	b.n	800634c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ce      	bne.n	800620a <HAL_SPI_Transmit+0x11c>
 800626c:	e04c      	b.n	8006308 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_SPI_Transmit+0x18e>
 8006276:	8afb      	ldrh	r3, [r7, #22]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d140      	bne.n	80062fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	7812      	ldrb	r2, [r2, #0]
 8006288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062a2:	e02c      	b.n	80062fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d113      	bne.n	80062da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	330c      	adds	r3, #12
 80062bc:	7812      	ldrb	r2, [r2, #0]
 80062be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80062d8:	e011      	b.n	80062fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062da:	f7fd f9e3 	bl	80036a4 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d803      	bhi.n	80062f2 <HAL_SPI_Transmit+0x204>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d102      	bne.n	80062f8 <HAL_SPI_Transmit+0x20a>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062fc:	e026      	b.n	800634c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1cd      	bne.n	80062a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fcdd 	bl	8006ccc <SPI_EndRxTxTransaction>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e000      	b.n	800634c <HAL_SPI_Transmit+0x25e>
  }

error:
 800634a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800635c:	7ffb      	ldrb	r3, [r7, #31]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b088      	sub	sp, #32
 800636a:	af02      	add	r7, sp, #8
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006382:	d112      	bne.n	80063aa <HAL_SPI_Receive+0x44>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10e      	bne.n	80063aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2204      	movs	r2, #4
 8006390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006394:	88fa      	ldrh	r2, [r7, #6]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	4613      	mov	r3, r2
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f8f1 	bl	8006588 <HAL_SPI_TransmitReceive>
 80063a6:	4603      	mov	r3, r0
 80063a8:	e0ea      	b.n	8006580 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_SPI_Receive+0x52>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e0e3      	b.n	8006580 <HAL_SPI_Receive+0x21a>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c0:	f7fd f970 	bl	80036a4 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
 80063d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063d6:	e0ca      	b.n	800656e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_SPI_Receive+0x7e>
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063e8:	e0c1      	b.n	800656e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2204      	movs	r2, #4
 80063ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	88fa      	ldrh	r2, [r7, #6]
 8006402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	d10f      	bne.n	8006452 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006450:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d007      	beq.n	8006470 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d162      	bne.n	800653e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006478:	e02e      	b.n	80064d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d115      	bne.n	80064b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f103 020c 	add.w	r2, r3, #12
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064b2:	e011      	b.n	80064d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b4:	f7fd f8f6 	bl	80036a4 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d803      	bhi.n	80064cc <HAL_SPI_Receive+0x166>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d102      	bne.n	80064d2 <HAL_SPI_Receive+0x16c>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064d6:	e04a      	b.n	800656e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1cb      	bne.n	800647a <HAL_SPI_Receive+0x114>
 80064e2:	e031      	b.n	8006548 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d113      	bne.n	800651a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	b292      	uxth	r2, r2
 80064fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	1c9a      	adds	r2, r3, #2
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006518:	e011      	b.n	800653e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800651a:	f7fd f8c3 	bl	80036a4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d803      	bhi.n	8006532 <HAL_SPI_Receive+0x1cc>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d102      	bne.n	8006538 <HAL_SPI_Receive+0x1d2>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800653c:	e017      	b.n	800656e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1cd      	bne.n	80064e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fb57 	bl	8006c00 <SPI_EndRxTransaction>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
 800656a:	e000      	b.n	800656e <HAL_SPI_Receive+0x208>
  }

error :
 800656c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	; 0x30
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006596:	2301      	movs	r3, #1
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_SPI_TransmitReceive+0x26>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e18a      	b.n	80068c4 <HAL_SPI_TransmitReceive+0x33c>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b6:	f7fd f875 	bl	80036a4 <HAL_GetTick>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065cc:	887b      	ldrh	r3, [r7, #2]
 80065ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d00f      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x70>
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065de:	d107      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x68>
 80065e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d003      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065f6:	e15b      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_SPI_TransmitReceive+0x82>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_SPI_TransmitReceive+0x82>
 8006604:	887b      	ldrh	r3, [r7, #2]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006610:	e14e      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b04      	cmp	r3, #4
 800661c:	d003      	beq.n	8006626 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2205      	movs	r2, #5
 8006622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	887a      	ldrh	r2, [r7, #2]
 8006636:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	887a      	ldrh	r2, [r7, #2]
 8006648:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	887a      	ldrh	r2, [r7, #2]
 800664e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d007      	beq.n	800667a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006678:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006682:	d178      	bne.n	8006776 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x10a>
 800668c:	8b7b      	ldrh	r3, [r7, #26]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d166      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	881a      	ldrh	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	1c9a      	adds	r2, r3, #2
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b6:	e053      	b.n	8006760 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d11b      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x176>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <HAL_SPI_TransmitReceive+0x176>
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d113      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	881a      	ldrh	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	d119      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x1b8>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d014      	beq.n	8006740 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	b292      	uxth	r2, r2
 8006722:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	1c9a      	adds	r2, r3, #2
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800673c:	2301      	movs	r3, #1
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006740:	f7fc ffb0 	bl	80036a4 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800674c:	429a      	cmp	r2, r3
 800674e:	d807      	bhi.n	8006760 <HAL_SPI_TransmitReceive+0x1d8>
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d003      	beq.n	8006760 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800675e:	e0a7      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1a6      	bne.n	80066b8 <HAL_SPI_TransmitReceive+0x130>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1a1      	bne.n	80066b8 <HAL_SPI_TransmitReceive+0x130>
 8006774:	e07c      	b.n	8006870 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x1fc>
 800677e:	8b7b      	ldrh	r3, [r7, #26]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d16b      	bne.n	800685c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	7812      	ldrb	r2, [r2, #0]
 8006790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067aa:	e057      	b.n	800685c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d11c      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x26c>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <HAL_SPI_TransmitReceive+0x26c>
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d114      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d119      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x2ae>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d014      	beq.n	8006836 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006832:	2301      	movs	r3, #1
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006836:	f7fc ff35 	bl	80036a4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006842:	429a      	cmp	r2, r3
 8006844:	d803      	bhi.n	800684e <HAL_SPI_TransmitReceive+0x2c6>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d102      	bne.n	8006854 <HAL_SPI_TransmitReceive+0x2cc>
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800685a:	e029      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1a2      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x224>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d19d      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fa29 	bl	8006ccc <SPI_EndRxTxTransaction>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d006      	beq.n	800688e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800688c:	e010      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	e000      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3730      	adds	r7, #48	; 0x30
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10e      	bne.n	800690c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
    return;
 800690a:	e0ce      	b.n	8006aaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_SPI_IRQHandler+0x5e>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
    return;
 8006928:	e0bf      	b.n	8006aaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <HAL_SPI_IRQHandler+0x7e>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80b0 	beq.w	8006aaa <HAL_SPI_IRQHandler+0x1de>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80aa 	beq.w	8006aaa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d023      	beq.n	80069a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b03      	cmp	r3, #3
 800696a:	d011      	beq.n	8006990 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006970:	f043 0204 	orr.w	r2, r3, #4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	e00b      	b.n	80069a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006990:	2300      	movs	r3, #0
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	693b      	ldr	r3, [r7, #16]
        return;
 80069a6:	e080      	b.n	8006aaa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d014      	beq.n	80069dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	f043 0201 	orr.w	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f043 0208 	orr.w	r2, r3, #8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069f2:	2300      	movs	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d04f      	beq.n	8006aa8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <HAL_SPI_IRQHandler+0x168>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d034      	beq.n	8006a9e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0203 	bic.w	r2, r2, #3
 8006a42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a50:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <HAL_SPI_IRQHandler+0x1e4>)
 8006a52:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fd fd87 	bl	800456c <HAL_DMA_Abort_IT>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d016      	beq.n	8006aa6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <HAL_SPI_IRQHandler+0x1e4>)
 8006a7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fd fd71 	bl	800456c <HAL_DMA_Abort_IT>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a9c:	e003      	b.n	8006aa6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f808 	bl	8006ab4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006aa4:	e000      	b.n	8006aa8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006aa6:	bf00      	nop
    return;
 8006aa8:	bf00      	nop
  }
}
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	08006ac9 	.word	0x08006ac9

08006ab4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff ffe6 	bl	8006ab4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b00:	f7fc fdd0 	bl	80036a4 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b10:	f7fc fdc8 	bl	80036a4 <HAL_GetTick>
 8006b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b16:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	0d1b      	lsrs	r3, r3, #20
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b26:	e054      	b.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d050      	beq.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b30:	f7fc fdb8 	bl	80036a4 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d902      	bls.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d13d      	bne.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d111      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	d004      	beq.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b72:	d107      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8c:	d10f      	bne.n	8006bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e017      	b.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d19b      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000120 	.word	0x20000120

08006c00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c14:	d111      	bne.n	8006c3a <SPI_EndRxTransaction+0x3a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1e:	d004      	beq.n	8006c2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c28:	d107      	bne.n	8006c3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c42:	d12a      	bne.n	8006c9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4c:	d012      	beq.n	8006c74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2200      	movs	r2, #0
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f7ff ff49 	bl	8006af0 <SPI_WaitFlagStateUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d02d      	beq.n	8006cc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e026      	b.n	8006cc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff ff36 	bl	8006af0 <SPI_WaitFlagStateUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01a      	beq.n	8006cc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	f043 0220 	orr.w	r2, r3, #32
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e013      	b.n	8006cc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff ff23 	bl	8006af0 <SPI_WaitFlagStateUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	f043 0220 	orr.w	r2, r3, #32
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e000      	b.n	8006cc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af02      	add	r7, sp, #8
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <SPI_EndRxTxTransaction+0x7c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <SPI_EndRxTxTransaction+0x80>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	0d5b      	lsrs	r3, r3, #21
 8006ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ce8:	fb02 f303 	mul.w	r3, r2, r3
 8006cec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cf6:	d112      	bne.n	8006d1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2180      	movs	r1, #128	; 0x80
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff fef4 	bl	8006af0 <SPI_WaitFlagStateUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d016      	beq.n	8006d3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e00f      	b.n	8006d3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d34:	2b80      	cmp	r3, #128	; 0x80
 8006d36:	d0f2      	beq.n	8006d1e <SPI_EndRxTxTransaction+0x52>
 8006d38:	e000      	b.n	8006d3c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d3a:	bf00      	nop
  }

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000120 	.word	0x20000120
 8006d4c:	165e9f81 	.word	0x165e9f81

08006d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e041      	b.n	8006de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fc fbdc 	bl	8003534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f000 faf6 	bl	8007380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d001      	beq.n	8006e08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e03c      	b.n	8006e82 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <HAL_TIM_Base_Start+0xa0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d018      	beq.n	8006e4c <HAL_TIM_Base_Start+0x5c>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d013      	beq.n	8006e4c <HAL_TIM_Base_Start+0x5c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <HAL_TIM_Base_Start+0xa4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <HAL_TIM_Base_Start+0x5c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a19      	ldr	r2, [pc, #100]	; (8006e98 <HAL_TIM_Base_Start+0xa8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_TIM_Base_Start+0x5c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_TIM_Base_Start+0xac>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_TIM_Base_Start+0x5c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <HAL_TIM_Base_Start+0xb0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d111      	bne.n	8006e70 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b06      	cmp	r3, #6
 8006e5c:	d010      	beq.n	8006e80 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6e:	e007      	b.n	8006e80 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40014000 	.word	0x40014000

08006ea4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e097      	b.n	8006fe8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7fc fae9 	bl	80034a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee8:	f023 0307 	bic.w	r3, r3, #7
 8006eec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f000 fa41 	bl	8007380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f26:	f023 0303 	bic.w	r3, r3, #3
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	4313      	orrs	r3, r2
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f44:	f023 030c 	bic.w	r3, r3, #12
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	4313      	orrs	r3, r2
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	011a      	lsls	r2, r3, #4
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	031b      	lsls	r3, r3, #12
 8006f74:	4313      	orrs	r3, r2
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	4313      	orrs	r3, r2
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007000:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007008:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007010:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007018:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d110      	bne.n	8007042 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d102      	bne.n	800702c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007026:	7b7b      	ldrb	r3, [r7, #13]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e069      	b.n	8007104 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007040:	e031      	b.n	80070a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b04      	cmp	r3, #4
 8007046:	d110      	bne.n	800706a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d102      	bne.n	8007054 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800704e:	7b3b      	ldrb	r3, [r7, #12]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d001      	beq.n	8007058 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e055      	b.n	8007104 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007068:	e01d      	b.n	80070a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d108      	bne.n	8007082 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d105      	bne.n	8007082 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007076:	7b7b      	ldrb	r3, [r7, #13]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d102      	bne.n	8007082 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800707c:	7b3b      	ldrb	r3, [r7, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d001      	beq.n	8007086 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e03e      	b.n	8007104 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_TIM_Encoder_Start+0xc4>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d008      	beq.n	80070c4 <HAL_TIM_Encoder_Start+0xd4>
 80070b2:	e00f      	b.n	80070d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2201      	movs	r2, #1
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f9df 	bl	8007480 <TIM_CCxChannelCmd>
      break;
 80070c2:	e016      	b.n	80070f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2201      	movs	r2, #1
 80070ca:	2104      	movs	r1, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 f9d7 	bl	8007480 <TIM_CCxChannelCmd>
      break;
 80070d2:	e00e      	b.n	80070f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2201      	movs	r2, #1
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 f9cf 	bl	8007480 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2201      	movs	r2, #1
 80070e8:	2104      	movs	r1, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f9c8 	bl	8007480 <TIM_CCxChannelCmd>
      break;
 80070f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0202 	mvn.w	r2, #2
 8007138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8f8 	bl	8007344 <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f8ea 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f8fb 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0204 	mvn.w	r2, #4
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8ce 	bl	8007344 <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8c0 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8d1 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0208 	mvn.w	r2, #8
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8a4 	bl	8007344 <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f896 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8a7 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0210 	mvn.w	r2, #16
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2208      	movs	r2, #8
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f87a 	bl	8007344 <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f86c 	bl	8007330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f87d 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10e      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d107      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0201 	mvn.w	r2, #1
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f846 	bl	800731c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d10e      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f980 	bl	80075bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b40      	cmp	r3, #64	; 0x40
 80072c8:	d10e      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d107      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f842 	bl	800736c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d10e      	bne.n	8007314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b20      	cmp	r3, #32
 8007302:	d107      	bne.n	8007314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0220 	mvn.w	r2, #32
 800730c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f94a 	bl	80075a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a34      	ldr	r2, [pc, #208]	; (8007464 <TIM_Base_SetConfig+0xe4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00f      	beq.n	80073b8 <TIM_Base_SetConfig+0x38>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739e:	d00b      	beq.n	80073b8 <TIM_Base_SetConfig+0x38>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a31      	ldr	r2, [pc, #196]	; (8007468 <TIM_Base_SetConfig+0xe8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_Base_SetConfig+0x38>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a30      	ldr	r2, [pc, #192]	; (800746c <TIM_Base_SetConfig+0xec>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_Base_SetConfig+0x38>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a2f      	ldr	r2, [pc, #188]	; (8007470 <TIM_Base_SetConfig+0xf0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d108      	bne.n	80073ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a25      	ldr	r2, [pc, #148]	; (8007464 <TIM_Base_SetConfig+0xe4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01b      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d017      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a22      	ldr	r2, [pc, #136]	; (8007468 <TIM_Base_SetConfig+0xe8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a21      	ldr	r2, [pc, #132]	; (800746c <TIM_Base_SetConfig+0xec>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00f      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a20      	ldr	r2, [pc, #128]	; (8007470 <TIM_Base_SetConfig+0xf0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00b      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <TIM_Base_SetConfig+0xf4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d007      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <TIM_Base_SetConfig+0xf8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_Base_SetConfig+0x8a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1d      	ldr	r2, [pc, #116]	; (800747c <TIM_Base_SetConfig+0xfc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a08      	ldr	r2, [pc, #32]	; (8007464 <TIM_Base_SetConfig+0xe4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d103      	bne.n	8007450 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	615a      	str	r2, [r3, #20]
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40010000 	.word	0x40010000
 8007468:	40000400 	.word	0x40000400
 800746c:	40000800 	.word	0x40000800
 8007470:	40000c00 	.word	0x40000c00
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800

08007480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2201      	movs	r2, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1a      	ldr	r2, [r3, #32]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a1a      	ldr	r2, [r3, #32]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	fa01 f303 	lsl.w	r3, r1, r3
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e050      	b.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d018      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007530:	d013      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a18      	ldr	r2, [pc, #96]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10c      	bne.n	8007574 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40010000 	.word	0x40010000
 8007598:	40000400 	.word	0x40000400
 800759c:	40000800 	.word	0x40000800
 80075a0:	40000c00 	.word	0x40000c00
 80075a4:	40014000 	.word	0x40014000

080075a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <std>:
 80075d0:	2300      	movs	r3, #0
 80075d2:	b510      	push	{r4, lr}
 80075d4:	4604      	mov	r4, r0
 80075d6:	e9c0 3300 	strd	r3, r3, [r0]
 80075da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075de:	6083      	str	r3, [r0, #8]
 80075e0:	8181      	strh	r1, [r0, #12]
 80075e2:	6643      	str	r3, [r0, #100]	; 0x64
 80075e4:	81c2      	strh	r2, [r0, #14]
 80075e6:	6183      	str	r3, [r0, #24]
 80075e8:	4619      	mov	r1, r3
 80075ea:	2208      	movs	r2, #8
 80075ec:	305c      	adds	r0, #92	; 0x5c
 80075ee:	f000 fa05 	bl	80079fc <memset>
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <std+0x58>)
 80075f4:	6263      	str	r3, [r4, #36]	; 0x24
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <std+0x5c>)
 80075f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <std+0x60>)
 80075fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <std+0x64>)
 8007600:	6323      	str	r3, [r4, #48]	; 0x30
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <std+0x68>)
 8007604:	6224      	str	r4, [r4, #32]
 8007606:	429c      	cmp	r4, r3
 8007608:	d006      	beq.n	8007618 <std+0x48>
 800760a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800760e:	4294      	cmp	r4, r2
 8007610:	d002      	beq.n	8007618 <std+0x48>
 8007612:	33d0      	adds	r3, #208	; 0xd0
 8007614:	429c      	cmp	r4, r3
 8007616:	d105      	bne.n	8007624 <std+0x54>
 8007618:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800761c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007620:	f000 ba64 	b.w	8007aec <__retarget_lock_init_recursive>
 8007624:	bd10      	pop	{r4, pc}
 8007626:	bf00      	nop
 8007628:	0800784d 	.word	0x0800784d
 800762c:	0800786f 	.word	0x0800786f
 8007630:	080078a7 	.word	0x080078a7
 8007634:	080078cb 	.word	0x080078cb
 8007638:	200009a8 	.word	0x200009a8

0800763c <stdio_exit_handler>:
 800763c:	4a02      	ldr	r2, [pc, #8]	; (8007648 <stdio_exit_handler+0xc>)
 800763e:	4903      	ldr	r1, [pc, #12]	; (800764c <stdio_exit_handler+0x10>)
 8007640:	4803      	ldr	r0, [pc, #12]	; (8007650 <stdio_exit_handler+0x14>)
 8007642:	f000 b869 	b.w	8007718 <_fwalk_sglue>
 8007646:	bf00      	nop
 8007648:	2000012c 	.word	0x2000012c
 800764c:	080083c1 	.word	0x080083c1
 8007650:	20000138 	.word	0x20000138

08007654 <cleanup_stdio>:
 8007654:	6841      	ldr	r1, [r0, #4]
 8007656:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <cleanup_stdio+0x34>)
 8007658:	4299      	cmp	r1, r3
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
 800765e:	d001      	beq.n	8007664 <cleanup_stdio+0x10>
 8007660:	f000 feae 	bl	80083c0 <_fflush_r>
 8007664:	68a1      	ldr	r1, [r4, #8]
 8007666:	4b09      	ldr	r3, [pc, #36]	; (800768c <cleanup_stdio+0x38>)
 8007668:	4299      	cmp	r1, r3
 800766a:	d002      	beq.n	8007672 <cleanup_stdio+0x1e>
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fea7 	bl	80083c0 <_fflush_r>
 8007672:	68e1      	ldr	r1, [r4, #12]
 8007674:	4b06      	ldr	r3, [pc, #24]	; (8007690 <cleanup_stdio+0x3c>)
 8007676:	4299      	cmp	r1, r3
 8007678:	d004      	beq.n	8007684 <cleanup_stdio+0x30>
 800767a:	4620      	mov	r0, r4
 800767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007680:	f000 be9e 	b.w	80083c0 <_fflush_r>
 8007684:	bd10      	pop	{r4, pc}
 8007686:	bf00      	nop
 8007688:	200009a8 	.word	0x200009a8
 800768c:	20000a10 	.word	0x20000a10
 8007690:	20000a78 	.word	0x20000a78

08007694 <global_stdio_init.part.0>:
 8007694:	b510      	push	{r4, lr}
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <global_stdio_init.part.0+0x30>)
 8007698:	4c0b      	ldr	r4, [pc, #44]	; (80076c8 <global_stdio_init.part.0+0x34>)
 800769a:	4a0c      	ldr	r2, [pc, #48]	; (80076cc <global_stdio_init.part.0+0x38>)
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	4620      	mov	r0, r4
 80076a0:	2200      	movs	r2, #0
 80076a2:	2104      	movs	r1, #4
 80076a4:	f7ff ff94 	bl	80075d0 <std>
 80076a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076ac:	2201      	movs	r2, #1
 80076ae:	2109      	movs	r1, #9
 80076b0:	f7ff ff8e 	bl	80075d0 <std>
 80076b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076b8:	2202      	movs	r2, #2
 80076ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076be:	2112      	movs	r1, #18
 80076c0:	f7ff bf86 	b.w	80075d0 <std>
 80076c4:	20000ae0 	.word	0x20000ae0
 80076c8:	200009a8 	.word	0x200009a8
 80076cc:	0800763d 	.word	0x0800763d

080076d0 <__sfp_lock_acquire>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__sfp_lock_acquire+0x8>)
 80076d2:	f000 ba0c 	b.w	8007aee <__retarget_lock_acquire_recursive>
 80076d6:	bf00      	nop
 80076d8:	20000ae9 	.word	0x20000ae9

080076dc <__sfp_lock_release>:
 80076dc:	4801      	ldr	r0, [pc, #4]	; (80076e4 <__sfp_lock_release+0x8>)
 80076de:	f000 ba07 	b.w	8007af0 <__retarget_lock_release_recursive>
 80076e2:	bf00      	nop
 80076e4:	20000ae9 	.word	0x20000ae9

080076e8 <__sinit>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	4604      	mov	r4, r0
 80076ec:	f7ff fff0 	bl	80076d0 <__sfp_lock_acquire>
 80076f0:	6a23      	ldr	r3, [r4, #32]
 80076f2:	b11b      	cbz	r3, 80076fc <__sinit+0x14>
 80076f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f8:	f7ff bff0 	b.w	80076dc <__sfp_lock_release>
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <__sinit+0x28>)
 80076fe:	6223      	str	r3, [r4, #32]
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <__sinit+0x2c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f5      	bne.n	80076f4 <__sinit+0xc>
 8007708:	f7ff ffc4 	bl	8007694 <global_stdio_init.part.0>
 800770c:	e7f2      	b.n	80076f4 <__sinit+0xc>
 800770e:	bf00      	nop
 8007710:	08007655 	.word	0x08007655
 8007714:	20000ae0 	.word	0x20000ae0

08007718 <_fwalk_sglue>:
 8007718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800771c:	4607      	mov	r7, r0
 800771e:	4688      	mov	r8, r1
 8007720:	4614      	mov	r4, r2
 8007722:	2600      	movs	r6, #0
 8007724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007728:	f1b9 0901 	subs.w	r9, r9, #1
 800772c:	d505      	bpl.n	800773a <_fwalk_sglue+0x22>
 800772e:	6824      	ldr	r4, [r4, #0]
 8007730:	2c00      	cmp	r4, #0
 8007732:	d1f7      	bne.n	8007724 <_fwalk_sglue+0xc>
 8007734:	4630      	mov	r0, r6
 8007736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d907      	bls.n	8007750 <_fwalk_sglue+0x38>
 8007740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007744:	3301      	adds	r3, #1
 8007746:	d003      	beq.n	8007750 <_fwalk_sglue+0x38>
 8007748:	4629      	mov	r1, r5
 800774a:	4638      	mov	r0, r7
 800774c:	47c0      	blx	r8
 800774e:	4306      	orrs	r6, r0
 8007750:	3568      	adds	r5, #104	; 0x68
 8007752:	e7e9      	b.n	8007728 <_fwalk_sglue+0x10>

08007754 <_puts_r>:
 8007754:	6a03      	ldr	r3, [r0, #32]
 8007756:	b570      	push	{r4, r5, r6, lr}
 8007758:	6884      	ldr	r4, [r0, #8]
 800775a:	4605      	mov	r5, r0
 800775c:	460e      	mov	r6, r1
 800775e:	b90b      	cbnz	r3, 8007764 <_puts_r+0x10>
 8007760:	f7ff ffc2 	bl	80076e8 <__sinit>
 8007764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007766:	07db      	lsls	r3, r3, #31
 8007768:	d405      	bmi.n	8007776 <_puts_r+0x22>
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	0598      	lsls	r0, r3, #22
 800776e:	d402      	bmi.n	8007776 <_puts_r+0x22>
 8007770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007772:	f000 f9bc 	bl	8007aee <__retarget_lock_acquire_recursive>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	0719      	lsls	r1, r3, #28
 800777a:	d513      	bpl.n	80077a4 <_puts_r+0x50>
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	b18b      	cbz	r3, 80077a4 <_puts_r+0x50>
 8007780:	3e01      	subs	r6, #1
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007788:	3b01      	subs	r3, #1
 800778a:	60a3      	str	r3, [r4, #8]
 800778c:	b9e9      	cbnz	r1, 80077ca <_puts_r+0x76>
 800778e:	2b00      	cmp	r3, #0
 8007790:	da2e      	bge.n	80077f0 <_puts_r+0x9c>
 8007792:	4622      	mov	r2, r4
 8007794:	210a      	movs	r1, #10
 8007796:	4628      	mov	r0, r5
 8007798:	f000 f89b 	bl	80078d2 <__swbuf_r>
 800779c:	3001      	adds	r0, #1
 800779e:	d007      	beq.n	80077b0 <_puts_r+0x5c>
 80077a0:	250a      	movs	r5, #10
 80077a2:	e007      	b.n	80077b4 <_puts_r+0x60>
 80077a4:	4621      	mov	r1, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 f8d0 	bl	800794c <__swsetup_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d0e7      	beq.n	8007780 <_puts_r+0x2c>
 80077b0:	f04f 35ff 	mov.w	r5, #4294967295
 80077b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b6:	07da      	lsls	r2, r3, #31
 80077b8:	d405      	bmi.n	80077c6 <_puts_r+0x72>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	059b      	lsls	r3, r3, #22
 80077be:	d402      	bmi.n	80077c6 <_puts_r+0x72>
 80077c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c2:	f000 f995 	bl	8007af0 <__retarget_lock_release_recursive>
 80077c6:	4628      	mov	r0, r5
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da04      	bge.n	80077d8 <_puts_r+0x84>
 80077ce:	69a2      	ldr	r2, [r4, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	dc06      	bgt.n	80077e2 <_puts_r+0x8e>
 80077d4:	290a      	cmp	r1, #10
 80077d6:	d004      	beq.n	80077e2 <_puts_r+0x8e>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	6022      	str	r2, [r4, #0]
 80077de:	7019      	strb	r1, [r3, #0]
 80077e0:	e7cf      	b.n	8007782 <_puts_r+0x2e>
 80077e2:	4622      	mov	r2, r4
 80077e4:	4628      	mov	r0, r5
 80077e6:	f000 f874 	bl	80078d2 <__swbuf_r>
 80077ea:	3001      	adds	r0, #1
 80077ec:	d1c9      	bne.n	8007782 <_puts_r+0x2e>
 80077ee:	e7df      	b.n	80077b0 <_puts_r+0x5c>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	250a      	movs	r5, #10
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	6022      	str	r2, [r4, #0]
 80077f8:	701d      	strb	r5, [r3, #0]
 80077fa:	e7db      	b.n	80077b4 <_puts_r+0x60>

080077fc <puts>:
 80077fc:	4b02      	ldr	r3, [pc, #8]	; (8007808 <puts+0xc>)
 80077fe:	4601      	mov	r1, r0
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	f7ff bfa7 	b.w	8007754 <_puts_r>
 8007806:	bf00      	nop
 8007808:	20000184 	.word	0x20000184

0800780c <siprintf>:
 800780c:	b40e      	push	{r1, r2, r3}
 800780e:	b500      	push	{lr}
 8007810:	b09c      	sub	sp, #112	; 0x70
 8007812:	ab1d      	add	r3, sp, #116	; 0x74
 8007814:	9002      	str	r0, [sp, #8]
 8007816:	9006      	str	r0, [sp, #24]
 8007818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800781c:	4809      	ldr	r0, [pc, #36]	; (8007844 <siprintf+0x38>)
 800781e:	9107      	str	r1, [sp, #28]
 8007820:	9104      	str	r1, [sp, #16]
 8007822:	4909      	ldr	r1, [pc, #36]	; (8007848 <siprintf+0x3c>)
 8007824:	f853 2b04 	ldr.w	r2, [r3], #4
 8007828:	9105      	str	r1, [sp, #20]
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	a902      	add	r1, sp, #8
 8007830:	f000 fab2 	bl	8007d98 <_svfiprintf_r>
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	b01c      	add	sp, #112	; 0x70
 800783c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007840:	b003      	add	sp, #12
 8007842:	4770      	bx	lr
 8007844:	20000184 	.word	0x20000184
 8007848:	ffff0208 	.word	0xffff0208

0800784c <__sread>:
 800784c:	b510      	push	{r4, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007854:	f000 f8fc 	bl	8007a50 <_read_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	bfab      	itete	ge
 800785c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800785e:	89a3      	ldrhlt	r3, [r4, #12]
 8007860:	181b      	addge	r3, r3, r0
 8007862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007866:	bfac      	ite	ge
 8007868:	6563      	strge	r3, [r4, #84]	; 0x54
 800786a:	81a3      	strhlt	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__swrite>:
 800786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	461f      	mov	r7, r3
 8007874:	898b      	ldrh	r3, [r1, #12]
 8007876:	05db      	lsls	r3, r3, #23
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	4616      	mov	r6, r2
 800787e:	d505      	bpl.n	800788c <__swrite+0x1e>
 8007880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007884:	2302      	movs	r3, #2
 8007886:	2200      	movs	r2, #0
 8007888:	f000 f8d0 	bl	8007a2c <_lseek_r>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	4628      	mov	r0, r5
 800789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a2:	f000 b8e7 	b.w	8007a74 <_write_r>

080078a6 <__sseek>:
 80078a6:	b510      	push	{r4, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 f8bd 	bl	8007a2c <_lseek_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	bf15      	itete	ne
 80078b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078c2:	81a3      	strheq	r3, [r4, #12]
 80078c4:	bf18      	it	ne
 80078c6:	81a3      	strhne	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__sclose>:
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 b89d 	b.w	8007a0c <_close_r>

080078d2 <__swbuf_r>:
 80078d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d4:	460e      	mov	r6, r1
 80078d6:	4614      	mov	r4, r2
 80078d8:	4605      	mov	r5, r0
 80078da:	b118      	cbz	r0, 80078e4 <__swbuf_r+0x12>
 80078dc:	6a03      	ldr	r3, [r0, #32]
 80078de:	b90b      	cbnz	r3, 80078e4 <__swbuf_r+0x12>
 80078e0:	f7ff ff02 	bl	80076e8 <__sinit>
 80078e4:	69a3      	ldr	r3, [r4, #24]
 80078e6:	60a3      	str	r3, [r4, #8]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	071a      	lsls	r2, r3, #28
 80078ec:	d525      	bpl.n	800793a <__swbuf_r+0x68>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	b31b      	cbz	r3, 800793a <__swbuf_r+0x68>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	1a98      	subs	r0, r3, r2
 80078f8:	6963      	ldr	r3, [r4, #20]
 80078fa:	b2f6      	uxtb	r6, r6
 80078fc:	4283      	cmp	r3, r0
 80078fe:	4637      	mov	r7, r6
 8007900:	dc04      	bgt.n	800790c <__swbuf_r+0x3a>
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f000 fd5b 	bl	80083c0 <_fflush_r>
 800790a:	b9e0      	cbnz	r0, 8007946 <__swbuf_r+0x74>
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	3b01      	subs	r3, #1
 8007910:	60a3      	str	r3, [r4, #8]
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	6022      	str	r2, [r4, #0]
 8007918:	701e      	strb	r6, [r3, #0]
 800791a:	6962      	ldr	r2, [r4, #20]
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	429a      	cmp	r2, r3
 8007920:	d004      	beq.n	800792c <__swbuf_r+0x5a>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	07db      	lsls	r3, r3, #31
 8007926:	d506      	bpl.n	8007936 <__swbuf_r+0x64>
 8007928:	2e0a      	cmp	r6, #10
 800792a:	d104      	bne.n	8007936 <__swbuf_r+0x64>
 800792c:	4621      	mov	r1, r4
 800792e:	4628      	mov	r0, r5
 8007930:	f000 fd46 	bl	80083c0 <_fflush_r>
 8007934:	b938      	cbnz	r0, 8007946 <__swbuf_r+0x74>
 8007936:	4638      	mov	r0, r7
 8007938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793a:	4621      	mov	r1, r4
 800793c:	4628      	mov	r0, r5
 800793e:	f000 f805 	bl	800794c <__swsetup_r>
 8007942:	2800      	cmp	r0, #0
 8007944:	d0d5      	beq.n	80078f2 <__swbuf_r+0x20>
 8007946:	f04f 37ff 	mov.w	r7, #4294967295
 800794a:	e7f4      	b.n	8007936 <__swbuf_r+0x64>

0800794c <__swsetup_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4b2a      	ldr	r3, [pc, #168]	; (80079f8 <__swsetup_r+0xac>)
 8007950:	4605      	mov	r5, r0
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	460c      	mov	r4, r1
 8007956:	b118      	cbz	r0, 8007960 <__swsetup_r+0x14>
 8007958:	6a03      	ldr	r3, [r0, #32]
 800795a:	b90b      	cbnz	r3, 8007960 <__swsetup_r+0x14>
 800795c:	f7ff fec4 	bl	80076e8 <__sinit>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007966:	0718      	lsls	r0, r3, #28
 8007968:	d422      	bmi.n	80079b0 <__swsetup_r+0x64>
 800796a:	06d9      	lsls	r1, r3, #27
 800796c:	d407      	bmi.n	800797e <__swsetup_r+0x32>
 800796e:	2309      	movs	r3, #9
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	e034      	b.n	80079e8 <__swsetup_r+0x9c>
 800797e:	0758      	lsls	r0, r3, #29
 8007980:	d512      	bpl.n	80079a8 <__swsetup_r+0x5c>
 8007982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007984:	b141      	cbz	r1, 8007998 <__swsetup_r+0x4c>
 8007986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798a:	4299      	cmp	r1, r3
 800798c:	d002      	beq.n	8007994 <__swsetup_r+0x48>
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f8b0 	bl	8007af4 <_free_r>
 8007994:	2300      	movs	r3, #0
 8007996:	6363      	str	r3, [r4, #52]	; 0x34
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	2300      	movs	r3, #0
 80079a2:	6063      	str	r3, [r4, #4]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	f043 0308 	orr.w	r3, r3, #8
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	b94b      	cbnz	r3, 80079c8 <__swsetup_r+0x7c>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079be:	d003      	beq.n	80079c8 <__swsetup_r+0x7c>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 fd4a 	bl	800845c <__smakebuf_r>
 80079c8:	89a0      	ldrh	r0, [r4, #12]
 80079ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ce:	f010 0301 	ands.w	r3, r0, #1
 80079d2:	d00a      	beq.n	80079ea <__swsetup_r+0x9e>
 80079d4:	2300      	movs	r3, #0
 80079d6:	60a3      	str	r3, [r4, #8]
 80079d8:	6963      	ldr	r3, [r4, #20]
 80079da:	425b      	negs	r3, r3
 80079dc:	61a3      	str	r3, [r4, #24]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b943      	cbnz	r3, 80079f4 <__swsetup_r+0xa8>
 80079e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079e6:	d1c4      	bne.n	8007972 <__swsetup_r+0x26>
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	0781      	lsls	r1, r0, #30
 80079ec:	bf58      	it	pl
 80079ee:	6963      	ldrpl	r3, [r4, #20]
 80079f0:	60a3      	str	r3, [r4, #8]
 80079f2:	e7f4      	b.n	80079de <__swsetup_r+0x92>
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7f7      	b.n	80079e8 <__swsetup_r+0x9c>
 80079f8:	20000184 	.word	0x20000184

080079fc <memset>:
 80079fc:	4402      	add	r2, r0
 80079fe:	4603      	mov	r3, r0
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d100      	bne.n	8007a06 <memset+0xa>
 8007a04:	4770      	bx	lr
 8007a06:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0a:	e7f9      	b.n	8007a00 <memset+0x4>

08007a0c <_close_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d06      	ldr	r5, [pc, #24]	; (8007a28 <_close_r+0x1c>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7fb fc4f 	bl	80032ba <_close>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_close_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_close_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20000ae4 	.word	0x20000ae4

08007a2c <_lseek_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4d07      	ldr	r5, [pc, #28]	; (8007a4c <_lseek_r+0x20>)
 8007a30:	4604      	mov	r4, r0
 8007a32:	4608      	mov	r0, r1
 8007a34:	4611      	mov	r1, r2
 8007a36:	2200      	movs	r2, #0
 8007a38:	602a      	str	r2, [r5, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f7fb fc64 	bl	8003308 <_lseek>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_lseek_r+0x1e>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_lseek_r+0x1e>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	20000ae4 	.word	0x20000ae4

08007a50 <_read_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4d07      	ldr	r5, [pc, #28]	; (8007a70 <_read_r+0x20>)
 8007a54:	4604      	mov	r4, r0
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	602a      	str	r2, [r5, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f7fb fbf2 	bl	8003248 <_read>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_read_r+0x1e>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_read_r+0x1e>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20000ae4 	.word	0x20000ae4

08007a74 <_write_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	; (8007a94 <_write_r+0x20>)
 8007a78:	4604      	mov	r4, r0
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	602a      	str	r2, [r5, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7fb fbfd 	bl	8003282 <_write>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_write_r+0x1e>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_write_r+0x1e>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	20000ae4 	.word	0x20000ae4

08007a98 <__errno>:
 8007a98:	4b01      	ldr	r3, [pc, #4]	; (8007aa0 <__errno+0x8>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000184 	.word	0x20000184

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f000 fd9e 	bl	80085f8 <_init>
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	080089fc 	.word	0x080089fc
 8007ae0:	080089fc 	.word	0x080089fc
 8007ae4:	080089fc 	.word	0x080089fc
 8007ae8:	08008a00 	.word	0x08008a00

08007aec <__retarget_lock_init_recursive>:
 8007aec:	4770      	bx	lr

08007aee <__retarget_lock_acquire_recursive>:
 8007aee:	4770      	bx	lr

08007af0 <__retarget_lock_release_recursive>:
 8007af0:	4770      	bx	lr
	...

08007af4 <_free_r>:
 8007af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007af6:	2900      	cmp	r1, #0
 8007af8:	d044      	beq.n	8007b84 <_free_r+0x90>
 8007afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007afe:	9001      	str	r0, [sp, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f1a1 0404 	sub.w	r4, r1, #4
 8007b06:	bfb8      	it	lt
 8007b08:	18e4      	addlt	r4, r4, r3
 8007b0a:	f000 f8df 	bl	8007ccc <__malloc_lock>
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <_free_r+0x94>)
 8007b10:	9801      	ldr	r0, [sp, #4]
 8007b12:	6813      	ldr	r3, [r2, #0]
 8007b14:	b933      	cbnz	r3, 8007b24 <_free_r+0x30>
 8007b16:	6063      	str	r3, [r4, #4]
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	b003      	add	sp, #12
 8007b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b20:	f000 b8da 	b.w	8007cd8 <__malloc_unlock>
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d908      	bls.n	8007b3a <_free_r+0x46>
 8007b28:	6825      	ldr	r5, [r4, #0]
 8007b2a:	1961      	adds	r1, r4, r5
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	bf01      	itttt	eq
 8007b30:	6819      	ldreq	r1, [r3, #0]
 8007b32:	685b      	ldreq	r3, [r3, #4]
 8007b34:	1949      	addeq	r1, r1, r5
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	e7ed      	b.n	8007b16 <_free_r+0x22>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b10b      	cbz	r3, 8007b44 <_free_r+0x50>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d9fa      	bls.n	8007b3a <_free_r+0x46>
 8007b44:	6811      	ldr	r1, [r2, #0]
 8007b46:	1855      	adds	r5, r2, r1
 8007b48:	42a5      	cmp	r5, r4
 8007b4a:	d10b      	bne.n	8007b64 <_free_r+0x70>
 8007b4c:	6824      	ldr	r4, [r4, #0]
 8007b4e:	4421      	add	r1, r4
 8007b50:	1854      	adds	r4, r2, r1
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	d1e0      	bne.n	8007b1a <_free_r+0x26>
 8007b58:	681c      	ldr	r4, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	440c      	add	r4, r1
 8007b60:	6014      	str	r4, [r2, #0]
 8007b62:	e7da      	b.n	8007b1a <_free_r+0x26>
 8007b64:	d902      	bls.n	8007b6c <_free_r+0x78>
 8007b66:	230c      	movs	r3, #12
 8007b68:	6003      	str	r3, [r0, #0]
 8007b6a:	e7d6      	b.n	8007b1a <_free_r+0x26>
 8007b6c:	6825      	ldr	r5, [r4, #0]
 8007b6e:	1961      	adds	r1, r4, r5
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf04      	itt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf04      	itt	eq
 8007b7c:	1949      	addeq	r1, r1, r5
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	6054      	str	r4, [r2, #4]
 8007b82:	e7ca      	b.n	8007b1a <_free_r+0x26>
 8007b84:	b003      	add	sp, #12
 8007b86:	bd30      	pop	{r4, r5, pc}
 8007b88:	20000aec 	.word	0x20000aec

08007b8c <sbrk_aligned>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4e0e      	ldr	r6, [pc, #56]	; (8007bc8 <sbrk_aligned+0x3c>)
 8007b90:	460c      	mov	r4, r1
 8007b92:	6831      	ldr	r1, [r6, #0]
 8007b94:	4605      	mov	r5, r0
 8007b96:	b911      	cbnz	r1, 8007b9e <sbrk_aligned+0x12>
 8007b98:	f000 fcd8 	bl	800854c <_sbrk_r>
 8007b9c:	6030      	str	r0, [r6, #0]
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 fcd3 	bl	800854c <_sbrk_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d00a      	beq.n	8007bc0 <sbrk_aligned+0x34>
 8007baa:	1cc4      	adds	r4, r0, #3
 8007bac:	f024 0403 	bic.w	r4, r4, #3
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d007      	beq.n	8007bc4 <sbrk_aligned+0x38>
 8007bb4:	1a21      	subs	r1, r4, r0
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 fcc8 	bl	800854c <_sbrk_r>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d101      	bne.n	8007bc4 <sbrk_aligned+0x38>
 8007bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	20000af0 	.word	0x20000af0

08007bcc <_malloc_r>:
 8007bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	1ccd      	adds	r5, r1, #3
 8007bd2:	f025 0503 	bic.w	r5, r5, #3
 8007bd6:	3508      	adds	r5, #8
 8007bd8:	2d0c      	cmp	r5, #12
 8007bda:	bf38      	it	cc
 8007bdc:	250c      	movcc	r5, #12
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	4607      	mov	r7, r0
 8007be2:	db01      	blt.n	8007be8 <_malloc_r+0x1c>
 8007be4:	42a9      	cmp	r1, r5
 8007be6:	d905      	bls.n	8007bf4 <_malloc_r+0x28>
 8007be8:	230c      	movs	r3, #12
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	2600      	movs	r6, #0
 8007bee:	4630      	mov	r0, r6
 8007bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007cc8 <_malloc_r+0xfc>
 8007bf8:	f000 f868 	bl	8007ccc <__malloc_lock>
 8007bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8007c00:	461c      	mov	r4, r3
 8007c02:	bb5c      	cbnz	r4, 8007c5c <_malloc_r+0x90>
 8007c04:	4629      	mov	r1, r5
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff ffc0 	bl	8007b8c <sbrk_aligned>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	4604      	mov	r4, r0
 8007c10:	d155      	bne.n	8007cbe <_malloc_r+0xf2>
 8007c12:	f8d8 4000 	ldr.w	r4, [r8]
 8007c16:	4626      	mov	r6, r4
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	d145      	bne.n	8007ca8 <_malloc_r+0xdc>
 8007c1c:	2c00      	cmp	r4, #0
 8007c1e:	d048      	beq.n	8007cb2 <_malloc_r+0xe6>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	4631      	mov	r1, r6
 8007c24:	4638      	mov	r0, r7
 8007c26:	eb04 0903 	add.w	r9, r4, r3
 8007c2a:	f000 fc8f 	bl	800854c <_sbrk_r>
 8007c2e:	4581      	cmp	r9, r0
 8007c30:	d13f      	bne.n	8007cb2 <_malloc_r+0xe6>
 8007c32:	6821      	ldr	r1, [r4, #0]
 8007c34:	1a6d      	subs	r5, r5, r1
 8007c36:	4629      	mov	r1, r5
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7ff ffa7 	bl	8007b8c <sbrk_aligned>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d037      	beq.n	8007cb2 <_malloc_r+0xe6>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	442b      	add	r3, r5
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d038      	beq.n	8007cc2 <_malloc_r+0xf6>
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	42a2      	cmp	r2, r4
 8007c54:	d12b      	bne.n	8007cae <_malloc_r+0xe2>
 8007c56:	2200      	movs	r2, #0
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	e00f      	b.n	8007c7c <_malloc_r+0xb0>
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	1b52      	subs	r2, r2, r5
 8007c60:	d41f      	bmi.n	8007ca2 <_malloc_r+0xd6>
 8007c62:	2a0b      	cmp	r2, #11
 8007c64:	d917      	bls.n	8007c96 <_malloc_r+0xca>
 8007c66:	1961      	adds	r1, r4, r5
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	6025      	str	r5, [r4, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	6059      	strne	r1, [r3, #4]
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	bf08      	it	eq
 8007c74:	f8c8 1000 	streq.w	r1, [r8]
 8007c78:	5162      	str	r2, [r4, r5]
 8007c7a:	604b      	str	r3, [r1, #4]
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f104 060b 	add.w	r6, r4, #11
 8007c82:	f000 f829 	bl	8007cd8 <__malloc_unlock>
 8007c86:	f026 0607 	bic.w	r6, r6, #7
 8007c8a:	1d23      	adds	r3, r4, #4
 8007c8c:	1af2      	subs	r2, r6, r3
 8007c8e:	d0ae      	beq.n	8007bee <_malloc_r+0x22>
 8007c90:	1b9b      	subs	r3, r3, r6
 8007c92:	50a3      	str	r3, [r4, r2]
 8007c94:	e7ab      	b.n	8007bee <_malloc_r+0x22>
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	6862      	ldr	r2, [r4, #4]
 8007c9a:	d1dd      	bne.n	8007c58 <_malloc_r+0x8c>
 8007c9c:	f8c8 2000 	str.w	r2, [r8]
 8007ca0:	e7ec      	b.n	8007c7c <_malloc_r+0xb0>
 8007ca2:	4623      	mov	r3, r4
 8007ca4:	6864      	ldr	r4, [r4, #4]
 8007ca6:	e7ac      	b.n	8007c02 <_malloc_r+0x36>
 8007ca8:	4634      	mov	r4, r6
 8007caa:	6876      	ldr	r6, [r6, #4]
 8007cac:	e7b4      	b.n	8007c18 <_malloc_r+0x4c>
 8007cae:	4613      	mov	r3, r2
 8007cb0:	e7cc      	b.n	8007c4c <_malloc_r+0x80>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f000 f80e 	bl	8007cd8 <__malloc_unlock>
 8007cbc:	e797      	b.n	8007bee <_malloc_r+0x22>
 8007cbe:	6025      	str	r5, [r4, #0]
 8007cc0:	e7dc      	b.n	8007c7c <_malloc_r+0xb0>
 8007cc2:	605b      	str	r3, [r3, #4]
 8007cc4:	deff      	udf	#255	; 0xff
 8007cc6:	bf00      	nop
 8007cc8:	20000aec 	.word	0x20000aec

08007ccc <__malloc_lock>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__malloc_lock+0x8>)
 8007cce:	f7ff bf0e 	b.w	8007aee <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20000ae8 	.word	0x20000ae8

08007cd8 <__malloc_unlock>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__malloc_unlock+0x8>)
 8007cda:	f7ff bf09 	b.w	8007af0 <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000ae8 	.word	0x20000ae8

08007ce4 <__ssputs_r>:
 8007ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	688e      	ldr	r6, [r1, #8]
 8007cea:	461f      	mov	r7, r3
 8007cec:	42be      	cmp	r6, r7
 8007cee:	680b      	ldr	r3, [r1, #0]
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4690      	mov	r8, r2
 8007cf6:	d82c      	bhi.n	8007d52 <__ssputs_r+0x6e>
 8007cf8:	898a      	ldrh	r2, [r1, #12]
 8007cfa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cfe:	d026      	beq.n	8007d4e <__ssputs_r+0x6a>
 8007d00:	6965      	ldr	r5, [r4, #20]
 8007d02:	6909      	ldr	r1, [r1, #16]
 8007d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d08:	eba3 0901 	sub.w	r9, r3, r1
 8007d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d10:	1c7b      	adds	r3, r7, #1
 8007d12:	444b      	add	r3, r9
 8007d14:	106d      	asrs	r5, r5, #1
 8007d16:	429d      	cmp	r5, r3
 8007d18:	bf38      	it	cc
 8007d1a:	461d      	movcc	r5, r3
 8007d1c:	0553      	lsls	r3, r2, #21
 8007d1e:	d527      	bpl.n	8007d70 <__ssputs_r+0x8c>
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7ff ff53 	bl	8007bcc <_malloc_r>
 8007d26:	4606      	mov	r6, r0
 8007d28:	b360      	cbz	r0, 8007d84 <__ssputs_r+0xa0>
 8007d2a:	6921      	ldr	r1, [r4, #16]
 8007d2c:	464a      	mov	r2, r9
 8007d2e:	f000 fc1d 	bl	800856c <memcpy>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	6126      	str	r6, [r4, #16]
 8007d40:	6165      	str	r5, [r4, #20]
 8007d42:	444e      	add	r6, r9
 8007d44:	eba5 0509 	sub.w	r5, r5, r9
 8007d48:	6026      	str	r6, [r4, #0]
 8007d4a:	60a5      	str	r5, [r4, #8]
 8007d4c:	463e      	mov	r6, r7
 8007d4e:	42be      	cmp	r6, r7
 8007d50:	d900      	bls.n	8007d54 <__ssputs_r+0x70>
 8007d52:	463e      	mov	r6, r7
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	4632      	mov	r2, r6
 8007d58:	4641      	mov	r1, r8
 8007d5a:	f000 fbbb 	bl	80084d4 <memmove>
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	1b9b      	subs	r3, r3, r6
 8007d62:	60a3      	str	r3, [r4, #8]
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	4433      	add	r3, r6
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d70:	462a      	mov	r2, r5
 8007d72:	f000 fc09 	bl	8008588 <_realloc_r>
 8007d76:	4606      	mov	r6, r0
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d1e0      	bne.n	8007d3e <__ssputs_r+0x5a>
 8007d7c:	6921      	ldr	r1, [r4, #16]
 8007d7e:	4650      	mov	r0, sl
 8007d80:	f7ff feb8 	bl	8007af4 <_free_r>
 8007d84:	230c      	movs	r3, #12
 8007d86:	f8ca 3000 	str.w	r3, [sl]
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	e7e9      	b.n	8007d6c <__ssputs_r+0x88>

08007d98 <_svfiprintf_r>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4698      	mov	r8, r3
 8007d9e:	898b      	ldrh	r3, [r1, #12]
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	b09d      	sub	sp, #116	; 0x74
 8007da4:	4607      	mov	r7, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	4614      	mov	r4, r2
 8007daa:	d50e      	bpl.n	8007dca <_svfiprintf_r+0x32>
 8007dac:	690b      	ldr	r3, [r1, #16]
 8007dae:	b963      	cbnz	r3, 8007dca <_svfiprintf_r+0x32>
 8007db0:	2140      	movs	r1, #64	; 0x40
 8007db2:	f7ff ff0b 	bl	8007bcc <_malloc_r>
 8007db6:	6028      	str	r0, [r5, #0]
 8007db8:	6128      	str	r0, [r5, #16]
 8007dba:	b920      	cbnz	r0, 8007dc6 <_svfiprintf_r+0x2e>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	e0d0      	b.n	8007f68 <_svfiprintf_r+0x1d0>
 8007dc6:	2340      	movs	r3, #64	; 0x40
 8007dc8:	616b      	str	r3, [r5, #20]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dce:	2320      	movs	r3, #32
 8007dd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd8:	2330      	movs	r3, #48	; 0x30
 8007dda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f80 <_svfiprintf_r+0x1e8>
 8007dde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007de2:	f04f 0901 	mov.w	r9, #1
 8007de6:	4623      	mov	r3, r4
 8007de8:	469a      	mov	sl, r3
 8007dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dee:	b10a      	cbz	r2, 8007df4 <_svfiprintf_r+0x5c>
 8007df0:	2a25      	cmp	r2, #37	; 0x25
 8007df2:	d1f9      	bne.n	8007de8 <_svfiprintf_r+0x50>
 8007df4:	ebba 0b04 	subs.w	fp, sl, r4
 8007df8:	d00b      	beq.n	8007e12 <_svfiprintf_r+0x7a>
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ff6f 	bl	8007ce4 <__ssputs_r>
 8007e06:	3001      	adds	r0, #1
 8007e08:	f000 80a9 	beq.w	8007f5e <_svfiprintf_r+0x1c6>
 8007e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e0e:	445a      	add	r2, fp
 8007e10:	9209      	str	r2, [sp, #36]	; 0x24
 8007e12:	f89a 3000 	ldrb.w	r3, [sl]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80a1 	beq.w	8007f5e <_svfiprintf_r+0x1c6>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e26:	f10a 0a01 	add.w	sl, sl, #1
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e32:	931a      	str	r3, [sp, #104]	; 0x68
 8007e34:	4654      	mov	r4, sl
 8007e36:	2205      	movs	r2, #5
 8007e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3c:	4850      	ldr	r0, [pc, #320]	; (8007f80 <_svfiprintf_r+0x1e8>)
 8007e3e:	f7f8 f9d7 	bl	80001f0 <memchr>
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	b9d8      	cbnz	r0, 8007e7e <_svfiprintf_r+0xe6>
 8007e46:	06d0      	lsls	r0, r2, #27
 8007e48:	bf44      	itt	mi
 8007e4a:	2320      	movmi	r3, #32
 8007e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e50:	0711      	lsls	r1, r2, #28
 8007e52:	bf44      	itt	mi
 8007e54:	232b      	movmi	r3, #43	; 0x2b
 8007e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e60:	d015      	beq.n	8007e8e <_svfiprintf_r+0xf6>
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	4654      	mov	r4, sl
 8007e66:	2000      	movs	r0, #0
 8007e68:	f04f 0c0a 	mov.w	ip, #10
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e72:	3b30      	subs	r3, #48	; 0x30
 8007e74:	2b09      	cmp	r3, #9
 8007e76:	d94d      	bls.n	8007f14 <_svfiprintf_r+0x17c>
 8007e78:	b1b0      	cbz	r0, 8007ea8 <_svfiprintf_r+0x110>
 8007e7a:	9207      	str	r2, [sp, #28]
 8007e7c:	e014      	b.n	8007ea8 <_svfiprintf_r+0x110>
 8007e7e:	eba0 0308 	sub.w	r3, r0, r8
 8007e82:	fa09 f303 	lsl.w	r3, r9, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	46a2      	mov	sl, r4
 8007e8c:	e7d2      	b.n	8007e34 <_svfiprintf_r+0x9c>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	9103      	str	r1, [sp, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfbb      	ittet	lt
 8007e9a:	425b      	neglt	r3, r3
 8007e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea0:	9307      	strge	r3, [sp, #28]
 8007ea2:	9307      	strlt	r3, [sp, #28]
 8007ea4:	bfb8      	it	lt
 8007ea6:	9204      	strlt	r2, [sp, #16]
 8007ea8:	7823      	ldrb	r3, [r4, #0]
 8007eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8007eac:	d10c      	bne.n	8007ec8 <_svfiprintf_r+0x130>
 8007eae:	7863      	ldrb	r3, [r4, #1]
 8007eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb2:	d134      	bne.n	8007f1e <_svfiprintf_r+0x186>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	1d1a      	adds	r2, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	9203      	str	r2, [sp, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bfb8      	it	lt
 8007ec0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ec4:	3402      	adds	r4, #2
 8007ec6:	9305      	str	r3, [sp, #20]
 8007ec8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f90 <_svfiprintf_r+0x1f8>
 8007ecc:	7821      	ldrb	r1, [r4, #0]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	f7f8 f98d 	bl	80001f0 <memchr>
 8007ed6:	b138      	cbz	r0, 8007ee8 <_svfiprintf_r+0x150>
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	eba0 000a 	sub.w	r0, r0, sl
 8007ede:	2240      	movs	r2, #64	; 0x40
 8007ee0:	4082      	lsls	r2, r0
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	3401      	adds	r4, #1
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eec:	4825      	ldr	r0, [pc, #148]	; (8007f84 <_svfiprintf_r+0x1ec>)
 8007eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ef2:	2206      	movs	r2, #6
 8007ef4:	f7f8 f97c 	bl	80001f0 <memchr>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d038      	beq.n	8007f6e <_svfiprintf_r+0x1d6>
 8007efc:	4b22      	ldr	r3, [pc, #136]	; (8007f88 <_svfiprintf_r+0x1f0>)
 8007efe:	bb1b      	cbnz	r3, 8007f48 <_svfiprintf_r+0x1b0>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	3307      	adds	r3, #7
 8007f04:	f023 0307 	bic.w	r3, r3, #7
 8007f08:	3308      	adds	r3, #8
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	4433      	add	r3, r6
 8007f10:	9309      	str	r3, [sp, #36]	; 0x24
 8007f12:	e768      	b.n	8007de6 <_svfiprintf_r+0x4e>
 8007f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f18:	460c      	mov	r4, r1
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	e7a6      	b.n	8007e6c <_svfiprintf_r+0xd4>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	3401      	adds	r4, #1
 8007f22:	9305      	str	r3, [sp, #20]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f04f 0c0a 	mov.w	ip, #10
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f30:	3a30      	subs	r2, #48	; 0x30
 8007f32:	2a09      	cmp	r2, #9
 8007f34:	d903      	bls.n	8007f3e <_svfiprintf_r+0x1a6>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0c6      	beq.n	8007ec8 <_svfiprintf_r+0x130>
 8007f3a:	9105      	str	r1, [sp, #20]
 8007f3c:	e7c4      	b.n	8007ec8 <_svfiprintf_r+0x130>
 8007f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f42:	4604      	mov	r4, r0
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7f0      	b.n	8007f2a <_svfiprintf_r+0x192>
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <_svfiprintf_r+0x1f4>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4638      	mov	r0, r7
 8007f54:	f3af 8000 	nop.w
 8007f58:	1c42      	adds	r2, r0, #1
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	d1d6      	bne.n	8007f0c <_svfiprintf_r+0x174>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	065b      	lsls	r3, r3, #25
 8007f62:	f53f af2d 	bmi.w	8007dc0 <_svfiprintf_r+0x28>
 8007f66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f68:	b01d      	add	sp, #116	; 0x74
 8007f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6e:	ab03      	add	r3, sp, #12
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	462a      	mov	r2, r5
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <_svfiprintf_r+0x1f4>)
 8007f76:	a904      	add	r1, sp, #16
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f000 f879 	bl	8008070 <_printf_i>
 8007f7e:	e7eb      	b.n	8007f58 <_svfiprintf_r+0x1c0>
 8007f80:	080089c0 	.word	0x080089c0
 8007f84:	080089ca 	.word	0x080089ca
 8007f88:	00000000 	.word	0x00000000
 8007f8c:	08007ce5 	.word	0x08007ce5
 8007f90:	080089c6 	.word	0x080089c6

08007f94 <_printf_common>:
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	4616      	mov	r6, r2
 8007f9a:	4699      	mov	r9, r3
 8007f9c:	688a      	ldr	r2, [r1, #8]
 8007f9e:	690b      	ldr	r3, [r1, #16]
 8007fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	bfb8      	it	lt
 8007fa8:	4613      	movlt	r3, r2
 8007faa:	6033      	str	r3, [r6, #0]
 8007fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	b10a      	cbz	r2, 8007fba <_printf_common+0x26>
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	6033      	str	r3, [r6, #0]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	0699      	lsls	r1, r3, #26
 8007fbe:	bf42      	ittt	mi
 8007fc0:	6833      	ldrmi	r3, [r6, #0]
 8007fc2:	3302      	addmi	r3, #2
 8007fc4:	6033      	strmi	r3, [r6, #0]
 8007fc6:	6825      	ldr	r5, [r4, #0]
 8007fc8:	f015 0506 	ands.w	r5, r5, #6
 8007fcc:	d106      	bne.n	8007fdc <_printf_common+0x48>
 8007fce:	f104 0a19 	add.w	sl, r4, #25
 8007fd2:	68e3      	ldr	r3, [r4, #12]
 8007fd4:	6832      	ldr	r2, [r6, #0]
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	42ab      	cmp	r3, r5
 8007fda:	dc26      	bgt.n	800802a <_printf_common+0x96>
 8007fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fe0:	1e13      	subs	r3, r2, #0
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	bf18      	it	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	0692      	lsls	r2, r2, #26
 8007fea:	d42b      	bmi.n	8008044 <_printf_common+0xb0>
 8007fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	47c0      	blx	r8
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d01e      	beq.n	8008038 <_printf_common+0xa4>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	6922      	ldr	r2, [r4, #16]
 8007ffe:	f003 0306 	and.w	r3, r3, #6
 8008002:	2b04      	cmp	r3, #4
 8008004:	bf02      	ittt	eq
 8008006:	68e5      	ldreq	r5, [r4, #12]
 8008008:	6833      	ldreq	r3, [r6, #0]
 800800a:	1aed      	subeq	r5, r5, r3
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	bf0c      	ite	eq
 8008010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008014:	2500      	movne	r5, #0
 8008016:	4293      	cmp	r3, r2
 8008018:	bfc4      	itt	gt
 800801a:	1a9b      	subgt	r3, r3, r2
 800801c:	18ed      	addgt	r5, r5, r3
 800801e:	2600      	movs	r6, #0
 8008020:	341a      	adds	r4, #26
 8008022:	42b5      	cmp	r5, r6
 8008024:	d11a      	bne.n	800805c <_printf_common+0xc8>
 8008026:	2000      	movs	r0, #0
 8008028:	e008      	b.n	800803c <_printf_common+0xa8>
 800802a:	2301      	movs	r3, #1
 800802c:	4652      	mov	r2, sl
 800802e:	4649      	mov	r1, r9
 8008030:	4638      	mov	r0, r7
 8008032:	47c0      	blx	r8
 8008034:	3001      	adds	r0, #1
 8008036:	d103      	bne.n	8008040 <_printf_common+0xac>
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008040:	3501      	adds	r5, #1
 8008042:	e7c6      	b.n	8007fd2 <_printf_common+0x3e>
 8008044:	18e1      	adds	r1, r4, r3
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	2030      	movs	r0, #48	; 0x30
 800804a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800804e:	4422      	add	r2, r4
 8008050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008058:	3302      	adds	r3, #2
 800805a:	e7c7      	b.n	8007fec <_printf_common+0x58>
 800805c:	2301      	movs	r3, #1
 800805e:	4622      	mov	r2, r4
 8008060:	4649      	mov	r1, r9
 8008062:	4638      	mov	r0, r7
 8008064:	47c0      	blx	r8
 8008066:	3001      	adds	r0, #1
 8008068:	d0e6      	beq.n	8008038 <_printf_common+0xa4>
 800806a:	3601      	adds	r6, #1
 800806c:	e7d9      	b.n	8008022 <_printf_common+0x8e>
	...

08008070 <_printf_i>:
 8008070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	7e0f      	ldrb	r7, [r1, #24]
 8008076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008078:	2f78      	cmp	r7, #120	; 0x78
 800807a:	4691      	mov	r9, r2
 800807c:	4680      	mov	r8, r0
 800807e:	460c      	mov	r4, r1
 8008080:	469a      	mov	sl, r3
 8008082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008086:	d807      	bhi.n	8008098 <_printf_i+0x28>
 8008088:	2f62      	cmp	r7, #98	; 0x62
 800808a:	d80a      	bhi.n	80080a2 <_printf_i+0x32>
 800808c:	2f00      	cmp	r7, #0
 800808e:	f000 80d4 	beq.w	800823a <_printf_i+0x1ca>
 8008092:	2f58      	cmp	r7, #88	; 0x58
 8008094:	f000 80c0 	beq.w	8008218 <_printf_i+0x1a8>
 8008098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800809c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080a0:	e03a      	b.n	8008118 <_printf_i+0xa8>
 80080a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080a6:	2b15      	cmp	r3, #21
 80080a8:	d8f6      	bhi.n	8008098 <_printf_i+0x28>
 80080aa:	a101      	add	r1, pc, #4	; (adr r1, 80080b0 <_printf_i+0x40>)
 80080ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080b0:	08008109 	.word	0x08008109
 80080b4:	0800811d 	.word	0x0800811d
 80080b8:	08008099 	.word	0x08008099
 80080bc:	08008099 	.word	0x08008099
 80080c0:	08008099 	.word	0x08008099
 80080c4:	08008099 	.word	0x08008099
 80080c8:	0800811d 	.word	0x0800811d
 80080cc:	08008099 	.word	0x08008099
 80080d0:	08008099 	.word	0x08008099
 80080d4:	08008099 	.word	0x08008099
 80080d8:	08008099 	.word	0x08008099
 80080dc:	08008221 	.word	0x08008221
 80080e0:	08008149 	.word	0x08008149
 80080e4:	080081db 	.word	0x080081db
 80080e8:	08008099 	.word	0x08008099
 80080ec:	08008099 	.word	0x08008099
 80080f0:	08008243 	.word	0x08008243
 80080f4:	08008099 	.word	0x08008099
 80080f8:	08008149 	.word	0x08008149
 80080fc:	08008099 	.word	0x08008099
 8008100:	08008099 	.word	0x08008099
 8008104:	080081e3 	.word	0x080081e3
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	602a      	str	r2, [r5, #0]
 8008110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008118:	2301      	movs	r3, #1
 800811a:	e09f      	b.n	800825c <_printf_i+0x1ec>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	0607      	lsls	r7, r0, #24
 8008122:	f103 0104 	add.w	r1, r3, #4
 8008126:	6029      	str	r1, [r5, #0]
 8008128:	d501      	bpl.n	800812e <_printf_i+0xbe>
 800812a:	681e      	ldr	r6, [r3, #0]
 800812c:	e003      	b.n	8008136 <_printf_i+0xc6>
 800812e:	0646      	lsls	r6, r0, #25
 8008130:	d5fb      	bpl.n	800812a <_printf_i+0xba>
 8008132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008136:	2e00      	cmp	r6, #0
 8008138:	da03      	bge.n	8008142 <_printf_i+0xd2>
 800813a:	232d      	movs	r3, #45	; 0x2d
 800813c:	4276      	negs	r6, r6
 800813e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008142:	485a      	ldr	r0, [pc, #360]	; (80082ac <_printf_i+0x23c>)
 8008144:	230a      	movs	r3, #10
 8008146:	e012      	b.n	800816e <_printf_i+0xfe>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	6820      	ldr	r0, [r4, #0]
 800814c:	1d19      	adds	r1, r3, #4
 800814e:	6029      	str	r1, [r5, #0]
 8008150:	0605      	lsls	r5, r0, #24
 8008152:	d501      	bpl.n	8008158 <_printf_i+0xe8>
 8008154:	681e      	ldr	r6, [r3, #0]
 8008156:	e002      	b.n	800815e <_printf_i+0xee>
 8008158:	0641      	lsls	r1, r0, #25
 800815a:	d5fb      	bpl.n	8008154 <_printf_i+0xe4>
 800815c:	881e      	ldrh	r6, [r3, #0]
 800815e:	4853      	ldr	r0, [pc, #332]	; (80082ac <_printf_i+0x23c>)
 8008160:	2f6f      	cmp	r7, #111	; 0x6f
 8008162:	bf0c      	ite	eq
 8008164:	2308      	moveq	r3, #8
 8008166:	230a      	movne	r3, #10
 8008168:	2100      	movs	r1, #0
 800816a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800816e:	6865      	ldr	r5, [r4, #4]
 8008170:	60a5      	str	r5, [r4, #8]
 8008172:	2d00      	cmp	r5, #0
 8008174:	bfa2      	ittt	ge
 8008176:	6821      	ldrge	r1, [r4, #0]
 8008178:	f021 0104 	bicge.w	r1, r1, #4
 800817c:	6021      	strge	r1, [r4, #0]
 800817e:	b90e      	cbnz	r6, 8008184 <_printf_i+0x114>
 8008180:	2d00      	cmp	r5, #0
 8008182:	d04b      	beq.n	800821c <_printf_i+0x1ac>
 8008184:	4615      	mov	r5, r2
 8008186:	fbb6 f1f3 	udiv	r1, r6, r3
 800818a:	fb03 6711 	mls	r7, r3, r1, r6
 800818e:	5dc7      	ldrb	r7, [r0, r7]
 8008190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008194:	4637      	mov	r7, r6
 8008196:	42bb      	cmp	r3, r7
 8008198:	460e      	mov	r6, r1
 800819a:	d9f4      	bls.n	8008186 <_printf_i+0x116>
 800819c:	2b08      	cmp	r3, #8
 800819e:	d10b      	bne.n	80081b8 <_printf_i+0x148>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	07de      	lsls	r6, r3, #31
 80081a4:	d508      	bpl.n	80081b8 <_printf_i+0x148>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4299      	cmp	r1, r3
 80081ac:	bfde      	ittt	le
 80081ae:	2330      	movle	r3, #48	; 0x30
 80081b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081b8:	1b52      	subs	r2, r2, r5
 80081ba:	6122      	str	r2, [r4, #16]
 80081bc:	f8cd a000 	str.w	sl, [sp]
 80081c0:	464b      	mov	r3, r9
 80081c2:	aa03      	add	r2, sp, #12
 80081c4:	4621      	mov	r1, r4
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7ff fee4 	bl	8007f94 <_printf_common>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d14a      	bne.n	8008266 <_printf_i+0x1f6>
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	b004      	add	sp, #16
 80081d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f043 0320 	orr.w	r3, r3, #32
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	4833      	ldr	r0, [pc, #204]	; (80082b0 <_printf_i+0x240>)
 80081e4:	2778      	movs	r7, #120	; 0x78
 80081e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	6829      	ldr	r1, [r5, #0]
 80081ee:	061f      	lsls	r7, r3, #24
 80081f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80081f4:	d402      	bmi.n	80081fc <_printf_i+0x18c>
 80081f6:	065f      	lsls	r7, r3, #25
 80081f8:	bf48      	it	mi
 80081fa:	b2b6      	uxthmi	r6, r6
 80081fc:	07df      	lsls	r7, r3, #31
 80081fe:	bf48      	it	mi
 8008200:	f043 0320 	orrmi.w	r3, r3, #32
 8008204:	6029      	str	r1, [r5, #0]
 8008206:	bf48      	it	mi
 8008208:	6023      	strmi	r3, [r4, #0]
 800820a:	b91e      	cbnz	r6, 8008214 <_printf_i+0x1a4>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	f023 0320 	bic.w	r3, r3, #32
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	2310      	movs	r3, #16
 8008216:	e7a7      	b.n	8008168 <_printf_i+0xf8>
 8008218:	4824      	ldr	r0, [pc, #144]	; (80082ac <_printf_i+0x23c>)
 800821a:	e7e4      	b.n	80081e6 <_printf_i+0x176>
 800821c:	4615      	mov	r5, r2
 800821e:	e7bd      	b.n	800819c <_printf_i+0x12c>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	6826      	ldr	r6, [r4, #0]
 8008224:	6961      	ldr	r1, [r4, #20]
 8008226:	1d18      	adds	r0, r3, #4
 8008228:	6028      	str	r0, [r5, #0]
 800822a:	0635      	lsls	r5, r6, #24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	d501      	bpl.n	8008234 <_printf_i+0x1c4>
 8008230:	6019      	str	r1, [r3, #0]
 8008232:	e002      	b.n	800823a <_printf_i+0x1ca>
 8008234:	0670      	lsls	r0, r6, #25
 8008236:	d5fb      	bpl.n	8008230 <_printf_i+0x1c0>
 8008238:	8019      	strh	r1, [r3, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	4615      	mov	r5, r2
 8008240:	e7bc      	b.n	80081bc <_printf_i+0x14c>
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	1d1a      	adds	r2, r3, #4
 8008246:	602a      	str	r2, [r5, #0]
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	6862      	ldr	r2, [r4, #4]
 800824c:	2100      	movs	r1, #0
 800824e:	4628      	mov	r0, r5
 8008250:	f7f7 ffce 	bl	80001f0 <memchr>
 8008254:	b108      	cbz	r0, 800825a <_printf_i+0x1ea>
 8008256:	1b40      	subs	r0, r0, r5
 8008258:	6060      	str	r0, [r4, #4]
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	6123      	str	r3, [r4, #16]
 800825e:	2300      	movs	r3, #0
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	e7aa      	b.n	80081bc <_printf_i+0x14c>
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	462a      	mov	r2, r5
 800826a:	4649      	mov	r1, r9
 800826c:	4640      	mov	r0, r8
 800826e:	47d0      	blx	sl
 8008270:	3001      	adds	r0, #1
 8008272:	d0ad      	beq.n	80081d0 <_printf_i+0x160>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	079b      	lsls	r3, r3, #30
 8008278:	d413      	bmi.n	80082a2 <_printf_i+0x232>
 800827a:	68e0      	ldr	r0, [r4, #12]
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	4298      	cmp	r0, r3
 8008280:	bfb8      	it	lt
 8008282:	4618      	movlt	r0, r3
 8008284:	e7a6      	b.n	80081d4 <_printf_i+0x164>
 8008286:	2301      	movs	r3, #1
 8008288:	4632      	mov	r2, r6
 800828a:	4649      	mov	r1, r9
 800828c:	4640      	mov	r0, r8
 800828e:	47d0      	blx	sl
 8008290:	3001      	adds	r0, #1
 8008292:	d09d      	beq.n	80081d0 <_printf_i+0x160>
 8008294:	3501      	adds	r5, #1
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	9903      	ldr	r1, [sp, #12]
 800829a:	1a5b      	subs	r3, r3, r1
 800829c:	42ab      	cmp	r3, r5
 800829e:	dcf2      	bgt.n	8008286 <_printf_i+0x216>
 80082a0:	e7eb      	b.n	800827a <_printf_i+0x20a>
 80082a2:	2500      	movs	r5, #0
 80082a4:	f104 0619 	add.w	r6, r4, #25
 80082a8:	e7f5      	b.n	8008296 <_printf_i+0x226>
 80082aa:	bf00      	nop
 80082ac:	080089d1 	.word	0x080089d1
 80082b0:	080089e2 	.word	0x080089e2

080082b4 <__sflush_r>:
 80082b4:	898a      	ldrh	r2, [r1, #12]
 80082b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ba:	4605      	mov	r5, r0
 80082bc:	0710      	lsls	r0, r2, #28
 80082be:	460c      	mov	r4, r1
 80082c0:	d458      	bmi.n	8008374 <__sflush_r+0xc0>
 80082c2:	684b      	ldr	r3, [r1, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dc05      	bgt.n	80082d4 <__sflush_r+0x20>
 80082c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dc02      	bgt.n	80082d4 <__sflush_r+0x20>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d0f9      	beq.n	80082ce <__sflush_r+0x1a>
 80082da:	2300      	movs	r3, #0
 80082dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082e0:	682f      	ldr	r7, [r5, #0]
 80082e2:	6a21      	ldr	r1, [r4, #32]
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	d032      	beq.n	800834e <__sflush_r+0x9a>
 80082e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	075a      	lsls	r2, r3, #29
 80082ee:	d505      	bpl.n	80082fc <__sflush_r+0x48>
 80082f0:	6863      	ldr	r3, [r4, #4]
 80082f2:	1ac0      	subs	r0, r0, r3
 80082f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f6:	b10b      	cbz	r3, 80082fc <__sflush_r+0x48>
 80082f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082fa:	1ac0      	subs	r0, r0, r3
 80082fc:	2300      	movs	r3, #0
 80082fe:	4602      	mov	r2, r0
 8008300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008302:	6a21      	ldr	r1, [r4, #32]
 8008304:	4628      	mov	r0, r5
 8008306:	47b0      	blx	r6
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	d106      	bne.n	800831c <__sflush_r+0x68>
 800830e:	6829      	ldr	r1, [r5, #0]
 8008310:	291d      	cmp	r1, #29
 8008312:	d82b      	bhi.n	800836c <__sflush_r+0xb8>
 8008314:	4a29      	ldr	r2, [pc, #164]	; (80083bc <__sflush_r+0x108>)
 8008316:	410a      	asrs	r2, r1
 8008318:	07d6      	lsls	r6, r2, #31
 800831a:	d427      	bmi.n	800836c <__sflush_r+0xb8>
 800831c:	2200      	movs	r2, #0
 800831e:	6062      	str	r2, [r4, #4]
 8008320:	04d9      	lsls	r1, r3, #19
 8008322:	6922      	ldr	r2, [r4, #16]
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	d504      	bpl.n	8008332 <__sflush_r+0x7e>
 8008328:	1c42      	adds	r2, r0, #1
 800832a:	d101      	bne.n	8008330 <__sflush_r+0x7c>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b903      	cbnz	r3, 8008332 <__sflush_r+0x7e>
 8008330:	6560      	str	r0, [r4, #84]	; 0x54
 8008332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	2900      	cmp	r1, #0
 8008338:	d0c9      	beq.n	80082ce <__sflush_r+0x1a>
 800833a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833e:	4299      	cmp	r1, r3
 8008340:	d002      	beq.n	8008348 <__sflush_r+0x94>
 8008342:	4628      	mov	r0, r5
 8008344:	f7ff fbd6 	bl	8007af4 <_free_r>
 8008348:	2000      	movs	r0, #0
 800834a:	6360      	str	r0, [r4, #52]	; 0x34
 800834c:	e7c0      	b.n	80082d0 <__sflush_r+0x1c>
 800834e:	2301      	movs	r3, #1
 8008350:	4628      	mov	r0, r5
 8008352:	47b0      	blx	r6
 8008354:	1c41      	adds	r1, r0, #1
 8008356:	d1c8      	bne.n	80082ea <__sflush_r+0x36>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c5      	beq.n	80082ea <__sflush_r+0x36>
 800835e:	2b1d      	cmp	r3, #29
 8008360:	d001      	beq.n	8008366 <__sflush_r+0xb2>
 8008362:	2b16      	cmp	r3, #22
 8008364:	d101      	bne.n	800836a <__sflush_r+0xb6>
 8008366:	602f      	str	r7, [r5, #0]
 8008368:	e7b1      	b.n	80082ce <__sflush_r+0x1a>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	e7ad      	b.n	80082d0 <__sflush_r+0x1c>
 8008374:	690f      	ldr	r7, [r1, #16]
 8008376:	2f00      	cmp	r7, #0
 8008378:	d0a9      	beq.n	80082ce <__sflush_r+0x1a>
 800837a:	0793      	lsls	r3, r2, #30
 800837c:	680e      	ldr	r6, [r1, #0]
 800837e:	bf08      	it	eq
 8008380:	694b      	ldreq	r3, [r1, #20]
 8008382:	600f      	str	r7, [r1, #0]
 8008384:	bf18      	it	ne
 8008386:	2300      	movne	r3, #0
 8008388:	eba6 0807 	sub.w	r8, r6, r7
 800838c:	608b      	str	r3, [r1, #8]
 800838e:	f1b8 0f00 	cmp.w	r8, #0
 8008392:	dd9c      	ble.n	80082ce <__sflush_r+0x1a>
 8008394:	6a21      	ldr	r1, [r4, #32]
 8008396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008398:	4643      	mov	r3, r8
 800839a:	463a      	mov	r2, r7
 800839c:	4628      	mov	r0, r5
 800839e:	47b0      	blx	r6
 80083a0:	2800      	cmp	r0, #0
 80083a2:	dc06      	bgt.n	80083b2 <__sflush_r+0xfe>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e78e      	b.n	80082d0 <__sflush_r+0x1c>
 80083b2:	4407      	add	r7, r0
 80083b4:	eba8 0800 	sub.w	r8, r8, r0
 80083b8:	e7e9      	b.n	800838e <__sflush_r+0xda>
 80083ba:	bf00      	nop
 80083bc:	dfbffffe 	.word	0xdfbffffe

080083c0 <_fflush_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	4605      	mov	r5, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	b913      	cbnz	r3, 80083d0 <_fflush_r+0x10>
 80083ca:	2500      	movs	r5, #0
 80083cc:	4628      	mov	r0, r5
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	b118      	cbz	r0, 80083da <_fflush_r+0x1a>
 80083d2:	6a03      	ldr	r3, [r0, #32]
 80083d4:	b90b      	cbnz	r3, 80083da <_fflush_r+0x1a>
 80083d6:	f7ff f987 	bl	80076e8 <__sinit>
 80083da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f3      	beq.n	80083ca <_fflush_r+0xa>
 80083e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e4:	07d0      	lsls	r0, r2, #31
 80083e6:	d404      	bmi.n	80083f2 <_fflush_r+0x32>
 80083e8:	0599      	lsls	r1, r3, #22
 80083ea:	d402      	bmi.n	80083f2 <_fflush_r+0x32>
 80083ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ee:	f7ff fb7e 	bl	8007aee <__retarget_lock_acquire_recursive>
 80083f2:	4628      	mov	r0, r5
 80083f4:	4621      	mov	r1, r4
 80083f6:	f7ff ff5d 	bl	80082b4 <__sflush_r>
 80083fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083fc:	07da      	lsls	r2, r3, #31
 80083fe:	4605      	mov	r5, r0
 8008400:	d4e4      	bmi.n	80083cc <_fflush_r+0xc>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	059b      	lsls	r3, r3, #22
 8008406:	d4e1      	bmi.n	80083cc <_fflush_r+0xc>
 8008408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840a:	f7ff fb71 	bl	8007af0 <__retarget_lock_release_recursive>
 800840e:	e7dd      	b.n	80083cc <_fflush_r+0xc>

08008410 <__swhatbuf_r>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008418:	2900      	cmp	r1, #0
 800841a:	b096      	sub	sp, #88	; 0x58
 800841c:	4615      	mov	r5, r2
 800841e:	461e      	mov	r6, r3
 8008420:	da0d      	bge.n	800843e <__swhatbuf_r+0x2e>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	bf0c      	ite	eq
 800842e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008432:	2340      	movne	r3, #64	; 0x40
 8008434:	2000      	movs	r0, #0
 8008436:	6031      	str	r1, [r6, #0]
 8008438:	602b      	str	r3, [r5, #0]
 800843a:	b016      	add	sp, #88	; 0x58
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	466a      	mov	r2, sp
 8008440:	f000 f862 	bl	8008508 <_fstat_r>
 8008444:	2800      	cmp	r0, #0
 8008446:	dbec      	blt.n	8008422 <__swhatbuf_r+0x12>
 8008448:	9901      	ldr	r1, [sp, #4]
 800844a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800844e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008452:	4259      	negs	r1, r3
 8008454:	4159      	adcs	r1, r3
 8008456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845a:	e7eb      	b.n	8008434 <__swhatbuf_r+0x24>

0800845c <__smakebuf_r>:
 800845c:	898b      	ldrh	r3, [r1, #12]
 800845e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008460:	079d      	lsls	r5, r3, #30
 8008462:	4606      	mov	r6, r0
 8008464:	460c      	mov	r4, r1
 8008466:	d507      	bpl.n	8008478 <__smakebuf_r+0x1c>
 8008468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	2301      	movs	r3, #1
 8008472:	6163      	str	r3, [r4, #20]
 8008474:	b002      	add	sp, #8
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	ab01      	add	r3, sp, #4
 800847a:	466a      	mov	r2, sp
 800847c:	f7ff ffc8 	bl	8008410 <__swhatbuf_r>
 8008480:	9900      	ldr	r1, [sp, #0]
 8008482:	4605      	mov	r5, r0
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fba1 	bl	8007bcc <_malloc_r>
 800848a:	b948      	cbnz	r0, 80084a0 <__smakebuf_r+0x44>
 800848c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008490:	059a      	lsls	r2, r3, #22
 8008492:	d4ef      	bmi.n	8008474 <__smakebuf_r+0x18>
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	e7e3      	b.n	8008468 <__smakebuf_r+0xc>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	6020      	str	r0, [r4, #0]
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	9b00      	ldr	r3, [sp, #0]
 80084ac:	6163      	str	r3, [r4, #20]
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	6120      	str	r0, [r4, #16]
 80084b2:	b15b      	cbz	r3, 80084cc <__smakebuf_r+0x70>
 80084b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f837 	bl	800852c <_isatty_r>
 80084be:	b128      	cbz	r0, 80084cc <__smakebuf_r+0x70>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	431d      	orrs	r5, r3
 80084d0:	81a5      	strh	r5, [r4, #12]
 80084d2:	e7cf      	b.n	8008474 <__smakebuf_r+0x18>

080084d4 <memmove>:
 80084d4:	4288      	cmp	r0, r1
 80084d6:	b510      	push	{r4, lr}
 80084d8:	eb01 0402 	add.w	r4, r1, r2
 80084dc:	d902      	bls.n	80084e4 <memmove+0x10>
 80084de:	4284      	cmp	r4, r0
 80084e0:	4623      	mov	r3, r4
 80084e2:	d807      	bhi.n	80084f4 <memmove+0x20>
 80084e4:	1e43      	subs	r3, r0, #1
 80084e6:	42a1      	cmp	r1, r4
 80084e8:	d008      	beq.n	80084fc <memmove+0x28>
 80084ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084f2:	e7f8      	b.n	80084e6 <memmove+0x12>
 80084f4:	4402      	add	r2, r0
 80084f6:	4601      	mov	r1, r0
 80084f8:	428a      	cmp	r2, r1
 80084fa:	d100      	bne.n	80084fe <memmove+0x2a>
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008506:	e7f7      	b.n	80084f8 <memmove+0x24>

08008508 <_fstat_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d07      	ldr	r5, [pc, #28]	; (8008528 <_fstat_r+0x20>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	4611      	mov	r1, r2
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	f7fa fedc 	bl	80032d2 <_fstat>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	d102      	bne.n	8008524 <_fstat_r+0x1c>
 800851e:	682b      	ldr	r3, [r5, #0]
 8008520:	b103      	cbz	r3, 8008524 <_fstat_r+0x1c>
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	bd38      	pop	{r3, r4, r5, pc}
 8008526:	bf00      	nop
 8008528:	20000ae4 	.word	0x20000ae4

0800852c <_isatty_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d06      	ldr	r5, [pc, #24]	; (8008548 <_isatty_r+0x1c>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f7fa fedb 	bl	80032f2 <_isatty>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_isatty_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_isatty_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	20000ae4 	.word	0x20000ae4

0800854c <_sbrk_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	; (8008568 <_sbrk_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7fa fee4 	bl	8003324 <_sbrk>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_sbrk_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_sbrk_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	20000ae4 	.word	0x20000ae4

0800856c <memcpy>:
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	f100 33ff 	add.w	r3, r0, #4294967295
 8008574:	d100      	bne.n	8008578 <memcpy+0xc>
 8008576:	4770      	bx	lr
 8008578:	b510      	push	{r4, lr}
 800857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008582:	4291      	cmp	r1, r2
 8008584:	d1f9      	bne.n	800857a <memcpy+0xe>
 8008586:	bd10      	pop	{r4, pc}

08008588 <_realloc_r>:
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	4680      	mov	r8, r0
 800858e:	4614      	mov	r4, r2
 8008590:	460e      	mov	r6, r1
 8008592:	b921      	cbnz	r1, 800859e <_realloc_r+0x16>
 8008594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	4611      	mov	r1, r2
 800859a:	f7ff bb17 	b.w	8007bcc <_malloc_r>
 800859e:	b92a      	cbnz	r2, 80085ac <_realloc_r+0x24>
 80085a0:	f7ff faa8 	bl	8007af4 <_free_r>
 80085a4:	4625      	mov	r5, r4
 80085a6:	4628      	mov	r0, r5
 80085a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ac:	f000 f81b 	bl	80085e6 <_malloc_usable_size_r>
 80085b0:	4284      	cmp	r4, r0
 80085b2:	4607      	mov	r7, r0
 80085b4:	d802      	bhi.n	80085bc <_realloc_r+0x34>
 80085b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085ba:	d812      	bhi.n	80085e2 <_realloc_r+0x5a>
 80085bc:	4621      	mov	r1, r4
 80085be:	4640      	mov	r0, r8
 80085c0:	f7ff fb04 	bl	8007bcc <_malloc_r>
 80085c4:	4605      	mov	r5, r0
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d0ed      	beq.n	80085a6 <_realloc_r+0x1e>
 80085ca:	42bc      	cmp	r4, r7
 80085cc:	4622      	mov	r2, r4
 80085ce:	4631      	mov	r1, r6
 80085d0:	bf28      	it	cs
 80085d2:	463a      	movcs	r2, r7
 80085d4:	f7ff ffca 	bl	800856c <memcpy>
 80085d8:	4631      	mov	r1, r6
 80085da:	4640      	mov	r0, r8
 80085dc:	f7ff fa8a 	bl	8007af4 <_free_r>
 80085e0:	e7e1      	b.n	80085a6 <_realloc_r+0x1e>
 80085e2:	4635      	mov	r5, r6
 80085e4:	e7df      	b.n	80085a6 <_realloc_r+0x1e>

080085e6 <_malloc_usable_size_r>:
 80085e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ea:	1f18      	subs	r0, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfbc      	itt	lt
 80085f0:	580b      	ldrlt	r3, [r1, r0]
 80085f2:	18c0      	addlt	r0, r0, r3
 80085f4:	4770      	bx	lr
	...

080085f8 <_init>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr

08008604 <_fini>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	bf00      	nop
 8008608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860a:	bc08      	pop	{r3}
 800860c:	469e      	mov	lr, r3
 800860e:	4770      	bx	lr
