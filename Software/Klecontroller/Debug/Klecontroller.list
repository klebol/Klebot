
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000836c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800850c  0800850c  0001850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088dc  080088dc  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080088e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  20000188  08008a6c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08008a6c  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017496  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004479  00000000  00000000  00037691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  0003bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a7  00000000  00000000  0003d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c77b  00000000  00000000  0003e3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022c40  00000000  00000000  0005ab6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fdc3  00000000  00000000  0007d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065b4  00000000  00000000  0011d570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00123b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000188 	.word	0x20000188
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084f4 	.word	0x080084f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	080084f4 	.word	0x080084f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800059e:	3301      	adds	r3, #1
 80005a0:	425a      	negs	r2, r3
 80005a2:	f003 031f 	and.w	r3, r3, #31
 80005a6:	f002 021f 	and.w	r2, r2, #31
 80005aa:	bf58      	it	pl
 80005ac:	4253      	negpl	r3, r2
 80005ae:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005b6:	7bfa      	ldrb	r2, [r7, #15]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d101      	bne.n	80005c0 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	e00b      	b.n	80005d8 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7bfa      	ldrb	r2, [r7, #15]
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005f4:	3301      	adds	r3, #1
 80005f6:	425a      	negs	r2, r3
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	f002 021f 	and.w	r2, r2, #31
 8000600:	bf58      	it	pl
 8000602:	4253      	negpl	r3, r2
 8000604:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000612:	429a      	cmp	r2, r3
 8000614:	d101      	bne.n	800061a <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000616:	2301      	movs	r3, #1
 8000618:	e00c      	b.n	8000634 <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	5c9a      	ldrb	r2, [r3, r2]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7bfa      	ldrb	r2, [r7, #15]
 800062e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <MX_ADC1_Init+0xec>)
 8000654:	4a36      	ldr	r2, [pc, #216]	; (8000730 <MX_ADC1_Init+0xf0>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <MX_ADC1_Init+0xec>)
 800065a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <MX_ADC1_Init+0xec>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <MX_ADC1_Init+0xec>)
 8000668:	2201      	movs	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_ADC1_Init+0xec>)
 800066e:	2201      	movs	r2, #1
 8000670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_ADC1_Init+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_ADC1_Init+0xec>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_ADC1_Init+0xec>)
 8000682:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <MX_ADC1_Init+0xf4>)
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_ADC1_Init+0xec>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0xec>)
 800068e:	2204      	movs	r2, #4
 8000690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_ADC1_Init+0xec>)
 8000694:	2201      	movs	r2, #1
 8000696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_ADC1_Init+0xec>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a0:	4822      	ldr	r0, [pc, #136]	; (800072c <MX_ADC1_Init+0xec>)
 80006a2:	f002 ffad 	bl	8003600 <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006ac:	f001 fb1e 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006b0:	230b      	movs	r3, #11
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006b8:	2307      	movs	r3, #7
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <MX_ADC1_Init+0xec>)
 80006c2:	f003 f9ff 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006cc:	f001 fb0e 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <MX_ADC1_Init+0xec>)
 80006de:	f003 f9f1 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e8:	f001 fb00 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ADC1_Init+0xec>)
 80006fa:	f003 f9e3 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000704:	f001 faf2 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000708:	2302      	movs	r3, #2
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_ADC1_Init+0xec>)
 8000716:	f003 f9d5 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000720:	f001 fae4 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200001a4 	.word	0x200001a4
 8000730:	40012000 	.word	0x40012000
 8000734:	0f000001 	.word	0x0f000001

08000738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <HAL_ADC_MspInit+0x110>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d171      	bne.n	800083e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a3a      	ldr	r2, [pc, #232]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <HAL_ADC_MspInit+0x114>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <HAL_ADC_MspInit+0x114>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	; (800084c <HAL_ADC_MspInit+0x114>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <HAL_ADC_MspInit+0x114>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 80007ae:	2306      	movs	r3, #6
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	2303      	movs	r3, #3
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4823      	ldr	r0, [pc, #140]	; (8000850 <HAL_ADC_MspInit+0x118>)
 80007c2:	f004 f8dd 	bl	8004980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 80007c6:	2306      	movs	r3, #6
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ca:	2303      	movs	r3, #3
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <HAL_ADC_MspInit+0x11c>)
 80007da:	f004 f8d1 	bl	8004980 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <HAL_ADC_MspInit+0x124>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_ADC_MspInit+0x120>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000824:	f003 fd1a 	bl	800425c <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800082e:	f001 fa5d 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_ADC_MspInit+0x120>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40012000 	.word	0x40012000
 800084c:	40023800 	.word	0x40023800
 8000850:	40020800 	.word	0x40020800
 8000854:	40020000 	.word	0x40020000
 8000858:	200001ec 	.word	0x200001ec
 800085c:	40026410 	.word	0x40026410

08000860 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000866:	4828      	ldr	r0, [pc, #160]	; (8000908 <Inputs_Init+0xa8>)
 8000868:	f006 fa40 	bl	8006cec <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 800086c:	2228      	movs	r2, #40	; 0x28
 800086e:	4927      	ldr	r1, [pc, #156]	; (800090c <Inputs_Init+0xac>)
 8000870:	4827      	ldr	r0, [pc, #156]	; (8000910 <Inputs_Init+0xb0>)
 8000872:	f003 f819 	bl	80038a8 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000876:	2032      	movs	r0, #50	; 0x32
 8000878:	f002 fe9e 	bl	80035b8 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <Inputs_Init+0xb4>)
 800087e:	4926      	ldr	r1, [pc, #152]	; (8000918 <Inputs_Init+0xb8>)
 8000880:	4826      	ldr	r0, [pc, #152]	; (800091c <Inputs_Init+0xbc>)
 8000882:	f000 fecb 	bl	800161c <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <Inputs_Init+0xc0>)
 8000888:	4926      	ldr	r1, [pc, #152]	; (8000924 <Inputs_Init+0xc4>)
 800088a:	4827      	ldr	r0, [pc, #156]	; (8000928 <Inputs_Init+0xc8>)
 800088c:	f000 fec6 	bl	800161c <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000890:	4822      	ldr	r0, [pc, #136]	; (800091c <Inputs_Init+0xbc>)
 8000892:	f000 fede 	bl	8001652 <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000896:	4824      	ldr	r0, [pc, #144]	; (8000928 <Inputs_Init+0xc8>)
 8000898:	f000 fedb 	bl	8001652 <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800089c:	213c      	movs	r1, #60	; 0x3c
 800089e:	481a      	ldr	r0, [pc, #104]	; (8000908 <Inputs_Init+0xa8>)
 80008a0:	f006 fb24 	bl	8006eec <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
 80008a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2332      	movs	r3, #50	; 0x32
 80008ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b0:	491e      	ldr	r1, [pc, #120]	; (800092c <Inputs_Init+0xcc>)
 80008b2:	481f      	ldr	r0, [pc, #124]	; (8000930 <Inputs_Init+0xd0>)
 80008b4:	f000 fbee 	bl	8001094 <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
 80008b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2332      	movs	r3, #50	; 0x32
 80008c0:	2204      	movs	r2, #4
 80008c2:	491c      	ldr	r1, [pc, #112]	; (8000934 <Inputs_Init+0xd4>)
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <Inputs_Init+0xd8>)
 80008c6:	f000 fbe5 	bl	8001094 <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
 80008ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2332      	movs	r3, #50	; 0x32
 80008d2:	2201      	movs	r2, #1
 80008d4:	4915      	ldr	r1, [pc, #84]	; (800092c <Inputs_Init+0xcc>)
 80008d6:	4819      	ldr	r0, [pc, #100]	; (800093c <Inputs_Init+0xdc>)
 80008d8:	f000 fbdc 	bl	8001094 <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
 80008dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2332      	movs	r3, #50	; 0x32
 80008e4:	2201      	movs	r2, #1
 80008e6:	4916      	ldr	r1, [pc, #88]	; (8000940 <Inputs_Init+0xe0>)
 80008e8:	4816      	ldr	r0, [pc, #88]	; (8000944 <Inputs_Init+0xe4>)
 80008ea:	f000 fbd3 	bl	8001094 <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
 80008ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2332      	movs	r3, #50	; 0x32
 80008f6:	2220      	movs	r2, #32
 80008f8:	4911      	ldr	r1, [pc, #68]	; (8000940 <Inputs_Init+0xe0>)
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <Inputs_Init+0xe8>)
 80008fc:	f000 fbca 	bl	8001094 <DB_ButtonInit>
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000914 	.word	0x20000914
 800090c:	2000024c 	.word	0x2000024c
 8000910:	200001a4 	.word	0x200001a4
 8000914:	2000029e 	.word	0x2000029e
 8000918:	2000029c 	.word	0x2000029c
 800091c:	200002a4 	.word	0x200002a4
 8000920:	200002a2 	.word	0x200002a2
 8000924:	200002a0 	.word	0x200002a0
 8000928:	200002bc 	.word	0x200002bc
 800092c:	40020800 	.word	0x40020800
 8000930:	200002d8 	.word	0x200002d8
 8000934:	40020c00 	.word	0x40020c00
 8000938:	200002f8 	.word	0x200002f8
 800093c:	20000318 	.word	0x20000318
 8000940:	40020000 	.word	0x40020000
 8000944:	20000338 	.word	0x20000338
 8000948:	20000358 	.word	0x20000358

0800094c <Inputs_GetLeftJoystickDev>:

//
// J O Y S T I C K
//
int8_t Inputs_GetLeftJoystickDev(uint8_t axis)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	if(JoysitckCalibrationFlag > 0)
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <Inputs_GetLeftJoystickDev+0x34>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d006      	beq.n	800096c <Inputs_GetLeftJoystickDev+0x20>
	{
		return Joy_GetDeviationPercentCal(&LeftJoystick, axis);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4619      	mov	r1, r3
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <Inputs_GetLeftJoystickDev+0x38>)
 8000964:	f000 fee0 	bl	8001728 <Joy_GetDeviationPercentCal>
 8000968:	4603      	mov	r3, r0
 800096a:	e005      	b.n	8000978 <Inputs_GetLeftJoystickDev+0x2c>
	}
	else
	{
		return Joy_GetDeviationPercent(&LeftJoystick, axis);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4619      	mov	r1, r3
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <Inputs_GetLeftJoystickDev+0x38>)
 8000972:	f000 fe98 	bl	80016a6 <Joy_GetDeviationPercent>
 8000976:	4603      	mov	r3, r0
	}
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200002d4 	.word	0x200002d4
 8000984:	200002a4 	.word	0x200002a4

08000988 <Inputs_GetRightJoystickDev>:

int8_t Inputs_GetRightJoystickDev(uint8_t axis)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	if(JoysitckCalibrationFlag > 0)
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <Inputs_GetRightJoystickDev+0x34>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <Inputs_GetRightJoystickDev+0x20>
	{
		return Joy_GetDeviationPercentCal(&RightJoystick, axis);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <Inputs_GetRightJoystickDev+0x38>)
 80009a0:	f000 fec2 	bl	8001728 <Joy_GetDeviationPercentCal>
 80009a4:	4603      	mov	r3, r0
 80009a6:	e005      	b.n	80009b4 <Inputs_GetRightJoystickDev+0x2c>
	}
	else
	{
		return Joy_GetDeviationPercent(&RightJoystick, axis);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <Inputs_GetRightJoystickDev+0x38>)
 80009ae:	f000 fe7a 	bl	80016a6 <Joy_GetDeviationPercent>
 80009b2:	4603      	mov	r3, r0
	}
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200002d4 	.word	0x200002d4
 80009c0:	200002bc 	.word	0x200002bc

080009c4 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 80009dc:	2300      	movs	r3, #0
 80009de:	77fb      	strb	r3, [r7, #31]
 80009e0:	e021      	b.n	8000a26 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	7ffa      	ldrb	r2, [r7, #31]
 80009e6:	4924      	ldr	r1, [pc, #144]	; (8000a78 <HAL_ADC_ConvCpltCallback+0xb4>)
 80009e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009ec:	4413      	add	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	7ffa      	ldrb	r2, [r7, #31]
 80009f4:	3201      	adds	r2, #1
 80009f6:	4920      	ldr	r1, [pc, #128]	; (8000a78 <HAL_ADC_ConvCpltCallback+0xb4>)
 80009f8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009fc:	4413      	add	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	7ffa      	ldrb	r2, [r7, #31]
 8000a04:	3202      	adds	r2, #2
 8000a06:	491c      	ldr	r1, [pc, #112]	; (8000a78 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000a08:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	7ffa      	ldrb	r2, [r7, #31]
 8000a14:	3203      	adds	r2, #3
 8000a16:	4918      	ldr	r1, [pc, #96]	; (8000a78 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000a18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	3304      	adds	r3, #4
 8000a24:	77fb      	strb	r3, [r7, #31]
 8000a26:	7ffb      	ldrb	r3, [r7, #31]
 8000a28:	2b24      	cmp	r3, #36	; 0x24
 8000a2a:	d9da      	bls.n	80009e2 <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000a30:	fba2 2303 	umull	r2, r3, r2, r3
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000a3a:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000a4a:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000a5a:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000a60:	fba2 2303 	umull	r2, r3, r2, r3
 8000a64:	08db      	lsrs	r3, r3, #3
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000a6a:	80da      	strh	r2, [r3, #6]
}
 8000a6c:	bf00      	nop
 8000a6e:	3724      	adds	r7, #36	; 0x24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	2000024c 	.word	0x2000024c
 8000a7c:	cccccccd 	.word	0xcccccccd
 8000a80:	2000029c 	.word	0x2000029c

08000a84 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <Inputs_GetEncoderCount+0x4c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <Inputs_GetEncoderCount+0x50>)
 8000a92:	8812      	ldrh	r2, [r2, #0]
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dc03      	bgt.n	8000aa6 <Inputs_GetEncoderCount+0x22>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f113 0f03 	cmn.w	r3, #3
 8000aa4:	da0d      	bge.n	8000ac2 <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <Inputs_GetEncoderCount+0x4c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <Inputs_GetEncoderCount+0x50>)
 8000ab0:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da00      	bge.n	8000aba <Inputs_GetEncoderCount+0x36>
 8000ab8:	3303      	adds	r3, #3
 8000aba:	109b      	asrs	r3, r3, #2
 8000abc:	425b      	negs	r3, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	e000      	b.n	8000ac4 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 8000ac2:	2300      	movs	r3, #0
	}
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	20000914 	.word	0x20000914
 8000ad4:	20000378 	.word	0x20000378

08000ad8 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <Inputs_ButtonsRoutine+0x28>)
 8000ade:	f000 fb25 	bl	800112c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <Inputs_ButtonsRoutine+0x2c>)
 8000ae4:	f000 fb22 	bl	800112c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <Inputs_ButtonsRoutine+0x30>)
 8000aea:	f000 fb1f 	bl	800112c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <Inputs_ButtonsRoutine+0x34>)
 8000af0:	f000 fb1c 	bl	800112c <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <Inputs_ButtonsRoutine+0x38>)
 8000af6:	f000 fb19 	bl	800112c <DB_ButtonProcess>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200002d8 	.word	0x200002d8
 8000b04:	200002f8 	.word	0x200002f8
 8000b08:	20000338 	.word	0x20000338
 8000b0c:	20000318 	.word	0x20000318
 8000b10:	20000358 	.word	0x20000358

08000b14 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d82b      	bhi.n	8000b80 <Inputs_ButtonsRegisterCallback+0x6c>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <Inputs_ButtonsRegisterCallback+0x1c>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b45 	.word	0x08000b45
 8000b34:	08000b51 	.word	0x08000b51
 8000b38:	08000b5d 	.word	0x08000b5d
 8000b3c:	08000b69 	.word	0x08000b69
 8000b40:	08000b75 	.word	0x08000b75
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	4810      	ldr	r0, [pc, #64]	; (8000b8c <Inputs_ButtonsRegisterCallback+0x78>)
 8000b4a:	f000 fac6 	bl	80010da <DB_ButtonPressCallbackRegister>
		break;
 8000b4e:	e018      	b.n	8000b82 <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <Inputs_ButtonsRegisterCallback+0x7c>)
 8000b56:	f000 fac0 	bl	80010da <DB_ButtonPressCallbackRegister>
		break;
 8000b5a:	e012      	b.n	8000b82 <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	68b9      	ldr	r1, [r7, #8]
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <Inputs_ButtonsRegisterCallback+0x80>)
 8000b62:	f000 faba 	bl	80010da <DB_ButtonPressCallbackRegister>
		break;
 8000b66:	e00c      	b.n	8000b82 <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	480a      	ldr	r0, [pc, #40]	; (8000b98 <Inputs_ButtonsRegisterCallback+0x84>)
 8000b6e:	f000 fab4 	bl	80010da <DB_ButtonPressCallbackRegister>
		break;
 8000b72:	e006      	b.n	8000b82 <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <Inputs_ButtonsRegisterCallback+0x88>)
 8000b7a:	f000 faae 	bl	80010da <DB_ButtonPressCallbackRegister>
		break;
 8000b7e:	e000      	b.n	8000b82 <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 8000b80:	bf00      	nop
	}
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200002d8 	.word	0x200002d8
 8000b90:	200002f8 	.word	0x200002f8
 8000b94:	20000318 	.word	0x20000318
 8000b98:	20000338 	.word	0x20000338
 8000b9c:	20000358 	.word	0x20000358

08000ba0 <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <Inputs_ClearButtonsCallbacks+0x3c>)
 8000baa:	f000 fa96 	bl	80010da <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <Inputs_ClearButtonsCallbacks+0x40>)
 8000bb4:	f000 fa91 	bl	80010da <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <Inputs_ClearButtonsCallbacks+0x44>)
 8000bbe:	f000 fa8c 	bl	80010da <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <Inputs_ClearButtonsCallbacks+0x48>)
 8000bc8:	f000 fa87 	bl	80010da <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <Inputs_ClearButtonsCallbacks+0x4c>)
 8000bd2:	f000 fa82 	bl	80010da <DB_ButtonPressCallbackRegister>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002d8 	.word	0x200002d8
 8000be0:	200002f8 	.word	0x200002f8
 8000be4:	20000318 	.word	0x20000318
 8000be8:	20000338 	.word	0x20000338
 8000bec:	20000358 	.word	0x20000358

08000bf0 <Parser_Controller>:
 */
#include "controller_parser.h"


void Parser_Controller(uint8_t *command, uint8_t length)							//main parser funciton
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]
	uint8_t Length = length;
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	72fb      	strb	r3, [r7, #11]



	switch(*CurrentByte)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2bd0      	cmp	r3, #208	; 0xd0
 8000c0a:	d10b      	bne.n	8000c24 <Parser_Controller+0x34>
	{
	case DIODE_TEST:
		CurrentByte++;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
		Length--;
 8000c12:	7afb      	ldrb	r3, [r7, #11]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	72fb      	strb	r3, [r7, #11]
		Programs_DiodeTestParser(CurrentByte, Length);
 8000c18:	7afb      	ldrb	r3, [r7, #11]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f8e5 	bl	8000dec <Programs_DiodeTestParser>

		break;
 8000c22:	e000      	b.n	8000c26 <Parser_Controller+0x36>

	default:

		break;
 8000c24:	bf00      	nop
	}


}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <Programs_ClearProgram>:
{
	ProgramToPerform = Program;
}

void Programs_ClearProgram(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	ProgramToPerform = NULL;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <Programs_ClearProgram+0x14>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2000037c 	.word	0x2000037c

08000c48 <Programs_PerformProgram>:

Programs_status_t Programs_PerformProgram(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	Programs_status_t status;
	if(NULL != ProgramToPerform)		//if there is a program to perform
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <Programs_PerformProgram+0x28>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <Programs_PerformProgram+0x1a>
	{
		status = ProgramToPerform();	//perform it and return it's status
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <Programs_PerformProgram+0x28>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	e001      	b.n	8000c66 <Programs_PerformProgram+0x1e>
	}
	else
	{
		status = NO_PROGRAM_SET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000037c 	.word	0x2000037c

08000c74 <Programs_SendProgramStartCommand>:

static Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	733b      	strb	r3, [r7, #12]
	Buffer[1] = START_PROGRAM;
 8000c82:	2310      	movs	r3, #16
 8000c84:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fe1f 	bl	80018d0 <Radio_TxBufferPut>
 8000c92:	4603      	mov	r3, r0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Programs_SendProgramExitCommand>:

static Programs_error_t Programs_SendProgramExitCommand(uint8_t ProgramID)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	733b      	strb	r3, [r7, #12]
	Buffer[1] = EXIT_PROGRAM;
 8000caa:	2311      	movs	r3, #17
 8000cac:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fe0b 	bl	80018d0 <Radio_TxBufferPut>
 8000cba:	4603      	mov	r3, r0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <Programs_DiodeTestSendOnCmd>:
//



void Programs_DiodeTestSendOnCmd(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000cca:	23d0      	movs	r3, #208	; 0xd0
 8000ccc:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_ON;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fdfa 	bl	80018d0 <Radio_TxBufferPut>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Programs_DiodeTestSendOffCmd>:

void Programs_DiodeTestSendOffCmd(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000cea:	23d0      	movs	r3, #208	; 0xd0
 8000cec:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_OFF;
 8000cee:	2321      	movs	r3, #33	; 0x21
 8000cf0:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fdea 	bl	80018d0 <Radio_TxBufferPut>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <Programs_DiodeTestExitProgram>:

void Programs_DiodeTestExitProgram(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	DiodeTestDatabase.ProgramExitFlag = 1;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <Programs_DiodeTestExitProgram+0x14>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	705a      	strb	r2, [r3, #1]
	Programs_SendProgramExitCommand(DIODE_TEST);
 8000d0e:	20d0      	movs	r0, #208	; 0xd0
 8000d10:	f7ff ffc4 	bl	8000c9c <Programs_SendProgramExitCommand>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000384 	.word	0x20000384

08000d1c <Programs_DiodeTestProgram>:

Programs_status_t Programs_DiodeTestProgram(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	static uint32_t LaunchTimeoutStamp = 0;
	if(0 == FirstEntry)
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <Programs_DiodeTestProgram+0xb0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11b      	bne.n	8000d60 <Programs_DiodeTestProgram+0x44>
	{
		Inputs_ClearButtonsCallbacks();
 8000d28:	f7ff ff3a 	bl	8000ba0 <Inputs_ClearButtonsCallbacks>
		Inputs_ButtonsRegisterCallback(UP_BUTTON, &Programs_DiodeTestSendOnCmd, &Programs_DiodeTestExitProgram);
 8000d2c:	4a28      	ldr	r2, [pc, #160]	; (8000dd0 <Programs_DiodeTestProgram+0xb4>)
 8000d2e:	4929      	ldr	r1, [pc, #164]	; (8000dd4 <Programs_DiodeTestProgram+0xb8>)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff feef 	bl	8000b14 <Inputs_ButtonsRegisterCallback>
		Inputs_ButtonsRegisterCallback(DOWN_BUTTON, &Programs_DiodeTestSendOffCmd, NULL);
 8000d36:	2200      	movs	r2, #0
 8000d38:	4927      	ldr	r1, [pc, #156]	; (8000dd8 <Programs_DiodeTestProgram+0xbc>)
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff feea 	bl	8000b14 <Inputs_ButtonsRegisterCallback>
		Programs_SendProgramStartCommand(DIODE_TEST);
 8000d40:	20d0      	movs	r0, #208	; 0xd0
 8000d42:	f7ff ff97 	bl	8000c74 <Programs_SendProgramStartCommand>
		FirstEntry = 1;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <Programs_DiodeTestProgram+0xb0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		LaunchTimeoutStamp = HAL_GetTick();				//timestamp in first entry for counting program lauch on klebot timeout
 8000d4c:	f002 fc28 	bl	80035a0 <HAL_GetTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <Programs_DiodeTestProgram+0xc0>)
 8000d54:	6013      	str	r3, [r2, #0]
		OLED_ClearBuffer(BLACK);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f002 f862 	bl	8002e20 <OLED_ClearBuffer>
		OLED_SendBuffer();
 8000d5c:	f002 f834 	bl	8002dc8 <OLED_SendBuffer>
	}

	if(DIODE_TEST != CurrentRobotProgramID)				//check if we had response from robot that program has properly started
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <Programs_DiodeTestProgram+0xc4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2bd0      	cmp	r3, #208	; 0xd0
 8000d66:	d00d      	beq.n	8000d84 <Programs_DiodeTestProgram+0x68>
	{
		if(HAL_GetTick() - LaunchTimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 8000d68:	f002 fc1a 	bl	80035a0 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <Programs_DiodeTestProgram+0xc0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d78:	d904      	bls.n	8000d84 <Programs_DiodeTestProgram+0x68>
		{
			FirstEntry = 0;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <Programs_DiodeTestProgram+0xb0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			return PROGRAM_LAUNCH_ERROR;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e021      	b.n	8000dc8 <Programs_DiodeTestProgram+0xac>
		}
	}

	if(1 == DiodeTestDatabase.ProgramExitFlag)
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <Programs_DiodeTestProgram+0xc8>)
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10a      	bne.n	8000da2 <Programs_DiodeTestProgram+0x86>
	{
		DiodeTestDatabase.ProgramExitFlag = 0;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <Programs_DiodeTestProgram+0xc8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	705a      	strb	r2, [r3, #1]
		DiodeTestDatabase.DiodeState = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <Programs_DiodeTestProgram+0xc8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		FirstEntry = 0;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <Programs_DiodeTestProgram+0xb0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
		return PROGRAM_COMPLETED;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e012      	b.n	8000dc8 <Programs_DiodeTestProgram+0xac>
	}

	OLED_MoveCursor(0, 0);
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f001 ff81 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteString("LED STATE:", WHITE);
 8000daa:	2101      	movs	r1, #1
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <Programs_DiodeTestProgram+0xcc>)
 8000dae:	f002 f901 	bl	8002fb4 <OLED_WriteString>
	OLED_MoveCursor(0, 16);
 8000db2:	2110      	movs	r1, #16
 8000db4:	2000      	movs	r0, #0
 8000db6:	f001 ff79 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteInt(DiodeTestDatabase.DiodeState, WHITE);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <Programs_DiodeTestProgram+0xc8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f91d 	bl	8003000 <OLED_WriteInt>

	return PROGRAM_IN_PROGRESS;
 8000dc6:	2302      	movs	r3, #2
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000386 	.word	0x20000386
 8000dd0:	08000d05 	.word	0x08000d05
 8000dd4:	08000cc5 	.word	0x08000cc5
 8000dd8:	08000ce5 	.word	0x08000ce5
 8000ddc:	20000388 	.word	0x20000388
 8000de0:	20000380 	.word	0x20000380
 8000de4:	20000384 	.word	0x20000384
 8000de8:	0800850c 	.word	0x0800850c

08000dec <Programs_DiodeTestParser>:


void Programs_DiodeTestParser(uint8_t *command, uint8_t length)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b10      	cmp	r3, #16
 8000e02:	d002      	beq.n	8000e0a <Programs_DiodeTestParser+0x1e>
 8000e04:	2b22      	cmp	r3, #34	; 0x22
 8000e06:	d00b      	beq.n	8000e20 <Programs_DiodeTestParser+0x34>
		DiodeTestDatabase.DiodeState = *CurrentByte;
		break;

	default:

		break;
 8000e08:	e013      	b.n	8000e32 <Programs_DiodeTestParser+0x46>
		CurrentByte++;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2bf0      	cmp	r3, #240	; 0xf0
 8000e16:	d10b      	bne.n	8000e30 <Programs_DiodeTestParser+0x44>
			CurrentRobotProgramID = DIODE_TEST;				//ack that program has started
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <Programs_DiodeTestParser+0x54>)
 8000e1a:	22d0      	movs	r2, #208	; 0xd0
 8000e1c:	701a      	strb	r2, [r3, #0]
		break;
 8000e1e:	e007      	b.n	8000e30 <Programs_DiodeTestParser+0x44>
		CurrentByte++;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
		DiodeTestDatabase.DiodeState = *CurrentByte;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <Programs_DiodeTestParser+0x58>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		break;
 8000e2e:	e000      	b.n	8000e32 <Programs_DiodeTestParser+0x46>
		break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000380 	.word	0x20000380
 8000e44:	20000384 	.word	0x20000384

08000e48 <Programs_DiodeTestSet>:

void Programs_DiodeTestSet(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	ProgramToPerform = &Programs_DiodeTestProgram;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <Programs_DiodeTestSet+0x14>)
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <Programs_DiodeTestSet+0x18>)
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	2000037c 	.word	0x2000037c
 8000e60:	08000d1d 	.word	0x08000d1d

08000e64 <TestBlinkProgram>:




Programs_status_t TestBlinkProgram(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	static uint32_t LastTick;
	static uint8_t state = 0;
	static uint8_t blinks = 0;


	if(0 == FirstEntry)
 8000e68:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <TestBlinkProgram+0xc4>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d114      	bne.n	8000e9a <TestBlinkProgram+0x36>
	{
		OLED_ClearBuffer(BLACK);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f001 ffd5 	bl	8002e20 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 8000e76:	2100      	movs	r1, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f001 ff17 	bl	8002cac <OLED_MoveCursor>
		OLED_WriteString("Blinks:",WHITE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	482a      	ldr	r0, [pc, #168]	; (8000f2c <TestBlinkProgram+0xc8>)
 8000e82:	f002 f897 	bl	8002fb4 <OLED_WriteString>
		LastTick = HAL_GetTick();
 8000e86:	f002 fb8b 	bl	80035a0 <HAL_GetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <TestBlinkProgram+0xcc>)
 8000e8e:	6013      	str	r3, [r2, #0]
		OLED_SendBuffer();
 8000e90:	f001 ff9a 	bl	8002dc8 <OLED_SendBuffer>
		FirstEntry = 1;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <TestBlinkProgram+0xc4>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]





	if(HAL_GetTick() - LastTick > 1000)
 8000e9a:	f002 fb81 	bl	80035a0 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <TestBlinkProgram+0xcc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eaa:	d934      	bls.n	8000f16 <TestBlinkProgram+0xb2>
	{
		switch(state)
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <TestBlinkProgram+0xd0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <TestBlinkProgram+0x56>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d00e      	beq.n	8000ed6 <TestBlinkProgram+0x72>
 8000eb8:	e02d      	b.n	8000f16 <TestBlinkProgram+0xb2>
		{
		case 0:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	481e      	ldr	r0, [pc, #120]	; (8000f38 <TestBlinkProgram+0xd4>)
 8000ec0:	f003 fefa 	bl	8004cb8 <HAL_GPIO_WritePin>
			LastTick = HAL_GetTick();
 8000ec4:	f002 fb6c 	bl	80035a0 <HAL_GetTick>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <TestBlinkProgram+0xcc>)
 8000ecc:	6013      	str	r3, [r2, #0]
			state = 1;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <TestBlinkProgram+0xd0>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
			break;
 8000ed4:	e01f      	b.n	8000f16 <TestBlinkProgram+0xb2>

		case 1:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4817      	ldr	r0, [pc, #92]	; (8000f38 <TestBlinkProgram+0xd4>)
 8000edc:	f003 feec 	bl	8004cb8 <HAL_GPIO_WritePin>
			LastTick = HAL_GetTick();
 8000ee0:	f002 fb5e 	bl	80035a0 <HAL_GetTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <TestBlinkProgram+0xcc>)
 8000ee8:	6013      	str	r3, [r2, #0]
			blinks++;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <TestBlinkProgram+0xd8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <TestBlinkProgram+0xd8>)
 8000ef4:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <TestBlinkProgram+0xd0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]

			OLED_MoveCursor(64, 0);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2040      	movs	r0, #64	; 0x40
 8000f00:	f001 fed4 	bl	8002cac <OLED_MoveCursor>
			OLED_WriteInt(blinks, WHITE);
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <TestBlinkProgram+0xd8>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 f878 	bl	8003000 <OLED_WriteInt>
			OLED_SendBuffer();
 8000f10:	f001 ff5a 	bl	8002dc8 <OLED_SendBuffer>
			break;
 8000f14:	bf00      	nop
	}




	if(blinks >= 10)
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <TestBlinkProgram+0xd8>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b09      	cmp	r3, #9
 8000f1c:	d901      	bls.n	8000f22 <TestBlinkProgram+0xbe>
	{
		return PROGRAM_COMPLETED;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <TestBlinkProgram+0xc0>
	}
	else
	{
		return PROGRAM_IN_PROGRESS;
 8000f22:	2302      	movs	r3, #2
	}

}
 8000f24:	4618      	mov	r0, r3
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000038c 	.word	0x2000038c
 8000f2c:	08008518 	.word	0x08008518
 8000f30:	20000390 	.word	0x20000390
 8000f34:	20000394 	.word	0x20000394
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	20000395 	.word	0x20000395

08000f40 <SetTestBlink>:

void SetTestBlink(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	ProgramToPerform = &TestBlinkProgram;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <SetTestBlink+0x14>)
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <SetTestBlink+0x18>)
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	2000037c 	.word	0x2000037c
 8000f58:	08000e65 	.word	0x08000e65

08000f5c <SetFreeRideControll>:


void SetFreeRideControll(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	ProgramToPerform = &FreeRideControll;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <SetFreeRideControll+0x14>)
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <SetFreeRideControll+0x18>)
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	2000037c 	.word	0x2000037c
 8000f74:	08000f79 	.word	0x08000f79

08000f78 <FreeRideControll>:

Programs_status_t FreeRideControll(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	uint8_t Cmd[4];

	int8_t DevL;
	int8_t DevR, LastDevR = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71fb      	strb	r3, [r7, #7]

	if(0 == FirstEntry)
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <FreeRideControll+0x10c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d116      	bne.n	8000fb8 <FreeRideControll+0x40>
	{
		Cmd[0] = 0xA1;
 8000f8a:	23a1      	movs	r3, #161	; 0xa1
 8000f8c:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x10;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	707b      	strb	r3, [r7, #1]
		Radio_TxBufferPut(Cmd, 2);
 8000f92:	463b      	mov	r3, r7
 8000f94:	2102      	movs	r1, #2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fc9a 	bl	80018d0 <Radio_TxBufferPut>
		Inputs_ClearButtonsCallbacks();
 8000f9c:	f7ff fe00 	bl	8000ba0 <Inputs_ClearButtonsCallbacks>
		OLED_ClearBuffer(BLACK);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f001 ff3d 	bl	8002e20 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f001 fe7f 	bl	8002cac <OLED_MoveCursor>
		OLED_SendBuffer();
 8000fae:	f001 ff0b 	bl	8002dc8 <OLED_SendBuffer>
		FirstEntry = 1;
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <FreeRideControll+0x10c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	}
	OLED_ClearBuffer(BLACK);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f001 ff31 	bl	8002e20 <OLED_ClearBuffer>

	DevR =  Inputs_GetRightJoystickDev(X_AXIS);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fce2 	bl	8000988 <Inputs_GetRightJoystickDev>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71bb      	strb	r3, [r7, #6]
	if(DevR > 2 && DevR != LastDevR)
 8000fc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	dd28      	ble.n	8001022 <FreeRideControll+0xaa>
 8000fd0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d022      	beq.n	8001022 <FreeRideControll+0xaa>
	{

		Cmd[0] = 0xA1;
 8000fdc:	23a1      	movs	r3, #161	; 0xa1
 8000fde:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x22;
 8000fe0:	2322      	movs	r3, #34	; 0x22
 8000fe2:	707b      	strb	r3, [r7, #1]
		Cmd[2] = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	70bb      	strb	r3, [r7, #2]
		Radio_TxBufferPut(Cmd, 3);
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2103      	movs	r1, #3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fc6f 	bl	80018d0 <Radio_TxBufferPut>
		Cmd[0] = 0xA1;
 8000ff2:	23a1      	movs	r3, #161	; 0xa1
 8000ff4:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x20;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	707b      	strb	r3, [r7, #1]
		Cmd[2] = (DevR * 255) / 100;
 8000ffa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <FreeRideControll+0x110>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1152      	asrs	r2, r2, #5
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	70bb      	strb	r3, [r7, #2]
		Radio_TxBufferPut(Cmd, 3);
 8001014:	463b      	mov	r3, r7
 8001016:	2103      	movs	r1, #3
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fc59 	bl	80018d0 <Radio_TxBufferPut>
		LastDevR = DevR;
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	71fb      	strb	r3, [r7, #7]
	else
	{

	}

	OLED_MoveCursor(0, 0);
 8001022:	2100      	movs	r1, #0
 8001024:	2000      	movs	r0, #0
 8001026:	f001 fe41 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteString("Right Motor: ", WHITE);
 800102a:	2101      	movs	r1, #1
 800102c:	4817      	ldr	r0, [pc, #92]	; (800108c <FreeRideControll+0x114>)
 800102e:	f001 ffc1 	bl	8002fb4 <OLED_WriteString>
	OLED_MoveCursor(90, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	205a      	movs	r0, #90	; 0x5a
 8001036:	f001 fe39 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteInt(DevR, WHITE);
 800103a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f001 ffdd 	bl	8003000 <OLED_WriteInt>

//	OLED_MoveCursor(0, 8);
//	OLED_WriteInt(Inputs_GetRightJoystickDev(Y_AXIS), WHITE);

	DevL = Inputs_GetLeftJoystickDev(X_AXIS);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fc80 	bl	800094c <Inputs_GetLeftJoystickDev>
 800104c:	4603      	mov	r3, r0
 800104e:	717b      	strb	r3, [r7, #5]

	OLED_MoveCursor(0, 16);
 8001050:	2110      	movs	r1, #16
 8001052:	2000      	movs	r0, #0
 8001054:	f001 fe2a 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteString("LEFT Motor: ", WHITE);
 8001058:	2101      	movs	r1, #1
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <FreeRideControll+0x118>)
 800105c:	f001 ffaa 	bl	8002fb4 <OLED_WriteString>
	OLED_MoveCursor(90, 16);
 8001060:	2110      	movs	r1, #16
 8001062:	205a      	movs	r0, #90	; 0x5a
 8001064:	f001 fe22 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteInt(DevL, WHITE);
 8001068:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ffc6 	bl	8003000 <OLED_WriteInt>

//	OLED_MoveCursor(0, 32);
//	OLED_WriteInt(Inputs_GetLeftJoystickDev(Y_AXIS), WHITE);

	OLED_SendBuffer();
 8001074:	f001 fea8 	bl	8002dc8 <OLED_SendBuffer>

	return PROGRAM_IN_PROGRESS;
 8001078:	2302      	movs	r3, #2


}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000396 	.word	0x20000396
 8001088:	51eb851f 	.word	0x51eb851f
 800108c:	08008520 	.word	0x08008520
 8001090:	08008530 	.word	0x08008530

08001094 <DB_ButtonInit>:


#include "debounce.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	615a      	str	r2, [r3, #20]
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4610      	mov	r0, r2
 8001112:	f003 fdb9 	bl	8004c88 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <DB_IsButtonPressed+0x22>
	{
		return 1;
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 8001120:	2300      	movs	r3, #0
	}
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
 8001138:	2b03      	cmp	r3, #3
 800113a:	f200 8082 	bhi.w	8001242 <DB_ButtonProcess+0x116>
 800113e:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <DB_ButtonProcess+0x18>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001155 	.word	0x08001155
 8001148:	08001173 	.word	0x08001173
 800114c:	080011b3 	.word	0x080011b3
 8001150:	080011fd 	.word	0x080011fd
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffd2 	bl	80010fe <DB_IsButtonPressed>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d06b      	beq.n	8001238 <DB_ButtonProcess+0x10c>
		{
			Button->ButtonState = DEBOUNCE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 8001166:	f002 fa1b 	bl	80035a0 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	61da      	str	r2, [r3, #28]
		}
		break;
 8001170:	e062      	b.n	8001238 <DB_ButtonProcess+0x10c>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8001172:	f002 fa15 	bl	80035a0 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	429a      	cmp	r2, r3
 8001184:	d95a      	bls.n	800123c <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button))
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb9 	bl	80010fe <DB_IsButtonPressed>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001198:	f002 fa02 	bl	80035a0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonState = IDLE;
				printf("Debounce: Button bounced \n");
			}
		}
		break;
 80011a2:	e04b      	b.n	800123c <DB_ButtonProcess+0x110>
				Button->ButtonState = IDLE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button bounced \n");
 80011aa:	4828      	ldr	r0, [pc, #160]	; (800124c <DB_ButtonProcess+0x120>)
 80011ac:	f006 faa4 	bl	80076f8 <puts>
		break;
 80011b0:	e044      	b.n	800123c <DB_ButtonProcess+0x110>
	case PRESSED:

		if(0 == DB_IsButtonPressed(Button))
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa3 	bl	80010fe <DB_IsButtonPressed>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10d      	bne.n	80011da <DB_ButtonProcess+0xae>
		{
			if(NULL != Button->ButtonPressAction)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <DB_ButtonProcess+0xa0>
			{
				Button->ButtonPressAction();
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button pressed! \n");
 80011d2:	481f      	ldr	r0, [pc, #124]	; (8001250 <DB_ButtonProcess+0x124>)
 80011d4:	f006 fa90 	bl	80076f8 <puts>
			{
				Button->ButtonState = HOLD;
				Button->LastTick = HAL_GetTick();
			}
		}
		break;
 80011d8:	e032      	b.n	8001240 <DB_ButtonProcess+0x114>
			if(HAL_GetTick() - (Button->LastTick) > 150 )
 80011da:	f002 f9e1 	bl	80035a0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b96      	cmp	r3, #150	; 0x96
 80011e8:	d92a      	bls.n	8001240 <DB_ButtonProcess+0x114>
				Button->ButtonState = HOLD;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2203      	movs	r2, #3
 80011ee:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 80011f0:	f002 f9d6 	bl	80035a0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	61da      	str	r2, [r3, #28]
		break;
 80011fa:	e021      	b.n	8001240 <DB_ButtonProcess+0x114>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 80011fc:	f002 f9d0 	bl	80035a0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	429a      	cmp	r2, r3
 800120e:	d918      	bls.n	8001242 <DB_ButtonProcess+0x116>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonHoldAction)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff74 	bl	80010fe <DB_IsButtonPressed>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <DB_ButtonProcess+0x104>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <DB_ButtonProcess+0x104>
			{
				Button->ButtonHoldAction();
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4798      	blx	r3
				printf("Debounce: Button held! \r\n");
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <DB_ButtonProcess+0x128>)
 800122c:	f006 fa64 	bl	80076f8 <puts>
			}
			Button->ButtonState = IDLE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	761a      	strb	r2, [r3, #24]
		}
	}
}
 8001236:	e004      	b.n	8001242 <DB_ButtonProcess+0x116>
		break;
 8001238:	bf00      	nop
 800123a:	e002      	b.n	8001242 <DB_ButtonProcess+0x116>
		break;
 800123c:	bf00      	nop
 800123e:	e000      	b.n	8001242 <DB_ButtonProcess+0x116>
		break;
 8001240:	bf00      	nop
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08008540 	.word	0x08008540
 8001250:	0800855c 	.word	0x0800855c
 8001254:	08008578 	.word	0x08008578

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_DMA_Init+0x3c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <MX_DMA_Init+0x3c>)
 8001268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_DMA_Init+0x3c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2038      	movs	r0, #56	; 0x38
 8001280:	f002 ffb5 	bl	80041ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001284:	2038      	movs	r0, #56	; 0x38
 8001286:	f002 ffce 	bl	8004226 <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b57      	ldr	r3, [pc, #348]	; (8001410 <MX_GPIO_Init+0x178>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a56      	ldr	r2, [pc, #344]	; (8001410 <MX_GPIO_Init+0x178>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b54      	ldr	r3, [pc, #336]	; (8001410 <MX_GPIO_Init+0x178>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <MX_GPIO_Init+0x178>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <MX_GPIO_Init+0x178>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <MX_GPIO_Init+0x178>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <MX_GPIO_Init+0x178>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a48      	ldr	r2, [pc, #288]	; (8001410 <MX_GPIO_Init+0x178>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <MX_GPIO_Init+0x178>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <MX_GPIO_Init+0x178>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a41      	ldr	r2, [pc, #260]	; (8001410 <MX_GPIO_Init+0x178>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_GPIO_Init+0x178>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <MX_GPIO_Init+0x178>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <MX_GPIO_Init+0x178>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <MX_GPIO_Init+0x178>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2124      	movs	r1, #36	; 0x24
 800133e:	4835      	ldr	r0, [pc, #212]	; (8001414 <MX_GPIO_Init+0x17c>)
 8001340:	f003 fcba 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	21c0      	movs	r1, #192	; 0xc0
 8001348:	4833      	ldr	r0, [pc, #204]	; (8001418 <MX_GPIO_Init+0x180>)
 800134a:	f003 fcb5 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 800134e:	f240 4301 	movw	r3, #1025	; 0x401
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	482d      	ldr	r0, [pc, #180]	; (8001418 <MX_GPIO_Init+0x180>)
 8001364:	f003 fb0c 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 8001368:	2321      	movs	r3, #33	; 0x21
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4828      	ldr	r0, [pc, #160]	; (800141c <MX_GPIO_Init+0x184>)
 800137c:	f003 fb00 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001380:	2304      	movs	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	481f      	ldr	r0, [pc, #124]	; (8001414 <MX_GPIO_Init+0x17c>)
 8001398:	f003 faf2 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_GPIO_Init+0x17c>)
 80013b4:	f003 fae4 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 80013b8:	23c0      	movs	r3, #192	; 0xc0
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <MX_GPIO_Init+0x180>)
 80013d0:	f003 fad6 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 80013d4:	2304      	movs	r3, #4
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_GPIO_Init+0x188>)
 80013e8:	f003 faca 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 80013ec:	2320      	movs	r3, #32
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_GPIO_Init+0x17c>)
 8001404:	f003 fabc 	bl	8004980 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020c00 	.word	0x40020c00

08001424 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C1_Init+0x50>)
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <MX_I2C1_Init+0x54>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C1_Init+0x50>)
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_I2C1_Init+0x58>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_I2C1_Init+0x50>)
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_I2C1_Init+0x50>)
 8001462:	f003 fc5b 	bl	8004d1c <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800146c:	f000 fc3e 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000398 	.word	0x20000398
 8001478:	40005400 	.word	0x40005400
 800147c:	00061a80 	.word	0x00061a80

08001480 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C3_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C3_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C3_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C3_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014be:	f003 fc2d 	bl	8004d1c <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 fc10 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200003ec 	.word	0x200003ec
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	00061a80 	.word	0x00061a80

080014dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a42      	ldr	r2, [pc, #264]	; (8001604 <HAL_I2C_MspInit+0x128>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12d      	bne.n	800155a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a40      	ldr	r2, [pc, #256]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152c:	2304      	movs	r3, #4
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4835      	ldr	r0, [pc, #212]	; (800160c <HAL_I2C_MspInit+0x130>)
 8001538:	f003 fa22 	bl	8004980 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a30      	ldr	r2, [pc, #192]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001558:	e050      	b.n	80015fc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <HAL_I2C_MspInit+0x134>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d14b      	bne.n	80015fc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a2:	2312      	movs	r3, #18
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015ae:	2304      	movs	r3, #4
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <HAL_I2C_MspInit+0x138>)
 80015ba:	f003 f9e1 	bl	8004980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015d0:	2304      	movs	r3, #4
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <HAL_I2C_MspInit+0x13c>)
 80015dc:	f003 f9d0 	bl	8004980 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 80015ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_I2C_MspInit+0x12c>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
}
 80015fc:	bf00      	nop
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400
 8001610:	40005c00 	.word	0x40005c00
 8001614:	40020800 	.word	0x40020800
 8001618:	40020000 	.word	0x40020000

0800161c <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <JoyS_Init+0x18>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 800165a:	f001 ffa1 	bl	80035a0 <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 8001660:	e015      	b.n	800168e <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d104      	bne.n	8001676 <JoyS_SetIdleValues+0x24>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	881a      	ldrh	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	881a      	ldrh	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e007      	b.n	800169e <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 800168e:	f001 ff87 	bl	80035a0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b63      	cmp	r3, #99	; 0x63
 800169a:	d9e2      	bls.n	8001662 <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 800169c:	2303      	movs	r3, #3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <Joy_GetDeviationPercent>:
	}
	return JOYS_OK;
}

int8_t Joy_GetDeviationPercent(Joystick_t *Joystick, uint8_t axis)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
	uint32_t CurrentValue;
	uint32_t IdleValue;

	if(axis == X_AXIS)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <Joy_GetDeviationPercent+0x22>
	{
		CurrentValue = *(Joystick->ValX);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]
		IdleValue = Joystick->IdleX;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	891b      	ldrh	r3, [r3, #8]
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	e00c      	b.n	80016e2 <Joy_GetDeviationPercent+0x3c>
	}
	else if(axis == Y_AXIS)
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <Joy_GetDeviationPercent+0x38>
	{
		CurrentValue = *(Joystick->ValY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
		IdleValue = Joystick->IdleY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	895b      	ldrh	r3, [r3, #10]
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	e001      	b.n	80016e2 <Joy_GetDeviationPercent+0x3c>
	}
	else return 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	e01c      	b.n	800171c <Joy_GetDeviationPercent+0x76>


	if(CurrentValue >= IdleValue)
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d30d      	bcc.n	8001706 <Joy_GetDeviationPercent+0x60>
	{
		return ( (CurrentValue - IdleValue) * 100) / (4095 - IdleValue);		//formula for positive deviation percentage
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2264      	movs	r2, #100	; 0x64
 80016f2:	fb03 f202 	mul.w	r2, r3, r2
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80016fc:	330f      	adds	r3, #15
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	b25b      	sxtb	r3, r3
 8001704:	e00a      	b.n	800171c <Joy_GetDeviationPercent+0x76>
	}
	else
	{
		return -100 + ((CurrentValue * 100) / IdleValue);	//formula for negative deviation percentage
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2264      	movs	r2, #100	; 0x64
 800170a:	fb03 f202 	mul.w	r2, r3, r2
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3b64      	subs	r3, #100	; 0x64
 8001718:	b2db      	uxtb	r3, r3
 800171a:	b25b      	sxtb	r3, r3
	}

}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <Joy_GetDeviationPercentCal>:


int8_t Joy_GetDeviationPercentCal(Joystick_t *Joystick, uint8_t axis)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
	uint32_t CurrentValue;
	uint32_t IdleValue;
	uint32_t MaxValue;
	uint32_t MinValue;

	if(axis == X_AXIS)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <Joy_GetDeviationPercentCal+0x2e>
	{
		CurrentValue = *(Joystick->ValX);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	617b      	str	r3, [r7, #20]
		IdleValue = Joystick->IdleX;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	891b      	ldrh	r3, [r3, #8]
 8001746:	613b      	str	r3, [r7, #16]
		MaxValue = Joystick->MaxX;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	89db      	ldrh	r3, [r3, #14]
 800174c:	60fb      	str	r3, [r7, #12]
		MinValue = Joystick->MinX;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8a5b      	ldrh	r3, [r3, #18]
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	e012      	b.n	800177c <Joy_GetDeviationPercentCal+0x54>
	}
	else if(axis == Y_AXIS)
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10d      	bne.n	8001778 <Joy_GetDeviationPercentCal+0x50>
	{
		CurrentValue = *(Joystick->ValY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	617b      	str	r3, [r7, #20]
		IdleValue = Joystick->IdleY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	895b      	ldrh	r3, [r3, #10]
 8001768:	613b      	str	r3, [r7, #16]
		MaxValue = Joystick->MaxY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	899b      	ldrh	r3, [r3, #12]
 800176e:	60fb      	str	r3, [r7, #12]
		MinValue = Joystick->MinY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8a1b      	ldrh	r3, [r3, #16]
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	e001      	b.n	800177c <Joy_GetDeviationPercentCal+0x54>
	}
	else return 0;
 8001778:	2300      	movs	r3, #0
 800177a:	e02a      	b.n	80017d2 <Joy_GetDeviationPercentCal+0xaa>

	if(MaxValue == 0) return 0;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <Joy_GetDeviationPercentCal+0x5e>
 8001782:	2300      	movs	r3, #0
 8001784:	e025      	b.n	80017d2 <Joy_GetDeviationPercentCal+0xaa>

	if(CurrentValue < MinValue)
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	429a      	cmp	r2, r3
 800178c:	d201      	bcs.n	8001792 <Joy_GetDeviationPercentCal+0x6a>
	{
		CurrentValue = MinValue;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	617b      	str	r3, [r7, #20]
	}
	if(CurrentValue >= IdleValue)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	429a      	cmp	r2, r3
 8001798:	d30c      	bcc.n	80017b4 <Joy_GetDeviationPercentCal+0x8c>
	{
		return ( (CurrentValue - IdleValue) * 100) / (MaxValue - IdleValue);		//formula for positive deviation percentage
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	fb03 f202 	mul.w	r2, r3, r2
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1acb      	subs	r3, r1, r3
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	e00e      	b.n	80017d2 <Joy_GetDeviationPercentCal+0xaa>
	}
	else
	{
		return -100 + ((CurrentValue - MinValue) * 100) / (IdleValue - MinValue);	//formula for negative deviation percentage
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	fb03 f202 	mul.w	r2, r3, r2
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1acb      	subs	r3, r1, r3
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3b64      	subs	r3, #100	; 0x64
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	b25b      	sxtb	r3, r3
	}
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f001 f87d 	bl	80028e8 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 80017ee:	4906      	ldr	r1, [pc, #24]	; (8001808 <Radio_Init+0x28>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fe96 	bl	8002522 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <Radio_Init+0x2c>)
 80017f8:	f000 fecc 	bl	8002594 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 80017fc:	f000 fcd6 	bl	80021ac <nRF24_TX_Mode>
#endif
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	08008594 	.word	0x08008594
 800180c:	08008598 	.word	0x08008598

08001810 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001820:	2300      	movs	r3, #0
 8001822:	73bb      	strb	r3, [r7, #14]
 8001824:	e010      	b.n	8001848 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <Radio_RxBufferPut+0x4c>)
 800182e:	f7fe fead 	bl	800058c <RBuffer_Write>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	4313      	orrs	r3, r2
 800183a:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001842:	7bbb      	ldrb	r3, [r7, #14]
 8001844:	3301      	adds	r3, #1
 8001846:	73bb      	strb	r3, [r7, #14]
 8001848:	7bba      	ldrb	r2, [r7, #14]
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3ea      	bcc.n	8001826 <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000468 	.word	0x20000468

08001860 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8001872:	f107 030d 	add.w	r3, r7, #13
 8001876:	4619      	mov	r1, r3
 8001878:	4814      	ldr	r0, [pc, #80]	; (80018cc <Radio_RxBufferGet+0x6c>)
 800187a:	f7fe feb3 	bl	80005e4 <RBuffer_Read>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	4313      	orrs	r3, r2
 8001886:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001888:	e012      	b.n	80018b0 <Radio_RxBufferGet+0x50>
	{

		*(CommandDestination+Length) = Data;				//write received byte to destination
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	7b7a      	ldrb	r2, [r7, #13]
 8001892:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	3301      	adds	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 800189a:	f107 030d 	add.w	r3, r7, #13
 800189e:	4619      	mov	r1, r3
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <Radio_RxBufferGet+0x6c>)
 80018a2:	f7fe fe9f 	bl	80005e4 <RBuffer_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80018b0:	7b7b      	ldrb	r3, [r7, #13]
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d002      	beq.n	80018bc <Radio_RxBufferGet+0x5c>
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0e6      	beq.n	800188a <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	701a      	strb	r2, [r3, #0]
	return Status;
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000468 	.word	0x20000468

080018d0 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 80018e0:	2300      	movs	r3, #0
 80018e2:	73bb      	strb	r3, [r7, #14]
 80018e4:	e010      	b.n	8001908 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4619      	mov	r1, r3
 80018ec:	480f      	ldr	r0, [pc, #60]	; (800192c <Radio_TxBufferPut+0x5c>)
 80018ee:	f7fe fe4d 	bl	800058c <RBuffer_Write>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	73fb      	strb	r3, [r7, #15]
		Command++;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3301      	adds	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	3301      	adds	r3, #1
 8001906:	73bb      	strb	r3, [r7, #14]
 8001908:	7bba      	ldrb	r2, [r7, #14]
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3ea      	bcc.n	80018e6 <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001910:	2104      	movs	r1, #4
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <Radio_TxBufferPut+0x5c>)
 8001914:	f7fe fe3a 	bl	800058c <RBuffer_Write>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	4313      	orrs	r3, r2
 8001920:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000444 	.word	0x20000444

08001930 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001946:	1d3a      	adds	r2, r7, #4
 8001948:	4413      	add	r3, r2
 800194a:	4619      	mov	r1, r3
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <Radio_TxBufferSend+0x84>)
 800194e:	f7fe fe49 	bl	80005e4 <RBuffer_Read>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800195a:	4313      	orrs	r3, r2
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800196a:	3328      	adds	r3, #40	; 0x28
 800196c:	443b      	add	r3, r7
 800196e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <Radio_TxBufferSend+0x4e>
 8001976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0e1      	beq.n	8001942 <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 800197e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001982:	2b00      	cmp	r3, #0
 8001984:	d110      	bne.n	80019a8 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 8001986:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 ff18 	bl	80027c4 <nRF24_SendPacket>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800199c:	4313      	orrs	r3, r2
 800199e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <Radio_TxBufferSend+0x88>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 80019a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000444 	.word	0x20000444
 80019b8:	20000441 	.word	0x20000441

080019bc <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
#ifdef CONTROLLER
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 80019c2:	f240 4305 	movw	r3, #1029	; 0x405
 80019c6:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <Radio_SendConnectionCheck+0x28>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2102      	movs	r1, #2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fef6 	bl	80027c4 <nRF24_SendPacket>
 80019d8:	4603      	mov	r3, r0
#ifdef ROBOT
	uint8_t Command [3] = {CONNECTION_HOLD, _OK, COMM_END};
	TxStatus = RADIO_BUSY;
	return nRF24_WriteAckPayload(0, Command, 3);
#endif
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000441 	.word	0x20000441

080019e8 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 80019ee:	f000 ff53 	bl	8002898 <nRF24_Event>

#ifdef CONTROLLER

	static uint32_t LastTick;
	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 80019f2:	f001 fdd5 	bl	80035a0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <Radio_Process+0x88>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b32      	cmp	r3, #50	; 0x32
 8001a00:	d91c      	bls.n	8001a3c <Radio_Process+0x54>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <Radio_Process+0x8c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <Radio_Process+0x32>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8001a0a:	f7ff ff91 	bl	8001930 <Radio_TxBufferSend>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10e      	bne.n	8001a32 <Radio_Process+0x4a>
			{
				Radio_SendConnectionCheck();
 8001a14:	f7ff ffd2 	bl	80019bc <Radio_SendConnectionCheck>
 8001a18:	e00b      	b.n	8001a32 <Radio_Process+0x4a>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <Radio_Process+0x8c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <Radio_Process+0x4a>
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <Radio_Process+0x90>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d103      	bne.n	8001a32 <Radio_Process+0x4a>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8001a2a:	f000 f829 	bl	8001a80 <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 8001a2e:	f7ff ffc5 	bl	80019bc <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8001a32:	f001 fdb5 	bl	80035a0 <HAL_GetTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <Radio_Process+0x88>)
 8001a3a:	6013      	str	r3, [r2, #0]
		ConnectionStatus = RADIO_ERROR;
		Radio_NoConnectionCallback();
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <Radio_Process+0x94>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d110      	bne.n	8001a66 <Radio_Process+0x7e>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001a44:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff07 	bl	8001860 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001a52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 f812 	bl	8002a84 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <Radio_Process+0x94>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
	}
}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000048c 	.word	0x2000048c
 8001a74:	20000441 	.word	0x20000441
 8001a78:	20000440 	.word	0x20000440
 8001a7c:	20000442 	.word	0x20000442

08001a80 <Radio_NoConnectionCallback>:
{
	nRF24_IRQ_Handler();
}

__weak void Radio_NoConnectionCallback(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <nRF24_EventTxCallback+0x1c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <nRF24_EventTxCallback+0x20>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000441 	.word	0x20000441
 8001ab0:	20000440 	.word	0x20000440

08001ab4 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001aba:	1dfa      	adds	r2, r7, #7
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fe68 	bl	8002798 <nRF24_ReadRXPaylaod>
	ConnectionStatus = RADIO_OK;
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fe9d 	bl	8001810 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <nRF24_EventRxCallback+0x30>)
 8001ad8:	2203      	movs	r2, #3
 8001ada:	701a      	strb	r2, [r3, #0]
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000442 	.word	0x20000442

08001ae8 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <nRF24_EventMrCallback+0x14>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20000440 	.word	0x20000440

08001b00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b28:	e000      	b.n	8001b2c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f9      	beq.n	8001b2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b54:	f001 fcbe 	bl	80034d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b58:	f000 f828 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5c:	f7ff fb9c 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b60:	f7ff fb7a 	bl	8001258 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b64:	f7ff fc5e 	bl	8001424 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b68:	f7ff fc8a 	bl	8001480 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001b6c:	f000 ff9a 	bl	8002aa4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001b70:	f001 fb9e 	bl	80032b0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b74:	f7fe fd64 	bl	8000640 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001b78:	f001 fbee 	bl	8003358 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001b7c:	f000 f87e 	bl	8001c7c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2120      	movs	r1, #32
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <main+0x50>)
 8001b86:	f003 f897 	bl	8004cb8 <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <main+0x54>)
 8001b8c:	f7ff fe28 	bl	80017e0 <Radio_Init>
  Inputs_Init();
 8001b90:	f7fe fe66 	bl	8000860 <Inputs_Init>
  OLED_Init(&hi2c3);
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <main+0x58>)
 8001b96:	f001 f839 	bl	8002c0c <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SimpleScheduler();
 8001b9a:	f000 ff3f 	bl	8002a1c <SimpleScheduler>
 8001b9e:	e7fc      	b.n	8001b9a <main+0x4a>
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	200004a8 	.word	0x200004a8
 8001ba8:	200003ec 	.word	0x200003ec

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b094      	sub	sp, #80	; 0x50
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	2230      	movs	r2, #48	; 0x30
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 fe9c 	bl	80078f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <SystemClock_Config+0xc8>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <SystemClock_Config+0xc8>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <SystemClock_Config+0xc8>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <SystemClock_Config+0xcc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <SystemClock_Config+0xcc>)
 8001bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <SystemClock_Config+0xcc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c12:	2302      	movs	r3, #2
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fccf 	bl	80055d4 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c3c:	f000 f856 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c44:	2302      	movs	r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 ff31 	bl	8005ac4 <HAL_RCC_ClockConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c68:	f000 f840 	bl	8001cec <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3750      	adds	r7, #80	; 0x50
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	2028      	movs	r0, #40	; 0x28
 8001c86:	f002 fab2 	bl	80041ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c8a:	2028      	movs	r0, #40	; 0x28
 8001c8c:	f002 facb 	bl	8004226 <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2024      	movs	r0, #36	; 0x24
 8001c96:	f002 faaa 	bl	80041ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001c9a:	2024      	movs	r0, #36	; 0x24
 8001c9c:	f002 fac3 	bl	8004226 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2012      	movs	r0, #18
 8001ca6:	f002 faa2 	bl	80041ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001caa:	2012      	movs	r0, #18
 8001cac:	f002 fabb 	bl	8004226 <HAL_NVIC_EnableIRQ>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff1e 	bl	8001b00 <ITM_SendChar>

	return ch;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cde:	d101      	bne.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001ce0:	f000 fd88 	bl	80027f4 <nRF24_IRQ_Handler>
	}

}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
	//static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	//if(LastMenuPtr == MenuCurrentMember) return;  TODO: IS THIS NEEDED?

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001d02:	e00c      	b.n	8001d1e <Menu_RefreshScreen+0x26>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <Menu_RefreshScreen+0x14c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4a4f      	ldr	r2, [pc, #316]	; (8001e48 <Menu_RefreshScreen+0x150>)
 8001d0a:	5cd2      	ldrb	r2, [r2, r3]
 8001d0c:	3201      	adds	r2, #1
 8001d0e:	b2d1      	uxtb	r1, r2
 8001d10:	4a4d      	ldr	r2, [pc, #308]	; (8001e48 <Menu_RefreshScreen+0x150>)
 8001d12:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001d14:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <Menu_RefreshScreen+0x154>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a4c      	ldr	r2, [pc, #304]	; (8001e4c <Menu_RefreshScreen+0x154>)
 8001d1c:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <Menu_RefreshScreen+0x14c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <Menu_RefreshScreen+0x158>)
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <Menu_RefreshScreen+0x14c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <Menu_RefreshScreen+0x150>)
 8001d32:	5c5b      	ldrb	r3, [r3, r1]
 8001d34:	3305      	adds	r3, #5
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dce4      	bgt.n	8001d04 <Menu_RefreshScreen+0xc>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001d3a:	e00c      	b.n	8001d56 <Menu_RefreshScreen+0x5e>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <Menu_RefreshScreen+0x14c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4a41      	ldr	r2, [pc, #260]	; (8001e48 <Menu_RefreshScreen+0x150>)
 8001d42:	5cd2      	ldrb	r2, [r2, r3]
 8001d44:	3a01      	subs	r2, #1
 8001d46:	b2d1      	uxtb	r1, r2
 8001d48:	4a3f      	ldr	r2, [pc, #252]	; (8001e48 <Menu_RefreshScreen+0x150>)
 8001d4a:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <Menu_RefreshScreen+0x154>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4a3e      	ldr	r2, [pc, #248]	; (8001e4c <Menu_RefreshScreen+0x154>)
 8001d54:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <Menu_RefreshScreen+0x14c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <Menu_RefreshScreen+0x158>)
 8001d5e:	5c9a      	ldrb	r2, [r3, r2]
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <Menu_RefreshScreen+0x14c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <Menu_RefreshScreen+0x150>)
 8001d68:	5c5b      	ldrb	r3, [r3, r1]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3e6      	bcc.n	8001d3c <Menu_RefreshScreen+0x44>
	}

	OLED_ClearBuffer(BLACK);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f001 f856 	bl	8002e20 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 ff98 	bl	8002cac <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4835      	ldr	r0, [pc, #212]	; (8001e54 <Menu_RefreshScreen+0x15c>)
 8001d80:	f001 f918 	bl	8002fb4 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <Menu_RefreshScreen+0x154>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001d8a:	e04f      	b.n	8001e2c <Menu_RefreshScreen+0x134>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <Menu_RefreshScreen+0x160>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d126      	bne.n	8001de4 <Menu_RefreshScreen+0xec>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fa20 	bl	80001e0 <strlen>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	78bb      	ldrb	r3, [r7, #2]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 ff73 	bl	8002cac <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4824      	ldr	r0, [pc, #144]	; (8001e5c <Menu_RefreshScreen+0x164>)
 8001dca:	f001 f8f3 	bl	8002fb4 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 f8ed 	bl	8002fb4 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4820      	ldr	r0, [pc, #128]	; (8001e60 <Menu_RefreshScreen+0x168>)
 8001dde:	f001 f8e9 	bl	8002fb4 <OLED_WriteString>
 8001de2:	e01d      	b.n	8001e20 <Menu_RefreshScreen+0x128>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe f9f9 	bl	80001e0 <strlen>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	78bb      	ldrb	r3, [r7, #2]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 ff4c 	bl	8002cac <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 f8ca 	bl	8002fb4 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	3301      	adds	r3, #1
 8001e24:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d002      	beq.n	8001e38 <Menu_RefreshScreen+0x140>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1a9      	bne.n	8001d8c <Menu_RefreshScreen+0x94>
	}
	OLED_SendBuffer();
 8001e38:	f000 ffc6 	bl	8002dc8 <OLED_SendBuffer>
	//LastMenuPtr = MenuCurrentMember;

}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000498 	.word	0x20000498
 8001e48:	20000494 	.word	0x20000494
 8001e4c:	2000010c 	.word	0x2000010c
 8001e50:	20000490 	.word	0x20000490
 8001e54:	08008618 	.word	0x08008618
 8001e58:	20000108 	.word	0x20000108
 8001e5c:	08008630 	.word	0x08008630
 8001e60:	08008634 	.word	0x08008634

08001e64 <Menu_Next>:

void Menu_Next(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <Menu_Next+0x54>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d012      	beq.n	8001e98 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <Menu_Next+0x54>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <Menu_Next+0x54>)
 8001e7a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <Menu_Next+0x58>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <Menu_Next+0x5c>)
 8001e82:	5cd2      	ldrb	r2, [r2, r3]
 8001e84:	3201      	adds	r2, #1
 8001e86:	b2d1      	uxtb	r1, r2
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <Menu_Next+0x5c>)
 8001e8a:	54d1      	strb	r1, [r2, r3]
 8001e8c:	e00f      	b.n	8001eae <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <Menu_Next+0x54>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <Menu_Next+0x54>)
 8001e96:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <Menu_Next+0x54>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f5      	bne.n	8001e8e <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <Menu_Next+0x58>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <Menu_Next+0x5c>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8001eae:	f7ff ff23 	bl	8001cf8 <Menu_RefreshScreen>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000108 	.word	0x20000108
 8001ebc:	20000498 	.word	0x20000498
 8001ec0:	20000490 	.word	0x20000490

08001ec4 <Menu_Prev>:

void Menu_Prev(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <Menu_Prev+0x58>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01a      	beq.n	8001f08 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <Menu_Prev+0x58>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <Menu_Prev+0x58>)
 8001eda:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <Menu_Prev+0x5c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <Menu_Prev+0x60>)
 8001ee2:	5cd2      	ldrb	r2, [r2, r3]
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	b2d1      	uxtb	r1, r2
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <Menu_Prev+0x60>)
 8001eea:	54d1      	strb	r1, [r2, r3]
 8001eec:	e011      	b.n	8001f12 <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <Menu_Prev+0x58>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <Menu_Prev+0x58>)
 8001ef6:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <Menu_Prev+0x5c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <Menu_Prev+0x60>)
 8001efe:	5cd2      	ldrb	r2, [r2, r3]
 8001f00:	3201      	adds	r2, #1
 8001f02:	b2d1      	uxtb	r1, r2
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <Menu_Prev+0x60>)
 8001f06:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <Menu_Prev+0x58>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ed      	bne.n	8001eee <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 8001f12:	f7ff fef1 	bl	8001cf8 <Menu_RefreshScreen>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000108 	.word	0x20000108
 8001f20:	20000498 	.word	0x20000498
 8001f24:	20000490 	.word	0x20000490

08001f28 <Menu_Select>:



void Menu_Select(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <Menu_Select+0x48>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <Menu_Select+0x16>
	{
		MenuCurrentMember->FunctionPtr();
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <Menu_Select+0x48>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4798      	blx	r3
	}

	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <Menu_Select+0x48>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00e      	beq.n	8001f66 <Menu_Select+0x3e>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <Menu_Select+0x48>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <Menu_Select+0x48>)
 8001f50:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <Menu_Select+0x48>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <Menu_Select+0x4c>)
 8001f58:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <Menu_Select+0x50>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <Menu_Select+0x50>)
 8001f64:	701a      	strb	r2, [r3, #0]
	}

	Menu_RefreshScreen();
 8001f66:	f7ff fec7 	bl	8001cf8 <Menu_RefreshScreen>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000108 	.word	0x20000108
 8001f74:	2000010c 	.word	0x2000010c
 8001f78:	20000498 	.word	0x20000498

08001f7c <Menu_Back>:

void Menu_Back(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <Menu_Back+0x7c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d02e      	beq.n	8001fea <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <Menu_Back+0x80>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <Menu_Back+0x84>)
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <Menu_Back+0x7c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <Menu_Back+0x7c>)
 8001fa0:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <Menu_Back+0x7c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <Menu_Back+0x88>)
 8001fa8:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <Menu_Back+0x80>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <Menu_Back+0x80>)
 8001fb4:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	e007      	b.n	8001fcc <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <Menu_Back+0x88>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <Menu_Back+0x88>)
 8001fc4:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <Menu_Back+0x80>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <Menu_Back+0x84>)
 8001fd6:	5c5b      	ldrb	r3, [r3, r1]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <Menu_Back+0x80>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <Menu_Back+0x8c>)
 8001fe2:	5c1b      	ldrb	r3, [r3, r0]
 8001fe4:	1acb      	subs	r3, r1, r3
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbe8      	blt.n	8001fbc <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 8001fea:	f7ff fe85 	bl	8001cf8 <Menu_RefreshScreen>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000108 	.word	0x20000108
 8001ffc:	20000498 	.word	0x20000498
 8002000:	20000490 	.word	0x20000490
 8002004:	2000010c 	.word	0x2000010c
 8002008:	20000494 	.word	0x20000494

0800200c <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f001 facd 	bl	80035b8 <HAL_Delay>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <nRF24_SendSpi+0x28>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	f003 ffd2 	bl	8005fea <HAL_SPI_Transmit>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000049c 	.word	0x2000049c

08002054 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <nRF24_ReadSpi+0x28>)
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	b29a      	uxth	r2, r3
 8002068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	f004 f8f8 	bl	8006262 <HAL_SPI_Receive>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000049c 	.word	0x2000049c

08002080 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800208e:	2200      	movs	r2, #0
 8002090:	2140      	movs	r1, #64	; 0x40
 8002092:	480c      	ldr	r0, [pc, #48]	; (80020c4 <nRF24_ReadRegister+0x44>)
 8002094:	f002 fe10 	bl	8004cb8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	2101      	movs	r1, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ffc3 	bl	8002028 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80020a2:	f107 030f 	add.w	r3, r7, #15
 80020a6:	2101      	movs	r1, #1
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ffd3 	bl	8002054 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80020ae:	2201      	movs	r2, #1
 80020b0:	2140      	movs	r1, #64	; 0x40
 80020b2:	4804      	ldr	r0, [pc, #16]	; (80020c4 <nRF24_ReadRegister+0x44>)
 80020b4:	f002 fe00 	bl	8004cb8 <HAL_GPIO_WritePin>

	return result;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020800 	.word	0x40020800

080020c8 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020dc:	2200      	movs	r2, #0
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	480a      	ldr	r0, [pc, #40]	; (800210c <nRF24_ReadRegisters+0x44>)
 80020e2:	f002 fde9 	bl	8004cb8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff9c 	bl	8002028 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80020f0:	79bb      	ldrb	r3, [r7, #6]
 80020f2:	4619      	mov	r1, r3
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f7ff ffad 	bl	8002054 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80020fa:	2201      	movs	r2, #1
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	4803      	ldr	r0, [pc, #12]	; (800210c <nRF24_ReadRegisters+0x44>)
 8002100:	f002 fdda 	bl	8004cb8 <HAL_GPIO_WritePin>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020800 	.word	0x40020800

08002110 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	460a      	mov	r2, r1
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	4613      	mov	r3, r2
 800211e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	b2db      	uxtb	r3, r3
 8002128:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 800212e:	2200      	movs	r2, #0
 8002130:	2140      	movs	r1, #64	; 0x40
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <nRF24_WriteRegister+0x48>)
 8002134:	f002 fdc0 	bl	8004cb8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff72 	bl	8002028 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002144:	2201      	movs	r2, #1
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <nRF24_WriteRegister+0x48>)
 800214a:	f002 fdb5 	bl	8004cb8 <HAL_GPIO_WritePin>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40020800 	.word	0x40020800

0800215c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	4613      	mov	r3, r2
 800216a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f043 0320 	orr.w	r3, r3, #32
 8002172:	b2db      	uxtb	r3, r3
 8002174:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002176:	2200      	movs	r2, #0
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <nRF24_WriteRegisters+0x4c>)
 800217c:	f002 fd9c 	bl	8004cb8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff4f 	bl	8002028 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	4619      	mov	r1, r3
 800218e:	6838      	ldr	r0, [r7, #0]
 8002190:	f7ff ff4a 	bl	8002028 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002194:	2201      	movs	r2, #1
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <nRF24_WriteRegisters+0x4c>)
 800219a:	f002 fd8d 	bl	8004cb8 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020800 	.word	0x40020800

080021ac <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 80021b2:	2200      	movs	r2, #0
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	4810      	ldr	r0, [pc, #64]	; (80021f8 <nRF24_TX_Mode+0x4c>)
 80021b8:	f002 fd7e 	bl	8004cb8 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 80021bc:	f000 f81e 	bl	80021fc <nRF24_ReadConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f818 	bl	800220c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80021dc:	2070      	movs	r0, #112	; 0x70
 80021de:	f000 f870 	bl	80022c2 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80021e2:	f000 f87d 	bl	80022e0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80021e6:	f000 f895 	bl	8002314 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7ff ff0e 	bl	800200c <nRF24_Delay_ms>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40020800 	.word	0x40020800

080021fc <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff ff3d 	bl	8002080 <nRF24_ReadRegister>
 8002206:	4603      	mov	r3, r0
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}

0800220c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4619      	mov	r1, r3
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff ff78 	bl	8002110 <nRF24_WriteRegister>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002232:	2006      	movs	r0, #6
 8002234:	f7ff ff24 	bl	8002080 <nRF24_ReadRegister>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	b25a      	sxtb	r2, r3
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	4313      	orrs	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4619      	mov	r1, r3
 8002258:	2006      	movs	r0, #6
 800225a:	f7ff ff59 	bl	8002110 <nRF24_WriteRegister>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002270:	2006      	movs	r0, #6
 8002272:	f7ff ff05 	bl	8002080 <nRF24_ReadRegister>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002280:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d104      	bne.n	8002292 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	f043 0320 	orr.w	r3, r3, #32
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e006      	b.n	80022a0 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d103      	bne.n	80022a0 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	f043 0308 	orr.w	r3, r3, #8
 800229e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	4619      	mov	r1, r3
 80022a4:	2006      	movs	r0, #6
 80022a6:	f7ff ff33 	bl	8002110 <nRF24_WriteRegister>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80022b6:	2007      	movs	r0, #7
 80022b8:	f7ff fee2 	bl	8002080 <nRF24_ReadRegister>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4619      	mov	r1, r3
 80022d0:	2007      	movs	r0, #7
 80022d2:	f7ff ff1d 	bl	8002110 <nRF24_WriteRegister>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80022e6:	23e2      	movs	r3, #226	; 0xe2
 80022e8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80022ea:	2200      	movs	r2, #0
 80022ec:	2140      	movs	r1, #64	; 0x40
 80022ee:	4808      	ldr	r0, [pc, #32]	; (8002310 <nRF24_FlushRX+0x30>)
 80022f0:	f002 fce2 	bl	8004cb8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	2101      	movs	r1, #1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe95 	bl	8002028 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80022fe:	2201      	movs	r2, #1
 8002300:	2140      	movs	r1, #64	; 0x40
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <nRF24_FlushRX+0x30>)
 8002304:	f002 fcd8 	bl	8004cb8 <HAL_GPIO_WritePin>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020800 	.word	0x40020800

08002314 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800231a:	23e1      	movs	r3, #225	; 0xe1
 800231c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800231e:	2200      	movs	r2, #0
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <nRF24_FlushTX+0x30>)
 8002324:	f002 fcc8 	bl	8004cb8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fe7b 	bl	8002028 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002332:	2201      	movs	r2, #1
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	4803      	ldr	r0, [pc, #12]	; (8002344 <nRF24_FlushTX+0x30>)
 8002338:	f002 fcbe 	bl	8004cb8 <HAL_GPIO_WritePin>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40020800 	.word	0x40020800

08002348 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002352:	f7ff ff53 	bl	80021fc <nRF24_ReadConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e003      	b.n	8002372 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	f023 0308 	bic.w	r3, r3, #8
 8002370:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff49 	bl	800220c <nRF24_WriteConfig>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800238c:	f7ff ff36 	bl	80021fc <nRF24_ReadConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d104      	bne.n	80023a4 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e003      	b.n	80023ac <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff2c 	bl	800220c <nRF24_WriteConfig>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	460a      	mov	r2, r1
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	2004      	movs	r0, #4
 80023e6:	f7ff fe93 	bl	8002110 <nRF24_WriteRegister>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	2005      	movs	r0, #5
 8002408:	f7ff fe82 	bl	8002110 <nRF24_WriteRegister>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	460a      	mov	r2, r1
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	4613      	mov	r3, r2
 8002422:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d901      	bls.n	800242e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800242a:	2305      	movs	r3, #5
 800242c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800242e:	2002      	movs	r0, #2
 8002430:	f7ff fe26 	bl	8002080 <nRF24_ReadRegister>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002438:	79bb      	ldrb	r3, [r7, #6]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10a      	bne.n	8002454 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2201      	movs	r2, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	b25a      	sxtb	r2, r3
 8002448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244c:	4313      	orrs	r3, r2
 800244e:	b25b      	sxtb	r3, r3
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e00b      	b.n	800246c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	2201      	movs	r2, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	b25b      	sxtb	r3, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	b25a      	sxtb	r2, r3
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4013      	ands	r3, r2
 8002468:	b25b      	sxtb	r3, r3
 800246a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	4619      	mov	r1, r3
 8002470:	2002      	movs	r0, #2
 8002472:	f7ff fe4d 	bl	8002110 <nRF24_WriteRegister>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	460a      	mov	r2, r1
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	4613      	mov	r3, r2
 800248c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d901      	bls.n	8002498 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002494:	2305      	movs	r3, #5
 8002496:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002498:	2001      	movs	r0, #1
 800249a:	f7ff fdf1 	bl	8002080 <nRF24_ReadRegister>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10a      	bne.n	80024be <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	b25a      	sxtb	r2, r3
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e00b      	b.n	80024d6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2201      	movs	r2, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	b25a      	sxtb	r2, r3
 80024cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4619      	mov	r1, r3
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff fe18 	bl	8002110 <nRF24_WriteRegister>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d901      	bls.n	80024fc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80024f8:	2305      	movs	r3, #5
 80024fa:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d801      	bhi.n	8002506 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002502:	2303      	movs	r3, #3
 8002504:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	3b02      	subs	r3, #2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4619      	mov	r1, r3
 8002514:	2003      	movs	r0, #3
 8002516:	f7ff fdfb 	bl	8002110 <nRF24_WriteRegister>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	6039      	str	r1, [r7, #0]
 800252c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <nRF24_SetRXAddress+0x18>
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d11d      	bne.n	8002576 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e00d      	b.n	800255c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	441a      	add	r2, r3
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	f1c3 0302 	rsb	r3, r3, #2
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	3310      	adds	r3, #16
 8002550:	443b      	add	r3, r7
 8002552:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	3301      	adds	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d9ee      	bls.n	8002540 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	330a      	adds	r3, #10
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f107 010c 	add.w	r1, r7, #12
 800256c:	2203      	movs	r2, #3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fdf4 	bl	800215c <nRF24_WriteRegisters>
	{
 8002574:	e00a      	b.n	800258c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	330a      	adds	r3, #10
 800257a:	b2da      	uxtb	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	3302      	adds	r3, #2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7ff fdc3 	bl	8002110 <nRF24_WriteRegister>
}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	2203      	movs	r2, #3
 80025a2:	4619      	mov	r1, r3
 80025a4:	200a      	movs	r0, #10
 80025a6:	f7ff fd8f 	bl	80020c8 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e00c      	b.n	80025ca <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	f1c3 0302 	rsb	r3, r3, #2
 80025b8:	3210      	adds	r2, #16
 80025ba:	443a      	add	r2, r7
 80025bc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80025c0:	4a16      	ldr	r2, [pc, #88]	; (800261c <nRF24_SetTXAddress+0x88>)
 80025c2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d9ef      	bls.n	80025b0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e00d      	b.n	80025f2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	441a      	add	r2, r3
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	f1c3 0302 	rsb	r3, r3, #2
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	3310      	adds	r3, #16
 80025e6:	443b      	add	r3, r7
 80025e8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d9ee      	bls.n	80025d6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	2203      	movs	r2, #3
 80025fe:	4619      	mov	r1, r3
 8002600:	200a      	movs	r0, #10
 8002602:	f7ff fdab 	bl	800215c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	2203      	movs	r2, #3
 800260c:	4619      	mov	r1, r3
 800260e:	2010      	movs	r0, #16
 8002610:	f7ff fda4 	bl	800215c <nRF24_WriteRegisters>

}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200004a0 	.word	0x200004a0

08002620 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002626:	f7ff fe44 	bl	80022b2 <nRF24_ReadStatus>
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002634:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fe42 	bl	80022c2 <nRF24_WriteStatus>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002650:	2060      	movs	r0, #96	; 0x60
 8002652:	f7ff fd15 	bl	8002080 <nRF24_ReadRegister>
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b20      	cmp	r3, #32
 800265e:	d906      	bls.n	800266e <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8002660:	f7ff fe3e 	bl	80022e0 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8002664:	2002      	movs	r0, #2
 8002666:	f7ff fcd1 	bl	800200c <nRF24_Delay_ms>
        return 0;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 800266e:	79fb      	ldrb	r3, [r7, #7]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002682:	f7ff fdbb 	bl	80021fc <nRF24_ReadConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e003      	b.n	80026a2 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fdb1 	bl	800220c <nRF24_WriteConfig>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80026bc:	f7ff fd9e 	bl	80021fc <nRF24_ReadConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	f043 0320 	orr.w	r3, r3, #32
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e003      	b.n	80026dc <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	f023 0320 	bic.w	r3, r3, #32
 80026da:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fd94 	bl	800220c <nRF24_WriteConfig>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80026f6:	f7ff fd81 	bl	80021fc <nRF24_ReadConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e003      	b.n	8002716 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	f023 0310 	bic.w	r3, r3, #16
 8002714:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fd77 	bl	800220c <nRF24_WriteConfig>
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	461a      	mov	r2, r3
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	20a0      	movs	r0, #160	; 0xa0
 800273a:	f7ff fd0f 	bl	800215c <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800274e:	2201      	movs	r2, #1
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	4810      	ldr	r0, [pc, #64]	; (8002794 <nRF24_WaitTX+0x4c>)
 8002754:	f002 fab0 	bl	8004cb8 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff fc57 	bl	800200c <nRF24_Delay_ms>
	NRF24_CE_LOW;
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	480c      	ldr	r0, [pc, #48]	; (8002794 <nRF24_WaitTX+0x4c>)
 8002764:	f002 faa8 	bl	8004cb8 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff fc4f 	bl	800200c <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 800276e:	f7ff fda0 	bl	80022b2 <nRF24_ReadStatus>
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <nRF24_WaitTX+0x42>
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <nRF24_WaitTX+0x20>

}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40020800 	.word	0x40020800

08002798 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 80027a2:	f7ff ff50 	bl	8002646 <nRF24_GetDynamicPayloadSize>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	2061      	movs	r0, #97	; 0x61
 80027b8:	f7ff fc86 	bl	80020c8 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d901      	bls.n	80027da <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e007      	b.n	80027ea <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa1 	bl	8002726 <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 80027e4:	f7ff ffb0 	bl	8002748 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <nRF24_IRQ_Handler+0x14>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	200004a6 	.word	0x200004a6

0800280c <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <nRF24_IRQ_Read+0x7c>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d130      	bne.n	800287e <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <nRF24_IRQ_Read+0x7c>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8002822:	f7ff fd46 	bl	80022b2 <nRF24_ReadStatus>
 8002826:	4603      	mov	r3, r0
 8002828:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <nRF24_IRQ_Read+0x80>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002844:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <nRF24_IRQ_Read+0x84>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f043 0320 	orr.w	r3, r3, #32
 800285c:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 800285e:	79bb      	ldrb	r3, [r7, #6]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <nRF24_IRQ_Read+0x88>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fd22 	bl	80022c2 <nRF24_WriteStatus>
	}
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200004a6 	.word	0x200004a6
 800288c:	200004a3 	.word	0x200004a3
 8002890:	200004a4 	.word	0x200004a4
 8002894:	200004a5 	.word	0x200004a5

08002898 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 800289c:	f7ff ffb6 	bl	800280c <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <nRF24_Event+0x44>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 80028a8:	f7ff f904 	bl	8001ab4 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <nRF24_Event+0x44>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <nRF24_Event+0x48>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 80028ba:	f7ff f8e9 	bl	8001a90 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <nRF24_Event+0x48>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <nRF24_Event+0x4c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 80028cc:	f7ff f90c 	bl	8001ae8 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <nRF24_Event+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	}
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200004a3 	.word	0x200004a3
 80028e0:	200004a4 	.word	0x200004a4
 80028e4:	200004a5 	.word	0x200004a5

080028e8 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80028f0:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <nRF24_Init+0xc4>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80028f6:	2200      	movs	r2, #0
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	482d      	ldr	r0, [pc, #180]	; (80029b0 <nRF24_Init+0xc8>)
 80028fc:	f002 f9dc 	bl	8004cb8 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002900:	2201      	movs	r2, #1
 8002902:	2140      	movs	r1, #64	; 0x40
 8002904:	482a      	ldr	r0, [pc, #168]	; (80029b0 <nRF24_Init+0xc8>)
 8002906:	f002 f9d7 	bl	8004cb8 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 800290a:	2005      	movs	r0, #5
 800290c:	f7ff fb7e 	bl	800200c <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002910:	2003      	movs	r0, #3
 8002912:	f7ff fc89 	bl	8002228 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002916:	2002      	movs	r0, #2
 8002918:	f7ff fca5 	bl	8002266 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800291c:	2001      	movs	r0, #1
 800291e:	f7ff fd13 	bl	8002348 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002922:	2000      	movs	r0, #0
 8002924:	f7ff fd2d 	bl	8002382 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002928:	2107      	movs	r1, #7
 800292a:	2004      	movs	r0, #4
 800292c:	f7ff fd46 	bl	80023bc <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002930:	201d      	movs	r0, #29
 8002932:	f7ff fba5 	bl	8002080 <nRF24_ReadRegister>
 8002936:	4603      	mov	r3, r0
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4619      	mov	r1, r3
 8002940:	201d      	movs	r0, #29
 8002942:	f7ff fbe5 	bl	8002110 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002946:	213f      	movs	r1, #63	; 0x3f
 8002948:	201c      	movs	r0, #28
 800294a:	f7ff fbe1 	bl	8002110 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800294e:	200a      	movs	r0, #10
 8002950:	f7ff fd4f 	bl	80023f2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002954:	2101      	movs	r1, #1
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fd5c 	bl	8002414 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800295c:	2101      	movs	r1, #1
 800295e:	2000      	movs	r0, #0
 8002960:	f7ff fd8d 	bl	800247e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002964:	2003      	movs	r0, #3
 8002966:	f7ff fdbf 	bl	80024e8 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800296a:	2001      	movs	r0, #1
 800296c:	f7ff fb4e 	bl	800200c <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002970:	2001      	movs	r0, #1
 8002972:	f7ff fe81 	bl	8002678 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff fe9b 	bl	80026b2 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 800297c:	2001      	movs	r0, #1
 800297e:	f7ff feb5 	bl	80026ec <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002982:	2001      	movs	r0, #1
 8002984:	f7ff fb42 	bl	800200c <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002988:	f7ff fe4a 	bl	8002620 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 800298c:	201d      	movs	r0, #29
 800298e:	f7ff fb77 	bl	8002080 <nRF24_ReadRegister>
 8002992:	4603      	mov	r3, r0
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	201d      	movs	r0, #29
 800299e:	f7ff fbb7 	bl	8002110 <nRF24_WriteRegister>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000049c 	.word	0x2000049c
 80029b0:	40020800 	.word	0x40020800

080029b4 <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <MenuTaskInit+0x2c>)
 80029ba:	490a      	ldr	r1, [pc, #40]	; (80029e4 <MenuTaskInit+0x30>)
 80029bc:	2004      	movs	r0, #4
 80029be:	f7fe f8a9 	bl	8000b14 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 80029c2:	2200      	movs	r2, #0
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <MenuTaskInit+0x30>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe f8a4 	bl	8000b14 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, Menu_Back, NULL);
 80029cc:	2200      	movs	r2, #0
 80029ce:	4904      	ldr	r1, [pc, #16]	; (80029e0 <MenuTaskInit+0x2c>)
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7fe f89f 	bl	8000b14 <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 80029d6:	f7ff f98f 	bl	8001cf8 <Menu_RefreshScreen>
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	08001f7d 	.word	0x08001f7d
 80029e4:	08001f29 	.word	0x08001f29

080029e8 <MenuTask>:

static void MenuTask(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 80029f2:	f7fe f847 	bl	8000a84 <Inputs_GetEncoderCount>
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	dd02      	ble.n	8002a08 <MenuTask+0x20>
	{
		Menu_Next();
 8002a02:	f7ff fa2f 	bl	8001e64 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 8002a06:	e005      	b.n	8002a14 <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da01      	bge.n	8002a14 <MenuTask+0x2c>
		Menu_Prev();
 8002a10:	f7ff fa58 	bl	8001ec4 <Menu_Prev>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <SimpleScheduler>:

void SimpleScheduler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 8002a22:	f7fe ffe1 	bl	80019e8 <Radio_Process>

	if(0 == StartupInitFlag)
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <SimpleScheduler+0x64>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <SimpleScheduler+0x1c>
	{
		MenuTaskInit();								//Init for menu
 8002a2e:	f7ff ffc1 	bl	80029b4 <MenuTaskInit>
		StartupInitFlag = 1;
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <SimpleScheduler+0x64>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
	}

	Inputs_ButtonsRoutine();
 8002a38:	f7fe f84e 	bl	8000ad8 <Inputs_ButtonsRoutine>
	SubProgramStatus = Programs_PerformProgram();
 8002a3c:	f7fe f904 	bl	8000c48 <Programs_PerformProgram>
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d106      	bne.n	8002a58 <SimpleScheduler+0x3c>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002a4a:	f7fe f8f1 	bl	8000c30 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002a4e:	f7fe f8a7 	bl	8000ba0 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002a52:	f7ff ffaf 	bl	80029b4 <MenuTaskInit>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
		MenuTaskInit(); 							//Init for menu again
	}
}
 8002a56:	e00e      	b.n	8002a76 <SimpleScheduler+0x5a>
	else if(SubProgramStatus == NO_PROGRAM_SET)		//if there is no pointer to program, perform menu task
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <SimpleScheduler+0x48>
		MenuTask();
 8002a5e:	f7ff ffc3 	bl	80029e8 <MenuTask>
}
 8002a62:	e008      	b.n	8002a76 <SimpleScheduler+0x5a>
	else if(SubProgramStatus == PROGRAM_LAUNCH_ERROR)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d105      	bne.n	8002a76 <SimpleScheduler+0x5a>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002a6a:	f7fe f8e1 	bl	8000c30 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002a6e:	f7fe f897 	bl	8000ba0 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002a72:	f7ff ff9f 	bl	80029b4 <MenuTaskInit>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200004a7 	.word	0x200004a7

08002a84 <Radio_NewCommandReceivedCallback>:
//
//
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
	Parser_Controller(command, length);
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fe f8ab 	bl	8000bf0 <Parser_Controller>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002aaa:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <MX_SPI2_Init+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ad8:	2218      	movs	r2, #24
 8002ada:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002af0:	220a      	movs	r2, #10
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <MX_SPI2_Init+0x64>)
 8002af6:	f003 f9ef 	bl	8005ed8 <HAL_SPI_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b00:	f7ff f8f4 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200004a8 	.word	0x200004a8
 8002b0c:	40003800 	.word	0x40003800

08002b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_SPI_MspInit+0x84>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12c      	bne.n	8002b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b7c:	2305      	movs	r3, #5
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <HAL_SPI_MspInit+0x8c>)
 8002b88:	f001 fefa 	bl	8004980 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40003800 	.word	0x40003800
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <OLED_SendCmdSequence+0x34>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2264      	movs	r2, #100	; 0x64
 8002bb6:	9202      	str	r2, [sp, #8]
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2178      	movs	r1, #120	; 0x78
 8002bc4:	f002 f9ee 	bl	8004fa4 <HAL_I2C_Mem_Write>
 8002bc8:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000500 	.word	0x20000500

08002bd8 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af04      	add	r7, sp, #16
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <OLED_SendData+0x30>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	2364      	movs	r3, #100	; 0x64
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	2178      	movs	r1, #120	; 0x78
 8002bfa:	f002 f9d3 	bl	8004fa4 <HAL_I2C_Mem_Write>
 8002bfe:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000500 	.word	0x20000500

08002c0c <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <OLED_Init+0x28>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 8002c1a:	4807      	ldr	r0, [pc, #28]	; (8002c38 <OLED_Init+0x2c>)
 8002c1c:	f000 f916 	bl	8002e4c <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002c20:	2110      	movs	r1, #16
 8002c22:	4806      	ldr	r0, [pc, #24]	; (8002c3c <OLED_Init+0x30>)
 8002c24:	f7ff ffbc 	bl	8002ba0 <OLED_SendCmdSequence>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000500 	.word	0x20000500
 8002c38:	0800863c 	.word	0x0800863c
 8002c3c:	20000110 	.word	0x20000110

08002c40 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	460a      	mov	r2, r1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d802      	bhi.n	8002c60 <OLED_SetDeviceCursor+0x20>
 8002c5a:	79bb      	ldrb	r3, [r7, #6]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d901      	bls.n	8002c64 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e01f      	b.n	8002ca4 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3302      	adds	r3, #2
 8002c68:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f043 0310 	orr.w	r3, r3, #16
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002c82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002c96:	f107 030c 	add.w	r3, r7, #12
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff7f 	bl	8002ba0 <OLED_SendCmdSequence>

	return Status;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db02      	blt.n	8002cca <OLED_MoveCursor+0x1e>
 8002cc4:	79bb      	ldrb	r3, [r7, #6]
 8002cc6:	2b3f      	cmp	r3, #63	; 0x3f
 8002cc8:	d901      	bls.n	8002cce <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00b      	b.n	8002ce6 <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <OLED_MoveCursor+0x48>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <OLED_MoveCursor+0x48>)
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <OLED_MoveCursor+0x48>)
 8002ce2:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000504 	.word	0x20000504

08002cf8 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
 8002d04:	4613      	mov	r3, r2
 8002d06:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	e04f      	b.n	8002dae <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002d0e:	78bb      	ldrb	r3, [r7, #2]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d116      	bne.n	8002d42 <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d1c:	789b      	ldrb	r3, [r3, #2]
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	4413      	add	r3, r2
 8002d22:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <OLED_WriteToBuffer+0xcc>)
 8002d24:	5cd1      	ldrb	r1, [r2, r3]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d32:	789b      	ldrb	r3, [r3, #2]
 8002d34:	01db      	lsls	r3, r3, #7
 8002d36:	4403      	add	r3, r0
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	b2d1      	uxtb	r1, r2
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <OLED_WriteToBuffer+0xcc>)
 8002d3e:	54d1      	strb	r1, [r2, r3]
 8002d40:	e020      	b.n	8002d84 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002d42:	78bb      	ldrb	r3, [r7, #2]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11b      	bne.n	8002d80 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d50:	789b      	ldrb	r3, [r3, #2]
 8002d52:	01db      	lsls	r3, r3, #7
 8002d54:	4413      	add	r3, r2
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <OLED_WriteToBuffer+0xcc>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	b25a      	sxtb	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	4013      	ands	r3, r2
 8002d68:	b25a      	sxtb	r2, r3
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d72:	789b      	ldrb	r3, [r3, #2]
 8002d74:	01db      	lsls	r3, r3, #7
 8002d76:	440b      	add	r3, r1
 8002d78:	b2d1      	uxtb	r1, r2
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <OLED_WriteToBuffer+0xcc>)
 8002d7c:	54d1      	strb	r1, [r2, r3]
 8002d7e:	e001      	b.n	8002d84 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e019      	b.n	8002db8 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <OLED_WriteToBuffer+0xc8>)
 8002d8e:	7852      	ldrb	r2, [r2, #1]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff8a 	bl	8002cac <OLED_MoveCursor>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00a      	b.n	8002db8 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3301      	adds	r3, #1
 8002da6:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	3301      	adds	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d3ab      	bcc.n	8002d0e <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000504 	.word	0x20000504
 8002dc4:	20000510 	.word	0x20000510

08002dc8 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	71bb      	strb	r3, [r7, #6]
 8002dd6:	e019      	b.n	8002e0c <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff ff2f 	bl	8002c40 <OLED_SetDeviceCursor>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8002dec:	79bb      	ldrb	r3, [r7, #6]
 8002dee:	01db      	lsls	r3, r3, #7
 8002df0:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <OLED_SendBuffer+0x54>)
 8002df2:	4413      	add	r3, r2
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff feee 	bl	8002bd8 <OLED_SendData>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	71bb      	strb	r3, [r7, #6]
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	2b07      	cmp	r3, #7
 8002e10:	d9e2      	bls.n	8002dd8 <OLED_SendBuffer+0x10>
	}
	return Status;
 8002e12:	79fb      	ldrb	r3, [r7, #7]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000510 	.word	0x20000510

08002e20 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e36:	4619      	mov	r1, r3
 8002e38:	4803      	ldr	r0, [pc, #12]	; (8002e48 <OLED_ClearBuffer+0x28>)
 8002e3a:	f004 fd5d 	bl	80078f8 <memset>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000510 	.word	0x20000510

08002e4c <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3301      	adds	r3, #1
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3302      	adds	r3, #2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d802      	bhi.n	8002e70 <OLED_ChangeFont+0x24>
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d901      	bls.n	8002e74 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e00e      	b.n	8002e92 <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <OLED_ChangeFont+0x54>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <OLED_ChangeFont+0x54>)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <OLED_ChangeFont+0x54>)
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3303      	adds	r3, #3
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <OLED_ChangeFont+0x54>)
 8002e8e:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000508 	.word	0x20000508

08002ea4 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460a      	mov	r2, r1
 8002eae:	71fb      	strb	r3, [r7, #7]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002eb8:	79bb      	ldrb	r3, [r7, #6]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d901      	bls.n	8002ec2 <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06f      	b.n	8002fa2 <OLED_WriteChar+0xfe>
	}
	switch(character)
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	2b0a      	cmp	r3, #10
 8002ec6:	d009      	beq.n	8002edc <OLED_WriteChar+0x38>
 8002ec8:	2b0d      	cmp	r3, #13
 8002eca:	d113      	bne.n	8002ef4 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8002ecc:	4b37      	ldr	r3, [pc, #220]	; (8002fac <OLED_WriteChar+0x108>)
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff feea 	bl	8002cac <OLED_MoveCursor>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	e062      	b.n	8002fa2 <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <OLED_WriteChar+0x108>)
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	4b32      	ldr	r3, [pc, #200]	; (8002fac <OLED_WriteChar+0x108>)
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff fede 	bl	8002cac <OLED_MoveCursor>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	e056      	b.n	8002fa2 <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <OLED_WriteChar+0x10c>)
 8002ef8:	7912      	ldrb	r2, [r2, #4]
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <OLED_WriteChar+0x10c>)
 8002f00:	795b      	ldrb	r3, [r3, #5]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	fb12 f303 	smulbb	r3, r2, r3
 8002f08:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <OLED_WriteChar+0x10c>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	89fb      	ldrh	r3, [r7, #14]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4413      	add	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002f16:	2300      	movs	r3, #0
 8002f18:	75bb      	strb	r3, [r7, #22]
 8002f1a:	e00c      	b.n	8002f36 <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8002f1c:	7dbb      	ldrb	r3, [r7, #22]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	3318      	adds	r3, #24
 8002f24:	443b      	add	r3, r7
 8002f26:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002f30:	7dbb      	ldrb	r3, [r7, #22]
 8002f32:	3301      	adds	r3, #1
 8002f34:	75bb      	strb	r3, [r7, #22]
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <OLED_WriteChar+0x10c>)
 8002f38:	795b      	ldrb	r3, [r3, #5]
 8002f3a:	7dba      	ldrb	r2, [r7, #22]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d3ed      	bcc.n	8002f1c <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <OLED_WriteChar+0x10c>)
 8002f42:	7959      	ldrb	r1, [r3, #5]
 8002f44:	79ba      	ldrb	r2, [r7, #6]
 8002f46:	f107 0308 	add.w	r3, r7, #8
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fed4 	bl	8002cf8 <OLED_WriteToBuffer>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <OLED_WriteChar+0x108>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <OLED_WriteChar+0x10c>)
 8002f62:	795b      	ldrb	r3, [r3, #5]
 8002f64:	4413      	add	r3, r2
 8002f66:	2b7f      	cmp	r3, #127	; 0x7f
 8002f68:	dd1a      	ble.n	8002fa0 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <OLED_WriteChar+0x108>)
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8002f72:	2100      	movs	r1, #0
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff fe99 	bl	8002cac <OLED_MoveCursor>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	75fb      	strb	r3, [r7, #23]
 8002f84:	e00c      	b.n	8002fa0 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <OLED_WriteChar+0x108>)
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4619      	mov	r1, r3
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff fe8b 	bl	8002cac <OLED_MoveCursor>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000504 	.word	0x20000504
 8002fb0:	20000508 	.word	0x20000508

08002fb4 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d910      	bls.n	8002fec <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e013      	b.n	8002ff6 <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff64 	bl	8002ea4 <OLED_WriteChar>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	73fb      	strb	r3, [r7, #15]
		String++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
	while(*String)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ec      	bne.n	8002fce <OLED_WriteString+0x1a>
	}
	return Status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <OLED_WriteInt>:

OLED_Status OLED_WriteInt(int Value, uint8_t color)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
	if(color > 1)
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d901      	bls.n	8003016 <OLED_WriteInt+0x16>
	{
		return OLED_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00e      	b.n	8003034 <OLED_WriteInt+0x34>
	}

	char Buffer[5];
	sprintf(Buffer,"%d",Value);
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4907      	ldr	r1, [pc, #28]	; (800303c <OLED_WriteInt+0x3c>)
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fb72 	bl	8007708 <siprintf>
	return OLED_WriteString(Buffer, color);
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ffc1 	bl	8002fb4 <OLED_WriteString>
 8003032:	4603      	mov	r3, r0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	08008638 	.word	0x08008638

08003040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_MspInit+0x4c>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <HAL_MspInit+0x4c>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_MspInit+0x4c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_MspInit+0x4c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_MspInit+0x4c>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_MspInit+0x4c>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <NMI_Handler+0x4>

08003096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309a:	e7fe      	b.n	800309a <HardFault_Handler+0x4>

0800309c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <MemManage_Handler+0x4>

080030a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <BusFault_Handler+0x4>

080030a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <UsageFault_Handler+0x4>

080030ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030dc:	f000 fa4c 	bl	8003578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <ADC_IRQHandler+0x10>)
 80030ea:	f000 facc 	bl	8003686 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200001a4 	.word	0x200001a4

080030f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030fe:	f003 ff83 	bl	8007008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000095c 	.word	0x2000095c

0800310c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <SPI2_IRQHandler+0x10>)
 8003112:	f003 fb59 	bl	80067c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200004a8 	.word	0x200004a8

08003120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8003124:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003128:	f001 fde0 	bl	8004cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}

08003130 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <DMA2_Stream0_IRQHandler+0x10>)
 8003136:	f001 f9b9 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200001ec 	.word	0x200001ec

08003144 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e00a      	b.n	800316c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003156:	f3af 8000 	nop.w
 800315a:	4601      	mov	r1, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	60ba      	str	r2, [r7, #8]
 8003162:	b2ca      	uxtb	r2, r1
 8003164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	dbf0      	blt.n	8003156 <_read+0x12>
  }

  return len;
 8003174:	687b      	ldr	r3, [r7, #4]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e009      	b.n	80031a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	60ba      	str	r2, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fd8b 	bl	8001cb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	dbf1      	blt.n	8003190 <_write+0x12>
  }
  return len;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_close>:

int _close(int file)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031de:	605a      	str	r2, [r3, #4]
  return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <_isatty>:

int _isatty(int file)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <_sbrk+0x5c>)
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <_sbrk+0x60>)
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <_sbrk+0x64>)
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <_sbrk+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <_sbrk+0x64>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d207      	bcs.n	8003260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003250:	f004 fba0 	bl	8007994 <__errno>
 8003254:	4603      	mov	r3, r0
 8003256:	220c      	movs	r2, #12
 8003258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
 800325e:	e009      	b.n	8003274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <_sbrk+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <_sbrk+0x64>)
 8003270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003272:	68fb      	ldr	r3, [r7, #12]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20020000 	.word	0x20020000
 8003280:	00000400 	.word	0x00000400
 8003284:	20000910 	.word	0x20000910
 8003288:	20000af8 	.word	0x20000af8

0800328c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <SystemInit+0x20>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <SystemInit+0x20>)
 8003298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800329c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fb1a 	bl	80078f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <MX_TIM3_Init+0xa4>)
 80032d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032f2:	2303      	movs	r3, #3
 80032f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800330e:	2300      	movs	r3, #0
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	4619      	mov	r1, r3
 800331c:	480c      	ldr	r0, [pc, #48]	; (8003350 <MX_TIM3_Init+0xa0>)
 800331e:	f003 fd3f 	bl	8006da0 <HAL_TIM_Encoder_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003328:	f7fe fce0 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	; (8003350 <MX_TIM3_Init+0xa0>)
 800333a:	f004 f845 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003344:	f7fe fcd2 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3730      	adds	r7, #48	; 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000914 	.word	0x20000914
 8003354:	40000400 	.word	0x40000400

08003358 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <MX_TIM10_Init+0x40>)
 800335e:	4a0f      	ldr	r2, [pc, #60]	; (800339c <MX_TIM10_Init+0x44>)
 8003360:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <MX_TIM10_Init+0x40>)
 8003364:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003368:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <MX_TIM10_Init+0x40>)
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <MX_TIM10_Init+0x40>)
 8003372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003376:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <MX_TIM10_Init+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <MX_TIM10_Init+0x40>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003384:	4804      	ldr	r0, [pc, #16]	; (8003398 <MX_TIM10_Init+0x40>)
 8003386:	f003 fc61 	bl	8006c4c <HAL_TIM_Base_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003390:	f7fe fcac 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}
 8003398:	2000095c 	.word	0x2000095c
 800339c:	40014400 	.word	0x40014400

080033a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_TIM_Encoder_MspInit+0x84>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d12b      	bne.n	800341a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_TIM_Encoder_MspInit+0x88>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <HAL_TIM_Encoder_MspInit+0x88>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_TIM_Encoder_MspInit+0x88>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <HAL_TIM_Encoder_MspInit+0x88>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <HAL_TIM_Encoder_MspInit+0x88>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_TIM_Encoder_MspInit+0x88>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800340a:	2302      	movs	r3, #2
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003416:	f001 fab3 	bl	8004980 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800341a:	bf00      	nop
 800341c:	3728      	adds	r7, #40	; 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40000400 	.word	0x40000400
 8003428:	40023800 	.word	0x40023800
 800342c:	40020000 	.word	0x40020000

08003430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_TIM_Base_MspInit+0x48>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d115      	bne.n	800346e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_TIM_Base_MspInit+0x4c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <HAL_TIM_Base_MspInit+0x4c>)
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_TIM_Base_MspInit+0x4c>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	2100      	movs	r1, #0
 8003462:	2019      	movs	r0, #25
 8003464:	f000 fec3 	bl	80041ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003468:	2019      	movs	r0, #25
 800346a:	f000 fedc 	bl	8004226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40014400 	.word	0x40014400
 800347c:	40023800 	.word	0x40023800

08003480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003484:	480d      	ldr	r0, [pc, #52]	; (80034bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003486:	490e      	ldr	r1, [pc, #56]	; (80034c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800348c:	e002      	b.n	8003494 <LoopCopyDataInit>

0800348e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003492:	3304      	adds	r3, #4

08003494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003498:	d3f9      	bcc.n	800348e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800349c:	4c0b      	ldr	r4, [pc, #44]	; (80034cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800349e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a0:	e001      	b.n	80034a6 <LoopFillZerobss>

080034a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a4:	3204      	adds	r2, #4

080034a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a8:	d3fb      	bcc.n	80034a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034aa:	f7ff feef 	bl	800328c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ae:	f004 fa77 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b2:	f7fe fb4d 	bl	8001b50 <main>
  bx  lr    
 80034b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c0:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80034c4:	080088e4 	.word	0x080088e4
  ldr r2, =_sbss
 80034c8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80034cc:	20000af4 	.word	0x20000af4

080034d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d0:	e7fe      	b.n	80034d0 <DMA1_Stream0_IRQHandler>
	...

080034d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_Init+0x40>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_Init+0x40>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <HAL_Init+0x40>)
 80034ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_Init+0x40>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <HAL_Init+0x40>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034fc:	2003      	movs	r0, #3
 80034fe:	f000 fe6b 	bl	80041d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003502:	200f      	movs	r0, #15
 8003504:	f000 f808 	bl	8003518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003508:	f7ff fd9a 	bl	8003040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00

08003518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_InitTick+0x54>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_InitTick+0x58>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800352e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fe83 	bl	8004242 <HAL_SYSTICK_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e00e      	b.n	8003564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b0f      	cmp	r3, #15
 800354a:	d80a      	bhi.n	8003562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800354c:	2200      	movs	r2, #0
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f000 fe4b 	bl	80041ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <HAL_InitTick+0x5c>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000120 	.word	0x20000120
 8003570:	20000128 	.word	0x20000128
 8003574:	20000124 	.word	0x20000124

08003578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_IncTick+0x20>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_IncTick+0x24>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4413      	add	r3, r2
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_IncTick+0x24>)
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000128 	.word	0x20000128
 800359c:	200009a4 	.word	0x200009a4

080035a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return uwTick;
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_GetTick+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	200009a4 	.word	0x200009a4

080035b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff ffee 	bl	80035a0 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d005      	beq.n	80035de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_Delay+0x44>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035de:	bf00      	nop
 80035e0:	f7ff ffde 	bl	80035a0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d8f7      	bhi.n	80035e0 <HAL_Delay+0x28>
  {
  }
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000128 	.word	0x20000128

08003600 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e033      	b.n	800367e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd f88a 	bl	8000738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d118      	bne.n	8003670 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003646:	f023 0302 	bic.w	r3, r3, #2
 800364a:	f043 0202 	orr.w	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb68 	bl	8003d28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
 800366e:	e001      	b.n	8003674 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d049      	beq.n	8003750 <HAL_ADC_IRQHandler+0xca>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d046      	beq.n	8003750 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d12b      	bne.n	8003740 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d127      	bne.n	8003740 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003708:	2b00      	cmp	r3, #0
 800370a:	d119      	bne.n	8003740 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0220 	bic.w	r2, r2, #32
 800371a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7fd f93f 	bl	80009c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f06f 0212 	mvn.w	r2, #18
 800374e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d057      	beq.n	8003816 <HAL_ADC_IRQHandler+0x190>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d054      	beq.n	8003816 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d139      	bne.n	8003806 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d12b      	bne.n	8003806 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d124      	bne.n	8003806 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11d      	bne.n	8003806 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d119      	bne.n	8003806 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fc0c 	bl	8004024 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 020c 	mvn.w	r2, #12
 8003814:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d017      	beq.n	800385c <HAL_ADC_IRQHandler+0x1d6>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d014      	beq.n	800385c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10d      	bne.n	800385c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f925 	bl	8003a9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0201 	mvn.w	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800386a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d015      	beq.n	800389e <HAL_ADC_IRQHandler+0x218>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	f043 0202 	orr.w	r2, r3, #2
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0220 	mvn.w	r2, #32
 800388c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f90e 	bl	8003ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0220 	mvn.w	r2, #32
 800389c:	601a      	str	r2, [r3, #0]
  }
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_Start_DMA+0x1e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0ce      	b.n	8003a64 <HAL_ADC_Start_DMA+0x1bc>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d018      	beq.n	800390e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038ec:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <HAL_ADC_Start_DMA+0x1c4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <HAL_ADC_Start_DMA+0x1c8>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9a      	lsrs	r2, r3, #18
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003900:	e002      	b.n	8003908 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3b01      	subs	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f9      	bne.n	8003902 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391c:	d107      	bne.n	800392e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800392c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 8086 	bne.w	8003a4a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003968:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d106      	bne.n	800398c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f023 0206 	bic.w	r2, r3, #6
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
 800398a:	e002      	b.n	8003992 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_ADC_Start_DMA+0x1cc>)
 800399c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_ADC_Start_DMA+0x1d0>)
 80039a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <HAL_ADC_Start_DMA+0x1d4>)
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	4a33      	ldr	r2, [pc, #204]	; (8003a80 <HAL_ADC_Start_DMA+0x1d8>)
 80039b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	334c      	adds	r3, #76	; 0x4c
 80039ea:	4619      	mov	r1, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f000 fce2 	bl	80043b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d129      	bne.n	8003a62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	e020      	b.n	8003a62 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_ADC_Start_DMA+0x1dc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d11b      	bne.n	8003a62 <HAL_ADC_Start_DMA+0x1ba>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d114      	bne.n	8003a62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	e00b      	b.n	8003a62 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000120 	.word	0x20000120
 8003a70:	431bde83 	.word	0x431bde83
 8003a74:	40012300 	.word	0x40012300
 8003a78:	08003f21 	.word	0x08003f21
 8003a7c:	08003fdb 	.word	0x08003fdb
 8003a80:	08003ff7 	.word	0x08003ff7
 8003a84:	40012000 	.word	0x40012000

08003a88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1c>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e113      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x244>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	d925      	bls.n	8003b3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68d9      	ldr	r1, [r3, #12]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	3b1e      	subs	r3, #30
 8003b06:	2207      	movs	r2, #7
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	400a      	ands	r2, r1
 8003b14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68d9      	ldr	r1, [r3, #12]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	4603      	mov	r3, r0
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4403      	add	r3, r0
 8003b2e:	3b1e      	subs	r3, #30
 8003b30:	409a      	lsls	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e022      	b.n	8003b82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6919      	ldr	r1, [r3, #16]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	2207      	movs	r2, #7
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6919      	ldr	r1, [r3, #16]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4403      	add	r3, r0
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d824      	bhi.n	8003bd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	3b05      	subs	r3, #5
 8003b9c:	221f      	movs	r2, #31
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	400a      	ands	r2, r1
 8003baa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3b05      	subs	r3, #5
 8003bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd2:	e04c      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d824      	bhi.n	8003c26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3b23      	subs	r3, #35	; 0x23
 8003bee:	221f      	movs	r2, #31
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	3b23      	subs	r3, #35	; 0x23
 8003c18:	fa00 f203 	lsl.w	r2, r0, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
 8003c24:	e023      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	3b41      	subs	r3, #65	; 0x41
 8003c38:	221f      	movs	r2, #31
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	400a      	ands	r2, r1
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4618      	mov	r0, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	3b41      	subs	r3, #65	; 0x41
 8003c62:	fa00 f203 	lsl.w	r2, r0, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <HAL_ADC_ConfigChannel+0x250>)
 8003c70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <HAL_ADC_ConfigChannel+0x254>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10f      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x1d8>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b12      	cmp	r3, #18
 8003c82:	d10b      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_ADC_ConfigChannel+0x254>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d12b      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x23a>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_ADC_ConfigChannel+0x258>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <HAL_ADC_ConfigChannel+0x1f4>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b11      	cmp	r3, #17
 8003cb6:	d122      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_ADC_ConfigChannel+0x258>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d111      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_ADC_ConfigChannel+0x25c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <HAL_ADC_ConfigChannel+0x260>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0c9a      	lsrs	r2, r3, #18
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cf0:	e002      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f9      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40012300 	.word	0x40012300
 8003d18:	40012000 	.word	0x40012000
 8003d1c:	10000012 	.word	0x10000012
 8003d20:	20000120 	.word	0x20000120
 8003d24:	431bde83 	.word	0x431bde83

08003d28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d30:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <ADC_Init+0x1f0>)
 8003d32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	021a      	lsls	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <ADC_Init+0x1f4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e00f      	b.n	8003e26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0202 	bic.w	r2, r2, #2
 8003e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7e1b      	ldrb	r3, [r3, #24]
 8003e40:	005a      	lsls	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01b      	beq.n	8003e8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	035a      	lsls	r2, r3, #13
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e007      	b.n	8003e9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	051a      	lsls	r2, r3, #20
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6899      	ldr	r1, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ede:	025a      	lsls	r2, r3, #9
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	029a      	lsls	r2, r3, #10
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40012300 	.word	0x40012300
 8003f1c:	0f000001 	.word	0x0f000001

08003f20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d13c      	bne.n	8003fb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d12b      	bne.n	8003fac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d127      	bne.n	8003fac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d119      	bne.n	8003fac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0220 	bic.w	r2, r2, #32
 8003f86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f043 0201 	orr.w	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7fc fd09 	bl	80009c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fb2:	e00e      	b.n	8003fd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff fd75 	bl	8003ab0 <HAL_ADC_ErrorCallback>
}
 8003fc6:	e004      	b.n	8003fd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff fd4d 	bl	8003a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f043 0204 	orr.w	r2, r3, #4
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff fd4a 	bl	8003ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <__NVIC_SetPriorityGrouping>:
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <__NVIC_SetPriorityGrouping+0x44>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004054:	4013      	ands	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406a:	4a04      	ldr	r2, [pc, #16]	; (800407c <__NVIC_SetPriorityGrouping+0x44>)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	60d3      	str	r3, [r2, #12]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_GetPriorityGrouping>:
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <__NVIC_GetPriorityGrouping+0x18>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	f003 0307 	and.w	r3, r3, #7
}
 800408e:	4618      	mov	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <__NVIC_EnableIRQ>:
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	db0b      	blt.n	80040c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <__NVIC_EnableIRQ+0x38>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2001      	movs	r0, #1
 80040be:	fa00 f202 	lsl.w	r2, r0, r2
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000e100 	.word	0xe000e100

080040d8 <__NVIC_SetPriority>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db0a      	blt.n	8004102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	490c      	ldr	r1, [pc, #48]	; (8004124 <__NVIC_SetPriority+0x4c>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	0112      	lsls	r2, r2, #4
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	440b      	add	r3, r1
 80040fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004100:	e00a      	b.n	8004118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4908      	ldr	r1, [pc, #32]	; (8004128 <__NVIC_SetPriority+0x50>)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3b04      	subs	r3, #4
 8004110:	0112      	lsls	r2, r2, #4
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	440b      	add	r3, r1
 8004116:	761a      	strb	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000e100 	.word	0xe000e100
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <NVIC_EncodePriority>:
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	; 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f1c3 0307 	rsb	r3, r3, #7
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf28      	it	cs
 800414a:	2304      	movcs	r3, #4
 800414c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3304      	adds	r3, #4
 8004152:	2b06      	cmp	r3, #6
 8004154:	d902      	bls.n	800415c <NVIC_EncodePriority+0x30>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3b03      	subs	r3, #3
 800415a:	e000      	b.n	800415e <NVIC_EncodePriority+0x32>
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	f04f 32ff 	mov.w	r2, #4294967295
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	401a      	ands	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004174:	f04f 31ff 	mov.w	r1, #4294967295
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	43d9      	mvns	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	4313      	orrs	r3, r2
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <SysTick_Config>:
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a4:	d301      	bcc.n	80041aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80041a6:	2301      	movs	r3, #1
 80041a8:	e00f      	b.n	80041ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <SysTick_Config+0x40>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b2:	210f      	movs	r1, #15
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	f7ff ff8e 	bl	80040d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <SysTick_Config+0x40>)
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <SysTick_Config+0x40>)
 80041c4:	2207      	movs	r2, #7
 80041c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	e000e010 	.word	0xe000e010

080041d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff29 	bl	8004038 <__NVIC_SetPriorityGrouping>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004200:	f7ff ff3e 	bl	8004080 <__NVIC_GetPriorityGrouping>
 8004204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	f7ff ff8e 	bl	800412c <NVIC_EncodePriority>
 8004210:	4602      	mov	r2, r0
 8004212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff5d 	bl	80040d8 <__NVIC_SetPriority>
}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	4603      	mov	r3, r0
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ff31 	bl	800409c <__NVIC_EnableIRQ>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ffa2 	bl	8004194 <SysTick_Config>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004268:	f7ff f99a 	bl	80035a0 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e099      	b.n	80043ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004298:	e00f      	b.n	80042ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429a:	f7ff f981 	bl	80035a0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d908      	bls.n	80042ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2203      	movs	r2, #3
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e078      	b.n	80043ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e8      	bne.n	800429a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_DMA_Init+0x158>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b04      	cmp	r3, #4
 8004312:	d107      	bne.n	8004324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	4313      	orrs	r3, r2
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b04      	cmp	r3, #4
 800434c:	d117      	bne.n	800437e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fa91 	bl	8004888 <DMA_CheckFifoParam>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800437a:	2301      	movs	r3, #1
 800437c:	e016      	b.n	80043ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa48 	bl	800481c <DMA_CalcBaseAndBitshift>
 800438c:	4603      	mov	r3, r0
 800438e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	223f      	movs	r2, #63	; 0x3f
 8004396:	409a      	lsls	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	f010803f 	.word	0xf010803f

080043b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_DMA_Start_IT+0x26>
 80043da:	2302      	movs	r3, #2
 80043dc:	e040      	b.n	8004460 <HAL_DMA_Start_IT+0xa8>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d12f      	bne.n	8004452 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f9da 	bl	80047c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	223f      	movs	r2, #63	; 0x3f
 8004412:	409a      	lsls	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0216 	orr.w	r2, r2, #22
 8004426:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e005      	b.n	800445e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800445a:	2302      	movs	r3, #2
 800445c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e00c      	b.n	80044a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2205      	movs	r2, #5
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044b8:	4b8e      	ldr	r3, [pc, #568]	; (80046f4 <HAL_DMA_IRQHandler+0x248>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a8e      	ldr	r2, [pc, #568]	; (80046f8 <HAL_DMA_IRQHandler+0x24c>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	2208      	movs	r2, #8
 80044d8:	409a      	lsls	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01a      	beq.n	8004518 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	2208      	movs	r2, #8
 8004506:	409a      	lsls	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f043 0201 	orr.w	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	2201      	movs	r2, #1
 800451e:	409a      	lsls	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d012      	beq.n	800454e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	2201      	movs	r2, #1
 800453c:	409a      	lsls	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f043 0202 	orr.w	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004552:	2204      	movs	r2, #4
 8004554:	409a      	lsls	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d012      	beq.n	8004584 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	2204      	movs	r2, #4
 8004572:	409a      	lsls	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f043 0204 	orr.w	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	2210      	movs	r2, #16
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d043      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d03c      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	2210      	movs	r2, #16
 80045a8:	409a      	lsls	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d024      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
 80045da:	e01f      	b.n	800461c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
 80045ec:	e016      	b.n	800461c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0208 	bic.w	r2, r2, #8
 800460a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	2220      	movs	r2, #32
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 808f 	beq.w	800474c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8087 	beq.w	800474c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004642:	2220      	movs	r2, #32
 8004644:	409a      	lsls	r2, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b05      	cmp	r3, #5
 8004654:	d136      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0216 	bic.w	r2, r2, #22
 8004664:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004674:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_DMA_IRQHandler+0x1da>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	223f      	movs	r2, #63	; 0x3f
 800469c:	409a      	lsls	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d07e      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
        }
        return;
 80046c2:	e079      	b.n	80047b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01d      	beq.n	800470e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10d      	bne.n	80046fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d031      	beq.n	800474c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
 80046f0:	e02c      	b.n	800474c <HAL_DMA_IRQHandler+0x2a0>
 80046f2:	bf00      	nop
 80046f4:	20000120 	.word	0x20000120
 80046f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d023      	beq.n	800474c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4798      	blx	r3
 800470c:	e01e      	b.n	800474c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10f      	bne.n	800473c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0210 	bic.w	r2, r2, #16
 800472a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	2b00      	cmp	r3, #0
 8004752:	d032      	beq.n	80047ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d022      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2205      	movs	r2, #5
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	3301      	adds	r3, #1
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d307      	bcc.n	8004794 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f2      	bne.n	8004778 <HAL_DMA_IRQHandler+0x2cc>
 8004792:	e000      	b.n	8004796 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004794:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
 80047b6:	e000      	b.n	80047ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80047b8:	bf00      	nop
    }
  }
}
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d108      	bne.n	8004800 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047fe:	e007      	b.n	8004810 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	3b10      	subs	r3, #16
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <DMA_CalcBaseAndBitshift+0x64>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <DMA_CalcBaseAndBitshift+0x68>)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b03      	cmp	r3, #3
 8004848:	d909      	bls.n	800485e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	659a      	str	r2, [r3, #88]	; 0x58
 800485c:	e007      	b.n	800486e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	aaaaaaab 	.word	0xaaaaaaab
 8004884:	08008898 	.word	0x08008898

08004888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11f      	bne.n	80048e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d856      	bhi.n	8004956 <DMA_CheckFifoParam+0xce>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <DMA_CheckFifoParam+0x28>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048d3 	.word	0x080048d3
 80048b8:	080048c1 	.word	0x080048c1
 80048bc:	08004957 	.word	0x08004957
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d046      	beq.n	800495a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d0:	e043      	b.n	800495a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048da:	d140      	bne.n	800495e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e0:	e03d      	b.n	800495e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ea:	d121      	bne.n	8004930 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d837      	bhi.n	8004962 <DMA_CheckFifoParam+0xda>
 80048f2:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <DMA_CheckFifoParam+0x70>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004909 	.word	0x08004909
 80048fc:	0800490f 	.word	0x0800490f
 8004900:	08004909 	.word	0x08004909
 8004904:	08004921 	.word	0x08004921
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      break;
 800490c:	e030      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d025      	beq.n	8004966 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491e:	e022      	b.n	8004966 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004928:	d11f      	bne.n	800496a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800492e:	e01c      	b.n	800496a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d903      	bls.n	800493e <DMA_CheckFifoParam+0xb6>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d003      	beq.n	8004944 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800493c:	e018      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
      break;
 8004942:	e015      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e00b      	b.n	800496e <DMA_CheckFifoParam+0xe6>
      break;
 8004956:	bf00      	nop
 8004958:	e00a      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      break;
 800495a:	bf00      	nop
 800495c:	e008      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      break;
 800495e:	bf00      	nop
 8004960:	e006      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      break;   
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
      break;
 800496e:	bf00      	nop
    }
  } 
  
  return status; 
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	; 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e159      	b.n	8004c50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800499c:	2201      	movs	r2, #1
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	f040 8148 	bne.w	8004c4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d005      	beq.n	80049d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d130      	bne.n	8004a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d017      	beq.n	8004a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d123      	bne.n	8004ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	08da      	lsrs	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3208      	adds	r2, #8
 8004a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	220f      	movs	r2, #15
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3208      	adds	r2, #8
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0203 	and.w	r2, r3, #3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a2 	beq.w	8004c4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	4b57      	ldr	r3, [pc, #348]	; (8004c68 <HAL_GPIO_Init+0x2e8>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	4a56      	ldr	r2, [pc, #344]	; (8004c68 <HAL_GPIO_Init+0x2e8>)
 8004b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b14:	6453      	str	r3, [r2, #68]	; 0x44
 8004b16:	4b54      	ldr	r3, [pc, #336]	; (8004c68 <HAL_GPIO_Init+0x2e8>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b22:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <HAL_GPIO_Init+0x2ec>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a49      	ldr	r2, [pc, #292]	; (8004c70 <HAL_GPIO_Init+0x2f0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x202>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a48      	ldr	r2, [pc, #288]	; (8004c74 <HAL_GPIO_Init+0x2f4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x1fe>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a47      	ldr	r2, [pc, #284]	; (8004c78 <HAL_GPIO_Init+0x2f8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x1fa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a46      	ldr	r2, [pc, #280]	; (8004c7c <HAL_GPIO_Init+0x2fc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x1f6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a45      	ldr	r2, [pc, #276]	; (8004c80 <HAL_GPIO_Init+0x300>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x1f2>
 8004b6e:	2304      	movs	r3, #4
 8004b70:	e008      	b.n	8004b84 <HAL_GPIO_Init+0x204>
 8004b72:	2307      	movs	r3, #7
 8004b74:	e006      	b.n	8004b84 <HAL_GPIO_Init+0x204>
 8004b76:	2303      	movs	r3, #3
 8004b78:	e004      	b.n	8004b84 <HAL_GPIO_Init+0x204>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e002      	b.n	8004b84 <HAL_GPIO_Init+0x204>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_GPIO_Init+0x204>
 8004b82:	2300      	movs	r3, #0
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	f002 0203 	and.w	r2, r2, #3
 8004b8a:	0092      	lsls	r2, r2, #2
 8004b8c:	4093      	lsls	r3, r2
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b94:	4935      	ldr	r1, [pc, #212]	; (8004c6c <HAL_GPIO_Init+0x2ec>)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bc6:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bf0:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bf6:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1a:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c20:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c44:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <HAL_GPIO_Init+0x304>)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	f67f aea2 	bls.w	800499c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3724      	adds	r7, #36	; 0x24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	40013800 	.word	0x40013800
 8004c70:	40020000 	.word	0x40020000
 8004c74:	40020400 	.word	0x40020400
 8004c78:	40020800 	.word	0x40020800
 8004c7c:	40020c00 	.word	0x40020c00
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40013c00 	.word	0x40013c00

08004c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
 8004ca4:	e001      	b.n	8004caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cc8:	787b      	ldrb	r3, [r7, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cd4:	e003      	b.n	8004cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	041a      	lsls	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	619a      	str	r2, [r3, #24]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d02:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fc ffdf 	bl	8001cce <HAL_GPIO_EXTI_Callback>
  }
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40013c00 	.word	0x40013c00

08004d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e12b      	b.n	8004f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fbca 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d80:	f001 f896 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8004d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4a81      	ldr	r2, [pc, #516]	; (8004f90 <HAL_I2C_Init+0x274>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d807      	bhi.n	8004da0 <HAL_I2C_Init+0x84>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a80      	ldr	r2, [pc, #512]	; (8004f94 <HAL_I2C_Init+0x278>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	bf94      	ite	ls
 8004d98:	2301      	movls	r3, #1
 8004d9a:	2300      	movhi	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	e006      	b.n	8004dae <HAL_I2C_Init+0x92>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a7d      	ldr	r2, [pc, #500]	; (8004f98 <HAL_I2C_Init+0x27c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	bf94      	ite	ls
 8004da8:	2301      	movls	r3, #1
 8004daa:	2300      	movhi	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0e7      	b.n	8004f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a78      	ldr	r2, [pc, #480]	; (8004f9c <HAL_I2C_Init+0x280>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	0c9b      	lsrs	r3, r3, #18
 8004dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a6a      	ldr	r2, [pc, #424]	; (8004f90 <HAL_I2C_Init+0x274>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d802      	bhi.n	8004df0 <HAL_I2C_Init+0xd4>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3301      	adds	r3, #1
 8004dee:	e009      	b.n	8004e04 <HAL_I2C_Init+0xe8>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	4a69      	ldr	r2, [pc, #420]	; (8004fa0 <HAL_I2C_Init+0x284>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	3301      	adds	r3, #1
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	495c      	ldr	r1, [pc, #368]	; (8004f90 <HAL_I2C_Init+0x274>)
 8004e20:	428b      	cmp	r3, r1
 8004e22:	d819      	bhi.n	8004e58 <HAL_I2C_Init+0x13c>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e59      	subs	r1, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e38:	400b      	ands	r3, r1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_I2C_Init+0x138>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1e59      	subs	r1, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e52:	e051      	b.n	8004ef8 <HAL_I2C_Init+0x1dc>
 8004e54:	2304      	movs	r3, #4
 8004e56:	e04f      	b.n	8004ef8 <HAL_I2C_Init+0x1dc>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d111      	bne.n	8004e84 <HAL_I2C_Init+0x168>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1e58      	subs	r0, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6859      	ldr	r1, [r3, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	440b      	add	r3, r1
 8004e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e72:	3301      	adds	r3, #1
 8004e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e012      	b.n	8004eaa <HAL_I2C_Init+0x18e>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1e58      	subs	r0, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	0099      	lsls	r1, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_I2C_Init+0x196>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e022      	b.n	8004ef8 <HAL_I2C_Init+0x1dc>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_I2C_Init+0x1bc>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1e58      	subs	r0, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	440b      	add	r3, r1
 8004ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	e00f      	b.n	8004ef8 <HAL_I2C_Init+0x1dc>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1e58      	subs	r0, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	0099      	lsls	r1, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	6809      	ldr	r1, [r1, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6911      	ldr	r1, [r2, #16]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	4311      	orrs	r1, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	000186a0 	.word	0x000186a0
 8004f94:	001e847f 	.word	0x001e847f
 8004f98:	003d08ff 	.word	0x003d08ff
 8004f9c:	431bde83 	.word	0x431bde83
 8004fa0:	10624dd3 	.word	0x10624dd3

08004fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fbe:	f7fe faef 	bl	80035a0 <HAL_GetTick>
 8004fc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	f040 80d9 	bne.w	8005184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2319      	movs	r3, #25
 8004fd8:	2201      	movs	r2, #1
 8004fda:	496d      	ldr	r1, [pc, #436]	; (8005190 <HAL_I2C_Mem_Write+0x1ec>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f971 	bl	80052c4 <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e0cc      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Mem_Write+0x56>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0c5      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d007      	beq.n	8005020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2221      	movs	r2, #33	; 0x21
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a4d      	ldr	r2, [pc, #308]	; (8005194 <HAL_I2C_Mem_Write+0x1f0>)
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005062:	88f8      	ldrh	r0, [r7, #6]
 8005064:	893a      	ldrh	r2, [r7, #8]
 8005066:	8979      	ldrh	r1, [r7, #10]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f890 	bl	8005198 <I2C_RequestMemoryWrite>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d052      	beq.n	8005124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e081      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f9f2 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e06b      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d11b      	bne.n	8005124 <HAL_I2C_Mem_Write+0x180>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d017      	beq.n	8005124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1aa      	bne.n	8005082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f9de 	bl	80054f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	2b04      	cmp	r3, #4
 8005142:	d107      	bne.n	8005154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e016      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	00100002 	.word	0x00100002
 8005194:	ffff0000 	.word	0xffff0000

08005198 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	817b      	strh	r3, [r7, #10]
 80051aa:	460b      	mov	r3, r1
 80051ac:	813b      	strh	r3, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f878 	bl	80052c4 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e8:	d103      	bne.n	80051f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e05f      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051f6:	897b      	ldrh	r3, [r7, #10]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	492d      	ldr	r1, [pc, #180]	; (80052c0 <I2C_RequestMemoryWrite+0x128>)
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f8b0 	bl	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e04c      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f91a 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b04      	cmp	r3, #4
 8005248:	d107      	bne.n	800525a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02b      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	611a      	str	r2, [r3, #16]
 800526e:	e021      	b.n	80052b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005270:	893b      	ldrh	r3, [r7, #8]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	b29b      	uxth	r3, r3
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f8f4 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e005      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052aa:	893b      	ldrh	r3, [r7, #8]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	00010002 	.word	0x00010002

080052c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d4:	e025      	b.n	8005322 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d021      	beq.n	8005322 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fe f95f 	bl	80035a0 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d116      	bne.n	8005322 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e023      	b.n	800536a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10d      	bne.n	8005348 <I2C_WaitOnFlagUntilTimeout+0x84>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	e00c      	b.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	43da      	mvns	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	429a      	cmp	r2, r3
 8005366:	d0b6      	beq.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005380:	e051      	b.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d123      	bne.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0204 	orr.w	r2, r3, #4
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e046      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d021      	beq.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe f8dd 	bl	80035a0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e020      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10c      	bne.n	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e00b      	b.n	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	43da      	mvns	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d18d      	bne.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547c:	e02d      	b.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f878 	bl	8005574 <I2C_IsAcknowledgeFailed>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e02d      	b.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d021      	beq.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fe f883 	bl	80035a0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d116      	bne.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e007      	b.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b80      	cmp	r3, #128	; 0x80
 80054e6:	d1ca      	bne.n	800547e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054fe:	e02d      	b.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f837 	bl	8005574 <I2C_IsAcknowledgeFailed>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e02d      	b.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d021      	beq.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005518:	f7fe f842 	bl	80035a0 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d302      	bcc.n	800552e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d116      	bne.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e007      	b.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d1ca      	bne.n	8005500 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558a:	d11b      	bne.n	80055c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005594:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f043 0204 	orr.w	r2, r3, #4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e267      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d075      	beq.n	80056de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055f2:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d00c      	beq.n	8005618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fe:	4b85      	ldr	r3, [pc, #532]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005606:	2b08      	cmp	r3, #8
 8005608:	d112      	bne.n	8005630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800560a:	4b82      	ldr	r3, [pc, #520]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005616:	d10b      	bne.n	8005630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005618:	4b7e      	ldr	r3, [pc, #504]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05b      	beq.n	80056dc <HAL_RCC_OscConfig+0x108>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d157      	bne.n	80056dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e242      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005638:	d106      	bne.n	8005648 <HAL_RCC_OscConfig+0x74>
 800563a:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a75      	ldr	r2, [pc, #468]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e01d      	b.n	8005684 <HAL_RCC_OscConfig+0xb0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005650:	d10c      	bne.n	800566c <HAL_RCC_OscConfig+0x98>
 8005652:	4b70      	ldr	r3, [pc, #448]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6f      	ldr	r2, [pc, #444]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	4b6d      	ldr	r3, [pc, #436]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6c      	ldr	r2, [pc, #432]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e00b      	b.n	8005684 <HAL_RCC_OscConfig+0xb0>
 800566c:	4b69      	ldr	r3, [pc, #420]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a68      	ldr	r2, [pc, #416]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	4b66      	ldr	r3, [pc, #408]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a65      	ldr	r2, [pc, #404]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 800567e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d013      	beq.n	80056b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568c:	f7fd ff88 	bl	80035a0 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005694:	f7fd ff84 	bl	80035a0 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	; 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e207      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a6:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0xc0>
 80056b2:	e014      	b.n	80056de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fd ff74 	bl	80035a0 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056bc:	f7fd ff70 	bl	80035a0 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b64      	cmp	r3, #100	; 0x64
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e1f3      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ce:	4b51      	ldr	r3, [pc, #324]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0xe8>
 80056da:	e000      	b.n	80056de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d063      	beq.n	80057b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ea:	4b4a      	ldr	r3, [pc, #296]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d11c      	bne.n	800573c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005702:	4b44      	ldr	r3, [pc, #272]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d116      	bne.n	800573c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570e:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_RCC_OscConfig+0x152>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d001      	beq.n	8005726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e1c7      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005726:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4937      	ldr	r1, [pc, #220]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005736:	4313      	orrs	r3, r2
 8005738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573a:	e03a      	b.n	80057b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d020      	beq.n	8005786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005744:	4b34      	ldr	r3, [pc, #208]	; (8005818 <HAL_RCC_OscConfig+0x244>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574a:	f7fd ff29 	bl	80035a0 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005752:	f7fd ff25 	bl	80035a0 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e1a8      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f0      	beq.n	8005752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005770:	4b28      	ldr	r3, [pc, #160]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4925      	ldr	r1, [pc, #148]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 8005780:	4313      	orrs	r3, r2
 8005782:	600b      	str	r3, [r1, #0]
 8005784:	e015      	b.n	80057b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <HAL_RCC_OscConfig+0x244>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fd ff08 	bl	80035a0 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005794:	f7fd ff04 	bl	80035a0 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e187      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a6:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f0      	bne.n	8005794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d036      	beq.n	800582c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <HAL_RCC_OscConfig+0x248>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057cc:	f7fd fee8 	bl	80035a0 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d4:	f7fd fee4 	bl	80035a0 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e167      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCC_OscConfig+0x240>)
 80057e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x200>
 80057f2:	e01b      	b.n	800582c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_RCC_OscConfig+0x248>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fa:	f7fd fed1 	bl	80035a0 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005800:	e00e      	b.n	8005820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005802:	f7fd fecd 	bl	80035a0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d907      	bls.n	8005820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e150      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
 8005814:	40023800 	.word	0x40023800
 8005818:	42470000 	.word	0x42470000
 800581c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005820:	4b88      	ldr	r3, [pc, #544]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ea      	bne.n	8005802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8097 	beq.w	8005968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583e:	4b81      	ldr	r3, [pc, #516]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10f      	bne.n	800586a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584a:	2300      	movs	r3, #0
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	4b7d      	ldr	r3, [pc, #500]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	4a7c      	ldr	r2, [pc, #496]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005858:	6413      	str	r3, [r2, #64]	; 0x40
 800585a:	4b7a      	ldr	r3, [pc, #488]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586a:	4b77      	ldr	r3, [pc, #476]	; (8005a48 <HAL_RCC_OscConfig+0x474>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d118      	bne.n	80058a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005876:	4b74      	ldr	r3, [pc, #464]	; (8005a48 <HAL_RCC_OscConfig+0x474>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a73      	ldr	r2, [pc, #460]	; (8005a48 <HAL_RCC_OscConfig+0x474>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005882:	f7fd fe8d 	bl	80035a0 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fd fe89 	bl	80035a0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e10c      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589c:	4b6a      	ldr	r3, [pc, #424]	; (8005a48 <HAL_RCC_OscConfig+0x474>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d106      	bne.n	80058be <HAL_RCC_OscConfig+0x2ea>
 80058b0:	4b64      	ldr	r3, [pc, #400]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	4a63      	ldr	r2, [pc, #396]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	6713      	str	r3, [r2, #112]	; 0x70
 80058bc:	e01c      	b.n	80058f8 <HAL_RCC_OscConfig+0x324>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x30c>
 80058c6:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	4a5e      	ldr	r2, [pc, #376]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058cc:	f043 0304 	orr.w	r3, r3, #4
 80058d0:	6713      	str	r3, [r2, #112]	; 0x70
 80058d2:	4b5c      	ldr	r3, [pc, #368]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	4a5b      	ldr	r2, [pc, #364]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058d8:	f043 0301 	orr.w	r3, r3, #1
 80058dc:	6713      	str	r3, [r2, #112]	; 0x70
 80058de:	e00b      	b.n	80058f8 <HAL_RCC_OscConfig+0x324>
 80058e0:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	4a57      	ldr	r2, [pc, #348]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
 80058ec:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	4a54      	ldr	r2, [pc, #336]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80058f2:	f023 0304 	bic.w	r3, r3, #4
 80058f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d015      	beq.n	800592c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fd fe4e 	bl	80035a0 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005906:	e00a      	b.n	800591e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005908:	f7fd fe4a 	bl	80035a0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e0cb      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591e:	4b49      	ldr	r3, [pc, #292]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ee      	beq.n	8005908 <HAL_RCC_OscConfig+0x334>
 800592a:	e014      	b.n	8005956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800592c:	f7fd fe38 	bl	80035a0 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005932:	e00a      	b.n	800594a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005934:	f7fd fe34 	bl	80035a0 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0b5      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594a:	4b3e      	ldr	r3, [pc, #248]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ee      	bne.n	8005934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d105      	bne.n	8005968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595c:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	4a38      	ldr	r2, [pc, #224]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80a1 	beq.w	8005ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005972:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b08      	cmp	r3, #8
 800597c:	d05c      	beq.n	8005a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d141      	bne.n	8005a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005986:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <HAL_RCC_OscConfig+0x478>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598c:	f7fd fe08 	bl	80035a0 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005994:	f7fd fe04 	bl	80035a0 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e087      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	019b      	lsls	r3, r3, #6
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	3b01      	subs	r3, #1
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	061b      	lsls	r3, r3, #24
 80059d6:	491b      	ldr	r1, [pc, #108]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_RCC_OscConfig+0x478>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e2:	f7fd fddd 	bl	80035a0 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fd fdd9 	bl	80035a0 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e05c      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0x416>
 8005a08:	e054      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0a:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <HAL_RCC_OscConfig+0x478>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fd fdc6 	bl	80035a0 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fd fdc2 	bl	80035a0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e045      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x444>
 8005a36:	e03d      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e038      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40007000 	.word	0x40007000
 8005a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <HAL_RCC_OscConfig+0x4ec>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d028      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d121      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d11a      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a80:	4013      	ands	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d111      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800

08005ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0cc      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d90c      	bls.n	8005b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae6:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aee:	4b63      	ldr	r3, [pc, #396]	; (8005c7c <HAL_RCC_ClockConfig+0x1b8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0b8      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d020      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b18:	4b59      	ldr	r3, [pc, #356]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a58      	ldr	r2, [pc, #352]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b30:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4a52      	ldr	r2, [pc, #328]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b3c:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	494d      	ldr	r1, [pc, #308]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d044      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d107      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b62:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d119      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e07f      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d107      	bne.n	8005b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b82:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e06f      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b92:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e067      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ba2:	4b37      	ldr	r3, [pc, #220]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 0203 	bic.w	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4934      	ldr	r1, [pc, #208]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bb4:	f7fd fcf4 	bl	80035a0 <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	e00a      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bbc:	f7fd fcf0 	bl	80035a0 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e04f      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd2:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 020c 	and.w	r2, r3, #12
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d1eb      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <HAL_RCC_ClockConfig+0x1b8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d20c      	bcs.n	8005c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <HAL_RCC_ClockConfig+0x1b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e032      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c18:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4916      	ldr	r1, [pc, #88]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c36:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	490e      	ldr	r1, [pc, #56]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c4a:	f000 f821 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	490a      	ldr	r1, [pc, #40]	; (8005c84 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	5ccb      	ldrb	r3, [r1, r3]
 8005c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c62:	4a09      	ldr	r2, [pc, #36]	; (8005c88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_RCC_ClockConfig+0x1c8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fd fc54 	bl	8003518 <HAL_InitTick>

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40023c00 	.word	0x40023c00
 8005c80:	40023800 	.word	0x40023800
 8005c84:	08008880 	.word	0x08008880
 8005c88:	20000120 	.word	0x20000120
 8005c8c:	20000124 	.word	0x20000124

08005c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c94:	b094      	sub	sp, #80	; 0x50
 8005c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ca8:	4b79      	ldr	r3, [pc, #484]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 030c 	and.w	r3, r3, #12
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	f200 80e1 	bhi.w	8005e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d003      	beq.n	8005cca <HAL_RCC_GetSysClockFreq+0x3a>
 8005cc2:	e0db      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cc4:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005cc8:	e0db      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cca:	4b72      	ldr	r3, [pc, #456]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cce:	e0d8      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cd0:	4b6f      	ldr	r3, [pc, #444]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cda:	4b6d      	ldr	r3, [pc, #436]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d063      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce6:	4b6a      	ldr	r3, [pc, #424]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	099b      	lsrs	r3, r3, #6
 8005cec:	2200      	movs	r2, #0
 8005cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d02:	4622      	mov	r2, r4
 8005d04:	462b      	mov	r3, r5
 8005d06:	f04f 0000 	mov.w	r0, #0
 8005d0a:	f04f 0100 	mov.w	r1, #0
 8005d0e:	0159      	lsls	r1, r3, #5
 8005d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d14:	0150      	lsls	r0, r2, #5
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	1a51      	subs	r1, r2, r1
 8005d1e:	6139      	str	r1, [r7, #16]
 8005d20:	4629      	mov	r1, r5
 8005d22:	eb63 0301 	sbc.w	r3, r3, r1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d34:	4659      	mov	r1, fp
 8005d36:	018b      	lsls	r3, r1, #6
 8005d38:	4651      	mov	r1, sl
 8005d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d3e:	4651      	mov	r1, sl
 8005d40:	018a      	lsls	r2, r1, #6
 8005d42:	4651      	mov	r1, sl
 8005d44:	ebb2 0801 	subs.w	r8, r2, r1
 8005d48:	4659      	mov	r1, fp
 8005d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d62:	4690      	mov	r8, r2
 8005d64:	4699      	mov	r9, r3
 8005d66:	4623      	mov	r3, r4
 8005d68:	eb18 0303 	adds.w	r3, r8, r3
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	462b      	mov	r3, r5
 8005d70:	eb49 0303 	adc.w	r3, r9, r3
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d82:	4629      	mov	r1, r5
 8005d84:	028b      	lsls	r3, r1, #10
 8005d86:	4621      	mov	r1, r4
 8005d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	028a      	lsls	r2, r1, #10
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d96:	2200      	movs	r2, #0
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005da0:	f7fa fa76 	bl	8000290 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dac:	e058      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dae:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	099b      	lsrs	r3, r3, #6
 8005db4:	2200      	movs	r2, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	4611      	mov	r1, r2
 8005dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dbe:	623b      	str	r3, [r7, #32]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	f04f 0000 	mov.w	r0, #0
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	0159      	lsls	r1, r3, #5
 8005dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dda:	0150      	lsls	r0, r2, #5
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4641      	mov	r1, r8
 8005de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005de6:	4649      	mov	r1, r9
 8005de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e00:	ebb2 040a 	subs.w	r4, r2, sl
 8005e04:	eb63 050b 	sbc.w	r5, r3, fp
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	00eb      	lsls	r3, r5, #3
 8005e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e16:	00e2      	lsls	r2, r4, #3
 8005e18:	4614      	mov	r4, r2
 8005e1a:	461d      	mov	r5, r3
 8005e1c:	4643      	mov	r3, r8
 8005e1e:	18e3      	adds	r3, r4, r3
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	464b      	mov	r3, r9
 8005e24:	eb45 0303 	adc.w	r3, r5, r3
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e36:	4629      	mov	r1, r5
 8005e38:	028b      	lsls	r3, r1, #10
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e40:	4621      	mov	r1, r4
 8005e42:	028a      	lsls	r2, r1, #10
 8005e44:	4610      	mov	r0, r2
 8005e46:	4619      	mov	r1, r3
 8005e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	61fa      	str	r2, [r7, #28]
 8005e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e54:	f7fa fa1c 	bl	8000290 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e7a:	e002      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3750      	adds	r7, #80	; 0x50
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800
 8005e94:	00f42400 	.word	0x00f42400

08005e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e9c:	4b03      	ldr	r3, [pc, #12]	; (8005eac <HAL_RCC_GetHCLKFreq+0x14>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000120 	.word	0x20000120

08005eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005eb4:	f7ff fff0 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	0a9b      	lsrs	r3, r3, #10
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	4903      	ldr	r1, [pc, #12]	; (8005ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	08008890 	.word	0x08008890

08005ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e07b      	b.n	8005fe2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efa:	d009      	beq.n	8005f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	61da      	str	r2, [r3, #28]
 8005f02:	e005      	b.n	8005f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fc fdf0 	bl	8002b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	ea42 0103 	orr.w	r1, r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	f003 0104 	and.w	r1, r3, #4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	f003 0210 	and.w	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	603b      	str	r3, [r7, #0]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_SPI_Transmit+0x22>
 8006008:	2302      	movs	r3, #2
 800600a:	e126      	b.n	800625a <HAL_SPI_Transmit+0x270>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006014:	f7fd fac4 	bl	80035a0 <HAL_GetTick>
 8006018:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d002      	beq.n	8006030 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800602a:	2302      	movs	r3, #2
 800602c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800602e:	e10b      	b.n	8006248 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_SPI_Transmit+0x52>
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006040:	e102      	b.n	8006248 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2203      	movs	r2, #3
 8006046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	d10f      	bne.n	80060aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006098:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d007      	beq.n	80060c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d0:	d14b      	bne.n	800616a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_SPI_Transmit+0xf6>
 80060da:	8afb      	ldrh	r3, [r7, #22]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d13e      	bne.n	800615e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006104:	e02b      	b.n	800615e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b02      	cmp	r3, #2
 8006112:	d112      	bne.n	800613a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	881a      	ldrh	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	86da      	strh	r2, [r3, #54]	; 0x36
 8006138:	e011      	b.n	800615e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613a:	f7fd fa31 	bl	80035a0 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d803      	bhi.n	8006152 <HAL_SPI_Transmit+0x168>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d102      	bne.n	8006158 <HAL_SPI_Transmit+0x16e>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800615c:	e074      	b.n	8006248 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ce      	bne.n	8006106 <HAL_SPI_Transmit+0x11c>
 8006168:	e04c      	b.n	8006204 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_SPI_Transmit+0x18e>
 8006172:	8afb      	ldrh	r3, [r7, #22]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d140      	bne.n	80061fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800619e:	e02c      	b.n	80061fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d113      	bne.n	80061d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80061d4:	e011      	b.n	80061fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d6:	f7fd f9e3 	bl	80035a0 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d803      	bhi.n	80061ee <HAL_SPI_Transmit+0x204>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d102      	bne.n	80061f4 <HAL_SPI_Transmit+0x20a>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061f8:	e026      	b.n	8006248 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1cd      	bne.n	80061a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fcdd 	bl	8006bc8 <SPI_EndRxTxTransaction>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e000      	b.n	8006248 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006246:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006258:	7ffb      	ldrb	r3, [r7, #31]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b088      	sub	sp, #32
 8006266:	af02      	add	r7, sp, #8
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627e:	d112      	bne.n	80062a6 <HAL_SPI_Receive+0x44>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10e      	bne.n	80062a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2204      	movs	r2, #4
 800628c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f8f1 	bl	8006484 <HAL_SPI_TransmitReceive>
 80062a2:	4603      	mov	r3, r0
 80062a4:	e0ea      	b.n	800647c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_SPI_Receive+0x52>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e0e3      	b.n	800647c <HAL_SPI_Receive+0x21a>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062bc:	f7fd f970 	bl	80035a0 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d002      	beq.n	80062d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
 80062d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062d2:	e0ca      	b.n	800646a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_SPI_Receive+0x7e>
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062e4:	e0c1      	b.n	800646a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2204      	movs	r2, #4
 80062ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	88fa      	ldrh	r2, [r7, #6]
 80062fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	d10f      	bne.n	800634e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800633c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800634c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d007      	beq.n	800636c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d162      	bne.n	800643a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006374:	e02e      	b.n	80063d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d115      	bne.n	80063b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f103 020c 	add.w	r2, r3, #12
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ae:	e011      	b.n	80063d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b0:	f7fd f8f6 	bl	80035a0 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d803      	bhi.n	80063c8 <HAL_SPI_Receive+0x166>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	d102      	bne.n	80063ce <HAL_SPI_Receive+0x16c>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063d2:	e04a      	b.n	800646a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1cb      	bne.n	8006376 <HAL_SPI_Receive+0x114>
 80063de:	e031      	b.n	8006444 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d113      	bne.n	8006416 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	b292      	uxth	r2, r2
 80063fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	1c9a      	adds	r2, r3, #2
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006414:	e011      	b.n	800643a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006416:	f7fd f8c3 	bl	80035a0 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d803      	bhi.n	800642e <HAL_SPI_Receive+0x1cc>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d102      	bne.n	8006434 <HAL_SPI_Receive+0x1d2>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006438:	e017      	b.n	800646a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1cd      	bne.n	80063e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fb57 	bl	8006afc <SPI_EndRxTransaction>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
 8006466:	e000      	b.n	800646a <HAL_SPI_Receive+0x208>
  }

error :
 8006468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800647a:	7dfb      	ldrb	r3, [r7, #23]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	; 0x30
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006492:	2301      	movs	r3, #1
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x26>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e18a      	b.n	80067c0 <HAL_SPI_TransmitReceive+0x33c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b2:	f7fd f875 	bl	80035a0 <HAL_GetTick>
 80064b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064c8:	887b      	ldrh	r3, [r7, #2]
 80064ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d00f      	beq.n	80064f4 <HAL_SPI_TransmitReceive+0x70>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064da:	d107      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x68>
 80064e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d003      	beq.n	80064f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064f2:	e15b      	b.n	80067ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_SPI_TransmitReceive+0x82>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_SPI_TransmitReceive+0x82>
 8006500:	887b      	ldrh	r3, [r7, #2]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800650c:	e14e      	b.n	80067ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b04      	cmp	r3, #4
 8006518:	d003      	beq.n	8006522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2205      	movs	r2, #5
 800651e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	887a      	ldrh	r2, [r7, #2]
 8006532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	887a      	ldrh	r2, [r7, #2]
 8006538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	887a      	ldrh	r2, [r7, #2]
 8006544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d007      	beq.n	8006576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657e:	d178      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_SPI_TransmitReceive+0x10a>
 8006588:	8b7b      	ldrh	r3, [r7, #26]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d166      	bne.n	800665c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b2:	e053      	b.n	800665c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d11b      	bne.n	80065fa <HAL_SPI_TransmitReceive+0x176>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d016      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x176>
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d113      	bne.n	80065fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d119      	bne.n	800663c <HAL_SPI_TransmitReceive+0x1b8>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d014      	beq.n	800663c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	b292      	uxth	r2, r2
 800661e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	1c9a      	adds	r2, r3, #2
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006638:	2301      	movs	r3, #1
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800663c:	f7fc ffb0 	bl	80035a0 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006648:	429a      	cmp	r2, r3
 800664a:	d807      	bhi.n	800665c <HAL_SPI_TransmitReceive+0x1d8>
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d003      	beq.n	800665c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800665a:	e0a7      	b.n	80067ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1a6      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x130>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1a1      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x130>
 8006670:	e07c      	b.n	800676c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_SPI_TransmitReceive+0x1fc>
 800667a:	8b7b      	ldrh	r3, [r7, #26]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d16b      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a6:	e057      	b.n	8006758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d11c      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x26c>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d017      	beq.n	80066f0 <HAL_SPI_TransmitReceive+0x26c>
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d114      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d119      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x2ae>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d014      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800672e:	2301      	movs	r3, #1
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006732:	f7fc ff35 	bl	80035a0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800673e:	429a      	cmp	r2, r3
 8006740:	d803      	bhi.n	800674a <HAL_SPI_TransmitReceive+0x2c6>
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d102      	bne.n	8006750 <HAL_SPI_TransmitReceive+0x2cc>
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006756:	e029      	b.n	80067ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1a2      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x224>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d19d      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800676c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fa29 	bl	8006bc8 <SPI_EndRxTxTransaction>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d006      	beq.n	800678a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006788:	e010      	b.n	80067ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	e000      	b.n	80067ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3730      	adds	r7, #48	; 0x30
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10e      	bne.n	8006808 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
    return;
 8006806:	e0ce      	b.n	80069a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_SPI_IRQHandler+0x5e>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
    return;
 8006824:	e0bf      	b.n	80069a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <HAL_SPI_IRQHandler+0x7e>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80b0 	beq.w	80069a6 <HAL_SPI_IRQHandler+0x1de>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80aa 	beq.w	80069a6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d023      	beq.n	80068a4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b03      	cmp	r3, #3
 8006866:	d011      	beq.n	800688c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	f043 0204 	orr.w	r2, r3, #4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	e00b      	b.n	80068a4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	693b      	ldr	r3, [r7, #16]
        return;
 80068a2:	e080      	b.n	80069a6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d014      	beq.n	80068d8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b2:	f043 0201 	orr.w	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f043 0208 	orr.w	r2, r3, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006900:	2b00      	cmp	r3, #0
 8006902:	d04f      	beq.n	80069a4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006912:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <HAL_SPI_IRQHandler+0x168>
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d034      	beq.n	800699a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0203 	bic.w	r2, r2, #3
 800693e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694c:	4a17      	ldr	r2, [pc, #92]	; (80069ac <HAL_SPI_IRQHandler+0x1e4>)
 800694e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006954:	4618      	mov	r0, r3
 8006956:	f7fd fd87 	bl	8004468 <HAL_DMA_Abort_IT>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006970:	2b00      	cmp	r3, #0
 8006972:	d016      	beq.n	80069a2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006978:	4a0c      	ldr	r2, [pc, #48]	; (80069ac <HAL_SPI_IRQHandler+0x1e4>)
 800697a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006980:	4618      	mov	r0, r3
 8006982:	f7fd fd71 	bl	8004468 <HAL_DMA_Abort_IT>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006998:	e003      	b.n	80069a2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f808 	bl	80069b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069a0:	e000      	b.n	80069a4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80069a2:	bf00      	nop
    return;
 80069a4:	bf00      	nop
  }
}
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	080069c5 	.word	0x080069c5

080069b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff ffe6 	bl	80069b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069fc:	f7fc fdd0 	bl	80035a0 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4413      	add	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a0c:	f7fc fdc8 	bl	80035a0 <HAL_GetTick>
 8006a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a12:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	015b      	lsls	r3, r3, #5
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a22:	e054      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d050      	beq.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a2c:	f7fc fdb8 	bl	80035a0 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d902      	bls.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d13d      	bne.n	8006abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5a:	d111      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a64:	d004      	beq.n	8006a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6e:	d107      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d10f      	bne.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e017      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	bf0c      	ite	eq
 8006ade:	2301      	moveq	r3, #1
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d19b      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000120 	.word	0x20000120

08006afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b10:	d111      	bne.n	8006b36 <SPI_EndRxTransaction+0x3a>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1a:	d004      	beq.n	8006b26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b24:	d107      	bne.n	8006b36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3e:	d12a      	bne.n	8006b96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b48:	d012      	beq.n	8006b70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2180      	movs	r1, #128	; 0x80
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff ff49 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02d      	beq.n	8006bbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b64:	f043 0220 	orr.w	r2, r3, #32
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e026      	b.n	8006bbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	2101      	movs	r1, #1
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff ff36 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01a      	beq.n	8006bbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e013      	b.n	8006bbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff ff23 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e000      	b.n	8006bbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <SPI_EndRxTxTransaction+0x7c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <SPI_EndRxTxTransaction+0x80>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0d5b      	lsrs	r3, r3, #21
 8006be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf2:	d112      	bne.n	8006c1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fef4 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d016      	beq.n	8006c38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e00f      	b.n	8006c3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d0f2      	beq.n	8006c1a <SPI_EndRxTxTransaction+0x52>
 8006c34:	e000      	b.n	8006c38 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c36:	bf00      	nop
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000120 	.word	0x20000120
 8006c48:	165e9f81 	.word	0x165e9f81

08006c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e041      	b.n	8006ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fc fbdc 	bl	8003430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 faf6 	bl	800727c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d001      	beq.n	8006d04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e03c      	b.n	8006d7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <HAL_TIM_Base_Start+0xa0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d013      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1a      	ldr	r2, [pc, #104]	; (8006d90 <HAL_TIM_Base_Start+0xa4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <HAL_TIM_Base_Start+0xa8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <HAL_TIM_Base_Start+0xac>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <HAL_TIM_Base_Start+0xb0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d111      	bne.n	8006d6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b06      	cmp	r3, #6
 8006d58:	d010      	beq.n	8006d7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	e007      	b.n	8006d7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40014000 	.word	0x40014000

08006da0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e097      	b.n	8006ee4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fc fae9 	bl	80033a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de4:	f023 0307 	bic.w	r3, r3, #7
 8006de8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f000 fa41 	bl	800727c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	4313      	orrs	r3, r2
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e40:	f023 030c 	bic.w	r3, r3, #12
 8006e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	011a      	lsls	r2, r3, #4
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	031b      	lsls	r3, r3, #12
 8006e70:	4313      	orrs	r3, r2
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	4313      	orrs	r3, r2
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d110      	bne.n	8006f3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d102      	bne.n	8006f28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f22:	7b7b      	ldrb	r3, [r7, #13]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e069      	b.n	8007000 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f3c:	e031      	b.n	8006fa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d110      	bne.n	8006f66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d102      	bne.n	8006f50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f4a:	7b3b      	ldrb	r3, [r7, #12]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d001      	beq.n	8006f54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e055      	b.n	8007000 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f64:	e01d      	b.n	8006fa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d108      	bne.n	8006f7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f72:	7b7b      	ldrb	r3, [r7, #13]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d102      	bne.n	8006f7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f78:	7b3b      	ldrb	r3, [r7, #12]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d001      	beq.n	8006f82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e03e      	b.n	8007000 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <HAL_TIM_Encoder_Start+0xc4>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d008      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0xd4>
 8006fae:	e00f      	b.n	8006fd0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f9df 	bl	800737c <TIM_CCxChannelCmd>
      break;
 8006fbe:	e016      	b.n	8006fee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	2104      	movs	r1, #4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f9d7 	bl	800737c <TIM_CCxChannelCmd>
      break;
 8006fce:	e00e      	b.n	8006fee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 f9cf 	bl	800737c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2104      	movs	r1, #4
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f9c8 	bl	800737c <TIM_CCxChannelCmd>
      break;
 8006fec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0201 	orr.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b02      	cmp	r3, #2
 800701c:	d122      	bne.n	8007064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b02      	cmp	r3, #2
 800702a:	d11b      	bne.n	8007064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0202 	mvn.w	r2, #2
 8007034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8f8 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8007050:	e005      	b.n	800705e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8ea 	bl	800722c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8fb 	bl	8007254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b04      	cmp	r3, #4
 8007070:	d122      	bne.n	80070b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b04      	cmp	r3, #4
 800707e:	d11b      	bne.n	80070b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0204 	mvn.w	r2, #4
 8007088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2202      	movs	r2, #2
 800708e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f8ce 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 80070a4:	e005      	b.n	80070b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8c0 	bl	800722c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f8d1 	bl	8007254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d122      	bne.n	800710c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0208 	mvn.w	r2, #8
 80070dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2204      	movs	r2, #4
 80070e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f8a4 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f896 	bl	800722c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8a7 	bl	8007254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0310 	and.w	r3, r3, #16
 8007116:	2b10      	cmp	r3, #16
 8007118:	d122      	bne.n	8007160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b10      	cmp	r3, #16
 8007126:	d11b      	bne.n	8007160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0210 	mvn.w	r2, #16
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2208      	movs	r2, #8
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f87a 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f86c 	bl	800722c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f87d 	bl	8007254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10e      	bne.n	800718c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b01      	cmp	r3, #1
 800717a:	d107      	bne.n	800718c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0201 	mvn.w	r2, #1
 8007184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f846 	bl	8007218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007196:	2b80      	cmp	r3, #128	; 0x80
 8007198:	d10e      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	d107      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f980 	bl	80074b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d10e      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f842 	bl	8007268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d10e      	bne.n	8007210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d107      	bne.n	8007210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0220 	mvn.w	r2, #32
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f94a 	bl	80074a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a34      	ldr	r2, [pc, #208]	; (8007360 <TIM_Base_SetConfig+0xe4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00f      	beq.n	80072b4 <TIM_Base_SetConfig+0x38>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729a:	d00b      	beq.n	80072b4 <TIM_Base_SetConfig+0x38>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a31      	ldr	r2, [pc, #196]	; (8007364 <TIM_Base_SetConfig+0xe8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d007      	beq.n	80072b4 <TIM_Base_SetConfig+0x38>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a30      	ldr	r2, [pc, #192]	; (8007368 <TIM_Base_SetConfig+0xec>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d003      	beq.n	80072b4 <TIM_Base_SetConfig+0x38>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a2f      	ldr	r2, [pc, #188]	; (800736c <TIM_Base_SetConfig+0xf0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d108      	bne.n	80072c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a25      	ldr	r2, [pc, #148]	; (8007360 <TIM_Base_SetConfig+0xe4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d01b      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d4:	d017      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a22      	ldr	r2, [pc, #136]	; (8007364 <TIM_Base_SetConfig+0xe8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a21      	ldr	r2, [pc, #132]	; (8007368 <TIM_Base_SetConfig+0xec>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00f      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a20      	ldr	r2, [pc, #128]	; (800736c <TIM_Base_SetConfig+0xf0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00b      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <TIM_Base_SetConfig+0xf4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d007      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1e      	ldr	r2, [pc, #120]	; (8007374 <TIM_Base_SetConfig+0xf8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_Base_SetConfig+0x8a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <TIM_Base_SetConfig+0xfc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d108      	bne.n	8007318 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a08      	ldr	r2, [pc, #32]	; (8007360 <TIM_Base_SetConfig+0xe4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d103      	bne.n	800734c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	615a      	str	r2, [r3, #20]
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40010000 	.word	0x40010000
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40000c00 	.word	0x40000c00
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	43db      	mvns	r3, r3
 800739e:	401a      	ands	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1a      	ldr	r2, [r3, #32]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e050      	b.n	8007482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d018      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d013      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a18      	ldr	r2, [pc, #96]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00e      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d009      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a15      	ldr	r2, [pc, #84]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d10c      	bne.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4313      	orrs	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40014000 	.word	0x40014000

080074a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <std>:
 80074cc:	2300      	movs	r3, #0
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	e9c0 3300 	strd	r3, r3, [r0]
 80074d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074da:	6083      	str	r3, [r0, #8]
 80074dc:	8181      	strh	r1, [r0, #12]
 80074de:	6643      	str	r3, [r0, #100]	; 0x64
 80074e0:	81c2      	strh	r2, [r0, #14]
 80074e2:	6183      	str	r3, [r0, #24]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2208      	movs	r2, #8
 80074e8:	305c      	adds	r0, #92	; 0x5c
 80074ea:	f000 fa05 	bl	80078f8 <memset>
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <std+0x58>)
 80074f0:	6263      	str	r3, [r4, #36]	; 0x24
 80074f2:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <std+0x5c>)
 80074f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <std+0x60>)
 80074f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <std+0x64>)
 80074fc:	6323      	str	r3, [r4, #48]	; 0x30
 80074fe:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <std+0x68>)
 8007500:	6224      	str	r4, [r4, #32]
 8007502:	429c      	cmp	r4, r3
 8007504:	d006      	beq.n	8007514 <std+0x48>
 8007506:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800750a:	4294      	cmp	r4, r2
 800750c:	d002      	beq.n	8007514 <std+0x48>
 800750e:	33d0      	adds	r3, #208	; 0xd0
 8007510:	429c      	cmp	r4, r3
 8007512:	d105      	bne.n	8007520 <std+0x54>
 8007514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751c:	f000 ba64 	b.w	80079e8 <__retarget_lock_init_recursive>
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	08007749 	.word	0x08007749
 8007528:	0800776b 	.word	0x0800776b
 800752c:	080077a3 	.word	0x080077a3
 8007530:	080077c7 	.word	0x080077c7
 8007534:	200009a8 	.word	0x200009a8

08007538 <stdio_exit_handler>:
 8007538:	4a02      	ldr	r2, [pc, #8]	; (8007544 <stdio_exit_handler+0xc>)
 800753a:	4903      	ldr	r1, [pc, #12]	; (8007548 <stdio_exit_handler+0x10>)
 800753c:	4803      	ldr	r0, [pc, #12]	; (800754c <stdio_exit_handler+0x14>)
 800753e:	f000 b869 	b.w	8007614 <_fwalk_sglue>
 8007542:	bf00      	nop
 8007544:	2000012c 	.word	0x2000012c
 8007548:	080082bd 	.word	0x080082bd
 800754c:	20000138 	.word	0x20000138

08007550 <cleanup_stdio>:
 8007550:	6841      	ldr	r1, [r0, #4]
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <cleanup_stdio+0x34>)
 8007554:	4299      	cmp	r1, r3
 8007556:	b510      	push	{r4, lr}
 8007558:	4604      	mov	r4, r0
 800755a:	d001      	beq.n	8007560 <cleanup_stdio+0x10>
 800755c:	f000 feae 	bl	80082bc <_fflush_r>
 8007560:	68a1      	ldr	r1, [r4, #8]
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <cleanup_stdio+0x38>)
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <cleanup_stdio+0x1e>
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fea7 	bl	80082bc <_fflush_r>
 800756e:	68e1      	ldr	r1, [r4, #12]
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <cleanup_stdio+0x3c>)
 8007572:	4299      	cmp	r1, r3
 8007574:	d004      	beq.n	8007580 <cleanup_stdio+0x30>
 8007576:	4620      	mov	r0, r4
 8007578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757c:	f000 be9e 	b.w	80082bc <_fflush_r>
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	200009a8 	.word	0x200009a8
 8007588:	20000a10 	.word	0x20000a10
 800758c:	20000a78 	.word	0x20000a78

08007590 <global_stdio_init.part.0>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <global_stdio_init.part.0+0x30>)
 8007594:	4c0b      	ldr	r4, [pc, #44]	; (80075c4 <global_stdio_init.part.0+0x34>)
 8007596:	4a0c      	ldr	r2, [pc, #48]	; (80075c8 <global_stdio_init.part.0+0x38>)
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	4620      	mov	r0, r4
 800759c:	2200      	movs	r2, #0
 800759e:	2104      	movs	r1, #4
 80075a0:	f7ff ff94 	bl	80074cc <std>
 80075a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075a8:	2201      	movs	r2, #1
 80075aa:	2109      	movs	r1, #9
 80075ac:	f7ff ff8e 	bl	80074cc <std>
 80075b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80075b4:	2202      	movs	r2, #2
 80075b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ba:	2112      	movs	r1, #18
 80075bc:	f7ff bf86 	b.w	80074cc <std>
 80075c0:	20000ae0 	.word	0x20000ae0
 80075c4:	200009a8 	.word	0x200009a8
 80075c8:	08007539 	.word	0x08007539

080075cc <__sfp_lock_acquire>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__sfp_lock_acquire+0x8>)
 80075ce:	f000 ba0c 	b.w	80079ea <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20000ae9 	.word	0x20000ae9

080075d8 <__sfp_lock_release>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__sfp_lock_release+0x8>)
 80075da:	f000 ba07 	b.w	80079ec <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20000ae9 	.word	0x20000ae9

080075e4 <__sinit>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	f7ff fff0 	bl	80075cc <__sfp_lock_acquire>
 80075ec:	6a23      	ldr	r3, [r4, #32]
 80075ee:	b11b      	cbz	r3, 80075f8 <__sinit+0x14>
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f4:	f7ff bff0 	b.w	80075d8 <__sfp_lock_release>
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <__sinit+0x28>)
 80075fa:	6223      	str	r3, [r4, #32]
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <__sinit+0x2c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f5      	bne.n	80075f0 <__sinit+0xc>
 8007604:	f7ff ffc4 	bl	8007590 <global_stdio_init.part.0>
 8007608:	e7f2      	b.n	80075f0 <__sinit+0xc>
 800760a:	bf00      	nop
 800760c:	08007551 	.word	0x08007551
 8007610:	20000ae0 	.word	0x20000ae0

08007614 <_fwalk_sglue>:
 8007614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007618:	4607      	mov	r7, r0
 800761a:	4688      	mov	r8, r1
 800761c:	4614      	mov	r4, r2
 800761e:	2600      	movs	r6, #0
 8007620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007624:	f1b9 0901 	subs.w	r9, r9, #1
 8007628:	d505      	bpl.n	8007636 <_fwalk_sglue+0x22>
 800762a:	6824      	ldr	r4, [r4, #0]
 800762c:	2c00      	cmp	r4, #0
 800762e:	d1f7      	bne.n	8007620 <_fwalk_sglue+0xc>
 8007630:	4630      	mov	r0, r6
 8007632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d907      	bls.n	800764c <_fwalk_sglue+0x38>
 800763c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007640:	3301      	adds	r3, #1
 8007642:	d003      	beq.n	800764c <_fwalk_sglue+0x38>
 8007644:	4629      	mov	r1, r5
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	4306      	orrs	r6, r0
 800764c:	3568      	adds	r5, #104	; 0x68
 800764e:	e7e9      	b.n	8007624 <_fwalk_sglue+0x10>

08007650 <_puts_r>:
 8007650:	6a03      	ldr	r3, [r0, #32]
 8007652:	b570      	push	{r4, r5, r6, lr}
 8007654:	6884      	ldr	r4, [r0, #8]
 8007656:	4605      	mov	r5, r0
 8007658:	460e      	mov	r6, r1
 800765a:	b90b      	cbnz	r3, 8007660 <_puts_r+0x10>
 800765c:	f7ff ffc2 	bl	80075e4 <__sinit>
 8007660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007662:	07db      	lsls	r3, r3, #31
 8007664:	d405      	bmi.n	8007672 <_puts_r+0x22>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	0598      	lsls	r0, r3, #22
 800766a:	d402      	bmi.n	8007672 <_puts_r+0x22>
 800766c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766e:	f000 f9bc 	bl	80079ea <__retarget_lock_acquire_recursive>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	0719      	lsls	r1, r3, #28
 8007676:	d513      	bpl.n	80076a0 <_puts_r+0x50>
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	b18b      	cbz	r3, 80076a0 <_puts_r+0x50>
 800767c:	3e01      	subs	r6, #1
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007684:	3b01      	subs	r3, #1
 8007686:	60a3      	str	r3, [r4, #8]
 8007688:	b9e9      	cbnz	r1, 80076c6 <_puts_r+0x76>
 800768a:	2b00      	cmp	r3, #0
 800768c:	da2e      	bge.n	80076ec <_puts_r+0x9c>
 800768e:	4622      	mov	r2, r4
 8007690:	210a      	movs	r1, #10
 8007692:	4628      	mov	r0, r5
 8007694:	f000 f89b 	bl	80077ce <__swbuf_r>
 8007698:	3001      	adds	r0, #1
 800769a:	d007      	beq.n	80076ac <_puts_r+0x5c>
 800769c:	250a      	movs	r5, #10
 800769e:	e007      	b.n	80076b0 <_puts_r+0x60>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 f8d0 	bl	8007848 <__swsetup_r>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0e7      	beq.n	800767c <_puts_r+0x2c>
 80076ac:	f04f 35ff 	mov.w	r5, #4294967295
 80076b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076b2:	07da      	lsls	r2, r3, #31
 80076b4:	d405      	bmi.n	80076c2 <_puts_r+0x72>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	059b      	lsls	r3, r3, #22
 80076ba:	d402      	bmi.n	80076c2 <_puts_r+0x72>
 80076bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076be:	f000 f995 	bl	80079ec <__retarget_lock_release_recursive>
 80076c2:	4628      	mov	r0, r5
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da04      	bge.n	80076d4 <_puts_r+0x84>
 80076ca:	69a2      	ldr	r2, [r4, #24]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	dc06      	bgt.n	80076de <_puts_r+0x8e>
 80076d0:	290a      	cmp	r1, #10
 80076d2:	d004      	beq.n	80076de <_puts_r+0x8e>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	7019      	strb	r1, [r3, #0]
 80076dc:	e7cf      	b.n	800767e <_puts_r+0x2e>
 80076de:	4622      	mov	r2, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f874 	bl	80077ce <__swbuf_r>
 80076e6:	3001      	adds	r0, #1
 80076e8:	d1c9      	bne.n	800767e <_puts_r+0x2e>
 80076ea:	e7df      	b.n	80076ac <_puts_r+0x5c>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	250a      	movs	r5, #10
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	6022      	str	r2, [r4, #0]
 80076f4:	701d      	strb	r5, [r3, #0]
 80076f6:	e7db      	b.n	80076b0 <_puts_r+0x60>

080076f8 <puts>:
 80076f8:	4b02      	ldr	r3, [pc, #8]	; (8007704 <puts+0xc>)
 80076fa:	4601      	mov	r1, r0
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	f7ff bfa7 	b.w	8007650 <_puts_r>
 8007702:	bf00      	nop
 8007704:	20000184 	.word	0x20000184

08007708 <siprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	b500      	push	{lr}
 800770c:	b09c      	sub	sp, #112	; 0x70
 800770e:	ab1d      	add	r3, sp, #116	; 0x74
 8007710:	9002      	str	r0, [sp, #8]
 8007712:	9006      	str	r0, [sp, #24]
 8007714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007718:	4809      	ldr	r0, [pc, #36]	; (8007740 <siprintf+0x38>)
 800771a:	9107      	str	r1, [sp, #28]
 800771c:	9104      	str	r1, [sp, #16]
 800771e:	4909      	ldr	r1, [pc, #36]	; (8007744 <siprintf+0x3c>)
 8007720:	f853 2b04 	ldr.w	r2, [r3], #4
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	a902      	add	r1, sp, #8
 800772c:	f000 fab2 	bl	8007c94 <_svfiprintf_r>
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	b01c      	add	sp, #112	; 0x70
 8007738:	f85d eb04 	ldr.w	lr, [sp], #4
 800773c:	b003      	add	sp, #12
 800773e:	4770      	bx	lr
 8007740:	20000184 	.word	0x20000184
 8007744:	ffff0208 	.word	0xffff0208

08007748 <__sread>:
 8007748:	b510      	push	{r4, lr}
 800774a:	460c      	mov	r4, r1
 800774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007750:	f000 f8fc 	bl	800794c <_read_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	bfab      	itete	ge
 8007758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800775a:	89a3      	ldrhlt	r3, [r4, #12]
 800775c:	181b      	addge	r3, r3, r0
 800775e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007762:	bfac      	ite	ge
 8007764:	6563      	strge	r3, [r4, #84]	; 0x54
 8007766:	81a3      	strhlt	r3, [r4, #12]
 8007768:	bd10      	pop	{r4, pc}

0800776a <__swrite>:
 800776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	461f      	mov	r7, r3
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	05db      	lsls	r3, r3, #23
 8007774:	4605      	mov	r5, r0
 8007776:	460c      	mov	r4, r1
 8007778:	4616      	mov	r6, r2
 800777a:	d505      	bpl.n	8007788 <__swrite+0x1e>
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	2302      	movs	r3, #2
 8007782:	2200      	movs	r2, #0
 8007784:	f000 f8d0 	bl	8007928 <_lseek_r>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	4628      	mov	r0, r5
 800779a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	f000 b8e7 	b.w	8007970 <_write_r>

080077a2 <__sseek>:
 80077a2:	b510      	push	{r4, lr}
 80077a4:	460c      	mov	r4, r1
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	f000 f8bd 	bl	8007928 <_lseek_r>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	bf15      	itete	ne
 80077b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077be:	81a3      	strheq	r3, [r4, #12]
 80077c0:	bf18      	it	ne
 80077c2:	81a3      	strhne	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__sclose>:
 80077c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ca:	f000 b89d 	b.w	8007908 <_close_r>

080077ce <__swbuf_r>:
 80077ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d0:	460e      	mov	r6, r1
 80077d2:	4614      	mov	r4, r2
 80077d4:	4605      	mov	r5, r0
 80077d6:	b118      	cbz	r0, 80077e0 <__swbuf_r+0x12>
 80077d8:	6a03      	ldr	r3, [r0, #32]
 80077da:	b90b      	cbnz	r3, 80077e0 <__swbuf_r+0x12>
 80077dc:	f7ff ff02 	bl	80075e4 <__sinit>
 80077e0:	69a3      	ldr	r3, [r4, #24]
 80077e2:	60a3      	str	r3, [r4, #8]
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	071a      	lsls	r2, r3, #28
 80077e8:	d525      	bpl.n	8007836 <__swbuf_r+0x68>
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	b31b      	cbz	r3, 8007836 <__swbuf_r+0x68>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	1a98      	subs	r0, r3, r2
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	b2f6      	uxtb	r6, r6
 80077f8:	4283      	cmp	r3, r0
 80077fa:	4637      	mov	r7, r6
 80077fc:	dc04      	bgt.n	8007808 <__swbuf_r+0x3a>
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f000 fd5b 	bl	80082bc <_fflush_r>
 8007806:	b9e0      	cbnz	r0, 8007842 <__swbuf_r+0x74>
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	3b01      	subs	r3, #1
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	6022      	str	r2, [r4, #0]
 8007814:	701e      	strb	r6, [r3, #0]
 8007816:	6962      	ldr	r2, [r4, #20]
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	429a      	cmp	r2, r3
 800781c:	d004      	beq.n	8007828 <__swbuf_r+0x5a>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	07db      	lsls	r3, r3, #31
 8007822:	d506      	bpl.n	8007832 <__swbuf_r+0x64>
 8007824:	2e0a      	cmp	r6, #10
 8007826:	d104      	bne.n	8007832 <__swbuf_r+0x64>
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 fd46 	bl	80082bc <_fflush_r>
 8007830:	b938      	cbnz	r0, 8007842 <__swbuf_r+0x74>
 8007832:	4638      	mov	r0, r7
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f000 f805 	bl	8007848 <__swsetup_r>
 800783e:	2800      	cmp	r0, #0
 8007840:	d0d5      	beq.n	80077ee <__swbuf_r+0x20>
 8007842:	f04f 37ff 	mov.w	r7, #4294967295
 8007846:	e7f4      	b.n	8007832 <__swbuf_r+0x64>

08007848 <__swsetup_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4b2a      	ldr	r3, [pc, #168]	; (80078f4 <__swsetup_r+0xac>)
 800784c:	4605      	mov	r5, r0
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	460c      	mov	r4, r1
 8007852:	b118      	cbz	r0, 800785c <__swsetup_r+0x14>
 8007854:	6a03      	ldr	r3, [r0, #32]
 8007856:	b90b      	cbnz	r3, 800785c <__swsetup_r+0x14>
 8007858:	f7ff fec4 	bl	80075e4 <__sinit>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007862:	0718      	lsls	r0, r3, #28
 8007864:	d422      	bmi.n	80078ac <__swsetup_r+0x64>
 8007866:	06d9      	lsls	r1, r3, #27
 8007868:	d407      	bmi.n	800787a <__swsetup_r+0x32>
 800786a:	2309      	movs	r3, #9
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	e034      	b.n	80078e4 <__swsetup_r+0x9c>
 800787a:	0758      	lsls	r0, r3, #29
 800787c:	d512      	bpl.n	80078a4 <__swsetup_r+0x5c>
 800787e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007880:	b141      	cbz	r1, 8007894 <__swsetup_r+0x4c>
 8007882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007886:	4299      	cmp	r1, r3
 8007888:	d002      	beq.n	8007890 <__swsetup_r+0x48>
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f8b0 	bl	80079f0 <_free_r>
 8007890:	2300      	movs	r3, #0
 8007892:	6363      	str	r3, [r4, #52]	; 0x34
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	2300      	movs	r3, #0
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	f043 0308 	orr.w	r3, r3, #8
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	b94b      	cbnz	r3, 80078c4 <__swsetup_r+0x7c>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ba:	d003      	beq.n	80078c4 <__swsetup_r+0x7c>
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fd4a 	bl	8008358 <__smakebuf_r>
 80078c4:	89a0      	ldrh	r0, [r4, #12]
 80078c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ca:	f010 0301 	ands.w	r3, r0, #1
 80078ce:	d00a      	beq.n	80078e6 <__swsetup_r+0x9e>
 80078d0:	2300      	movs	r3, #0
 80078d2:	60a3      	str	r3, [r4, #8]
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	425b      	negs	r3, r3
 80078d8:	61a3      	str	r3, [r4, #24]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	b943      	cbnz	r3, 80078f0 <__swsetup_r+0xa8>
 80078de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078e2:	d1c4      	bne.n	800786e <__swsetup_r+0x26>
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	0781      	lsls	r1, r0, #30
 80078e8:	bf58      	it	pl
 80078ea:	6963      	ldrpl	r3, [r4, #20]
 80078ec:	60a3      	str	r3, [r4, #8]
 80078ee:	e7f4      	b.n	80078da <__swsetup_r+0x92>
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7f7      	b.n	80078e4 <__swsetup_r+0x9c>
 80078f4:	20000184 	.word	0x20000184

080078f8 <memset>:
 80078f8:	4402      	add	r2, r0
 80078fa:	4603      	mov	r3, r0
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d100      	bne.n	8007902 <memset+0xa>
 8007900:	4770      	bx	lr
 8007902:	f803 1b01 	strb.w	r1, [r3], #1
 8007906:	e7f9      	b.n	80078fc <memset+0x4>

08007908 <_close_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d06      	ldr	r5, [pc, #24]	; (8007924 <_close_r+0x1c>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7fb fc4f 	bl	80031b6 <_close>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_close_r+0x1a>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_close_r+0x1a>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20000ae4 	.word	0x20000ae4

08007928 <_lseek_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	; (8007948 <_lseek_r+0x20>)
 800792c:	4604      	mov	r4, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f7fb fc64 	bl	8003204 <_lseek>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_lseek_r+0x1e>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_lseek_r+0x1e>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20000ae4 	.word	0x20000ae4

0800794c <_read_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	; (800796c <_read_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7fb fbf2 	bl	8003144 <_read>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_read_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_read_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20000ae4 	.word	0x20000ae4

08007970 <_write_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_write_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7fb fbfd 	bl	800317e <_write>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_write_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_write_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20000ae4 	.word	0x20000ae4

08007994 <__errno>:
 8007994:	4b01      	ldr	r3, [pc, #4]	; (800799c <__errno+0x8>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000184 	.word	0x20000184

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	; (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	; (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	; (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	; (80079e4 <__libc_init_array+0x44>)
 80079b4:	f000 fd9e 	bl	80084f4 <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	080088dc 	.word	0x080088dc
 80079dc:	080088dc 	.word	0x080088dc
 80079e0:	080088dc 	.word	0x080088dc
 80079e4:	080088e0 	.word	0x080088e0

080079e8 <__retarget_lock_init_recursive>:
 80079e8:	4770      	bx	lr

080079ea <__retarget_lock_acquire_recursive>:
 80079ea:	4770      	bx	lr

080079ec <__retarget_lock_release_recursive>:
 80079ec:	4770      	bx	lr
	...

080079f0 <_free_r>:
 80079f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079f2:	2900      	cmp	r1, #0
 80079f4:	d044      	beq.n	8007a80 <_free_r+0x90>
 80079f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079fa:	9001      	str	r0, [sp, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007a02:	bfb8      	it	lt
 8007a04:	18e4      	addlt	r4, r4, r3
 8007a06:	f000 f8df 	bl	8007bc8 <__malloc_lock>
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	; (8007a84 <_free_r+0x94>)
 8007a0c:	9801      	ldr	r0, [sp, #4]
 8007a0e:	6813      	ldr	r3, [r2, #0]
 8007a10:	b933      	cbnz	r3, 8007a20 <_free_r+0x30>
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	6014      	str	r4, [r2, #0]
 8007a16:	b003      	add	sp, #12
 8007a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a1c:	f000 b8da 	b.w	8007bd4 <__malloc_unlock>
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	d908      	bls.n	8007a36 <_free_r+0x46>
 8007a24:	6825      	ldr	r5, [r4, #0]
 8007a26:	1961      	adds	r1, r4, r5
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	bf01      	itttt	eq
 8007a2c:	6819      	ldreq	r1, [r3, #0]
 8007a2e:	685b      	ldreq	r3, [r3, #4]
 8007a30:	1949      	addeq	r1, r1, r5
 8007a32:	6021      	streq	r1, [r4, #0]
 8007a34:	e7ed      	b.n	8007a12 <_free_r+0x22>
 8007a36:	461a      	mov	r2, r3
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b10b      	cbz	r3, 8007a40 <_free_r+0x50>
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d9fa      	bls.n	8007a36 <_free_r+0x46>
 8007a40:	6811      	ldr	r1, [r2, #0]
 8007a42:	1855      	adds	r5, r2, r1
 8007a44:	42a5      	cmp	r5, r4
 8007a46:	d10b      	bne.n	8007a60 <_free_r+0x70>
 8007a48:	6824      	ldr	r4, [r4, #0]
 8007a4a:	4421      	add	r1, r4
 8007a4c:	1854      	adds	r4, r2, r1
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	d1e0      	bne.n	8007a16 <_free_r+0x26>
 8007a54:	681c      	ldr	r4, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	6053      	str	r3, [r2, #4]
 8007a5a:	440c      	add	r4, r1
 8007a5c:	6014      	str	r4, [r2, #0]
 8007a5e:	e7da      	b.n	8007a16 <_free_r+0x26>
 8007a60:	d902      	bls.n	8007a68 <_free_r+0x78>
 8007a62:	230c      	movs	r3, #12
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	e7d6      	b.n	8007a16 <_free_r+0x26>
 8007a68:	6825      	ldr	r5, [r4, #0]
 8007a6a:	1961      	adds	r1, r4, r5
 8007a6c:	428b      	cmp	r3, r1
 8007a6e:	bf04      	itt	eq
 8007a70:	6819      	ldreq	r1, [r3, #0]
 8007a72:	685b      	ldreq	r3, [r3, #4]
 8007a74:	6063      	str	r3, [r4, #4]
 8007a76:	bf04      	itt	eq
 8007a78:	1949      	addeq	r1, r1, r5
 8007a7a:	6021      	streq	r1, [r4, #0]
 8007a7c:	6054      	str	r4, [r2, #4]
 8007a7e:	e7ca      	b.n	8007a16 <_free_r+0x26>
 8007a80:	b003      	add	sp, #12
 8007a82:	bd30      	pop	{r4, r5, pc}
 8007a84:	20000aec 	.word	0x20000aec

08007a88 <sbrk_aligned>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4e0e      	ldr	r6, [pc, #56]	; (8007ac4 <sbrk_aligned+0x3c>)
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	6831      	ldr	r1, [r6, #0]
 8007a90:	4605      	mov	r5, r0
 8007a92:	b911      	cbnz	r1, 8007a9a <sbrk_aligned+0x12>
 8007a94:	f000 fcd8 	bl	8008448 <_sbrk_r>
 8007a98:	6030      	str	r0, [r6, #0]
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 fcd3 	bl	8008448 <_sbrk_r>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	d00a      	beq.n	8007abc <sbrk_aligned+0x34>
 8007aa6:	1cc4      	adds	r4, r0, #3
 8007aa8:	f024 0403 	bic.w	r4, r4, #3
 8007aac:	42a0      	cmp	r0, r4
 8007aae:	d007      	beq.n	8007ac0 <sbrk_aligned+0x38>
 8007ab0:	1a21      	subs	r1, r4, r0
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fcc8 	bl	8008448 <_sbrk_r>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d101      	bne.n	8007ac0 <sbrk_aligned+0x38>
 8007abc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	20000af0 	.word	0x20000af0

08007ac8 <_malloc_r>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	1ccd      	adds	r5, r1, #3
 8007ace:	f025 0503 	bic.w	r5, r5, #3
 8007ad2:	3508      	adds	r5, #8
 8007ad4:	2d0c      	cmp	r5, #12
 8007ad6:	bf38      	it	cc
 8007ad8:	250c      	movcc	r5, #12
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	4607      	mov	r7, r0
 8007ade:	db01      	blt.n	8007ae4 <_malloc_r+0x1c>
 8007ae0:	42a9      	cmp	r1, r5
 8007ae2:	d905      	bls.n	8007af0 <_malloc_r+0x28>
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	2600      	movs	r6, #0
 8007aea:	4630      	mov	r0, r6
 8007aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bc4 <_malloc_r+0xfc>
 8007af4:	f000 f868 	bl	8007bc8 <__malloc_lock>
 8007af8:	f8d8 3000 	ldr.w	r3, [r8]
 8007afc:	461c      	mov	r4, r3
 8007afe:	bb5c      	cbnz	r4, 8007b58 <_malloc_r+0x90>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4638      	mov	r0, r7
 8007b04:	f7ff ffc0 	bl	8007a88 <sbrk_aligned>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	d155      	bne.n	8007bba <_malloc_r+0xf2>
 8007b0e:	f8d8 4000 	ldr.w	r4, [r8]
 8007b12:	4626      	mov	r6, r4
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	d145      	bne.n	8007ba4 <_malloc_r+0xdc>
 8007b18:	2c00      	cmp	r4, #0
 8007b1a:	d048      	beq.n	8007bae <_malloc_r+0xe6>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4638      	mov	r0, r7
 8007b22:	eb04 0903 	add.w	r9, r4, r3
 8007b26:	f000 fc8f 	bl	8008448 <_sbrk_r>
 8007b2a:	4581      	cmp	r9, r0
 8007b2c:	d13f      	bne.n	8007bae <_malloc_r+0xe6>
 8007b2e:	6821      	ldr	r1, [r4, #0]
 8007b30:	1a6d      	subs	r5, r5, r1
 8007b32:	4629      	mov	r1, r5
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff ffa7 	bl	8007a88 <sbrk_aligned>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d037      	beq.n	8007bae <_malloc_r+0xe6>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	442b      	add	r3, r5
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	f8d8 3000 	ldr.w	r3, [r8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d038      	beq.n	8007bbe <_malloc_r+0xf6>
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	42a2      	cmp	r2, r4
 8007b50:	d12b      	bne.n	8007baa <_malloc_r+0xe2>
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	e00f      	b.n	8007b78 <_malloc_r+0xb0>
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	1b52      	subs	r2, r2, r5
 8007b5c:	d41f      	bmi.n	8007b9e <_malloc_r+0xd6>
 8007b5e:	2a0b      	cmp	r2, #11
 8007b60:	d917      	bls.n	8007b92 <_malloc_r+0xca>
 8007b62:	1961      	adds	r1, r4, r5
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	6025      	str	r5, [r4, #0]
 8007b68:	bf18      	it	ne
 8007b6a:	6059      	strne	r1, [r3, #4]
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	bf08      	it	eq
 8007b70:	f8c8 1000 	streq.w	r1, [r8]
 8007b74:	5162      	str	r2, [r4, r5]
 8007b76:	604b      	str	r3, [r1, #4]
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f104 060b 	add.w	r6, r4, #11
 8007b7e:	f000 f829 	bl	8007bd4 <__malloc_unlock>
 8007b82:	f026 0607 	bic.w	r6, r6, #7
 8007b86:	1d23      	adds	r3, r4, #4
 8007b88:	1af2      	subs	r2, r6, r3
 8007b8a:	d0ae      	beq.n	8007aea <_malloc_r+0x22>
 8007b8c:	1b9b      	subs	r3, r3, r6
 8007b8e:	50a3      	str	r3, [r4, r2]
 8007b90:	e7ab      	b.n	8007aea <_malloc_r+0x22>
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	6862      	ldr	r2, [r4, #4]
 8007b96:	d1dd      	bne.n	8007b54 <_malloc_r+0x8c>
 8007b98:	f8c8 2000 	str.w	r2, [r8]
 8007b9c:	e7ec      	b.n	8007b78 <_malloc_r+0xb0>
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	6864      	ldr	r4, [r4, #4]
 8007ba2:	e7ac      	b.n	8007afe <_malloc_r+0x36>
 8007ba4:	4634      	mov	r4, r6
 8007ba6:	6876      	ldr	r6, [r6, #4]
 8007ba8:	e7b4      	b.n	8007b14 <_malloc_r+0x4c>
 8007baa:	4613      	mov	r3, r2
 8007bac:	e7cc      	b.n	8007b48 <_malloc_r+0x80>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	603b      	str	r3, [r7, #0]
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	f000 f80e 	bl	8007bd4 <__malloc_unlock>
 8007bb8:	e797      	b.n	8007aea <_malloc_r+0x22>
 8007bba:	6025      	str	r5, [r4, #0]
 8007bbc:	e7dc      	b.n	8007b78 <_malloc_r+0xb0>
 8007bbe:	605b      	str	r3, [r3, #4]
 8007bc0:	deff      	udf	#255	; 0xff
 8007bc2:	bf00      	nop
 8007bc4:	20000aec 	.word	0x20000aec

08007bc8 <__malloc_lock>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__malloc_lock+0x8>)
 8007bca:	f7ff bf0e 	b.w	80079ea <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20000ae8 	.word	0x20000ae8

08007bd4 <__malloc_unlock>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__malloc_unlock+0x8>)
 8007bd6:	f7ff bf09 	b.w	80079ec <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20000ae8 	.word	0x20000ae8

08007be0 <__ssputs_r>:
 8007be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	688e      	ldr	r6, [r1, #8]
 8007be6:	461f      	mov	r7, r3
 8007be8:	42be      	cmp	r6, r7
 8007bea:	680b      	ldr	r3, [r1, #0]
 8007bec:	4682      	mov	sl, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4690      	mov	r8, r2
 8007bf2:	d82c      	bhi.n	8007c4e <__ssputs_r+0x6e>
 8007bf4:	898a      	ldrh	r2, [r1, #12]
 8007bf6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bfa:	d026      	beq.n	8007c4a <__ssputs_r+0x6a>
 8007bfc:	6965      	ldr	r5, [r4, #20]
 8007bfe:	6909      	ldr	r1, [r1, #16]
 8007c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c04:	eba3 0901 	sub.w	r9, r3, r1
 8007c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c0c:	1c7b      	adds	r3, r7, #1
 8007c0e:	444b      	add	r3, r9
 8007c10:	106d      	asrs	r5, r5, #1
 8007c12:	429d      	cmp	r5, r3
 8007c14:	bf38      	it	cc
 8007c16:	461d      	movcc	r5, r3
 8007c18:	0553      	lsls	r3, r2, #21
 8007c1a:	d527      	bpl.n	8007c6c <__ssputs_r+0x8c>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f7ff ff53 	bl	8007ac8 <_malloc_r>
 8007c22:	4606      	mov	r6, r0
 8007c24:	b360      	cbz	r0, 8007c80 <__ssputs_r+0xa0>
 8007c26:	6921      	ldr	r1, [r4, #16]
 8007c28:	464a      	mov	r2, r9
 8007c2a:	f000 fc1d 	bl	8008468 <memcpy>
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	6126      	str	r6, [r4, #16]
 8007c3c:	6165      	str	r5, [r4, #20]
 8007c3e:	444e      	add	r6, r9
 8007c40:	eba5 0509 	sub.w	r5, r5, r9
 8007c44:	6026      	str	r6, [r4, #0]
 8007c46:	60a5      	str	r5, [r4, #8]
 8007c48:	463e      	mov	r6, r7
 8007c4a:	42be      	cmp	r6, r7
 8007c4c:	d900      	bls.n	8007c50 <__ssputs_r+0x70>
 8007c4e:	463e      	mov	r6, r7
 8007c50:	6820      	ldr	r0, [r4, #0]
 8007c52:	4632      	mov	r2, r6
 8007c54:	4641      	mov	r1, r8
 8007c56:	f000 fbbb 	bl	80083d0 <memmove>
 8007c5a:	68a3      	ldr	r3, [r4, #8]
 8007c5c:	1b9b      	subs	r3, r3, r6
 8007c5e:	60a3      	str	r3, [r4, #8]
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	4433      	add	r3, r6
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	2000      	movs	r0, #0
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	f000 fc09 	bl	8008484 <_realloc_r>
 8007c72:	4606      	mov	r6, r0
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d1e0      	bne.n	8007c3a <__ssputs_r+0x5a>
 8007c78:	6921      	ldr	r1, [r4, #16]
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	f7ff feb8 	bl	80079f0 <_free_r>
 8007c80:	230c      	movs	r3, #12
 8007c82:	f8ca 3000 	str.w	r3, [sl]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c92:	e7e9      	b.n	8007c68 <__ssputs_r+0x88>

08007c94 <_svfiprintf_r>:
 8007c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c98:	4698      	mov	r8, r3
 8007c9a:	898b      	ldrh	r3, [r1, #12]
 8007c9c:	061b      	lsls	r3, r3, #24
 8007c9e:	b09d      	sub	sp, #116	; 0x74
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	d50e      	bpl.n	8007cc6 <_svfiprintf_r+0x32>
 8007ca8:	690b      	ldr	r3, [r1, #16]
 8007caa:	b963      	cbnz	r3, 8007cc6 <_svfiprintf_r+0x32>
 8007cac:	2140      	movs	r1, #64	; 0x40
 8007cae:	f7ff ff0b 	bl	8007ac8 <_malloc_r>
 8007cb2:	6028      	str	r0, [r5, #0]
 8007cb4:	6128      	str	r0, [r5, #16]
 8007cb6:	b920      	cbnz	r0, 8007cc2 <_svfiprintf_r+0x2e>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e0d0      	b.n	8007e64 <_svfiprintf_r+0x1d0>
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	616b      	str	r3, [r5, #20]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cca:	2320      	movs	r3, #32
 8007ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cd4:	2330      	movs	r3, #48	; 0x30
 8007cd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e7c <_svfiprintf_r+0x1e8>
 8007cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cde:	f04f 0901 	mov.w	r9, #1
 8007ce2:	4623      	mov	r3, r4
 8007ce4:	469a      	mov	sl, r3
 8007ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cea:	b10a      	cbz	r2, 8007cf0 <_svfiprintf_r+0x5c>
 8007cec:	2a25      	cmp	r2, #37	; 0x25
 8007cee:	d1f9      	bne.n	8007ce4 <_svfiprintf_r+0x50>
 8007cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8007cf4:	d00b      	beq.n	8007d0e <_svfiprintf_r+0x7a>
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff ff6f 	bl	8007be0 <__ssputs_r>
 8007d02:	3001      	adds	r0, #1
 8007d04:	f000 80a9 	beq.w	8007e5a <_svfiprintf_r+0x1c6>
 8007d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d0a:	445a      	add	r2, fp
 8007d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80a1 	beq.w	8007e5a <_svfiprintf_r+0x1c6>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d22:	f10a 0a01 	add.w	sl, sl, #1
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	9307      	str	r3, [sp, #28]
 8007d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d30:	4654      	mov	r4, sl
 8007d32:	2205      	movs	r2, #5
 8007d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d38:	4850      	ldr	r0, [pc, #320]	; (8007e7c <_svfiprintf_r+0x1e8>)
 8007d3a:	f7f8 fa59 	bl	80001f0 <memchr>
 8007d3e:	9a04      	ldr	r2, [sp, #16]
 8007d40:	b9d8      	cbnz	r0, 8007d7a <_svfiprintf_r+0xe6>
 8007d42:	06d0      	lsls	r0, r2, #27
 8007d44:	bf44      	itt	mi
 8007d46:	2320      	movmi	r3, #32
 8007d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d4c:	0711      	lsls	r1, r2, #28
 8007d4e:	bf44      	itt	mi
 8007d50:	232b      	movmi	r3, #43	; 0x2b
 8007d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d56:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5c:	d015      	beq.n	8007d8a <_svfiprintf_r+0xf6>
 8007d5e:	9a07      	ldr	r2, [sp, #28]
 8007d60:	4654      	mov	r4, sl
 8007d62:	2000      	movs	r0, #0
 8007d64:	f04f 0c0a 	mov.w	ip, #10
 8007d68:	4621      	mov	r1, r4
 8007d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d6e:	3b30      	subs	r3, #48	; 0x30
 8007d70:	2b09      	cmp	r3, #9
 8007d72:	d94d      	bls.n	8007e10 <_svfiprintf_r+0x17c>
 8007d74:	b1b0      	cbz	r0, 8007da4 <_svfiprintf_r+0x110>
 8007d76:	9207      	str	r2, [sp, #28]
 8007d78:	e014      	b.n	8007da4 <_svfiprintf_r+0x110>
 8007d7a:	eba0 0308 	sub.w	r3, r0, r8
 8007d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d82:	4313      	orrs	r3, r2
 8007d84:	9304      	str	r3, [sp, #16]
 8007d86:	46a2      	mov	sl, r4
 8007d88:	e7d2      	b.n	8007d30 <_svfiprintf_r+0x9c>
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	1d19      	adds	r1, r3, #4
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	9103      	str	r1, [sp, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfbb      	ittet	lt
 8007d96:	425b      	neglt	r3, r3
 8007d98:	f042 0202 	orrlt.w	r2, r2, #2
 8007d9c:	9307      	strge	r3, [sp, #28]
 8007d9e:	9307      	strlt	r3, [sp, #28]
 8007da0:	bfb8      	it	lt
 8007da2:	9204      	strlt	r2, [sp, #16]
 8007da4:	7823      	ldrb	r3, [r4, #0]
 8007da6:	2b2e      	cmp	r3, #46	; 0x2e
 8007da8:	d10c      	bne.n	8007dc4 <_svfiprintf_r+0x130>
 8007daa:	7863      	ldrb	r3, [r4, #1]
 8007dac:	2b2a      	cmp	r3, #42	; 0x2a
 8007dae:	d134      	bne.n	8007e1a <_svfiprintf_r+0x186>
 8007db0:	9b03      	ldr	r3, [sp, #12]
 8007db2:	1d1a      	adds	r2, r3, #4
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	9203      	str	r2, [sp, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfb8      	it	lt
 8007dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc0:	3402      	adds	r4, #2
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e8c <_svfiprintf_r+0x1f8>
 8007dc8:	7821      	ldrb	r1, [r4, #0]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	4650      	mov	r0, sl
 8007dce:	f7f8 fa0f 	bl	80001f0 <memchr>
 8007dd2:	b138      	cbz	r0, 8007de4 <_svfiprintf_r+0x150>
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	eba0 000a 	sub.w	r0, r0, sl
 8007dda:	2240      	movs	r2, #64	; 0x40
 8007ddc:	4082      	lsls	r2, r0
 8007dde:	4313      	orrs	r3, r2
 8007de0:	3401      	adds	r4, #1
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de8:	4825      	ldr	r0, [pc, #148]	; (8007e80 <_svfiprintf_r+0x1ec>)
 8007dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dee:	2206      	movs	r2, #6
 8007df0:	f7f8 f9fe 	bl	80001f0 <memchr>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d038      	beq.n	8007e6a <_svfiprintf_r+0x1d6>
 8007df8:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <_svfiprintf_r+0x1f0>)
 8007dfa:	bb1b      	cbnz	r3, 8007e44 <_svfiprintf_r+0x1b0>
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	3307      	adds	r3, #7
 8007e00:	f023 0307 	bic.w	r3, r3, #7
 8007e04:	3308      	adds	r3, #8
 8007e06:	9303      	str	r3, [sp, #12]
 8007e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0a:	4433      	add	r3, r6
 8007e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0e:	e768      	b.n	8007ce2 <_svfiprintf_r+0x4e>
 8007e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e14:	460c      	mov	r4, r1
 8007e16:	2001      	movs	r0, #1
 8007e18:	e7a6      	b.n	8007d68 <_svfiprintf_r+0xd4>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	3401      	adds	r4, #1
 8007e1e:	9305      	str	r3, [sp, #20]
 8007e20:	4619      	mov	r1, r3
 8007e22:	f04f 0c0a 	mov.w	ip, #10
 8007e26:	4620      	mov	r0, r4
 8007e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e2c:	3a30      	subs	r2, #48	; 0x30
 8007e2e:	2a09      	cmp	r2, #9
 8007e30:	d903      	bls.n	8007e3a <_svfiprintf_r+0x1a6>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0c6      	beq.n	8007dc4 <_svfiprintf_r+0x130>
 8007e36:	9105      	str	r1, [sp, #20]
 8007e38:	e7c4      	b.n	8007dc4 <_svfiprintf_r+0x130>
 8007e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e3e:	4604      	mov	r4, r0
 8007e40:	2301      	movs	r3, #1
 8007e42:	e7f0      	b.n	8007e26 <_svfiprintf_r+0x192>
 8007e44:	ab03      	add	r3, sp, #12
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	462a      	mov	r2, r5
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <_svfiprintf_r+0x1f4>)
 8007e4c:	a904      	add	r1, sp, #16
 8007e4e:	4638      	mov	r0, r7
 8007e50:	f3af 8000 	nop.w
 8007e54:	1c42      	adds	r2, r0, #1
 8007e56:	4606      	mov	r6, r0
 8007e58:	d1d6      	bne.n	8007e08 <_svfiprintf_r+0x174>
 8007e5a:	89ab      	ldrh	r3, [r5, #12]
 8007e5c:	065b      	lsls	r3, r3, #25
 8007e5e:	f53f af2d 	bmi.w	8007cbc <_svfiprintf_r+0x28>
 8007e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e64:	b01d      	add	sp, #116	; 0x74
 8007e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6a:	ab03      	add	r3, sp, #12
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <_svfiprintf_r+0x1f4>)
 8007e72:	a904      	add	r1, sp, #16
 8007e74:	4638      	mov	r0, r7
 8007e76:	f000 f879 	bl	8007f6c <_printf_i>
 8007e7a:	e7eb      	b.n	8007e54 <_svfiprintf_r+0x1c0>
 8007e7c:	080088a0 	.word	0x080088a0
 8007e80:	080088aa 	.word	0x080088aa
 8007e84:	00000000 	.word	0x00000000
 8007e88:	08007be1 	.word	0x08007be1
 8007e8c:	080088a6 	.word	0x080088a6

08007e90 <_printf_common>:
 8007e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e94:	4616      	mov	r6, r2
 8007e96:	4699      	mov	r9, r3
 8007e98:	688a      	ldr	r2, [r1, #8]
 8007e9a:	690b      	ldr	r3, [r1, #16]
 8007e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	bfb8      	it	lt
 8007ea4:	4613      	movlt	r3, r2
 8007ea6:	6033      	str	r3, [r6, #0]
 8007ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007eac:	4607      	mov	r7, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	b10a      	cbz	r2, 8007eb6 <_printf_common+0x26>
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	6033      	str	r3, [r6, #0]
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	0699      	lsls	r1, r3, #26
 8007eba:	bf42      	ittt	mi
 8007ebc:	6833      	ldrmi	r3, [r6, #0]
 8007ebe:	3302      	addmi	r3, #2
 8007ec0:	6033      	strmi	r3, [r6, #0]
 8007ec2:	6825      	ldr	r5, [r4, #0]
 8007ec4:	f015 0506 	ands.w	r5, r5, #6
 8007ec8:	d106      	bne.n	8007ed8 <_printf_common+0x48>
 8007eca:	f104 0a19 	add.w	sl, r4, #25
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	6832      	ldr	r2, [r6, #0]
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	42ab      	cmp	r3, r5
 8007ed6:	dc26      	bgt.n	8007f26 <_printf_common+0x96>
 8007ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007edc:	1e13      	subs	r3, r2, #0
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	2301      	movne	r3, #1
 8007ee4:	0692      	lsls	r2, r2, #26
 8007ee6:	d42b      	bmi.n	8007f40 <_printf_common+0xb0>
 8007ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eec:	4649      	mov	r1, r9
 8007eee:	4638      	mov	r0, r7
 8007ef0:	47c0      	blx	r8
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	d01e      	beq.n	8007f34 <_printf_common+0xa4>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6922      	ldr	r2, [r4, #16]
 8007efa:	f003 0306 	and.w	r3, r3, #6
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	bf02      	ittt	eq
 8007f02:	68e5      	ldreq	r5, [r4, #12]
 8007f04:	6833      	ldreq	r3, [r6, #0]
 8007f06:	1aed      	subeq	r5, r5, r3
 8007f08:	68a3      	ldr	r3, [r4, #8]
 8007f0a:	bf0c      	ite	eq
 8007f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f10:	2500      	movne	r5, #0
 8007f12:	4293      	cmp	r3, r2
 8007f14:	bfc4      	itt	gt
 8007f16:	1a9b      	subgt	r3, r3, r2
 8007f18:	18ed      	addgt	r5, r5, r3
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	341a      	adds	r4, #26
 8007f1e:	42b5      	cmp	r5, r6
 8007f20:	d11a      	bne.n	8007f58 <_printf_common+0xc8>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e008      	b.n	8007f38 <_printf_common+0xa8>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4652      	mov	r2, sl
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	47c0      	blx	r8
 8007f30:	3001      	adds	r0, #1
 8007f32:	d103      	bne.n	8007f3c <_printf_common+0xac>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	e7c6      	b.n	8007ece <_printf_common+0x3e>
 8007f40:	18e1      	adds	r1, r4, r3
 8007f42:	1c5a      	adds	r2, r3, #1
 8007f44:	2030      	movs	r0, #48	; 0x30
 8007f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f4a:	4422      	add	r2, r4
 8007f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f54:	3302      	adds	r3, #2
 8007f56:	e7c7      	b.n	8007ee8 <_printf_common+0x58>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	4638      	mov	r0, r7
 8007f60:	47c0      	blx	r8
 8007f62:	3001      	adds	r0, #1
 8007f64:	d0e6      	beq.n	8007f34 <_printf_common+0xa4>
 8007f66:	3601      	adds	r6, #1
 8007f68:	e7d9      	b.n	8007f1e <_printf_common+0x8e>
	...

08007f6c <_printf_i>:
 8007f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	7e0f      	ldrb	r7, [r1, #24]
 8007f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f74:	2f78      	cmp	r7, #120	; 0x78
 8007f76:	4691      	mov	r9, r2
 8007f78:	4680      	mov	r8, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f82:	d807      	bhi.n	8007f94 <_printf_i+0x28>
 8007f84:	2f62      	cmp	r7, #98	; 0x62
 8007f86:	d80a      	bhi.n	8007f9e <_printf_i+0x32>
 8007f88:	2f00      	cmp	r7, #0
 8007f8a:	f000 80d4 	beq.w	8008136 <_printf_i+0x1ca>
 8007f8e:	2f58      	cmp	r7, #88	; 0x58
 8007f90:	f000 80c0 	beq.w	8008114 <_printf_i+0x1a8>
 8007f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f9c:	e03a      	b.n	8008014 <_printf_i+0xa8>
 8007f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fa2:	2b15      	cmp	r3, #21
 8007fa4:	d8f6      	bhi.n	8007f94 <_printf_i+0x28>
 8007fa6:	a101      	add	r1, pc, #4	; (adr r1, 8007fac <_printf_i+0x40>)
 8007fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fac:	08008005 	.word	0x08008005
 8007fb0:	08008019 	.word	0x08008019
 8007fb4:	08007f95 	.word	0x08007f95
 8007fb8:	08007f95 	.word	0x08007f95
 8007fbc:	08007f95 	.word	0x08007f95
 8007fc0:	08007f95 	.word	0x08007f95
 8007fc4:	08008019 	.word	0x08008019
 8007fc8:	08007f95 	.word	0x08007f95
 8007fcc:	08007f95 	.word	0x08007f95
 8007fd0:	08007f95 	.word	0x08007f95
 8007fd4:	08007f95 	.word	0x08007f95
 8007fd8:	0800811d 	.word	0x0800811d
 8007fdc:	08008045 	.word	0x08008045
 8007fe0:	080080d7 	.word	0x080080d7
 8007fe4:	08007f95 	.word	0x08007f95
 8007fe8:	08007f95 	.word	0x08007f95
 8007fec:	0800813f 	.word	0x0800813f
 8007ff0:	08007f95 	.word	0x08007f95
 8007ff4:	08008045 	.word	0x08008045
 8007ff8:	08007f95 	.word	0x08007f95
 8007ffc:	08007f95 	.word	0x08007f95
 8008000:	080080df 	.word	0x080080df
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	1d1a      	adds	r2, r3, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	602a      	str	r2, [r5, #0]
 800800c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008014:	2301      	movs	r3, #1
 8008016:	e09f      	b.n	8008158 <_printf_i+0x1ec>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	682b      	ldr	r3, [r5, #0]
 800801c:	0607      	lsls	r7, r0, #24
 800801e:	f103 0104 	add.w	r1, r3, #4
 8008022:	6029      	str	r1, [r5, #0]
 8008024:	d501      	bpl.n	800802a <_printf_i+0xbe>
 8008026:	681e      	ldr	r6, [r3, #0]
 8008028:	e003      	b.n	8008032 <_printf_i+0xc6>
 800802a:	0646      	lsls	r6, r0, #25
 800802c:	d5fb      	bpl.n	8008026 <_printf_i+0xba>
 800802e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008032:	2e00      	cmp	r6, #0
 8008034:	da03      	bge.n	800803e <_printf_i+0xd2>
 8008036:	232d      	movs	r3, #45	; 0x2d
 8008038:	4276      	negs	r6, r6
 800803a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800803e:	485a      	ldr	r0, [pc, #360]	; (80081a8 <_printf_i+0x23c>)
 8008040:	230a      	movs	r3, #10
 8008042:	e012      	b.n	800806a <_printf_i+0xfe>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	6820      	ldr	r0, [r4, #0]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	6029      	str	r1, [r5, #0]
 800804c:	0605      	lsls	r5, r0, #24
 800804e:	d501      	bpl.n	8008054 <_printf_i+0xe8>
 8008050:	681e      	ldr	r6, [r3, #0]
 8008052:	e002      	b.n	800805a <_printf_i+0xee>
 8008054:	0641      	lsls	r1, r0, #25
 8008056:	d5fb      	bpl.n	8008050 <_printf_i+0xe4>
 8008058:	881e      	ldrh	r6, [r3, #0]
 800805a:	4853      	ldr	r0, [pc, #332]	; (80081a8 <_printf_i+0x23c>)
 800805c:	2f6f      	cmp	r7, #111	; 0x6f
 800805e:	bf0c      	ite	eq
 8008060:	2308      	moveq	r3, #8
 8008062:	230a      	movne	r3, #10
 8008064:	2100      	movs	r1, #0
 8008066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800806a:	6865      	ldr	r5, [r4, #4]
 800806c:	60a5      	str	r5, [r4, #8]
 800806e:	2d00      	cmp	r5, #0
 8008070:	bfa2      	ittt	ge
 8008072:	6821      	ldrge	r1, [r4, #0]
 8008074:	f021 0104 	bicge.w	r1, r1, #4
 8008078:	6021      	strge	r1, [r4, #0]
 800807a:	b90e      	cbnz	r6, 8008080 <_printf_i+0x114>
 800807c:	2d00      	cmp	r5, #0
 800807e:	d04b      	beq.n	8008118 <_printf_i+0x1ac>
 8008080:	4615      	mov	r5, r2
 8008082:	fbb6 f1f3 	udiv	r1, r6, r3
 8008086:	fb03 6711 	mls	r7, r3, r1, r6
 800808a:	5dc7      	ldrb	r7, [r0, r7]
 800808c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008090:	4637      	mov	r7, r6
 8008092:	42bb      	cmp	r3, r7
 8008094:	460e      	mov	r6, r1
 8008096:	d9f4      	bls.n	8008082 <_printf_i+0x116>
 8008098:	2b08      	cmp	r3, #8
 800809a:	d10b      	bne.n	80080b4 <_printf_i+0x148>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	07de      	lsls	r6, r3, #31
 80080a0:	d508      	bpl.n	80080b4 <_printf_i+0x148>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	6861      	ldr	r1, [r4, #4]
 80080a6:	4299      	cmp	r1, r3
 80080a8:	bfde      	ittt	le
 80080aa:	2330      	movle	r3, #48	; 0x30
 80080ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080b4:	1b52      	subs	r2, r2, r5
 80080b6:	6122      	str	r2, [r4, #16]
 80080b8:	f8cd a000 	str.w	sl, [sp]
 80080bc:	464b      	mov	r3, r9
 80080be:	aa03      	add	r2, sp, #12
 80080c0:	4621      	mov	r1, r4
 80080c2:	4640      	mov	r0, r8
 80080c4:	f7ff fee4 	bl	8007e90 <_printf_common>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d14a      	bne.n	8008162 <_printf_i+0x1f6>
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	b004      	add	sp, #16
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	f043 0320 	orr.w	r3, r3, #32
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	4833      	ldr	r0, [pc, #204]	; (80081ac <_printf_i+0x240>)
 80080e0:	2778      	movs	r7, #120	; 0x78
 80080e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	6829      	ldr	r1, [r5, #0]
 80080ea:	061f      	lsls	r7, r3, #24
 80080ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80080f0:	d402      	bmi.n	80080f8 <_printf_i+0x18c>
 80080f2:	065f      	lsls	r7, r3, #25
 80080f4:	bf48      	it	mi
 80080f6:	b2b6      	uxthmi	r6, r6
 80080f8:	07df      	lsls	r7, r3, #31
 80080fa:	bf48      	it	mi
 80080fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008100:	6029      	str	r1, [r5, #0]
 8008102:	bf48      	it	mi
 8008104:	6023      	strmi	r3, [r4, #0]
 8008106:	b91e      	cbnz	r6, 8008110 <_printf_i+0x1a4>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	f023 0320 	bic.w	r3, r3, #32
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	2310      	movs	r3, #16
 8008112:	e7a7      	b.n	8008064 <_printf_i+0xf8>
 8008114:	4824      	ldr	r0, [pc, #144]	; (80081a8 <_printf_i+0x23c>)
 8008116:	e7e4      	b.n	80080e2 <_printf_i+0x176>
 8008118:	4615      	mov	r5, r2
 800811a:	e7bd      	b.n	8008098 <_printf_i+0x12c>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	6826      	ldr	r6, [r4, #0]
 8008120:	6961      	ldr	r1, [r4, #20]
 8008122:	1d18      	adds	r0, r3, #4
 8008124:	6028      	str	r0, [r5, #0]
 8008126:	0635      	lsls	r5, r6, #24
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	d501      	bpl.n	8008130 <_printf_i+0x1c4>
 800812c:	6019      	str	r1, [r3, #0]
 800812e:	e002      	b.n	8008136 <_printf_i+0x1ca>
 8008130:	0670      	lsls	r0, r6, #25
 8008132:	d5fb      	bpl.n	800812c <_printf_i+0x1c0>
 8008134:	8019      	strh	r1, [r3, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	4615      	mov	r5, r2
 800813c:	e7bc      	b.n	80080b8 <_printf_i+0x14c>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	1d1a      	adds	r2, r3, #4
 8008142:	602a      	str	r2, [r5, #0]
 8008144:	681d      	ldr	r5, [r3, #0]
 8008146:	6862      	ldr	r2, [r4, #4]
 8008148:	2100      	movs	r1, #0
 800814a:	4628      	mov	r0, r5
 800814c:	f7f8 f850 	bl	80001f0 <memchr>
 8008150:	b108      	cbz	r0, 8008156 <_printf_i+0x1ea>
 8008152:	1b40      	subs	r0, r0, r5
 8008154:	6060      	str	r0, [r4, #4]
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	6123      	str	r3, [r4, #16]
 800815a:	2300      	movs	r3, #0
 800815c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008160:	e7aa      	b.n	80080b8 <_printf_i+0x14c>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	462a      	mov	r2, r5
 8008166:	4649      	mov	r1, r9
 8008168:	4640      	mov	r0, r8
 800816a:	47d0      	blx	sl
 800816c:	3001      	adds	r0, #1
 800816e:	d0ad      	beq.n	80080cc <_printf_i+0x160>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	079b      	lsls	r3, r3, #30
 8008174:	d413      	bmi.n	800819e <_printf_i+0x232>
 8008176:	68e0      	ldr	r0, [r4, #12]
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	4298      	cmp	r0, r3
 800817c:	bfb8      	it	lt
 800817e:	4618      	movlt	r0, r3
 8008180:	e7a6      	b.n	80080d0 <_printf_i+0x164>
 8008182:	2301      	movs	r3, #1
 8008184:	4632      	mov	r2, r6
 8008186:	4649      	mov	r1, r9
 8008188:	4640      	mov	r0, r8
 800818a:	47d0      	blx	sl
 800818c:	3001      	adds	r0, #1
 800818e:	d09d      	beq.n	80080cc <_printf_i+0x160>
 8008190:	3501      	adds	r5, #1
 8008192:	68e3      	ldr	r3, [r4, #12]
 8008194:	9903      	ldr	r1, [sp, #12]
 8008196:	1a5b      	subs	r3, r3, r1
 8008198:	42ab      	cmp	r3, r5
 800819a:	dcf2      	bgt.n	8008182 <_printf_i+0x216>
 800819c:	e7eb      	b.n	8008176 <_printf_i+0x20a>
 800819e:	2500      	movs	r5, #0
 80081a0:	f104 0619 	add.w	r6, r4, #25
 80081a4:	e7f5      	b.n	8008192 <_printf_i+0x226>
 80081a6:	bf00      	nop
 80081a8:	080088b1 	.word	0x080088b1
 80081ac:	080088c2 	.word	0x080088c2

080081b0 <__sflush_r>:
 80081b0:	898a      	ldrh	r2, [r1, #12]
 80081b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	4605      	mov	r5, r0
 80081b8:	0710      	lsls	r0, r2, #28
 80081ba:	460c      	mov	r4, r1
 80081bc:	d458      	bmi.n	8008270 <__sflush_r+0xc0>
 80081be:	684b      	ldr	r3, [r1, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc05      	bgt.n	80081d0 <__sflush_r+0x20>
 80081c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dc02      	bgt.n	80081d0 <__sflush_r+0x20>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d2:	2e00      	cmp	r6, #0
 80081d4:	d0f9      	beq.n	80081ca <__sflush_r+0x1a>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081dc:	682f      	ldr	r7, [r5, #0]
 80081de:	6a21      	ldr	r1, [r4, #32]
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	d032      	beq.n	800824a <__sflush_r+0x9a>
 80081e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	075a      	lsls	r2, r3, #29
 80081ea:	d505      	bpl.n	80081f8 <__sflush_r+0x48>
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	1ac0      	subs	r0, r0, r3
 80081f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081f2:	b10b      	cbz	r3, 80081f8 <__sflush_r+0x48>
 80081f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081f6:	1ac0      	subs	r0, r0, r3
 80081f8:	2300      	movs	r3, #0
 80081fa:	4602      	mov	r2, r0
 80081fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081fe:	6a21      	ldr	r1, [r4, #32]
 8008200:	4628      	mov	r0, r5
 8008202:	47b0      	blx	r6
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	d106      	bne.n	8008218 <__sflush_r+0x68>
 800820a:	6829      	ldr	r1, [r5, #0]
 800820c:	291d      	cmp	r1, #29
 800820e:	d82b      	bhi.n	8008268 <__sflush_r+0xb8>
 8008210:	4a29      	ldr	r2, [pc, #164]	; (80082b8 <__sflush_r+0x108>)
 8008212:	410a      	asrs	r2, r1
 8008214:	07d6      	lsls	r6, r2, #31
 8008216:	d427      	bmi.n	8008268 <__sflush_r+0xb8>
 8008218:	2200      	movs	r2, #0
 800821a:	6062      	str	r2, [r4, #4]
 800821c:	04d9      	lsls	r1, r3, #19
 800821e:	6922      	ldr	r2, [r4, #16]
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	d504      	bpl.n	800822e <__sflush_r+0x7e>
 8008224:	1c42      	adds	r2, r0, #1
 8008226:	d101      	bne.n	800822c <__sflush_r+0x7c>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b903      	cbnz	r3, 800822e <__sflush_r+0x7e>
 800822c:	6560      	str	r0, [r4, #84]	; 0x54
 800822e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008230:	602f      	str	r7, [r5, #0]
 8008232:	2900      	cmp	r1, #0
 8008234:	d0c9      	beq.n	80081ca <__sflush_r+0x1a>
 8008236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800823a:	4299      	cmp	r1, r3
 800823c:	d002      	beq.n	8008244 <__sflush_r+0x94>
 800823e:	4628      	mov	r0, r5
 8008240:	f7ff fbd6 	bl	80079f0 <_free_r>
 8008244:	2000      	movs	r0, #0
 8008246:	6360      	str	r0, [r4, #52]	; 0x34
 8008248:	e7c0      	b.n	80081cc <__sflush_r+0x1c>
 800824a:	2301      	movs	r3, #1
 800824c:	4628      	mov	r0, r5
 800824e:	47b0      	blx	r6
 8008250:	1c41      	adds	r1, r0, #1
 8008252:	d1c8      	bne.n	80081e6 <__sflush_r+0x36>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0c5      	beq.n	80081e6 <__sflush_r+0x36>
 800825a:	2b1d      	cmp	r3, #29
 800825c:	d001      	beq.n	8008262 <__sflush_r+0xb2>
 800825e:	2b16      	cmp	r3, #22
 8008260:	d101      	bne.n	8008266 <__sflush_r+0xb6>
 8008262:	602f      	str	r7, [r5, #0]
 8008264:	e7b1      	b.n	80081ca <__sflush_r+0x1a>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	e7ad      	b.n	80081cc <__sflush_r+0x1c>
 8008270:	690f      	ldr	r7, [r1, #16]
 8008272:	2f00      	cmp	r7, #0
 8008274:	d0a9      	beq.n	80081ca <__sflush_r+0x1a>
 8008276:	0793      	lsls	r3, r2, #30
 8008278:	680e      	ldr	r6, [r1, #0]
 800827a:	bf08      	it	eq
 800827c:	694b      	ldreq	r3, [r1, #20]
 800827e:	600f      	str	r7, [r1, #0]
 8008280:	bf18      	it	ne
 8008282:	2300      	movne	r3, #0
 8008284:	eba6 0807 	sub.w	r8, r6, r7
 8008288:	608b      	str	r3, [r1, #8]
 800828a:	f1b8 0f00 	cmp.w	r8, #0
 800828e:	dd9c      	ble.n	80081ca <__sflush_r+0x1a>
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008294:	4643      	mov	r3, r8
 8008296:	463a      	mov	r2, r7
 8008298:	4628      	mov	r0, r5
 800829a:	47b0      	blx	r6
 800829c:	2800      	cmp	r0, #0
 800829e:	dc06      	bgt.n	80082ae <__sflush_r+0xfe>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ac:	e78e      	b.n	80081cc <__sflush_r+0x1c>
 80082ae:	4407      	add	r7, r0
 80082b0:	eba8 0800 	sub.w	r8, r8, r0
 80082b4:	e7e9      	b.n	800828a <__sflush_r+0xda>
 80082b6:	bf00      	nop
 80082b8:	dfbffffe 	.word	0xdfbffffe

080082bc <_fflush_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	690b      	ldr	r3, [r1, #16]
 80082c0:	4605      	mov	r5, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b913      	cbnz	r3, 80082cc <_fflush_r+0x10>
 80082c6:	2500      	movs	r5, #0
 80082c8:	4628      	mov	r0, r5
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	b118      	cbz	r0, 80082d6 <_fflush_r+0x1a>
 80082ce:	6a03      	ldr	r3, [r0, #32]
 80082d0:	b90b      	cbnz	r3, 80082d6 <_fflush_r+0x1a>
 80082d2:	f7ff f987 	bl	80075e4 <__sinit>
 80082d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f3      	beq.n	80082c6 <_fflush_r+0xa>
 80082de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082e0:	07d0      	lsls	r0, r2, #31
 80082e2:	d404      	bmi.n	80082ee <_fflush_r+0x32>
 80082e4:	0599      	lsls	r1, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_fflush_r+0x32>
 80082e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ea:	f7ff fb7e 	bl	80079ea <__retarget_lock_acquire_recursive>
 80082ee:	4628      	mov	r0, r5
 80082f0:	4621      	mov	r1, r4
 80082f2:	f7ff ff5d 	bl	80081b0 <__sflush_r>
 80082f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082f8:	07da      	lsls	r2, r3, #31
 80082fa:	4605      	mov	r5, r0
 80082fc:	d4e4      	bmi.n	80082c8 <_fflush_r+0xc>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	059b      	lsls	r3, r3, #22
 8008302:	d4e1      	bmi.n	80082c8 <_fflush_r+0xc>
 8008304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008306:	f7ff fb71 	bl	80079ec <__retarget_lock_release_recursive>
 800830a:	e7dd      	b.n	80082c8 <_fflush_r+0xc>

0800830c <__swhatbuf_r>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	460c      	mov	r4, r1
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	2900      	cmp	r1, #0
 8008316:	b096      	sub	sp, #88	; 0x58
 8008318:	4615      	mov	r5, r2
 800831a:	461e      	mov	r6, r3
 800831c:	da0d      	bge.n	800833a <__swhatbuf_r+0x2e>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008324:	f04f 0100 	mov.w	r1, #0
 8008328:	bf0c      	ite	eq
 800832a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800832e:	2340      	movne	r3, #64	; 0x40
 8008330:	2000      	movs	r0, #0
 8008332:	6031      	str	r1, [r6, #0]
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	b016      	add	sp, #88	; 0x58
 8008338:	bd70      	pop	{r4, r5, r6, pc}
 800833a:	466a      	mov	r2, sp
 800833c:	f000 f862 	bl	8008404 <_fstat_r>
 8008340:	2800      	cmp	r0, #0
 8008342:	dbec      	blt.n	800831e <__swhatbuf_r+0x12>
 8008344:	9901      	ldr	r1, [sp, #4]
 8008346:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800834a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800834e:	4259      	negs	r1, r3
 8008350:	4159      	adcs	r1, r3
 8008352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008356:	e7eb      	b.n	8008330 <__swhatbuf_r+0x24>

08008358 <__smakebuf_r>:
 8008358:	898b      	ldrh	r3, [r1, #12]
 800835a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800835c:	079d      	lsls	r5, r3, #30
 800835e:	4606      	mov	r6, r0
 8008360:	460c      	mov	r4, r1
 8008362:	d507      	bpl.n	8008374 <__smakebuf_r+0x1c>
 8008364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	2301      	movs	r3, #1
 800836e:	6163      	str	r3, [r4, #20]
 8008370:	b002      	add	sp, #8
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	ab01      	add	r3, sp, #4
 8008376:	466a      	mov	r2, sp
 8008378:	f7ff ffc8 	bl	800830c <__swhatbuf_r>
 800837c:	9900      	ldr	r1, [sp, #0]
 800837e:	4605      	mov	r5, r0
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff fba1 	bl	8007ac8 <_malloc_r>
 8008386:	b948      	cbnz	r0, 800839c <__smakebuf_r+0x44>
 8008388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838c:	059a      	lsls	r2, r3, #22
 800838e:	d4ef      	bmi.n	8008370 <__smakebuf_r+0x18>
 8008390:	f023 0303 	bic.w	r3, r3, #3
 8008394:	f043 0302 	orr.w	r3, r3, #2
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	e7e3      	b.n	8008364 <__smakebuf_r+0xc>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	6020      	str	r0, [r4, #0]
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	9b00      	ldr	r3, [sp, #0]
 80083a8:	6163      	str	r3, [r4, #20]
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	6120      	str	r0, [r4, #16]
 80083ae:	b15b      	cbz	r3, 80083c8 <__smakebuf_r+0x70>
 80083b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 f837 	bl	8008428 <_isatty_r>
 80083ba:	b128      	cbz	r0, 80083c8 <__smakebuf_r+0x70>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	f043 0301 	orr.w	r3, r3, #1
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	431d      	orrs	r5, r3
 80083cc:	81a5      	strh	r5, [r4, #12]
 80083ce:	e7cf      	b.n	8008370 <__smakebuf_r+0x18>

080083d0 <memmove>:
 80083d0:	4288      	cmp	r0, r1
 80083d2:	b510      	push	{r4, lr}
 80083d4:	eb01 0402 	add.w	r4, r1, r2
 80083d8:	d902      	bls.n	80083e0 <memmove+0x10>
 80083da:	4284      	cmp	r4, r0
 80083dc:	4623      	mov	r3, r4
 80083de:	d807      	bhi.n	80083f0 <memmove+0x20>
 80083e0:	1e43      	subs	r3, r0, #1
 80083e2:	42a1      	cmp	r1, r4
 80083e4:	d008      	beq.n	80083f8 <memmove+0x28>
 80083e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ee:	e7f8      	b.n	80083e2 <memmove+0x12>
 80083f0:	4402      	add	r2, r0
 80083f2:	4601      	mov	r1, r0
 80083f4:	428a      	cmp	r2, r1
 80083f6:	d100      	bne.n	80083fa <memmove+0x2a>
 80083f8:	bd10      	pop	{r4, pc}
 80083fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008402:	e7f7      	b.n	80083f4 <memmove+0x24>

08008404 <_fstat_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	; (8008424 <_fstat_r+0x20>)
 8008408:	2300      	movs	r3, #0
 800840a:	4604      	mov	r4, r0
 800840c:	4608      	mov	r0, r1
 800840e:	4611      	mov	r1, r2
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	f7fa fedc 	bl	80031ce <_fstat>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d102      	bne.n	8008420 <_fstat_r+0x1c>
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	b103      	cbz	r3, 8008420 <_fstat_r+0x1c>
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	bd38      	pop	{r3, r4, r5, pc}
 8008422:	bf00      	nop
 8008424:	20000ae4 	.word	0x20000ae4

08008428 <_isatty_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d06      	ldr	r5, [pc, #24]	; (8008444 <_isatty_r+0x1c>)
 800842c:	2300      	movs	r3, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	f7fa fedb 	bl	80031ee <_isatty>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_isatty_r+0x1a>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_isatty_r+0x1a>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	20000ae4 	.word	0x20000ae4

08008448 <_sbrk_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d06      	ldr	r5, [pc, #24]	; (8008464 <_sbrk_r+0x1c>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7fa fee4 	bl	8003220 <_sbrk>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_sbrk_r+0x1a>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_sbrk_r+0x1a>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	20000ae4 	.word	0x20000ae4

08008468 <memcpy>:
 8008468:	440a      	add	r2, r1
 800846a:	4291      	cmp	r1, r2
 800846c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008470:	d100      	bne.n	8008474 <memcpy+0xc>
 8008472:	4770      	bx	lr
 8008474:	b510      	push	{r4, lr}
 8008476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800847a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800847e:	4291      	cmp	r1, r2
 8008480:	d1f9      	bne.n	8008476 <memcpy+0xe>
 8008482:	bd10      	pop	{r4, pc}

08008484 <_realloc_r>:
 8008484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008488:	4680      	mov	r8, r0
 800848a:	4614      	mov	r4, r2
 800848c:	460e      	mov	r6, r1
 800848e:	b921      	cbnz	r1, 800849a <_realloc_r+0x16>
 8008490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008494:	4611      	mov	r1, r2
 8008496:	f7ff bb17 	b.w	8007ac8 <_malloc_r>
 800849a:	b92a      	cbnz	r2, 80084a8 <_realloc_r+0x24>
 800849c:	f7ff faa8 	bl	80079f0 <_free_r>
 80084a0:	4625      	mov	r5, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a8:	f000 f81b 	bl	80084e2 <_malloc_usable_size_r>
 80084ac:	4284      	cmp	r4, r0
 80084ae:	4607      	mov	r7, r0
 80084b0:	d802      	bhi.n	80084b8 <_realloc_r+0x34>
 80084b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084b6:	d812      	bhi.n	80084de <_realloc_r+0x5a>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7ff fb04 	bl	8007ac8 <_malloc_r>
 80084c0:	4605      	mov	r5, r0
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d0ed      	beq.n	80084a2 <_realloc_r+0x1e>
 80084c6:	42bc      	cmp	r4, r7
 80084c8:	4622      	mov	r2, r4
 80084ca:	4631      	mov	r1, r6
 80084cc:	bf28      	it	cs
 80084ce:	463a      	movcs	r2, r7
 80084d0:	f7ff ffca 	bl	8008468 <memcpy>
 80084d4:	4631      	mov	r1, r6
 80084d6:	4640      	mov	r0, r8
 80084d8:	f7ff fa8a 	bl	80079f0 <_free_r>
 80084dc:	e7e1      	b.n	80084a2 <_realloc_r+0x1e>
 80084de:	4635      	mov	r5, r6
 80084e0:	e7df      	b.n	80084a2 <_realloc_r+0x1e>

080084e2 <_malloc_usable_size_r>:
 80084e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e6:	1f18      	subs	r0, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bfbc      	itt	lt
 80084ec:	580b      	ldrlt	r3, [r1, r0]
 80084ee:	18c0      	addlt	r0, r0, r3
 80084f0:	4770      	bx	lr
	...

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
