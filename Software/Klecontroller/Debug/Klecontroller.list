
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800797c  0800797c  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007984  08007984  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800798c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  200000f8  08007a84  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a50  08007a84  00020a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c16  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000411f  00000000  00000000  00036d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111e  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd27  00000000  00000000  0003d636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc62  00000000  00000000  0005935d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f995  00000000  00000000  00076fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000612c  00000000  00000000  00116954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f8 	.word	0x200000f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007670 	.word	0x08007670

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000fc 	.word	0x200000fc
 80001d4:	08007670 	.word	0x08007670

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f6:	3301      	adds	r3, #1
 80004f8:	425a      	negs	r2, r3
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	f002 021f 	and.w	r2, r2, #31
 8000502:	bf58      	it	pl
 8000504:	4253      	negpl	r3, r2
 8000506:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800050e:	7bfa      	ldrb	r2, [r7, #15]
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	e00b      	b.n	8000530 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	78fa      	ldrb	r2, [r7, #3]
 8000524:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	7bfa      	ldrb	r2, [r7, #15]
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054c:	3301      	adds	r3, #1
 800054e:	425a      	negs	r2, r3
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	f002 021f 	and.w	r2, r2, #31
 8000558:	bf58      	it	pl
 800055a:	4253      	negpl	r3, r2
 800055c:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800056a:	429a      	cmp	r2, r3
 800056c:	d101      	bne.n	8000572 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 800056e:	2301      	movs	r3, #1
 8000570:	e00c      	b.n	800058c <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	5c9a      	ldrb	r2, [r3, r2]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7bfa      	ldrb	r2, [r7, #15]
 8000586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <MX_ADC1_Init+0xec>)
 80005ac:	4a36      	ldr	r2, [pc, #216]	; (8000688 <MX_ADC1_Init+0xf0>)
 80005ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MX_ADC1_Init+0xec>)
 80005b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b32      	ldr	r3, [pc, #200]	; (8000684 <MX_ADC1_Init+0xec>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005be:	4b31      	ldr	r3, [pc, #196]	; (8000684 <MX_ADC1_Init+0xec>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c4:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_ADC1_Init+0xec>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <MX_ADC1_Init+0xec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <MX_ADC1_Init+0xec>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_ADC1_Init+0xec>)
 80005da:	4a2c      	ldr	r2, [pc, #176]	; (800068c <MX_ADC1_Init+0xf4>)
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <MX_ADC1_Init+0xec>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <MX_ADC1_Init+0xec>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_ADC1_Init+0xec>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_ADC1_Init+0xec>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	4822      	ldr	r0, [pc, #136]	; (8000684 <MX_ADC1_Init+0xec>)
 80005fa:	f002 fc27 	bl	8002e4c <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000604:	f000 ffc4 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000608:	230b      	movs	r3, #11
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000610:	2307      	movs	r3, #7
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <MX_ADC1_Init+0xec>)
 800061a:	f002 fe79 	bl	8003310 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000624:	f000 ffb4 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000628:	230c      	movs	r3, #12
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <MX_ADC1_Init+0xec>)
 8000636:	f002 fe6b 	bl	8003310 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000640:	f000 ffa6 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000644:	2301      	movs	r3, #1
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ADC1_Init+0xec>)
 8000652:	f002 fe5d 	bl	8003310 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800065c:	f000 ff98 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000660:	2302      	movs	r3, #2
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0xec>)
 800066e:	f002 fe4f 	bl	8003310 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000678:	f000 ff8a 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000114 	.word	0x20000114
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <HAL_ADC_MspInit+0x110>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d171      	bne.n	8000796 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000706:	2306      	movs	r3, #6
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4823      	ldr	r0, [pc, #140]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800071a:	f003 fd57 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 800071e:	2306      	movs	r3, #6
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	481e      	ldr	r0, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x11c>)
 8000732:	f003 fd4b 	bl	80041cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0x124>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000764:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800077c:	f003 f994 	bl	8003aa8 <HAL_DMA_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000786:	f000 ff03 	bl	8001590 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800078e:	639a      	str	r2, [r3, #56]	; 0x38
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012000 	.word	0x40012000
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020000 	.word	0x40020000
 80007b0:	2000015c 	.word	0x2000015c
 80007b4:	40026410 	.word	0x40026410

080007b8 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <Inputs_Init+0xa8>)
 80007c0:	f005 feba 	bl	8006538 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 80007c4:	2228      	movs	r2, #40	; 0x28
 80007c6:	4927      	ldr	r1, [pc, #156]	; (8000864 <Inputs_Init+0xac>)
 80007c8:	4827      	ldr	r0, [pc, #156]	; (8000868 <Inputs_Init+0xb0>)
 80007ca:	f002 fc93 	bl	80030f4 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f002 fb18 	bl	8002e04 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <Inputs_Init+0xb4>)
 80007d6:	4926      	ldr	r1, [pc, #152]	; (8000870 <Inputs_Init+0xb8>)
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <Inputs_Init+0xbc>)
 80007da:	f000 fc37 	bl	800104c <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <Inputs_Init+0xc0>)
 80007e0:	4926      	ldr	r1, [pc, #152]	; (800087c <Inputs_Init+0xc4>)
 80007e2:	4827      	ldr	r0, [pc, #156]	; (8000880 <Inputs_Init+0xc8>)
 80007e4:	f000 fc32 	bl	800104c <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 80007e8:	4822      	ldr	r0, [pc, #136]	; (8000874 <Inputs_Init+0xbc>)
 80007ea:	f000 fc4a 	bl	8001082 <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 80007ee:	4824      	ldr	r0, [pc, #144]	; (8000880 <Inputs_Init+0xc8>)
 80007f0:	f000 fc47 	bl	8001082 <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80007f4:	213c      	movs	r1, #60	; 0x3c
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <Inputs_Init+0xa8>)
 80007f8:	f005 ff9e 	bl	8006738 <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 80, 2000);
 80007fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2350      	movs	r3, #80	; 0x50
 8000804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000808:	491e      	ldr	r1, [pc, #120]	; (8000884 <Inputs_Init+0xcc>)
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <Inputs_Init+0xd0>)
 800080c:	f000 f960 	bl	8000ad0 <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 80, 2000);
 8000810:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2350      	movs	r3, #80	; 0x50
 8000818:	2204      	movs	r2, #4
 800081a:	491c      	ldr	r1, [pc, #112]	; (800088c <Inputs_Init+0xd4>)
 800081c:	481c      	ldr	r0, [pc, #112]	; (8000890 <Inputs_Init+0xd8>)
 800081e:	f000 f957 	bl	8000ad0 <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 80, 2000);
 8000822:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2350      	movs	r3, #80	; 0x50
 800082a:	2201      	movs	r2, #1
 800082c:	4915      	ldr	r1, [pc, #84]	; (8000884 <Inputs_Init+0xcc>)
 800082e:	4819      	ldr	r0, [pc, #100]	; (8000894 <Inputs_Init+0xdc>)
 8000830:	f000 f94e 	bl	8000ad0 <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 80, 2000);
 8000834:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2350      	movs	r3, #80	; 0x50
 800083c:	2201      	movs	r2, #1
 800083e:	4916      	ldr	r1, [pc, #88]	; (8000898 <Inputs_Init+0xe0>)
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Inputs_Init+0xe4>)
 8000842:	f000 f945 	bl	8000ad0 <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 80, 2000);
 8000846:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2350      	movs	r3, #80	; 0x50
 800084e:	2220      	movs	r2, #32
 8000850:	4911      	ldr	r1, [pc, #68]	; (8000898 <Inputs_Init+0xe0>)
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <Inputs_Init+0xe8>)
 8000854:	f000 f93c 	bl	8000ad0 <DB_ButtonInit>
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000870 	.word	0x20000870
 8000864:	200001bc 	.word	0x200001bc
 8000868:	20000114 	.word	0x20000114
 800086c:	2000020e 	.word	0x2000020e
 8000870:	2000020c 	.word	0x2000020c
 8000874:	20000214 	.word	0x20000214
 8000878:	20000212 	.word	0x20000212
 800087c:	20000210 	.word	0x20000210
 8000880:	2000022c 	.word	0x2000022c
 8000884:	40020800 	.word	0x40020800
 8000888:	20000244 	.word	0x20000244
 800088c:	40020c00 	.word	0x40020c00
 8000890:	20000264 	.word	0x20000264
 8000894:	20000284 	.word	0x20000284
 8000898:	40020000 	.word	0x40020000
 800089c:	200002a4 	.word	0x200002a4
 80008a0:	200002c4 	.word	0x200002c4

080008a4 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 80008bc:	2300      	movs	r3, #0
 80008be:	77fb      	strb	r3, [r7, #31]
 80008c0:	e021      	b.n	8000906 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7ffa      	ldrb	r2, [r7, #31]
 80008c6:	4924      	ldr	r1, [pc, #144]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008c8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008cc:	4413      	add	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	7ffa      	ldrb	r2, [r7, #31]
 80008d4:	3201      	adds	r2, #1
 80008d6:	4920      	ldr	r1, [pc, #128]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008dc:	4413      	add	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	7ffa      	ldrb	r2, [r7, #31]
 80008e4:	3202      	adds	r2, #2
 80008e6:	491c      	ldr	r1, [pc, #112]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008ec:	4413      	add	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	7ffa      	ldrb	r2, [r7, #31]
 80008f4:	3203      	adds	r2, #3
 80008f6:	4918      	ldr	r1, [pc, #96]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb4>)
 80008f8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000900:	7ffb      	ldrb	r3, [r7, #31]
 8000902:	3304      	adds	r3, #4
 8000904:	77fb      	strb	r3, [r7, #31]
 8000906:	7ffb      	ldrb	r3, [r7, #31]
 8000908:	2b24      	cmp	r3, #36	; 0x24
 800090a:	d9da      	bls.n	80008c2 <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800091a:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800092a:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800093a:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_ADC_ConvCpltCallback+0xbc>)
 800094a:	80da      	strh	r2, [r3, #6]
}
 800094c:	bf00      	nop
 800094e:	3724      	adds	r7, #36	; 0x24
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	200001bc 	.word	0x200001bc
 800095c:	cccccccd 	.word	0xcccccccd
 8000960:	2000020c 	.word	0x2000020c

08000964 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <Inputs_GetEncoderCount+0x4c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <Inputs_GetEncoderCount+0x50>)
 8000972:	8812      	ldrh	r2, [r2, #0]
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	dc03      	bgt.n	8000986 <Inputs_GetEncoderCount+0x22>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f113 0f03 	cmn.w	r3, #3
 8000984:	da0d      	bge.n	80009a2 <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <Inputs_GetEncoderCount+0x4c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <Inputs_GetEncoderCount+0x50>)
 8000990:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	da00      	bge.n	800099a <Inputs_GetEncoderCount+0x36>
 8000998:	3303      	adds	r3, #3
 800099a:	109b      	asrs	r3, r3, #2
 800099c:	425b      	negs	r3, r3
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	e000      	b.n	80009a4 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 80009a2:	2300      	movs	r3, #0
	}
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	20000870 	.word	0x20000870
 80009b4:	200002e4 	.word	0x200002e4

080009b8 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <Inputs_ButtonsRoutine+0x28>)
 80009be:	f000 f8d3 	bl	8000b68 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <Inputs_ButtonsRoutine+0x2c>)
 80009c4:	f000 f8d0 	bl	8000b68 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <Inputs_ButtonsRoutine+0x30>)
 80009ca:	f000 f8cd 	bl	8000b68 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <Inputs_ButtonsRoutine+0x34>)
 80009d0:	f000 f8ca 	bl	8000b68 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <Inputs_ButtonsRoutine+0x38>)
 80009d6:	f000 f8c7 	bl	8000b68 <DB_ButtonProcess>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000244 	.word	0x20000244
 80009e4:	20000264 	.word	0x20000264
 80009e8:	200002a4 	.word	0x200002a4
 80009ec:	20000284 	.word	0x20000284
 80009f0:	200002c4 	.word	0x200002c4

080009f4 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d82b      	bhi.n	8000a60 <Inputs_ButtonsRegisterCallback+0x6c>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <Inputs_ButtonsRegisterCallback+0x1c>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a31 	.word	0x08000a31
 8000a18:	08000a3d 	.word	0x08000a3d
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000a55 	.word	0x08000a55
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	68b9      	ldr	r1, [r7, #8]
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <Inputs_ButtonsRegisterCallback+0x78>)
 8000a2a:	f000 f874 	bl	8000b16 <DB_ButtonPressCallbackRegister>
		break;
 8000a2e:	e018      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <Inputs_ButtonsRegisterCallback+0x7c>)
 8000a36:	f000 f86e 	bl	8000b16 <DB_ButtonPressCallbackRegister>
		break;
 8000a3a:	e012      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	68b9      	ldr	r1, [r7, #8]
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <Inputs_ButtonsRegisterCallback+0x80>)
 8000a42:	f000 f868 	bl	8000b16 <DB_ButtonPressCallbackRegister>
		break;
 8000a46:	e00c      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <Inputs_ButtonsRegisterCallback+0x84>)
 8000a4e:	f000 f862 	bl	8000b16 <DB_ButtonPressCallbackRegister>
		break;
 8000a52:	e006      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <Inputs_ButtonsRegisterCallback+0x88>)
 8000a5a:	f000 f85c 	bl	8000b16 <DB_ButtonPressCallbackRegister>
		break;
 8000a5e:	e000      	b.n	8000a62 <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 8000a60:	bf00      	nop
	}
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000244 	.word	0x20000244
 8000a70:	20000264 	.word	0x20000264
 8000a74:	20000284 	.word	0x20000284
 8000a78:	200002a4 	.word	0x200002a4
 8000a7c:	200002c4 	.word	0x200002c4

08000a80 <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <Inputs_ClearButtonsCallbacks+0x3c>)
 8000a8a:	f000 f844 	bl	8000b16 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <Inputs_ClearButtonsCallbacks+0x40>)
 8000a94:	f000 f83f 	bl	8000b16 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <Inputs_ClearButtonsCallbacks+0x44>)
 8000a9e:	f000 f83a 	bl	8000b16 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <Inputs_ClearButtonsCallbacks+0x48>)
 8000aa8:	f000 f835 	bl	8000b16 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <Inputs_ClearButtonsCallbacks+0x4c>)
 8000ab2:	f000 f830 	bl	8000b16 <DB_ButtonPressCallbackRegister>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000244 	.word	0x20000244
 8000ac0:	20000264 	.word	0x20000264
 8000ac4:	20000284 	.word	0x20000284
 8000ac8:	200002a4 	.word	0x200002a4
 8000acc:	200002c4 	.word	0x200002c4

08000ad0 <DB_ButtonInit>:


#include "debounce.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4613      	mov	r3, r2
 8000ade:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	88fa      	ldrh	r2, [r7, #6]
 8000aea:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2200      	movs	r2, #0
 8000afc:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	615a      	str	r2, [r3, #20]
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	f003 fcc1 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <DB_IsButtonPressed+0x22>
	{
		return 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 8000b5c:	2300      	movs	r3, #0
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e1b      	ldrb	r3, [r3, #24]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d87f      	bhi.n	8000c78 <DB_ButtonProcess+0x110>
 8000b78:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <DB_ButtonProcess+0x18>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000b91 	.word	0x08000b91
 8000b84:	08000baf 	.word	0x08000baf
 8000b88:	08000be9 	.word	0x08000be9
 8000b8c:	08000c33 	.word	0x08000c33
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffd2 	bl	8000b3a <DB_IsButtonPressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d068      	beq.n	8000c6e <DB_ButtonProcess+0x106>
		{
			Button->ButtonState = DEBOUNCE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 8000ba2:	f002 f923 	bl	8002dec <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	61da      	str	r2, [r3, #28]
		}
		break;
 8000bac:	e05f      	b.n	8000c6e <DB_ButtonProcess+0x106>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8000bae:	f002 f91d 	bl	8002dec <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	1ad2      	subs	r2, r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d957      	bls.n	8000c72 <DB_ButtonProcess+0x10a>
		{
			if(DB_IsButtonPressed(Button))
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb9 	bl	8000b3a <DB_IsButtonPressed>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8000bd4:	f002 f90a 	bl	8002dec <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	61da      	str	r2, [r3, #28]
			else
			{
				Button->ButtonState = IDLE;
			}
		}
		break;
 8000bde:	e048      	b.n	8000c72 <DB_ButtonProcess+0x10a>
				Button->ButtonState = IDLE;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	761a      	strb	r2, [r3, #24]
		break;
 8000be6:	e044      	b.n	8000c72 <DB_ButtonProcess+0x10a>
	case PRESSED:
		if(HAL_GetTick() - (Button->LastTick) > 50 )
 8000be8:	f002 f900 	bl	8002dec <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b32      	cmp	r3, #50	; 0x32
 8000bf6:	d93e      	bls.n	8000c76 <DB_ButtonProcess+0x10e>
		{
			if(DB_IsButtonPressed(Button))
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff9e 	bl	8000b3a <DB_IsButtonPressed>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <DB_ButtonProcess+0xae>
			{
				Button->ButtonState = HOLD;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2203      	movs	r2, #3
 8000c08:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8000c0a:	f002 f8ef 	bl	8002dec <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	61da      	str	r2, [r3, #28]
				}
				Button->ButtonState = IDLE;
				printf("Debounce: Button pressed! \n");
			}
		}
		break;
 8000c14:	e02f      	b.n	8000c76 <DB_ButtonProcess+0x10e>
				if(NULL != Button->ButtonPressAction)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <DB_ButtonProcess+0xbc>
					Button->ButtonPressAction();
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	4798      	blx	r3
				Button->ButtonState = IDLE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button pressed! \n");
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <DB_ButtonProcess+0x118>)
 8000c2c:	f006 f98a 	bl	8006f44 <puts>
		break;
 8000c30:	e021      	b.n	8000c76 <DB_ButtonProcess+0x10e>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 8000c32:	f002 f8db 	bl	8002dec <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	1ad2      	subs	r2, r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d918      	bls.n	8000c78 <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonPressAction)
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff77 	bl	8000b3a <DB_IsButtonPressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <DB_ButtonProcess+0xf8>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <DB_ButtonProcess+0xf8>
			{
				Button->ButtonHoldAction();
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4798      	blx	r3
			}

			Button->ButtonState = IDLE;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button held! \r\n");
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <DB_ButtonProcess+0x11c>)
 8000c68:	f006 f96c 	bl	8006f44 <puts>
		}
	}
}
 8000c6c:	e004      	b.n	8000c78 <DB_ButtonProcess+0x110>
		break;
 8000c6e:	bf00      	nop
 8000c70:	e002      	b.n	8000c78 <DB_ButtonProcess+0x110>
		break;
 8000c72:	bf00      	nop
 8000c74:	e000      	b.n	8000c78 <DB_ButtonProcess+0x110>
		break;
 8000c76:	bf00      	nop
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	08007688 	.word	0x08007688
 8000c84:	080076a4 	.word	0x080076a4

08000c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_DMA_Init+0x3c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <MX_DMA_Init+0x3c>)
 8000c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_DMA_Init+0x3c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2038      	movs	r0, #56	; 0x38
 8000cb0:	f002 fec3 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cb4:	2038      	movs	r0, #56	; 0x38
 8000cb6:	f002 fedc 	bl	8003a72 <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a4f      	ldr	r2, [pc, #316]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a41      	ldr	r2, [pc, #260]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a3a      	ldr	r2, [pc, #232]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2124      	movs	r1, #36	; 0x24
 8000d6e:	4835      	ldr	r0, [pc, #212]	; (8000e44 <MX_GPIO_Init+0x17c>)
 8000d70:	f003 fbc8 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	21c0      	movs	r1, #192	; 0xc0
 8000d78:	4833      	ldr	r0, [pc, #204]	; (8000e48 <MX_GPIO_Init+0x180>)
 8000d7a:	f003 fbc3 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 8000d7e:	f240 4301 	movw	r3, #1025	; 0x401
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	482d      	ldr	r0, [pc, #180]	; (8000e48 <MX_GPIO_Init+0x180>)
 8000d94:	f003 fa1a 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 8000d98:	2321      	movs	r3, #33	; 0x21
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4828      	ldr	r0, [pc, #160]	; (8000e4c <MX_GPIO_Init+0x184>)
 8000dac:	f003 fa0e 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000db0:	2304      	movs	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481f      	ldr	r0, [pc, #124]	; (8000e44 <MX_GPIO_Init+0x17c>)
 8000dc8:	f003 fa00 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4818      	ldr	r0, [pc, #96]	; (8000e44 <MX_GPIO_Init+0x17c>)
 8000de4:	f003 f9f2 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8000de8:	23c0      	movs	r3, #192	; 0xc0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4812      	ldr	r0, [pc, #72]	; (8000e48 <MX_GPIO_Init+0x180>)
 8000e00:	f003 f9e4 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8000e04:	2304      	movs	r3, #4
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_GPIO_Init+0x188>)
 8000e18:	f003 f9d8 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_GPIO_Init+0x17c>)
 8000e34:	f003 f9ca 	bl	80041cc <HAL_GPIO_Init>

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020c00 	.word	0x40020c00

08000e54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e5a:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <MX_I2C1_Init+0x54>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_I2C1_Init+0x58>)
 8000e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e92:	f003 fb69 	bl	8004568 <HAL_I2C_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 fb78 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200002e8 	.word	0x200002e8
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	00061a80 	.word	0x00061a80

08000eb0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <MX_I2C3_Init+0x54>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_I2C3_Init+0x58>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_I2C3_Init+0x50>)
 8000eee:	f003 fb3b 	bl	8004568 <HAL_I2C_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ef8:	f000 fb4a 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000033c 	.word	0x2000033c
 8000f04:	40005c00 	.word	0x40005c00
 8000f08:	00061a80 	.word	0x00061a80

08000f0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a42      	ldr	r2, [pc, #264]	; (8001034 <HAL_I2C_MspInit+0x128>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12d      	bne.n	8000f8a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a40      	ldr	r2, [pc, #256]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4835      	ldr	r0, [pc, #212]	; (800103c <HAL_I2C_MspInit+0x130>)
 8000f68:	f003 f930 	bl	80041cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a30      	ldr	r2, [pc, #192]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f88:	e050      	b.n	800102c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <HAL_I2C_MspInit+0x134>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d14b      	bne.n	800102c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4816      	ldr	r0, [pc, #88]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000fea:	f003 f8ef 	bl	80041cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001000:	2304      	movs	r3, #4
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <HAL_I2C_MspInit+0x13c>)
 800100c:	f003 f8de 	bl	80041cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 800101a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_I2C_MspInit+0x12c>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005400 	.word	0x40005400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400
 8001040:	40005c00 	.word	0x40005c00
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000

0800104c <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <JoyS_Init+0x18>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	e000      	b.n	8001076 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 800108a:	f001 feaf 	bl	8002dec <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 8001090:	e015      	b.n	80010be <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <JoyS_SetIdleValues+0x24>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e007      	b.n	80010ce <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 80010be:	f001 fe95 	bl	8002dec <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b63      	cmp	r3, #99	; 0x63
 80010ca:	d9e2      	bls.n	8001092 <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 f861 	bl	80021a8 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 80010e6:	4906      	ldr	r1, [pc, #24]	; (8001100 <Radio_Init+0x28>)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 fe7a 	bl	8001de2 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <Radio_Init+0x2c>)
 80010f0:	f000 feb0 	bl	8001e54 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 80010f4:	f000 fcba 	bl	8001a6c <nRF24_TX_Mode>
#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080076c0 	.word	0x080076c0
 8001104:	080076c4 	.word	0x080076c4

08001108 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001118:	2300      	movs	r3, #0
 800111a:	73bb      	strb	r3, [r7, #14]
 800111c:	e010      	b.n	8001140 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <Radio_RxBufferPut+0x4c>)
 8001126:	f7ff f9dd 	bl	80004e4 <RBuffer_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	4313      	orrs	r3, r2
 8001132:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bba      	ldrb	r2, [r7, #14]
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3ea      	bcc.n	800111e <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003b8 	.word	0x200003b8

08001158 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);			//Get first byte
 800116a:	f107 030d 	add.w	r3, r7, #13
 800116e:	4619      	mov	r1, r3
 8001170:	4814      	ldr	r0, [pc, #80]	; (80011c4 <Radio_RxBufferGet+0x6c>)
 8001172:	f7ff f9e3 	bl	800053c <RBuffer_Read>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	4313      	orrs	r3, r2
 800117e:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 8001180:	e012      	b.n	80011a8 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	7b7a      	ldrb	r2, [r7, #13]
 800118a:	701a      	strb	r2, [r3, #0]
		Length++;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3301      	adds	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);
 8001192:	f107 030d 	add.w	r3, r7, #13
 8001196:	4619      	mov	r1, r3
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <Radio_RxBufferGet+0x6c>)
 800119a:	f7ff f9cf 	bl	800053c <RBuffer_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d002      	beq.n	80011b4 <Radio_RxBufferGet+0x5c>
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0e6      	beq.n	8001182 <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	701a      	strb	r2, [r3, #0]
	return Status;
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200003b8 	.word	0x200003b8

080011c8 <Radio_TxBufferSend>:
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
	return Status;
}

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 80011da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011de:	1d3a      	adds	r2, r7, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	4819      	ldr	r0, [pc, #100]	; (800124c <Radio_TxBufferSend+0x84>)
 80011e6:	f7ff f9a9 	bl	800053c <RBuffer_Read>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 80011f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8001202:	3328      	adds	r3, #40	; 0x28
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800120a:	2b04      	cmp	r3, #4
 800120c:	d003      	beq.n	8001216 <Radio_TxBufferSend+0x4e>
 800120e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0e1      	beq.n	80011da <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800121a:	2b00      	cmp	r3, #0
 800121c:	d110      	bne.n	8001240 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 800121e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff2c 	bl	8002084 <nRF24_SendPacket>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	4313      	orrs	r3, r2
 8001236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <Radio_TxBufferSend+0x88>)
 800123c:	2202      	movs	r2, #2
 800123e:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 8001240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001244:	4618      	mov	r0, r3
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000394 	.word	0x20000394
 8001250:	20000391 	.word	0x20000391

08001254 <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 800125a:	f240 4305 	movw	r3, #1029	; 0x405
 800125e:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <Radio_SendConnectionCheck+0x28>)
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2102      	movs	r1, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 ff0a 	bl	8002084 <nRF24_SendPacket>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000391 	.word	0x20000391

08001280 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process( void (*UserParser)(uint8_t *command, uint8_t length) )			//Process to put in main loop
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	nRF24_Event();											//check for irq's
 8001288:	f000 ff66 	bl	8002158 <nRF24_Event>

#ifdef CONTROLLER
	static uint32_t LastTick;

	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 800128c:	f001 fdae 	bl	8002dec <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <Radio_Process+0x90>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b32      	cmp	r3, #50	; 0x32
 800129a:	d91c      	bls.n	80012d6 <Radio_Process+0x56>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <Radio_Process+0x94>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <Radio_Process+0x34>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 80012a4:	f7ff ff90 	bl	80011c8 <Radio_TxBufferSend>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <Radio_Process+0x4c>
			{
				Radio_SendConnectionCheck();
 80012ae:	f7ff ffd1 	bl	8001254 <Radio_SendConnectionCheck>
 80012b2:	e00b      	b.n	80012cc <Radio_Process+0x4c>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <Radio_Process+0x94>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <Radio_Process+0x4c>
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <Radio_Process+0x98>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d103      	bne.n	80012cc <Radio_Process+0x4c>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 80012c4:	f000 f864 	bl	8001390 <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 80012c8:	f7ff ffc4 	bl	8001254 <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 80012cc:	f001 fd8e 	bl	8002dec <HAL_GetTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <Radio_Process+0x90>)
 80012d4:	6013      	str	r3, [r2, #0]
	{
		Radio_TxBufferSend();	//send ack payload
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <Radio_Process+0x9c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d114      	bne.n	8001308 <Radio_Process+0x88>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
		uint8_t ReceivedLength;
		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 80012de:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff35 	bl	8001158 <Radio_RxBufferGet>
		if(UserParser != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <Radio_Process+0x82>
		{
			UserParser(ReceivedCommand,ReceivedLength);
 80012f4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80012f8:	f107 020c 	add.w	r2, r7, #12
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4610      	mov	r0, r2
 8001300:	4798      	blx	r3
		}
		RxStatus = RADIO_OK;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <Radio_Process+0x9c>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	}
}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	; 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200003dc 	.word	0x200003dc
 8001314:	20000391 	.word	0x20000391
 8001318:	20000390 	.word	0x20000390
 800131c:	20000392 	.word	0x20000392

08001320 <nRF24_EventTxCallback>:

//
// -- INTERRUPT --
//
void nRF24_EventTxCallback(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <nRF24_EventTxCallback+0x1c>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <nRF24_EventTxCallback+0x20>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000391 	.word	0x20000391
 8001340:	20000390 	.word	0x20000390

08001344 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
	RxStatus = RADIO_NEW_RX;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <nRF24_EventRxCallback+0x30>)
 800134c:	2203      	movs	r2, #3
 800134e:	701a      	strb	r2, [r3, #0]
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001350:	1dfa      	adds	r2, r7, #7
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fe7d 	bl	8002058 <nRF24_ReadRXPaylaod>
	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fece 	bl	8001108 <Radio_RxBufferPut>
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000392 	.word	0x20000392

08001378 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <nRF24_EventMrCallback+0x14>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20000390 	.word	0x20000390

08001390 <Radio_NoConnectionCallback>:

__weak void Radio_NoConnectionCallback(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013aa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d013      	beq.n	80013de <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ba:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013be:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013c6:	e000      	b.n	80013ca <ITM_SendChar+0x2c>
    {
      __NOP();
 80013c8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f9      	beq.n	80013c8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f0:	f001 fc96 	bl	8002d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f4:	f000 f82c 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f8:	f7ff fc66 	bl	8000cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fc:	f7ff fc44 	bl	8000c88 <MX_DMA_Init>
  MX_I2C1_Init();
 8001400:	f7ff fd28 	bl	8000e54 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001404:	f7ff fd54 	bl	8000eb0 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001408:	f000 ff92 	bl	8002330 <MX_SPI2_Init>
  MX_TIM3_Init();
 800140c:	f001 fb76 	bl	8002afc <MX_TIM3_Init>
  MX_ADC1_Init();
 8001410:	f7ff f8c2 	bl	8000598 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001414:	f001 fbc6 	bl	8002ba4 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001418:	f000 f882 	bl	8001520 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <main+0x58>)
 8001422:	f003 f86f 	bl	8004504 <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <main+0x5c>)
 8001428:	f7ff fe56 	bl	80010d8 <Radio_Init>
  Inputs_Init();
 800142c:	f7ff f9c4 	bl	80007b8 <Inputs_Init>
  OLED_Init(&hi2c3);
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <main+0x60>)
 8001432:	f001 f831 	bl	8002498 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Radio_Process(NULL);
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff ff22 	bl	8001280 <Radio_Process>
	  SimpleScheduler();
 800143c:	f000 ff4e 	bl	80022dc <SimpleScheduler>
	  Radio_Process(NULL);
 8001440:	e7f9      	b.n	8001436 <main+0x4a>
 8001442:	bf00      	nop
 8001444:	40020400 	.word	0x40020400
 8001448:	20000404 	.word	0x20000404
 800144c:	2000033c 	.word	0x2000033c

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2230      	movs	r2, #48	; 0x30
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f005 fe50 	bl	8007104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <SystemClock_Config+0xc8>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <SystemClock_Config+0xc8>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <SystemClock_Config+0xc8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <SystemClock_Config+0xcc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <SystemClock_Config+0xcc>)
 800149a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <SystemClock_Config+0xcc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fca3 	bl	8004e20 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014e0:	f000 f856 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2103      	movs	r1, #3
 8001500:	4618      	mov	r0, r3
 8001502:	f003 ff05 	bl	8005310 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800150c:	f000 f840 	bl	8001590 <Error_Handler>
  }
}
 8001510:	bf00      	nop
 8001512:	3750      	adds	r7, #80	; 0x50
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2028      	movs	r0, #40	; 0x28
 800152a:	f002 fa86 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800152e:	2028      	movs	r0, #40	; 0x28
 8001530:	f002 fa9f 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2024      	movs	r0, #36	; 0x24
 800153a:	f002 fa7e 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800153e:	2024      	movs	r0, #36	; 0x24
 8001540:	f002 fa97 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2012      	movs	r0, #18
 800154a:	f002 fa76 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800154e:	2012      	movs	r0, #18
 8001550:	f002 fa8f 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff1b 	bl	800139e <ITM_SendChar>
	return ch;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001582:	d101      	bne.n	8001588 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001584:	f000 fd96 	bl	80020b4 <nRF24_IRQ_Handler>
	}

}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	if(LastMenuPtr == MenuCurrentMember) return;
 80015a6:	4b56      	ldr	r3, [pc, #344]	; (8001700 <Menu_RefreshScreen+0x164>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <Menu_RefreshScreen+0x168>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	f000 80a2 	beq.w	80016f8 <Menu_RefreshScreen+0x15c>

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 80015b4:	e00c      	b.n	80015d0 <Menu_RefreshScreen+0x34>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <Menu_RefreshScreen+0x16c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4a54      	ldr	r2, [pc, #336]	; (800170c <Menu_RefreshScreen+0x170>)
 80015bc:	5cd2      	ldrb	r2, [r2, r3]
 80015be:	3201      	adds	r2, #1
 80015c0:	b2d1      	uxtb	r1, r2
 80015c2:	4a52      	ldr	r2, [pc, #328]	; (800170c <Menu_RefreshScreen+0x170>)
 80015c4:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <Menu_RefreshScreen+0x174>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <Menu_RefreshScreen+0x174>)
 80015ce:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <Menu_RefreshScreen+0x16c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <Menu_RefreshScreen+0x178>)
 80015d8:	5c9b      	ldrb	r3, [r3, r2]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <Menu_RefreshScreen+0x16c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <Menu_RefreshScreen+0x170>)
 80015e4:	5c5b      	ldrb	r3, [r3, r1]
 80015e6:	3305      	adds	r3, #5
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dce4      	bgt.n	80015b6 <Menu_RefreshScreen+0x1a>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 80015ec:	e00c      	b.n	8001608 <Menu_RefreshScreen+0x6c>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <Menu_RefreshScreen+0x16c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4a46      	ldr	r2, [pc, #280]	; (800170c <Menu_RefreshScreen+0x170>)
 80015f4:	5cd2      	ldrb	r2, [r2, r3]
 80015f6:	3a01      	subs	r2, #1
 80015f8:	b2d1      	uxtb	r1, r2
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <Menu_RefreshScreen+0x170>)
 80015fc:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <Menu_RefreshScreen+0x174>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a42      	ldr	r2, [pc, #264]	; (8001710 <Menu_RefreshScreen+0x174>)
 8001606:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <Menu_RefreshScreen+0x16c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <Menu_RefreshScreen+0x178>)
 8001610:	5c9a      	ldrb	r2, [r3, r2]
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <Menu_RefreshScreen+0x16c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <Menu_RefreshScreen+0x170>)
 800161a:	5c5b      	ldrb	r3, [r3, r1]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3e6      	bcc.n	80015ee <Menu_RefreshScreen+0x52>
	}

	OLED_ClearBuffer(BLACK);
 8001620:	2000      	movs	r0, #0
 8001622:	f001 f843 	bl	80026ac <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8001626:	2100      	movs	r1, #0
 8001628:	2000      	movs	r0, #0
 800162a:	f000 ff85 	bl	8002538 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 800162e:	2101      	movs	r1, #1
 8001630:	4839      	ldr	r0, [pc, #228]	; (8001718 <Menu_RefreshScreen+0x17c>)
 8001632:	f001 f905 	bl	8002840 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <Menu_RefreshScreen+0x174>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 800163c:	e04f      	b.n	80016de <Menu_RefreshScreen+0x142>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <Menu_RefreshScreen+0x168>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	d126      	bne.n	8001696 <Menu_RefreshScreen+0xfa>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fdc3 	bl	80001d8 <strlen>
 8001652:	4602      	mov	r2, r0
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	3301      	adds	r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	b2da      	uxtb	r2, r3
 800166e:	78bb      	ldrb	r3, [r7, #2]
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f000 ff60 	bl	8002538 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001678:	2101      	movs	r1, #1
 800167a:	4828      	ldr	r0, [pc, #160]	; (800171c <Menu_RefreshScreen+0x180>)
 800167c:	f001 f8e0 	bl	8002840 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2101      	movs	r1, #1
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f8da 	bl	8002840 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 800168c:	2101      	movs	r1, #1
 800168e:	4824      	ldr	r0, [pc, #144]	; (8001720 <Menu_RefreshScreen+0x184>)
 8001690:	f001 f8d6 	bl	8002840 <OLED_WriteString>
 8001694:	e01d      	b.n	80016d2 <Menu_RefreshScreen+0x136>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd9c 	bl	80001d8 <strlen>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	78bb      	ldrb	r3, [r7, #2]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 ff39 	bl	8002538 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 f8b7 	bl	8002840 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	3301      	adds	r3, #1
 80016d6:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d002      	beq.n	80016ea <Menu_RefreshScreen+0x14e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1a9      	bne.n	800163e <Menu_RefreshScreen+0xa2>
	}
	OLED_SendBuffer();
 80016ea:	f000 ffb3 	bl	8002654 <OLED_SendBuffer>
	LastMenuPtr = MenuCurrentMember;
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <Menu_RefreshScreen+0x168>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a03      	ldr	r2, [pc, #12]	; (8001700 <Menu_RefreshScreen+0x164>)
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e000      	b.n	80016fa <Menu_RefreshScreen+0x15e>
	if(LastMenuPtr == MenuCurrentMember) return;
 80016f8:	bf00      	nop

}
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200003ec 	.word	0x200003ec
 8001704:	20000078 	.word	0x20000078
 8001708:	200003e8 	.word	0x200003e8
 800170c:	200003e4 	.word	0x200003e4
 8001710:	2000007c 	.word	0x2000007c
 8001714:	200003e0 	.word	0x200003e0
 8001718:	080076f8 	.word	0x080076f8
 800171c:	08007710 	.word	0x08007710
 8001720:	08007714 	.word	0x08007714

08001724 <Menu_Next>:

void Menu_Next(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <Menu_Next+0x54>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <Menu_Next+0x54>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <Menu_Next+0x54>)
 800173a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <Menu_Next+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <Menu_Next+0x5c>)
 8001742:	5cd2      	ldrb	r2, [r2, r3]
 8001744:	3201      	adds	r2, #1
 8001746:	b2d1      	uxtb	r1, r2
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <Menu_Next+0x5c>)
 800174a:	54d1      	strb	r1, [r2, r3]
 800174c:	e00f      	b.n	800176e <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <Menu_Next+0x54>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a08      	ldr	r2, [pc, #32]	; (8001778 <Menu_Next+0x54>)
 8001756:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <Menu_Next+0x54>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f5      	bne.n	800174e <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <Menu_Next+0x58>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <Menu_Next+0x5c>)
 800176a:	2100      	movs	r1, #0
 800176c:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 800176e:	f7ff ff15 	bl	800159c <Menu_RefreshScreen>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000078 	.word	0x20000078
 800177c:	200003e8 	.word	0x200003e8
 8001780:	200003e0 	.word	0x200003e0

08001784 <Menu_Prev>:

void Menu_Prev(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <Menu_Prev+0x58>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01a      	beq.n	80017c8 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <Menu_Prev+0x58>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <Menu_Prev+0x58>)
 800179a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <Menu_Prev+0x5c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <Menu_Prev+0x60>)
 80017a2:	5cd2      	ldrb	r2, [r2, r3]
 80017a4:	3a01      	subs	r2, #1
 80017a6:	b2d1      	uxtb	r1, r2
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <Menu_Prev+0x60>)
 80017aa:	54d1      	strb	r1, [r2, r3]
 80017ac:	e011      	b.n	80017d2 <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <Menu_Prev+0x58>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <Menu_Prev+0x58>)
 80017b6:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <Menu_Prev+0x5c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <Menu_Prev+0x60>)
 80017be:	5cd2      	ldrb	r2, [r2, r3]
 80017c0:	3201      	adds	r2, #1
 80017c2:	b2d1      	uxtb	r1, r2
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <Menu_Prev+0x60>)
 80017c6:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <Menu_Prev+0x58>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ed      	bne.n	80017ae <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 80017d2:	f7ff fee3 	bl	800159c <Menu_RefreshScreen>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000078 	.word	0x20000078
 80017e0:	200003e8 	.word	0x200003e8
 80017e4:	200003e0 	.word	0x200003e0

080017e8 <Menu_Select>:



void Menu_Select(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <Menu_Select+0x48>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00e      	beq.n	8001814 <Menu_Select+0x2c>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <Menu_Select+0x48>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <Menu_Select+0x48>)
 80017fe:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <Menu_Select+0x48>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <Menu_Select+0x4c>)
 8001806:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <Menu_Select+0x50>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <Menu_Select+0x50>)
 8001812:	701a      	strb	r2, [r3, #0]
	}

	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <Menu_Select+0x48>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <Menu_Select+0x3e>
	{
		MenuCurrentMember->FunctionPtr();
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <Menu_Select+0x48>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	4798      	blx	r3
	}

	Menu_RefreshScreen();
 8001826:	f7ff feb9 	bl	800159c <Menu_RefreshScreen>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000078 	.word	0x20000078
 8001834:	2000007c 	.word	0x2000007c
 8001838:	200003e8 	.word	0x200003e8

0800183c <Menu_Back>:

void Menu_Back(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <Menu_Back+0x7c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02e      	beq.n	80018aa <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <Menu_Back+0x80>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <Menu_Back+0x84>)
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <Menu_Back+0x7c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <Menu_Back+0x7c>)
 8001860:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <Menu_Back+0x7c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <Menu_Back+0x88>)
 8001868:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <Menu_Back+0x80>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	3b01      	subs	r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <Menu_Back+0x80>)
 8001874:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e007      	b.n	800188c <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <Menu_Back+0x88>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <Menu_Back+0x88>)
 8001884:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	3301      	adds	r3, #1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <Menu_Back+0x80>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <Menu_Back+0x84>)
 8001896:	5c5b      	ldrb	r3, [r3, r1]
 8001898:	4619      	mov	r1, r3
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <Menu_Back+0x80>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <Menu_Back+0x8c>)
 80018a2:	5c1b      	ldrb	r3, [r3, r0]
 80018a4:	1acb      	subs	r3, r1, r3
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbe8      	blt.n	800187c <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 80018aa:	f7ff fe77 	bl	800159c <Menu_RefreshScreen>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000078 	.word	0x20000078
 80018bc:	200003e8 	.word	0x200003e8
 80018c0:	200003e0 	.word	0x200003e0
 80018c4:	2000007c 	.word	0x2000007c
 80018c8:	200003e4 	.word	0x200003e4

080018cc <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 fa93 	bl	8002e04 <HAL_Delay>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <nRF24_SendSpi+0x28>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	f003 ff98 	bl	8005836 <HAL_SPI_Transmit>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200003f0 	.word	0x200003f0

08001914 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <nRF24_ReadSpi+0x28>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	f004 f8be 	bl	8005aae <HAL_SPI_Receive>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200003f0 	.word	0x200003f0

08001940 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800194e:	2200      	movs	r2, #0
 8001950:	2140      	movs	r1, #64	; 0x40
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <nRF24_ReadRegister+0x44>)
 8001954:	f002 fdd6 	bl	8004504 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ffc3 	bl	80018e8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001962:	f107 030f 	add.w	r3, r7, #15
 8001966:	2101      	movs	r1, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ffd3 	bl	8001914 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800196e:	2201      	movs	r2, #1
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	4804      	ldr	r0, [pc, #16]	; (8001984 <nRF24_ReadRegister+0x44>)
 8001974:	f002 fdc6 	bl	8004504 <HAL_GPIO_WritePin>

	return result;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40020800 	.word	0x40020800

08001988 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800199c:	2200      	movs	r2, #0
 800199e:	2140      	movs	r1, #64	; 0x40
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <nRF24_ReadRegisters+0x44>)
 80019a2:	f002 fdaf 	bl	8004504 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff9c 	bl	80018e8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	4619      	mov	r1, r3
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff ffad 	bl	8001914 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80019ba:	2201      	movs	r2, #1
 80019bc:	2140      	movs	r1, #64	; 0x40
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <nRF24_ReadRegisters+0x44>)
 80019c0:	f002 fda0 	bl	8004504 <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40020800 	.word	0x40020800

080019d0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	4613      	mov	r3, r2
 80019de:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80019ee:	2200      	movs	r2, #0
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <nRF24_WriteRegister+0x48>)
 80019f4:	f002 fd86 	bl	8004504 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2102      	movs	r1, #2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff72 	bl	80018e8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001a04:	2201      	movs	r2, #1
 8001a06:	2140      	movs	r1, #64	; 0x40
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <nRF24_WriteRegister+0x48>)
 8001a0a:	f002 fd7b 	bl	8004504 <HAL_GPIO_WritePin>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40020800 	.word	0x40020800

08001a1c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f043 0320 	orr.w	r3, r3, #32
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001a36:	2200      	movs	r2, #0
 8001a38:	2140      	movs	r1, #64	; 0x40
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <nRF24_WriteRegisters+0x4c>)
 8001a3c:	f002 fd62 	bl	8004504 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff4f 	bl	80018e8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f7ff ff4a 	bl	80018e8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001a54:	2201      	movs	r2, #1
 8001a56:	2140      	movs	r1, #64	; 0x40
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <nRF24_WriteRegisters+0x4c>)
 8001a5a:	f002 fd53 	bl	8004504 <HAL_GPIO_WritePin>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020800 	.word	0x40020800

08001a6c <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001a72:	2200      	movs	r2, #0
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <nRF24_TX_Mode+0x4c>)
 8001a78:	f002 fd44 	bl	8004504 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001a7c:	f000 f81e 	bl	8001abc <nRF24_ReadConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f818 	bl	8001acc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001a9c:	2070      	movs	r0, #112	; 0x70
 8001a9e:	f000 f870 	bl	8001b82 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001aa2:	f000 f87d 	bl	8001ba0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001aa6:	f000 f895 	bl	8001bd4 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff ff0e 	bl	80018cc <nRF24_Delay_ms>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40020800 	.word	0x40020800

08001abc <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ff3d 	bl	8001940 <nRF24_ReadRegister>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}

08001acc <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff ff78 	bl	80019d0 <nRF24_WriteRegister>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001af2:	2006      	movs	r0, #6
 8001af4:	f7ff ff24 	bl	8001940 <nRF24_ReadRegister>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	b25a      	sxtb	r2, r3
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	4619      	mov	r1, r3
 8001b18:	2006      	movs	r0, #6
 8001b1a:	f7ff ff59 	bl	80019d0 <nRF24_WriteRegister>
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001b30:	2006      	movs	r0, #6
 8001b32:	f7ff ff05 	bl	8001940 <nRF24_ReadRegister>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001b40:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d104      	bne.n	8001b52 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	f043 0320 	orr.w	r3, r3, #32
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e006      	b.n	8001b60 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d103      	bne.n	8001b60 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	4619      	mov	r1, r3
 8001b64:	2006      	movs	r0, #6
 8001b66:	f7ff ff33 	bl	80019d0 <nRF24_WriteRegister>
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001b76:	2007      	movs	r0, #7
 8001b78:	f7ff fee2 	bl	8001940 <nRF24_ReadRegister>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2007      	movs	r0, #7
 8001b92:	f7ff ff1d 	bl	80019d0 <nRF24_WriteRegister>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001ba6:	23e2      	movs	r3, #226	; 0xe2
 8001ba8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <nRF24_FlushRX+0x30>)
 8001bb0:	f002 fca8 	bl	8004504 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe95 	bl	80018e8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2140      	movs	r1, #64	; 0x40
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <nRF24_FlushRX+0x30>)
 8001bc4:	f002 fc9e 	bl	8004504 <HAL_GPIO_WritePin>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020800 	.word	0x40020800

08001bd4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8001bda:	23e1      	movs	r3, #225	; 0xe1
 8001bdc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001bde:	2200      	movs	r2, #0
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	4808      	ldr	r0, [pc, #32]	; (8001c04 <nRF24_FlushTX+0x30>)
 8001be4:	f002 fc8e 	bl	8004504 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe7b 	bl	80018e8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <nRF24_FlushTX+0x30>)
 8001bf8:	f002 fc84 	bl	8004504 <HAL_GPIO_WritePin>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40020800 	.word	0x40020800

08001c08 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001c12:	f7ff ff53 	bl	8001abc <nRF24_ReadConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e003      	b.n	8001c32 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	f023 0308 	bic.w	r3, r3, #8
 8001c30:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff49 	bl	8001acc <nRF24_WriteConfig>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001c4c:	f7ff ff36 	bl	8001abc <nRF24_ReadConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d104      	bne.n	8001c64 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e003      	b.n	8001c6c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	f023 0304 	bic.w	r3, r3, #4
 8001c6a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff2c 	bl	8001acc <nRF24_WriteConfig>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	460a      	mov	r2, r1
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	2004      	movs	r0, #4
 8001ca6:	f7ff fe93 	bl	80019d0 <nRF24_WriteRegister>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	2005      	movs	r0, #5
 8001cc8:	f7ff fe82 	bl	80019d0 <nRF24_WriteRegister>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460a      	mov	r2, r1
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d901      	bls.n	8001cee <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001cea:	2305      	movs	r3, #5
 8001cec:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f7ff fe26 	bl	8001940 <nRF24_ReadRegister>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10a      	bne.n	8001d14 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2201      	movs	r2, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	b25a      	sxtb	r2, r3
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e00b      	b.n	8001d2c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2201      	movs	r2, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4013      	ands	r3, r2
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff fe4d 	bl	80019d0 <nRF24_WriteRegister>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	460a      	mov	r2, r1
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d901      	bls.n	8001d58 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001d54:	2305      	movs	r3, #5
 8001d56:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fdf1 	bl	8001940 <nRF24_ReadRegister>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10a      	bne.n	8001d7e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e00b      	b.n	8001d96 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2201      	movs	r2, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	b25a      	sxtb	r2, r3
 8001d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d90:	4013      	ands	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fe18 	bl	80019d0 <nRF24_WriteRegister>
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d901      	bls.n	8001dbc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001db8:	2305      	movs	r3, #5
 8001dba:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d801      	bhi.n	8001dc6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	3b02      	subs	r3, #2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f7ff fdfb 	bl	80019d0 <nRF24_WriteRegister>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	6039      	str	r1, [r7, #0]
 8001dec:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <nRF24_SetRXAddress+0x18>
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d11d      	bne.n	8001e36 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e00d      	b.n	8001e1c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	441a      	add	r2, r3
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	f1c3 0302 	rsb	r3, r3, #2
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	3310      	adds	r3, #16
 8001e10:	443b      	add	r3, r7
 8001e12:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d9ee      	bls.n	8001e00 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	330a      	adds	r3, #10
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f107 010c 	add.w	r1, r7, #12
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fdf4 	bl	8001a1c <nRF24_WriteRegisters>
	{
 8001e34:	e00a      	b.n	8001e4c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	330a      	adds	r3, #10
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f7ff fdc3 	bl	80019d0 <nRF24_WriteRegister>
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2203      	movs	r2, #3
 8001e62:	4619      	mov	r1, r3
 8001e64:	200a      	movs	r0, #10
 8001e66:	f7ff fd8f 	bl	8001988 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e00c      	b.n	8001e8a <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	f1c3 0302 	rsb	r3, r3, #2
 8001e78:	3210      	adds	r2, #16
 8001e7a:	443a      	add	r2, r7
 8001e7c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001e80:	4a16      	ldr	r2, [pc, #88]	; (8001edc <nRF24_SetTXAddress+0x88>)
 8001e82:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	3301      	adds	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d9ef      	bls.n	8001e70 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e00d      	b.n	8001eb2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	441a      	add	r2, r3
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	f1c3 0302 	rsb	r3, r3, #2
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	443b      	add	r3, r7
 8001ea8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d9ee      	bls.n	8001e96 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	200a      	movs	r0, #10
 8001ec2:	f7ff fdab 	bl	8001a1c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2203      	movs	r2, #3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2010      	movs	r0, #16
 8001ed0:	f7ff fda4 	bl	8001a1c <nRF24_WriteRegisters>

}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200003f4 	.word	0x200003f4

08001ee0 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001ee6:	f7ff fe44 	bl	8001b72 <nRF24_ReadStatus>
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001ef4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fe42 	bl	8001b82 <nRF24_WriteStatus>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8001f10:	2060      	movs	r0, #96	; 0x60
 8001f12:	f7ff fd15 	bl	8001940 <nRF24_ReadRegister>
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d906      	bls.n	8001f2e <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8001f20:	f7ff fe3e 	bl	8001ba0 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7ff fcd1 	bl	80018cc <nRF24_Delay_ms>
        return 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001f42:	f7ff fdbb 	bl	8001abc <nRF24_ReadConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e003      	b.n	8001f62 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f60:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fdb1 	bl	8001acc <nRF24_WriteConfig>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001f7c:	f7ff fd9e 	bl	8001abc <nRF24_ReadConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e003      	b.n	8001f9c <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	f023 0320 	bic.w	r3, r3, #32
 8001f9a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fd94 	bl	8001acc <nRF24_WriteConfig>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001fb6:	f7ff fd81 	bl	8001abc <nRF24_ReadConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e003      	b.n	8001fd6 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	f023 0310 	bic.w	r3, r3, #16
 8001fd4:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fd77 	bl	8001acc <nRF24_WriteConfig>
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	20a0      	movs	r0, #160	; 0xa0
 8001ffa:	f7ff fd0f 	bl	8001a1c <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800200e:	2201      	movs	r2, #1
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	4810      	ldr	r0, [pc, #64]	; (8002054 <nRF24_WaitTX+0x4c>)
 8002014:	f002 fa76 	bl	8004504 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fc57 	bl	80018cc <nRF24_Delay_ms>
	NRF24_CE_LOW;
 800201e:	2200      	movs	r2, #0
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	480c      	ldr	r0, [pc, #48]	; (8002054 <nRF24_WaitTX+0x4c>)
 8002024:	f002 fa6e 	bl	8004504 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff fc4f 	bl	80018cc <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 800202e:	f7ff fda0 	bl	8001b72 <nRF24_ReadStatus>
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <nRF24_WaitTX+0x42>
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <nRF24_WaitTX+0x20>

}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40020800 	.word	0x40020800

08002058 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8002062:	f7ff ff50 	bl	8001f06 <nRF24_GetDynamicPayloadSize>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	2061      	movs	r0, #97	; 0x61
 8002078:	f7ff fc86 	bl	8001988 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b20      	cmp	r3, #32
 8002094:	d901      	bls.n	800209a <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 8002096:	2301      	movs	r3, #1
 8002098:	e007      	b.n	80020aa <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa1 	bl	8001fe6 <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 80020a4:	f7ff ffb0 	bl	8002008 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <nRF24_IRQ_Handler+0x14>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	200003fa 	.word	0x200003fa

080020cc <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <nRF24_IRQ_Read+0x7c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d130      	bne.n	800213e <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <nRF24_IRQ_Read+0x7c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 80020e2:	f7ff fd46 	bl	8001b72 <nRF24_ReadStatus>
 80020e6:	4603      	mov	r3, r0
 80020e8:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <nRF24_IRQ_Read+0x80>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002104:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <nRF24_IRQ_Read+0x84>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <nRF24_IRQ_Read+0x88>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fd22 	bl	8001b82 <nRF24_WriteStatus>
	}
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200003fa 	.word	0x200003fa
 800214c:	200003f7 	.word	0x200003f7
 8002150:	200003f8 	.word	0x200003f8
 8002154:	200003f9 	.word	0x200003f9

08002158 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 800215c:	f7ff ffb6 	bl	80020cc <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <nRF24_Event+0x44>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002168:	f7ff f8ec 	bl	8001344 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <nRF24_Event+0x44>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <nRF24_Event+0x48>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 800217a:	f7ff f8d1 	bl	8001320 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <nRF24_Event+0x48>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <nRF24_Event+0x4c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 800218c:	f7ff f8f4 	bl	8001378 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <nRF24_Event+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
	}
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200003f7 	.word	0x200003f7
 80021a0:	200003f8 	.word	0x200003f8
 80021a4:	200003f9 	.word	0x200003f9

080021a8 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <nRF24_Init+0xc4>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80021b6:	2200      	movs	r2, #0
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	482d      	ldr	r0, [pc, #180]	; (8002270 <nRF24_Init+0xc8>)
 80021bc:	f002 f9a2 	bl	8004504 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80021c0:	2201      	movs	r2, #1
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	482a      	ldr	r0, [pc, #168]	; (8002270 <nRF24_Init+0xc8>)
 80021c6:	f002 f99d 	bl	8004504 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 80021ca:	2005      	movs	r0, #5
 80021cc:	f7ff fb7e 	bl	80018cc <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80021d0:	2003      	movs	r0, #3
 80021d2:	f7ff fc89 	bl	8001ae8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7ff fca5 	bl	8001b26 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80021dc:	2001      	movs	r0, #1
 80021de:	f7ff fd13 	bl	8001c08 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fd2d 	bl	8001c42 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80021e8:	2107      	movs	r1, #7
 80021ea:	2004      	movs	r0, #4
 80021ec:	f7ff fd46 	bl	8001c7c <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80021f0:	201d      	movs	r0, #29
 80021f2:	f7ff fba5 	bl	8001940 <nRF24_ReadRegister>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	201d      	movs	r0, #29
 8002202:	f7ff fbe5 	bl	80019d0 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002206:	213f      	movs	r1, #63	; 0x3f
 8002208:	201c      	movs	r0, #28
 800220a:	f7ff fbe1 	bl	80019d0 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800220e:	200a      	movs	r0, #10
 8002210:	f7ff fd4f 	bl	8001cb2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002214:	2101      	movs	r1, #1
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff fd5c 	bl	8001cd4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800221c:	2101      	movs	r1, #1
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff fd8d 	bl	8001d3e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002224:	2003      	movs	r0, #3
 8002226:	f7ff fdbf 	bl	8001da8 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff fb4e 	bl	80018cc <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f7ff fe81 	bl	8001f38 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff fe9b 	bl	8001f72 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff feb5 	bl	8001fac <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff fb42 	bl	80018cc <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002248:	f7ff fe4a 	bl	8001ee0 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 800224c:	201d      	movs	r0, #29
 800224e:	f7ff fb77 	bl	8001940 <nRF24_ReadRegister>
 8002252:	4603      	mov	r3, r0
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	201d      	movs	r0, #29
 800225e:	f7ff fbb7 	bl	80019d0 <nRF24_WriteRegister>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200003f0 	.word	0x200003f0
 8002270:	40020800 	.word	0x40020800

08002274 <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 8002278:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <MenuTaskInit+0x2c>)
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <MenuTaskInit+0x30>)
 800227c:	2004      	movs	r0, #4
 800227e:	f7fe fbb9 	bl	80009f4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 8002282:	2200      	movs	r2, #0
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <MenuTaskInit+0x30>)
 8002286:	2000      	movs	r0, #0
 8002288:	f7fe fbb4 	bl	80009f4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Back, NULL);
 800228c:	2200      	movs	r2, #0
 800228e:	4904      	ldr	r1, [pc, #16]	; (80022a0 <MenuTaskInit+0x2c>)
 8002290:	2000      	movs	r0, #0
 8002292:	f7fe fbaf 	bl	80009f4 <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 8002296:	f7ff f981 	bl	800159c <Menu_RefreshScreen>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	0800183d 	.word	0x0800183d
 80022a4:	080017e9 	.word	0x080017e9

080022a8 <MenuTask>:

static void MenuTask(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 80022b2:	f7fe fb57 	bl	8000964 <Inputs_GetEncoderCount>
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dd02      	ble.n	80022c8 <MenuTask+0x20>
	{
		Menu_Next();
 80022c2:	f7ff fa2f 	bl	8001724 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 80022c6:	e005      	b.n	80022d4 <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da01      	bge.n	80022d4 <MenuTask+0x2c>
		Menu_Prev();
 80022d0:	f7ff fa58 	bl	8001784 <Menu_Prev>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <SimpleScheduler>:

void SimpleScheduler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	uint8_t IsSubProgramCompleted;

	if(0 == StartupInitFlag)
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <SimpleScheduler+0x4c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <SimpleScheduler+0x12>
	{
		MenuTaskInit();								//Init for menu
 80022ea:	f7ff ffc3 	bl	8002274 <MenuTaskInit>
	}

	Inputs_ButtonsRoutine();
 80022ee:	f7fe fb63 	bl	80009b8 <Inputs_ButtonsRoutine>

	if(ProgramToPerform != NULL)					//if there is a pointer to program
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <SimpleScheduler+0x50>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00f      	beq.n	800231a <SimpleScheduler+0x3e>
	{
		IsSubProgramCompleted = ProgramToPerform();	//keep executing it till it's completed
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <SimpleScheduler+0x50>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4798      	blx	r3
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
		if(IsSubProgramCompleted)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <SimpleScheduler+0x42>
		{
			ProgramToPerform = NULL;				//when it's completed NULL the pointer in order to go to the menu in next loop
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <SimpleScheduler+0x50>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
			Inputs_ClearButtonsCallbacks();			//clear callbacks for buttons after last subprogram
 8002310:	f7fe fbb6 	bl	8000a80 <Inputs_ClearButtonsCallbacks>
			MenuTaskInit(); 						//Init for menu again
 8002314:	f7ff ffae 	bl	8002274 <MenuTaskInit>
	}
	else											//if there is no pointer to program, perform menu task
	{
		MenuTask();
	}
}
 8002318:	e001      	b.n	800231e <SimpleScheduler+0x42>
		MenuTask();
 800231a:	f7ff ffc5 	bl	80022a8 <MenuTask>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000400 	.word	0x20000400
 800232c:	200003fc 	.word	0x200003fc

08002330 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_SPI2_Init+0x64>)
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <MX_SPI2_Init+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_SPI2_Init+0x64>)
 800233c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002340:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_SPI2_Init+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_SPI2_Init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_SPI2_Init+0x64>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_SPI2_Init+0x64>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_SPI2_Init+0x64>)
 800235c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002360:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_SPI2_Init+0x64>)
 8002364:	2218      	movs	r2, #24
 8002366:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MX_SPI2_Init+0x64>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_SPI2_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MX_SPI2_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_SPI2_Init+0x64>)
 800237c:	220a      	movs	r2, #10
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_SPI2_Init+0x64>)
 8002382:	f003 f9cf 	bl	8005724 <HAL_SPI_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800238c:	f7ff f900 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000404 	.word	0x20000404
 8002398:	40003800 	.word	0x40003800

0800239c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_SPI_MspInit+0x84>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12c      	bne.n	8002418 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002408:	2305      	movs	r3, #5
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_SPI_MspInit+0x8c>)
 8002414:	f001 feda 	bl	80041cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40003800 	.word	0x40003800
 8002424:	40023800 	.word	0x40023800
 8002428:	40020400 	.word	0x40020400

0800242c <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af04      	add	r7, sp, #16
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <OLED_SendCmdSequence+0x34>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	b29b      	uxth	r3, r3
 8002440:	2264      	movs	r2, #100	; 0x64
 8002442:	9202      	str	r2, [sp, #8]
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2301      	movs	r3, #1
 800244c:	2200      	movs	r2, #0
 800244e:	2178      	movs	r1, #120	; 0x78
 8002450:	f002 f9ce 	bl	80047f0 <HAL_I2C_Mem_Write>
 8002454:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000045c 	.word	0x2000045c

08002464 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af04      	add	r7, sp, #16
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <OLED_SendData+0x30>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	2364      	movs	r3, #100	; 0x64
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2301      	movs	r3, #1
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	2178      	movs	r1, #120	; 0x78
 8002486:	f002 f9b3 	bl	80047f0 <HAL_I2C_Mem_Write>
 800248a:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000045c 	.word	0x2000045c

08002498 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <OLED_Init+0x28>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 80024a6:	4807      	ldr	r0, [pc, #28]	; (80024c4 <OLED_Init+0x2c>)
 80024a8:	f000 f916 	bl	80026d8 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 80024ac:	2110      	movs	r1, #16
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <OLED_Init+0x30>)
 80024b0:	f7ff ffbc 	bl	800242c <OLED_SendCmdSequence>
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000045c 	.word	0x2000045c
 80024c4:	08007718 	.word	0x08007718
 80024c8:	20000080 	.word	0x20000080

080024cc <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d802      	bhi.n	80024ec <OLED_SetDeviceCursor+0x20>
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d901      	bls.n	80024f0 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e01f      	b.n	8002530 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	3302      	adds	r3, #2
 80024f4:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f043 0310 	orr.w	r3, r3, #16
 800250a:	b2db      	uxtb	r3, r3
 800250c:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 800250e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800251c:	b25b      	sxtb	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	2103      	movs	r1, #3
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff7f 	bl	800242c <OLED_SendCmdSequence>

	return Status;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	460a      	mov	r2, r1
 8002542:	71fb      	strb	r3, [r7, #7]
 8002544:	4613      	mov	r3, r2
 8002546:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db02      	blt.n	8002556 <OLED_MoveCursor+0x1e>
 8002550:	79bb      	ldrb	r3, [r7, #6]
 8002552:	2b3f      	cmp	r3, #63	; 0x3f
 8002554:	d901      	bls.n	800255a <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00b      	b.n	8002572 <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <OLED_MoveCursor+0x48>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <OLED_MoveCursor+0x48>)
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <OLED_MoveCursor+0x48>)
 800256e:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000460 	.word	0x20000460

08002584 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
 8002590:	4613      	mov	r3, r2
 8002592:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e04f      	b.n	800263a <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 800259a:	78bb      	ldrb	r3, [r7, #2]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d116      	bne.n	80025ce <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	01db      	lsls	r3, r3, #7
 80025ac:	4413      	add	r3, r2
 80025ae:	4a28      	ldr	r2, [pc, #160]	; (8002650 <OLED_WriteToBuffer+0xcc>)
 80025b0:	5cd1      	ldrb	r1, [r2, r3]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025be:	789b      	ldrb	r3, [r3, #2]
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	4403      	add	r3, r0
 80025c4:	430a      	orrs	r2, r1
 80025c6:	b2d1      	uxtb	r1, r2
 80025c8:	4a21      	ldr	r2, [pc, #132]	; (8002650 <OLED_WriteToBuffer+0xcc>)
 80025ca:	54d1      	strb	r1, [r2, r3]
 80025cc:	e020      	b.n	8002610 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 80025ce:	78bb      	ldrb	r3, [r7, #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11b      	bne.n	800260c <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025dc:	789b      	ldrb	r3, [r3, #2]
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	4413      	add	r3, r2
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <OLED_WriteToBuffer+0xcc>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	b25a      	sxtb	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	b25a      	sxtb	r2, r3
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4619      	mov	r1, r3
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <OLED_WriteToBuffer+0xc8>)
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	01db      	lsls	r3, r3, #7
 8002602:	440b      	add	r3, r1
 8002604:	b2d1      	uxtb	r1, r2
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <OLED_WriteToBuffer+0xcc>)
 8002608:	54d1      	strb	r1, [r2, r3]
 800260a:	e001      	b.n	8002610 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e019      	b.n	8002644 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <OLED_WriteToBuffer+0xc8>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4a0c      	ldr	r2, [pc, #48]	; (800264c <OLED_WriteToBuffer+0xc8>)
 800261a:	7852      	ldrb	r2, [r2, #1]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff8a 	bl	8002538 <OLED_MoveCursor>
 8002624:	4603      	mov	r3, r0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00a      	b.n	8002644 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3301      	adds	r3, #1
 8002632:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3301      	adds	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3ab      	bcc.n	800259a <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000460 	.word	0x20000460
 8002650:	2000046c 	.word	0x2000046c

08002654 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	71bb      	strb	r3, [r7, #6]
 8002662:	e019      	b.n	8002698 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	4619      	mov	r1, r3
 8002668:	2000      	movs	r0, #0
 800266a:	f7ff ff2f 	bl	80024cc <OLED_SetDeviceCursor>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	4313      	orrs	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8002678:	79bb      	ldrb	r3, [r7, #6]
 800267a:	01db      	lsls	r3, r3, #7
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <OLED_SendBuffer+0x54>)
 800267e:	4413      	add	r3, r2
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff feee 	bl	8002464 <OLED_SendData>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4313      	orrs	r3, r2
 8002690:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	3301      	adds	r3, #1
 8002696:	71bb      	strb	r3, [r7, #6]
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	2b07      	cmp	r3, #7
 800269c:	d9e2      	bls.n	8002664 <OLED_SendBuffer+0x10>
	}
	return Status;
 800269e:	79fb      	ldrb	r3, [r7, #7]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	2000046c 	.word	0x2000046c

080026ac <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	4613      	mov	r3, r2
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c2:	4619      	mov	r1, r3
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <OLED_ClearBuffer+0x28>)
 80026c6:	f004 fd1d 	bl	8007104 <memset>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000046c 	.word	0x2000046c

080026d8 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3301      	adds	r3, #1
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3302      	adds	r3, #2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 80026f0:	7bbb      	ldrb	r3, [r7, #14]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d802      	bhi.n	80026fc <OLED_ChangeFont+0x24>
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d901      	bls.n	8002700 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e00e      	b.n	800271e <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <OLED_ChangeFont+0x54>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <OLED_ChangeFont+0x54>)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <OLED_ChangeFont+0x54>)
 800270e:	7bbb      	ldrb	r3, [r7, #14]
 8002710:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3303      	adds	r3, #3
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <OLED_ChangeFont+0x54>)
 800271a:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000464 	.word	0x20000464

08002730 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	460a      	mov	r2, r1
 800273a:	71fb      	strb	r3, [r7, #7]
 800273c:	4613      	mov	r3, r2
 800273e:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002744:	79bb      	ldrb	r3, [r7, #6]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d901      	bls.n	800274e <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06f      	b.n	800282e <OLED_WriteChar+0xfe>
	}
	switch(character)
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2b0a      	cmp	r3, #10
 8002752:	d009      	beq.n	8002768 <OLED_WriteChar+0x38>
 8002754:	2b0d      	cmp	r3, #13
 8002756:	d113      	bne.n	8002780 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8002758:	4b37      	ldr	r3, [pc, #220]	; (8002838 <OLED_WriteChar+0x108>)
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	4619      	mov	r1, r3
 800275e:	2000      	movs	r0, #0
 8002760:	f7ff feea 	bl	8002538 <OLED_MoveCursor>
 8002764:	4603      	mov	r3, r0
 8002766:	e062      	b.n	800282e <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8002768:	4b33      	ldr	r3, [pc, #204]	; (8002838 <OLED_WriteChar+0x108>)
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <OLED_WriteChar+0x108>)
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	3308      	adds	r3, #8
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f7ff fede 	bl	8002538 <OLED_MoveCursor>
 800277c:	4603      	mov	r3, r0
 800277e:	e056      	b.n	800282e <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	4a2e      	ldr	r2, [pc, #184]	; (800283c <OLED_WriteChar+0x10c>)
 8002784:	7912      	ldrb	r2, [r2, #4]
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <OLED_WriteChar+0x10c>)
 800278c:	795b      	ldrb	r3, [r3, #5]
 800278e:	b29b      	uxth	r3, r3
 8002790:	fb12 f303 	smulbb	r3, r2, r3
 8002794:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <OLED_WriteChar+0x10c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	3304      	adds	r3, #4
 800279e:	4413      	add	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 80027a2:	2300      	movs	r3, #0
 80027a4:	75bb      	strb	r3, [r7, #22]
 80027a6:	e00c      	b.n	80027c2 <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 80027a8:	7dbb      	ldrb	r3, [r7, #22]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	3318      	adds	r3, #24
 80027b0:	443b      	add	r3, r7
 80027b2:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	3301      	adds	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 80027bc:	7dbb      	ldrb	r3, [r7, #22]
 80027be:	3301      	adds	r3, #1
 80027c0:	75bb      	strb	r3, [r7, #22]
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <OLED_WriteChar+0x10c>)
 80027c4:	795b      	ldrb	r3, [r3, #5]
 80027c6:	7dba      	ldrb	r2, [r7, #22]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3ed      	bcc.n	80027a8 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <OLED_WriteChar+0x10c>)
 80027ce:	7959      	ldrb	r1, [r3, #5]
 80027d0:	79ba      	ldrb	r2, [r7, #6]
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fed4 	bl	8002584 <OLED_WriteToBuffer>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <OLED_WriteChar+0x108>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <OLED_WriteChar+0x10c>)
 80027ee:	795b      	ldrb	r3, [r3, #5]
 80027f0:	4413      	add	r3, r2
 80027f2:	2b7f      	cmp	r3, #127	; 0x7f
 80027f4:	dd1a      	ble.n	800282c <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <OLED_WriteChar+0x108>)
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 80027fe:	2100      	movs	r1, #0
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff fe99 	bl	8002538 <OLED_MoveCursor>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	4313      	orrs	r3, r2
 800280e:	75fb      	strb	r3, [r7, #23]
 8002810:	e00c      	b.n	800282c <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <OLED_WriteChar+0x108>)
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	3308      	adds	r3, #8
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	2000      	movs	r0, #0
 800281e:	f7ff fe8b 	bl	8002538 <OLED_MoveCursor>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	4313      	orrs	r3, r2
 800282a:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 800282c:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000460 	.word	0x20000460
 800283c:	20000464 	.word	0x20000464

08002840 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d910      	bls.n	8002878 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e013      	b.n	8002882 <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff64 	bl	8002730 <OLED_WriteChar>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	4313      	orrs	r3, r2
 8002870:	73fb      	strb	r3, [r7, #15]
		String++;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3301      	adds	r3, #1
 8002876:	607b      	str	r3, [r7, #4]
	while(*String)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ec      	bne.n	800285a <OLED_WriteString+0x1a>
	}
	return Status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_MspInit+0x4c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_MspInit+0x4c>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_MspInit+0x4c>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_MspInit+0x4c>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_MspInit+0x4c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <NMI_Handler+0x4>

080028e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler+0x4>

080028ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002928:	f000 fa4c 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <ADC_IRQHandler+0x10>)
 8002936:	f000 facc 	bl	8002ed2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000114 	.word	0x20000114

08002944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800294a:	f003 ff83 	bl	8006854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200008b8 	.word	0x200008b8

08002958 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <SPI2_IRQHandler+0x10>)
 800295e:	f003 fb59 	bl	8006014 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000404 	.word	0x20000404

0800296c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002974:	f001 fde0 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <DMA2_Stream0_IRQHandler+0x10>)
 8002982:	f001 f9b9 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000015c 	.word	0x2000015c

08002990 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e00a      	b.n	80029b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029a2:	f3af 8000 	nop.w
 80029a6:	4601      	mov	r1, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	60ba      	str	r2, [r7, #8]
 80029ae:	b2ca      	uxtb	r2, r1
 80029b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	dbf0      	blt.n	80029a2 <_read+0x12>
  }

  return len;
 80029c0:	687b      	ldr	r3, [r7, #4]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e009      	b.n	80029f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fdb7 	bl	8001558 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	dbf1      	blt.n	80029dc <_write+0x12>
  }
  return len;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_close>:

int _close(int file)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <_isatty>:

int _isatty(int file)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <_sbrk+0x5c>)
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <_sbrk+0x60>)
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <_sbrk+0x64>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <_sbrk+0x68>)
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d207      	bcs.n	8002aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a9c:	f004 fb80 	bl	80071a0 <__errno>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	e009      	b.n	8002ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <_sbrk+0x64>)
 8002abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20020000 	.word	0x20020000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	2000086c 	.word	0x2000086c
 8002ad4:	20000a50 	.word	0x20000a50

08002ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <SystemInit+0x20>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <SystemInit+0x20>)
 8002ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fafa 	bl	8007104 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <MX_TIM3_Init+0xa4>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b6a:	f003 fd3f 	bl	80065ec <HAL_TIM_Encoder_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002b74:	f7fe fd0c 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_TIM3_Init+0xa0>)
 8002b86:	f004 f845 	bl	8006c14 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002b90:	f7fe fcfe 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000870 	.word	0x20000870
 8002ba0:	40000400 	.word	0x40000400

08002ba4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002baa:	4a0f      	ldr	r2, [pc, #60]	; (8002be8 <MX_TIM10_Init+0x44>)
 8002bac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002bb0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002bb4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc4:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002bd0:	4804      	ldr	r0, [pc, #16]	; (8002be4 <MX_TIM10_Init+0x40>)
 8002bd2:	f003 fc61 	bl	8006498 <HAL_TIM_Base_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002bdc:	f7fe fcd8 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200008b8 	.word	0x200008b8
 8002be8:	40014400 	.word	0x40014400

08002bec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12b      	bne.n	8002c66 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002c46:	23c0      	movs	r3, #192	; 0xc0
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c56:	2302      	movs	r3, #2
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4805      	ldr	r0, [pc, #20]	; (8002c78 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c62:	f001 fab3 	bl	80041cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c66:	bf00      	nop
 8002c68:	3728      	adds	r7, #40	; 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000

08002c7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <HAL_TIM_Base_MspInit+0x48>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d115      	bne.n	8002cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	2019      	movs	r0, #25
 8002cb0:	f000 fec3 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cb4:	2019      	movs	r0, #25
 8002cb6:	f000 fedc 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40014400 	.word	0x40014400
 8002cc8:	40023800 	.word	0x40023800

08002ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cd2:	490e      	ldr	r1, [pc, #56]	; (8002d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ce8:	4c0b      	ldr	r4, [pc, #44]	; (8002d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cf6:	f7ff feef 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f004 fa57 	bl	80071ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfe:	f7fe fb75 	bl	80013ec <main>
  bx  lr    
 8002d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002d10:	0800798c 	.word	0x0800798c
  ldr r2, =_sbss
 8002d14:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002d18:	20000a50 	.word	0x20000a50

08002d1c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <DMA1_Stream0_IRQHandler>
	...

08002d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <HAL_Init+0x40>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_Init+0x40>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_Init+0x40>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 fe6b 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	200f      	movs	r0, #15
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fd9a 	bl	800288c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fe83 	bl	8003a8e <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 fe4b 	bl	8003a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000090 	.word	0x20000090
 8002dbc:	20000098 	.word	0x20000098
 8002dc0:	20000094 	.word	0x20000094

08002dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x20>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000098 	.word	0x20000098
 8002de8:	20000900 	.word	0x20000900

08002dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return uwTick;
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetTick+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000900 	.word	0x20000900

08002e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff ffee 	bl	8002dec <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d005      	beq.n	8002e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_Delay+0x44>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e2a:	bf00      	nop
 8002e2c:	f7ff ffde 	bl	8002dec <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8f7      	bhi.n	8002e2c <HAL_Delay+0x28>
  {
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000098 	.word	0x20000098

08002e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e033      	b.n	8002eca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fc10 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e92:	f023 0302 	bic.w	r3, r3, #2
 8002e96:	f043 0202 	orr.w	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fb68 	bl	8003574 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eba:	e001      	b.n	8002ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d049      	beq.n	8002f9c <HAL_ADC_IRQHandler+0xca>
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d046      	beq.n	8002f9c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d105      	bne.n	8002f26 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12b      	bne.n	8002f8c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d127      	bne.n	8002f8c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d119      	bne.n	8002f8c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0220 	bic.w	r2, r2, #32
 8002f66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fc89 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0212 	mvn.w	r2, #18
 8002f9a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d057      	beq.n	8003062 <HAL_ADC_IRQHandler+0x190>
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d054      	beq.n	8003062 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d139      	bne.n	8003052 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d12b      	bne.n	8003052 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	d124      	bne.n	8003052 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11d      	bne.n	8003052 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800302c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fc0c 	bl	8003870 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 020c 	mvn.w	r2, #12
 8003060:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d017      	beq.n	80030a8 <HAL_ADC_IRQHandler+0x1d6>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d014      	beq.n	80030a8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10d      	bne.n	80030a8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f925 	bl	80032e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0201 	mvn.w	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d015      	beq.n	80030ea <HAL_ADC_IRQHandler+0x218>
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f043 0202 	orr.w	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0220 	mvn.w	r2, #32
 80030d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f90e 	bl	80032fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0220 	mvn.w	r2, #32
 80030e8:	601a      	str	r2, [r3, #0]
  }
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_ADC_Start_DMA+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e0ce      	b.n	80032b0 <HAL_ADC_Start_DMA+0x1bc>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d018      	beq.n	800315a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003138:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_ADC_Start_DMA+0x1c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5f      	ldr	r2, [pc, #380]	; (80032bc <HAL_ADC_Start_DMA+0x1c8>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0c9a      	lsrs	r2, r3, #18
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800314c:	e002      	b.n	8003154 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	3b01      	subs	r3, #1
 8003152:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f9      	bne.n	800314e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003168:	d107      	bne.n	800317a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003178:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 8086 	bne.w	8003296 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	d106      	bne.n	80031d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f023 0206 	bic.w	r2, r3, #6
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
 80031d6:	e002      	b.n	80031de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_ADC_Start_DMA+0x1cc>)
 80031e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	4a35      	ldr	r2, [pc, #212]	; (80032c4 <HAL_ADC_Start_DMA+0x1d0>)
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_ADC_Start_DMA+0x1d4>)
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	4a33      	ldr	r2, [pc, #204]	; (80032cc <HAL_ADC_Start_DMA+0x1d8>)
 8003200:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800320a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800321a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	334c      	adds	r3, #76	; 0x4c
 8003236:	4619      	mov	r1, r3
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f000 fce2 	bl	8003c04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d129      	bne.n	80032ae <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e020      	b.n	80032ae <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_ADC_Start_DMA+0x1dc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d11b      	bne.n	80032ae <HAL_ADC_Start_DMA+0x1ba>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d114      	bne.n	80032ae <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	e00b      	b.n	80032ae <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000090 	.word	0x20000090
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	40012300 	.word	0x40012300
 80032c4:	0800376d 	.word	0x0800376d
 80032c8:	08003827 	.word	0x08003827
 80032cc:	08003843 	.word	0x08003843
 80032d0:	40012000 	.word	0x40012000

080032d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1c>
 8003328:	2302      	movs	r3, #2
 800332a:	e113      	b.n	8003554 <HAL_ADC_ConfigChannel+0x244>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d925      	bls.n	8003388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	2207      	movs	r2, #7
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43da      	mvns	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	400a      	ands	r2, r1
 8003360:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68d9      	ldr	r1, [r3, #12]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	4618      	mov	r0, r3
 8003374:	4603      	mov	r3, r0
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4403      	add	r3, r0
 800337a:	3b1e      	subs	r3, #30
 800337c:	409a      	lsls	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e022      	b.n	80033ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	2207      	movs	r2, #7
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	400a      	ands	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4403      	add	r3, r0
 80033c4:	409a      	lsls	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d824      	bhi.n	8003420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b05      	subs	r3, #5
 80033e8:	221f      	movs	r2, #31
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	400a      	ands	r2, r1
 80033f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	4618      	mov	r0, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b05      	subs	r3, #5
 8003412:	fa00 f203 	lsl.w	r2, r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	635a      	str	r2, [r3, #52]	; 0x34
 800341e:	e04c      	b.n	80034ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d824      	bhi.n	8003472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b23      	subs	r3, #35	; 0x23
 800343a:	221f      	movs	r2, #31
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43da      	mvns	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	400a      	ands	r2, r1
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b23      	subs	r3, #35	; 0x23
 8003464:	fa00 f203 	lsl.w	r2, r0, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
 8003470:	e023      	b.n	80034ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	3b41      	subs	r3, #65	; 0x41
 8003484:	221f      	movs	r2, #31
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	400a      	ands	r2, r1
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	3b41      	subs	r3, #65	; 0x41
 80034ae:	fa00 f203 	lsl.w	r2, r0, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_ADC_ConfigChannel+0x250>)
 80034bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a28      	ldr	r2, [pc, #160]	; (8003564 <HAL_ADC_ConfigChannel+0x254>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10f      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d8>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b12      	cmp	r3, #18
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_ADC_ConfigChannel+0x254>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12b      	bne.n	800354a <HAL_ADC_ConfigChannel+0x23a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_ADC_ConfigChannel+0x258>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x1f4>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b11      	cmp	r3, #17
 8003502:	d122      	bne.n	800354a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a11      	ldr	r2, [pc, #68]	; (8003568 <HAL_ADC_ConfigChannel+0x258>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d111      	bne.n	800354a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_ADC_ConfigChannel+0x25c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_ADC_ConfigChannel+0x260>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0c9a      	lsrs	r2, r3, #18
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800353c:	e002      	b.n	8003544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3b01      	subs	r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f9      	bne.n	800353e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40012300 	.word	0x40012300
 8003564:	40012000 	.word	0x40012000
 8003568:	10000012 	.word	0x10000012
 800356c:	20000090 	.word	0x20000090
 8003570:	431bde83 	.word	0x431bde83

08003574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800357c:	4b79      	ldr	r3, [pc, #484]	; (8003764 <ADC_Init+0x1f0>)
 800357e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	021a      	lsls	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	4a58      	ldr	r2, [pc, #352]	; (8003768 <ADC_Init+0x1f4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800361a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e00f      	b.n	8003672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003670:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0202 	bic.w	r2, r2, #2
 8003680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6899      	ldr	r1, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7e1b      	ldrb	r3, [r3, #24]
 800368c:	005a      	lsls	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	3b01      	subs	r3, #1
 80036cc:	035a      	lsls	r2, r3, #13
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e007      	b.n	80036e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	3b01      	subs	r3, #1
 8003704:	051a      	lsls	r2, r3, #20
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800371c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6899      	ldr	r1, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800372a:	025a      	lsls	r2, r3, #9
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6899      	ldr	r1, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	029a      	lsls	r2, r3, #10
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40012300 	.word	0x40012300
 8003768:	0f000001 	.word	0x0f000001

0800376c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003782:	2b00      	cmp	r3, #0
 8003784:	d13c      	bne.n	8003800 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d12b      	bne.n	80037f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d127      	bne.n	80037f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d119      	bne.n	80037f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0220 	bic.w	r2, r2, #32
 80037d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d105      	bne.n	80037f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fd f853 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037fe:	e00e      	b.n	800381e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fd75 	bl	80032fc <HAL_ADC_ErrorCallback>
}
 8003812:	e004      	b.n	800381e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff fd4d 	bl	80032d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fd4a 	bl	80032fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <__NVIC_SetPriorityGrouping>:
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_GetPriorityGrouping>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <SysTick_Config>:
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f0:	d301      	bcc.n	80039f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <SysTick_Config+0x40>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fe:	210f      	movs	r1, #15
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f7ff ff8e 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <SysTick_Config+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <SysTick_Config+0x40>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff29 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4c:	f7ff ff3e 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff8e 	bl	8003978 <NVIC_EncodePriority>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5d 	bl	8003924 <__NVIC_SetPriority>
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff31 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa2 	bl	80039e0 <SysTick_Config>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff f99a 	bl	8002dec <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e099      	b.n	8003bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae4:	e00f      	b.n	8003b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ae6:	f7ff f981 	bl	8002dec <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d908      	bls.n	8003b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e078      	b.n	8003bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e8      	bne.n	8003ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_DMA_Init+0x158>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d107      	bne.n	8003b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0307 	bic.w	r3, r3, #7
 8003b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d117      	bne.n	8003bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fa91 	bl	80040d4 <DMA_CheckFifoParam>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e016      	b.n	8003bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa48 	bl	8004068 <DMA_CalcBaseAndBitshift>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	223f      	movs	r2, #63	; 0x3f
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	f010803f 	.word	0xf010803f

08003c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Start_IT+0x26>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e040      	b.n	8003cac <HAL_DMA_Start_IT+0xa8>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12f      	bne.n	8003c9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9da 	bl	800400c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	223f      	movs	r2, #63	; 0x3f
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0216 	orr.w	r2, r2, #22
 8003c72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e005      	b.n	8003caa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00c      	b.n	8003cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d04:	4b8e      	ldr	r3, [pc, #568]	; (8003f40 <HAL_DMA_IRQHandler+0x248>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a8e      	ldr	r2, [pc, #568]	; (8003f44 <HAL_DMA_IRQHandler+0x24c>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	2208      	movs	r2, #8
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2208      	movs	r2, #8
 8003d52:	409a      	lsls	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d012      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2201      	movs	r2, #1
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2204      	movs	r2, #4
 8003da0:	409a      	lsls	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d012      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d043      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03c      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2210      	movs	r2, #16
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d024      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
 8003e26:	e01f      	b.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01b      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
 8003e38:	e016      	b.n	8003e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0208 	bic.w	r2, r2, #8
 8003e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 808f 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8087 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	2220      	movs	r2, #32
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d136      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0216 	bic.w	r2, r2, #22
 8003eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x1da>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	223f      	movs	r2, #63	; 0x3f
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d07e      	beq.n	8004004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
        }
        return;
 8003f0e:	e079      	b.n	8004004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d031      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
 8003f3c:	e02c      	b.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
 8003f3e:	bf00      	nop
 8003f40:	20000090 	.word	0x20000090
 8003f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d023      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e01e      	b.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d032      	beq.n	8004006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2205      	movs	r2, #5
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d307      	bcc.n	8003fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f2      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x2cc>
 8003fde:	e000      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
 8004002:	e000      	b.n	8004006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004004:	bf00      	nop
    }
  }
}
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d108      	bne.n	800404c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800404a:	e007      	b.n	800405c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	3b10      	subs	r3, #16
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <DMA_CalcBaseAndBitshift+0x64>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <DMA_CalcBaseAndBitshift+0x68>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d909      	bls.n	80040aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	659a      	str	r2, [r3, #88]	; 0x58
 80040a8:	e007      	b.n	80040ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	aaaaaaab 	.word	0xaaaaaaab
 80040d0:	08007974 	.word	0x08007974

080040d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11f      	bne.n	800412e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d856      	bhi.n	80041a2 <DMA_CheckFifoParam+0xce>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <DMA_CheckFifoParam+0x28>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	0800411f 	.word	0x0800411f
 8004104:	0800410d 	.word	0x0800410d
 8004108:	080041a3 	.word	0x080041a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d046      	beq.n	80041a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411c:	e043      	b.n	80041a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004126:	d140      	bne.n	80041aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e03d      	b.n	80041aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004136:	d121      	bne.n	800417c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d837      	bhi.n	80041ae <DMA_CheckFifoParam+0xda>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <DMA_CheckFifoParam+0x70>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004155 	.word	0x08004155
 8004148:	0800415b 	.word	0x0800415b
 800414c:	08004155 	.word	0x08004155
 8004150:	0800416d 	.word	0x0800416d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	e030      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d025      	beq.n	80041b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416a:	e022      	b.n	80041b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004174:	d11f      	bne.n	80041b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800417a:	e01c      	b.n	80041b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d903      	bls.n	800418a <DMA_CheckFifoParam+0xb6>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d003      	beq.n	8004190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004188:	e018      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      break;
 800418e:	e015      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00e      	beq.n	80041ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      break;
 80041a0:	e00b      	b.n	80041ba <DMA_CheckFifoParam+0xe6>
      break;
 80041a2:	bf00      	nop
 80041a4:	e00a      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e008      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
 80041ac:	e006      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      break;   
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <DMA_CheckFifoParam+0xe8>
      break;
 80041ba:	bf00      	nop
    }
  } 
  
  return status; 
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop

080041cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e159      	b.n	800449c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e8:	2201      	movs	r2, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	f040 8148 	bne.w	8004496 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d005      	beq.n	800421e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421a:	2b02      	cmp	r3, #2
 800421c:	d130      	bne.n	8004280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004254:	2201      	movs	r2, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 0201 	and.w	r2, r3, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b03      	cmp	r3, #3
 800428a:	d017      	beq.n	80042bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d123      	bne.n	8004310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	08da      	lsrs	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3208      	adds	r2, #8
 80042d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	220f      	movs	r2, #15
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3208      	adds	r2, #8
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0203 	and.w	r2, r3, #3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80a2 	beq.w	8004496 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <HAL_GPIO_Init+0x2e8>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	4a56      	ldr	r2, [pc, #344]	; (80044b4 <HAL_GPIO_Init+0x2e8>)
 800435c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004360:	6453      	str	r3, [r2, #68]	; 0x44
 8004362:	4b54      	ldr	r3, [pc, #336]	; (80044b4 <HAL_GPIO_Init+0x2e8>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436e:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_GPIO_Init+0x2ec>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a49      	ldr	r2, [pc, #292]	; (80044bc <HAL_GPIO_Init+0x2f0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d019      	beq.n	80043ce <HAL_GPIO_Init+0x202>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a48      	ldr	r2, [pc, #288]	; (80044c0 <HAL_GPIO_Init+0x2f4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_GPIO_Init+0x1fe>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a47      	ldr	r2, [pc, #284]	; (80044c4 <HAL_GPIO_Init+0x2f8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00d      	beq.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a46      	ldr	r2, [pc, #280]	; (80044c8 <HAL_GPIO_Init+0x2fc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <HAL_GPIO_Init+0x1f6>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a45      	ldr	r2, [pc, #276]	; (80044cc <HAL_GPIO_Init+0x300>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_GPIO_Init+0x1f2>
 80043ba:	2304      	movs	r3, #4
 80043bc:	e008      	b.n	80043d0 <HAL_GPIO_Init+0x204>
 80043be:	2307      	movs	r3, #7
 80043c0:	e006      	b.n	80043d0 <HAL_GPIO_Init+0x204>
 80043c2:	2303      	movs	r3, #3
 80043c4:	e004      	b.n	80043d0 <HAL_GPIO_Init+0x204>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e002      	b.n	80043d0 <HAL_GPIO_Init+0x204>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_GPIO_Init+0x204>
 80043ce:	2300      	movs	r3, #0
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	f002 0203 	and.w	r2, r2, #3
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	4093      	lsls	r3, r2
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043e0:	4935      	ldr	r1, [pc, #212]	; (80044b8 <HAL_GPIO_Init+0x2ec>)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	3302      	adds	r3, #2
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ee:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <HAL_GPIO_Init+0x304>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004412:	4a2f      	ldr	r2, [pc, #188]	; (80044d0 <HAL_GPIO_Init+0x304>)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_GPIO_Init+0x304>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_GPIO_Init+0x304>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_GPIO_Init+0x304>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	43db      	mvns	r3, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4013      	ands	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004466:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <HAL_GPIO_Init+0x304>)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_GPIO_Init+0x304>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <HAL_GPIO_Init+0x304>)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3301      	adds	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b0f      	cmp	r3, #15
 80044a0:	f67f aea2 	bls.w	80041e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3724      	adds	r7, #36	; 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40020000 	.word	0x40020000
 80044c0:	40020400 	.word	0x40020400
 80044c4:	40020800 	.word	0x40020800
 80044c8:	40020c00 	.word	0x40020c00
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40013c00 	.word	0x40013c00

080044d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	e001      	b.n	80044f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004520:	e003      	b.n	800452a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd f80b 	bl	8001572 <HAL_GPIO_EXTI_Callback>
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e12b      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fcbc 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045cc:	f001 f896 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4a81      	ldr	r2, [pc, #516]	; (80047dc <HAL_I2C_Init+0x274>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d807      	bhi.n	80045ec <HAL_I2C_Init+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a80      	ldr	r2, [pc, #512]	; (80047e0 <HAL_I2C_Init+0x278>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e006      	b.n	80045fa <HAL_I2C_Init+0x92>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a7d      	ldr	r2, [pc, #500]	; (80047e4 <HAL_I2C_Init+0x27c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bf94      	ite	ls
 80045f4:	2301      	movls	r3, #1
 80045f6:	2300      	movhi	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0e7      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a78      	ldr	r2, [pc, #480]	; (80047e8 <HAL_I2C_Init+0x280>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_I2C_Init+0x274>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <HAL_I2C_Init+0xd4>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	e009      	b.n	8004650 <HAL_I2C_Init+0xe8>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	4a69      	ldr	r2, [pc, #420]	; (80047ec <HAL_I2C_Init+0x284>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	3301      	adds	r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	495c      	ldr	r1, [pc, #368]	; (80047dc <HAL_I2C_Init+0x274>)
 800466c:	428b      	cmp	r3, r1
 800466e:	d819      	bhi.n	80046a4 <HAL_I2C_Init+0x13c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1e59      	subs	r1, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb1 f3f3 	udiv	r3, r1, r3
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004684:	400b      	ands	r3, r1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_I2C_Init+0x138>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1e59      	subs	r1, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fbb1 f3f3 	udiv	r3, r1, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	e051      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e04f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <HAL_I2C_Init+0x168>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1e58      	subs	r0, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	440b      	add	r3, r1
 80046ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80046be:	3301      	adds	r3, #1
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e012      	b.n	80046f6 <HAL_I2C_Init+0x18e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	0099      	lsls	r1, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Init+0x196>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e022      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10e      	bne.n	8004724 <HAL_I2C_Init+0x1bc>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e58      	subs	r0, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	440b      	add	r3, r1
 8004714:	fbb0 f3f3 	udiv	r3, r0, r3
 8004718:	3301      	adds	r3, #1
 800471a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004722:	e00f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e58      	subs	r0, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	0099      	lsls	r1, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6809      	ldr	r1, [r1, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6911      	ldr	r1, [r2, #16]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68d2      	ldr	r2, [r2, #12]
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	000186a0 	.word	0x000186a0
 80047e0:	001e847f 	.word	0x001e847f
 80047e4:	003d08ff 	.word	0x003d08ff
 80047e8:	431bde83 	.word	0x431bde83
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800480a:	f7fe faef 	bl	8002dec <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	f040 80d9 	bne.w	80049d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2319      	movs	r3, #25
 8004824:	2201      	movs	r2, #1
 8004826:	496d      	ldr	r1, [pc, #436]	; (80049dc <HAL_I2C_Mem_Write+0x1ec>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f971 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
 8004836:	e0cc      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Mem_Write+0x56>
 8004842:	2302      	movs	r3, #2
 8004844:	e0c5      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d007      	beq.n	800486c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2221      	movs	r2, #33	; 0x21
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_I2C_Mem_Write+0x1f0>)
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ae:	88f8      	ldrh	r0, [r7, #6]
 80048b0:	893a      	ldrh	r2, [r7, #8]
 80048b2:	8979      	ldrh	r1, [r7, #10]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4603      	mov	r3, r0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f890 	bl	80049e4 <I2C_RequestMemoryWrite>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d052      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e081      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f9f2 	bl	8004cbc <I2C_WaitOnTXEFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d107      	bne.n	80048f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06b      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_I2C_Mem_Write+0x180>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d017      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1aa      	bne.n	80048ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f9de 	bl	8004d3e <I2C_WaitOnBTFFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e016      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e000      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	00100002 	.word	0x00100002
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f878 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a34:	d103      	bne.n	8004a3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e05f      	b.n	8004b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	492d      	ldr	r1, [pc, #180]	; (8004b0c <I2C_RequestMemoryWrite+0x128>)
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f8b0 	bl	8004bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e04c      	b.n	8004b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	6a39      	ldr	r1, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f91a 	bl	8004cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d107      	bne.n	8004aa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e02b      	b.n	8004b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]
 8004aba:	e021      	b.n	8004b00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	6a39      	ldr	r1, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f8f4 	bl	8004cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d107      	bne.n	8004af2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e005      	b.n	8004b02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	00010002 	.word	0x00010002

08004b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b20:	e025      	b.n	8004b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d021      	beq.n	8004b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fe f95f 	bl	8002dec <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d116      	bne.n	8004b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e023      	b.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10d      	bne.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	e00c      	b.n	8004bae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d0b6      	beq.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bcc:	e051      	b.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bdc:	d123      	bne.n	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0204 	orr.w	r2, r3, #4
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e046      	b.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d021      	beq.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fe f8dd 	bl	8002dec <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d116      	bne.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e020      	b.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10c      	bne.n	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	43da      	mvns	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4013      	ands	r3, r2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	2300      	moveq	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	e00b      	b.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d18d      	bne.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc8:	e02d      	b.n	8004d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f878 	bl	8004dc0 <I2C_IsAcknowledgeFailed>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e02d      	b.n	8004d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d021      	beq.n	8004d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fe f883 	bl	8002dec <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e007      	b.n	8004d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d1ca      	bne.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d4a:	e02d      	b.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f837 	bl	8004dc0 <I2C_IsAcknowledgeFailed>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e02d      	b.n	8004db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d021      	beq.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d64:	f7fe f842 	bl	8002dec <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d302      	bcc.n	8004d7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d116      	bne.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e007      	b.n	8004db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d1ca      	bne.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d11b      	bne.n	8004e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f043 0204 	orr.w	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e267      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d075      	beq.n	8004f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d00c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4a:	4b85      	ldr	r3, [pc, #532]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d112      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e56:	4b82      	ldr	r3, [pc, #520]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	4b7e      	ldr	r3, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d05b      	beq.n	8004f28 <HAL_RCC_OscConfig+0x108>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d157      	bne.n	8004f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e242      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d106      	bne.n	8004e94 <HAL_RCC_OscConfig+0x74>
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e01d      	b.n	8004ed0 <HAL_RCC_OscConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x98>
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6f      	ldr	r2, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6c      	ldr	r2, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0xb0>
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a68      	ldr	r2, [pc, #416]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d013      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd ff88 	bl	8002dec <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7fd ff84 	bl	8002dec <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e207      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0xc0>
 8004efe:	e014      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fd ff74 	bl	8002dec <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fd ff70 	bl	8002dec <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1f3      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1a:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0xe8>
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d063      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d11c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCC_OscConfig+0x152>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e1c7      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4937      	ldr	r1, [pc, #220]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	e03a      	b.n	8004ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d020      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_RCC_OscConfig+0x244>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fd ff29 	bl	8002dec <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9e:	f7fd ff25 	bl	8002dec <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e1a8      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4925      	ldr	r1, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
 8004fd0:	e015      	b.n	8004ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x244>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fd ff08 	bl	8002dec <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe0:	f7fd ff04 	bl	8002dec <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e187      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d036      	beq.n	8005078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_RCC_OscConfig+0x248>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd fee8 	bl	8002dec <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005020:	f7fd fee4 	bl	8002dec <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e167      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x200>
 800503e:	e01b      	b.n	8005078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_OscConfig+0x248>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005046:	f7fd fed1 	bl	8002dec <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00e      	b.n	800506c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504e:	f7fd fecd 	bl	8002dec <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d907      	bls.n	800506c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e150      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
 8005060:	40023800 	.word	0x40023800
 8005064:	42470000 	.word	0x42470000
 8005068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	4b88      	ldr	r3, [pc, #544]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ea      	bne.n	800504e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8097 	beq.w	80051b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a7c      	ldr	r2, [pc, #496]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b7a      	ldr	r3, [pc, #488]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b6:	4b77      	ldr	r3, [pc, #476]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d118      	bne.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c2:	4b74      	ldr	r3, [pc, #464]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a73      	ldr	r2, [pc, #460]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ce:	f7fd fe8d 	bl	8002dec <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fd fe89 	bl	8002dec <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e10c      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x2ea>
 80050fc:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a63      	ldr	r2, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	e01c      	b.n	8005144 <HAL_RCC_OscConfig+0x324>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b05      	cmp	r3, #5
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x30c>
 8005112:	4b5f      	ldr	r3, [pc, #380]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a5b      	ldr	r2, [pc, #364]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0x324>
 800512c:	4b58      	ldr	r3, [pc, #352]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	4b55      	ldr	r3, [pc, #340]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a54      	ldr	r2, [pc, #336]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800513e:	f023 0304 	bic.w	r3, r3, #4
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd fe4e 	bl	8002dec <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fd fe4a 	bl	8002dec <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0cb      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0ee      	beq.n	8005154 <HAL_RCC_OscConfig+0x334>
 8005176:	e014      	b.n	80051a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fd fe38 	bl	8002dec <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	e00a      	b.n	8005196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fd fe34 	bl	8002dec <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0b5      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ee      	bne.n	8005180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b39      	ldr	r3, [pc, #228]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	4a38      	ldr	r2, [pc, #224]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80a1 	beq.w	8005300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051be:	4b34      	ldr	r3, [pc, #208]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d05c      	beq.n	8005284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d141      	bne.n	8005256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fd fe08 	bl	8002dec <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fd fe04 	bl	8002dec <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e087      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	4b27      	ldr	r3, [pc, #156]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	3b01      	subs	r3, #1
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	491b      	ldr	r1, [pc, #108]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fd fddd 	bl	8002dec <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fd fdd9 	bl	8002dec <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e05c      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x416>
 8005254:	e054      	b.n	8005300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fd fdc6 	bl	8002dec <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd fdc2 	bl	8002dec <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e045      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x444>
 8005282:	e03d      	b.n	8005300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d107      	bne.n	800529c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e038      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
 8005290:	40023800 	.word	0x40023800
 8005294:	40007000 	.word	0x40007000
 8005298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x4ec>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d028      	beq.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d121      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d11a      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d111      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800

08005310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0cc      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005324:	4b68      	ldr	r3, [pc, #416]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d90c      	bls.n	800534c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b63      	ldr	r3, [pc, #396]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0b8      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005364:	4b59      	ldr	r3, [pc, #356]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a58      	ldr	r2, [pc, #352]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800536e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4a52      	ldr	r2, [pc, #328]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005388:	4b50      	ldr	r3, [pc, #320]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	494d      	ldr	r1, [pc, #308]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d044      	beq.n	8005430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d119      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d003      	beq.n	80053ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ce:	4b3f      	ldr	r3, [pc, #252]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e06f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053de:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e067      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4934      	ldr	r1, [pc, #208]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005400:	f7fd fcf4 	bl	8002dec <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	e00a      	b.n	800541e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005408:	f7fd fcf0 	bl	8002dec <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e04f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 020c 	and.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d1eb      	bne.n	8005408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20c      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e032      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4916      	ldr	r1, [pc, #88]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	490e      	ldr	r1, [pc, #56]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005496:	f000 f821 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800549a:	4602      	mov	r2, r0
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	490a      	ldr	r1, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x1c0>)
 80054a8:	5ccb      	ldrb	r3, [r1, r3]
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd fc54 	bl	8002d64 <HAL_InitTick>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40023c00 	.word	0x40023c00
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800795c 	.word	0x0800795c
 80054d4:	20000090 	.word	0x20000090
 80054d8:	20000094 	.word	0x20000094

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b094      	sub	sp, #80	; 0x50
 80054e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
 80054e8:	2300      	movs	r3, #0
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	2300      	movs	r3, #0
 80054ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f4:	4b79      	ldr	r3, [pc, #484]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d00d      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x40>
 8005500:	2b08      	cmp	r3, #8
 8005502:	f200 80e1 	bhi.w	80056c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x34>
 800550a:	2b04      	cmp	r3, #4
 800550c:	d003      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x3a>
 800550e:	e0db      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005514:	e0db      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005516:	4b72      	ldr	r3, [pc, #456]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800551a:	e0d8      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551c:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b6d      	ldr	r3, [pc, #436]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d063      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	2200      	movs	r2, #0
 800553a:	63bb      	str	r3, [r7, #56]	; 0x38
 800553c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	633b      	str	r3, [r7, #48]	; 0x30
 8005546:	2300      	movs	r3, #0
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	0159      	lsls	r1, r3, #5
 800555c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005560:	0150      	lsls	r0, r2, #5
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4621      	mov	r1, r4
 8005568:	1a51      	subs	r1, r2, r1
 800556a:	6139      	str	r1, [r7, #16]
 800556c:	4629      	mov	r1, r5
 800556e:	eb63 0301 	sbc.w	r3, r3, r1
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005580:	4659      	mov	r1, fp
 8005582:	018b      	lsls	r3, r1, #6
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800558a:	4651      	mov	r1, sl
 800558c:	018a      	lsls	r2, r1, #6
 800558e:	4651      	mov	r1, sl
 8005590:	ebb2 0801 	subs.w	r8, r2, r1
 8005594:	4659      	mov	r1, fp
 8005596:	eb63 0901 	sbc.w	r9, r3, r1
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ae:	4690      	mov	r8, r2
 80055b0:	4699      	mov	r9, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	eb18 0303 	adds.w	r3, r8, r3
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	462b      	mov	r3, r5
 80055bc:	eb49 0303 	adc.w	r3, r9, r3
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ce:	4629      	mov	r1, r5
 80055d0:	028b      	lsls	r3, r1, #10
 80055d2:	4621      	mov	r1, r4
 80055d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055d8:	4621      	mov	r1, r4
 80055da:	028a      	lsls	r2, r1, #10
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e2:	2200      	movs	r2, #0
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ec:	f7fa fdfc 	bl	80001e8 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	e058      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	099b      	lsrs	r3, r3, #6
 8005600:	2200      	movs	r2, #0
 8005602:	4618      	mov	r0, r3
 8005604:	4611      	mov	r1, r2
 8005606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	2300      	movs	r3, #0
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	f04f 0000 	mov.w	r0, #0
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	0159      	lsls	r1, r3, #5
 8005622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005626:	0150      	lsls	r0, r2, #5
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4641      	mov	r1, r8
 800562e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005632:	4649      	mov	r1, r9
 8005634:	eb63 0b01 	sbc.w	fp, r3, r1
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800564c:	ebb2 040a 	subs.w	r4, r2, sl
 8005650:	eb63 050b 	sbc.w	r5, r3, fp
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	00eb      	lsls	r3, r5, #3
 800565e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005662:	00e2      	lsls	r2, r4, #3
 8005664:	4614      	mov	r4, r2
 8005666:	461d      	mov	r5, r3
 8005668:	4643      	mov	r3, r8
 800566a:	18e3      	adds	r3, r4, r3
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	464b      	mov	r3, r9
 8005670:	eb45 0303 	adc.w	r3, r5, r3
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005682:	4629      	mov	r1, r5
 8005684:	028b      	lsls	r3, r1, #10
 8005686:	4621      	mov	r1, r4
 8005688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800568c:	4621      	mov	r1, r4
 800568e:	028a      	lsls	r2, r1, #10
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005696:	2200      	movs	r2, #0
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	61fa      	str	r2, [r7, #28]
 800569c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a0:	f7fa fda2 	bl	80001e8 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4613      	mov	r3, r2
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	3301      	adds	r3, #1
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056c6:	e002      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3750      	adds	r7, #80	; 0x50
 80056d4:	46bd      	mov	sp, r7
 80056d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800
 80056e0:	00f42400 	.word	0x00f42400

080056e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000090 	.word	0x20000090

080056fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005700:	f7ff fff0 	bl	80056e4 <HAL_RCC_GetHCLKFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	0a9b      	lsrs	r3, r3, #10
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	4903      	ldr	r1, [pc, #12]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40023800 	.word	0x40023800
 8005720:	0800796c 	.word	0x0800796c

08005724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e07b      	b.n	800582e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d108      	bne.n	8005750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005746:	d009      	beq.n	800575c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
 800574e:	e005      	b.n	800575c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc fe10 	bl	800239c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e0:	ea42 0103 	orr.w	r1, r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	f003 0104 	and.w	r1, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	f003 0210 	and.w	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800581c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b088      	sub	sp, #32
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_SPI_Transmit+0x22>
 8005854:	2302      	movs	r3, #2
 8005856:	e126      	b.n	8005aa6 <HAL_SPI_Transmit+0x270>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005860:	f7fd fac4 	bl	8002dec <HAL_GetTick>
 8005864:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	d002      	beq.n	800587c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	77fb      	strb	r3, [r7, #31]
    goto error;
 800587a:	e10b      	b.n	8005a94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_SPI_Transmit+0x52>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800588c:	e102      	b.n	8005a94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2203      	movs	r2, #3
 8005892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	d10f      	bne.n	80058f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d007      	beq.n	8005914 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591c:	d14b      	bne.n	80059b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SPI_Transmit+0xf6>
 8005926:	8afb      	ldrh	r3, [r7, #22]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d13e      	bne.n	80059aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005950:	e02b      	b.n	80059aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d112      	bne.n	8005986 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	86da      	strh	r2, [r3, #54]	; 0x36
 8005984:	e011      	b.n	80059aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005986:	f7fd fa31 	bl	8002dec <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d803      	bhi.n	800599e <HAL_SPI_Transmit+0x168>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d102      	bne.n	80059a4 <HAL_SPI_Transmit+0x16e>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059a8:	e074      	b.n	8005a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1ce      	bne.n	8005952 <HAL_SPI_Transmit+0x11c>
 80059b4:	e04c      	b.n	8005a50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_SPI_Transmit+0x18e>
 80059be:	8afb      	ldrh	r3, [r7, #22]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d140      	bne.n	8005a46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059ea:	e02c      	b.n	8005a46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d113      	bne.n	8005a22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a20:	e011      	b.n	8005a46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a22:	f7fd f9e3 	bl	8002dec <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d803      	bhi.n	8005a3a <HAL_SPI_Transmit+0x204>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d102      	bne.n	8005a40 <HAL_SPI_Transmit+0x20a>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a44:	e026      	b.n	8005a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1cd      	bne.n	80059ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fcdd 	bl	8006414 <SPI_EndRxTxTransaction>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e000      	b.n	8005a94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b088      	sub	sp, #32
 8005ab2:	af02      	add	r7, sp, #8
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aca:	d112      	bne.n	8005af2 <HAL_SPI_Receive+0x44>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10e      	bne.n	8005af2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f8f1 	bl	8005cd0 <HAL_SPI_TransmitReceive>
 8005aee:	4603      	mov	r3, r0
 8005af0:	e0ea      	b.n	8005cc8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_SPI_Receive+0x52>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0e3      	b.n	8005cc8 <HAL_SPI_Receive+0x21a>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b08:	f7fd f970 	bl	8002dec <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d002      	beq.n	8005b20 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b1e:	e0ca      	b.n	8005cb6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Receive+0x7e>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b30:	e0c1      	b.n	8005cb6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2204      	movs	r2, #4
 8005b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b78:	d10f      	bne.n	8005b9a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d007      	beq.n	8005bb8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d162      	bne.n	8005c86 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bc0:	e02e      	b.n	8005c20 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d115      	bne.n	8005bfc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f103 020c 	add.w	r2, r3, #12
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	7812      	ldrb	r2, [r2, #0]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bfa:	e011      	b.n	8005c20 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfc:	f7fd f8f6 	bl	8002dec <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d803      	bhi.n	8005c14 <HAL_SPI_Receive+0x166>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d102      	bne.n	8005c1a <HAL_SPI_Receive+0x16c>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c1e:	e04a      	b.n	8005cb6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1cb      	bne.n	8005bc2 <HAL_SPI_Receive+0x114>
 8005c2a:	e031      	b.n	8005c90 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d113      	bne.n	8005c62 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	b292      	uxth	r2, r2
 8005c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c60:	e011      	b.n	8005c86 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c62:	f7fd f8c3 	bl	8002dec <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d803      	bhi.n	8005c7a <HAL_SPI_Receive+0x1cc>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d102      	bne.n	8005c80 <HAL_SPI_Receive+0x1d2>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c84:	e017      	b.n	8005cb6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1cd      	bne.n	8005c2c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fb57 	bl	8006348 <SPI_EndRxTransaction>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
 8005cb2:	e000      	b.n	8005cb6 <HAL_SPI_Receive+0x208>
  }

error :
 8005cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x26>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e18a      	b.n	800600c <HAL_SPI_TransmitReceive+0x33c>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cfe:	f7fd f875 	bl	8002dec <HAL_GetTick>
 8005d02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d14:	887b      	ldrh	r3, [r7, #2]
 8005d16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d00f      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x70>
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d26:	d107      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x68>
 8005d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d003      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d3e:	e15b      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x82>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x82>
 8005d4c:	887b      	ldrh	r3, [r7, #2]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d58:	e14e      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d003      	beq.n	8005d6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2205      	movs	r2, #5
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	887a      	ldrh	r2, [r7, #2]
 8005d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	887a      	ldrh	r2, [r7, #2]
 8005d96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d007      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dca:	d178      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_TransmitReceive+0x10a>
 8005dd4:	8b7b      	ldrh	r3, [r7, #26]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d166      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfe:	e053      	b.n	8005ea8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d11b      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x176>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d016      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x176>
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d113      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d119      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x1b8>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d014      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	b292      	uxth	r2, r2
 8005e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e88:	f7fc ffb0 	bl	8002dec <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d807      	bhi.n	8005ea8 <HAL_SPI_TransmitReceive+0x1d8>
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d003      	beq.n	8005ea8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ea6:	e0a7      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1a6      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x130>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1a1      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x130>
 8005ebc:	e07c      	b.n	8005fb8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x1fc>
 8005ec6:	8b7b      	ldrh	r3, [r7, #26]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d16b      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef2:	e057      	b.n	8005fa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d11c      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x26c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d017      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x26c>
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d114      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d119      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x2ae>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d014      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f7e:	f7fc ff35 	bl	8002dec <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d803      	bhi.n	8005f96 <HAL_SPI_TransmitReceive+0x2c6>
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d102      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x2cc>
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fa2:	e029      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1a2      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x224>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d19d      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fa29 	bl	8006414 <SPI_EndRxTxTransaction>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fd4:	e010      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e000      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ff6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800600c:	4618      	mov	r0, r3
 800600e:	3730      	adds	r7, #48	; 0x30
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10e      	bne.n	8006054 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
    return;
 8006052:	e0ce      	b.n	80061f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <HAL_SPI_IRQHandler+0x5e>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
    return;
 8006070:	e0bf      	b.n	80061f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <HAL_SPI_IRQHandler+0x7e>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80b0 	beq.w	80061f2 <HAL_SPI_IRQHandler+0x1de>
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80aa 	beq.w	80061f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d023      	beq.n	80060f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d011      	beq.n	80060d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b8:	f043 0204 	orr.w	r2, r3, #4
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	e00b      	b.n	80060f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d8:	2300      	movs	r3, #0
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	693b      	ldr	r3, [r7, #16]
        return;
 80060ee:	e080      	b.n	80061f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d014      	beq.n	8006124 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fe:	f043 0201 	orr.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f043 0208 	orr.w	r2, r3, #8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	2b00      	cmp	r3, #0
 800614e:	d04f      	beq.n	80061f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800615e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_SPI_IRQHandler+0x168>
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d034      	beq.n	80061e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0203 	bic.w	r2, r2, #3
 800618a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d011      	beq.n	80061b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <HAL_SPI_IRQHandler+0x1e4>)
 800619a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fd87 	bl	8003cb4 <HAL_DMA_Abort_IT>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d016      	beq.n	80061ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c4:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <HAL_SPI_IRQHandler+0x1e4>)
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd fd71 	bl	8003cb4 <HAL_DMA_Abort_IT>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80061e4:	e003      	b.n	80061ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f808 	bl	80061fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80061ec:	e000      	b.n	80061f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80061ee:	bf00      	nop
    return;
 80061f0:	bf00      	nop
  }
}
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	08006211 	.word	0x08006211

080061fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff ffe6 	bl	80061fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006248:	f7fc fdd0 	bl	8002dec <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	4413      	add	r3, r2
 8006256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006258:	f7fc fdc8 	bl	8002dec <HAL_GetTick>
 800625c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800625e:	4b39      	ldr	r3, [pc, #228]	; (8006344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	015b      	lsls	r3, r3, #5
 8006264:	0d1b      	lsrs	r3, r3, #20
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	fb02 f303 	mul.w	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626e:	e054      	b.n	800631a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d050      	beq.n	800631a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006278:	f7fc fdb8 	bl	8002dec <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	429a      	cmp	r2, r3
 8006286:	d902      	bls.n	800628e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13d      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800629c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a6:	d111      	bne.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d004      	beq.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ba:	d107      	bne.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d4:	d10f      	bne.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e017      	b.n	800633a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3b01      	subs	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	429a      	cmp	r2, r3
 8006336:	d19b      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000090 	.word	0x20000090

08006348 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635c:	d111      	bne.n	8006382 <SPI_EndRxTransaction+0x3a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006366:	d004      	beq.n	8006372 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d107      	bne.n	8006382 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006380:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800638a:	d12a      	bne.n	80063e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d012      	beq.n	80063bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	2180      	movs	r1, #128	; 0x80
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff ff49 	bl	8006238 <SPI_WaitFlagStateUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d02d      	beq.n	8006408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	f043 0220 	orr.w	r2, r3, #32
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e026      	b.n	800640a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2101      	movs	r1, #1
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff ff36 	bl	8006238 <SPI_WaitFlagStateUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01a      	beq.n	8006408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e013      	b.n	800640a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2101      	movs	r1, #1
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff23 	bl	8006238 <SPI_WaitFlagStateUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e000      	b.n	800640a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006420:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <SPI_EndRxTxTransaction+0x7c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <SPI_EndRxTxTransaction+0x80>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	0d5b      	lsrs	r3, r3, #21
 800642c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643e:	d112      	bne.n	8006466 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff fef4 	bl	8006238 <SPI_WaitFlagStateUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e00f      	b.n	8006486 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3b01      	subs	r3, #1
 8006470:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d0f2      	beq.n	8006466 <SPI_EndRxTxTransaction+0x52>
 8006480:	e000      	b.n	8006484 <SPI_EndRxTxTransaction+0x70>
        break;
 8006482:	bf00      	nop
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000090 	.word	0x20000090
 8006494:	165e9f81 	.word	0x165e9f81

08006498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e041      	b.n	800652e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fc fbdc 	bl	8002c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f000 faf6 	bl	8006ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d001      	beq.n	8006550 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e03c      	b.n	80065ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_TIM_Base_Start+0xa0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d018      	beq.n	8006594 <HAL_TIM_Base_Start+0x5c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d013      	beq.n	8006594 <HAL_TIM_Base_Start+0x5c>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_TIM_Base_Start+0xa4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00e      	beq.n	8006594 <HAL_TIM_Base_Start+0x5c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <HAL_TIM_Base_Start+0xa8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_TIM_Base_Start+0x5c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <HAL_TIM_Base_Start+0xac>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_TIM_Base_Start+0x5c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <HAL_TIM_Base_Start+0xb0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d111      	bne.n	80065b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b06      	cmp	r3, #6
 80065a4:	d010      	beq.n	80065c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b6:	e007      	b.n	80065c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40014000 	.word	0x40014000

080065ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e097      	b.n	8006730 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fc fae9 	bl	8002bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f000 fa41 	bl	8006ac8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	4313      	orrs	r3, r2
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800668c:	f023 030c 	bic.w	r3, r3, #12
 8006690:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	4313      	orrs	r3, r2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	011a      	lsls	r2, r3, #4
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	031b      	lsls	r3, r3, #12
 80066bc:	4313      	orrs	r3, r2
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	4313      	orrs	r3, r2
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006748:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006750:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006758:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006760:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d110      	bne.n	800678a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d102      	bne.n	8006774 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800676e:	7b7b      	ldrb	r3, [r7, #13]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d001      	beq.n	8006778 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e069      	b.n	800684c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	e031      	b.n	80067ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b04      	cmp	r3, #4
 800678e:	d110      	bne.n	80067b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d102      	bne.n	800679c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006796:	7b3b      	ldrb	r3, [r7, #12]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d001      	beq.n	80067a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e055      	b.n	800684c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b0:	e01d      	b.n	80067ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d108      	bne.n	80067ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d105      	bne.n	80067ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	7b7b      	ldrb	r3, [r7, #13]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d102      	bne.n	80067ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067c4:	7b3b      	ldrb	r3, [r7, #12]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d001      	beq.n	80067ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e03e      	b.n	800684c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_TIM_Encoder_Start+0xc4>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d008      	beq.n	800680c <HAL_TIM_Encoder_Start+0xd4>
 80067fa:	e00f      	b.n	800681c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f000 f9df 	bl	8006bc8 <TIM_CCxChannelCmd>
      break;
 800680a:	e016      	b.n	800683a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2201      	movs	r2, #1
 8006812:	2104      	movs	r1, #4
 8006814:	4618      	mov	r0, r3
 8006816:	f000 f9d7 	bl	8006bc8 <TIM_CCxChannelCmd>
      break;
 800681a:	e00e      	b.n	800683a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2201      	movs	r2, #1
 8006822:	2100      	movs	r1, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f9cf 	bl	8006bc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2201      	movs	r2, #1
 8006830:	2104      	movs	r1, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f9c8 	bl	8006bc8 <TIM_CCxChannelCmd>
      break;
 8006838:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b02      	cmp	r3, #2
 8006868:	d122      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b02      	cmp	r3, #2
 8006876:	d11b      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0202 	mvn.w	r2, #2
 8006880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8f8 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 800689c:	e005      	b.n	80068aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f8ea 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f8fb 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d122      	bne.n	8006904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d11b      	bne.n	8006904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0204 	mvn.w	r2, #4
 80068d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f8ce 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 80068f0:	e005      	b.n	80068fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f8c0 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f8d1 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b08      	cmp	r3, #8
 8006910:	d122      	bne.n	8006958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b08      	cmp	r3, #8
 800691e:	d11b      	bne.n	8006958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0208 	mvn.w	r2, #8
 8006928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2204      	movs	r2, #4
 800692e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8a4 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f896 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f8a7 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b10      	cmp	r3, #16
 8006964:	d122      	bne.n	80069ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b10      	cmp	r3, #16
 8006972:	d11b      	bne.n	80069ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0210 	mvn.w	r2, #16
 800697c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2208      	movs	r2, #8
 8006982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f87a 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 8006998:	e005      	b.n	80069a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f86c 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f87d 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10e      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d107      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0201 	mvn.w	r2, #1
 80069d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f846 	bl	8006a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b80      	cmp	r3, #128	; 0x80
 80069e4:	d10e      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	2b80      	cmp	r3, #128	; 0x80
 80069f2:	d107      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f980 	bl	8006d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d10e      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d107      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f842 	bl	8006ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d10e      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d107      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0220 	mvn.w	r2, #32
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f94a 	bl	8006cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a34      	ldr	r2, [pc, #208]	; (8006bac <TIM_Base_SetConfig+0xe4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00f      	beq.n	8006b00 <TIM_Base_SetConfig+0x38>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae6:	d00b      	beq.n	8006b00 <TIM_Base_SetConfig+0x38>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a31      	ldr	r2, [pc, #196]	; (8006bb0 <TIM_Base_SetConfig+0xe8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <TIM_Base_SetConfig+0x38>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a30      	ldr	r2, [pc, #192]	; (8006bb4 <TIM_Base_SetConfig+0xec>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_Base_SetConfig+0x38>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a2f      	ldr	r2, [pc, #188]	; (8006bb8 <TIM_Base_SetConfig+0xf0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d108      	bne.n	8006b12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a25      	ldr	r2, [pc, #148]	; (8006bac <TIM_Base_SetConfig+0xe4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d01b      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b20:	d017      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a22      	ldr	r2, [pc, #136]	; (8006bb0 <TIM_Base_SetConfig+0xe8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a21      	ldr	r2, [pc, #132]	; (8006bb4 <TIM_Base_SetConfig+0xec>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00f      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a20      	ldr	r2, [pc, #128]	; (8006bb8 <TIM_Base_SetConfig+0xf0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00b      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1f      	ldr	r2, [pc, #124]	; (8006bbc <TIM_Base_SetConfig+0xf4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d007      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a1e      	ldr	r2, [pc, #120]	; (8006bc0 <TIM_Base_SetConfig+0xf8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_Base_SetConfig+0x8a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <TIM_Base_SetConfig+0xfc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d108      	bne.n	8006b64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a08      	ldr	r2, [pc, #32]	; (8006bac <TIM_Base_SetConfig+0xe4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d103      	bne.n	8006b98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	615a      	str	r2, [r3, #20]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2201      	movs	r2, #1
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	43db      	mvns	r3, r3
 8006bea:	401a      	ands	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006c00:	431a      	orrs	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e050      	b.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1c      	ldr	r2, [pc, #112]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d018      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c78:	d013      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a18      	ldr	r2, [pc, #96]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a16      	ldr	r2, [pc, #88]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a13      	ldr	r2, [pc, #76]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d10c      	bne.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40014000 	.word	0x40014000

08006cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <std>:
 8006d18:	2300      	movs	r3, #0
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d26:	6083      	str	r3, [r0, #8]
 8006d28:	8181      	strh	r1, [r0, #12]
 8006d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d2c:	81c2      	strh	r2, [r0, #14]
 8006d2e:	6183      	str	r3, [r0, #24]
 8006d30:	4619      	mov	r1, r3
 8006d32:	2208      	movs	r2, #8
 8006d34:	305c      	adds	r0, #92	; 0x5c
 8006d36:	f000 f9e5 	bl	8007104 <memset>
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <std+0x58>)
 8006d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <std+0x5c>)
 8006d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <std+0x60>)
 8006d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <std+0x64>)
 8006d48:	6323      	str	r3, [r4, #48]	; 0x30
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <std+0x68>)
 8006d4c:	6224      	str	r4, [r4, #32]
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	d006      	beq.n	8006d60 <std+0x48>
 8006d52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d56:	4294      	cmp	r4, r2
 8006d58:	d002      	beq.n	8006d60 <std+0x48>
 8006d5a:	33d0      	adds	r3, #208	; 0xd0
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	d105      	bne.n	8006d6c <std+0x54>
 8006d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d68:	f000 ba44 	b.w	80071f4 <__retarget_lock_init_recursive>
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	08006f55 	.word	0x08006f55
 8006d74:	08006f77 	.word	0x08006f77
 8006d78:	08006faf 	.word	0x08006faf
 8006d7c:	08006fd3 	.word	0x08006fd3
 8006d80:	20000904 	.word	0x20000904

08006d84 <stdio_exit_handler>:
 8006d84:	4a02      	ldr	r2, [pc, #8]	; (8006d90 <stdio_exit_handler+0xc>)
 8006d86:	4903      	ldr	r1, [pc, #12]	; (8006d94 <stdio_exit_handler+0x10>)
 8006d88:	4803      	ldr	r0, [pc, #12]	; (8006d98 <stdio_exit_handler+0x14>)
 8006d8a:	f000 b869 	b.w	8006e60 <_fwalk_sglue>
 8006d8e:	bf00      	nop
 8006d90:	2000009c 	.word	0x2000009c
 8006d94:	080074f9 	.word	0x080074f9
 8006d98:	200000a8 	.word	0x200000a8

08006d9c <cleanup_stdio>:
 8006d9c:	6841      	ldr	r1, [r0, #4]
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <cleanup_stdio+0x34>)
 8006da0:	4299      	cmp	r1, r3
 8006da2:	b510      	push	{r4, lr}
 8006da4:	4604      	mov	r4, r0
 8006da6:	d001      	beq.n	8006dac <cleanup_stdio+0x10>
 8006da8:	f000 fba6 	bl	80074f8 <_fflush_r>
 8006dac:	68a1      	ldr	r1, [r4, #8]
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <cleanup_stdio+0x38>)
 8006db0:	4299      	cmp	r1, r3
 8006db2:	d002      	beq.n	8006dba <cleanup_stdio+0x1e>
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fb9f 	bl	80074f8 <_fflush_r>
 8006dba:	68e1      	ldr	r1, [r4, #12]
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <cleanup_stdio+0x3c>)
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d004      	beq.n	8006dcc <cleanup_stdio+0x30>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc8:	f000 bb96 	b.w	80074f8 <_fflush_r>
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000904 	.word	0x20000904
 8006dd4:	2000096c 	.word	0x2000096c
 8006dd8:	200009d4 	.word	0x200009d4

08006ddc <global_stdio_init.part.0>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <global_stdio_init.part.0+0x30>)
 8006de0:	4c0b      	ldr	r4, [pc, #44]	; (8006e10 <global_stdio_init.part.0+0x34>)
 8006de2:	4a0c      	ldr	r2, [pc, #48]	; (8006e14 <global_stdio_init.part.0+0x38>)
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	4620      	mov	r0, r4
 8006de8:	2200      	movs	r2, #0
 8006dea:	2104      	movs	r1, #4
 8006dec:	f7ff ff94 	bl	8006d18 <std>
 8006df0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006df4:	2201      	movs	r2, #1
 8006df6:	2109      	movs	r1, #9
 8006df8:	f7ff ff8e 	bl	8006d18 <std>
 8006dfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e00:	2202      	movs	r2, #2
 8006e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e06:	2112      	movs	r1, #18
 8006e08:	f7ff bf86 	b.w	8006d18 <std>
 8006e0c:	20000a3c 	.word	0x20000a3c
 8006e10:	20000904 	.word	0x20000904
 8006e14:	08006d85 	.word	0x08006d85

08006e18 <__sfp_lock_acquire>:
 8006e18:	4801      	ldr	r0, [pc, #4]	; (8006e20 <__sfp_lock_acquire+0x8>)
 8006e1a:	f000 b9ec 	b.w	80071f6 <__retarget_lock_acquire_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20000a45 	.word	0x20000a45

08006e24 <__sfp_lock_release>:
 8006e24:	4801      	ldr	r0, [pc, #4]	; (8006e2c <__sfp_lock_release+0x8>)
 8006e26:	f000 b9e7 	b.w	80071f8 <__retarget_lock_release_recursive>
 8006e2a:	bf00      	nop
 8006e2c:	20000a45 	.word	0x20000a45

08006e30 <__sinit>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	f7ff fff0 	bl	8006e18 <__sfp_lock_acquire>
 8006e38:	6a23      	ldr	r3, [r4, #32]
 8006e3a:	b11b      	cbz	r3, 8006e44 <__sinit+0x14>
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f7ff bff0 	b.w	8006e24 <__sfp_lock_release>
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <__sinit+0x28>)
 8006e46:	6223      	str	r3, [r4, #32]
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <__sinit+0x2c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f5      	bne.n	8006e3c <__sinit+0xc>
 8006e50:	f7ff ffc4 	bl	8006ddc <global_stdio_init.part.0>
 8006e54:	e7f2      	b.n	8006e3c <__sinit+0xc>
 8006e56:	bf00      	nop
 8006e58:	08006d9d 	.word	0x08006d9d
 8006e5c:	20000a3c 	.word	0x20000a3c

08006e60 <_fwalk_sglue>:
 8006e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e64:	4607      	mov	r7, r0
 8006e66:	4688      	mov	r8, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e70:	f1b9 0901 	subs.w	r9, r9, #1
 8006e74:	d505      	bpl.n	8006e82 <_fwalk_sglue+0x22>
 8006e76:	6824      	ldr	r4, [r4, #0]
 8006e78:	2c00      	cmp	r4, #0
 8006e7a:	d1f7      	bne.n	8006e6c <_fwalk_sglue+0xc>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d907      	bls.n	8006e98 <_fwalk_sglue+0x38>
 8006e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	d003      	beq.n	8006e98 <_fwalk_sglue+0x38>
 8006e90:	4629      	mov	r1, r5
 8006e92:	4638      	mov	r0, r7
 8006e94:	47c0      	blx	r8
 8006e96:	4306      	orrs	r6, r0
 8006e98:	3568      	adds	r5, #104	; 0x68
 8006e9a:	e7e9      	b.n	8006e70 <_fwalk_sglue+0x10>

08006e9c <_puts_r>:
 8006e9c:	6a03      	ldr	r3, [r0, #32]
 8006e9e:	b570      	push	{r4, r5, r6, lr}
 8006ea0:	6884      	ldr	r4, [r0, #8]
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	460e      	mov	r6, r1
 8006ea6:	b90b      	cbnz	r3, 8006eac <_puts_r+0x10>
 8006ea8:	f7ff ffc2 	bl	8006e30 <__sinit>
 8006eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d405      	bmi.n	8006ebe <_puts_r+0x22>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	0598      	lsls	r0, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_puts_r+0x22>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eba:	f000 f99c 	bl	80071f6 <__retarget_lock_acquire_recursive>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	0719      	lsls	r1, r3, #28
 8006ec2:	d513      	bpl.n	8006eec <_puts_r+0x50>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	b18b      	cbz	r3, 8006eec <_puts_r+0x50>
 8006ec8:	3e01      	subs	r6, #1
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	b9e9      	cbnz	r1, 8006f12 <_puts_r+0x76>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da2e      	bge.n	8006f38 <_puts_r+0x9c>
 8006eda:	4622      	mov	r2, r4
 8006edc:	210a      	movs	r1, #10
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f87b 	bl	8006fda <__swbuf_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d007      	beq.n	8006ef8 <_puts_r+0x5c>
 8006ee8:	250a      	movs	r5, #10
 8006eea:	e007      	b.n	8006efc <_puts_r+0x60>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f8b0 	bl	8007054 <__swsetup_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0e7      	beq.n	8006ec8 <_puts_r+0x2c>
 8006ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8006efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006efe:	07da      	lsls	r2, r3, #31
 8006f00:	d405      	bmi.n	8006f0e <_puts_r+0x72>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	059b      	lsls	r3, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_puts_r+0x72>
 8006f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0a:	f000 f975 	bl	80071f8 <__retarget_lock_release_recursive>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da04      	bge.n	8006f20 <_puts_r+0x84>
 8006f16:	69a2      	ldr	r2, [r4, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	dc06      	bgt.n	8006f2a <_puts_r+0x8e>
 8006f1c:	290a      	cmp	r1, #10
 8006f1e:	d004      	beq.n	8006f2a <_puts_r+0x8e>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	7019      	strb	r1, [r3, #0]
 8006f28:	e7cf      	b.n	8006eca <_puts_r+0x2e>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 f854 	bl	8006fda <__swbuf_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	d1c9      	bne.n	8006eca <_puts_r+0x2e>
 8006f36:	e7df      	b.n	8006ef8 <_puts_r+0x5c>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	250a      	movs	r5, #10
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	701d      	strb	r5, [r3, #0]
 8006f42:	e7db      	b.n	8006efc <_puts_r+0x60>

08006f44 <puts>:
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <puts+0xc>)
 8006f46:	4601      	mov	r1, r0
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	f7ff bfa7 	b.w	8006e9c <_puts_r>
 8006f4e:	bf00      	nop
 8006f50:	200000f4 	.word	0x200000f4

08006f54 <__sread>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5c:	f000 f8fc 	bl	8007158 <_read_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	bfab      	itete	ge
 8006f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f66:	89a3      	ldrhlt	r3, [r4, #12]
 8006f68:	181b      	addge	r3, r3, r0
 8006f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f6e:	bfac      	ite	ge
 8006f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f72:	81a3      	strhlt	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__swrite>:
 8006f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	461f      	mov	r7, r3
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	05db      	lsls	r3, r3, #23
 8006f80:	4605      	mov	r5, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	4616      	mov	r6, r2
 8006f86:	d505      	bpl.n	8006f94 <__swrite+0x1e>
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f000 f8d0 	bl	8007134 <_lseek_r>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	f000 b8e7 	b.w	800717c <_write_r>

08006fae <__sseek>:
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb6:	f000 f8bd 	bl	8007134 <_lseek_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	bf15      	itete	ne
 8006fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strheq	r3, [r4, #12]
 8006fcc:	bf18      	it	ne
 8006fce:	81a3      	strhne	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__sclose>:
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 b89d 	b.w	8007114 <_close_r>

08006fda <__swbuf_r>:
 8006fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fdc:	460e      	mov	r6, r1
 8006fde:	4614      	mov	r4, r2
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	b118      	cbz	r0, 8006fec <__swbuf_r+0x12>
 8006fe4:	6a03      	ldr	r3, [r0, #32]
 8006fe6:	b90b      	cbnz	r3, 8006fec <__swbuf_r+0x12>
 8006fe8:	f7ff ff22 	bl	8006e30 <__sinit>
 8006fec:	69a3      	ldr	r3, [r4, #24]
 8006fee:	60a3      	str	r3, [r4, #8]
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	071a      	lsls	r2, r3, #28
 8006ff4:	d525      	bpl.n	8007042 <__swbuf_r+0x68>
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	b31b      	cbz	r3, 8007042 <__swbuf_r+0x68>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	6922      	ldr	r2, [r4, #16]
 8006ffe:	1a98      	subs	r0, r3, r2
 8007000:	6963      	ldr	r3, [r4, #20]
 8007002:	b2f6      	uxtb	r6, r6
 8007004:	4283      	cmp	r3, r0
 8007006:	4637      	mov	r7, r6
 8007008:	dc04      	bgt.n	8007014 <__swbuf_r+0x3a>
 800700a:	4621      	mov	r1, r4
 800700c:	4628      	mov	r0, r5
 800700e:	f000 fa73 	bl	80074f8 <_fflush_r>
 8007012:	b9e0      	cbnz	r0, 800704e <__swbuf_r+0x74>
 8007014:	68a3      	ldr	r3, [r4, #8]
 8007016:	3b01      	subs	r3, #1
 8007018:	60a3      	str	r3, [r4, #8]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	701e      	strb	r6, [r3, #0]
 8007022:	6962      	ldr	r2, [r4, #20]
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	429a      	cmp	r2, r3
 8007028:	d004      	beq.n	8007034 <__swbuf_r+0x5a>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	07db      	lsls	r3, r3, #31
 800702e:	d506      	bpl.n	800703e <__swbuf_r+0x64>
 8007030:	2e0a      	cmp	r6, #10
 8007032:	d104      	bne.n	800703e <__swbuf_r+0x64>
 8007034:	4621      	mov	r1, r4
 8007036:	4628      	mov	r0, r5
 8007038:	f000 fa5e 	bl	80074f8 <_fflush_r>
 800703c:	b938      	cbnz	r0, 800704e <__swbuf_r+0x74>
 800703e:	4638      	mov	r0, r7
 8007040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f000 f805 	bl	8007054 <__swsetup_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	d0d5      	beq.n	8006ffa <__swbuf_r+0x20>
 800704e:	f04f 37ff 	mov.w	r7, #4294967295
 8007052:	e7f4      	b.n	800703e <__swbuf_r+0x64>

08007054 <__swsetup_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <__swsetup_r+0xac>)
 8007058:	4605      	mov	r5, r0
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	460c      	mov	r4, r1
 800705e:	b118      	cbz	r0, 8007068 <__swsetup_r+0x14>
 8007060:	6a03      	ldr	r3, [r0, #32]
 8007062:	b90b      	cbnz	r3, 8007068 <__swsetup_r+0x14>
 8007064:	f7ff fee4 	bl	8006e30 <__sinit>
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800706e:	0718      	lsls	r0, r3, #28
 8007070:	d422      	bmi.n	80070b8 <__swsetup_r+0x64>
 8007072:	06d9      	lsls	r1, r3, #27
 8007074:	d407      	bmi.n	8007086 <__swsetup_r+0x32>
 8007076:	2309      	movs	r3, #9
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800707e:	81a3      	strh	r3, [r4, #12]
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	e034      	b.n	80070f0 <__swsetup_r+0x9c>
 8007086:	0758      	lsls	r0, r3, #29
 8007088:	d512      	bpl.n	80070b0 <__swsetup_r+0x5c>
 800708a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800708c:	b141      	cbz	r1, 80070a0 <__swsetup_r+0x4c>
 800708e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007092:	4299      	cmp	r1, r3
 8007094:	d002      	beq.n	800709c <__swsetup_r+0x48>
 8007096:	4628      	mov	r0, r5
 8007098:	f000 f8b0 	bl	80071fc <_free_r>
 800709c:	2300      	movs	r3, #0
 800709e:	6363      	str	r3, [r4, #52]	; 0x34
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	2300      	movs	r3, #0
 80070aa:	6063      	str	r3, [r4, #4]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f043 0308 	orr.w	r3, r3, #8
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	b94b      	cbnz	r3, 80070d0 <__swsetup_r+0x7c>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c6:	d003      	beq.n	80070d0 <__swsetup_r+0x7c>
 80070c8:	4621      	mov	r1, r4
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 fa62 	bl	8007594 <__smakebuf_r>
 80070d0:	89a0      	ldrh	r0, [r4, #12]
 80070d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070d6:	f010 0301 	ands.w	r3, r0, #1
 80070da:	d00a      	beq.n	80070f2 <__swsetup_r+0x9e>
 80070dc:	2300      	movs	r3, #0
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6963      	ldr	r3, [r4, #20]
 80070e2:	425b      	negs	r3, r3
 80070e4:	61a3      	str	r3, [r4, #24]
 80070e6:	6923      	ldr	r3, [r4, #16]
 80070e8:	b943      	cbnz	r3, 80070fc <__swsetup_r+0xa8>
 80070ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070ee:	d1c4      	bne.n	800707a <__swsetup_r+0x26>
 80070f0:	bd38      	pop	{r3, r4, r5, pc}
 80070f2:	0781      	lsls	r1, r0, #30
 80070f4:	bf58      	it	pl
 80070f6:	6963      	ldrpl	r3, [r4, #20]
 80070f8:	60a3      	str	r3, [r4, #8]
 80070fa:	e7f4      	b.n	80070e6 <__swsetup_r+0x92>
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7f7      	b.n	80070f0 <__swsetup_r+0x9c>
 8007100:	200000f4 	.word	0x200000f4

08007104 <memset>:
 8007104:	4402      	add	r2, r0
 8007106:	4603      	mov	r3, r0
 8007108:	4293      	cmp	r3, r2
 800710a:	d100      	bne.n	800710e <memset+0xa>
 800710c:	4770      	bx	lr
 800710e:	f803 1b01 	strb.w	r1, [r3], #1
 8007112:	e7f9      	b.n	8007108 <memset+0x4>

08007114 <_close_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d06      	ldr	r5, [pc, #24]	; (8007130 <_close_r+0x1c>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	f7fb fc6f 	bl	8002a02 <_close>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_close_r+0x1a>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_close_r+0x1a>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	20000a40 	.word	0x20000a40

08007134 <_lseek_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	; (8007154 <_lseek_r+0x20>)
 8007138:	4604      	mov	r4, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7fb fc84 	bl	8002a50 <_lseek>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_lseek_r+0x1e>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_lseek_r+0x1e>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000a40 	.word	0x20000a40

08007158 <_read_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	; (8007178 <_read_r+0x20>)
 800715c:	4604      	mov	r4, r0
 800715e:	4608      	mov	r0, r1
 8007160:	4611      	mov	r1, r2
 8007162:	2200      	movs	r2, #0
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fb fc12 	bl	8002990 <_read>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_read_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_read_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20000a40 	.word	0x20000a40

0800717c <_write_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	; (800719c <_write_r+0x20>)
 8007180:	4604      	mov	r4, r0
 8007182:	4608      	mov	r0, r1
 8007184:	4611      	mov	r1, r2
 8007186:	2200      	movs	r2, #0
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fb fc1d 	bl	80029ca <_write>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_write_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_write_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000a40 	.word	0x20000a40

080071a0 <__errno>:
 80071a0:	4b01      	ldr	r3, [pc, #4]	; (80071a8 <__errno+0x8>)
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	200000f4 	.word	0x200000f4

080071ac <__libc_init_array>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	4d0d      	ldr	r5, [pc, #52]	; (80071e4 <__libc_init_array+0x38>)
 80071b0:	4c0d      	ldr	r4, [pc, #52]	; (80071e8 <__libc_init_array+0x3c>)
 80071b2:	1b64      	subs	r4, r4, r5
 80071b4:	10a4      	asrs	r4, r4, #2
 80071b6:	2600      	movs	r6, #0
 80071b8:	42a6      	cmp	r6, r4
 80071ba:	d109      	bne.n	80071d0 <__libc_init_array+0x24>
 80071bc:	4d0b      	ldr	r5, [pc, #44]	; (80071ec <__libc_init_array+0x40>)
 80071be:	4c0c      	ldr	r4, [pc, #48]	; (80071f0 <__libc_init_array+0x44>)
 80071c0:	f000 fa56 	bl	8007670 <_init>
 80071c4:	1b64      	subs	r4, r4, r5
 80071c6:	10a4      	asrs	r4, r4, #2
 80071c8:	2600      	movs	r6, #0
 80071ca:	42a6      	cmp	r6, r4
 80071cc:	d105      	bne.n	80071da <__libc_init_array+0x2e>
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d4:	4798      	blx	r3
 80071d6:	3601      	adds	r6, #1
 80071d8:	e7ee      	b.n	80071b8 <__libc_init_array+0xc>
 80071da:	f855 3b04 	ldr.w	r3, [r5], #4
 80071de:	4798      	blx	r3
 80071e0:	3601      	adds	r6, #1
 80071e2:	e7f2      	b.n	80071ca <__libc_init_array+0x1e>
 80071e4:	08007984 	.word	0x08007984
 80071e8:	08007984 	.word	0x08007984
 80071ec:	08007984 	.word	0x08007984
 80071f0:	08007988 	.word	0x08007988

080071f4 <__retarget_lock_init_recursive>:
 80071f4:	4770      	bx	lr

080071f6 <__retarget_lock_acquire_recursive>:
 80071f6:	4770      	bx	lr

080071f8 <__retarget_lock_release_recursive>:
 80071f8:	4770      	bx	lr
	...

080071fc <_free_r>:
 80071fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fe:	2900      	cmp	r1, #0
 8007200:	d044      	beq.n	800728c <_free_r+0x90>
 8007202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007206:	9001      	str	r0, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f1a1 0404 	sub.w	r4, r1, #4
 800720e:	bfb8      	it	lt
 8007210:	18e4      	addlt	r4, r4, r3
 8007212:	f000 f8df 	bl	80073d4 <__malloc_lock>
 8007216:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <_free_r+0x94>)
 8007218:	9801      	ldr	r0, [sp, #4]
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	b933      	cbnz	r3, 800722c <_free_r+0x30>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6014      	str	r4, [r2, #0]
 8007222:	b003      	add	sp, #12
 8007224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007228:	f000 b8da 	b.w	80073e0 <__malloc_unlock>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d908      	bls.n	8007242 <_free_r+0x46>
 8007230:	6825      	ldr	r5, [r4, #0]
 8007232:	1961      	adds	r1, r4, r5
 8007234:	428b      	cmp	r3, r1
 8007236:	bf01      	itttt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	1949      	addeq	r1, r1, r5
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	e7ed      	b.n	800721e <_free_r+0x22>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x50>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x46>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1855      	adds	r5, r2, r1
 8007250:	42a5      	cmp	r5, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x70>
 8007254:	6824      	ldr	r4, [r4, #0]
 8007256:	4421      	add	r1, r4
 8007258:	1854      	adds	r4, r2, r1
 800725a:	42a3      	cmp	r3, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1e0      	bne.n	8007222 <_free_r+0x26>
 8007260:	681c      	ldr	r4, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	6053      	str	r3, [r2, #4]
 8007266:	440c      	add	r4, r1
 8007268:	6014      	str	r4, [r2, #0]
 800726a:	e7da      	b.n	8007222 <_free_r+0x26>
 800726c:	d902      	bls.n	8007274 <_free_r+0x78>
 800726e:	230c      	movs	r3, #12
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	e7d6      	b.n	8007222 <_free_r+0x26>
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1961      	adds	r1, r4, r5
 8007278:	428b      	cmp	r3, r1
 800727a:	bf04      	itt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	bf04      	itt	eq
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	6054      	str	r4, [r2, #4]
 800728a:	e7ca      	b.n	8007222 <_free_r+0x26>
 800728c:	b003      	add	sp, #12
 800728e:	bd30      	pop	{r4, r5, pc}
 8007290:	20000a48 	.word	0x20000a48

08007294 <sbrk_aligned>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0e      	ldr	r6, [pc, #56]	; (80072d0 <sbrk_aligned+0x3c>)
 8007298:	460c      	mov	r4, r1
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	4605      	mov	r5, r0
 800729e:	b911      	cbnz	r1, 80072a6 <sbrk_aligned+0x12>
 80072a0:	f000 f9d6 	bl	8007650 <_sbrk_r>
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f9d1 	bl	8007650 <_sbrk_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d00a      	beq.n	80072c8 <sbrk_aligned+0x34>
 80072b2:	1cc4      	adds	r4, r0, #3
 80072b4:	f024 0403 	bic.w	r4, r4, #3
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d007      	beq.n	80072cc <sbrk_aligned+0x38>
 80072bc:	1a21      	subs	r1, r4, r0
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f9c6 	bl	8007650 <_sbrk_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d101      	bne.n	80072cc <sbrk_aligned+0x38>
 80072c8:	f04f 34ff 	mov.w	r4, #4294967295
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	20000a4c 	.word	0x20000a4c

080072d4 <_malloc_r>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	1ccd      	adds	r5, r1, #3
 80072da:	f025 0503 	bic.w	r5, r5, #3
 80072de:	3508      	adds	r5, #8
 80072e0:	2d0c      	cmp	r5, #12
 80072e2:	bf38      	it	cc
 80072e4:	250c      	movcc	r5, #12
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	4607      	mov	r7, r0
 80072ea:	db01      	blt.n	80072f0 <_malloc_r+0x1c>
 80072ec:	42a9      	cmp	r1, r5
 80072ee:	d905      	bls.n	80072fc <_malloc_r+0x28>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	2600      	movs	r6, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073d0 <_malloc_r+0xfc>
 8007300:	f000 f868 	bl	80073d4 <__malloc_lock>
 8007304:	f8d8 3000 	ldr.w	r3, [r8]
 8007308:	461c      	mov	r4, r3
 800730a:	bb5c      	cbnz	r4, 8007364 <_malloc_r+0x90>
 800730c:	4629      	mov	r1, r5
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ffc0 	bl	8007294 <sbrk_aligned>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	4604      	mov	r4, r0
 8007318:	d155      	bne.n	80073c6 <_malloc_r+0xf2>
 800731a:	f8d8 4000 	ldr.w	r4, [r8]
 800731e:	4626      	mov	r6, r4
 8007320:	2e00      	cmp	r6, #0
 8007322:	d145      	bne.n	80073b0 <_malloc_r+0xdc>
 8007324:	2c00      	cmp	r4, #0
 8007326:	d048      	beq.n	80073ba <_malloc_r+0xe6>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	4631      	mov	r1, r6
 800732c:	4638      	mov	r0, r7
 800732e:	eb04 0903 	add.w	r9, r4, r3
 8007332:	f000 f98d 	bl	8007650 <_sbrk_r>
 8007336:	4581      	cmp	r9, r0
 8007338:	d13f      	bne.n	80073ba <_malloc_r+0xe6>
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	1a6d      	subs	r5, r5, r1
 800733e:	4629      	mov	r1, r5
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ffa7 	bl	8007294 <sbrk_aligned>
 8007346:	3001      	adds	r0, #1
 8007348:	d037      	beq.n	80073ba <_malloc_r+0xe6>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	442b      	add	r3, r5
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	f8d8 3000 	ldr.w	r3, [r8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d038      	beq.n	80073ca <_malloc_r+0xf6>
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	42a2      	cmp	r2, r4
 800735c:	d12b      	bne.n	80073b6 <_malloc_r+0xe2>
 800735e:	2200      	movs	r2, #0
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	e00f      	b.n	8007384 <_malloc_r+0xb0>
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	1b52      	subs	r2, r2, r5
 8007368:	d41f      	bmi.n	80073aa <_malloc_r+0xd6>
 800736a:	2a0b      	cmp	r2, #11
 800736c:	d917      	bls.n	800739e <_malloc_r+0xca>
 800736e:	1961      	adds	r1, r4, r5
 8007370:	42a3      	cmp	r3, r4
 8007372:	6025      	str	r5, [r4, #0]
 8007374:	bf18      	it	ne
 8007376:	6059      	strne	r1, [r3, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	bf08      	it	eq
 800737c:	f8c8 1000 	streq.w	r1, [r8]
 8007380:	5162      	str	r2, [r4, r5]
 8007382:	604b      	str	r3, [r1, #4]
 8007384:	4638      	mov	r0, r7
 8007386:	f104 060b 	add.w	r6, r4, #11
 800738a:	f000 f829 	bl	80073e0 <__malloc_unlock>
 800738e:	f026 0607 	bic.w	r6, r6, #7
 8007392:	1d23      	adds	r3, r4, #4
 8007394:	1af2      	subs	r2, r6, r3
 8007396:	d0ae      	beq.n	80072f6 <_malloc_r+0x22>
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	50a3      	str	r3, [r4, r2]
 800739c:	e7ab      	b.n	80072f6 <_malloc_r+0x22>
 800739e:	42a3      	cmp	r3, r4
 80073a0:	6862      	ldr	r2, [r4, #4]
 80073a2:	d1dd      	bne.n	8007360 <_malloc_r+0x8c>
 80073a4:	f8c8 2000 	str.w	r2, [r8]
 80073a8:	e7ec      	b.n	8007384 <_malloc_r+0xb0>
 80073aa:	4623      	mov	r3, r4
 80073ac:	6864      	ldr	r4, [r4, #4]
 80073ae:	e7ac      	b.n	800730a <_malloc_r+0x36>
 80073b0:	4634      	mov	r4, r6
 80073b2:	6876      	ldr	r6, [r6, #4]
 80073b4:	e7b4      	b.n	8007320 <_malloc_r+0x4c>
 80073b6:	4613      	mov	r3, r2
 80073b8:	e7cc      	b.n	8007354 <_malloc_r+0x80>
 80073ba:	230c      	movs	r3, #12
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4638      	mov	r0, r7
 80073c0:	f000 f80e 	bl	80073e0 <__malloc_unlock>
 80073c4:	e797      	b.n	80072f6 <_malloc_r+0x22>
 80073c6:	6025      	str	r5, [r4, #0]
 80073c8:	e7dc      	b.n	8007384 <_malloc_r+0xb0>
 80073ca:	605b      	str	r3, [r3, #4]
 80073cc:	deff      	udf	#255	; 0xff
 80073ce:	bf00      	nop
 80073d0:	20000a48 	.word	0x20000a48

080073d4 <__malloc_lock>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__malloc_lock+0x8>)
 80073d6:	f7ff bf0e 	b.w	80071f6 <__retarget_lock_acquire_recursive>
 80073da:	bf00      	nop
 80073dc:	20000a44 	.word	0x20000a44

080073e0 <__malloc_unlock>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__malloc_unlock+0x8>)
 80073e2:	f7ff bf09 	b.w	80071f8 <__retarget_lock_release_recursive>
 80073e6:	bf00      	nop
 80073e8:	20000a44 	.word	0x20000a44

080073ec <__sflush_r>:
 80073ec:	898a      	ldrh	r2, [r1, #12]
 80073ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	4605      	mov	r5, r0
 80073f4:	0710      	lsls	r0, r2, #28
 80073f6:	460c      	mov	r4, r1
 80073f8:	d458      	bmi.n	80074ac <__sflush_r+0xc0>
 80073fa:	684b      	ldr	r3, [r1, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc05      	bgt.n	800740c <__sflush_r+0x20>
 8007400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	dc02      	bgt.n	800740c <__sflush_r+0x20>
 8007406:	2000      	movs	r0, #0
 8007408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800740e:	2e00      	cmp	r6, #0
 8007410:	d0f9      	beq.n	8007406 <__sflush_r+0x1a>
 8007412:	2300      	movs	r3, #0
 8007414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007418:	682f      	ldr	r7, [r5, #0]
 800741a:	6a21      	ldr	r1, [r4, #32]
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	d032      	beq.n	8007486 <__sflush_r+0x9a>
 8007420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	075a      	lsls	r2, r3, #29
 8007426:	d505      	bpl.n	8007434 <__sflush_r+0x48>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	1ac0      	subs	r0, r0, r3
 800742c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800742e:	b10b      	cbz	r3, 8007434 <__sflush_r+0x48>
 8007430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	2300      	movs	r3, #0
 8007436:	4602      	mov	r2, r0
 8007438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800743a:	6a21      	ldr	r1, [r4, #32]
 800743c:	4628      	mov	r0, r5
 800743e:	47b0      	blx	r6
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	d106      	bne.n	8007454 <__sflush_r+0x68>
 8007446:	6829      	ldr	r1, [r5, #0]
 8007448:	291d      	cmp	r1, #29
 800744a:	d82b      	bhi.n	80074a4 <__sflush_r+0xb8>
 800744c:	4a29      	ldr	r2, [pc, #164]	; (80074f4 <__sflush_r+0x108>)
 800744e:	410a      	asrs	r2, r1
 8007450:	07d6      	lsls	r6, r2, #31
 8007452:	d427      	bmi.n	80074a4 <__sflush_r+0xb8>
 8007454:	2200      	movs	r2, #0
 8007456:	6062      	str	r2, [r4, #4]
 8007458:	04d9      	lsls	r1, r3, #19
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	d504      	bpl.n	800746a <__sflush_r+0x7e>
 8007460:	1c42      	adds	r2, r0, #1
 8007462:	d101      	bne.n	8007468 <__sflush_r+0x7c>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b903      	cbnz	r3, 800746a <__sflush_r+0x7e>
 8007468:	6560      	str	r0, [r4, #84]	; 0x54
 800746a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800746c:	602f      	str	r7, [r5, #0]
 800746e:	2900      	cmp	r1, #0
 8007470:	d0c9      	beq.n	8007406 <__sflush_r+0x1a>
 8007472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007476:	4299      	cmp	r1, r3
 8007478:	d002      	beq.n	8007480 <__sflush_r+0x94>
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff febe 	bl	80071fc <_free_r>
 8007480:	2000      	movs	r0, #0
 8007482:	6360      	str	r0, [r4, #52]	; 0x34
 8007484:	e7c0      	b.n	8007408 <__sflush_r+0x1c>
 8007486:	2301      	movs	r3, #1
 8007488:	4628      	mov	r0, r5
 800748a:	47b0      	blx	r6
 800748c:	1c41      	adds	r1, r0, #1
 800748e:	d1c8      	bne.n	8007422 <__sflush_r+0x36>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0c5      	beq.n	8007422 <__sflush_r+0x36>
 8007496:	2b1d      	cmp	r3, #29
 8007498:	d001      	beq.n	800749e <__sflush_r+0xb2>
 800749a:	2b16      	cmp	r3, #22
 800749c:	d101      	bne.n	80074a2 <__sflush_r+0xb6>
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	e7b1      	b.n	8007406 <__sflush_r+0x1a>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	e7ad      	b.n	8007408 <__sflush_r+0x1c>
 80074ac:	690f      	ldr	r7, [r1, #16]
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	d0a9      	beq.n	8007406 <__sflush_r+0x1a>
 80074b2:	0793      	lsls	r3, r2, #30
 80074b4:	680e      	ldr	r6, [r1, #0]
 80074b6:	bf08      	it	eq
 80074b8:	694b      	ldreq	r3, [r1, #20]
 80074ba:	600f      	str	r7, [r1, #0]
 80074bc:	bf18      	it	ne
 80074be:	2300      	movne	r3, #0
 80074c0:	eba6 0807 	sub.w	r8, r6, r7
 80074c4:	608b      	str	r3, [r1, #8]
 80074c6:	f1b8 0f00 	cmp.w	r8, #0
 80074ca:	dd9c      	ble.n	8007406 <__sflush_r+0x1a>
 80074cc:	6a21      	ldr	r1, [r4, #32]
 80074ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074d0:	4643      	mov	r3, r8
 80074d2:	463a      	mov	r2, r7
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	2800      	cmp	r0, #0
 80074da:	dc06      	bgt.n	80074ea <__sflush_r+0xfe>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e78e      	b.n	8007408 <__sflush_r+0x1c>
 80074ea:	4407      	add	r7, r0
 80074ec:	eba8 0800 	sub.w	r8, r8, r0
 80074f0:	e7e9      	b.n	80074c6 <__sflush_r+0xda>
 80074f2:	bf00      	nop
 80074f4:	dfbffffe 	.word	0xdfbffffe

080074f8 <_fflush_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	4605      	mov	r5, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	b913      	cbnz	r3, 8007508 <_fflush_r+0x10>
 8007502:	2500      	movs	r5, #0
 8007504:	4628      	mov	r0, r5
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	b118      	cbz	r0, 8007512 <_fflush_r+0x1a>
 800750a:	6a03      	ldr	r3, [r0, #32]
 800750c:	b90b      	cbnz	r3, 8007512 <_fflush_r+0x1a>
 800750e:	f7ff fc8f 	bl	8006e30 <__sinit>
 8007512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f3      	beq.n	8007502 <_fflush_r+0xa>
 800751a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800751c:	07d0      	lsls	r0, r2, #31
 800751e:	d404      	bmi.n	800752a <_fflush_r+0x32>
 8007520:	0599      	lsls	r1, r3, #22
 8007522:	d402      	bmi.n	800752a <_fflush_r+0x32>
 8007524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007526:	f7ff fe66 	bl	80071f6 <__retarget_lock_acquire_recursive>
 800752a:	4628      	mov	r0, r5
 800752c:	4621      	mov	r1, r4
 800752e:	f7ff ff5d 	bl	80073ec <__sflush_r>
 8007532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007534:	07da      	lsls	r2, r3, #31
 8007536:	4605      	mov	r5, r0
 8007538:	d4e4      	bmi.n	8007504 <_fflush_r+0xc>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	059b      	lsls	r3, r3, #22
 800753e:	d4e1      	bmi.n	8007504 <_fflush_r+0xc>
 8007540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007542:	f7ff fe59 	bl	80071f8 <__retarget_lock_release_recursive>
 8007546:	e7dd      	b.n	8007504 <_fflush_r+0xc>

08007548 <__swhatbuf_r>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	460c      	mov	r4, r1
 800754c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007550:	2900      	cmp	r1, #0
 8007552:	b096      	sub	sp, #88	; 0x58
 8007554:	4615      	mov	r5, r2
 8007556:	461e      	mov	r6, r3
 8007558:	da0d      	bge.n	8007576 <__swhatbuf_r+0x2e>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007560:	f04f 0100 	mov.w	r1, #0
 8007564:	bf0c      	ite	eq
 8007566:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800756a:	2340      	movne	r3, #64	; 0x40
 800756c:	2000      	movs	r0, #0
 800756e:	6031      	str	r1, [r6, #0]
 8007570:	602b      	str	r3, [r5, #0]
 8007572:	b016      	add	sp, #88	; 0x58
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	466a      	mov	r2, sp
 8007578:	f000 f848 	bl	800760c <_fstat_r>
 800757c:	2800      	cmp	r0, #0
 800757e:	dbec      	blt.n	800755a <__swhatbuf_r+0x12>
 8007580:	9901      	ldr	r1, [sp, #4]
 8007582:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007586:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800758a:	4259      	negs	r1, r3
 800758c:	4159      	adcs	r1, r3
 800758e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007592:	e7eb      	b.n	800756c <__swhatbuf_r+0x24>

08007594 <__smakebuf_r>:
 8007594:	898b      	ldrh	r3, [r1, #12]
 8007596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007598:	079d      	lsls	r5, r3, #30
 800759a:	4606      	mov	r6, r0
 800759c:	460c      	mov	r4, r1
 800759e:	d507      	bpl.n	80075b0 <__smakebuf_r+0x1c>
 80075a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	2301      	movs	r3, #1
 80075aa:	6163      	str	r3, [r4, #20]
 80075ac:	b002      	add	sp, #8
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	ab01      	add	r3, sp, #4
 80075b2:	466a      	mov	r2, sp
 80075b4:	f7ff ffc8 	bl	8007548 <__swhatbuf_r>
 80075b8:	9900      	ldr	r1, [sp, #0]
 80075ba:	4605      	mov	r5, r0
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff fe89 	bl	80072d4 <_malloc_r>
 80075c2:	b948      	cbnz	r0, 80075d8 <__smakebuf_r+0x44>
 80075c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c8:	059a      	lsls	r2, r3, #22
 80075ca:	d4ef      	bmi.n	80075ac <__smakebuf_r+0x18>
 80075cc:	f023 0303 	bic.w	r3, r3, #3
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	e7e3      	b.n	80075a0 <__smakebuf_r+0xc>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	6020      	str	r0, [r4, #0]
 80075dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	9b00      	ldr	r3, [sp, #0]
 80075e4:	6163      	str	r3, [r4, #20]
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	6120      	str	r0, [r4, #16]
 80075ea:	b15b      	cbz	r3, 8007604 <__smakebuf_r+0x70>
 80075ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 f81d 	bl	8007630 <_isatty_r>
 80075f6:	b128      	cbz	r0, 8007604 <__smakebuf_r+0x70>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	431d      	orrs	r5, r3
 8007608:	81a5      	strh	r5, [r4, #12]
 800760a:	e7cf      	b.n	80075ac <__smakebuf_r+0x18>

0800760c <_fstat_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	; (800762c <_fstat_r+0x20>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	f7fb f9fe 	bl	8002a1a <_fstat>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	d102      	bne.n	8007628 <_fstat_r+0x1c>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	b103      	cbz	r3, 8007628 <_fstat_r+0x1c>
 8007626:	6023      	str	r3, [r4, #0]
 8007628:	bd38      	pop	{r3, r4, r5, pc}
 800762a:	bf00      	nop
 800762c:	20000a40 	.word	0x20000a40

08007630 <_isatty_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_isatty_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fb f9fd 	bl	8002a3a <_isatty>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_isatty_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_isatty_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20000a40 	.word	0x20000a40

08007650 <_sbrk_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_sbrk_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7fb fa06 	bl	8002a6c <_sbrk>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_sbrk_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_sbrk_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20000a40 	.word	0x20000a40

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
