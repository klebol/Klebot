
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008938  08008938  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008940  08008940  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001e4  08008b2c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08008b2c  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d29  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049ae  00000000  00000000  00037f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0003c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001222  00000000  00000000  0003e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c644  00000000  00000000  0003f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022249  00000000  00000000  0005b986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a029d  00000000  00000000  0007dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067a0  00000000  00000000  0011de6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012460c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008560 	.word	0x08008560

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008560 	.word	0x08008560

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Prog_CalibPID_Init>:

//
// -- Init & Deinit functions for Motors Debug Program --
//
Programs_error_t Prog_CalibPID_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	Inputs_ClearButtonsCallbacks();
 8000590:	f000 fddc 	bl	800114c <Inputs_ClearButtonsCallbacks>
//	Inputs_ButtonsRegisterCallback(ENC_BUTTON, &Prog_MotorsDebug_ChangeMotor, NULL);
//	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Prog_MotorsDebug_ChangeDirection, NULL);
//	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, NULL, &Programs_ExitProgram);


	OLED_ClearBuffer(BLACK);
 8000594:	2000      	movs	r0, #0
 8000596:	f002 fc79 	bl	8002e8c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800059a:	2100      	movs	r1, #0
 800059c:	2000      	movs	r0, #0
 800059e:	f002 fbbb 	bl	8002d18 <OLED_MoveCursor>
	OLED_SendBuffer();
 80005a2:	f002 fc47 	bl	8002e34 <OLED_SendBuffer>
	return PROGRAMS_OK;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Prog_CalibPID_Deinit>:

Programs_error_t Prog_CalibPID_Deinit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

	return PROGRAMS_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <Prog_CalibPID_Program>:
//
// -- Main Diode Test Program for Controller --
//

Programs_error_t Prog_CalibPID_Program(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	/* Main program "loop" */



	return PROGRAMS_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <Prog_CalibPID_Launch>:
//
// -- Set / Launch function --
//

void Prog_CalibPID_Launch(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	Programs_SetProgram(&CalibPIDProgram);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <Prog_CalibPID_Launch+0x10>)
 80005d2:	f000 f9ef 	bl	80009b4 <Programs_SetProgram>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <Prog_CalibPID_Parser>:
//
// -- Program Parser --
//

void Prog_CalibPID_Parser(uint8_t *command, uint8_t length)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
	switch(*CurrentByte)
	{


	default:
		break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <Prog_DiodeTest_SendOnCmd>:

//
// -- Setting LED on/off --
//
static void Prog_DiodeTest_SendOnCmd(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000604:	23d0      	movs	r3, #208	; 0xd0
 8000606:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_ON;
 8000608:	2320      	movs	r3, #32
 800060a:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f989 	bl	8001928 <Radio_TxBufferPut>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <Prog_DiodeTest_SendOffCmd>:

static void Prog_DiodeTest_SendOffCmd(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000624:	23d0      	movs	r3, #208	; 0xd0
 8000626:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_OFF;
 8000628:	2321      	movs	r3, #33	; 0x21
 800062a:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f001 f979 	bl	8001928 <Radio_TxBufferPut>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <Prog_DiodeTest_Init>:

//
// -- Init & Deinit functions for Diode Test Program --
//
Programs_error_t Prog_DiodeTest_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	Inputs_ClearButtonsCallbacks();
 8000644:	f000 fd82 	bl	800114c <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Prog_DiodeTest_SendOnCmd, NULL);
 8000648:	2200      	movs	r2, #0
 800064a:	490d      	ldr	r1, [pc, #52]	; (8000680 <Prog_DiodeTest_Init+0x40>)
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fd37 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, &Prog_DiodeTest_SendOffCmd, NULL);
 8000652:	2200      	movs	r2, #0
 8000654:	490b      	ldr	r1, [pc, #44]	; (8000684 <Prog_DiodeTest_Init+0x44>)
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fd32 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, NULL, &Programs_ExitProgram);
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <Prog_DiodeTest_Init+0x48>)
 800065e:	2100      	movs	r1, #0
 8000660:	2004      	movs	r0, #4
 8000662:	f000 fd2d 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	OLED_ClearBuffer(BLACK);
 8000666:	2000      	movs	r0, #0
 8000668:	f002 fc10 	bl	8002e8c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f002 fb52 	bl	8002d18 <OLED_MoveCursor>
	OLED_SendBuffer();
 8000674:	f002 fbde 	bl	8002e34 <OLED_SendBuffer>
	return PROGRAMS_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	080005ff 	.word	0x080005ff
 8000684:	0800061f 	.word	0x0800061f
 8000688:	08000a0d 	.word	0x08000a0d

0800068c <Prog_DiodeTest_Deinit>:

Programs_error_t Prog_DiodeTest_Deinit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	DiodeState = 0;
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <Prog_DiodeTest_Deinit+0x18>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
	return PROGRAMS_OK;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000200 	.word	0x20000200

080006a8 <Prog_DiodeTest_Program>:
//
// -- Main Diode Test Program for Controller --
//

Programs_error_t Prog_DiodeTest_Program(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f002 fbed 	bl	8002e8c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2000      	movs	r0, #0
 80006b6:	f002 fb2f 	bl	8002d18 <OLED_MoveCursor>
	OLED_WriteString("LED STATE:", WHITE);
 80006ba:	2101      	movs	r1, #1
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <Prog_DiodeTest_Program+0x38>)
 80006be:	f002 fcaf 	bl	8003020 <OLED_WriteString>
	OLED_MoveCursor(0, 16);
 80006c2:	2110      	movs	r1, #16
 80006c4:	2000      	movs	r0, #0
 80006c6:	f002 fb27 	bl	8002d18 <OLED_MoveCursor>
	OLED_WriteInt(DiodeState, WHITE);
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <Prog_DiodeTest_Program+0x3c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fccb 	bl	800306c <OLED_WriteInt>
	OLED_SendBuffer();
 80006d6:	f002 fbad 	bl	8002e34 <OLED_SendBuffer>

	return PROGRAMS_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	08008578 	.word	0x08008578
 80006e4:	20000200 	.word	0x20000200

080006e8 <Prog_DiodeTest_Launch>:
//
// -- Set / Launch function --
//

void Prog_DiodeTest_Launch(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	Programs_SetProgram(&DiodeTestProgram);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <Prog_DiodeTest_Launch+0x10>)
 80006ee:	f000 f961 	bl	80009b4 <Programs_SetProgram>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000014 	.word	0x20000014

080006fc <Prog_DiodeTest_Parser>:
//
// -- Program Parser --
//

void Prog_DiodeTest_Parser(uint8_t *command, uint8_t length)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	60fb      	str	r3, [r7, #12]

	switch(*CurrentByte)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b22      	cmp	r3, #34	; 0x22
 8000712:	d107      	bne.n	8000724 <Prog_DiodeTest_Parser+0x28>
	{
	case DIODE_REAL_STATE:
		CurrentByte++;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
		DiodeState = *CurrentByte;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <Prog_DiodeTest_Parser+0x38>)
 8000720:	701a      	strb	r2, [r3, #0]
		break;
 8000722:	e000      	b.n	8000726 <Prog_DiodeTest_Parser+0x2a>

	default:
		break;
 8000724:	bf00      	nop
	}
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000200 	.word	0x20000200

08000738 <Prog_MotorsDebug_ChangeMotor>:
//
// -- Specific program functions --
//

void Prog_MotorsDebug_ChangeMotor(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	if(ManipulatedMotor == &Motor_0)
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <Prog_MotorsDebug_ChangeMotor+0x44>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <Prog_MotorsDebug_ChangeMotor+0x48>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d103      	bne.n	800074e <Prog_MotorsDebug_ChangeMotor+0x16>
	{
		ManipulatedMotor = &Motor_1;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <Prog_MotorsDebug_ChangeMotor+0x44>)
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <Prog_MotorsDebug_ChangeMotor+0x4c>)
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	e007      	b.n	800075e <Prog_MotorsDebug_ChangeMotor+0x26>

	}
	else if(ManipulatedMotor == &Motor_1)
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <Prog_MotorsDebug_ChangeMotor+0x44>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <Prog_MotorsDebug_ChangeMotor+0x4c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d102      	bne.n	800075e <Prog_MotorsDebug_ChangeMotor+0x26>
	{
		ManipulatedMotor = &Motor_0;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <Prog_MotorsDebug_ChangeMotor+0x44>)
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <Prog_MotorsDebug_ChangeMotor+0x48>)
 800075c:	601a      	str	r2, [r3, #0]
	}

	PWMToSet = ManipulatedMotor->PWM;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <Prog_MotorsDebug_ChangeMotor+0x44>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	785a      	ldrb	r2, [r3, #1]
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <Prog_MotorsDebug_ChangeMotor+0x50>)
 8000766:	701a      	strb	r2, [r3, #0]
	DirectionToSet = ManipulatedMotor->MotorDirection;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <Prog_MotorsDebug_ChangeMotor+0x44>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <Prog_MotorsDebug_ChangeMotor+0x54>)
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000204 	.word	0x20000204
 8000780:	2000003c 	.word	0x2000003c
 8000784:	2000004c 	.word	0x2000004c
 8000788:	20000209 	.word	0x20000209
 800078c:	20000208 	.word	0x20000208

08000790 <Prog_MotorsDebug_ChangeDirection>:

void Prog_MotorsDebug_ChangeDirection(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

	DirectionToSet = ManipulatedMotor->MotorDirection + 1;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <Prog_MotorsDebug_ChangeDirection+0x54>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <Prog_MotorsDebug_ChangeDirection+0x58>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(DirectionToSet > 3)
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <Prog_MotorsDebug_ChangeDirection+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d902      	bls.n	80007b2 <Prog_MotorsDebug_ChangeDirection+0x22>
	{
		DirectionToSet = 0;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <Prog_MotorsDebug_ChangeDirection+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t Buffer[4];
	Buffer[0] = MOTORS_DEBUG;
 80007b2:	23d1      	movs	r3, #209	; 0xd1
 80007b4:	713b      	strb	r3, [r7, #4]
	Buffer[1] = MOTOR_SET_DIRECTION;
 80007b6:	2321      	movs	r3, #33	; 0x21
 80007b8:	717b      	strb	r3, [r7, #5]
	Buffer[2] = ManipulatedMotor->ID;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <Prog_MotorsDebug_ChangeDirection+0x54>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	7b1b      	ldrb	r3, [r3, #12]
 80007c0:	71bb      	strb	r3, [r7, #6]
	Buffer[3] = DirectionToSet;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <Prog_MotorsDebug_ChangeDirection+0x58>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
	Radio_TxBufferPut(Buffer, 4);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2104      	movs	r1, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f8ab 	bl	8001928 <Radio_TxBufferPut>

	ManipulatedMotor->MotorDirection = DirectionToSet;
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <Prog_MotorsDebug_ChangeDirection+0x54>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <Prog_MotorsDebug_ChangeDirection+0x58>)
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	701a      	strb	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000204 	.word	0x20000204
 80007e8:	20000208 	.word	0x20000208

080007ec <ProgMotorsDebug_ChangeSpeedRoutine>:

void ProgMotorsDebug_ChangeSpeedRoutine(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	uint8_t Buffer[4];

	PWMToSet += Inputs_GetEncoderCount();
 80007f2:	f000 fc1d 	bl	8001030 <Inputs_GetEncoderCount>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <ProgMotorsDebug_ChangeSpeedRoutine+0x5c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <ProgMotorsDebug_ChangeSpeedRoutine+0x5c>)
 8000804:	701a      	strb	r2, [r3, #0]

	if(PWMToSet != ManipulatedMotor->PWM)
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <ProgMotorsDebug_ChangeSpeedRoutine+0x60>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	785a      	ldrb	r2, [r3, #1]
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <ProgMotorsDebug_ChangeSpeedRoutine+0x5c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d014      	beq.n	800083e <ProgMotorsDebug_ChangeSpeedRoutine+0x52>
	{
		Buffer[0] = MOTORS_DEBUG;
 8000814:	23d1      	movs	r3, #209	; 0xd1
 8000816:	713b      	strb	r3, [r7, #4]
		Buffer[1] = MOTOR_SET_PWM;
 8000818:	2320      	movs	r3, #32
 800081a:	717b      	strb	r3, [r7, #5]
		Buffer[2] = ManipulatedMotor->ID;
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <ProgMotorsDebug_ChangeSpeedRoutine+0x60>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	7b1b      	ldrb	r3, [r3, #12]
 8000822:	71bb      	strb	r3, [r7, #6]
		Buffer[3] = PWMToSet;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <ProgMotorsDebug_ChangeSpeedRoutine+0x5c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	71fb      	strb	r3, [r7, #7]
		Radio_TxBufferPut(Buffer, 4);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f87a 	bl	8001928 <Radio_TxBufferPut>
		ManipulatedMotor->PWM = PWMToSet;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <ProgMotorsDebug_ChangeSpeedRoutine+0x60>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <ProgMotorsDebug_ChangeSpeedRoutine+0x5c>)
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	705a      	strb	r2, [r3, #1]

	}


}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000209 	.word	0x20000209
 800084c:	20000204 	.word	0x20000204

08000850 <Prog_MotorsDebug_Init>:

//
// -- Init & Deinit functions for Motors Debug Program --
//
Programs_error_t Prog_MotorsDebug_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	Inputs_ClearButtonsCallbacks();
 8000854:	f000 fc7a 	bl	800114c <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, &Prog_MotorsDebug_ChangeMotor, NULL);
 8000858:	2200      	movs	r2, #0
 800085a:	490e      	ldr	r1, [pc, #56]	; (8000894 <Prog_MotorsDebug_Init+0x44>)
 800085c:	2004      	movs	r0, #4
 800085e:	f000 fc2f 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Prog_MotorsDebug_ChangeDirection, NULL);
 8000862:	2200      	movs	r2, #0
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <Prog_MotorsDebug_Init+0x48>)
 8000866:	2000      	movs	r0, #0
 8000868:	f000 fc2a 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, NULL, &Programs_ExitProgram);
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <Prog_MotorsDebug_Init+0x4c>)
 800086e:	2100      	movs	r1, #0
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fc25 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	ManipulatedMotor = &Motor_0;
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <Prog_MotorsDebug_Init+0x50>)
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <Prog_MotorsDebug_Init+0x54>)
 800087a:	601a      	str	r2, [r3, #0]

	OLED_ClearBuffer(BLACK);
 800087c:	2000      	movs	r0, #0
 800087e:	f002 fb05 	bl	8002e8c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f002 fa47 	bl	8002d18 <OLED_MoveCursor>
	OLED_SendBuffer();
 800088a:	f002 fad3 	bl	8002e34 <OLED_SendBuffer>
	return PROGRAMS_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	bd80      	pop	{r7, pc}
 8000894:	08000739 	.word	0x08000739
 8000898:	08000791 	.word	0x08000791
 800089c:	08000a0d 	.word	0x08000a0d
 80008a0:	20000204 	.word	0x20000204
 80008a4:	2000003c 	.word	0x2000003c

080008a8 <Prog_MotorsDebug_Deinit>:

Programs_error_t Prog_MotorsDebug_Deinit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

	return PROGRAMS_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <Prog_MotorsDebug_Program>:
//
// -- Main Diode Test Program for Controller --
//

Programs_error_t Prog_MotorsDebug_Program(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	/* Main program "loop" */

	ProgMotorsDebug_ChangeSpeedRoutine();
 80008bc:	f7ff ff96 	bl	80007ec <ProgMotorsDebug_ChangeSpeedRoutine>

	OLED_ClearBuffer(BLACK);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f002 fae3 	bl	8002e8c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 fa25 	bl	8002d18 <OLED_MoveCursor>
	OLED_WriteString("Motor: ", WHITE);
 80008ce:	2101      	movs	r1, #1
 80008d0:	4816      	ldr	r0, [pc, #88]	; (800092c <Prog_MotorsDebug_Program+0x74>)
 80008d2:	f002 fba5 	bl	8003020 <OLED_WriteString>
	OLED_WriteString(ManipulatedMotor->Name, WHITE);
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <Prog_MotorsDebug_Program+0x78>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3302      	adds	r3, #2
 80008dc:	2101      	movs	r1, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fb9e 	bl	8003020 <OLED_WriteString>
	OLED_MoveCursor(0, 8);
 80008e4:	2108      	movs	r1, #8
 80008e6:	2000      	movs	r0, #0
 80008e8:	f002 fa16 	bl	8002d18 <OLED_MoveCursor>
	OLED_WriteString("Direction: :", WHITE);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4811      	ldr	r0, [pc, #68]	; (8000934 <Prog_MotorsDebug_Program+0x7c>)
 80008f0:	f002 fb96 	bl	8003020 <OLED_WriteString>
	OLED_WriteInt(ManipulatedMotor->MotorDirection, WHITE);
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <Prog_MotorsDebug_Program+0x78>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fbb5 	bl	800306c <OLED_WriteInt>
	OLED_MoveCursor(0, 16);
 8000902:	2110      	movs	r1, #16
 8000904:	2000      	movs	r0, #0
 8000906:	f002 fa07 	bl	8002d18 <OLED_MoveCursor>
	OLED_WriteString("PWM: :", WHITE);
 800090a:	2101      	movs	r1, #1
 800090c:	480a      	ldr	r0, [pc, #40]	; (8000938 <Prog_MotorsDebug_Program+0x80>)
 800090e:	f002 fb87 	bl	8003020 <OLED_WriteString>
	OLED_WriteInt(ManipulatedMotor->PWM, WHITE);
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <Prog_MotorsDebug_Program+0x78>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fba6 	bl	800306c <OLED_WriteInt>

	OLED_SendBuffer();
 8000920:	f002 fa88 	bl	8002e34 <OLED_SendBuffer>

	return PROGRAMS_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08008584 	.word	0x08008584
 8000930:	20000204 	.word	0x20000204
 8000934:	0800858c 	.word	0x0800858c
 8000938:	0800859c 	.word	0x0800859c

0800093c <Prog_MotorsDebug_Launch>:
//
// -- Set / Launch function --
//

void Prog_MotorsDebug_Launch(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	Programs_SetProgram(&MotorsDebugProgram);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <Prog_MotorsDebug_Launch+0x10>)
 8000942:	f000 f837 	bl	80009b4 <Programs_SetProgram>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000028 	.word	0x20000028

08000950 <Prog_MotorsDebug_Parser>:
//
// -- Program Parser --
//

void Prog_MotorsDebug_Parser(uint8_t *command, uint8_t length)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	60fb      	str	r3, [r7, #12]
	switch(*CurrentByte)
	{


	default:
		break;
 8000960:	bf00      	nop
	}
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <Programs_SendProgramStartCommand>:
//
//	-- Sending programs start/exit commands --
//

static Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = START_PROGRAM;
 8000978:	2310      	movs	r3, #16
 800097a:	733b      	strb	r3, [r7, #12]
	Buffer[1] = ProgramID;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 ffce 	bl	8001928 <Radio_TxBufferPut>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <Programs_SendProgramExitCommand>:

static Programs_error_t Programs_SendProgramExitCommand(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
	uint8_t Buffer = EXIT_PROGRAM;
 800099c:	2311      	movs	r3, #17
 800099e:	71fb      	strb	r3, [r7, #7]
	return Radio_TxBufferPut(&Buffer, 1);
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	2101      	movs	r1, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 ffbf 	bl	8001928 <Radio_TxBufferPut>
 80009aa:	4603      	mov	r3, r0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Programs_SetProgram>:
//

/* Function starting a launch of specific program by setting current pointer
 * to program and sending start command to robot 				*/
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToSet)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <Programs_SetProgram+0x12>
	{
		return PROGRAMS_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e017      	b.n	80009f6 <Programs_SetProgram+0x42>
	}

	if(NULL == CurrentlyRunningProg)
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <Programs_SetProgram+0x4c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d112      	bne.n	80009f4 <Programs_SetProgram+0x40>
	{
		CurrentlyRunningProg = ProgramToSet;
 80009ce:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <Programs_SetProgram+0x4c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6013      	str	r3, [r2, #0]
		Programs_SendProgramStartCommand(ProgramToSet->ProgramID);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7c1b      	ldrb	r3, [r3, #16]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffc8 	bl	800096e <Programs_SendProgramStartCommand>
		TimeoutStamp = HAL_GetTick();
 80009de:	f002 fe15 	bl	800360c <HAL_GetTick>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <Programs_SetProgram+0x50>)
 80009e8:	801a      	strh	r2, [r3, #0]
		ProgramState = PROGRAM_LAUNCHING;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <Programs_SetProgram+0x54>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
		return PROGRAMS_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e000      	b.n	80009f6 <Programs_SetProgram+0x42>
	}
	else
	{
		return PROGRAMS_ERROR;
 80009f4:	2301      	movs	r3, #1
	}
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	20000212 	.word	0x20000212
 8000a08:	20000210 	.word	0x20000210

08000a0c <Programs_ExitProgram>:

/* Function starting a exit program process */
void Programs_ExitProgram(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	/* Call program DeInit function */
	CurrentlyRunningProg->ProgramExitFunction();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <Programs_ExitProgram+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4798      	blx	r3
	/*Send exit program command to robot */
	Programs_SendProgramExitCommand();
 8000a18:	f7ff ffbd 	bl	8000996 <Programs_SendProgramExitCommand>
	/*Start counting timeout for wainting to robot's ACK */
	TimeoutStamp = HAL_GetTick();
 8000a1c:	f002 fdf6 	bl	800360c <HAL_GetTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <Programs_ExitProgram+0x2c>)
 8000a26:	801a      	strh	r2, [r3, #0]
	ProgramState = PROGRAM_EXITING;
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <Programs_ExitProgram+0x30>)
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	701a      	strb	r2, [r3, #0]

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000020c 	.word	0x2000020c
 8000a38:	20000212 	.word	0x20000212
 8000a3c:	20000210 	.word	0x20000210

08000a40 <Programs_GetProgram>:

/* Function which returns current pointer to program */
Programs_Program_t* Programs_GetProgram(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	return CurrentlyRunningProg;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <Programs_GetProgram+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000020c 	.word	0x2000020c

08000a58 <Programs_ClearProgram>:

/* Clearing the program pointer and status variable */
void Programs_ClearProgram(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	CurrentlyRunningProg = NULL;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <Programs_ClearProgram+0x1c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
	ProgramState = NO_PROGRAM_SET;
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <Programs_ClearProgram+0x20>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	20000210 	.word	0x20000210

08000a7c <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	switch(ProgramState)
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <Programs_PerformProgram+0x94>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d837      	bhi.n	8000af8 <Programs_PerformProgram+0x7c>
 8000a88:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <Programs_PerformProgram+0x14>)
 8000a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8e:	bf00      	nop
 8000a90:	08000af9 	.word	0x08000af9
 8000a94:	08000ab1 	.word	0x08000ab1
 8000a98:	08000acb 	.word	0x08000acb
 8000a9c:	08000adf 	.word	0x08000adf
 8000aa0:	08000af9 	.word	0x08000af9
 8000aa4:	08000af9 	.word	0x08000af9
 8000aa8:	08000af9 	.word	0x08000af9
 8000aac:	08000af9 	.word	0x08000af9
		/* No program set, no action */
		break;

	case PROGRAM_LAUNCHING:
		/* Waiting for program launch ACK from robot */
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 8000ab0:	f002 fdac 	bl	800360c <HAL_GetTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <Programs_PerformProgram+0x98>)
 8000ab8:	8812      	ldrh	r2, [r2, #0]
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac0:	d91c      	bls.n	8000afc <Programs_PerformProgram+0x80>
		{
			ProgramState = PROGRAM_LAUNCH_ERROR;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Programs_PerformProgram+0x94>)
 8000ac4:	2206      	movs	r2, #6
 8000ac6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ac8:	e018      	b.n	8000afc <Programs_PerformProgram+0x80>

	case PROGRAM_IN_PROGRESS:
		/* Run the program */
		if(NULL != CurrentlyRunningProg->ProgramRoutine)
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <Programs_PerformProgram+0x9c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d015      	beq.n	8000b00 <Programs_PerformProgram+0x84>
		{
			CurrentlyRunningProg->ProgramRoutine();
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <Programs_PerformProgram+0x9c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4798      	blx	r3
		}
		break;
 8000adc:	e010      	b.n	8000b00 <Programs_PerformProgram+0x84>

	case PROGRAM_EXITING:
		/* Waiting for program exit ACK from robot */
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
 8000ade:	f002 fd95 	bl	800360c <HAL_GetTick>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <Programs_PerformProgram+0x98>)
 8000ae6:	8812      	ldrh	r2, [r2, #0]
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aee:	d909      	bls.n	8000b04 <Programs_PerformProgram+0x88>
		{
			ProgramState = PROGRAM_EXIT_ERROR;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <Programs_PerformProgram+0x94>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000af6:	e005      	b.n	8000b04 <Programs_PerformProgram+0x88>
		/* Clear the program after exit error*/
		//Programs_ClearProgram();
		break;

	default:
		break;
 8000af8:	bf00      	nop
 8000afa:	e004      	b.n	8000b06 <Programs_PerformProgram+0x8a>
		break;
 8000afc:	bf00      	nop
 8000afe:	e002      	b.n	8000b06 <Programs_PerformProgram+0x8a>
		break;
 8000b00:	bf00      	nop
 8000b02:	e000      	b.n	8000b06 <Programs_PerformProgram+0x8a>
		break;
 8000b04:	bf00      	nop
	}

	return ProgramState;
 8000b06:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <Programs_PerformProgram+0x94>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000210 	.word	0x20000210
 8000b14:	20000212 	.word	0x20000212
 8000b18:	2000020c 	.word	0x2000020c

08000b1c <Programs_ProgramLaunchedACK>:
//

/* This functions are called by parser, when the robot acknowledges the proper program launch */

void Programs_ProgramLaunchedACK(uint8_t ProgramID, uint8_t ACKorNACK)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	switch(ACKorNACK)
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	2bf0      	cmp	r3, #240	; 0xf0
 8000b30:	d002      	beq.n	8000b38 <Programs_ProgramLaunchedACK+0x1c>
 8000b32:	2bf1      	cmp	r3, #241	; 0xf1
 8000b34:	d012      	beq.n	8000b5c <Programs_ProgramLaunchedACK+0x40>
		//TODO: ADD NACK MANAGEMENT
		break;

	default:

		break;
 8000b36:	e014      	b.n	8000b62 <Programs_ProgramLaunchedACK+0x46>
		if(PROGRAM_LAUNCHING == ProgramState && ProgramID == CurrentlyRunningProg->ProgramID)
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <Programs_ProgramLaunchedACK+0x50>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10f      	bne.n	8000b60 <Programs_ProgramLaunchedACK+0x44>
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <Programs_ProgramLaunchedACK+0x54>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	7c1b      	ldrb	r3, [r3, #16]
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d109      	bne.n	8000b60 <Programs_ProgramLaunchedACK+0x44>
				CurrentlyRunningProg->ProgramInitFunction();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <Programs_ProgramLaunchedACK+0x54>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4798      	blx	r3
				ProgramState = PROGRAM_IN_PROGRESS;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <Programs_ProgramLaunchedACK+0x50>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	701a      	strb	r2, [r3, #0]
		break;
 8000b5a:	e001      	b.n	8000b60 <Programs_ProgramLaunchedACK+0x44>
		break;
 8000b5c:	bf00      	nop
 8000b5e:	e000      	b.n	8000b62 <Programs_ProgramLaunchedACK+0x46>
		break;
 8000b60:	bf00      	nop
	}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000210 	.word	0x20000210
 8000b70:	2000020c 	.word	0x2000020c

08000b74 <Programs_ProgramExitACK>:

void Programs_ProgramExitACK(uint8_t ACKorNACK)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	switch(ACKorNACK)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2bf0      	cmp	r3, #240	; 0xf0
 8000b82:	d002      	beq.n	8000b8a <Programs_ProgramExitACK+0x16>
 8000b84:	2bf1      	cmp	r3, #241	; 0xf1
 8000b86:	d008      	beq.n	8000b9a <Programs_ProgramExitACK+0x26>
		//TODO: ADD NACK MANAGEMENT
		break;

	default:

		break;
 8000b88:	e00a      	b.n	8000ba0 <Programs_ProgramExitACK+0x2c>
		if(PROGRAM_EXITING == ProgramState)
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Programs_ProgramExitACK+0x38>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d105      	bne.n	8000b9e <Programs_ProgramExitACK+0x2a>
			ProgramState = PROGRAM_COMPLETED;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Programs_ProgramExitACK+0x38>)
 8000b94:	2205      	movs	r2, #5
 8000b96:	701a      	strb	r2, [r3, #0]
		break;
 8000b98:	e001      	b.n	8000b9e <Programs_ProgramExitACK+0x2a>
		break;
 8000b9a:	bf00      	nop
 8000b9c:	e000      	b.n	8000ba0 <Programs_ProgramExitACK+0x2c>
		break;
 8000b9e:	bf00      	nop
	}

}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000210 	.word	0x20000210

08000bb0 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	425a      	negs	r2, r3
 8000bc6:	f003 031f 	and.w	r3, r3, #31
 8000bca:	f002 021f 	and.w	r2, r2, #31
 8000bce:	bf58      	it	pl
 8000bd0:	4253      	negpl	r3, r2
 8000bd2:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d101      	bne.n	8000be4 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e00b      	b.n	8000bfc <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bea:	4619      	mov	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	78fa      	ldrb	r2, [r7, #3]
 8000bf0:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c18:	3301      	adds	r3, #1
 8000c1a:	425a      	negs	r2, r3
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	f002 021f 	and.w	r2, r2, #31
 8000c24:	bf58      	it	pl
 8000c26:	4253      	negpl	r3, r2
 8000c28:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d101      	bne.n	8000c3e <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00c      	b.n	8000c58 <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	5c9a      	ldrb	r2, [r3, r2]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <MX_ADC1_Init+0xf0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7c:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000ca6:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <MX_ADC1_Init+0xf4>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cc6:	f002 fcd1 	bl	800366c <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f001 f838 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481a      	ldr	r0, [pc, #104]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000ce6:	f002 ff23 	bl	8003b30 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f001 f828 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000d02:	f002 ff15 	bl	8003b30 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d0c:	f001 f81a 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d14:	2303      	movs	r3, #3
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000d1e:	f002 ff07 	bl	8003b30 <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d28:	f001 f80c 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000d3a:	f002 fef9 	bl	8003b30 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d44:	f000 fffe 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000214 	.word	0x20000214
 8000d54:	40012000 	.word	0x40012000
 8000d58:	0f000001 	.word	0x0f000001

08000d5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <HAL_ADC_MspInit+0x110>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d171      	bne.n	8000e62 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a3a      	ldr	r2, [pc, #232]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a33      	ldr	r2, [pc, #204]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a2c      	ldr	r2, [pc, #176]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_ADC_MspInit+0x114>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <HAL_ADC_MspInit+0x118>)
 8000de6:	f003 fe01 	bl	80049ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 8000dea:	2306      	movs	r3, #6
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481e      	ldr	r0, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0x11c>)
 8000dfe:	f003 fdf5 	bl	80049ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_ADC_MspInit+0x124>)
 8000e06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e48:	f003 fa3e 	bl	80042c8 <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000e52:	f000 ff77 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_ADC_MspInit+0x120>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	2000025c 	.word	0x2000025c
 8000e80:	40026410 	.word	0x40026410

08000e84 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000e8a:	4828      	ldr	r0, [pc, #160]	; (8000f2c <Inputs_Init+0xa8>)
 8000e8c:	f005 ff64 	bl	8006d58 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 8000e90:	2228      	movs	r2, #40	; 0x28
 8000e92:	4927      	ldr	r1, [pc, #156]	; (8000f30 <Inputs_Init+0xac>)
 8000e94:	4827      	ldr	r0, [pc, #156]	; (8000f34 <Inputs_Init+0xb0>)
 8000e96:	f002 fd3d 	bl	8003914 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000e9a:	2032      	movs	r0, #50	; 0x32
 8000e9c:	f002 fbc2 	bl	8003624 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 8000ea0:	4a25      	ldr	r2, [pc, #148]	; (8000f38 <Inputs_Init+0xb4>)
 8000ea2:	4926      	ldr	r1, [pc, #152]	; (8000f3c <Inputs_Init+0xb8>)
 8000ea4:	4826      	ldr	r0, [pc, #152]	; (8000f40 <Inputs_Init+0xbc>)
 8000ea6:	f000 fc81 	bl	80017ac <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000eaa:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <Inputs_Init+0xc0>)
 8000eac:	4926      	ldr	r1, [pc, #152]	; (8000f48 <Inputs_Init+0xc4>)
 8000eae:	4827      	ldr	r0, [pc, #156]	; (8000f4c <Inputs_Init+0xc8>)
 8000eb0:	f000 fc7c 	bl	80017ac <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <Inputs_Init+0xbc>)
 8000eb6:	f000 fc94 	bl	80017e2 <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000eba:	4824      	ldr	r0, [pc, #144]	; (8000f4c <Inputs_Init+0xc8>)
 8000ebc:	f000 fc91 	bl	80017e2 <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ec0:	213c      	movs	r1, #60	; 0x3c
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <Inputs_Init+0xa8>)
 8000ec4:	f006 f848 	bl	8006f58 <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
 8000ec8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2332      	movs	r3, #50	; 0x32
 8000ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed4:	491e      	ldr	r1, [pc, #120]	; (8000f50 <Inputs_Init+0xcc>)
 8000ed6:	481f      	ldr	r0, [pc, #124]	; (8000f54 <Inputs_Init+0xd0>)
 8000ed8:	f000 f9a4 	bl	8001224 <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
 8000edc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2332      	movs	r3, #50	; 0x32
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	491c      	ldr	r1, [pc, #112]	; (8000f58 <Inputs_Init+0xd4>)
 8000ee8:	481c      	ldr	r0, [pc, #112]	; (8000f5c <Inputs_Init+0xd8>)
 8000eea:	f000 f99b 	bl	8001224 <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
 8000eee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2332      	movs	r3, #50	; 0x32
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4915      	ldr	r1, [pc, #84]	; (8000f50 <Inputs_Init+0xcc>)
 8000efa:	4819      	ldr	r0, [pc, #100]	; (8000f60 <Inputs_Init+0xdc>)
 8000efc:	f000 f992 	bl	8001224 <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
 8000f00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2332      	movs	r3, #50	; 0x32
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4916      	ldr	r1, [pc, #88]	; (8000f64 <Inputs_Init+0xe0>)
 8000f0c:	4816      	ldr	r0, [pc, #88]	; (8000f68 <Inputs_Init+0xe4>)
 8000f0e:	f000 f989 	bl	8001224 <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
 8000f12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2332      	movs	r3, #50	; 0x32
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	4911      	ldr	r1, [pc, #68]	; (8000f64 <Inputs_Init+0xe0>)
 8000f1e:	4813      	ldr	r0, [pc, #76]	; (8000f6c <Inputs_Init+0xe8>)
 8000f20:	f000 f980 	bl	8001224 <DB_ButtonInit>
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000964 	.word	0x20000964
 8000f30:	200002bc 	.word	0x200002bc
 8000f34:	20000214 	.word	0x20000214
 8000f38:	2000030e 	.word	0x2000030e
 8000f3c:	2000030c 	.word	0x2000030c
 8000f40:	20000314 	.word	0x20000314
 8000f44:	20000312 	.word	0x20000312
 8000f48:	20000310 	.word	0x20000310
 8000f4c:	2000032c 	.word	0x2000032c
 8000f50:	40020800 	.word	0x40020800
 8000f54:	20000344 	.word	0x20000344
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	20000364 	.word	0x20000364
 8000f60:	20000384 	.word	0x20000384
 8000f64:	40020000 	.word	0x40020000
 8000f68:	200003a4 	.word	0x200003a4
 8000f6c:	200003c4 	.word	0x200003c4

08000f70 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	77fb      	strb	r3, [r7, #31]
 8000f8c:	e021      	b.n	8000fd2 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	7ffa      	ldrb	r2, [r7, #31]
 8000f92:	4924      	ldr	r1, [pc, #144]	; (8001024 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f94:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	7ffa      	ldrb	r2, [r7, #31]
 8000fa0:	3201      	adds	r2, #1
 8000fa2:	4920      	ldr	r1, [pc, #128]	; (8001024 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000fa4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fa8:	4413      	add	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	7ffa      	ldrb	r2, [r7, #31]
 8000fb0:	3202      	adds	r2, #2
 8000fb2:	491c      	ldr	r1, [pc, #112]	; (8001024 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000fb4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fb8:	4413      	add	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	7ffa      	ldrb	r2, [r7, #31]
 8000fc0:	3203      	adds	r2, #3
 8000fc2:	4918      	ldr	r1, [pc, #96]	; (8001024 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000fc4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fc8:	4413      	add	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	77fb      	strb	r3, [r7, #31]
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	2b24      	cmp	r3, #36	; 0x24
 8000fd6:	d9da      	bls.n	8000f8e <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_ADC_ConvCpltCallback+0xbc>)
 8000fe6:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000fec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_ADC_ConvCpltCallback+0xbc>)
 8000ff6:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_ADC_ConvCpltCallback+0xbc>)
 8001006:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_ADC_ConvCpltCallback+0xb8>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_ADC_ConvCpltCallback+0xbc>)
 8001016:	80da      	strh	r2, [r3, #6]
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200002bc 	.word	0x200002bc
 8001028:	cccccccd 	.word	0xcccccccd
 800102c:	2000030c 	.word	0x2000030c

08001030 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <Inputs_GetEncoderCount+0x4c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <Inputs_GetEncoderCount+0x50>)
 800103e:	8812      	ldrh	r2, [r2, #0]
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	dc03      	bgt.n	8001052 <Inputs_GetEncoderCount+0x22>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f113 0f03 	cmn.w	r3, #3
 8001050:	da0d      	bge.n	800106e <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <Inputs_GetEncoderCount+0x4c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <Inputs_GetEncoderCount+0x50>)
 800105c:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	da00      	bge.n	8001066 <Inputs_GetEncoderCount+0x36>
 8001064:	3303      	adds	r3, #3
 8001066:	109b      	asrs	r3, r3, #2
 8001068:	425b      	negs	r3, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	e000      	b.n	8001070 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 800106e:	2300      	movs	r3, #0
	}
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000964 	.word	0x20000964
 8001080:	200003e4 	.word	0x200003e4

08001084 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <Inputs_ButtonsRoutine+0x28>)
 800108a:	f000 f917 	bl	80012bc <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <Inputs_ButtonsRoutine+0x2c>)
 8001090:	f000 f914 	bl	80012bc <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <Inputs_ButtonsRoutine+0x30>)
 8001096:	f000 f911 	bl	80012bc <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <Inputs_ButtonsRoutine+0x34>)
 800109c:	f000 f90e 	bl	80012bc <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <Inputs_ButtonsRoutine+0x38>)
 80010a2:	f000 f90b 	bl	80012bc <DB_ButtonProcess>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000344 	.word	0x20000344
 80010b0:	20000364 	.word	0x20000364
 80010b4:	200003a4 	.word	0x200003a4
 80010b8:	20000384 	.word	0x20000384
 80010bc:	200003c4 	.word	0x200003c4

080010c0 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d82b      	bhi.n	800112c <Inputs_ButtonsRegisterCallback+0x6c>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <Inputs_ButtonsRegisterCallback+0x1c>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010f1 	.word	0x080010f1
 80010e0:	080010fd 	.word	0x080010fd
 80010e4:	08001109 	.word	0x08001109
 80010e8:	08001115 	.word	0x08001115
 80010ec:	08001121 	.word	0x08001121
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <Inputs_ButtonsRegisterCallback+0x78>)
 80010f6:	f000 f8b8 	bl	800126a <DB_ButtonPressCallbackRegister>
		break;
 80010fa:	e018      	b.n	800112e <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	480e      	ldr	r0, [pc, #56]	; (800113c <Inputs_ButtonsRegisterCallback+0x7c>)
 8001102:	f000 f8b2 	bl	800126a <DB_ButtonPressCallbackRegister>
		break;
 8001106:	e012      	b.n	800112e <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <Inputs_ButtonsRegisterCallback+0x80>)
 800110e:	f000 f8ac 	bl	800126a <DB_ButtonPressCallbackRegister>
		break;
 8001112:	e00c      	b.n	800112e <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <Inputs_ButtonsRegisterCallback+0x84>)
 800111a:	f000 f8a6 	bl	800126a <DB_ButtonPressCallbackRegister>
		break;
 800111e:	e006      	b.n	800112e <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <Inputs_ButtonsRegisterCallback+0x88>)
 8001126:	f000 f8a0 	bl	800126a <DB_ButtonPressCallbackRegister>
		break;
 800112a:	e000      	b.n	800112e <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 800112c:	bf00      	nop
	}
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000344 	.word	0x20000344
 800113c:	20000364 	.word	0x20000364
 8001140:	20000384 	.word	0x20000384
 8001144:	200003a4 	.word	0x200003a4
 8001148:	200003c4 	.word	0x200003c4

0800114c <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <Inputs_ClearButtonsCallbacks+0x3c>)
 8001156:	f000 f888 	bl	800126a <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <Inputs_ClearButtonsCallbacks+0x40>)
 8001160:	f000 f883 	bl	800126a <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <Inputs_ClearButtonsCallbacks+0x44>)
 800116a:	f000 f87e 	bl	800126a <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <Inputs_ClearButtonsCallbacks+0x48>)
 8001174:	f000 f879 	bl	800126a <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <Inputs_ClearButtonsCallbacks+0x4c>)
 800117e:	f000 f874 	bl	800126a <DB_ButtonPressCallbackRegister>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000344 	.word	0x20000344
 800118c:	20000364 	.word	0x20000364
 8001190:	20000384 	.word	0x20000384
 8001194:	200003a4 	.word	0x200003a4
 8001198:	200003c4 	.word	0x200003c4

0800119c <Parser_Controller>:
#include "Programs/DiodeTest_Prog.h"
#include "Programs/MotorsDebug_Prog.h"


void Parser_Controller(uint8_t *command, uint8_t length)							//main parser funciton
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	617b      	str	r3, [r7, #20]
	uint8_t Length = length;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	74fb      	strb	r3, [r7, #19]
	Programs_Program_t* CurrentProgram = Programs_GetProgram();
 80011b0:	f7ff fc46 	bl	8000a40 <Programs_GetProgram>
 80011b4:	60f8      	str	r0, [r7, #12]

	/* If the command header is currently running program's ID, then pass the rest fo the command to it's parser */
	if(NULL != CurrentProgram && *CurrentByte == CurrentProgram->ProgramID)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <Parser_Controller+0x46>
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	7c1b      	ldrb	r3, [r3, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d10c      	bne.n	80011e2 <Parser_Controller+0x46>
	{
		CurrentByte++;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
		Length--;
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	74fb      	strb	r3, [r7, #19]
		/* Frame: [ProgramID, Specific program commands...] */
		CurrentProgram->ProgramParser(CurrentByte, Length);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	7cfa      	ldrb	r2, [r7, #19]
 80011da:	4611      	mov	r1, r2
 80011dc:	6978      	ldr	r0, [r7, #20]
 80011de:	4798      	blx	r3
 80011e0:	e01c      	b.n	800121c <Parser_Controller+0x80>
	}
	else
	/* If command header is different, check if it is launch/exit commands */
	{
		switch(*CurrentByte)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b10      	cmp	r3, #16
 80011e8:	d002      	beq.n	80011f0 <Parser_Controller+0x54>
 80011ea:	2b11      	cmp	r3, #17
 80011ec:	d00d      	beq.n	800120a <Parser_Controller+0x6e>
			CurrentByte++;
			Programs_ProgramExitACK(*CurrentByte);
			break;

		default:
			break;
 80011ee:	e015      	b.n	800121c <Parser_Controller+0x80>
			CurrentByte++;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
			Programs_ProgramLaunchedACK(*CurrentByte, *(CurrentByte + 1) );
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f7ff fc8a 	bl	8000b1c <Programs_ProgramLaunchedACK>
			break;
 8001208:	e008      	b.n	800121c <Parser_Controller+0x80>
			CurrentByte++;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
			Programs_ProgramExitACK(*CurrentByte);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fcad 	bl	8000b74 <Programs_ProgramExitACK>
			break;
 800121a:	bf00      	nop
		}
	}
}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <DB_ButtonInit>:

#include "debounce.h"
#include "stdio.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	88fa      	ldrh	r2, [r7, #6]
 800123e:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	615a      	str	r2, [r3, #20]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f003 fd27 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <DB_IsButtonPressed+0x22>
	{
		return 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 80012b0:	2300      	movs	r3, #0
	}
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	f200 8082 	bhi.w	80013d2 <DB_ButtonProcess+0x116>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <DB_ButtonProcess+0x18>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	08001303 	.word	0x08001303
 80012dc:	08001343 	.word	0x08001343
 80012e0:	0800138d 	.word	0x0800138d
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffd2 	bl	800128e <DB_IsButtonPressed>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d06b      	beq.n	80013c8 <DB_ButtonProcess+0x10c>
		{
			Button->ButtonState = DEBOUNCE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 80012f6:	f002 f989 	bl	800360c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	61da      	str	r2, [r3, #28]
		}
		break;
 8001300:	e062      	b.n	80013c8 <DB_ButtonProcess+0x10c>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8001302:	f002 f983 	bl	800360c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	429a      	cmp	r2, r3
 8001314:	d95a      	bls.n	80013cc <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button))
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffb9 	bl	800128e <DB_IsButtonPressed>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d008      	beq.n	8001334 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2202      	movs	r2, #2
 8001326:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001328:	f002 f970 	bl	800360c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonState = IDLE;
				printf("Debounce: Button bounced \n");
			}
		}
		break;
 8001332:	e04b      	b.n	80013cc <DB_ButtonProcess+0x110>
				Button->ButtonState = IDLE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button bounced \n");
 800133a:	4828      	ldr	r0, [pc, #160]	; (80013dc <DB_ButtonProcess+0x120>)
 800133c:	f006 fa12 	bl	8007764 <puts>
		break;
 8001340:	e044      	b.n	80013cc <DB_ButtonProcess+0x110>
	case PRESSED:

		if(0 == DB_IsButtonPressed(Button))
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa3 	bl	800128e <DB_IsButtonPressed>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <DB_ButtonProcess+0xae>
		{
			if(NULL != Button->ButtonPressAction)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <DB_ButtonProcess+0xa0>
			{
				Button->ButtonPressAction();
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button pressed! \n");
 8001362:	481f      	ldr	r0, [pc, #124]	; (80013e0 <DB_ButtonProcess+0x124>)
 8001364:	f006 f9fe 	bl	8007764 <puts>
			{
				Button->ButtonState = HOLD;
				Button->LastTick = HAL_GetTick();
			}
		}
		break;
 8001368:	e032      	b.n	80013d0 <DB_ButtonProcess+0x114>
			if(HAL_GetTick() - (Button->LastTick) > 150 )
 800136a:	f002 f94f 	bl	800360c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b96      	cmp	r3, #150	; 0x96
 8001378:	d92a      	bls.n	80013d0 <DB_ButtonProcess+0x114>
				Button->ButtonState = HOLD;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001380:	f002 f944 	bl	800360c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	61da      	str	r2, [r3, #28]
		break;
 800138a:	e021      	b.n	80013d0 <DB_ButtonProcess+0x114>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 800138c:	f002 f93e 	bl	800360c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	d918      	bls.n	80013d2 <DB_ButtonProcess+0x116>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonHoldAction)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff74 	bl	800128e <DB_IsButtonPressed>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <DB_ButtonProcess+0x104>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <DB_ButtonProcess+0x104>
			{
				Button->ButtonHoldAction();
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	4798      	blx	r3
				printf("Debounce: Button held! \r\n");
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <DB_ButtonProcess+0x128>)
 80013bc:	f006 f9d2 	bl	8007764 <puts>
			}
			Button->ButtonState = IDLE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]
		}
	}
}
 80013c6:	e004      	b.n	80013d2 <DB_ButtonProcess+0x116>
		break;
 80013c8:	bf00      	nop
 80013ca:	e002      	b.n	80013d2 <DB_ButtonProcess+0x116>
		break;
 80013cc:	bf00      	nop
 80013ce:	e000      	b.n	80013d2 <DB_ButtonProcess+0x116>
		break;
 80013d0:	bf00      	nop
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	080085a4 	.word	0x080085a4
 80013e0:	080085c0 	.word	0x080085c0
 80013e4:	080085dc 	.word	0x080085dc

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2038      	movs	r0, #56	; 0x38
 8001410:	f002 ff23 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001414:	2038      	movs	r0, #56	; 0x38
 8001416:	f002 ff3c 	bl	8004292 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a56      	ldr	r2, [pc, #344]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <MX_GPIO_Init+0x178>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <MX_GPIO_Init+0x178>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a41      	ldr	r2, [pc, #260]	; (80015a0 <MX_GPIO_Init+0x178>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <MX_GPIO_Init+0x178>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <MX_GPIO_Init+0x178>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <MX_GPIO_Init+0x178>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <MX_GPIO_Init+0x178>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2124      	movs	r1, #36	; 0x24
 80014ce:	4835      	ldr	r0, [pc, #212]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014d0:	f003 fc28 	bl	8004d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	21c0      	movs	r1, #192	; 0xc0
 80014d8:	4833      	ldr	r0, [pc, #204]	; (80015a8 <MX_GPIO_Init+0x180>)
 80014da:	f003 fc23 	bl	8004d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 80014de:	f240 4301 	movw	r3, #1025	; 0x401
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	482d      	ldr	r0, [pc, #180]	; (80015a8 <MX_GPIO_Init+0x180>)
 80014f4:	f003 fa7a 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 80014f8:	2321      	movs	r3, #33	; 0x21
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4828      	ldr	r0, [pc, #160]	; (80015ac <MX_GPIO_Init+0x184>)
 800150c:	f003 fa6e 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001510:	2304      	movs	r3, #4
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	481f      	ldr	r0, [pc, #124]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001528:	f003 fa60 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001544:	f003 fa52 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_GPIO_Init+0x180>)
 8001560:	f003 fa44 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8001564:	2304      	movs	r3, #4
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <MX_GPIO_Init+0x188>)
 8001578:	f003 fa38 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001594:	f003 fa2a 	bl	80049ec <HAL_GPIO_Init>

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020c00 	.word	0x40020c00

080015b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C1_Init+0x50>)
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MX_I2C1_Init+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C1_Init+0x50>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_I2C1_Init+0x58>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_I2C1_Init+0x50>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_I2C1_Init+0x50>)
 80015f2:	f003 fbc9 	bl	8004d88 <HAL_I2C_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015fc:	f000 fba2 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200003e8 	.word	0x200003e8
 8001608:	40005400 	.word	0x40005400
 800160c:	00061a80 	.word	0x00061a80

08001610 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_I2C3_Init+0x50>)
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <MX_I2C3_Init+0x54>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_I2C3_Init+0x50>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_I2C3_Init+0x58>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_I2C3_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_I2C3_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_I2C3_Init+0x50>)
 800162e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001632:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_I2C3_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_I2C3_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_I2C3_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_I2C3_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_I2C3_Init+0x50>)
 800164e:	f003 fb9b 	bl	8004d88 <HAL_I2C_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001658:	f000 fb74 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000043c 	.word	0x2000043c
 8001664:	40005c00 	.word	0x40005c00
 8001668:	00061a80 	.word	0x00061a80

0800166c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_I2C_MspInit+0x128>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12d      	bne.n	80016ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a40      	ldr	r2, [pc, #256]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016bc:	2304      	movs	r3, #4
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4835      	ldr	r0, [pc, #212]	; (800179c <HAL_I2C_MspInit+0x130>)
 80016c8:	f003 f990 	bl	80049ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a30      	ldr	r2, [pc, #192]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 80016d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80016e8:	e050      	b.n	800178c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <HAL_I2C_MspInit+0x134>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d14b      	bne.n	800178c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800172c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800173e:	2304      	movs	r3, #4
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <HAL_I2C_MspInit+0x138>)
 800174a:	f003 f94f 	bl	80049ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001754:	2312      	movs	r3, #18
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001760:	2304      	movs	r3, #4
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	480f      	ldr	r0, [pc, #60]	; (80017a8 <HAL_I2C_MspInit+0x13c>)
 800176c:	f003 f93e 	bl	80049ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 800177a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_I2C_MspInit+0x12c>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
}
 800178c:	bf00      	nop
 800178e:	3730      	adds	r7, #48	; 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40005400 	.word	0x40005400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020400 	.word	0x40020400
 80017a0:	40005c00 	.word	0x40005c00
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020000 	.word	0x40020000

080017ac <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <JoyS_Init+0x18>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 80017ea:	f001 ff0f 	bl	800360c <HAL_GetTick>
 80017ee:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 80017f0:	e015      	b.n	800181e <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <JoyS_SetIdleValues+0x24>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e007      	b.n	800182e <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 800181e:	f001 fef5 	bl	800360c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b63      	cmp	r3, #99	; 0x63
 800182a:	d9e2      	bls.n	80017f2 <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 800182c:	2303      	movs	r3, #3
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 f87d 	bl	8002940 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 8001846:	4906      	ldr	r1, [pc, #24]	; (8001860 <Radio_Init+0x28>)
 8001848:	2000      	movs	r0, #0
 800184a:	f000 fe96 	bl	800257a <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <Radio_Init+0x2c>)
 8001850:	f000 fecc 	bl	80025ec <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 8001854:	f000 fcd6 	bl	8002204 <nRF24_TX_Mode>
#endif
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	080085f8 	.word	0x080085f8
 8001864:	080085fc 	.word	0x080085fc

08001868 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001878:	2300      	movs	r3, #0
 800187a:	73bb      	strb	r3, [r7, #14]
 800187c:	e010      	b.n	80018a0 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <Radio_RxBufferPut+0x4c>)
 8001886:	f7ff f993 	bl	8000bb0 <RBuffer_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	4313      	orrs	r3, r2
 8001892:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3301      	adds	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	3301      	adds	r3, #1
 800189e:	73bb      	strb	r3, [r7, #14]
 80018a0:	7bba      	ldrb	r2, [r7, #14]
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3ea      	bcc.n	800187e <Radio_RxBufferPut+0x16>
	}
	return Status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200004b8 	.word	0x200004b8

080018b8 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 80018ca:	f107 030d 	add.w	r3, r7, #13
 80018ce:	4619      	mov	r1, r3
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <Radio_RxBufferGet+0x6c>)
 80018d2:	f7ff f999 	bl	8000c08 <RBuffer_Read>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	4313      	orrs	r3, r2
 80018de:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80018e0:	e012      	b.n	8001908 <Radio_RxBufferGet+0x50>
	{

		*(CommandDestination+Length) = Data;				//write received byte to destination
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	7b7a      	ldrb	r2, [r7, #13]
 80018ea:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	3301      	adds	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 80018f2:	f107 030d 	add.w	r3, r7, #13
 80018f6:	4619      	mov	r1, r3
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <Radio_RxBufferGet+0x6c>)
 80018fa:	f7ff f985 	bl	8000c08 <RBuffer_Read>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	4313      	orrs	r3, r2
 8001906:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001908:	7b7b      	ldrb	r3, [r7, #13]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d002      	beq.n	8001914 <Radio_RxBufferGet+0x5c>
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0e6      	beq.n	80018e2 <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	701a      	strb	r2, [r3, #0]
	return Status;
 800191a:	7bbb      	ldrb	r3, [r7, #14]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200004b8 	.word	0x200004b8

08001928 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001938:	2300      	movs	r3, #0
 800193a:	73bb      	strb	r3, [r7, #14]
 800193c:	e010      	b.n	8001960 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4619      	mov	r1, r3
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <Radio_TxBufferPut+0x5c>)
 8001946:	f7ff f933 	bl	8000bb0 <RBuffer_Write>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4313      	orrs	r3, r2
 8001952:	73fb      	strb	r3, [r7, #15]
		Command++;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3301      	adds	r3, #1
 8001958:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	3301      	adds	r3, #1
 800195e:	73bb      	strb	r3, [r7, #14]
 8001960:	7bba      	ldrb	r2, [r7, #14]
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3ea      	bcc.n	800193e <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001968:	2104      	movs	r1, #4
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <Radio_TxBufferPut+0x5c>)
 800196c:	f7ff f920 	bl	8000bb0 <RBuffer_Write>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	4313      	orrs	r3, r2
 8001978:	73fb      	strb	r3, [r7, #15]
	return Status;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000494 	.word	0x20000494

08001988 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 800199a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800199e:	1d3a      	adds	r2, r7, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <Radio_TxBufferSend+0x84>)
 80019a6:	f7ff f92f 	bl	8000c08 <RBuffer_Read>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 80019b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80019c2:	3328      	adds	r3, #40	; 0x28
 80019c4:	443b      	add	r3, r7
 80019c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d003      	beq.n	80019d6 <Radio_TxBufferSend+0x4e>
 80019ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0e1      	beq.n	800199a <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 80019d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d110      	bne.n	8001a00 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 80019de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 ff18 	bl	800281c <nRF24_SendPacket>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f4:	4313      	orrs	r3, r2
 80019f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <Radio_TxBufferSend+0x88>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 8001a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000494 	.word	0x20000494
 8001a10:	20000491 	.word	0x20000491

08001a14 <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
#ifdef CONTROLLER
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 8001a1a:	f240 4305 	movw	r3, #1029	; 0x405
 8001a1e:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <Radio_SendConnectionCheck+0x28>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fef6 	bl	800281c <nRF24_SendPacket>
 8001a30:	4603      	mov	r3, r0
#ifdef ROBOT
	uint8_t Command [3] = {CONNECTION_HOLD, _OK, COMM_END};
	TxStatus = RADIO_BUSY;
	return nRF24_WriteAckPayload(0, Command, 3);
#endif
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000491 	.word	0x20000491

08001a40 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 8001a46:	f000 ff53 	bl	80028f0 <nRF24_Event>

#ifdef CONTROLLER

	static uint32_t LastTick;
	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 8001a4a:	f001 fddf 	bl	800360c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <Radio_Process+0x88>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b32      	cmp	r3, #50	; 0x32
 8001a58:	d91c      	bls.n	8001a94 <Radio_Process+0x54>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <Radio_Process+0x8c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <Radio_Process+0x32>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8001a62:	f7ff ff91 	bl	8001988 <Radio_TxBufferSend>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10e      	bne.n	8001a8a <Radio_Process+0x4a>
			{
				Radio_SendConnectionCheck();
 8001a6c:	f7ff ffd2 	bl	8001a14 <Radio_SendConnectionCheck>
 8001a70:	e00b      	b.n	8001a8a <Radio_Process+0x4a>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <Radio_Process+0x8c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <Radio_Process+0x4a>
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <Radio_Process+0x90>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d103      	bne.n	8001a8a <Radio_Process+0x4a>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8001a82:	f000 f829 	bl	8001ad8 <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 8001a86:	f7ff ffc5 	bl	8001a14 <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8001a8a:	f001 fdbf 	bl	800360c <HAL_GetTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <Radio_Process+0x88>)
 8001a92:	6013      	str	r3, [r2, #0]
		ConnectionStatus = RADIO_ERROR;
		Radio_NoConnectionCallback();
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <Radio_Process+0x94>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d110      	bne.n	8001abe <Radio_Process+0x7e>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001a9c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff07 	bl	80018b8 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001aaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f81c 	bl	8002af0 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <Radio_Process+0x94>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200004dc 	.word	0x200004dc
 8001acc:	20000491 	.word	0x20000491
 8001ad0:	20000490 	.word	0x20000490
 8001ad4:	20000492 	.word	0x20000492

08001ad8 <Radio_NoConnectionCallback>:
{
	nRF24_IRQ_Handler();
}

__weak void Radio_NoConnectionCallback(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <nRF24_EventTxCallback+0x1c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <nRF24_EventTxCallback+0x20>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000491 	.word	0x20000491
 8001b08:	20000490 	.word	0x20000490

08001b0c <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001b12:	1dfa      	adds	r2, r7, #7
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fe68 	bl	80027f0 <nRF24_ReadRXPaylaod>
	ConnectionStatus = RADIO_OK;
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fe9d 	bl	8001868 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001b2e:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <nRF24_EventRxCallback+0x30>)
 8001b30:	2203      	movs	r2, #3
 8001b32:	701a      	strb	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000492 	.word	0x20000492

08001b40 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <nRF24_EventMrCallback+0x14>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000490 	.word	0x20000490

08001b58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b80:	e000      	b.n	8001b84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f9      	beq.n	8001b82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bac:	f001 fcc8 	bl	8003540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb0:	f000 f828 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb4:	f7ff fc38 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bb8:	f7ff fc16 	bl	80013e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001bbc:	f7ff fcfa 	bl	80015b4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001bc0:	f7ff fd26 	bl	8001610 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001bc4:	f000 ffa4 	bl	8002b10 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001bc8:	f001 fba8 	bl	800331c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001bcc:	f7ff f84a 	bl	8000c64 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001bd0:	f001 fbf8 	bl	80033c4 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001bd4:	f000 f87e 	bl	8001cd4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2120      	movs	r1, #32
 8001bdc:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <main+0x50>)
 8001bde:	f003 f8a1 	bl	8004d24 <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <main+0x54>)
 8001be4:	f7ff fe28 	bl	8001838 <Radio_Init>
  Inputs_Init();
 8001be8:	f7ff f94c 	bl	8000e84 <Inputs_Init>
  OLED_Init(&hi2c3);
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <main+0x58>)
 8001bee:	f001 f843 	bl	8002c78 <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SimpleScheduler();
 8001bf2:	f000 ff3f 	bl	8002a74 <SimpleScheduler>
 8001bf6:	e7fc      	b.n	8001bf2 <main+0x4a>
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	200004f8 	.word	0x200004f8
 8001c00:	2000043c 	.word	0x2000043c

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b094      	sub	sp, #80	; 0x50
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2230      	movs	r2, #48	; 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 fea6 	bl	8007964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <SystemClock_Config+0xc8>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <SystemClock_Config+0xc8>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <SystemClock_Config+0xc8>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <SystemClock_Config+0xcc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <SystemClock_Config+0xcc>)
 8001c4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <SystemClock_Config+0xcc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c60:	2301      	movs	r3, #1
 8001c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c74:	2308      	movs	r3, #8
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c80:	2304      	movs	r3, #4
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c84:	f107 0320 	add.w	r3, r7, #32
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fcd9 	bl	8005640 <HAL_RCC_OscConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c94:	f000 f856 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c98:	230f      	movs	r3, #15
 8001c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 ff3b 	bl	8005b30 <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cc0:	f000 f840 	bl	8001d44 <Error_Handler>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3750      	adds	r7, #80	; 0x50
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2028      	movs	r0, #40	; 0x28
 8001cde:	f002 fabc 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ce2:	2028      	movs	r0, #40	; 0x28
 8001ce4:	f002 fad5 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2024      	movs	r0, #36	; 0x24
 8001cee:	f002 fab4 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001cf2:	2024      	movs	r0, #36	; 0x24
 8001cf4:	f002 facd 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2012      	movs	r0, #18
 8001cfe:	f002 faac 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d02:	2012      	movs	r0, #18
 8001d04:	f002 fac5 	bl	8004292 <HAL_NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff1e 	bl	8001b58 <ITM_SendChar>

	return ch;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001d38:	f000 fd88 	bl	800284c <nRF24_IRQ_Handler>
	}

}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
	//static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	//if(LastMenuPtr == MenuCurrentMember) return;  TODO: IS THIS NEEDED?

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001d5a:	e00c      	b.n	8001d76 <Menu_RefreshScreen+0x26>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <Menu_RefreshScreen+0x14c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <Menu_RefreshScreen+0x150>)
 8001d62:	5cd2      	ldrb	r2, [r2, r3]
 8001d64:	3201      	adds	r2, #1
 8001d66:	b2d1      	uxtb	r1, r2
 8001d68:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <Menu_RefreshScreen+0x150>)
 8001d6a:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <Menu_RefreshScreen+0x154>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <Menu_RefreshScreen+0x154>)
 8001d74:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <Menu_RefreshScreen+0x14c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <Menu_RefreshScreen+0x158>)
 8001d7e:	5c9b      	ldrb	r3, [r3, r2]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <Menu_RefreshScreen+0x14c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <Menu_RefreshScreen+0x150>)
 8001d8a:	5c5b      	ldrb	r3, [r3, r1]
 8001d8c:	3305      	adds	r3, #5
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dce4      	bgt.n	8001d5c <Menu_RefreshScreen+0xc>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001d92:	e00c      	b.n	8001dae <Menu_RefreshScreen+0x5e>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <Menu_RefreshScreen+0x14c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <Menu_RefreshScreen+0x150>)
 8001d9a:	5cd2      	ldrb	r2, [r2, r3]
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	b2d1      	uxtb	r1, r2
 8001da0:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <Menu_RefreshScreen+0x150>)
 8001da2:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <Menu_RefreshScreen+0x154>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <Menu_RefreshScreen+0x154>)
 8001dac:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <Menu_RefreshScreen+0x14c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <Menu_RefreshScreen+0x158>)
 8001db6:	5c9a      	ldrb	r2, [r3, r2]
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <Menu_RefreshScreen+0x14c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <Menu_RefreshScreen+0x150>)
 8001dc0:	5c5b      	ldrb	r3, [r3, r1]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3e6      	bcc.n	8001d94 <Menu_RefreshScreen+0x44>
	}

	OLED_ClearBuffer(BLACK);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f001 f860 	bl	8002e8c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 ffa2 	bl	8002d18 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4835      	ldr	r0, [pc, #212]	; (8001eac <Menu_RefreshScreen+0x15c>)
 8001dd8:	f001 f922 	bl	8003020 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <Menu_RefreshScreen+0x154>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001de2:	e04f      	b.n	8001e84 <Menu_RefreshScreen+0x134>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <Menu_RefreshScreen+0x160>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d126      	bne.n	8001e3c <Menu_RefreshScreen+0xec>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe f9f4 	bl	80001e0 <strlen>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	78bb      	ldrb	r3, [r7, #2]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 ff7d 	bl	8002d18 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4824      	ldr	r0, [pc, #144]	; (8001eb4 <Menu_RefreshScreen+0x164>)
 8001e22:	f001 f8fd 	bl	8003020 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 f8f7 	bl	8003020 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 8001e32:	2101      	movs	r1, #1
 8001e34:	4820      	ldr	r0, [pc, #128]	; (8001eb8 <Menu_RefreshScreen+0x168>)
 8001e36:	f001 f8f3 	bl	8003020 <OLED_WriteString>
 8001e3a:	e01d      	b.n	8001e78 <Menu_RefreshScreen+0x128>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe f9cd 	bl	80001e0 <strlen>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	78bb      	ldrb	r3, [r7, #2]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 ff56 	bl	8002d18 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f8d4 	bl	8003020 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d002      	beq.n	8001e90 <Menu_RefreshScreen+0x140>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1a9      	bne.n	8001de4 <Menu_RefreshScreen+0x94>
	}
	OLED_SendBuffer();
 8001e90:	f000 ffd0 	bl	8002e34 <OLED_SendBuffer>
	//LastMenuPtr = MenuCurrentMember;

}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200004e8 	.word	0x200004e8
 8001ea0:	200004e4 	.word	0x200004e4
 8001ea4:	20000168 	.word	0x20000168
 8001ea8:	200004e0 	.word	0x200004e0
 8001eac:	0800867c 	.word	0x0800867c
 8001eb0:	20000164 	.word	0x20000164
 8001eb4:	08008694 	.word	0x08008694
 8001eb8:	08008698 	.word	0x08008698

08001ebc <Menu_Next>:

void Menu_Next(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <Menu_Next+0x54>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <Menu_Next+0x54>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <Menu_Next+0x54>)
 8001ed2:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <Menu_Next+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <Menu_Next+0x5c>)
 8001eda:	5cd2      	ldrb	r2, [r2, r3]
 8001edc:	3201      	adds	r2, #1
 8001ede:	b2d1      	uxtb	r1, r2
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <Menu_Next+0x5c>)
 8001ee2:	54d1      	strb	r1, [r2, r3]
 8001ee4:	e00f      	b.n	8001f06 <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <Menu_Next+0x54>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <Menu_Next+0x54>)
 8001eee:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <Menu_Next+0x54>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f5      	bne.n	8001ee6 <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <Menu_Next+0x58>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <Menu_Next+0x5c>)
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8001f06:	f7ff ff23 	bl	8001d50 <Menu_RefreshScreen>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000164 	.word	0x20000164
 8001f14:	200004e8 	.word	0x200004e8
 8001f18:	200004e0 	.word	0x200004e0

08001f1c <Menu_Prev>:

void Menu_Prev(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <Menu_Prev+0x58>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01a      	beq.n	8001f60 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <Menu_Prev+0x58>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <Menu_Prev+0x58>)
 8001f32:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <Menu_Prev+0x5c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <Menu_Prev+0x60>)
 8001f3a:	5cd2      	ldrb	r2, [r2, r3]
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	b2d1      	uxtb	r1, r2
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <Menu_Prev+0x60>)
 8001f42:	54d1      	strb	r1, [r2, r3]
 8001f44:	e011      	b.n	8001f6a <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <Menu_Prev+0x58>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <Menu_Prev+0x58>)
 8001f4e:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <Menu_Prev+0x5c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <Menu_Prev+0x60>)
 8001f56:	5cd2      	ldrb	r2, [r2, r3]
 8001f58:	3201      	adds	r2, #1
 8001f5a:	b2d1      	uxtb	r1, r2
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <Menu_Prev+0x60>)
 8001f5e:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <Menu_Prev+0x58>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ed      	bne.n	8001f46 <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 8001f6a:	f7ff fef1 	bl	8001d50 <Menu_RefreshScreen>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000164 	.word	0x20000164
 8001f78:	200004e8 	.word	0x200004e8
 8001f7c:	200004e0 	.word	0x200004e0

08001f80 <Menu_Select>:



void Menu_Select(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <Menu_Select+0x48>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <Menu_Select+0x16>
	{
		MenuCurrentMember->FunctionPtr();
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <Menu_Select+0x48>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4798      	blx	r3
	}

	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <Menu_Select+0x48>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <Menu_Select+0x3e>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <Menu_Select+0x48>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <Menu_Select+0x48>)
 8001fa8:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <Menu_Select+0x48>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <Menu_Select+0x4c>)
 8001fb0:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <Menu_Select+0x50>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <Menu_Select+0x50>)
 8001fbc:	701a      	strb	r2, [r3, #0]
	}

	Menu_RefreshScreen();
 8001fbe:	f7ff fec7 	bl	8001d50 <Menu_RefreshScreen>
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000164 	.word	0x20000164
 8001fcc:	20000168 	.word	0x20000168
 8001fd0:	200004e8 	.word	0x200004e8

08001fd4 <Menu_Back>:

void Menu_Back(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <Menu_Back+0x7c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02e      	beq.n	8002042 <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <Menu_Back+0x80>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <Menu_Back+0x84>)
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <Menu_Back+0x7c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <Menu_Back+0x7c>)
 8001ff8:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <Menu_Back+0x7c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a17      	ldr	r2, [pc, #92]	; (800205c <Menu_Back+0x88>)
 8002000:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <Menu_Back+0x80>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	3b01      	subs	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <Menu_Back+0x80>)
 800200c:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
 8002012:	e007      	b.n	8002024 <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <Menu_Back+0x88>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <Menu_Back+0x88>)
 800201c:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	3301      	adds	r3, #1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <Menu_Back+0x80>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4619      	mov	r1, r3
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <Menu_Back+0x84>)
 800202e:	5c5b      	ldrb	r3, [r3, r1]
 8002030:	4619      	mov	r1, r3
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <Menu_Back+0x80>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <Menu_Back+0x8c>)
 800203a:	5c1b      	ldrb	r3, [r3, r0]
 800203c:	1acb      	subs	r3, r1, r3
 800203e:	429a      	cmp	r2, r3
 8002040:	dbe8      	blt.n	8002014 <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 8002042:	f7ff fe85 	bl	8001d50 <Menu_RefreshScreen>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000164 	.word	0x20000164
 8002054:	200004e8 	.word	0x200004e8
 8002058:	200004e0 	.word	0x200004e0
 800205c:	20000168 	.word	0x20000168
 8002060:	200004e4 	.word	0x200004e4

08002064 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f001 fad7 	bl	8003624 <HAL_Delay>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <nRF24_SendSpi+0x28>)
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	f003 ffdc 	bl	8006056 <HAL_SPI_Transmit>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004ec 	.word	0x200004ec

080020ac <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <nRF24_ReadSpi+0x28>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	f004 f902 	bl	80062ce <HAL_SPI_Receive>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200004ec 	.word	0x200004ec

080020d8 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020e6:	2200      	movs	r2, #0
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	480c      	ldr	r0, [pc, #48]	; (800211c <nRF24_ReadRegister+0x44>)
 80020ec:	f002 fe1a 	bl	8004d24 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80020f0:	1dfb      	adds	r3, r7, #7
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ffc3 	bl	8002080 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ffd3 	bl	80020ac <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8002106:	2201      	movs	r2, #1
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	4804      	ldr	r0, [pc, #16]	; (800211c <nRF24_ReadRegister+0x44>)
 800210c:	f002 fe0a 	bl	8004d24 <HAL_GPIO_WritePin>

	return result;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020800 	.word	0x40020800

08002120 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	4613      	mov	r3, r2
 800212e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002134:	2200      	movs	r2, #0
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	480a      	ldr	r0, [pc, #40]	; (8002164 <nRF24_ReadRegisters+0x44>)
 800213a:	f002 fdf3 	bl	8004d24 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff9c 	bl	8002080 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	4619      	mov	r1, r3
 800214c:	6838      	ldr	r0, [r7, #0]
 800214e:	f7ff ffad 	bl	80020ac <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8002152:	2201      	movs	r2, #1
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	4803      	ldr	r0, [pc, #12]	; (8002164 <nRF24_ReadRegisters+0x44>)
 8002158:	f002 fde4 	bl	8004d24 <HAL_GPIO_WritePin>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40020800 	.word	0x40020800

08002168 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	460a      	mov	r2, r1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4613      	mov	r3, r2
 8002176:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f043 0320 	orr.w	r3, r3, #32
 800217e:	b2db      	uxtb	r3, r3
 8002180:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8002186:	2200      	movs	r2, #0
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	4809      	ldr	r0, [pc, #36]	; (80021b0 <nRF24_WriteRegister+0x48>)
 800218c:	f002 fdca 	bl	8004d24 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff72 	bl	8002080 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 800219c:	2201      	movs	r2, #1
 800219e:	2140      	movs	r1, #64	; 0x40
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <nRF24_WriteRegister+0x48>)
 80021a2:	f002 fdbf 	bl	8004d24 <HAL_GPIO_WritePin>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40020800 	.word	0x40020800

080021b4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f043 0320 	orr.w	r3, r3, #32
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80021ce:	2200      	movs	r2, #0
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <nRF24_WriteRegisters+0x4c>)
 80021d4:	f002 fda6 	bl	8004d24 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	2101      	movs	r1, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff4f 	bl	8002080 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6838      	ldr	r0, [r7, #0]
 80021e8:	f7ff ff4a 	bl	8002080 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80021ec:	2201      	movs	r2, #1
 80021ee:	2140      	movs	r1, #64	; 0x40
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <nRF24_WriteRegisters+0x4c>)
 80021f2:	f002 fd97 	bl	8004d24 <HAL_GPIO_WritePin>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40020800 	.word	0x40020800

08002204 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800220a:	2200      	movs	r2, #0
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	4810      	ldr	r0, [pc, #64]	; (8002250 <nRF24_TX_Mode+0x4c>)
 8002210:	f002 fd88 	bl	8004d24 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002214:	f000 f81e 	bl	8002254 <nRF24_ReadConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f818 	bl	8002264 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002234:	2070      	movs	r0, #112	; 0x70
 8002236:	f000 f870 	bl	800231a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800223a:	f000 f87d 	bl	8002338 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800223e:	f000 f895 	bl	800236c <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff ff0e 	bl	8002064 <nRF24_Delay_ms>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40020800 	.word	0x40020800

08002254 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff ff3d 	bl	80020d8 <nRF24_ReadRegister>
 800225e:	4603      	mov	r3, r0
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}

08002264 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4619      	mov	r1, r3
 8002272:	2000      	movs	r0, #0
 8002274:	f7ff ff78 	bl	8002168 <nRF24_WriteRegister>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800228a:	2006      	movs	r0, #6
 800228c:	f7ff ff24 	bl	80020d8 <nRF24_ReadRegister>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f023 0307 	bic.w	r3, r3, #7
 800229a:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	4619      	mov	r1, r3
 80022b0:	2006      	movs	r0, #6
 80022b2:	f7ff ff59 	bl	8002168 <nRF24_WriteRegister>
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80022c8:	2006      	movs	r0, #6
 80022ca:	f7ff ff05 	bl	80020d8 <nRF24_ReadRegister>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80022d8:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d104      	bne.n	80022ea <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e006      	b.n	80022f8 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d103      	bne.n	80022f8 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	4619      	mov	r1, r3
 80022fc:	2006      	movs	r0, #6
 80022fe:	f7ff ff33 	bl	8002168 <nRF24_WriteRegister>
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800230e:	2007      	movs	r0, #7
 8002310:	f7ff fee2 	bl	80020d8 <nRF24_ReadRegister>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}

0800231a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4619      	mov	r1, r3
 8002328:	2007      	movs	r0, #7
 800232a:	f7ff ff1d 	bl	8002168 <nRF24_WriteRegister>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800233e:	23e2      	movs	r3, #226	; 0xe2
 8002340:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002342:	2200      	movs	r2, #0
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	4808      	ldr	r0, [pc, #32]	; (8002368 <nRF24_FlushRX+0x30>)
 8002348:	f002 fcec 	bl	8004d24 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fe95 	bl	8002080 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002356:	2201      	movs	r2, #1
 8002358:	2140      	movs	r1, #64	; 0x40
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <nRF24_FlushRX+0x30>)
 800235c:	f002 fce2 	bl	8004d24 <HAL_GPIO_WritePin>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40020800 	.word	0x40020800

0800236c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002372:	23e1      	movs	r3, #225	; 0xe1
 8002374:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002376:	2200      	movs	r2, #0
 8002378:	2140      	movs	r1, #64	; 0x40
 800237a:	4808      	ldr	r0, [pc, #32]	; (800239c <nRF24_FlushTX+0x30>)
 800237c:	f002 fcd2 	bl	8004d24 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe7b 	bl	8002080 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800238a:	2201      	movs	r2, #1
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <nRF24_FlushTX+0x30>)
 8002390:	f002 fcc8 	bl	8004d24 <HAL_GPIO_WritePin>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40020800 	.word	0x40020800

080023a0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80023aa:	f7ff ff53 	bl	8002254 <nRF24_ReadConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	f043 0308 	orr.w	r3, r3, #8
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e003      	b.n	80023ca <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	f023 0308 	bic.w	r3, r3, #8
 80023c8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff49 	bl	8002264 <nRF24_WriteConfig>
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80023e4:	f7ff ff36 	bl	8002254 <nRF24_ReadConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d104      	bne.n	80023fc <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e003      	b.n	8002404 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff2c 	bl	8002264 <nRF24_WriteConfig>
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	460a      	mov	r2, r1
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	4613      	mov	r3, r2
 8002422:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	b25a      	sxtb	r2, r3
 800242a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	b25b      	sxtb	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b25b      	sxtb	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	2004      	movs	r0, #4
 800243e:	f7ff fe93 	bl	8002168 <nRF24_WriteRegister>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	2005      	movs	r0, #5
 8002460:	f7ff fe82 	bl	8002168 <nRF24_WriteRegister>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	460a      	mov	r2, r1
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	4613      	mov	r3, r2
 800247a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d901      	bls.n	8002486 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002482:	2305      	movs	r3, #5
 8002484:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002486:	2002      	movs	r0, #2
 8002488:	f7ff fe26 	bl	80020d8 <nRF24_ReadRegister>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002490:	79bb      	ldrb	r3, [r7, #6]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10a      	bne.n	80024ac <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2201      	movs	r2, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	b25a      	sxtb	r2, r3
 80024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e00b      	b.n	80024c4 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	b25a      	sxtb	r2, r3
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	4013      	ands	r3, r2
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4619      	mov	r1, r3
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff fe4d 	bl	8002168 <nRF24_WriteRegister>
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	460a      	mov	r2, r1
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	4613      	mov	r3, r2
 80024e4:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d901      	bls.n	80024f0 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80024ec:	2305      	movs	r3, #5
 80024ee:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff fdf1 	bl	80020d8 <nRF24_ReadRegister>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10a      	bne.n	8002516 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2201      	movs	r2, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	b25a      	sxtb	r2, r3
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4313      	orrs	r3, r2
 8002510:	b25b      	sxtb	r3, r3
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e00b      	b.n	800252e <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2201      	movs	r2, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	b25b      	sxtb	r3, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	b25a      	sxtb	r2, r3
 8002524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002528:	4013      	ands	r3, r2
 800252a:	b25b      	sxtb	r3, r3
 800252c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4619      	mov	r1, r3
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff fe18 	bl	8002168 <nRF24_WriteRegister>
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d901      	bls.n	8002554 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002550:	2305      	movs	r3, #5
 8002552:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d801      	bhi.n	800255e <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800255a:	2303      	movs	r3, #3
 800255c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	3b02      	subs	r3, #2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	4619      	mov	r1, r3
 800256c:	2003      	movs	r0, #3
 800256e:	f7ff fdfb 	bl	8002168 <nRF24_WriteRegister>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	6039      	str	r1, [r7, #0]
 8002584:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <nRF24_SetRXAddress+0x18>
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d11d      	bne.n	80025ce <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e00d      	b.n	80025b4 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	441a      	add	r2, r3
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	f1c3 0302 	rsb	r3, r3, #2
 80025a4:	7812      	ldrb	r2, [r2, #0]
 80025a6:	3310      	adds	r3, #16
 80025a8:	443b      	add	r3, r7
 80025aa:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d9ee      	bls.n	8002598 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	330a      	adds	r3, #10
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f107 010c 	add.w	r1, r7, #12
 80025c4:	2203      	movs	r2, #3
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fdf4 	bl	80021b4 <nRF24_WriteRegisters>
	{
 80025cc:	e00a      	b.n	80025e4 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	330a      	adds	r3, #10
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3302      	adds	r3, #2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7ff fdc3 	bl	8002168 <nRF24_WriteRegister>
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	2203      	movs	r2, #3
 80025fa:	4619      	mov	r1, r3
 80025fc:	200a      	movs	r0, #10
 80025fe:	f7ff fd8f 	bl	8002120 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e00c      	b.n	8002622 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	f1c3 0302 	rsb	r3, r3, #2
 8002610:	3210      	adds	r2, #16
 8002612:	443a      	add	r2, r7
 8002614:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002618:	4a16      	ldr	r2, [pc, #88]	; (8002674 <nRF24_SetTXAddress+0x88>)
 800261a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	3301      	adds	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d9ef      	bls.n	8002608 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e00d      	b.n	800264a <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	441a      	add	r2, r3
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	f1c3 0302 	rsb	r3, r3, #2
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	3310      	adds	r3, #16
 800263e:	443b      	add	r3, r7
 8002640:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	3301      	adds	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d9ee      	bls.n	800262e <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2203      	movs	r2, #3
 8002656:	4619      	mov	r1, r3
 8002658:	200a      	movs	r0, #10
 800265a:	f7ff fdab 	bl	80021b4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	2203      	movs	r2, #3
 8002664:	4619      	mov	r1, r3
 8002666:	2010      	movs	r0, #16
 8002668:	f7ff fda4 	bl	80021b4 <nRF24_WriteRegisters>

}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200004f0 	.word	0x200004f0

08002678 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800267e:	f7ff fe44 	bl	800230a <nRF24_ReadStatus>
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800268c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe42 	bl	800231a <nRF24_WriteStatus>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80026a8:	2060      	movs	r0, #96	; 0x60
 80026aa:	f7ff fd15 	bl	80020d8 <nRF24_ReadRegister>
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d906      	bls.n	80026c6 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 80026b8:	f7ff fe3e 	bl	8002338 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80026bc:	2002      	movs	r0, #2
 80026be:	f7ff fcd1 	bl	8002064 <nRF24_Delay_ms>
        return 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80026da:	f7ff fdbb 	bl	8002254 <nRF24_ReadConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e003      	b.n	80026fa <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fdb1 	bl	8002264 <nRF24_WriteConfig>
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002714:	f7ff fd9e 	bl	8002254 <nRF24_ReadConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	f043 0320 	orr.w	r3, r3, #32
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e003      	b.n	8002734 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	f023 0320 	bic.w	r3, r3, #32
 8002732:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fd94 	bl	8002264 <nRF24_WriteConfig>
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800274e:	f7ff fd81 	bl	8002254 <nRF24_ReadConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	f043 0310 	orr.w	r3, r3, #16
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e003      	b.n	800276e <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	f023 0310 	bic.w	r3, r3, #16
 800276c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fd77 	bl	8002264 <nRF24_WriteConfig>
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	461a      	mov	r2, r3
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	20a0      	movs	r0, #160	; 0xa0
 8002792:	f7ff fd0f 	bl	80021b4 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80027a6:	2201      	movs	r2, #1
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <nRF24_WaitTX+0x4c>)
 80027ac:	f002 faba 	bl	8004d24 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff fc57 	bl	8002064 <nRF24_Delay_ms>
	NRF24_CE_LOW;
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	480c      	ldr	r0, [pc, #48]	; (80027ec <nRF24_WaitTX+0x4c>)
 80027bc:	f002 fab2 	bl	8004d24 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff fc4f 	bl	8002064 <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 80027c6:	f7ff fda0 	bl	800230a <nRF24_ReadStatus>
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <nRF24_WaitTX+0x42>
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ee      	beq.n	80027c0 <nRF24_WaitTX+0x20>

}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40020800 	.word	0x40020800

080027f0 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 80027fa:	f7ff ff50 	bl	800269e <nRF24_GetDynamicPayloadSize>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	2061      	movs	r0, #97	; 0x61
 8002810:	f7ff fc86 	bl	8002120 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d901      	bls.n	8002832 <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 800282e:	2301      	movs	r3, #1
 8002830:	e007      	b.n	8002842 <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffa1 	bl	800277e <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 800283c:	f7ff ffb0 	bl	80027a0 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <nRF24_IRQ_Handler+0x14>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	200004f6 	.word	0x200004f6

08002864 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <nRF24_IRQ_Read+0x7c>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d130      	bne.n	80028d6 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <nRF24_IRQ_Read+0x7c>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 800287a:	f7ff fd46 	bl	800230a <nRF24_ReadStatus>
 800287e:	4603      	mov	r3, r0
 8002880:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8002886:	79bb      	ldrb	r3, [r7, #6]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <nRF24_IRQ_Read+0x80>)
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289c:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 800289e:	79bb      	ldrb	r3, [r7, #6]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <nRF24_IRQ_Read+0x84>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <nRF24_IRQ_Read+0x88>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fd22 	bl	800231a <nRF24_WriteStatus>
	}
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200004f6 	.word	0x200004f6
 80028e4:	200004f3 	.word	0x200004f3
 80028e8:	200004f4 	.word	0x200004f4
 80028ec:	200004f5 	.word	0x200004f5

080028f0 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 80028f4:	f7ff ffb6 	bl	8002864 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <nRF24_Event+0x44>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002900:	f7ff f904 	bl	8001b0c <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <nRF24_Event+0x44>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <nRF24_Event+0x48>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002912:	f7ff f8e9 	bl	8001ae8 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <nRF24_Event+0x48>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <nRF24_Event+0x4c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002924:	f7ff f90c 	bl	8001b40 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <nRF24_Event+0x4c>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
	}
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200004f3 	.word	0x200004f3
 8002938:	200004f4 	.word	0x200004f4
 800293c:	200004f5 	.word	0x200004f5

08002940 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002948:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <nRF24_Init+0xc4>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	482d      	ldr	r0, [pc, #180]	; (8002a08 <nRF24_Init+0xc8>)
 8002954:	f002 f9e6 	bl	8004d24 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002958:	2201      	movs	r2, #1
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	482a      	ldr	r0, [pc, #168]	; (8002a08 <nRF24_Init+0xc8>)
 800295e:	f002 f9e1 	bl	8004d24 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002962:	2005      	movs	r0, #5
 8002964:	f7ff fb7e 	bl	8002064 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002968:	2003      	movs	r0, #3
 800296a:	f7ff fc89 	bl	8002280 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800296e:	2002      	movs	r0, #2
 8002970:	f7ff fca5 	bl	80022be <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002974:	2001      	movs	r0, #1
 8002976:	f7ff fd13 	bl	80023a0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800297a:	2000      	movs	r0, #0
 800297c:	f7ff fd2d 	bl	80023da <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002980:	2107      	movs	r1, #7
 8002982:	2004      	movs	r0, #4
 8002984:	f7ff fd46 	bl	8002414 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002988:	201d      	movs	r0, #29
 800298a:	f7ff fba5 	bl	80020d8 <nRF24_ReadRegister>
 800298e:	4603      	mov	r3, r0
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	201d      	movs	r0, #29
 800299a:	f7ff fbe5 	bl	8002168 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800299e:	213f      	movs	r1, #63	; 0x3f
 80029a0:	201c      	movs	r0, #28
 80029a2:	f7ff fbe1 	bl	8002168 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80029a6:	200a      	movs	r0, #10
 80029a8:	f7ff fd4f 	bl	800244a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80029ac:	2101      	movs	r1, #1
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7ff fd5c 	bl	800246c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80029b4:	2101      	movs	r1, #1
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff fd8d 	bl	80024d6 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80029bc:	2003      	movs	r0, #3
 80029be:	f7ff fdbf 	bl	8002540 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7ff fb4e 	bl	8002064 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f7ff fe81 	bl	80026d0 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7ff fe9b 	bl	800270a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff feb5 	bl	8002744 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fb42 	bl	8002064 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80029e0:	f7ff fe4a 	bl	8002678 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 80029e4:	201d      	movs	r0, #29
 80029e6:	f7ff fb77 	bl	80020d8 <nRF24_ReadRegister>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	201d      	movs	r0, #29
 80029f6:	f7ff fbb7 	bl	8002168 <nRF24_WriteRegister>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200004ec 	.word	0x200004ec
 8002a08:	40020800 	.word	0x40020800

08002a0c <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 8002a10:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <MenuTaskInit+0x2c>)
 8002a12:	490a      	ldr	r1, [pc, #40]	; (8002a3c <MenuTaskInit+0x30>)
 8002a14:	2004      	movs	r0, #4
 8002a16:	f7fe fb53 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <MenuTaskInit+0x30>)
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe fb4e 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, Menu_Back, NULL);
 8002a24:	2200      	movs	r2, #0
 8002a26:	4904      	ldr	r1, [pc, #16]	; (8002a38 <MenuTaskInit+0x2c>)
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f7fe fb49 	bl	80010c0 <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 8002a2e:	f7ff f98f 	bl	8001d50 <Menu_RefreshScreen>
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	08001fd5 	.word	0x08001fd5
 8002a3c:	08001f81 	.word	0x08001f81

08002a40 <MenuTask>:

static void MenuTask(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 8002a4a:	f7fe faf1 	bl	8001030 <Inputs_GetEncoderCount>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	dd02      	ble.n	8002a60 <MenuTask+0x20>
	{
		Menu_Next();
 8002a5a:	f7ff fa2f 	bl	8001ebc <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 8002a5e:	e005      	b.n	8002a6c <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da01      	bge.n	8002a6c <MenuTask+0x2c>
		Menu_Prev();
 8002a68:	f7ff fa58 	bl	8001f1c <Menu_Prev>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <SimpleScheduler>:

void SimpleScheduler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 8002a7a:	f7fe ffe1 	bl	8001a40 <Radio_Process>

	if(0 == StartupInitFlag)
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <SimpleScheduler+0x78>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <SimpleScheduler+0x1c>
	{
		MenuTaskInit();								//Init for menu
 8002a86:	f7ff ffc1 	bl	8002a0c <MenuTaskInit>
		StartupInitFlag = 1;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <SimpleScheduler+0x78>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
	}

	Inputs_ButtonsRoutine();
 8002a90:	f7fe faf8 	bl	8001084 <Inputs_ButtonsRoutine>
	SubProgramStatus = Programs_PerformProgram();
 8002a94:	f7fd fff2 	bl	8000a7c <Programs_PerformProgram>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d106      	bne.n	8002ab0 <SimpleScheduler+0x3c>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002aa2:	f7fd ffd9 	bl	8000a58 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002aa6:	f7fe fb51 	bl	800114c <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002aaa:	f7ff ffaf 	bl	8002a0c <MenuTaskInit>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
		MenuTaskInit(); 							//Init for menu again
	}
}
 8002aae:	e018      	b.n	8002ae2 <SimpleScheduler+0x6e>
	else if(SubProgramStatus == NO_PROGRAM_SET)		//if there is no pointer to program, perform menu task
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <SimpleScheduler+0x48>
		MenuTask();
 8002ab6:	f7ff ffc3 	bl	8002a40 <MenuTask>
}
 8002aba:	e012      	b.n	8002ae2 <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_LAUNCH_ERROR)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d106      	bne.n	8002ad0 <SimpleScheduler+0x5c>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002ac2:	f7fd ffc9 	bl	8000a58 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002ac6:	f7fe fb41 	bl	800114c <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002aca:	f7ff ff9f 	bl	8002a0c <MenuTaskInit>
}
 8002ace:	e008      	b.n	8002ae2 <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_EXIT_ERROR)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b07      	cmp	r3, #7
 8002ad4:	d105      	bne.n	8002ae2 <SimpleScheduler+0x6e>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002ad6:	f7fd ffbf 	bl	8000a58 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002ada:	f7fe fb37 	bl	800114c <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002ade:	f7ff ff95 	bl	8002a0c <MenuTaskInit>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200004f7 	.word	0x200004f7

08002af0 <Radio_NewCommandReceivedCallback>:
//
//
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
	Parser_Controller(command, length);
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7fe fb4b 	bl	800119c <Parser_Controller>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b16:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <MX_SPI2_Init+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b44:	2218      	movs	r2, #24
 8002b46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b5c:	220a      	movs	r2, #10
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b60:	4804      	ldr	r0, [pc, #16]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b62:	f003 f9ef 	bl	8005f44 <HAL_SPI_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b6c:	f7ff f8ea 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200004f8 	.word	0x200004f8
 8002b78:	40003800 	.word	0x40003800

08002b7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_SPI_MspInit+0x84>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d12c      	bne.n	8002bf8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002bd6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002be8:	2305      	movs	r3, #5
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <HAL_SPI_MspInit+0x8c>)
 8002bf4:	f001 fefa 	bl	80049ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40003800 	.word	0x40003800
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400

08002c0c <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af04      	add	r7, sp, #16
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <OLED_SendCmdSequence+0x34>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2264      	movs	r2, #100	; 0x64
 8002c22:	9202      	str	r2, [sp, #8]
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2178      	movs	r1, #120	; 0x78
 8002c30:	f002 f9ee 	bl	8005010 <HAL_I2C_Mem_Write>
 8002c34:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000550 	.word	0x20000550

08002c44 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af04      	add	r7, sp, #16
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <OLED_SendData+0x30>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	2364      	movs	r3, #100	; 0x64
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2301      	movs	r3, #1
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	2178      	movs	r1, #120	; 0x78
 8002c66:	f002 f9d3 	bl	8005010 <HAL_I2C_Mem_Write>
 8002c6a:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000550 	.word	0x20000550

08002c78 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <OLED_Init+0x28>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 8002c86:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <OLED_Init+0x2c>)
 8002c88:	f000 f916 	bl	8002eb8 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <OLED_Init+0x30>)
 8002c90:	f7ff ffbc 	bl	8002c0c <OLED_SendCmdSequence>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000550 	.word	0x20000550
 8002ca4:	080086a0 	.word	0x080086a0
 8002ca8:	2000016c 	.word	0x2000016c

08002cac <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d802      	bhi.n	8002ccc <OLED_SetDeviceCursor+0x20>
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d901      	bls.n	8002cd0 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e01f      	b.n	8002d10 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0310 	orr.w	r3, r3, #16
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002cee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	2103      	movs	r1, #3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff7f 	bl	8002c0c <OLED_SendCmdSequence>

	return Status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460a      	mov	r2, r1
 8002d22:	71fb      	strb	r3, [r7, #7]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db02      	blt.n	8002d36 <OLED_MoveCursor+0x1e>
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	2b3f      	cmp	r3, #63	; 0x3f
 8002d34:	d901      	bls.n	8002d3a <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00b      	b.n	8002d52 <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <OLED_MoveCursor+0x48>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <OLED_MoveCursor+0x48>)
 8002d42:	79bb      	ldrb	r3, [r7, #6]
 8002d44:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002d46:	79bb      	ldrb	r3, [r7, #6]
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <OLED_MoveCursor+0x48>)
 8002d4e:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000554 	.word	0x20000554

08002d64 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
 8002d70:	4613      	mov	r3, r2
 8002d72:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e04f      	b.n	8002e1a <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002d7a:	78bb      	ldrb	r3, [r7, #2]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d116      	bne.n	8002dae <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002d80:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002d88:	789b      	ldrb	r3, [r3, #2]
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <OLED_WriteToBuffer+0xcc>)
 8002d90:	5cd1      	ldrb	r1, [r2, r3]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002d9e:	789b      	ldrb	r3, [r3, #2]
 8002da0:	01db      	lsls	r3, r3, #7
 8002da2:	4403      	add	r3, r0
 8002da4:	430a      	orrs	r2, r1
 8002da6:	b2d1      	uxtb	r1, r2
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <OLED_WriteToBuffer+0xcc>)
 8002daa:	54d1      	strb	r1, [r2, r3]
 8002dac:	e020      	b.n	8002df0 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002dae:	78bb      	ldrb	r3, [r7, #2]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11b      	bne.n	8002dec <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	01db      	lsls	r3, r3, #7
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <OLED_WriteToBuffer+0xcc>)
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
 8002dc6:	b25a      	sxtb	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b25a      	sxtb	r2, r3
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002dde:	789b      	ldrb	r3, [r3, #2]
 8002de0:	01db      	lsls	r3, r3, #7
 8002de2:	440b      	add	r3, r1
 8002de4:	b2d1      	uxtb	r1, r2
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <OLED_WriteToBuffer+0xcc>)
 8002de8:	54d1      	strb	r1, [r2, r3]
 8002dea:	e001      	b.n	8002df0 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <OLED_WriteToBuffer+0xc8>)
 8002dfa:	7852      	ldrb	r2, [r2, #1]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff8a 	bl	8002d18 <OLED_MoveCursor>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00a      	b.n	8002e24 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3301      	adds	r3, #1
 8002e12:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	3301      	adds	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d3ab      	bcc.n	8002d7a <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000554 	.word	0x20000554
 8002e30:	20000560 	.word	0x20000560

08002e34 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	71bb      	strb	r3, [r7, #6]
 8002e42:	e019      	b.n	8002e78 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002e44:	79bb      	ldrb	r3, [r7, #6]
 8002e46:	4619      	mov	r1, r3
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7ff ff2f 	bl	8002cac <OLED_SetDeviceCursor>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8002e58:	79bb      	ldrb	r3, [r7, #6]
 8002e5a:	01db      	lsls	r3, r3, #7
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <OLED_SendBuffer+0x54>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff feee 	bl	8002c44 <OLED_SendData>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8002e72:	79bb      	ldrb	r3, [r7, #6]
 8002e74:	3301      	adds	r3, #1
 8002e76:	71bb      	strb	r3, [r7, #6]
 8002e78:	79bb      	ldrb	r3, [r7, #6]
 8002e7a:	2b07      	cmp	r3, #7
 8002e7c:	d9e2      	bls.n	8002e44 <OLED_SendBuffer+0x10>
	}
	return Status;
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000560 	.word	0x20000560

08002e8c <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4803      	ldr	r0, [pc, #12]	; (8002eb4 <OLED_ClearBuffer+0x28>)
 8002ea6:	f004 fd5d 	bl	8007964 <memset>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000560 	.word	0x20000560

08002eb8 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3302      	adds	r3, #2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002ed0:	7bbb      	ldrb	r3, [r7, #14]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d802      	bhi.n	8002edc <OLED_ChangeFont+0x24>
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d901      	bls.n	8002ee0 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e00e      	b.n	8002efe <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <OLED_ChangeFont+0x54>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <OLED_ChangeFont+0x54>)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002eec:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <OLED_ChangeFont+0x54>)
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3303      	adds	r3, #3
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <OLED_ChangeFont+0x54>)
 8002efa:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000558 	.word	0x20000558

08002f10 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	71fb      	strb	r3, [r7, #7]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d901      	bls.n	8002f2e <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06f      	b.n	800300e <OLED_WriteChar+0xfe>
	}
	switch(character)
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b0a      	cmp	r3, #10
 8002f32:	d009      	beq.n	8002f48 <OLED_WriteChar+0x38>
 8002f34:	2b0d      	cmp	r3, #13
 8002f36:	d113      	bne.n	8002f60 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8002f38:	4b37      	ldr	r3, [pc, #220]	; (8003018 <OLED_WriteChar+0x108>)
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7ff feea 	bl	8002d18 <OLED_MoveCursor>
 8002f44:	4603      	mov	r3, r0
 8002f46:	e062      	b.n	800300e <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8002f48:	4b33      	ldr	r3, [pc, #204]	; (8003018 <OLED_WriteChar+0x108>)
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	4b32      	ldr	r3, [pc, #200]	; (8003018 <OLED_WriteChar+0x108>)
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	3308      	adds	r3, #8
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7ff fede 	bl	8002d18 <OLED_MoveCursor>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	e056      	b.n	800300e <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <OLED_WriteChar+0x10c>)
 8002f64:	7912      	ldrb	r2, [r2, #4]
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <OLED_WriteChar+0x10c>)
 8002f6c:	795b      	ldrb	r3, [r3, #5]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	fb12 f303 	smulbb	r3, r2, r3
 8002f74:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <OLED_WriteChar+0x10c>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4413      	add	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002f82:	2300      	movs	r3, #0
 8002f84:	75bb      	strb	r3, [r7, #22]
 8002f86:	e00c      	b.n	8002fa2 <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8002f88:	7dbb      	ldrb	r3, [r7, #22]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	3318      	adds	r3, #24
 8002f90:	443b      	add	r3, r7
 8002f92:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002f9c:	7dbb      	ldrb	r3, [r7, #22]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	75bb      	strb	r3, [r7, #22]
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <OLED_WriteChar+0x10c>)
 8002fa4:	795b      	ldrb	r3, [r3, #5]
 8002fa6:	7dba      	ldrb	r2, [r7, #22]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ed      	bcc.n	8002f88 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <OLED_WriteChar+0x10c>)
 8002fae:	7959      	ldrb	r1, [r3, #5]
 8002fb0:	79ba      	ldrb	r2, [r7, #6]
 8002fb2:	f107 0308 	add.w	r3, r7, #8
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fed4 	bl	8002d64 <OLED_WriteToBuffer>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <OLED_WriteChar+0x108>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <OLED_WriteChar+0x10c>)
 8002fce:	795b      	ldrb	r3, [r3, #5]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd4:	dd1a      	ble.n	800300c <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <OLED_WriteChar+0x108>)
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fe99 	bl	8002d18 <OLED_MoveCursor>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	75fb      	strb	r3, [r7, #23]
 8002ff0:	e00c      	b.n	800300c <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <OLED_WriteChar+0x108>)
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7ff fe8b 	bl	8002d18 <OLED_MoveCursor>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	4313      	orrs	r3, r2
 800300a:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000554 	.word	0x20000554
 800301c:	20000558 	.word	0x20000558

08003020 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d910      	bls.n	8003058 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e013      	b.n	8003062 <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff64 	bl	8002f10 <OLED_WriteChar>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	4313      	orrs	r3, r2
 8003050:	73fb      	strb	r3, [r7, #15]
		String++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3301      	adds	r3, #1
 8003056:	607b      	str	r3, [r7, #4]
	while(*String)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ec      	bne.n	800303a <OLED_WriteString+0x1a>
	}
	return Status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <OLED_WriteInt>:

OLED_Status OLED_WriteInt(int Value, uint8_t color)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
	if(color > 1)
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d901      	bls.n	8003082 <OLED_WriteInt+0x16>
	{
		return OLED_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00e      	b.n	80030a0 <OLED_WriteInt+0x34>
	}

	char Buffer[5];
	sprintf(Buffer,"%d",Value);
 8003082:	f107 0308 	add.w	r3, r7, #8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <OLED_WriteInt+0x3c>)
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fb72 	bl	8007774 <siprintf>
	return OLED_WriteString(Buffer, color);
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	f107 0308 	add.w	r3, r7, #8
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffc1 	bl	8003020 <OLED_WriteString>
 800309e:	4603      	mov	r3, r0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	0800869c 	.word	0x0800869c

080030ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_MspInit+0x4c>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <HAL_MspInit+0x4c>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_MspInit+0x4c>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_MspInit+0x4c>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_MspInit+0x4c>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_MspInit+0x4c>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <NMI_Handler+0x4>

08003102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <HardFault_Handler+0x4>

08003108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <MemManage_Handler+0x4>

0800310e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <BusFault_Handler+0x4>

08003114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <UsageFault_Handler+0x4>

0800311a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003148:	f000 fa4c 	bl	80035e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <ADC_IRQHandler+0x10>)
 8003156:	f000 facc 	bl	80036f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000214 	.word	0x20000214

08003164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800316a:	f003 ff83 	bl	8007074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200009ac 	.word	0x200009ac

08003178 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <SPI2_IRQHandler+0x10>)
 800317e:	f003 fb59 	bl	8006834 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200004f8 	.word	0x200004f8

0800318c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8003190:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003194:	f001 fde0 	bl	8004d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <DMA2_Stream0_IRQHandler+0x10>)
 80031a2:	f001 f9b9 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000025c 	.word	0x2000025c

080031b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e00a      	b.n	80031d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031c2:	f3af 8000 	nop.w
 80031c6:	4601      	mov	r1, r0
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	60ba      	str	r2, [r7, #8]
 80031ce:	b2ca      	uxtb	r2, r1
 80031d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3301      	adds	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	dbf0      	blt.n	80031c2 <_read+0x12>
  }

  return len;
 80031e0:	687b      	ldr	r3, [r7, #4]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e009      	b.n	8003210 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	60ba      	str	r2, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fd81 	bl	8001d0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	3301      	adds	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	dbf1      	blt.n	80031fc <_write+0x12>
  }
  return len;
 8003218:	687b      	ldr	r3, [r7, #4]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <_close>:

int _close(int file)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800324a:	605a      	str	r2, [r3, #4]
  return 0;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <_isatty>:

int _isatty(int file)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <_sbrk+0x5c>)
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <_sbrk+0x60>)
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <_sbrk+0x64>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <_sbrk+0x64>)
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <_sbrk+0x68>)
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <_sbrk+0x64>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d207      	bcs.n	80032cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032bc:	f004 fba0 	bl	8007a00 <__errno>
 80032c0:	4603      	mov	r3, r0
 80032c2:	220c      	movs	r2, #12
 80032c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	e009      	b.n	80032e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <_sbrk+0x64>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <_sbrk+0x64>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <_sbrk+0x64>)
 80032dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032de:	68fb      	ldr	r3, [r7, #12]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20020000 	.word	0x20020000
 80032ec:	00000400 	.word	0x00000400
 80032f0:	20000960 	.word	0x20000960
 80032f4:	20000b48 	.word	0x20000b48

080032f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <SystemInit+0x20>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	4a05      	ldr	r2, [pc, #20]	; (8003318 <SystemInit+0x20>)
 8003304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08c      	sub	sp, #48	; 0x30
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fb1a 	bl	8007964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <MX_TIM3_Init+0xa0>)
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <MX_TIM3_Init+0xa4>)
 800333c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <MX_TIM3_Init+0xa0>)
 8003340:	2200      	movs	r2, #0
 8003342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <MX_TIM3_Init+0xa0>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <MX_TIM3_Init+0xa0>)
 800334c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003350:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <MX_TIM3_Init+0xa0>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <MX_TIM3_Init+0xa0>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800335e:	2303      	movs	r3, #3
 8003360:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003366:	2301      	movs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003376:	2301      	movs	r3, #1
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	4619      	mov	r1, r3
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <MX_TIM3_Init+0xa0>)
 800338a:	f003 fd3f 	bl	8006e0c <HAL_TIM_Encoder_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003394:	f7fe fcd6 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_TIM3_Init+0xa0>)
 80033a6:	f004 f845 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80033b0:	f7fe fcc8 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	3730      	adds	r7, #48	; 0x30
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000964 	.word	0x20000964
 80033c0:	40000400 	.word	0x40000400

080033c4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <MX_TIM10_Init+0x40>)
 80033ca:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <MX_TIM10_Init+0x44>)
 80033cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <MX_TIM10_Init+0x40>)
 80033d0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80033d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <MX_TIM10_Init+0x40>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <MX_TIM10_Init+0x40>)
 80033de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <MX_TIM10_Init+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <MX_TIM10_Init+0x40>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80033f0:	4804      	ldr	r0, [pc, #16]	; (8003404 <MX_TIM10_Init+0x40>)
 80033f2:	f003 fc61 	bl	8006cb8 <HAL_TIM_Base_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80033fc:	f7fe fca2 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200009ac 	.word	0x200009ac
 8003408:	40014400 	.word	0x40014400

0800340c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_TIM_Encoder_MspInit+0x84>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12b      	bne.n	8003486 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_TIM_Encoder_MspInit+0x88>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_TIM_Encoder_MspInit+0x88>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_TIM_Encoder_MspInit+0x88>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_TIM_Encoder_MspInit+0x88>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <HAL_TIM_Encoder_MspInit+0x88>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_TIM_Encoder_MspInit+0x88>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003466:	23c0      	movs	r3, #192	; 0xc0
 8003468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003472:	2300      	movs	r3, #0
 8003474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003476:	2302      	movs	r3, #2
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	4619      	mov	r1, r3
 8003480:	4805      	ldr	r0, [pc, #20]	; (8003498 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003482:	f001 fab3 	bl	80049ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003486:	bf00      	nop
 8003488:	3728      	adds	r7, #40	; 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40000400 	.word	0x40000400
 8003494:	40023800 	.word	0x40023800
 8003498:	40020000 	.word	0x40020000

0800349c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_TIM_Base_MspInit+0x48>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d115      	bne.n	80034da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_TIM_Base_MspInit+0x4c>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a0c      	ldr	r2, [pc, #48]	; (80034e8 <HAL_TIM_Base_MspInit+0x4c>)
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_TIM_Base_MspInit+0x4c>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2019      	movs	r0, #25
 80034d0:	f000 fec3 	bl	800425a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034d4:	2019      	movs	r0, #25
 80034d6:	f000 fedc 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40023800 	.word	0x40023800

080034ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034f0:	480d      	ldr	r0, [pc, #52]	; (8003528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034f2:	490e      	ldr	r1, [pc, #56]	; (800352c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034f4:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034f8:	e002      	b.n	8003500 <LoopCopyDataInit>

080034fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034fe:	3304      	adds	r3, #4

08003500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003504:	d3f9      	bcc.n	80034fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003506:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003508:	4c0b      	ldr	r4, [pc, #44]	; (8003538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800350c:	e001      	b.n	8003512 <LoopFillZerobss>

0800350e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800350e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003510:	3204      	adds	r2, #4

08003512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003514:	d3fb      	bcc.n	800350e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003516:	f7ff feef 	bl	80032f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800351a:	f004 fa77 	bl	8007a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800351e:	f7fe fb43 	bl	8001ba8 <main>
  bx  lr    
 8003522:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800352c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003530:	08008948 	.word	0x08008948
  ldr r2, =_sbss
 8003534:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003538:	20000b44 	.word	0x20000b44

0800353c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800353c:	e7fe      	b.n	800353c <DMA1_Stream0_IRQHandler>
	...

08003540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_Init+0x40>)
 800354a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_Init+0x40>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_Init+0x40>)
 8003556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800355a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_Init+0x40>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a07      	ldr	r2, [pc, #28]	; (8003580 <HAL_Init+0x40>)
 8003562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003568:	2003      	movs	r0, #3
 800356a:	f000 fe6b 	bl	8004244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800356e:	200f      	movs	r0, #15
 8003570:	f000 f808 	bl	8003584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003574:	f7ff fd9a 	bl	80030ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023c00 	.word	0x40023c00

08003584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_InitTick+0x54>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_InitTick+0x58>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359a:	fbb3 f3f1 	udiv	r3, r3, r1
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fe83 	bl	80042ae <HAL_SYSTICK_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00e      	b.n	80035d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d80a      	bhi.n	80035ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b8:	2200      	movs	r2, #0
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f000 fe4b 	bl	800425a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c4:	4a06      	ldr	r2, [pc, #24]	; (80035e0 <HAL_InitTick+0x5c>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	2000017c 	.word	0x2000017c
 80035dc:	20000184 	.word	0x20000184
 80035e0:	20000180 	.word	0x20000180

080035e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x20>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x24>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_IncTick+0x24>)
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000184 	.word	0x20000184
 8003608:	200009f4 	.word	0x200009f4

0800360c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return uwTick;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_GetTick+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	200009f4 	.word	0x200009f4

08003624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7ff ffee 	bl	800360c <HAL_GetTick>
 8003630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d005      	beq.n	800364a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_Delay+0x44>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800364a:	bf00      	nop
 800364c:	f7ff ffde 	bl	800360c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	429a      	cmp	r2, r3
 800365a:	d8f7      	bhi.n	800364c <HAL_Delay+0x28>
  {
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000184 	.word	0x20000184

0800366c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e033      	b.n	80036ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fb66 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036b2:	f023 0302 	bic.w	r3, r3, #2
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fb68 	bl	8003d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
 80036da:	e001      	b.n	80036e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d049      	beq.n	80037bc <HAL_ADC_IRQHandler+0xca>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d046      	beq.n	80037bc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d12b      	bne.n	80037ac <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003758:	2b00      	cmp	r3, #0
 800375a:	d127      	bne.n	80037ac <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003774:	2b00      	cmp	r3, #0
 8003776:	d119      	bne.n	80037ac <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0220 	bic.w	r2, r2, #32
 8003786:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd fbdf 	bl	8000f70 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0212 	mvn.w	r2, #18
 80037ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d057      	beq.n	8003882 <HAL_ADC_IRQHandler+0x190>
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d054      	beq.n	8003882 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d139      	bne.n	8003872 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003816:	2b00      	cmp	r3, #0
 8003818:	d12b      	bne.n	8003872 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	d124      	bne.n	8003872 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11d      	bne.n	8003872 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fc0c 	bl	8004090 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 020c 	mvn.w	r2, #12
 8003880:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d017      	beq.n	80038c8 <HAL_ADC_IRQHandler+0x1d6>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d014      	beq.n	80038c8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10d      	bne.n	80038c8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f925 	bl	8003b08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0201 	mvn.w	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d015      	beq.n	800390a <HAL_ADC_IRQHandler+0x218>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	f043 0202 	orr.w	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0220 	mvn.w	r2, #32
 80038f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f90e 	bl	8003b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0220 	mvn.w	r2, #32
 8003908:	601a      	str	r2, [r3, #0]
  }
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_ADC_Start_DMA+0x1e>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ce      	b.n	8003ad0 <HAL_ADC_Start_DMA+0x1bc>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d018      	beq.n	800397a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <HAL_ADC_Start_DMA+0x1c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5f      	ldr	r2, [pc, #380]	; (8003adc <HAL_ADC_Start_DMA+0x1c8>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9a      	lsrs	r2, r3, #18
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800396c:	e002      	b.n	8003974 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	3b01      	subs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f9      	bne.n	800396e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003988:	d107      	bne.n	800399a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003998:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 8086 	bne.w	8003ab6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e8:	d106      	bne.n	80039f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f023 0206 	bic.w	r2, r3, #6
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
 80039f6:	e002      	b.n	80039fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_ADC_Start_DMA+0x1cc>)
 8003a08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <HAL_ADC_Start_DMA+0x1d0>)
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <HAL_ADC_Start_DMA+0x1d4>)
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	4a33      	ldr	r2, [pc, #204]	; (8003aec <HAL_ADC_Start_DMA+0x1d8>)
 8003a20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	334c      	adds	r3, #76	; 0x4c
 8003a56:	4619      	mov	r1, r3
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f000 fce2 	bl	8004424 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10f      	bne.n	8003a8c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d129      	bne.n	8003ace <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	e020      	b.n	8003ace <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_ADC_Start_DMA+0x1dc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d11b      	bne.n	8003ace <HAL_ADC_Start_DMA+0x1ba>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d114      	bne.n	8003ace <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	e00b      	b.n	8003ace <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0210 	orr.w	r2, r3, #16
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	2000017c 	.word	0x2000017c
 8003adc:	431bde83 	.word	0x431bde83
 8003ae0:	40012300 	.word	0x40012300
 8003ae4:	08003f8d 	.word	0x08003f8d
 8003ae8:	08004047 	.word	0x08004047
 8003aec:	08004063 	.word	0x08004063
 8003af0:	40012000 	.word	0x40012000

08003af4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1c>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e113      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x244>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b09      	cmp	r3, #9
 8003b5a:	d925      	bls.n	8003ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68d9      	ldr	r1, [r3, #12]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4413      	add	r3, r2
 8003b70:	3b1e      	subs	r3, #30
 8003b72:	2207      	movs	r2, #7
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	400a      	ands	r2, r1
 8003b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68d9      	ldr	r1, [r3, #12]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	4603      	mov	r3, r0
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4403      	add	r3, r0
 8003b9a:	3b1e      	subs	r3, #30
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e022      	b.n	8003bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6919      	ldr	r1, [r3, #16]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	400a      	ands	r2, r1
 8003bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6919      	ldr	r1, [r3, #16]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	4618      	mov	r0, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4403      	add	r3, r0
 8003be4:	409a      	lsls	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d824      	bhi.n	8003c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	3b05      	subs	r3, #5
 8003c08:	221f      	movs	r2, #31
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	400a      	ands	r2, r1
 8003c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	3b05      	subs	r3, #5
 8003c32:	fa00 f203 	lsl.w	r2, r0, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c3e:	e04c      	b.n	8003cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d824      	bhi.n	8003c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	3b23      	subs	r3, #35	; 0x23
 8003c5a:	221f      	movs	r2, #31
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43da      	mvns	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	400a      	ands	r2, r1
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	3b23      	subs	r3, #35	; 0x23
 8003c84:	fa00 f203 	lsl.w	r2, r0, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c90:	e023      	b.n	8003cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3b41      	subs	r3, #65	; 0x41
 8003ca4:	221f      	movs	r2, #31
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43da      	mvns	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	3b41      	subs	r3, #65	; 0x41
 8003cce:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_ADC_ConfigChannel+0x250>)
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a28      	ldr	r2, [pc, #160]	; (8003d84 <HAL_ADC_ConfigChannel+0x254>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10f      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x1d8>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b12      	cmp	r3, #18
 8003cee:	d10b      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_ADC_ConfigChannel+0x254>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d12b      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x23a>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_ADC_ConfigChannel+0x258>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <HAL_ADC_ConfigChannel+0x1f4>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b11      	cmp	r3, #17
 8003d22:	d122      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <HAL_ADC_ConfigChannel+0x258>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d111      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_ADC_ConfigChannel+0x25c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_ADC_ConfigChannel+0x260>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	0c9a      	lsrs	r2, r3, #18
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d5c:	e002      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f9      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40012300 	.word	0x40012300
 8003d84:	40012000 	.word	0x40012000
 8003d88:	10000012 	.word	0x10000012
 8003d8c:	2000017c 	.word	0x2000017c
 8003d90:	431bde83 	.word	0x431bde83

08003d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d9c:	4b79      	ldr	r3, [pc, #484]	; (8003f84 <ADC_Init+0x1f0>)
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <ADC_Init+0x1f4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	e00f      	b.n	8003e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0202 	bic.w	r2, r2, #2
 8003ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7e1b      	ldrb	r3, [r3, #24]
 8003eac:	005a      	lsls	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	3b01      	subs	r3, #1
 8003eec:	035a      	lsls	r2, r3, #13
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e007      	b.n	8003f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	051a      	lsls	r2, r3, #20
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f4a:	025a      	lsls	r2, r3, #9
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	029a      	lsls	r2, r3, #10
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012300 	.word	0x40012300
 8003f88:	0f000001 	.word	0x0f000001

08003f8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d13c      	bne.n	8004020 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d12b      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d127      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d119      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0220 	bic.w	r2, r2, #32
 8003ff2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7fc ffa9 	bl	8000f70 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800401e:	e00e      	b.n	800403e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff fd75 	bl	8003b1c <HAL_ADC_ErrorCallback>
}
 8004032:	e004      	b.n	800403e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff fd4d 	bl	8003af4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2240      	movs	r2, #64	; 0x40
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fd4a 	bl	8003b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <__NVIC_SetPriorityGrouping>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c0:	4013      	ands	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_GetPriorityGrouping>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <__NVIC_GetPriorityGrouping+0x18>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 0307 	and.w	r3, r3, #7
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <__NVIC_EnableIRQ>:
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	db0b      	blt.n	8004132 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <__NVIC_EnableIRQ+0x38>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2001      	movs	r0, #1
 800412a:	fa00 f202 	lsl.w	r2, r0, r2
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000e100 	.word	0xe000e100

08004144 <__NVIC_SetPriority>:
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	2b00      	cmp	r3, #0
 8004156:	db0a      	blt.n	800416e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	490c      	ldr	r1, [pc, #48]	; (8004190 <__NVIC_SetPriority+0x4c>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	440b      	add	r3, r1
 8004168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800416c:	e00a      	b.n	8004184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4908      	ldr	r1, [pc, #32]	; (8004194 <__NVIC_SetPriority+0x50>)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3b04      	subs	r3, #4
 800417c:	0112      	lsls	r2, r2, #4
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	440b      	add	r3, r1
 8004182:	761a      	strb	r2, [r3, #24]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000e100 	.word	0xe000e100
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <NVIC_EncodePriority>:
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	bf28      	it	cs
 80041b6:	2304      	movcs	r3, #4
 80041b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3304      	adds	r3, #4
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d902      	bls.n	80041c8 <NVIC_EncodePriority+0x30>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3b03      	subs	r3, #3
 80041c6:	e000      	b.n	80041ca <NVIC_EncodePriority+0x32>
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041cc:	f04f 32ff 	mov.w	r2, #4294967295
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	401a      	ands	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	43d9      	mvns	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	4313      	orrs	r3, r2
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <SysTick_Config>:
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004210:	d301      	bcc.n	8004216 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004212:	2301      	movs	r3, #1
 8004214:	e00f      	b.n	8004236 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <SysTick_Config+0x40>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800421e:	210f      	movs	r1, #15
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	f7ff ff8e 	bl	8004144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <SysTick_Config+0x40>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800422e:	4b04      	ldr	r3, [pc, #16]	; (8004240 <SysTick_Config+0x40>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010

08004244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff29 	bl	80040a4 <__NVIC_SetPriorityGrouping>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800426c:	f7ff ff3e 	bl	80040ec <__NVIC_GetPriorityGrouping>
 8004270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff ff8e 	bl	8004198 <NVIC_EncodePriority>
 800427c:	4602      	mov	r2, r0
 800427e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff5d 	bl	8004144 <__NVIC_SetPriority>
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800429c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff31 	bl	8004108 <__NVIC_EnableIRQ>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffa2 	bl	8004200 <SysTick_Config>
 80042bc:	4603      	mov	r3, r0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042d4:	f7ff f99a 	bl	800360c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e099      	b.n	8004418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004304:	e00f      	b.n	8004326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004306:	f7ff f981 	bl	800360c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b05      	cmp	r3, #5
 8004312:	d908      	bls.n	8004326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2203      	movs	r2, #3
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e078      	b.n	8004418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e8      	bne.n	8004306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_DMA_Init+0x158>)
 8004340:	4013      	ands	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	2b04      	cmp	r3, #4
 800437e:	d107      	bne.n	8004390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	4313      	orrs	r3, r2
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d117      	bne.n	80043ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fa91 	bl	80048f4 <DMA_CheckFifoParam>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043e6:	2301      	movs	r3, #1
 80043e8:	e016      	b.n	8004418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa48 	bl	8004888 <DMA_CalcBaseAndBitshift>
 80043f8:	4603      	mov	r3, r0
 80043fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	223f      	movs	r2, #63	; 0x3f
 8004402:	409a      	lsls	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	f010803f 	.word	0xf010803f

08004424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_DMA_Start_IT+0x26>
 8004446:	2302      	movs	r3, #2
 8004448:	e040      	b.n	80044cc <HAL_DMA_Start_IT+0xa8>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d12f      	bne.n	80044be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f9da 	bl	800482c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	223f      	movs	r2, #63	; 0x3f
 800447e:	409a      	lsls	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0216 	orr.w	r2, r2, #22
 8004492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0208 	orr.w	r2, r2, #8
 80044aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e005      	b.n	80044ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d004      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00c      	b.n	800450c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2205      	movs	r2, #5
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004524:	4b8e      	ldr	r3, [pc, #568]	; (8004760 <HAL_DMA_IRQHandler+0x248>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a8e      	ldr	r2, [pc, #568]	; (8004764 <HAL_DMA_IRQHandler+0x24c>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2208      	movs	r2, #8
 8004544:	409a      	lsls	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	2208      	movs	r2, #8
 8004572:	409a      	lsls	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f043 0201 	orr.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	2204      	movs	r2, #4
 80045c0:	409a      	lsls	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	2204      	movs	r2, #4
 80045de:	409a      	lsls	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f043 0204 	orr.w	r2, r3, #4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	2210      	movs	r2, #16
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d043      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03c      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	2210      	movs	r2, #16
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d024      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e01f      	b.n	8004688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
 8004658:	e016      	b.n	8004688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0208 	bic.w	r2, r2, #8
 8004676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2220      	movs	r2, #32
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 808f 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8087 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2220      	movs	r2, #32
 80046b0:	409a      	lsls	r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d136      	bne.n	8004730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0216 	bic.w	r2, r2, #22
 80046d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_DMA_IRQHandler+0x1da>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	223f      	movs	r2, #63	; 0x3f
 8004708:	409a      	lsls	r2, r3
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	2b00      	cmp	r3, #0
 8004724:	d07e      	beq.n	8004824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
        }
        return;
 800472e:	e079      	b.n	8004824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01d      	beq.n	800477a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	2b00      	cmp	r3, #0
 8004752:	d031      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e02c      	b.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
 800475e:	bf00      	nop
 8004760:	2000017c 	.word	0x2000017c
 8004764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	e01e      	b.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10f      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0210 	bic.w	r2, r2, #16
 8004796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d032      	beq.n	8004826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2205      	movs	r2, #5
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d307      	bcc.n	8004800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f2      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x2cc>
 80047fe:	e000      	b.n	8004802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
 8004822:	e000      	b.n	8004826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004824:	bf00      	nop
    }
  }
}
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d108      	bne.n	800486c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800486a:	e007      	b.n	800487c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3b10      	subs	r3, #16
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <DMA_CalcBaseAndBitshift+0x64>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <DMA_CalcBaseAndBitshift+0x68>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d909      	bls.n	80048ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	659a      	str	r2, [r3, #88]	; 0x58
 80048c8:	e007      	b.n	80048da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	aaaaaaab 	.word	0xaaaaaaab
 80048f0:	080088fc 	.word	0x080088fc

080048f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11f      	bne.n	800494e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d856      	bhi.n	80049c2 <DMA_CheckFifoParam+0xce>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <DMA_CheckFifoParam+0x28>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	0800492d 	.word	0x0800492d
 8004920:	0800493f 	.word	0x0800493f
 8004924:	0800492d 	.word	0x0800492d
 8004928:	080049c3 	.word	0x080049c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d046      	beq.n	80049c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e043      	b.n	80049c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004946:	d140      	bne.n	80049ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494c:	e03d      	b.n	80049ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	d121      	bne.n	800499c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b03      	cmp	r3, #3
 800495c:	d837      	bhi.n	80049ce <DMA_CheckFifoParam+0xda>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <DMA_CheckFifoParam+0x70>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004975 	.word	0x08004975
 8004968:	0800497b 	.word	0x0800497b
 800496c:	08004975 	.word	0x08004975
 8004970:	0800498d 	.word	0x0800498d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e030      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d025      	beq.n	80049d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498a:	e022      	b.n	80049d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004994:	d11f      	bne.n	80049d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800499a:	e01c      	b.n	80049d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d903      	bls.n	80049aa <DMA_CheckFifoParam+0xb6>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d003      	beq.n	80049b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049a8:	e018      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
      break;
 80049ae:	e015      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e00b      	b.n	80049da <DMA_CheckFifoParam+0xe6>
      break;
 80049c2:	bf00      	nop
 80049c4:	e00a      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e008      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049ca:	bf00      	nop
 80049cc:	e006      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
 80049d0:	e004      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;   
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
    }
  } 
  
  return status; 
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop

080049ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e159      	b.n	8004cbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	f040 8148 	bne.w	8004cb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d005      	beq.n	8004a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d130      	bne.n	8004aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	2203      	movs	r2, #3
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a74:	2201      	movs	r2, #1
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 0201 	and.w	r2, r3, #1
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d017      	beq.n	8004adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d123      	bne.n	8004b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	08da      	lsrs	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3208      	adds	r2, #8
 8004af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	220f      	movs	r2, #15
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	08da      	lsrs	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	69b9      	ldr	r1, [r7, #24]
 8004b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0203 	and.w	r2, r3, #3
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a2 	beq.w	8004cb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <HAL_GPIO_Init+0x2e8>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <HAL_GPIO_Init+0x2e8>)
 8004b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b80:	6453      	str	r3, [r2, #68]	; 0x44
 8004b82:	4b54      	ldr	r3, [pc, #336]	; (8004cd4 <HAL_GPIO_Init+0x2e8>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b8e:	4a52      	ldr	r2, [pc, #328]	; (8004cd8 <HAL_GPIO_Init+0x2ec>)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	3302      	adds	r3, #2
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	220f      	movs	r2, #15
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a49      	ldr	r2, [pc, #292]	; (8004cdc <HAL_GPIO_Init+0x2f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d019      	beq.n	8004bee <HAL_GPIO_Init+0x202>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a48      	ldr	r2, [pc, #288]	; (8004ce0 <HAL_GPIO_Init+0x2f4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_GPIO_Init+0x1fe>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a47      	ldr	r2, [pc, #284]	; (8004ce4 <HAL_GPIO_Init+0x2f8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00d      	beq.n	8004be6 <HAL_GPIO_Init+0x1fa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a46      	ldr	r2, [pc, #280]	; (8004ce8 <HAL_GPIO_Init+0x2fc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d007      	beq.n	8004be2 <HAL_GPIO_Init+0x1f6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a45      	ldr	r2, [pc, #276]	; (8004cec <HAL_GPIO_Init+0x300>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_GPIO_Init+0x1f2>
 8004bda:	2304      	movs	r3, #4
 8004bdc:	e008      	b.n	8004bf0 <HAL_GPIO_Init+0x204>
 8004bde:	2307      	movs	r3, #7
 8004be0:	e006      	b.n	8004bf0 <HAL_GPIO_Init+0x204>
 8004be2:	2303      	movs	r3, #3
 8004be4:	e004      	b.n	8004bf0 <HAL_GPIO_Init+0x204>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e002      	b.n	8004bf0 <HAL_GPIO_Init+0x204>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_GPIO_Init+0x204>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	f002 0203 	and.w	r2, r2, #3
 8004bf6:	0092      	lsls	r2, r2, #2
 8004bf8:	4093      	lsls	r3, r2
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c00:	4935      	ldr	r1, [pc, #212]	; (8004cd8 <HAL_GPIO_Init+0x2ec>)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	089b      	lsrs	r3, r3, #2
 8004c06:	3302      	adds	r3, #2
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c0e:	4b38      	ldr	r3, [pc, #224]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c32:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c38:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c5c:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cb0:	4a0f      	ldr	r2, [pc, #60]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	f67f aea2 	bls.w	8004a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	3724      	adds	r7, #36	; 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40013800 	.word	0x40013800
 8004cdc:	40020000 	.word	0x40020000
 8004ce0:	40020400 	.word	0x40020400
 8004ce4:	40020800 	.word	0x40020800
 8004ce8:	40020c00 	.word	0x40020c00
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40013c00 	.word	0x40013c00

08004cf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e001      	b.n	8004d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	807b      	strh	r3, [r7, #2]
 8004d30:	4613      	mov	r3, r2
 8004d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d34:	787b      	ldrb	r3, [r7, #1]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d3a:	887a      	ldrh	r2, [r7, #2]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d40:	e003      	b.n	8004d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d42:	887b      	ldrh	r3, [r7, #2]
 8004d44:	041a      	lsls	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	619a      	str	r2, [r3, #24]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc ffd5 	bl	8001d26 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40013c00 	.word	0x40013c00

08004d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e12b      	b.n	8004ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc fc5c 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dec:	f001 f896 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8004df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4a81      	ldr	r2, [pc, #516]	; (8004ffc <HAL_I2C_Init+0x274>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d807      	bhi.n	8004e0c <HAL_I2C_Init+0x84>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a80      	ldr	r2, [pc, #512]	; (8005000 <HAL_I2C_Init+0x278>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	bf94      	ite	ls
 8004e04:	2301      	movls	r3, #1
 8004e06:	2300      	movhi	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e006      	b.n	8004e1a <HAL_I2C_Init+0x92>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a7d      	ldr	r2, [pc, #500]	; (8005004 <HAL_I2C_Init+0x27c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bf94      	ite	ls
 8004e14:	2301      	movls	r3, #1
 8004e16:	2300      	movhi	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e0e7      	b.n	8004ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a78      	ldr	r2, [pc, #480]	; (8005008 <HAL_I2C_Init+0x280>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0c9b      	lsrs	r3, r3, #18
 8004e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4a6a      	ldr	r2, [pc, #424]	; (8004ffc <HAL_I2C_Init+0x274>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d802      	bhi.n	8004e5c <HAL_I2C_Init+0xd4>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	e009      	b.n	8004e70 <HAL_I2C_Init+0xe8>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	4a69      	ldr	r2, [pc, #420]	; (800500c <HAL_I2C_Init+0x284>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	099b      	lsrs	r3, r3, #6
 8004e6e:	3301      	adds	r3, #1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	495c      	ldr	r1, [pc, #368]	; (8004ffc <HAL_I2C_Init+0x274>)
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	d819      	bhi.n	8004ec4 <HAL_I2C_Init+0x13c>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1e59      	subs	r1, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_I2C_Init+0x138>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1e59      	subs	r1, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ebe:	e051      	b.n	8004f64 <HAL_I2C_Init+0x1dc>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	e04f      	b.n	8004f64 <HAL_I2C_Init+0x1dc>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d111      	bne.n	8004ef0 <HAL_I2C_Init+0x168>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1e58      	subs	r0, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	440b      	add	r3, r1
 8004eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ede:	3301      	adds	r3, #1
 8004ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e012      	b.n	8004f16 <HAL_I2C_Init+0x18e>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1e58      	subs	r0, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	0099      	lsls	r1, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f06:	3301      	adds	r3, #1
 8004f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Init+0x196>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e022      	b.n	8004f64 <HAL_I2C_Init+0x1dc>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10e      	bne.n	8004f44 <HAL_I2C_Init+0x1bc>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1e58      	subs	r0, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6859      	ldr	r1, [r3, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	440b      	add	r3, r1
 8004f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f42:	e00f      	b.n	8004f64 <HAL_I2C_Init+0x1dc>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1e58      	subs	r0, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	0099      	lsls	r1, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	6809      	ldr	r1, [r1, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6911      	ldr	r1, [r2, #16]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68d2      	ldr	r2, [r2, #12]
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	000186a0 	.word	0x000186a0
 8005000:	001e847f 	.word	0x001e847f
 8005004:	003d08ff 	.word	0x003d08ff
 8005008:	431bde83 	.word	0x431bde83
 800500c:	10624dd3 	.word	0x10624dd3

08005010 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4603      	mov	r3, r0
 8005020:	817b      	strh	r3, [r7, #10]
 8005022:	460b      	mov	r3, r1
 8005024:	813b      	strh	r3, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800502a:	f7fe faef 	bl	800360c <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	f040 80d9 	bne.w	80051f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2319      	movs	r3, #25
 8005044:	2201      	movs	r2, #1
 8005046:	496d      	ldr	r1, [pc, #436]	; (80051fc <HAL_I2C_Mem_Write+0x1ec>)
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f971 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005054:	2302      	movs	r3, #2
 8005056:	e0cc      	b.n	80051f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_I2C_Mem_Write+0x56>
 8005062:	2302      	movs	r3, #2
 8005064:	e0c5      	b.n	80051f2 <HAL_I2C_Mem_Write+0x1e2>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	d007      	beq.n	800508c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800509a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2221      	movs	r2, #33	; 0x21
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2240      	movs	r2, #64	; 0x40
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4a4d      	ldr	r2, [pc, #308]	; (8005200 <HAL_I2C_Mem_Write+0x1f0>)
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ce:	88f8      	ldrh	r0, [r7, #6]
 80050d0:	893a      	ldrh	r2, [r7, #8]
 80050d2:	8979      	ldrh	r1, [r7, #10]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	4603      	mov	r3, r0
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f890 	bl	8005204 <I2C_RequestMemoryWrite>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d052      	beq.n	8005190 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e081      	b.n	80051f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f9f2 	bl	80054dc <I2C_WaitOnTXEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d107      	bne.n	8005116 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e06b      	b.n	80051f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d11b      	bne.n	8005190 <HAL_I2C_Mem_Write+0x180>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d017      	beq.n	8005190 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1aa      	bne.n	80050ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f9de 	bl	800555e <I2C_WaitOnBTFFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d107      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e016      	b.n	80051f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	00100002 	.word	0x00100002
 8005200:	ffff0000 	.word	0xffff0000

08005204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2200      	movs	r2, #0
 8005236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f878 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005254:	d103      	bne.n	800525e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e05f      	b.n	8005322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005262:	897b      	ldrh	r3, [r7, #10]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	492d      	ldr	r1, [pc, #180]	; (800532c <I2C_RequestMemoryWrite+0x128>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8b0 	bl	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e04c      	b.n	8005322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	6a39      	ldr	r1, [r7, #32]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f91a 	bl	80054dc <I2C_WaitOnTXEFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d107      	bne.n	80052c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e02b      	b.n	8005322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d0:	893b      	ldrh	r3, [r7, #8]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	611a      	str	r2, [r3, #16]
 80052da:	e021      	b.n	8005320 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052dc:	893b      	ldrh	r3, [r7, #8]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ec:	6a39      	ldr	r1, [r7, #32]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f8f4 	bl	80054dc <I2C_WaitOnTXEFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00d      	beq.n	8005316 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d107      	bne.n	8005312 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e005      	b.n	8005322 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005316:	893b      	ldrh	r3, [r7, #8]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	00010002 	.word	0x00010002

08005330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005340:	e025      	b.n	800538e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d021      	beq.n	800538e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534a:	f7fe f95f 	bl	800360c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d116      	bne.n	800538e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e023      	b.n	80053d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d10d      	bne.n	80053b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	43da      	mvns	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4013      	ands	r3, r2
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bf0c      	ite	eq
 80053aa:	2301      	moveq	r3, #1
 80053ac:	2300      	movne	r3, #0
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	e00c      	b.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	43da      	mvns	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d0b6      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ec:	e051      	b.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fc:	d123      	bne.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005416:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f043 0204 	orr.w	r2, r3, #4
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e046      	b.n	80054d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d021      	beq.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544e:	f7fe f8dd 	bl	800360c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d116      	bne.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e020      	b.n	80054d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10c      	bne.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	43da      	mvns	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e00b      	b.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	43da      	mvns	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d18d      	bne.n	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e8:	e02d      	b.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f878 	bl	80055e0 <I2C_IsAcknowledgeFailed>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e02d      	b.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d021      	beq.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005502:	f7fe f883 	bl	800360c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	429a      	cmp	r2, r3
 8005510:	d302      	bcc.n	8005518 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d116      	bne.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e007      	b.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b80      	cmp	r3, #128	; 0x80
 8005552:	d1ca      	bne.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800556a:	e02d      	b.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f837 	bl	80055e0 <I2C_IsAcknowledgeFailed>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e02d      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d021      	beq.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7fe f842 	bl	800360c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d116      	bne.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e007      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d1ca      	bne.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f6:	d11b      	bne.n	8005630 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005600:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0204 	orr.w	r2, r3, #4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e267      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d075      	beq.n	800574a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800565e:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b04      	cmp	r3, #4
 8005668:	d00c      	beq.n	8005684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800566a:	4b85      	ldr	r3, [pc, #532]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005672:	2b08      	cmp	r3, #8
 8005674:	d112      	bne.n	800569c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005676:	4b82      	ldr	r3, [pc, #520]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005682:	d10b      	bne.n	800569c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	4b7e      	ldr	r3, [pc, #504]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d05b      	beq.n	8005748 <HAL_RCC_OscConfig+0x108>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d157      	bne.n	8005748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e242      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a4:	d106      	bne.n	80056b4 <HAL_RCC_OscConfig+0x74>
 80056a6:	4b76      	ldr	r3, [pc, #472]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a75      	ldr	r2, [pc, #468]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e01d      	b.n	80056f0 <HAL_RCC_OscConfig+0xb0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x98>
 80056be:	4b70      	ldr	r3, [pc, #448]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a6f      	ldr	r2, [pc, #444]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b6d      	ldr	r3, [pc, #436]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a6c      	ldr	r2, [pc, #432]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0xb0>
 80056d8:	4b69      	ldr	r3, [pc, #420]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a68      	ldr	r2, [pc, #416]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b66      	ldr	r3, [pc, #408]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a65      	ldr	r2, [pc, #404]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80056ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fd ff88 	bl	800360c <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005700:	f7fd ff84 	bl	800360c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e207      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b5b      	ldr	r3, [pc, #364]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0xc0>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005720:	f7fd ff74 	bl	800360c <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005728:	f7fd ff70 	bl	800360c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1f3      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573a:	4b51      	ldr	r3, [pc, #324]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0xe8>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d063      	beq.n	800581e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005756:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800576a:	2b08      	cmp	r3, #8
 800576c:	d11c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576e:	4b44      	ldr	r3, [pc, #272]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	4b41      	ldr	r3, [pc, #260]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_RCC_OscConfig+0x152>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e1c7      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005792:	4b3b      	ldr	r3, [pc, #236]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4937      	ldr	r1, [pc, #220]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	e03a      	b.n	800581e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b0:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCC_OscConfig+0x244>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b6:	f7fd ff29 	bl	800360c <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057be:	f7fd ff25 	bl	800360c <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e1a8      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057dc:	4b28      	ldr	r3, [pc, #160]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4925      	ldr	r1, [pc, #148]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
 80057f0:	e015      	b.n	800581e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <HAL_RCC_OscConfig+0x244>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fd ff08 	bl	800360c <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005800:	f7fd ff04 	bl	800360c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e187      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d036      	beq.n	8005898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <HAL_RCC_OscConfig+0x248>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fd fee8 	bl	800360c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005840:	f7fd fee4 	bl	800360c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e167      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_RCC_OscConfig+0x240>)
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x200>
 800585e:	e01b      	b.n	8005898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_RCC_OscConfig+0x248>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005866:	f7fd fed1 	bl	800360c <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586c:	e00e      	b.n	800588c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586e:	f7fd fecd 	bl	800360c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d907      	bls.n	800588c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e150      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
 8005880:	40023800 	.word	0x40023800
 8005884:	42470000 	.word	0x42470000
 8005888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	4b88      	ldr	r3, [pc, #544]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 800588e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ea      	bne.n	800586e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8097 	beq.w	80059d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058aa:	4b81      	ldr	r3, [pc, #516]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10f      	bne.n	80058d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	4b7d      	ldr	r3, [pc, #500]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a7c      	ldr	r2, [pc, #496]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b7a      	ldr	r3, [pc, #488]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	4b77      	ldr	r3, [pc, #476]	; (8005ab4 <HAL_RCC_OscConfig+0x474>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d118      	bne.n	8005914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e2:	4b74      	ldr	r3, [pc, #464]	; (8005ab4 <HAL_RCC_OscConfig+0x474>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a73      	ldr	r2, [pc, #460]	; (8005ab4 <HAL_RCC_OscConfig+0x474>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ee:	f7fd fe8d 	bl	800360c <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7fd fe89 	bl	800360c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e10c      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005908:	4b6a      	ldr	r3, [pc, #424]	; (8005ab4 <HAL_RCC_OscConfig+0x474>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <HAL_RCC_OscConfig+0x2ea>
 800591c:	4b64      	ldr	r3, [pc, #400]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	4a63      	ldr	r2, [pc, #396]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6713      	str	r3, [r2, #112]	; 0x70
 8005928:	e01c      	b.n	8005964 <HAL_RCC_OscConfig+0x324>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b05      	cmp	r3, #5
 8005930:	d10c      	bne.n	800594c <HAL_RCC_OscConfig+0x30c>
 8005932:	4b5f      	ldr	r3, [pc, #380]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a5e      	ldr	r2, [pc, #376]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005938:	f043 0304 	orr.w	r3, r3, #4
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
 800593e:	4b5c      	ldr	r3, [pc, #368]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	4a5b      	ldr	r2, [pc, #364]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6713      	str	r3, [r2, #112]	; 0x70
 800594a:	e00b      	b.n	8005964 <HAL_RCC_OscConfig+0x324>
 800594c:	4b58      	ldr	r3, [pc, #352]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	4a57      	ldr	r2, [pc, #348]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	6713      	str	r3, [r2, #112]	; 0x70
 8005958:	4b55      	ldr	r3, [pc, #340]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	4a54      	ldr	r2, [pc, #336]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 800595e:	f023 0304 	bic.w	r3, r3, #4
 8005962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d015      	beq.n	8005998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596c:	f7fd fe4e 	bl	800360c <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005972:	e00a      	b.n	800598a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fd fe4a 	bl	800360c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e0cb      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	4b49      	ldr	r3, [pc, #292]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ee      	beq.n	8005974 <HAL_RCC_OscConfig+0x334>
 8005996:	e014      	b.n	80059c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005998:	f7fd fe38 	bl	800360c <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a0:	f7fd fe34 	bl	800360c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0b5      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b6:	4b3e      	ldr	r3, [pc, #248]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1ee      	bne.n	80059a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d105      	bne.n	80059d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c8:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	4a38      	ldr	r2, [pc, #224]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80059ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80a1 	beq.w	8005b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059de:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d05c      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d141      	bne.n	8005a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <HAL_RCC_OscConfig+0x478>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fd fe08 	bl	800360c <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fd fe04 	bl	800360c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e087      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	3b01      	subs	r3, #1
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	491b      	ldr	r1, [pc, #108]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_RCC_OscConfig+0x478>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4e:	f7fd fddd 	bl	800360c <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a56:	f7fd fdd9 	bl	800360c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e05c      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a68:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x416>
 8005a74:	e054      	b.n	8005b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <HAL_RCC_OscConfig+0x478>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fdc6 	bl	800360c <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a84:	f7fd fdc2 	bl	800360c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e045      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_RCC_OscConfig+0x470>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x444>
 8005aa2:	e03d      	b.n	8005b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d107      	bne.n	8005abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e038      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	40007000 	.word	0x40007000
 8005ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_RCC_OscConfig+0x4ec>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d028      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d121      	bne.n	8005b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d11a      	bne.n	8005b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d111      	bne.n	8005b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	3b01      	subs	r3, #1
 8005b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800

08005b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0cc      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b44:	4b68      	ldr	r3, [pc, #416]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d90c      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b52:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0b8      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4a58      	ldr	r2, [pc, #352]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b9c:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a52      	ldr	r2, [pc, #328]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba8:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	494d      	ldr	r1, [pc, #308]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d044      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d119      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d003      	beq.n	8005bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d107      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bee:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e06f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfe:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e067      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0e:	4b37      	ldr	r3, [pc, #220]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 0203 	bic.w	r2, r3, #3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4934      	ldr	r1, [pc, #208]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c20:	f7fd fcf4 	bl	800360c <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c28:	f7fd fcf0 	bl	800360c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e04f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 020c 	and.w	r2, r3, #12
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1eb      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c50:	4b25      	ldr	r3, [pc, #148]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20c      	bcs.n	8005c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5e:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e032      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c84:	4b19      	ldr	r3, [pc, #100]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	4916      	ldr	r1, [pc, #88]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	490e      	ldr	r1, [pc, #56]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb6:	f000 f821 	bl	8005cfc <HAL_RCC_GetSysClockFreq>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	490a      	ldr	r1, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc8:	5ccb      	ldrb	r3, [r1, r3]
 8005cca:	fa22 f303 	lsr.w	r3, r2, r3
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fd fc54 	bl	8003584 <HAL_InitTick>

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023c00 	.word	0x40023c00
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	080088e4 	.word	0x080088e4
 8005cf4:	2000017c 	.word	0x2000017c
 8005cf8:	20000180 	.word	0x20000180

08005cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d00:	b094      	sub	sp, #80	; 0x50
 8005d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	647b      	str	r3, [r7, #68]	; 0x44
 8005d08:	2300      	movs	r3, #0
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d14:	4b79      	ldr	r3, [pc, #484]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 030c 	and.w	r3, r3, #12
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d00d      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x40>
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	f200 80e1 	bhi.w	8005ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x34>
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d2e:	e0db      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d34:	e0db      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d36:	4b72      	ldr	r3, [pc, #456]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d3a:	e0d8      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d3c:	4b6f      	ldr	r3, [pc, #444]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d46:	4b6d      	ldr	r3, [pc, #436]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d063      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d52:	4b6a      	ldr	r3, [pc, #424]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	2200      	movs	r2, #0
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
 8005d66:	2300      	movs	r3, #0
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	0159      	lsls	r1, r3, #5
 8005d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d80:	0150      	lsls	r0, r2, #5
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4621      	mov	r1, r4
 8005d88:	1a51      	subs	r1, r2, r1
 8005d8a:	6139      	str	r1, [r7, #16]
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da0:	4659      	mov	r1, fp
 8005da2:	018b      	lsls	r3, r1, #6
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005daa:	4651      	mov	r1, sl
 8005dac:	018a      	lsls	r2, r1, #6
 8005dae:	4651      	mov	r1, sl
 8005db0:	ebb2 0801 	subs.w	r8, r2, r1
 8005db4:	4659      	mov	r1, fp
 8005db6:	eb63 0901 	sbc.w	r9, r3, r1
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dce:	4690      	mov	r8, r2
 8005dd0:	4699      	mov	r9, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	eb18 0303 	adds.w	r3, r8, r3
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	462b      	mov	r3, r5
 8005ddc:	eb49 0303 	adc.w	r3, r9, r3
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dee:	4629      	mov	r1, r5
 8005df0:	028b      	lsls	r3, r1, #10
 8005df2:	4621      	mov	r1, r4
 8005df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005df8:	4621      	mov	r1, r4
 8005dfa:	028a      	lsls	r2, r1, #10
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e02:	2200      	movs	r2, #0
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e0c:	f7fa fa40 	bl	8000290 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e18:	e058      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e1a:	4b38      	ldr	r3, [pc, #224]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	099b      	lsrs	r3, r3, #6
 8005e20:	2200      	movs	r2, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	4611      	mov	r1, r2
 8005e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e2a:	623b      	str	r3, [r7, #32]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	f04f 0000 	mov.w	r0, #0
 8005e3c:	f04f 0100 	mov.w	r1, #0
 8005e40:	0159      	lsls	r1, r3, #5
 8005e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e46:	0150      	lsls	r0, r2, #5
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e52:	4649      	mov	r1, r9
 8005e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e70:	eb63 050b 	sbc.w	r5, r3, fp
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	00eb      	lsls	r3, r5, #3
 8005e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e82:	00e2      	lsls	r2, r4, #3
 8005e84:	4614      	mov	r4, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	4643      	mov	r3, r8
 8005e8a:	18e3      	adds	r3, r4, r3
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	464b      	mov	r3, r9
 8005e90:	eb45 0303 	adc.w	r3, r5, r3
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	028b      	lsls	r3, r1, #10
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005eac:	4621      	mov	r1, r4
 8005eae:	028a      	lsls	r2, r1, #10
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	61fa      	str	r2, [r7, #28]
 8005ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec0:	f7fa f9e6 	bl	8000290 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3750      	adds	r7, #80	; 0x50
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	00f42400 	.word	0x00f42400

08005f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2000017c 	.word	0x2000017c

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f20:	f7ff fff0 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4903      	ldr	r1, [pc, #12]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	080088f4 	.word	0x080088f4

08005f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e07b      	b.n	800604e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d108      	bne.n	8005f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f66:	d009      	beq.n	8005f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	61da      	str	r2, [r3, #28]
 8005f6e:	e005      	b.n	8005f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fc fdf0 	bl	8002b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	ea42 0103 	orr.w	r1, r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	f003 0104 	and.w	r1, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0210 	and.w	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b088      	sub	sp, #32
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_SPI_Transmit+0x22>
 8006074:	2302      	movs	r3, #2
 8006076:	e126      	b.n	80062c6 <HAL_SPI_Transmit+0x270>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006080:	f7fd fac4 	bl	800360c <HAL_GetTick>
 8006084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d002      	beq.n	800609c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800609a:	e10b      	b.n	80062b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_SPI_Transmit+0x52>
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060ac:	e102      	b.n	80062b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2203      	movs	r2, #3
 80060b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f4:	d10f      	bne.n	8006116 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006114:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d007      	beq.n	8006134 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800613c:	d14b      	bne.n	80061d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_SPI_Transmit+0xf6>
 8006146:	8afb      	ldrh	r3, [r7, #22]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d13e      	bne.n	80061ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	1c9a      	adds	r2, r3, #2
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006170:	e02b      	b.n	80061ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d112      	bne.n	80061a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	1c9a      	adds	r2, r3, #2
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80061a4:	e011      	b.n	80061ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a6:	f7fd fa31 	bl	800360c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d803      	bhi.n	80061be <HAL_SPI_Transmit+0x168>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_Transmit+0x16e>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061c8:	e074      	b.n	80062b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ce      	bne.n	8006172 <HAL_SPI_Transmit+0x11c>
 80061d4:	e04c      	b.n	8006270 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_SPI_Transmit+0x18e>
 80061de:	8afb      	ldrh	r3, [r7, #22]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d140      	bne.n	8006266 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800620a:	e02c      	b.n	8006266 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d113      	bne.n	8006242 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006240:	e011      	b.n	8006266 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006242:	f7fd f9e3 	bl	800360c <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d803      	bhi.n	800625a <HAL_SPI_Transmit+0x204>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Transmit+0x20a>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006264:	e026      	b.n	80062b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1cd      	bne.n	800620c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fcdd 	bl	8006c34 <SPI_EndRxTxTransaction>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e000      	b.n	80062b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80062b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af02      	add	r7, sp, #8
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ea:	d112      	bne.n	8006312 <HAL_SPI_Receive+0x44>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10e      	bne.n	8006312 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2204      	movs	r2, #4
 80062f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062fc:	88fa      	ldrh	r2, [r7, #6]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f8f1 	bl	80064f0 <HAL_SPI_TransmitReceive>
 800630e:	4603      	mov	r3, r0
 8006310:	e0ea      	b.n	80064e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_SPI_Receive+0x52>
 800631c:	2302      	movs	r3, #2
 800631e:	e0e3      	b.n	80064e8 <HAL_SPI_Receive+0x21a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006328:	f7fd f970 	bl	800360c <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d002      	beq.n	8006340 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800633a:	2302      	movs	r3, #2
 800633c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800633e:	e0ca      	b.n	80064d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_Receive+0x7e>
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006350:	e0c1      	b.n	80064d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2204      	movs	r2, #4
 8006356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	88fa      	ldrh	r2, [r7, #6]
 800636a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	d10f      	bne.n	80063ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d007      	beq.n	80063d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d162      	bne.n	80064a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063e0:	e02e      	b.n	8006440 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d115      	bne.n	800641c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f103 020c 	add.w	r2, r3, #12
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	87da      	strh	r2, [r3, #62]	; 0x3e
 800641a:	e011      	b.n	8006440 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641c:	f7fd f8f6 	bl	800360c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d803      	bhi.n	8006434 <HAL_SPI_Receive+0x166>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d102      	bne.n	800643a <HAL_SPI_Receive+0x16c>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800643e:	e04a      	b.n	80064d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1cb      	bne.n	80063e2 <HAL_SPI_Receive+0x114>
 800644a:	e031      	b.n	80064b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d113      	bne.n	8006482 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	b292      	uxth	r2, r2
 8006466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	1c9a      	adds	r2, r3, #2
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006480:	e011      	b.n	80064a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006482:	f7fd f8c3 	bl	800360c <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d803      	bhi.n	800649a <HAL_SPI_Receive+0x1cc>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d102      	bne.n	80064a0 <HAL_SPI_Receive+0x1d2>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064a4:	e017      	b.n	80064d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1cd      	bne.n	800644c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fb57 	bl	8006b68 <SPI_EndRxTransaction>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
 80064d2:	e000      	b.n	80064d6 <HAL_SPI_Receive+0x208>
  }

error :
 80064d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064fe:	2301      	movs	r3, #1
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x26>
 8006512:	2302      	movs	r3, #2
 8006514:	e18a      	b.n	800682c <HAL_SPI_TransmitReceive+0x33c>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800651e:	f7fd f875 	bl	800360c <HAL_GetTick>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800653c:	2b01      	cmp	r3, #1
 800653e:	d00f      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x70>
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006546:	d107      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x68>
 8006550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006554:	2b04      	cmp	r3, #4
 8006556:	d003      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006558:	2302      	movs	r3, #2
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800655e:	e15b      	b.n	8006818 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_SPI_TransmitReceive+0x82>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_SPI_TransmitReceive+0x82>
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006578:	e14e      	b.n	8006818 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b04      	cmp	r3, #4
 8006584:	d003      	beq.n	800658e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2205      	movs	r2, #5
 800658a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	887a      	ldrh	r2, [r7, #2]
 800659e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	887a      	ldrh	r2, [r7, #2]
 80065a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	887a      	ldrh	r2, [r7, #2]
 80065b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	887a      	ldrh	r2, [r7, #2]
 80065b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d007      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ea:	d178      	bne.n	80066de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x10a>
 80065f4:	8b7b      	ldrh	r3, [r7, #26]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d166      	bne.n	80066c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	881a      	ldrh	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	1c9a      	adds	r2, r3, #2
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800661e:	e053      	b.n	80066c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d11b      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x176>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d016      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x176>
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d113      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	881a      	ldrh	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d119      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x1b8>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d014      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	b292      	uxth	r2, r2
 800668a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	1c9a      	adds	r2, r3, #2
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066a4:	2301      	movs	r3, #1
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066a8:	f7fc ffb0 	bl	800360c <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d807      	bhi.n	80066c8 <HAL_SPI_TransmitReceive+0x1d8>
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d003      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066c6:	e0a7      	b.n	8006818 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1a6      	bne.n	8006620 <HAL_SPI_TransmitReceive+0x130>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1a1      	bne.n	8006620 <HAL_SPI_TransmitReceive+0x130>
 80066dc:	e07c      	b.n	80067d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x1fc>
 80066e6:	8b7b      	ldrh	r3, [r7, #26]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d16b      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	7812      	ldrb	r2, [r2, #0]
 80066f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006712:	e057      	b.n	80067c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d11c      	bne.n	800675c <HAL_SPI_TransmitReceive+0x26c>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d017      	beq.n	800675c <HAL_SPI_TransmitReceive+0x26c>
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d114      	bne.n	800675c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d119      	bne.n	800679e <HAL_SPI_TransmitReceive+0x2ae>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d014      	beq.n	800679e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800679a:	2301      	movs	r3, #1
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800679e:	f7fc ff35 	bl	800360c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d803      	bhi.n	80067b6 <HAL_SPI_TransmitReceive+0x2c6>
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d102      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x2cc>
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067c2:	e029      	b.n	8006818 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1a2      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x224>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d19d      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fa29 	bl	8006c34 <SPI_EndRxTxTransaction>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067f4:	e010      	b.n	8006818 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	e000      	b.n	8006818 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800682c:	4618      	mov	r0, r3
 800682e:	3730      	adds	r7, #48	; 0x30
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10e      	bne.n	8006874 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
    return;
 8006872:	e0ce      	b.n	8006a12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_SPI_IRQHandler+0x5e>
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
    return;
 8006890:	e0bf      	b.n	8006a12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <HAL_SPI_IRQHandler+0x7e>
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 80b0 	beq.w	8006a12 <HAL_SPI_IRQHandler+0x1de>
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80aa 	beq.w	8006a12 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d023      	beq.n	8006910 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d011      	beq.n	80068f8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d8:	f043 0204 	orr.w	r2, r3, #4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	e00b      	b.n	8006910 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	693b      	ldr	r3, [r7, #16]
        return;
 800690e:	e080      	b.n	8006a12 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d014      	beq.n	8006944 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f043 0208 	orr.w	r2, r3, #8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	2b00      	cmp	r3, #0
 800696e:	d04f      	beq.n	8006a10 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800697e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <HAL_SPI_IRQHandler+0x168>
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d034      	beq.n	8006a06 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0203 	bic.w	r2, r2, #3
 80069aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d011      	beq.n	80069d8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_SPI_IRQHandler+0x1e4>)
 80069ba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fd fd87 	bl	80044d4 <HAL_DMA_Abort_IT>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d016      	beq.n	8006a0e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e4:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <HAL_SPI_IRQHandler+0x1e4>)
 80069e6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fd fd71 	bl	80044d4 <HAL_DMA_Abort_IT>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a04:	e003      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f808 	bl	8006a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a0c:	e000      	b.n	8006a10 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006a0e:	bf00      	nop
    return;
 8006a10:	bf00      	nop
  }
}
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	08006a31 	.word	0x08006a31

08006a1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff ffe6 	bl	8006a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a68:	f7fc fdd0 	bl	800360c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	4413      	add	r3, r2
 8006a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a78:	f7fc fdc8 	bl	800360c <HAL_GetTick>
 8006a7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a7e:	4b39      	ldr	r3, [pc, #228]	; (8006b64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	015b      	lsls	r3, r3, #5
 8006a84:	0d1b      	lsrs	r3, r3, #20
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	fb02 f303 	mul.w	r3, r2, r3
 8006a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a8e:	e054      	b.n	8006b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d050      	beq.n	8006b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a98:	f7fc fdb8 	bl	800360c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d902      	bls.n	8006aae <SPI_WaitFlagStateUntilTimeout+0x56>
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d13d      	bne.n	8006b2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac6:	d111      	bne.n	8006aec <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad0:	d004      	beq.n	8006adc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ada:	d107      	bne.n	8006aec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af4:	d10f      	bne.n	8006b16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e017      	b.n	8006b5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4013      	ands	r3, r2
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	bf0c      	ite	eq
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	2300      	movne	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d19b      	bne.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	2000017c 	.word	0x2000017c

08006b68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b7c:	d111      	bne.n	8006ba2 <SPI_EndRxTransaction+0x3a>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b86:	d004      	beq.n	8006b92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b90:	d107      	bne.n	8006ba2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006baa:	d12a      	bne.n	8006c02 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb4:	d012      	beq.n	8006bdc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff ff49 	bl	8006a58 <SPI_WaitFlagStateUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02d      	beq.n	8006c28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e026      	b.n	8006c2a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2200      	movs	r2, #0
 8006be4:	2101      	movs	r1, #1
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff ff36 	bl	8006a58 <SPI_WaitFlagStateUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01a      	beq.n	8006c28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f043 0220 	orr.w	r2, r3, #32
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e013      	b.n	8006c2a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff ff23 	bl	8006a58 <SPI_WaitFlagStateUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e000      	b.n	8006c2a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c40:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <SPI_EndRxTxTransaction+0x7c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <SPI_EndRxTxTransaction+0x80>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	0d5b      	lsrs	r3, r3, #21
 8006c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c5e:	d112      	bne.n	8006c86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff fef4 	bl	8006a58 <SPI_WaitFlagStateUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e00f      	b.n	8006ca6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d0f2      	beq.n	8006c86 <SPI_EndRxTxTransaction+0x52>
 8006ca0:	e000      	b.n	8006ca4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ca2:	bf00      	nop
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2000017c 	.word	0x2000017c
 8006cb4:	165e9f81 	.word	0x165e9f81

08006cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e041      	b.n	8006d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fc fbdc 	bl	800349c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f000 faf6 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d001      	beq.n	8006d70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e03c      	b.n	8006dea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <HAL_TIM_Base_Start+0xa0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d018      	beq.n	8006db4 <HAL_TIM_Base_Start+0x5c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8a:	d013      	beq.n	8006db4 <HAL_TIM_Base_Start+0x5c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <HAL_TIM_Base_Start+0xa4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00e      	beq.n	8006db4 <HAL_TIM_Base_Start+0x5c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <HAL_TIM_Base_Start+0xa8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d009      	beq.n	8006db4 <HAL_TIM_Base_Start+0x5c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <HAL_TIM_Base_Start+0xac>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIM_Base_Start+0x5c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a16      	ldr	r2, [pc, #88]	; (8006e08 <HAL_TIM_Base_Start+0xb0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d111      	bne.n	8006dd8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d010      	beq.n	8006de8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd6:	e007      	b.n	8006de8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40000400 	.word	0x40000400
 8006e00:	40000800 	.word	0x40000800
 8006e04:	40000c00 	.word	0x40000c00
 8006e08:	40014000 	.word	0x40014000

08006e0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e097      	b.n	8006f50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fc fae9 	bl	800340c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f000 fa41 	bl	80072e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006eac:	f023 030c 	bic.w	r3, r3, #12
 8006eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	011a      	lsls	r2, r3, #4
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	031b      	lsls	r3, r3, #12
 8006edc:	4313      	orrs	r3, r2
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ef2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	4313      	orrs	r3, r2
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d110      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d102      	bne.n	8006f94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f8e:	7b7b      	ldrb	r3, [r7, #13]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d001      	beq.n	8006f98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e069      	b.n	800706c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa8:	e031      	b.n	800700e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d110      	bne.n	8006fd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d102      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb6:	7b3b      	ldrb	r3, [r7, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d001      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e055      	b.n	800706c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fd0:	e01d      	b.n	800700e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d108      	bne.n	8006fea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fde:	7b7b      	ldrb	r3, [r7, #13]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d102      	bne.n	8006fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe4:	7b3b      	ldrb	r3, [r7, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e03e      	b.n	800706c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2202      	movs	r2, #2
 8007002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_TIM_Encoder_Start+0xc4>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d008      	beq.n	800702c <HAL_TIM_Encoder_Start+0xd4>
 800701a:	e00f      	b.n	800703c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f9df 	bl	80073e8 <TIM_CCxChannelCmd>
      break;
 800702a:	e016      	b.n	800705a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2201      	movs	r2, #1
 8007032:	2104      	movs	r1, #4
 8007034:	4618      	mov	r0, r3
 8007036:	f000 f9d7 	bl	80073e8 <TIM_CCxChannelCmd>
      break;
 800703a:	e00e      	b.n	800705a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2201      	movs	r2, #1
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f9cf 	bl	80073e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2201      	movs	r2, #1
 8007050:	2104      	movs	r1, #4
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f9c8 	bl	80073e8 <TIM_CCxChannelCmd>
      break;
 8007058:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	d122      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d11b      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0202 	mvn.w	r2, #2
 80070a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8f8 	bl	80072ac <HAL_TIM_IC_CaptureCallback>
 80070bc:	e005      	b.n	80070ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8ea 	bl	8007298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8fb 	bl	80072c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0204 	mvn.w	r2, #4
 80070f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8ce 	bl	80072ac <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8c0 	bl	8007298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f8d1 	bl	80072c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b08      	cmp	r3, #8
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b08      	cmp	r3, #8
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0208 	mvn.w	r2, #8
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2204      	movs	r2, #4
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8a4 	bl	80072ac <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f896 	bl	8007298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8a7 	bl	80072c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b10      	cmp	r3, #16
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b10      	cmp	r3, #16
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0210 	mvn.w	r2, #16
 800719c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2208      	movs	r2, #8
 80071a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f87a 	bl	80072ac <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f86c 	bl	8007298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f87d 	bl	80072c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d10e      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d107      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0201 	mvn.w	r2, #1
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f846 	bl	8007284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d10e      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d107      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800721c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f980 	bl	8007524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f842 	bl	80072d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b20      	cmp	r3, #32
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0220 	mvn.w	r2, #32
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f94a 	bl	8007510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a34      	ldr	r2, [pc, #208]	; (80073cc <TIM_Base_SetConfig+0xe4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <TIM_Base_SetConfig+0xe8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <TIM_Base_SetConfig+0xec>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <TIM_Base_SetConfig+0xf0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0xe4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01b      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d017      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a22      	ldr	r2, [pc, #136]	; (80073d0 <TIM_Base_SetConfig+0xe8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a21      	ldr	r2, [pc, #132]	; (80073d4 <TIM_Base_SetConfig+0xec>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00f      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <TIM_Base_SetConfig+0xf0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00b      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <TIM_Base_SetConfig+0xf4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d007      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <TIM_Base_SetConfig+0xf8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <TIM_Base_SetConfig+0xfc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a08      	ldr	r2, [pc, #32]	; (80073cc <TIM_Base_SetConfig+0xe4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d103      	bne.n	80073b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	615a      	str	r2, [r3, #20]
}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800

080073e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	2201      	movs	r2, #1
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	43db      	mvns	r3, r3
 800740a:	401a      	ands	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	fa01 f303 	lsl.w	r3, r1, r3
 8007420:	431a      	orrs	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007448:	2302      	movs	r3, #2
 800744a:	e050      	b.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1c      	ldr	r2, [pc, #112]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007498:	d013      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a18      	ldr	r2, [pc, #96]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a16      	ldr	r2, [pc, #88]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a15      	ldr	r2, [pc, #84]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a13      	ldr	r2, [pc, #76]	; (800750c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d10c      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40000c00 	.word	0x40000c00
 800750c:	40014000 	.word	0x40014000

08007510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <std>:
 8007538:	2300      	movs	r3, #0
 800753a:	b510      	push	{r4, lr}
 800753c:	4604      	mov	r4, r0
 800753e:	e9c0 3300 	strd	r3, r3, [r0]
 8007542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007546:	6083      	str	r3, [r0, #8]
 8007548:	8181      	strh	r1, [r0, #12]
 800754a:	6643      	str	r3, [r0, #100]	; 0x64
 800754c:	81c2      	strh	r2, [r0, #14]
 800754e:	6183      	str	r3, [r0, #24]
 8007550:	4619      	mov	r1, r3
 8007552:	2208      	movs	r2, #8
 8007554:	305c      	adds	r0, #92	; 0x5c
 8007556:	f000 fa05 	bl	8007964 <memset>
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <std+0x58>)
 800755c:	6263      	str	r3, [r4, #36]	; 0x24
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <std+0x5c>)
 8007560:	62a3      	str	r3, [r4, #40]	; 0x28
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <std+0x60>)
 8007564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <std+0x64>)
 8007568:	6323      	str	r3, [r4, #48]	; 0x30
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <std+0x68>)
 800756c:	6224      	str	r4, [r4, #32]
 800756e:	429c      	cmp	r4, r3
 8007570:	d006      	beq.n	8007580 <std+0x48>
 8007572:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007576:	4294      	cmp	r4, r2
 8007578:	d002      	beq.n	8007580 <std+0x48>
 800757a:	33d0      	adds	r3, #208	; 0xd0
 800757c:	429c      	cmp	r4, r3
 800757e:	d105      	bne.n	800758c <std+0x54>
 8007580:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007588:	f000 ba64 	b.w	8007a54 <__retarget_lock_init_recursive>
 800758c:	bd10      	pop	{r4, pc}
 800758e:	bf00      	nop
 8007590:	080077b5 	.word	0x080077b5
 8007594:	080077d7 	.word	0x080077d7
 8007598:	0800780f 	.word	0x0800780f
 800759c:	08007833 	.word	0x08007833
 80075a0:	200009f8 	.word	0x200009f8

080075a4 <stdio_exit_handler>:
 80075a4:	4a02      	ldr	r2, [pc, #8]	; (80075b0 <stdio_exit_handler+0xc>)
 80075a6:	4903      	ldr	r1, [pc, #12]	; (80075b4 <stdio_exit_handler+0x10>)
 80075a8:	4803      	ldr	r0, [pc, #12]	; (80075b8 <stdio_exit_handler+0x14>)
 80075aa:	f000 b869 	b.w	8007680 <_fwalk_sglue>
 80075ae:	bf00      	nop
 80075b0:	20000188 	.word	0x20000188
 80075b4:	08008329 	.word	0x08008329
 80075b8:	20000194 	.word	0x20000194

080075bc <cleanup_stdio>:
 80075bc:	6841      	ldr	r1, [r0, #4]
 80075be:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <cleanup_stdio+0x34>)
 80075c0:	4299      	cmp	r1, r3
 80075c2:	b510      	push	{r4, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	d001      	beq.n	80075cc <cleanup_stdio+0x10>
 80075c8:	f000 feae 	bl	8008328 <_fflush_r>
 80075cc:	68a1      	ldr	r1, [r4, #8]
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <cleanup_stdio+0x38>)
 80075d0:	4299      	cmp	r1, r3
 80075d2:	d002      	beq.n	80075da <cleanup_stdio+0x1e>
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fea7 	bl	8008328 <_fflush_r>
 80075da:	68e1      	ldr	r1, [r4, #12]
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <cleanup_stdio+0x3c>)
 80075de:	4299      	cmp	r1, r3
 80075e0:	d004      	beq.n	80075ec <cleanup_stdio+0x30>
 80075e2:	4620      	mov	r0, r4
 80075e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e8:	f000 be9e 	b.w	8008328 <_fflush_r>
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	bf00      	nop
 80075f0:	200009f8 	.word	0x200009f8
 80075f4:	20000a60 	.word	0x20000a60
 80075f8:	20000ac8 	.word	0x20000ac8

080075fc <global_stdio_init.part.0>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <global_stdio_init.part.0+0x30>)
 8007600:	4c0b      	ldr	r4, [pc, #44]	; (8007630 <global_stdio_init.part.0+0x34>)
 8007602:	4a0c      	ldr	r2, [pc, #48]	; (8007634 <global_stdio_init.part.0+0x38>)
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	4620      	mov	r0, r4
 8007608:	2200      	movs	r2, #0
 800760a:	2104      	movs	r1, #4
 800760c:	f7ff ff94 	bl	8007538 <std>
 8007610:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007614:	2201      	movs	r2, #1
 8007616:	2109      	movs	r1, #9
 8007618:	f7ff ff8e 	bl	8007538 <std>
 800761c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007620:	2202      	movs	r2, #2
 8007622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007626:	2112      	movs	r1, #18
 8007628:	f7ff bf86 	b.w	8007538 <std>
 800762c:	20000b30 	.word	0x20000b30
 8007630:	200009f8 	.word	0x200009f8
 8007634:	080075a5 	.word	0x080075a5

08007638 <__sfp_lock_acquire>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__sfp_lock_acquire+0x8>)
 800763a:	f000 ba0c 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 800763e:	bf00      	nop
 8007640:	20000b39 	.word	0x20000b39

08007644 <__sfp_lock_release>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sfp_lock_release+0x8>)
 8007646:	f000 ba07 	b.w	8007a58 <__retarget_lock_release_recursive>
 800764a:	bf00      	nop
 800764c:	20000b39 	.word	0x20000b39

08007650 <__sinit>:
 8007650:	b510      	push	{r4, lr}
 8007652:	4604      	mov	r4, r0
 8007654:	f7ff fff0 	bl	8007638 <__sfp_lock_acquire>
 8007658:	6a23      	ldr	r3, [r4, #32]
 800765a:	b11b      	cbz	r3, 8007664 <__sinit+0x14>
 800765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007660:	f7ff bff0 	b.w	8007644 <__sfp_lock_release>
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <__sinit+0x28>)
 8007666:	6223      	str	r3, [r4, #32]
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <__sinit+0x2c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f5      	bne.n	800765c <__sinit+0xc>
 8007670:	f7ff ffc4 	bl	80075fc <global_stdio_init.part.0>
 8007674:	e7f2      	b.n	800765c <__sinit+0xc>
 8007676:	bf00      	nop
 8007678:	080075bd 	.word	0x080075bd
 800767c:	20000b30 	.word	0x20000b30

08007680 <_fwalk_sglue>:
 8007680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007684:	4607      	mov	r7, r0
 8007686:	4688      	mov	r8, r1
 8007688:	4614      	mov	r4, r2
 800768a:	2600      	movs	r6, #0
 800768c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007690:	f1b9 0901 	subs.w	r9, r9, #1
 8007694:	d505      	bpl.n	80076a2 <_fwalk_sglue+0x22>
 8007696:	6824      	ldr	r4, [r4, #0]
 8007698:	2c00      	cmp	r4, #0
 800769a:	d1f7      	bne.n	800768c <_fwalk_sglue+0xc>
 800769c:	4630      	mov	r0, r6
 800769e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d907      	bls.n	80076b8 <_fwalk_sglue+0x38>
 80076a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076ac:	3301      	adds	r3, #1
 80076ae:	d003      	beq.n	80076b8 <_fwalk_sglue+0x38>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	4306      	orrs	r6, r0
 80076b8:	3568      	adds	r5, #104	; 0x68
 80076ba:	e7e9      	b.n	8007690 <_fwalk_sglue+0x10>

080076bc <_puts_r>:
 80076bc:	6a03      	ldr	r3, [r0, #32]
 80076be:	b570      	push	{r4, r5, r6, lr}
 80076c0:	6884      	ldr	r4, [r0, #8]
 80076c2:	4605      	mov	r5, r0
 80076c4:	460e      	mov	r6, r1
 80076c6:	b90b      	cbnz	r3, 80076cc <_puts_r+0x10>
 80076c8:	f7ff ffc2 	bl	8007650 <__sinit>
 80076cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ce:	07db      	lsls	r3, r3, #31
 80076d0:	d405      	bmi.n	80076de <_puts_r+0x22>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	0598      	lsls	r0, r3, #22
 80076d6:	d402      	bmi.n	80076de <_puts_r+0x22>
 80076d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076da:	f000 f9bc 	bl	8007a56 <__retarget_lock_acquire_recursive>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	0719      	lsls	r1, r3, #28
 80076e2:	d513      	bpl.n	800770c <_puts_r+0x50>
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	b18b      	cbz	r3, 800770c <_puts_r+0x50>
 80076e8:	3e01      	subs	r6, #1
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076f0:	3b01      	subs	r3, #1
 80076f2:	60a3      	str	r3, [r4, #8]
 80076f4:	b9e9      	cbnz	r1, 8007732 <_puts_r+0x76>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da2e      	bge.n	8007758 <_puts_r+0x9c>
 80076fa:	4622      	mov	r2, r4
 80076fc:	210a      	movs	r1, #10
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 f89b 	bl	800783a <__swbuf_r>
 8007704:	3001      	adds	r0, #1
 8007706:	d007      	beq.n	8007718 <_puts_r+0x5c>
 8007708:	250a      	movs	r5, #10
 800770a:	e007      	b.n	800771c <_puts_r+0x60>
 800770c:	4621      	mov	r1, r4
 800770e:	4628      	mov	r0, r5
 8007710:	f000 f8d0 	bl	80078b4 <__swsetup_r>
 8007714:	2800      	cmp	r0, #0
 8007716:	d0e7      	beq.n	80076e8 <_puts_r+0x2c>
 8007718:	f04f 35ff 	mov.w	r5, #4294967295
 800771c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771e:	07da      	lsls	r2, r3, #31
 8007720:	d405      	bmi.n	800772e <_puts_r+0x72>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	d402      	bmi.n	800772e <_puts_r+0x72>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f000 f995 	bl	8007a58 <__retarget_lock_release_recursive>
 800772e:	4628      	mov	r0, r5
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	2b00      	cmp	r3, #0
 8007734:	da04      	bge.n	8007740 <_puts_r+0x84>
 8007736:	69a2      	ldr	r2, [r4, #24]
 8007738:	429a      	cmp	r2, r3
 800773a:	dc06      	bgt.n	800774a <_puts_r+0x8e>
 800773c:	290a      	cmp	r1, #10
 800773e:	d004      	beq.n	800774a <_puts_r+0x8e>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	6022      	str	r2, [r4, #0]
 8007746:	7019      	strb	r1, [r3, #0]
 8007748:	e7cf      	b.n	80076ea <_puts_r+0x2e>
 800774a:	4622      	mov	r2, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f874 	bl	800783a <__swbuf_r>
 8007752:	3001      	adds	r0, #1
 8007754:	d1c9      	bne.n	80076ea <_puts_r+0x2e>
 8007756:	e7df      	b.n	8007718 <_puts_r+0x5c>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	250a      	movs	r5, #10
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	6022      	str	r2, [r4, #0]
 8007760:	701d      	strb	r5, [r3, #0]
 8007762:	e7db      	b.n	800771c <_puts_r+0x60>

08007764 <puts>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <puts+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f7ff bfa7 	b.w	80076bc <_puts_r>
 800776e:	bf00      	nop
 8007770:	200001e0 	.word	0x200001e0

08007774 <siprintf>:
 8007774:	b40e      	push	{r1, r2, r3}
 8007776:	b500      	push	{lr}
 8007778:	b09c      	sub	sp, #112	; 0x70
 800777a:	ab1d      	add	r3, sp, #116	; 0x74
 800777c:	9002      	str	r0, [sp, #8]
 800777e:	9006      	str	r0, [sp, #24]
 8007780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007784:	4809      	ldr	r0, [pc, #36]	; (80077ac <siprintf+0x38>)
 8007786:	9107      	str	r1, [sp, #28]
 8007788:	9104      	str	r1, [sp, #16]
 800778a:	4909      	ldr	r1, [pc, #36]	; (80077b0 <siprintf+0x3c>)
 800778c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007790:	9105      	str	r1, [sp, #20]
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	a902      	add	r1, sp, #8
 8007798:	f000 fab2 	bl	8007d00 <_svfiprintf_r>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	b01c      	add	sp, #112	; 0x70
 80077a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a8:	b003      	add	sp, #12
 80077aa:	4770      	bx	lr
 80077ac:	200001e0 	.word	0x200001e0
 80077b0:	ffff0208 	.word	0xffff0208

080077b4 <__sread>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	460c      	mov	r4, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	f000 f8fc 	bl	80079b8 <_read_r>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	bfab      	itete	ge
 80077c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077c6:	89a3      	ldrhlt	r3, [r4, #12]
 80077c8:	181b      	addge	r3, r3, r0
 80077ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ce:	bfac      	ite	ge
 80077d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077d2:	81a3      	strhlt	r3, [r4, #12]
 80077d4:	bd10      	pop	{r4, pc}

080077d6 <__swrite>:
 80077d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077da:	461f      	mov	r7, r3
 80077dc:	898b      	ldrh	r3, [r1, #12]
 80077de:	05db      	lsls	r3, r3, #23
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	4616      	mov	r6, r2
 80077e6:	d505      	bpl.n	80077f4 <__swrite+0x1e>
 80077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ec:	2302      	movs	r3, #2
 80077ee:	2200      	movs	r2, #0
 80077f0:	f000 f8d0 	bl	8007994 <_lseek_r>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	4632      	mov	r2, r6
 8007802:	463b      	mov	r3, r7
 8007804:	4628      	mov	r0, r5
 8007806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780a:	f000 b8e7 	b.w	80079dc <_write_r>

0800780e <__sseek>:
 800780e:	b510      	push	{r4, lr}
 8007810:	460c      	mov	r4, r1
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 f8bd 	bl	8007994 <_lseek_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	bf15      	itete	ne
 8007820:	6560      	strne	r0, [r4, #84]	; 0x54
 8007822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800782a:	81a3      	strheq	r3, [r4, #12]
 800782c:	bf18      	it	ne
 800782e:	81a3      	strhne	r3, [r4, #12]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__sclose>:
 8007832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007836:	f000 b89d 	b.w	8007974 <_close_r>

0800783a <__swbuf_r>:
 800783a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783c:	460e      	mov	r6, r1
 800783e:	4614      	mov	r4, r2
 8007840:	4605      	mov	r5, r0
 8007842:	b118      	cbz	r0, 800784c <__swbuf_r+0x12>
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b90b      	cbnz	r3, 800784c <__swbuf_r+0x12>
 8007848:	f7ff ff02 	bl	8007650 <__sinit>
 800784c:	69a3      	ldr	r3, [r4, #24]
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	071a      	lsls	r2, r3, #28
 8007854:	d525      	bpl.n	80078a2 <__swbuf_r+0x68>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	b31b      	cbz	r3, 80078a2 <__swbuf_r+0x68>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	6922      	ldr	r2, [r4, #16]
 800785e:	1a98      	subs	r0, r3, r2
 8007860:	6963      	ldr	r3, [r4, #20]
 8007862:	b2f6      	uxtb	r6, r6
 8007864:	4283      	cmp	r3, r0
 8007866:	4637      	mov	r7, r6
 8007868:	dc04      	bgt.n	8007874 <__swbuf_r+0x3a>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 fd5b 	bl	8008328 <_fflush_r>
 8007872:	b9e0      	cbnz	r0, 80078ae <__swbuf_r+0x74>
 8007874:	68a3      	ldr	r3, [r4, #8]
 8007876:	3b01      	subs	r3, #1
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	6022      	str	r2, [r4, #0]
 8007880:	701e      	strb	r6, [r3, #0]
 8007882:	6962      	ldr	r2, [r4, #20]
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	429a      	cmp	r2, r3
 8007888:	d004      	beq.n	8007894 <__swbuf_r+0x5a>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	07db      	lsls	r3, r3, #31
 800788e:	d506      	bpl.n	800789e <__swbuf_r+0x64>
 8007890:	2e0a      	cmp	r6, #10
 8007892:	d104      	bne.n	800789e <__swbuf_r+0x64>
 8007894:	4621      	mov	r1, r4
 8007896:	4628      	mov	r0, r5
 8007898:	f000 fd46 	bl	8008328 <_fflush_r>
 800789c:	b938      	cbnz	r0, 80078ae <__swbuf_r+0x74>
 800789e:	4638      	mov	r0, r7
 80078a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a2:	4621      	mov	r1, r4
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 f805 	bl	80078b4 <__swsetup_r>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0d5      	beq.n	800785a <__swbuf_r+0x20>
 80078ae:	f04f 37ff 	mov.w	r7, #4294967295
 80078b2:	e7f4      	b.n	800789e <__swbuf_r+0x64>

080078b4 <__swsetup_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4b2a      	ldr	r3, [pc, #168]	; (8007960 <__swsetup_r+0xac>)
 80078b8:	4605      	mov	r5, r0
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	460c      	mov	r4, r1
 80078be:	b118      	cbz	r0, 80078c8 <__swsetup_r+0x14>
 80078c0:	6a03      	ldr	r3, [r0, #32]
 80078c2:	b90b      	cbnz	r3, 80078c8 <__swsetup_r+0x14>
 80078c4:	f7ff fec4 	bl	8007650 <__sinit>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ce:	0718      	lsls	r0, r3, #28
 80078d0:	d422      	bmi.n	8007918 <__swsetup_r+0x64>
 80078d2:	06d9      	lsls	r1, r3, #27
 80078d4:	d407      	bmi.n	80078e6 <__swsetup_r+0x32>
 80078d6:	2309      	movs	r3, #9
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	e034      	b.n	8007950 <__swsetup_r+0x9c>
 80078e6:	0758      	lsls	r0, r3, #29
 80078e8:	d512      	bpl.n	8007910 <__swsetup_r+0x5c>
 80078ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ec:	b141      	cbz	r1, 8007900 <__swsetup_r+0x4c>
 80078ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078f2:	4299      	cmp	r1, r3
 80078f4:	d002      	beq.n	80078fc <__swsetup_r+0x48>
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 f8b0 	bl	8007a5c <_free_r>
 80078fc:	2300      	movs	r3, #0
 80078fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	2300      	movs	r3, #0
 800790a:	6063      	str	r3, [r4, #4]
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	6023      	str	r3, [r4, #0]
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f043 0308 	orr.w	r3, r3, #8
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6923      	ldr	r3, [r4, #16]
 800791a:	b94b      	cbnz	r3, 8007930 <__swsetup_r+0x7c>
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007926:	d003      	beq.n	8007930 <__swsetup_r+0x7c>
 8007928:	4621      	mov	r1, r4
 800792a:	4628      	mov	r0, r5
 800792c:	f000 fd4a 	bl	80083c4 <__smakebuf_r>
 8007930:	89a0      	ldrh	r0, [r4, #12]
 8007932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007936:	f010 0301 	ands.w	r3, r0, #1
 800793a:	d00a      	beq.n	8007952 <__swsetup_r+0x9e>
 800793c:	2300      	movs	r3, #0
 800793e:	60a3      	str	r3, [r4, #8]
 8007940:	6963      	ldr	r3, [r4, #20]
 8007942:	425b      	negs	r3, r3
 8007944:	61a3      	str	r3, [r4, #24]
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	b943      	cbnz	r3, 800795c <__swsetup_r+0xa8>
 800794a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800794e:	d1c4      	bne.n	80078da <__swsetup_r+0x26>
 8007950:	bd38      	pop	{r3, r4, r5, pc}
 8007952:	0781      	lsls	r1, r0, #30
 8007954:	bf58      	it	pl
 8007956:	6963      	ldrpl	r3, [r4, #20]
 8007958:	60a3      	str	r3, [r4, #8]
 800795a:	e7f4      	b.n	8007946 <__swsetup_r+0x92>
 800795c:	2000      	movs	r0, #0
 800795e:	e7f7      	b.n	8007950 <__swsetup_r+0x9c>
 8007960:	200001e0 	.word	0x200001e0

08007964 <memset>:
 8007964:	4402      	add	r2, r0
 8007966:	4603      	mov	r3, r0
 8007968:	4293      	cmp	r3, r2
 800796a:	d100      	bne.n	800796e <memset+0xa>
 800796c:	4770      	bx	lr
 800796e:	f803 1b01 	strb.w	r1, [r3], #1
 8007972:	e7f9      	b.n	8007968 <memset+0x4>

08007974 <_close_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d06      	ldr	r5, [pc, #24]	; (8007990 <_close_r+0x1c>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7fb fc4f 	bl	8003222 <_close>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_close_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_close_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20000b34 	.word	0x20000b34

08007994 <_lseek_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	; (80079b4 <_lseek_r+0x20>)
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f7fb fc64 	bl	8003270 <_lseek>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_lseek_r+0x1e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_lseek_r+0x1e>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	20000b34 	.word	0x20000b34

080079b8 <_read_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	; (80079d8 <_read_r+0x20>)
 80079bc:	4604      	mov	r4, r0
 80079be:	4608      	mov	r0, r1
 80079c0:	4611      	mov	r1, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	602a      	str	r2, [r5, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	f7fb fbf2 	bl	80031b0 <_read>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_read_r+0x1e>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_read_r+0x1e>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	20000b34 	.word	0x20000b34

080079dc <_write_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d07      	ldr	r5, [pc, #28]	; (80079fc <_write_r+0x20>)
 80079e0:	4604      	mov	r4, r0
 80079e2:	4608      	mov	r0, r1
 80079e4:	4611      	mov	r1, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	602a      	str	r2, [r5, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f7fb fbfd 	bl	80031ea <_write>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_write_r+0x1e>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_write_r+0x1e>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20000b34 	.word	0x20000b34

08007a00 <__errno>:
 8007a00:	4b01      	ldr	r3, [pc, #4]	; (8007a08 <__errno+0x8>)
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	200001e0 	.word	0x200001e0

08007a0c <__libc_init_array>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4d0d      	ldr	r5, [pc, #52]	; (8007a44 <__libc_init_array+0x38>)
 8007a10:	4c0d      	ldr	r4, [pc, #52]	; (8007a48 <__libc_init_array+0x3c>)
 8007a12:	1b64      	subs	r4, r4, r5
 8007a14:	10a4      	asrs	r4, r4, #2
 8007a16:	2600      	movs	r6, #0
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	d109      	bne.n	8007a30 <__libc_init_array+0x24>
 8007a1c:	4d0b      	ldr	r5, [pc, #44]	; (8007a4c <__libc_init_array+0x40>)
 8007a1e:	4c0c      	ldr	r4, [pc, #48]	; (8007a50 <__libc_init_array+0x44>)
 8007a20:	f000 fd9e 	bl	8008560 <_init>
 8007a24:	1b64      	subs	r4, r4, r5
 8007a26:	10a4      	asrs	r4, r4, #2
 8007a28:	2600      	movs	r6, #0
 8007a2a:	42a6      	cmp	r6, r4
 8007a2c:	d105      	bne.n	8007a3a <__libc_init_array+0x2e>
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a34:	4798      	blx	r3
 8007a36:	3601      	adds	r6, #1
 8007a38:	e7ee      	b.n	8007a18 <__libc_init_array+0xc>
 8007a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3e:	4798      	blx	r3
 8007a40:	3601      	adds	r6, #1
 8007a42:	e7f2      	b.n	8007a2a <__libc_init_array+0x1e>
 8007a44:	08008940 	.word	0x08008940
 8007a48:	08008940 	.word	0x08008940
 8007a4c:	08008940 	.word	0x08008940
 8007a50:	08008944 	.word	0x08008944

08007a54 <__retarget_lock_init_recursive>:
 8007a54:	4770      	bx	lr

08007a56 <__retarget_lock_acquire_recursive>:
 8007a56:	4770      	bx	lr

08007a58 <__retarget_lock_release_recursive>:
 8007a58:	4770      	bx	lr
	...

08007a5c <_free_r>:
 8007a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a5e:	2900      	cmp	r1, #0
 8007a60:	d044      	beq.n	8007aec <_free_r+0x90>
 8007a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a66:	9001      	str	r0, [sp, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a6e:	bfb8      	it	lt
 8007a70:	18e4      	addlt	r4, r4, r3
 8007a72:	f000 f8df 	bl	8007c34 <__malloc_lock>
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <_free_r+0x94>)
 8007a78:	9801      	ldr	r0, [sp, #4]
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	b933      	cbnz	r3, 8007a8c <_free_r+0x30>
 8007a7e:	6063      	str	r3, [r4, #4]
 8007a80:	6014      	str	r4, [r2, #0]
 8007a82:	b003      	add	sp, #12
 8007a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a88:	f000 b8da 	b.w	8007c40 <__malloc_unlock>
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	d908      	bls.n	8007aa2 <_free_r+0x46>
 8007a90:	6825      	ldr	r5, [r4, #0]
 8007a92:	1961      	adds	r1, r4, r5
 8007a94:	428b      	cmp	r3, r1
 8007a96:	bf01      	itttt	eq
 8007a98:	6819      	ldreq	r1, [r3, #0]
 8007a9a:	685b      	ldreq	r3, [r3, #4]
 8007a9c:	1949      	addeq	r1, r1, r5
 8007a9e:	6021      	streq	r1, [r4, #0]
 8007aa0:	e7ed      	b.n	8007a7e <_free_r+0x22>
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b10b      	cbz	r3, 8007aac <_free_r+0x50>
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d9fa      	bls.n	8007aa2 <_free_r+0x46>
 8007aac:	6811      	ldr	r1, [r2, #0]
 8007aae:	1855      	adds	r5, r2, r1
 8007ab0:	42a5      	cmp	r5, r4
 8007ab2:	d10b      	bne.n	8007acc <_free_r+0x70>
 8007ab4:	6824      	ldr	r4, [r4, #0]
 8007ab6:	4421      	add	r1, r4
 8007ab8:	1854      	adds	r4, r2, r1
 8007aba:	42a3      	cmp	r3, r4
 8007abc:	6011      	str	r1, [r2, #0]
 8007abe:	d1e0      	bne.n	8007a82 <_free_r+0x26>
 8007ac0:	681c      	ldr	r4, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	6053      	str	r3, [r2, #4]
 8007ac6:	440c      	add	r4, r1
 8007ac8:	6014      	str	r4, [r2, #0]
 8007aca:	e7da      	b.n	8007a82 <_free_r+0x26>
 8007acc:	d902      	bls.n	8007ad4 <_free_r+0x78>
 8007ace:	230c      	movs	r3, #12
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	e7d6      	b.n	8007a82 <_free_r+0x26>
 8007ad4:	6825      	ldr	r5, [r4, #0]
 8007ad6:	1961      	adds	r1, r4, r5
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	bf04      	itt	eq
 8007adc:	6819      	ldreq	r1, [r3, #0]
 8007ade:	685b      	ldreq	r3, [r3, #4]
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	bf04      	itt	eq
 8007ae4:	1949      	addeq	r1, r1, r5
 8007ae6:	6021      	streq	r1, [r4, #0]
 8007ae8:	6054      	str	r4, [r2, #4]
 8007aea:	e7ca      	b.n	8007a82 <_free_r+0x26>
 8007aec:	b003      	add	sp, #12
 8007aee:	bd30      	pop	{r4, r5, pc}
 8007af0:	20000b3c 	.word	0x20000b3c

08007af4 <sbrk_aligned>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4e0e      	ldr	r6, [pc, #56]	; (8007b30 <sbrk_aligned+0x3c>)
 8007af8:	460c      	mov	r4, r1
 8007afa:	6831      	ldr	r1, [r6, #0]
 8007afc:	4605      	mov	r5, r0
 8007afe:	b911      	cbnz	r1, 8007b06 <sbrk_aligned+0x12>
 8007b00:	f000 fcd8 	bl	80084b4 <_sbrk_r>
 8007b04:	6030      	str	r0, [r6, #0]
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fcd3 	bl	80084b4 <_sbrk_r>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d00a      	beq.n	8007b28 <sbrk_aligned+0x34>
 8007b12:	1cc4      	adds	r4, r0, #3
 8007b14:	f024 0403 	bic.w	r4, r4, #3
 8007b18:	42a0      	cmp	r0, r4
 8007b1a:	d007      	beq.n	8007b2c <sbrk_aligned+0x38>
 8007b1c:	1a21      	subs	r1, r4, r0
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fcc8 	bl	80084b4 <_sbrk_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d101      	bne.n	8007b2c <sbrk_aligned+0x38>
 8007b28:	f04f 34ff 	mov.w	r4, #4294967295
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	20000b40 	.word	0x20000b40

08007b34 <_malloc_r>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	1ccd      	adds	r5, r1, #3
 8007b3a:	f025 0503 	bic.w	r5, r5, #3
 8007b3e:	3508      	adds	r5, #8
 8007b40:	2d0c      	cmp	r5, #12
 8007b42:	bf38      	it	cc
 8007b44:	250c      	movcc	r5, #12
 8007b46:	2d00      	cmp	r5, #0
 8007b48:	4607      	mov	r7, r0
 8007b4a:	db01      	blt.n	8007b50 <_malloc_r+0x1c>
 8007b4c:	42a9      	cmp	r1, r5
 8007b4e:	d905      	bls.n	8007b5c <_malloc_r+0x28>
 8007b50:	230c      	movs	r3, #12
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	2600      	movs	r6, #0
 8007b56:	4630      	mov	r0, r6
 8007b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c30 <_malloc_r+0xfc>
 8007b60:	f000 f868 	bl	8007c34 <__malloc_lock>
 8007b64:	f8d8 3000 	ldr.w	r3, [r8]
 8007b68:	461c      	mov	r4, r3
 8007b6a:	bb5c      	cbnz	r4, 8007bc4 <_malloc_r+0x90>
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4638      	mov	r0, r7
 8007b70:	f7ff ffc0 	bl	8007af4 <sbrk_aligned>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	4604      	mov	r4, r0
 8007b78:	d155      	bne.n	8007c26 <_malloc_r+0xf2>
 8007b7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007b7e:	4626      	mov	r6, r4
 8007b80:	2e00      	cmp	r6, #0
 8007b82:	d145      	bne.n	8007c10 <_malloc_r+0xdc>
 8007b84:	2c00      	cmp	r4, #0
 8007b86:	d048      	beq.n	8007c1a <_malloc_r+0xe6>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	eb04 0903 	add.w	r9, r4, r3
 8007b92:	f000 fc8f 	bl	80084b4 <_sbrk_r>
 8007b96:	4581      	cmp	r9, r0
 8007b98:	d13f      	bne.n	8007c1a <_malloc_r+0xe6>
 8007b9a:	6821      	ldr	r1, [r4, #0]
 8007b9c:	1a6d      	subs	r5, r5, r1
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	f7ff ffa7 	bl	8007af4 <sbrk_aligned>
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d037      	beq.n	8007c1a <_malloc_r+0xe6>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	442b      	add	r3, r5
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d038      	beq.n	8007c2a <_malloc_r+0xf6>
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	42a2      	cmp	r2, r4
 8007bbc:	d12b      	bne.n	8007c16 <_malloc_r+0xe2>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	e00f      	b.n	8007be4 <_malloc_r+0xb0>
 8007bc4:	6822      	ldr	r2, [r4, #0]
 8007bc6:	1b52      	subs	r2, r2, r5
 8007bc8:	d41f      	bmi.n	8007c0a <_malloc_r+0xd6>
 8007bca:	2a0b      	cmp	r2, #11
 8007bcc:	d917      	bls.n	8007bfe <_malloc_r+0xca>
 8007bce:	1961      	adds	r1, r4, r5
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	6025      	str	r5, [r4, #0]
 8007bd4:	bf18      	it	ne
 8007bd6:	6059      	strne	r1, [r3, #4]
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	bf08      	it	eq
 8007bdc:	f8c8 1000 	streq.w	r1, [r8]
 8007be0:	5162      	str	r2, [r4, r5]
 8007be2:	604b      	str	r3, [r1, #4]
 8007be4:	4638      	mov	r0, r7
 8007be6:	f104 060b 	add.w	r6, r4, #11
 8007bea:	f000 f829 	bl	8007c40 <__malloc_unlock>
 8007bee:	f026 0607 	bic.w	r6, r6, #7
 8007bf2:	1d23      	adds	r3, r4, #4
 8007bf4:	1af2      	subs	r2, r6, r3
 8007bf6:	d0ae      	beq.n	8007b56 <_malloc_r+0x22>
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	50a3      	str	r3, [r4, r2]
 8007bfc:	e7ab      	b.n	8007b56 <_malloc_r+0x22>
 8007bfe:	42a3      	cmp	r3, r4
 8007c00:	6862      	ldr	r2, [r4, #4]
 8007c02:	d1dd      	bne.n	8007bc0 <_malloc_r+0x8c>
 8007c04:	f8c8 2000 	str.w	r2, [r8]
 8007c08:	e7ec      	b.n	8007be4 <_malloc_r+0xb0>
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	6864      	ldr	r4, [r4, #4]
 8007c0e:	e7ac      	b.n	8007b6a <_malloc_r+0x36>
 8007c10:	4634      	mov	r4, r6
 8007c12:	6876      	ldr	r6, [r6, #4]
 8007c14:	e7b4      	b.n	8007b80 <_malloc_r+0x4c>
 8007c16:	4613      	mov	r3, r2
 8007c18:	e7cc      	b.n	8007bb4 <_malloc_r+0x80>
 8007c1a:	230c      	movs	r3, #12
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f000 f80e 	bl	8007c40 <__malloc_unlock>
 8007c24:	e797      	b.n	8007b56 <_malloc_r+0x22>
 8007c26:	6025      	str	r5, [r4, #0]
 8007c28:	e7dc      	b.n	8007be4 <_malloc_r+0xb0>
 8007c2a:	605b      	str	r3, [r3, #4]
 8007c2c:	deff      	udf	#255	; 0xff
 8007c2e:	bf00      	nop
 8007c30:	20000b3c 	.word	0x20000b3c

08007c34 <__malloc_lock>:
 8007c34:	4801      	ldr	r0, [pc, #4]	; (8007c3c <__malloc_lock+0x8>)
 8007c36:	f7ff bf0e 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	20000b38 	.word	0x20000b38

08007c40 <__malloc_unlock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__malloc_unlock+0x8>)
 8007c42:	f7ff bf09 	b.w	8007a58 <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	20000b38 	.word	0x20000b38

08007c4c <__ssputs_r>:
 8007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	688e      	ldr	r6, [r1, #8]
 8007c52:	461f      	mov	r7, r3
 8007c54:	42be      	cmp	r6, r7
 8007c56:	680b      	ldr	r3, [r1, #0]
 8007c58:	4682      	mov	sl, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	4690      	mov	r8, r2
 8007c5e:	d82c      	bhi.n	8007cba <__ssputs_r+0x6e>
 8007c60:	898a      	ldrh	r2, [r1, #12]
 8007c62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c66:	d026      	beq.n	8007cb6 <__ssputs_r+0x6a>
 8007c68:	6965      	ldr	r5, [r4, #20]
 8007c6a:	6909      	ldr	r1, [r1, #16]
 8007c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c70:	eba3 0901 	sub.w	r9, r3, r1
 8007c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c78:	1c7b      	adds	r3, r7, #1
 8007c7a:	444b      	add	r3, r9
 8007c7c:	106d      	asrs	r5, r5, #1
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	bf38      	it	cc
 8007c82:	461d      	movcc	r5, r3
 8007c84:	0553      	lsls	r3, r2, #21
 8007c86:	d527      	bpl.n	8007cd8 <__ssputs_r+0x8c>
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7ff ff53 	bl	8007b34 <_malloc_r>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	b360      	cbz	r0, 8007cec <__ssputs_r+0xa0>
 8007c92:	6921      	ldr	r1, [r4, #16]
 8007c94:	464a      	mov	r2, r9
 8007c96:	f000 fc1d 	bl	80084d4 <memcpy>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	6126      	str	r6, [r4, #16]
 8007ca8:	6165      	str	r5, [r4, #20]
 8007caa:	444e      	add	r6, r9
 8007cac:	eba5 0509 	sub.w	r5, r5, r9
 8007cb0:	6026      	str	r6, [r4, #0]
 8007cb2:	60a5      	str	r5, [r4, #8]
 8007cb4:	463e      	mov	r6, r7
 8007cb6:	42be      	cmp	r6, r7
 8007cb8:	d900      	bls.n	8007cbc <__ssputs_r+0x70>
 8007cba:	463e      	mov	r6, r7
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	4641      	mov	r1, r8
 8007cc2:	f000 fbbb 	bl	800843c <memmove>
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	1b9b      	subs	r3, r3, r6
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	4433      	add	r3, r6
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd8:	462a      	mov	r2, r5
 8007cda:	f000 fc09 	bl	80084f0 <_realloc_r>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d1e0      	bne.n	8007ca6 <__ssputs_r+0x5a>
 8007ce4:	6921      	ldr	r1, [r4, #16]
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	f7ff feb8 	bl	8007a5c <_free_r>
 8007cec:	230c      	movs	r3, #12
 8007cee:	f8ca 3000 	str.w	r3, [sl]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	e7e9      	b.n	8007cd4 <__ssputs_r+0x88>

08007d00 <_svfiprintf_r>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	4698      	mov	r8, r3
 8007d06:	898b      	ldrh	r3, [r1, #12]
 8007d08:	061b      	lsls	r3, r3, #24
 8007d0a:	b09d      	sub	sp, #116	; 0x74
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	4614      	mov	r4, r2
 8007d12:	d50e      	bpl.n	8007d32 <_svfiprintf_r+0x32>
 8007d14:	690b      	ldr	r3, [r1, #16]
 8007d16:	b963      	cbnz	r3, 8007d32 <_svfiprintf_r+0x32>
 8007d18:	2140      	movs	r1, #64	; 0x40
 8007d1a:	f7ff ff0b 	bl	8007b34 <_malloc_r>
 8007d1e:	6028      	str	r0, [r5, #0]
 8007d20:	6128      	str	r0, [r5, #16]
 8007d22:	b920      	cbnz	r0, 8007d2e <_svfiprintf_r+0x2e>
 8007d24:	230c      	movs	r3, #12
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2c:	e0d0      	b.n	8007ed0 <_svfiprintf_r+0x1d0>
 8007d2e:	2340      	movs	r3, #64	; 0x40
 8007d30:	616b      	str	r3, [r5, #20]
 8007d32:	2300      	movs	r3, #0
 8007d34:	9309      	str	r3, [sp, #36]	; 0x24
 8007d36:	2320      	movs	r3, #32
 8007d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d40:	2330      	movs	r3, #48	; 0x30
 8007d42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ee8 <_svfiprintf_r+0x1e8>
 8007d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d4a:	f04f 0901 	mov.w	r9, #1
 8007d4e:	4623      	mov	r3, r4
 8007d50:	469a      	mov	sl, r3
 8007d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d56:	b10a      	cbz	r2, 8007d5c <_svfiprintf_r+0x5c>
 8007d58:	2a25      	cmp	r2, #37	; 0x25
 8007d5a:	d1f9      	bne.n	8007d50 <_svfiprintf_r+0x50>
 8007d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d60:	d00b      	beq.n	8007d7a <_svfiprintf_r+0x7a>
 8007d62:	465b      	mov	r3, fp
 8007d64:	4622      	mov	r2, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff ff6f 	bl	8007c4c <__ssputs_r>
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f000 80a9 	beq.w	8007ec6 <_svfiprintf_r+0x1c6>
 8007d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d76:	445a      	add	r2, fp
 8007d78:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80a1 	beq.w	8007ec6 <_svfiprintf_r+0x1c6>
 8007d84:	2300      	movs	r3, #0
 8007d86:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d8e:	f10a 0a01 	add.w	sl, sl, #1
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	9307      	str	r3, [sp, #28]
 8007d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d9c:	4654      	mov	r4, sl
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da4:	4850      	ldr	r0, [pc, #320]	; (8007ee8 <_svfiprintf_r+0x1e8>)
 8007da6:	f7f8 fa23 	bl	80001f0 <memchr>
 8007daa:	9a04      	ldr	r2, [sp, #16]
 8007dac:	b9d8      	cbnz	r0, 8007de6 <_svfiprintf_r+0xe6>
 8007dae:	06d0      	lsls	r0, r2, #27
 8007db0:	bf44      	itt	mi
 8007db2:	2320      	movmi	r3, #32
 8007db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db8:	0711      	lsls	r1, r2, #28
 8007dba:	bf44      	itt	mi
 8007dbc:	232b      	movmi	r3, #43	; 0x2b
 8007dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc8:	d015      	beq.n	8007df6 <_svfiprintf_r+0xf6>
 8007dca:	9a07      	ldr	r2, [sp, #28]
 8007dcc:	4654      	mov	r4, sl
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f04f 0c0a 	mov.w	ip, #10
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dda:	3b30      	subs	r3, #48	; 0x30
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	d94d      	bls.n	8007e7c <_svfiprintf_r+0x17c>
 8007de0:	b1b0      	cbz	r0, 8007e10 <_svfiprintf_r+0x110>
 8007de2:	9207      	str	r2, [sp, #28]
 8007de4:	e014      	b.n	8007e10 <_svfiprintf_r+0x110>
 8007de6:	eba0 0308 	sub.w	r3, r0, r8
 8007dea:	fa09 f303 	lsl.w	r3, r9, r3
 8007dee:	4313      	orrs	r3, r2
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	46a2      	mov	sl, r4
 8007df4:	e7d2      	b.n	8007d9c <_svfiprintf_r+0x9c>
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	1d19      	adds	r1, r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	9103      	str	r1, [sp, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfbb      	ittet	lt
 8007e02:	425b      	neglt	r3, r3
 8007e04:	f042 0202 	orrlt.w	r2, r2, #2
 8007e08:	9307      	strge	r3, [sp, #28]
 8007e0a:	9307      	strlt	r3, [sp, #28]
 8007e0c:	bfb8      	it	lt
 8007e0e:	9204      	strlt	r2, [sp, #16]
 8007e10:	7823      	ldrb	r3, [r4, #0]
 8007e12:	2b2e      	cmp	r3, #46	; 0x2e
 8007e14:	d10c      	bne.n	8007e30 <_svfiprintf_r+0x130>
 8007e16:	7863      	ldrb	r3, [r4, #1]
 8007e18:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1a:	d134      	bne.n	8007e86 <_svfiprintf_r+0x186>
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	1d1a      	adds	r2, r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	9203      	str	r2, [sp, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	bfb8      	it	lt
 8007e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e2c:	3402      	adds	r4, #2
 8007e2e:	9305      	str	r3, [sp, #20]
 8007e30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ef8 <_svfiprintf_r+0x1f8>
 8007e34:	7821      	ldrb	r1, [r4, #0]
 8007e36:	2203      	movs	r2, #3
 8007e38:	4650      	mov	r0, sl
 8007e3a:	f7f8 f9d9 	bl	80001f0 <memchr>
 8007e3e:	b138      	cbz	r0, 8007e50 <_svfiprintf_r+0x150>
 8007e40:	9b04      	ldr	r3, [sp, #16]
 8007e42:	eba0 000a 	sub.w	r0, r0, sl
 8007e46:	2240      	movs	r2, #64	; 0x40
 8007e48:	4082      	lsls	r2, r0
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	4825      	ldr	r0, [pc, #148]	; (8007eec <_svfiprintf_r+0x1ec>)
 8007e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e5a:	2206      	movs	r2, #6
 8007e5c:	f7f8 f9c8 	bl	80001f0 <memchr>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d038      	beq.n	8007ed6 <_svfiprintf_r+0x1d6>
 8007e64:	4b22      	ldr	r3, [pc, #136]	; (8007ef0 <_svfiprintf_r+0x1f0>)
 8007e66:	bb1b      	cbnz	r3, 8007eb0 <_svfiprintf_r+0x1b0>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	3307      	adds	r3, #7
 8007e6c:	f023 0307 	bic.w	r3, r3, #7
 8007e70:	3308      	adds	r3, #8
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e76:	4433      	add	r3, r6
 8007e78:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7a:	e768      	b.n	8007d4e <_svfiprintf_r+0x4e>
 8007e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e80:	460c      	mov	r4, r1
 8007e82:	2001      	movs	r0, #1
 8007e84:	e7a6      	b.n	8007dd4 <_svfiprintf_r+0xd4>
 8007e86:	2300      	movs	r3, #0
 8007e88:	3401      	adds	r4, #1
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f04f 0c0a 	mov.w	ip, #10
 8007e92:	4620      	mov	r0, r4
 8007e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e98:	3a30      	subs	r2, #48	; 0x30
 8007e9a:	2a09      	cmp	r2, #9
 8007e9c:	d903      	bls.n	8007ea6 <_svfiprintf_r+0x1a6>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0c6      	beq.n	8007e30 <_svfiprintf_r+0x130>
 8007ea2:	9105      	str	r1, [sp, #20]
 8007ea4:	e7c4      	b.n	8007e30 <_svfiprintf_r+0x130>
 8007ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eaa:	4604      	mov	r4, r0
 8007eac:	2301      	movs	r3, #1
 8007eae:	e7f0      	b.n	8007e92 <_svfiprintf_r+0x192>
 8007eb0:	ab03      	add	r3, sp, #12
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <_svfiprintf_r+0x1f4>)
 8007eb8:	a904      	add	r1, sp, #16
 8007eba:	4638      	mov	r0, r7
 8007ebc:	f3af 8000 	nop.w
 8007ec0:	1c42      	adds	r2, r0, #1
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	d1d6      	bne.n	8007e74 <_svfiprintf_r+0x174>
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	065b      	lsls	r3, r3, #25
 8007eca:	f53f af2d 	bmi.w	8007d28 <_svfiprintf_r+0x28>
 8007ece:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed0:	b01d      	add	sp, #116	; 0x74
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	462a      	mov	r2, r5
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <_svfiprintf_r+0x1f4>)
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f000 f879 	bl	8007fd8 <_printf_i>
 8007ee6:	e7eb      	b.n	8007ec0 <_svfiprintf_r+0x1c0>
 8007ee8:	08008904 	.word	0x08008904
 8007eec:	0800890e 	.word	0x0800890e
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	08007c4d 	.word	0x08007c4d
 8007ef8:	0800890a 	.word	0x0800890a

08007efc <_printf_common>:
 8007efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f00:	4616      	mov	r6, r2
 8007f02:	4699      	mov	r9, r3
 8007f04:	688a      	ldr	r2, [r1, #8]
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	bfb8      	it	lt
 8007f10:	4613      	movlt	r3, r2
 8007f12:	6033      	str	r3, [r6, #0]
 8007f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f18:	4607      	mov	r7, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	b10a      	cbz	r2, 8007f22 <_printf_common+0x26>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	6033      	str	r3, [r6, #0]
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	0699      	lsls	r1, r3, #26
 8007f26:	bf42      	ittt	mi
 8007f28:	6833      	ldrmi	r3, [r6, #0]
 8007f2a:	3302      	addmi	r3, #2
 8007f2c:	6033      	strmi	r3, [r6, #0]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	f015 0506 	ands.w	r5, r5, #6
 8007f34:	d106      	bne.n	8007f44 <_printf_common+0x48>
 8007f36:	f104 0a19 	add.w	sl, r4, #25
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	6832      	ldr	r2, [r6, #0]
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	dc26      	bgt.n	8007f92 <_printf_common+0x96>
 8007f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f48:	1e13      	subs	r3, r2, #0
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	bf18      	it	ne
 8007f4e:	2301      	movne	r3, #1
 8007f50:	0692      	lsls	r2, r2, #26
 8007f52:	d42b      	bmi.n	8007fac <_printf_common+0xb0>
 8007f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	47c0      	blx	r8
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d01e      	beq.n	8007fa0 <_printf_common+0xa4>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	6922      	ldr	r2, [r4, #16]
 8007f66:	f003 0306 	and.w	r3, r3, #6
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	bf02      	ittt	eq
 8007f6e:	68e5      	ldreq	r5, [r4, #12]
 8007f70:	6833      	ldreq	r3, [r6, #0]
 8007f72:	1aed      	subeq	r5, r5, r3
 8007f74:	68a3      	ldr	r3, [r4, #8]
 8007f76:	bf0c      	ite	eq
 8007f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f7c:	2500      	movne	r5, #0
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	bfc4      	itt	gt
 8007f82:	1a9b      	subgt	r3, r3, r2
 8007f84:	18ed      	addgt	r5, r5, r3
 8007f86:	2600      	movs	r6, #0
 8007f88:	341a      	adds	r4, #26
 8007f8a:	42b5      	cmp	r5, r6
 8007f8c:	d11a      	bne.n	8007fc4 <_printf_common+0xc8>
 8007f8e:	2000      	movs	r0, #0
 8007f90:	e008      	b.n	8007fa4 <_printf_common+0xa8>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4652      	mov	r2, sl
 8007f96:	4649      	mov	r1, r9
 8007f98:	4638      	mov	r0, r7
 8007f9a:	47c0      	blx	r8
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d103      	bne.n	8007fa8 <_printf_common+0xac>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa8:	3501      	adds	r5, #1
 8007faa:	e7c6      	b.n	8007f3a <_printf_common+0x3e>
 8007fac:	18e1      	adds	r1, r4, r3
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	2030      	movs	r0, #48	; 0x30
 8007fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fb6:	4422      	add	r2, r4
 8007fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	e7c7      	b.n	8007f54 <_printf_common+0x58>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4638      	mov	r0, r7
 8007fcc:	47c0      	blx	r8
 8007fce:	3001      	adds	r0, #1
 8007fd0:	d0e6      	beq.n	8007fa0 <_printf_common+0xa4>
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7d9      	b.n	8007f8a <_printf_common+0x8e>
	...

08007fd8 <_printf_i>:
 8007fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fdc:	7e0f      	ldrb	r7, [r1, #24]
 8007fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fe0:	2f78      	cmp	r7, #120	; 0x78
 8007fe2:	4691      	mov	r9, r2
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	469a      	mov	sl, r3
 8007fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fee:	d807      	bhi.n	8008000 <_printf_i+0x28>
 8007ff0:	2f62      	cmp	r7, #98	; 0x62
 8007ff2:	d80a      	bhi.n	800800a <_printf_i+0x32>
 8007ff4:	2f00      	cmp	r7, #0
 8007ff6:	f000 80d4 	beq.w	80081a2 <_printf_i+0x1ca>
 8007ffa:	2f58      	cmp	r7, #88	; 0x58
 8007ffc:	f000 80c0 	beq.w	8008180 <_printf_i+0x1a8>
 8008000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008008:	e03a      	b.n	8008080 <_printf_i+0xa8>
 800800a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800800e:	2b15      	cmp	r3, #21
 8008010:	d8f6      	bhi.n	8008000 <_printf_i+0x28>
 8008012:	a101      	add	r1, pc, #4	; (adr r1, 8008018 <_printf_i+0x40>)
 8008014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008018:	08008071 	.word	0x08008071
 800801c:	08008085 	.word	0x08008085
 8008020:	08008001 	.word	0x08008001
 8008024:	08008001 	.word	0x08008001
 8008028:	08008001 	.word	0x08008001
 800802c:	08008001 	.word	0x08008001
 8008030:	08008085 	.word	0x08008085
 8008034:	08008001 	.word	0x08008001
 8008038:	08008001 	.word	0x08008001
 800803c:	08008001 	.word	0x08008001
 8008040:	08008001 	.word	0x08008001
 8008044:	08008189 	.word	0x08008189
 8008048:	080080b1 	.word	0x080080b1
 800804c:	08008143 	.word	0x08008143
 8008050:	08008001 	.word	0x08008001
 8008054:	08008001 	.word	0x08008001
 8008058:	080081ab 	.word	0x080081ab
 800805c:	08008001 	.word	0x08008001
 8008060:	080080b1 	.word	0x080080b1
 8008064:	08008001 	.word	0x08008001
 8008068:	08008001 	.word	0x08008001
 800806c:	0800814b 	.word	0x0800814b
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	1d1a      	adds	r2, r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	602a      	str	r2, [r5, #0]
 8008078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800807c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008080:	2301      	movs	r3, #1
 8008082:	e09f      	b.n	80081c4 <_printf_i+0x1ec>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	0607      	lsls	r7, r0, #24
 800808a:	f103 0104 	add.w	r1, r3, #4
 800808e:	6029      	str	r1, [r5, #0]
 8008090:	d501      	bpl.n	8008096 <_printf_i+0xbe>
 8008092:	681e      	ldr	r6, [r3, #0]
 8008094:	e003      	b.n	800809e <_printf_i+0xc6>
 8008096:	0646      	lsls	r6, r0, #25
 8008098:	d5fb      	bpl.n	8008092 <_printf_i+0xba>
 800809a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800809e:	2e00      	cmp	r6, #0
 80080a0:	da03      	bge.n	80080aa <_printf_i+0xd2>
 80080a2:	232d      	movs	r3, #45	; 0x2d
 80080a4:	4276      	negs	r6, r6
 80080a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080aa:	485a      	ldr	r0, [pc, #360]	; (8008214 <_printf_i+0x23c>)
 80080ac:	230a      	movs	r3, #10
 80080ae:	e012      	b.n	80080d6 <_printf_i+0xfe>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	6820      	ldr	r0, [r4, #0]
 80080b4:	1d19      	adds	r1, r3, #4
 80080b6:	6029      	str	r1, [r5, #0]
 80080b8:	0605      	lsls	r5, r0, #24
 80080ba:	d501      	bpl.n	80080c0 <_printf_i+0xe8>
 80080bc:	681e      	ldr	r6, [r3, #0]
 80080be:	e002      	b.n	80080c6 <_printf_i+0xee>
 80080c0:	0641      	lsls	r1, r0, #25
 80080c2:	d5fb      	bpl.n	80080bc <_printf_i+0xe4>
 80080c4:	881e      	ldrh	r6, [r3, #0]
 80080c6:	4853      	ldr	r0, [pc, #332]	; (8008214 <_printf_i+0x23c>)
 80080c8:	2f6f      	cmp	r7, #111	; 0x6f
 80080ca:	bf0c      	ite	eq
 80080cc:	2308      	moveq	r3, #8
 80080ce:	230a      	movne	r3, #10
 80080d0:	2100      	movs	r1, #0
 80080d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080d6:	6865      	ldr	r5, [r4, #4]
 80080d8:	60a5      	str	r5, [r4, #8]
 80080da:	2d00      	cmp	r5, #0
 80080dc:	bfa2      	ittt	ge
 80080de:	6821      	ldrge	r1, [r4, #0]
 80080e0:	f021 0104 	bicge.w	r1, r1, #4
 80080e4:	6021      	strge	r1, [r4, #0]
 80080e6:	b90e      	cbnz	r6, 80080ec <_printf_i+0x114>
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	d04b      	beq.n	8008184 <_printf_i+0x1ac>
 80080ec:	4615      	mov	r5, r2
 80080ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80080f2:	fb03 6711 	mls	r7, r3, r1, r6
 80080f6:	5dc7      	ldrb	r7, [r0, r7]
 80080f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080fc:	4637      	mov	r7, r6
 80080fe:	42bb      	cmp	r3, r7
 8008100:	460e      	mov	r6, r1
 8008102:	d9f4      	bls.n	80080ee <_printf_i+0x116>
 8008104:	2b08      	cmp	r3, #8
 8008106:	d10b      	bne.n	8008120 <_printf_i+0x148>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	07de      	lsls	r6, r3, #31
 800810c:	d508      	bpl.n	8008120 <_printf_i+0x148>
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	6861      	ldr	r1, [r4, #4]
 8008112:	4299      	cmp	r1, r3
 8008114:	bfde      	ittt	le
 8008116:	2330      	movle	r3, #48	; 0x30
 8008118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800811c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008120:	1b52      	subs	r2, r2, r5
 8008122:	6122      	str	r2, [r4, #16]
 8008124:	f8cd a000 	str.w	sl, [sp]
 8008128:	464b      	mov	r3, r9
 800812a:	aa03      	add	r2, sp, #12
 800812c:	4621      	mov	r1, r4
 800812e:	4640      	mov	r0, r8
 8008130:	f7ff fee4 	bl	8007efc <_printf_common>
 8008134:	3001      	adds	r0, #1
 8008136:	d14a      	bne.n	80081ce <_printf_i+0x1f6>
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	b004      	add	sp, #16
 800813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	f043 0320 	orr.w	r3, r3, #32
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	4833      	ldr	r0, [pc, #204]	; (8008218 <_printf_i+0x240>)
 800814c:	2778      	movs	r7, #120	; 0x78
 800814e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	6829      	ldr	r1, [r5, #0]
 8008156:	061f      	lsls	r7, r3, #24
 8008158:	f851 6b04 	ldr.w	r6, [r1], #4
 800815c:	d402      	bmi.n	8008164 <_printf_i+0x18c>
 800815e:	065f      	lsls	r7, r3, #25
 8008160:	bf48      	it	mi
 8008162:	b2b6      	uxthmi	r6, r6
 8008164:	07df      	lsls	r7, r3, #31
 8008166:	bf48      	it	mi
 8008168:	f043 0320 	orrmi.w	r3, r3, #32
 800816c:	6029      	str	r1, [r5, #0]
 800816e:	bf48      	it	mi
 8008170:	6023      	strmi	r3, [r4, #0]
 8008172:	b91e      	cbnz	r6, 800817c <_printf_i+0x1a4>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	f023 0320 	bic.w	r3, r3, #32
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	2310      	movs	r3, #16
 800817e:	e7a7      	b.n	80080d0 <_printf_i+0xf8>
 8008180:	4824      	ldr	r0, [pc, #144]	; (8008214 <_printf_i+0x23c>)
 8008182:	e7e4      	b.n	800814e <_printf_i+0x176>
 8008184:	4615      	mov	r5, r2
 8008186:	e7bd      	b.n	8008104 <_printf_i+0x12c>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	6826      	ldr	r6, [r4, #0]
 800818c:	6961      	ldr	r1, [r4, #20]
 800818e:	1d18      	adds	r0, r3, #4
 8008190:	6028      	str	r0, [r5, #0]
 8008192:	0635      	lsls	r5, r6, #24
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	d501      	bpl.n	800819c <_printf_i+0x1c4>
 8008198:	6019      	str	r1, [r3, #0]
 800819a:	e002      	b.n	80081a2 <_printf_i+0x1ca>
 800819c:	0670      	lsls	r0, r6, #25
 800819e:	d5fb      	bpl.n	8008198 <_printf_i+0x1c0>
 80081a0:	8019      	strh	r1, [r3, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	6123      	str	r3, [r4, #16]
 80081a6:	4615      	mov	r5, r2
 80081a8:	e7bc      	b.n	8008124 <_printf_i+0x14c>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	1d1a      	adds	r2, r3, #4
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	681d      	ldr	r5, [r3, #0]
 80081b2:	6862      	ldr	r2, [r4, #4]
 80081b4:	2100      	movs	r1, #0
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7f8 f81a 	bl	80001f0 <memchr>
 80081bc:	b108      	cbz	r0, 80081c2 <_printf_i+0x1ea>
 80081be:	1b40      	subs	r0, r0, r5
 80081c0:	6060      	str	r0, [r4, #4]
 80081c2:	6863      	ldr	r3, [r4, #4]
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	2300      	movs	r3, #0
 80081c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081cc:	e7aa      	b.n	8008124 <_printf_i+0x14c>
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	462a      	mov	r2, r5
 80081d2:	4649      	mov	r1, r9
 80081d4:	4640      	mov	r0, r8
 80081d6:	47d0      	blx	sl
 80081d8:	3001      	adds	r0, #1
 80081da:	d0ad      	beq.n	8008138 <_printf_i+0x160>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	079b      	lsls	r3, r3, #30
 80081e0:	d413      	bmi.n	800820a <_printf_i+0x232>
 80081e2:	68e0      	ldr	r0, [r4, #12]
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	4298      	cmp	r0, r3
 80081e8:	bfb8      	it	lt
 80081ea:	4618      	movlt	r0, r3
 80081ec:	e7a6      	b.n	800813c <_printf_i+0x164>
 80081ee:	2301      	movs	r3, #1
 80081f0:	4632      	mov	r2, r6
 80081f2:	4649      	mov	r1, r9
 80081f4:	4640      	mov	r0, r8
 80081f6:	47d0      	blx	sl
 80081f8:	3001      	adds	r0, #1
 80081fa:	d09d      	beq.n	8008138 <_printf_i+0x160>
 80081fc:	3501      	adds	r5, #1
 80081fe:	68e3      	ldr	r3, [r4, #12]
 8008200:	9903      	ldr	r1, [sp, #12]
 8008202:	1a5b      	subs	r3, r3, r1
 8008204:	42ab      	cmp	r3, r5
 8008206:	dcf2      	bgt.n	80081ee <_printf_i+0x216>
 8008208:	e7eb      	b.n	80081e2 <_printf_i+0x20a>
 800820a:	2500      	movs	r5, #0
 800820c:	f104 0619 	add.w	r6, r4, #25
 8008210:	e7f5      	b.n	80081fe <_printf_i+0x226>
 8008212:	bf00      	nop
 8008214:	08008915 	.word	0x08008915
 8008218:	08008926 	.word	0x08008926

0800821c <__sflush_r>:
 800821c:	898a      	ldrh	r2, [r1, #12]
 800821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008222:	4605      	mov	r5, r0
 8008224:	0710      	lsls	r0, r2, #28
 8008226:	460c      	mov	r4, r1
 8008228:	d458      	bmi.n	80082dc <__sflush_r+0xc0>
 800822a:	684b      	ldr	r3, [r1, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dc05      	bgt.n	800823c <__sflush_r+0x20>
 8008230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	dc02      	bgt.n	800823c <__sflush_r+0x20>
 8008236:	2000      	movs	r0, #0
 8008238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800823e:	2e00      	cmp	r6, #0
 8008240:	d0f9      	beq.n	8008236 <__sflush_r+0x1a>
 8008242:	2300      	movs	r3, #0
 8008244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008248:	682f      	ldr	r7, [r5, #0]
 800824a:	6a21      	ldr	r1, [r4, #32]
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	d032      	beq.n	80082b6 <__sflush_r+0x9a>
 8008250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	075a      	lsls	r2, r3, #29
 8008256:	d505      	bpl.n	8008264 <__sflush_r+0x48>
 8008258:	6863      	ldr	r3, [r4, #4]
 800825a:	1ac0      	subs	r0, r0, r3
 800825c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800825e:	b10b      	cbz	r3, 8008264 <__sflush_r+0x48>
 8008260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008262:	1ac0      	subs	r0, r0, r3
 8008264:	2300      	movs	r3, #0
 8008266:	4602      	mov	r2, r0
 8008268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800826a:	6a21      	ldr	r1, [r4, #32]
 800826c:	4628      	mov	r0, r5
 800826e:	47b0      	blx	r6
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	d106      	bne.n	8008284 <__sflush_r+0x68>
 8008276:	6829      	ldr	r1, [r5, #0]
 8008278:	291d      	cmp	r1, #29
 800827a:	d82b      	bhi.n	80082d4 <__sflush_r+0xb8>
 800827c:	4a29      	ldr	r2, [pc, #164]	; (8008324 <__sflush_r+0x108>)
 800827e:	410a      	asrs	r2, r1
 8008280:	07d6      	lsls	r6, r2, #31
 8008282:	d427      	bmi.n	80082d4 <__sflush_r+0xb8>
 8008284:	2200      	movs	r2, #0
 8008286:	6062      	str	r2, [r4, #4]
 8008288:	04d9      	lsls	r1, r3, #19
 800828a:	6922      	ldr	r2, [r4, #16]
 800828c:	6022      	str	r2, [r4, #0]
 800828e:	d504      	bpl.n	800829a <__sflush_r+0x7e>
 8008290:	1c42      	adds	r2, r0, #1
 8008292:	d101      	bne.n	8008298 <__sflush_r+0x7c>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b903      	cbnz	r3, 800829a <__sflush_r+0x7e>
 8008298:	6560      	str	r0, [r4, #84]	; 0x54
 800829a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800829c:	602f      	str	r7, [r5, #0]
 800829e:	2900      	cmp	r1, #0
 80082a0:	d0c9      	beq.n	8008236 <__sflush_r+0x1a>
 80082a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a6:	4299      	cmp	r1, r3
 80082a8:	d002      	beq.n	80082b0 <__sflush_r+0x94>
 80082aa:	4628      	mov	r0, r5
 80082ac:	f7ff fbd6 	bl	8007a5c <_free_r>
 80082b0:	2000      	movs	r0, #0
 80082b2:	6360      	str	r0, [r4, #52]	; 0x34
 80082b4:	e7c0      	b.n	8008238 <__sflush_r+0x1c>
 80082b6:	2301      	movs	r3, #1
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b0      	blx	r6
 80082bc:	1c41      	adds	r1, r0, #1
 80082be:	d1c8      	bne.n	8008252 <__sflush_r+0x36>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c5      	beq.n	8008252 <__sflush_r+0x36>
 80082c6:	2b1d      	cmp	r3, #29
 80082c8:	d001      	beq.n	80082ce <__sflush_r+0xb2>
 80082ca:	2b16      	cmp	r3, #22
 80082cc:	d101      	bne.n	80082d2 <__sflush_r+0xb6>
 80082ce:	602f      	str	r7, [r5, #0]
 80082d0:	e7b1      	b.n	8008236 <__sflush_r+0x1a>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	e7ad      	b.n	8008238 <__sflush_r+0x1c>
 80082dc:	690f      	ldr	r7, [r1, #16]
 80082de:	2f00      	cmp	r7, #0
 80082e0:	d0a9      	beq.n	8008236 <__sflush_r+0x1a>
 80082e2:	0793      	lsls	r3, r2, #30
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	bf08      	it	eq
 80082e8:	694b      	ldreq	r3, [r1, #20]
 80082ea:	600f      	str	r7, [r1, #0]
 80082ec:	bf18      	it	ne
 80082ee:	2300      	movne	r3, #0
 80082f0:	eba6 0807 	sub.w	r8, r6, r7
 80082f4:	608b      	str	r3, [r1, #8]
 80082f6:	f1b8 0f00 	cmp.w	r8, #0
 80082fa:	dd9c      	ble.n	8008236 <__sflush_r+0x1a>
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008300:	4643      	mov	r3, r8
 8008302:	463a      	mov	r2, r7
 8008304:	4628      	mov	r0, r5
 8008306:	47b0      	blx	r6
 8008308:	2800      	cmp	r0, #0
 800830a:	dc06      	bgt.n	800831a <__sflush_r+0xfe>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	e78e      	b.n	8008238 <__sflush_r+0x1c>
 800831a:	4407      	add	r7, r0
 800831c:	eba8 0800 	sub.w	r8, r8, r0
 8008320:	e7e9      	b.n	80082f6 <__sflush_r+0xda>
 8008322:	bf00      	nop
 8008324:	dfbffffe 	.word	0xdfbffffe

08008328 <_fflush_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	690b      	ldr	r3, [r1, #16]
 800832c:	4605      	mov	r5, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b913      	cbnz	r3, 8008338 <_fflush_r+0x10>
 8008332:	2500      	movs	r5, #0
 8008334:	4628      	mov	r0, r5
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	b118      	cbz	r0, 8008342 <_fflush_r+0x1a>
 800833a:	6a03      	ldr	r3, [r0, #32]
 800833c:	b90b      	cbnz	r3, 8008342 <_fflush_r+0x1a>
 800833e:	f7ff f987 	bl	8007650 <__sinit>
 8008342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f3      	beq.n	8008332 <_fflush_r+0xa>
 800834a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800834c:	07d0      	lsls	r0, r2, #31
 800834e:	d404      	bmi.n	800835a <_fflush_r+0x32>
 8008350:	0599      	lsls	r1, r3, #22
 8008352:	d402      	bmi.n	800835a <_fflush_r+0x32>
 8008354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008356:	f7ff fb7e 	bl	8007a56 <__retarget_lock_acquire_recursive>
 800835a:	4628      	mov	r0, r5
 800835c:	4621      	mov	r1, r4
 800835e:	f7ff ff5d 	bl	800821c <__sflush_r>
 8008362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008364:	07da      	lsls	r2, r3, #31
 8008366:	4605      	mov	r5, r0
 8008368:	d4e4      	bmi.n	8008334 <_fflush_r+0xc>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	059b      	lsls	r3, r3, #22
 800836e:	d4e1      	bmi.n	8008334 <_fflush_r+0xc>
 8008370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008372:	f7ff fb71 	bl	8007a58 <__retarget_lock_release_recursive>
 8008376:	e7dd      	b.n	8008334 <_fflush_r+0xc>

08008378 <__swhatbuf_r>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	460c      	mov	r4, r1
 800837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008380:	2900      	cmp	r1, #0
 8008382:	b096      	sub	sp, #88	; 0x58
 8008384:	4615      	mov	r5, r2
 8008386:	461e      	mov	r6, r3
 8008388:	da0d      	bge.n	80083a6 <__swhatbuf_r+0x2e>
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008390:	f04f 0100 	mov.w	r1, #0
 8008394:	bf0c      	ite	eq
 8008396:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800839a:	2340      	movne	r3, #64	; 0x40
 800839c:	2000      	movs	r0, #0
 800839e:	6031      	str	r1, [r6, #0]
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	b016      	add	sp, #88	; 0x58
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
 80083a6:	466a      	mov	r2, sp
 80083a8:	f000 f862 	bl	8008470 <_fstat_r>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	dbec      	blt.n	800838a <__swhatbuf_r+0x12>
 80083b0:	9901      	ldr	r1, [sp, #4]
 80083b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083ba:	4259      	negs	r1, r3
 80083bc:	4159      	adcs	r1, r3
 80083be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c2:	e7eb      	b.n	800839c <__swhatbuf_r+0x24>

080083c4 <__smakebuf_r>:
 80083c4:	898b      	ldrh	r3, [r1, #12]
 80083c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083c8:	079d      	lsls	r5, r3, #30
 80083ca:	4606      	mov	r6, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	d507      	bpl.n	80083e0 <__smakebuf_r+0x1c>
 80083d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	2301      	movs	r3, #1
 80083da:	6163      	str	r3, [r4, #20]
 80083dc:	b002      	add	sp, #8
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	ab01      	add	r3, sp, #4
 80083e2:	466a      	mov	r2, sp
 80083e4:	f7ff ffc8 	bl	8008378 <__swhatbuf_r>
 80083e8:	9900      	ldr	r1, [sp, #0]
 80083ea:	4605      	mov	r5, r0
 80083ec:	4630      	mov	r0, r6
 80083ee:	f7ff fba1 	bl	8007b34 <_malloc_r>
 80083f2:	b948      	cbnz	r0, 8008408 <__smakebuf_r+0x44>
 80083f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f8:	059a      	lsls	r2, r3, #22
 80083fa:	d4ef      	bmi.n	80083dc <__smakebuf_r+0x18>
 80083fc:	f023 0303 	bic.w	r3, r3, #3
 8008400:	f043 0302 	orr.w	r3, r3, #2
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	e7e3      	b.n	80083d0 <__smakebuf_r+0xc>
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	6020      	str	r0, [r4, #0]
 800840c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	6163      	str	r3, [r4, #20]
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	6120      	str	r0, [r4, #16]
 800841a:	b15b      	cbz	r3, 8008434 <__smakebuf_r+0x70>
 800841c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008420:	4630      	mov	r0, r6
 8008422:	f000 f837 	bl	8008494 <_isatty_r>
 8008426:	b128      	cbz	r0, 8008434 <__smakebuf_r+0x70>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	431d      	orrs	r5, r3
 8008438:	81a5      	strh	r5, [r4, #12]
 800843a:	e7cf      	b.n	80083dc <__smakebuf_r+0x18>

0800843c <memmove>:
 800843c:	4288      	cmp	r0, r1
 800843e:	b510      	push	{r4, lr}
 8008440:	eb01 0402 	add.w	r4, r1, r2
 8008444:	d902      	bls.n	800844c <memmove+0x10>
 8008446:	4284      	cmp	r4, r0
 8008448:	4623      	mov	r3, r4
 800844a:	d807      	bhi.n	800845c <memmove+0x20>
 800844c:	1e43      	subs	r3, r0, #1
 800844e:	42a1      	cmp	r1, r4
 8008450:	d008      	beq.n	8008464 <memmove+0x28>
 8008452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800845a:	e7f8      	b.n	800844e <memmove+0x12>
 800845c:	4402      	add	r2, r0
 800845e:	4601      	mov	r1, r0
 8008460:	428a      	cmp	r2, r1
 8008462:	d100      	bne.n	8008466 <memmove+0x2a>
 8008464:	bd10      	pop	{r4, pc}
 8008466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800846a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800846e:	e7f7      	b.n	8008460 <memmove+0x24>

08008470 <_fstat_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	; (8008490 <_fstat_r+0x20>)
 8008474:	2300      	movs	r3, #0
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	f7fa fedc 	bl	800323a <_fstat>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d102      	bne.n	800848c <_fstat_r+0x1c>
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	b103      	cbz	r3, 800848c <_fstat_r+0x1c>
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	20000b34 	.word	0x20000b34

08008494 <_isatty_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d06      	ldr	r5, [pc, #24]	; (80084b0 <_isatty_r+0x1c>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	f7fa fedb 	bl	800325a <_isatty>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_isatty_r+0x1a>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_isatty_r+0x1a>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	20000b34 	.word	0x20000b34

080084b4 <_sbrk_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_sbrk_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f7fa fee4 	bl	800328c <_sbrk>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_sbrk_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_sbrk_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000b34 	.word	0x20000b34

080084d4 <memcpy>:
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	4770      	bx	lr
 80084e0:	b510      	push	{r4, lr}
 80084e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ea:	4291      	cmp	r1, r2
 80084ec:	d1f9      	bne.n	80084e2 <memcpy+0xe>
 80084ee:	bd10      	pop	{r4, pc}

080084f0 <_realloc_r>:
 80084f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f4:	4680      	mov	r8, r0
 80084f6:	4614      	mov	r4, r2
 80084f8:	460e      	mov	r6, r1
 80084fa:	b921      	cbnz	r1, 8008506 <_realloc_r+0x16>
 80084fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008500:	4611      	mov	r1, r2
 8008502:	f7ff bb17 	b.w	8007b34 <_malloc_r>
 8008506:	b92a      	cbnz	r2, 8008514 <_realloc_r+0x24>
 8008508:	f7ff faa8 	bl	8007a5c <_free_r>
 800850c:	4625      	mov	r5, r4
 800850e:	4628      	mov	r0, r5
 8008510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008514:	f000 f81b 	bl	800854e <_malloc_usable_size_r>
 8008518:	4284      	cmp	r4, r0
 800851a:	4607      	mov	r7, r0
 800851c:	d802      	bhi.n	8008524 <_realloc_r+0x34>
 800851e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008522:	d812      	bhi.n	800854a <_realloc_r+0x5a>
 8008524:	4621      	mov	r1, r4
 8008526:	4640      	mov	r0, r8
 8008528:	f7ff fb04 	bl	8007b34 <_malloc_r>
 800852c:	4605      	mov	r5, r0
 800852e:	2800      	cmp	r0, #0
 8008530:	d0ed      	beq.n	800850e <_realloc_r+0x1e>
 8008532:	42bc      	cmp	r4, r7
 8008534:	4622      	mov	r2, r4
 8008536:	4631      	mov	r1, r6
 8008538:	bf28      	it	cs
 800853a:	463a      	movcs	r2, r7
 800853c:	f7ff ffca 	bl	80084d4 <memcpy>
 8008540:	4631      	mov	r1, r6
 8008542:	4640      	mov	r0, r8
 8008544:	f7ff fa8a 	bl	8007a5c <_free_r>
 8008548:	e7e1      	b.n	800850e <_realloc_r+0x1e>
 800854a:	4635      	mov	r5, r6
 800854c:	e7df      	b.n	800850e <_realloc_r+0x1e>

0800854e <_malloc_usable_size_r>:
 800854e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008552:	1f18      	subs	r0, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfbc      	itt	lt
 8008558:	580b      	ldrlt	r3, [r1, r0]
 800855a:	18c0      	addlt	r0, r0, r3
 800855c:	4770      	bx	lr
	...

08008560 <_init>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr

0800856c <_fini>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr
