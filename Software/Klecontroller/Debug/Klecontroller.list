
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a24  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e70  08004e70  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e78  08004e78  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  2000009c  08004f1c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08004f1c  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014514  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003785  00000000  00000000  00034623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb2  00000000  00000000  00039220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004de4  00000000  00000000  0003a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa83  00000000  00000000  0003efb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d3e5  00000000  00000000  00059a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053a8  00000000  00000000  000f6e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fc1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000009c 	.word	0x2000009c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004ba4 	.word	0x08004ba4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	08004ba4 	.word	0x08004ba4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004f8:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <MX_ADC1_Init+0xf0>)
 80004fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000502:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_ADC1_Init+0xec>)
 800050c:	2201      	movs	r2, #1
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000512:	2201      	movs	r2, #1
 8000514:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000526:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <MX_ADC1_Init+0xf4>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_ADC1_Init+0xec>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000532:	2204      	movs	r2, #4
 8000534:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000538:	2201      	movs	r2, #1
 800053a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000540:	2201      	movs	r2, #1
 8000542:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000546:	f001 fa6f 	bl	8001a28 <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 fc73 	bl	8000e3a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000554:	230b      	movs	r3, #11
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800055c:	2307      	movs	r3, #7
 800055e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000566:	f001 fcc1 	bl	8001eec <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000570:	f000 fc63 	bl	8000e3a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000574:	230c      	movs	r3, #12
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000582:	f001 fcb3 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800058c:	f000 fc55 	bl	8000e3a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000590:	2301      	movs	r3, #1
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_ADC1_Init+0xec>)
 800059e:	f001 fca5 	bl	8001eec <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005a8:	f000 fc47 	bl	8000e3a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0xec>)
 80005ba:	f001 fc97 	bl	8001eec <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005c4:	f000 fc39 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000b8 	.word	0x200000b8
 80005d4:	40012000 	.word	0x40012000
 80005d8:	0f000001 	.word	0x0f000001

080005dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <HAL_ADC_MspInit+0x110>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d171      	bne.n	80006e2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	4a3a      	ldr	r2, [pc, #232]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060c:	6453      	str	r3, [r2, #68]	; 0x44
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000652:	2306      	movs	r3, #6
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <HAL_ADC_MspInit+0x118>)
 8000666:	f002 fb9f 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 800066a:	2306      	movs	r3, #6
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	481e      	ldr	r0, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x11c>)
 800067e:	f002 fb93 	bl	8002da8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000684:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <HAL_ADC_MspInit+0x124>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c8:	f001 ffdc 	bl	8002684 <HAL_DMA_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006d2:	f000 fbb2 	bl	8000e3a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012000 	.word	0x40012000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000100 	.word	0x20000100
 8000700:	40026410 	.word	0x40026410

08000704 <Inputs_Init>:
void(*JoyLeftButtonAction)(void);
void(*JoyRightButtonAction)(void);


void Inputs_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000708:	4810      	ldr	r0, [pc, #64]	; (800074c <Inputs_Init+0x48>)
 800070a:	f003 ff7d 	bl	8004608 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	490f      	ldr	r1, [pc, #60]	; (8000750 <Inputs_Init+0x4c>)
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <Inputs_Init+0x50>)
 8000714:	f001 fadc 	bl	8001cd0 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f001 f961 	bl	80019e0 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <Inputs_Init+0x54>)
 8000720:	490e      	ldr	r1, [pc, #56]	; (800075c <Inputs_Init+0x58>)
 8000722:	480f      	ldr	r0, [pc, #60]	; (8000760 <Inputs_Init+0x5c>)
 8000724:	f000 fa90 	bl	8000c48 <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <Inputs_Init+0x60>)
 800072a:	490f      	ldr	r1, [pc, #60]	; (8000768 <Inputs_Init+0x64>)
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <Inputs_Init+0x68>)
 800072e:	f000 fa8b 	bl	8000c48 <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <Inputs_Init+0x5c>)
 8000734:	f000 faa3 	bl	8000c7e <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <Inputs_Init+0x68>)
 800073a:	f000 faa0 	bl	8000c7e <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800073e:	213c      	movs	r1, #60	; 0x3c
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <Inputs_Init+0x48>)
 8000742:	f004 f861 	bl	8004808 <HAL_TIM_Encoder_Start>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000710 	.word	0x20000710
 8000750:	20000160 	.word	0x20000160
 8000754:	200000b8 	.word	0x200000b8
 8000758:	200001b2 	.word	0x200001b2
 800075c:	200001b0 	.word	0x200001b0
 8000760:	200001b8 	.word	0x200001b8
 8000764:	200001b6 	.word	0x200001b6
 8000768:	200001b4 	.word	0x200001b4
 800076c:	200001d0 	.word	0x200001d0

08000770 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 8000788:	2300      	movs	r3, #0
 800078a:	77fb      	strb	r3, [r7, #31]
 800078c:	e021      	b.n	80007d2 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	7ffa      	ldrb	r2, [r7, #31]
 8000792:	4924      	ldr	r1, [pc, #144]	; (8000824 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000794:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000798:	4413      	add	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	7ffa      	ldrb	r2, [r7, #31]
 80007a0:	3201      	adds	r2, #1
 80007a2:	4920      	ldr	r1, [pc, #128]	; (8000824 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007a8:	4413      	add	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	7ffa      	ldrb	r2, [r7, #31]
 80007b0:	3202      	adds	r2, #2
 80007b2:	491c      	ldr	r1, [pc, #112]	; (8000824 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007b8:	4413      	add	r3, r2
 80007ba:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	7ffa      	ldrb	r2, [r7, #31]
 80007c0:	3203      	adds	r2, #3
 80007c2:	4918      	ldr	r1, [pc, #96]	; (8000824 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007c8:	4413      	add	r3, r2
 80007ca:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 80007cc:	7ffb      	ldrb	r3, [r7, #31]
 80007ce:	3304      	adds	r3, #4
 80007d0:	77fb      	strb	r3, [r7, #31]
 80007d2:	7ffb      	ldrb	r3, [r7, #31]
 80007d4:	2b24      	cmp	r3, #36	; 0x24
 80007d6:	d9da      	bls.n	800078e <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <HAL_ADC_ConvCpltCallback+0xb8>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <HAL_ADC_ConvCpltCallback+0xbc>)
 80007e6:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <HAL_ADC_ConvCpltCallback+0xb8>)
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_ADC_ConvCpltCallback+0xbc>)
 80007f6:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <HAL_ADC_ConvCpltCallback+0xb8>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_ADC_ConvCpltCallback+0xbc>)
 8000806:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_ADC_ConvCpltCallback+0xb8>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_ADC_ConvCpltCallback+0xbc>)
 8000816:	80da      	strh	r2, [r3, #6]
}
 8000818:	bf00      	nop
 800081a:	3724      	adds	r7, #36	; 0x24
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000160 	.word	0x20000160
 8000828:	cccccccd 	.word	0xcccccccd
 800082c:	200001b0 	.word	0x200001b0

08000830 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <Inputs_GetEncoderCount+0x4c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <Inputs_GetEncoderCount+0x50>)
 800083e:	8812      	ldrh	r2, [r2, #0]
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b03      	cmp	r3, #3
 8000848:	dc03      	bgt.n	8000852 <Inputs_GetEncoderCount+0x22>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f113 0f03 	cmn.w	r3, #3
 8000850:	da0c      	bge.n	800086c <Inputs_GetEncoderCount+0x3c>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <Inputs_GetEncoderCount+0x4c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <Inputs_GetEncoderCount+0x50>)
 800085c:	801a      	strh	r2, [r3, #0]
		return (int8_t)(CounterDif / 4);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	da00      	bge.n	8000866 <Inputs_GetEncoderCount+0x36>
 8000864:	3303      	adds	r3, #3
 8000866:	109b      	asrs	r3, r3, #2
 8000868:	b25b      	sxtb	r3, r3
 800086a:	e000      	b.n	800086e <Inputs_GetEncoderCount+0x3e>
	}
	else
	{
		return 0;
 800086c:	2300      	movs	r3, #0
	}
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000710 	.word	0x20000710
 8000880:	200001e8 	.word	0x200001e8

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_DMA_Init+0x3c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <MX_DMA_Init+0x3c>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_DMA_Init+0x3c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2038      	movs	r0, #56	; 0x38
 80008ac:	f001 feb3 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b0:	2038      	movs	r0, #56	; 0x38
 80008b2:	f001 fecc 	bl	800264e <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <MX_GPIO_Init+0x178>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a56      	ldr	r2, [pc, #344]	; (8000a3c <MX_GPIO_Init+0x178>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b54      	ldr	r3, [pc, #336]	; (8000a3c <MX_GPIO_Init+0x178>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b50      	ldr	r3, [pc, #320]	; (8000a3c <MX_GPIO_Init+0x178>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a4f      	ldr	r2, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a48      	ldr	r2, [pc, #288]	; (8000a3c <MX_GPIO_Init+0x178>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x178>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <MX_GPIO_Init+0x178>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2124      	movs	r1, #36	; 0x24
 800096a:	4835      	ldr	r0, [pc, #212]	; (8000a40 <MX_GPIO_Init+0x17c>)
 800096c:	f002 fba0 	bl	80030b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	21c0      	movs	r1, #192	; 0xc0
 8000974:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x180>)
 8000976:	f002 fb9b 	bl	80030b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 800097a:	f240 4301 	movw	r3, #1025	; 0x401
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	482d      	ldr	r0, [pc, #180]	; (8000a44 <MX_GPIO_Init+0x180>)
 8000990:	f002 fa0a 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 8000994:	2321      	movs	r3, #33	; 0x21
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4828      	ldr	r0, [pc, #160]	; (8000a48 <MX_GPIO_Init+0x184>)
 80009a8:	f002 f9fe 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009ac:	2304      	movs	r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	481f      	ldr	r0, [pc, #124]	; (8000a40 <MX_GPIO_Init+0x17c>)
 80009c4:	f002 f9f0 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <MX_GPIO_Init+0x17c>)
 80009e0:	f002 f9e2 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 80009e4:	23c0      	movs	r3, #192	; 0xc0
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <MX_GPIO_Init+0x180>)
 80009fc:	f002 f9d4 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <MX_GPIO_Init+0x188>)
 8000a14:	f002 f9c8 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0x17c>)
 8000a30:	f002 f9ba 	bl	8002da8 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_I2C1_Init+0x54>)
 8000a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a5c:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_I2C1_Init+0x58>)
 8000a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_I2C1_Init+0x50>)
 8000a8e:	f002 fb41 	bl	8003114 <HAL_I2C_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a98:	f000 f9cf 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200001ec 	.word	0x200001ec
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	00061a80 	.word	0x00061a80

08000aac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ab2:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <MX_I2C3_Init+0x54>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_I2C3_Init+0x58>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_I2C3_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_I2C3_Init+0x50>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_I2C3_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_I2C3_Init+0x50>)
 8000aea:	f002 fb13 	bl	8003114 <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 f9a1 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000240 	.word	0x20000240
 8000b00:	40005c00 	.word	0x40005c00
 8000b04:	00061a80 	.word	0x00061a80

08000b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a42      	ldr	r2, [pc, #264]	; (8000c30 <HAL_I2C_MspInit+0x128>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12d      	bne.n	8000b86 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4835      	ldr	r0, [pc, #212]	; (8000c38 <HAL_I2C_MspInit+0x130>)
 8000b64:	f002 f920 	bl	8002da8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b84:	e050      	b.n	8000c28 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <HAL_I2C_MspInit+0x134>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d14b      	bne.n	8000c28 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bce:	2312      	movs	r3, #18
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4816      	ldr	r0, [pc, #88]	; (8000c40 <HAL_I2C_MspInit+0x138>)
 8000be6:	f002 f8df 	bl	8002da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	480f      	ldr	r0, [pc, #60]	; (8000c44 <HAL_I2C_MspInit+0x13c>)
 8000c08:	f002 f8ce 	bl	8002da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_I2C_MspInit+0x12c>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40005c00 	.word	0x40005c00
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000

08000c48 <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <JoyS_Init+0x18>
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d007      	beq.n	8000c70 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e000      	b.n	8000c72 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 8000c86:	f000 fe9f 	bl	80019c8 <HAL_GetTick>
 8000c8a:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 8000c8c:	e015      	b.n	8000cba <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d104      	bne.n	8000ca2 <JoyS_SetIdleValues+0x24>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e007      	b.n	8000cca <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 8000cba:	f000 fe85 	bl	80019c8 <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b63      	cmp	r3, #99	; 0x63
 8000cc6:	d9e2      	bls.n	8000c8e <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fe10 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f81a 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff fdf0 	bl	80008c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce4:	f7ff fdce 	bl	8000884 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ce8:	f7ff feb2 	bl	8000a50 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000cec:	f7ff fede 	bl	8000aac <MX_I2C3_Init>
  MX_SPI2_Init();
 8000cf0:	f000 fa06 	bl	8001100 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000cf4:	f000 fd3c 	bl	8001770 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000cf8:	f7ff fbf4 	bl	80004e4 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000cfc:	f000 f872 	bl	8000de4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //Radio_Init(&hspi2);
  Inputs_Init();
 8000d00:	f7ff fd00 	bl	8000704 <Inputs_Init>
  OLED_Init(&hi2c3);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <main+0x3c>)
 8000d06:	f000 faaf 	bl	8001268 <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Radio_Process(NULL);
	  SimpleScheduler();
 8000d0a:	f000 f9f3 	bl	80010f4 <SimpleScheduler>
 8000d0e:	e7fc      	b.n	8000d0a <main+0x36>
 8000d10:	20000240 	.word	0x20000240

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	2230      	movs	r2, #48	; 0x30
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 ff12 	bl	8004b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <SystemClock_Config+0xc8>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <SystemClock_Config+0xc8>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <SystemClock_Config+0xc8>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <SystemClock_Config+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <SystemClock_Config+0xcc>)
 8000d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <SystemClock_Config+0xcc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fe17 	bl	80039cc <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000da4:	f000 f849 	bl	8000e3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
 8000daa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dac:	2302      	movs	r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 f879 	bl	8003ebc <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dd0:	f000 f833 	bl	8000e3a <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3750      	adds	r7, #80	; 0x50
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000

08000de4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2028      	movs	r0, #40	; 0x28
 8000dee:	f001 fc12 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000df2:	2028      	movs	r0, #40	; 0x28
 8000df4:	f001 fc2b 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2024      	movs	r0, #36	; 0x24
 8000dfe:	f001 fc0a 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e02:	2024      	movs	r0, #36	; 0x24
 8000e04:	f001 fc23 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2012      	movs	r0, #18
 8000e0e:	f001 fc02 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e12:	2012      	movs	r0, #18
 8000e14:	f001 fc1b 	bl	800264e <HAL_NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8000e2e:	f000 f92f 	bl	8001090 <nRF24_IRQ_Handler>
	}

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3e:	b672      	cpsid	i
}
 8000e40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <Error_Handler+0x8>

08000e44 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	if(LastMenuPtr == MenuCurrentMember) return;
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <Menu_RefreshScreen+0x164>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b56      	ldr	r3, [pc, #344]	; (8000fac <Menu_RefreshScreen+0x168>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	f000 80a2 	beq.w	8000fa0 <Menu_RefreshScreen+0x15c>

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8000e5c:	e00c      	b.n	8000e78 <Menu_RefreshScreen+0x34>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8000e5e:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <Menu_RefreshScreen+0x16c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <Menu_RefreshScreen+0x170>)
 8000e64:	5cd2      	ldrb	r2, [r2, r3]
 8000e66:	3201      	adds	r2, #1
 8000e68:	b2d1      	uxtb	r1, r2
 8000e6a:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <Menu_RefreshScreen+0x170>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8000e6e:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <Menu_RefreshScreen+0x174>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <Menu_RefreshScreen+0x174>)
 8000e76:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8000e78:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <Menu_RefreshScreen+0x16c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <Menu_RefreshScreen+0x178>)
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <Menu_RefreshScreen+0x16c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <Menu_RefreshScreen+0x170>)
 8000e8c:	5c5b      	ldrb	r3, [r3, r1]
 8000e8e:	3305      	adds	r3, #5
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dce4      	bgt.n	8000e5e <Menu_RefreshScreen+0x1a>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8000e94:	e00c      	b.n	8000eb0 <Menu_RefreshScreen+0x6c>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <Menu_RefreshScreen+0x16c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4a46      	ldr	r2, [pc, #280]	; (8000fb4 <Menu_RefreshScreen+0x170>)
 8000e9c:	5cd2      	ldrb	r2, [r2, r3]
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	b2d1      	uxtb	r1, r2
 8000ea2:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <Menu_RefreshScreen+0x170>)
 8000ea4:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8000ea6:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <Menu_RefreshScreen+0x174>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a42      	ldr	r2, [pc, #264]	; (8000fb8 <Menu_RefreshScreen+0x174>)
 8000eae:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <Menu_RefreshScreen+0x16c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <Menu_RefreshScreen+0x178>)
 8000eb8:	5c9a      	ldrb	r2, [r3, r2]
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <Menu_RefreshScreen+0x16c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <Menu_RefreshScreen+0x170>)
 8000ec2:	5c5b      	ldrb	r3, [r3, r1]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3e6      	bcc.n	8000e96 <Menu_RefreshScreen+0x52>
	}

	OLED_ClearBuffer(BLACK);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fad7 	bl	800147c <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 fa19 	bl	8001308 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4839      	ldr	r0, [pc, #228]	; (8000fc0 <Menu_RefreshScreen+0x17c>)
 8000eda:	f000 fb99 	bl	8001610 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8000ede:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <Menu_RefreshScreen+0x174>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8000ee4:	e04f      	b.n	8000f86 <Menu_RefreshScreen+0x142>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <Menu_RefreshScreen+0x168>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d126      	bne.n	8000f3e <Menu_RefreshScreen+0xfa>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f96f 	bl	80001d8 <strlen>
 8000efa:	4602      	mov	r2, r0
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f9f4 	bl	8001308 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8000f20:	2101      	movs	r1, #1
 8000f22:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <Menu_RefreshScreen+0x180>)
 8000f24:	f000 fb74 	bl	8001610 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fb6e 	bl	8001610 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 8000f34:	2101      	movs	r1, #1
 8000f36:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <Menu_RefreshScreen+0x184>)
 8000f38:	f000 fb6a 	bl	8001610 <OLED_WriteString>
 8000f3c:	e01d      	b.n	8000f7a <Menu_RefreshScreen+0x136>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f948 	bl	80001d8 <strlen>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f56:	085b      	lsrs	r3, r3, #1
 8000f58:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	78bb      	ldrb	r3, [r7, #2]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f9cd 	bl	8001308 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2101      	movs	r1, #1
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fb4b 	bl	8001610 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d002      	beq.n	8000f92 <Menu_RefreshScreen+0x14e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1a9      	bne.n	8000ee6 <Menu_RefreshScreen+0xa2>
	}
	OLED_SendBuffer();
 8000f92:	f000 fa47 	bl	8001424 <OLED_SendBuffer>
	LastMenuPtr = MenuCurrentMember;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <Menu_RefreshScreen+0x168>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <Menu_RefreshScreen+0x164>)
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e000      	b.n	8000fa2 <Menu_RefreshScreen+0x15e>
	if(LastMenuPtr == MenuCurrentMember) return;
 8000fa0:	bf00      	nop

}
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200002a0 	.word	0x200002a0
 8000fac:	20000078 	.word	0x20000078
 8000fb0:	2000029c 	.word	0x2000029c
 8000fb4:	20000298 	.word	0x20000298
 8000fb8:	2000007c 	.word	0x2000007c
 8000fbc:	20000294 	.word	0x20000294
 8000fc0:	08004bec 	.word	0x08004bec
 8000fc4:	08004c04 	.word	0x08004c04
 8000fc8:	08004c08 	.word	0x08004c08

08000fcc <Menu_Next>:

void Menu_Next(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <Menu_Next+0x54>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <Menu_Next+0x54>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <Menu_Next+0x54>)
 8000fe2:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <Menu_Next+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <Menu_Next+0x5c>)
 8000fea:	5cd2      	ldrb	r2, [r2, r3]
 8000fec:	3201      	adds	r2, #1
 8000fee:	b2d1      	uxtb	r1, r2
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <Menu_Next+0x5c>)
 8000ff2:	54d1      	strb	r1, [r2, r3]
 8000ff4:	e00f      	b.n	8001016 <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <Menu_Next+0x54>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <Menu_Next+0x54>)
 8000ffe:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <Menu_Next+0x54>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f5      	bne.n	8000ff6 <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <Menu_Next+0x58>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <Menu_Next+0x5c>)
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8001016:	f7ff ff15 	bl	8000e44 <Menu_RefreshScreen>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000078 	.word	0x20000078
 8001024:	2000029c 	.word	0x2000029c
 8001028:	20000294 	.word	0x20000294

0800102c <Menu_Prev>:

void Menu_Prev(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <Menu_Prev+0x58>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d01a      	beq.n	8001070 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <Menu_Prev+0x58>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a10      	ldr	r2, [pc, #64]	; (8001084 <Menu_Prev+0x58>)
 8001042:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <Menu_Prev+0x5c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4a10      	ldr	r2, [pc, #64]	; (800108c <Menu_Prev+0x60>)
 800104a:	5cd2      	ldrb	r2, [r2, r3]
 800104c:	3a01      	subs	r2, #1
 800104e:	b2d1      	uxtb	r1, r2
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <Menu_Prev+0x60>)
 8001052:	54d1      	strb	r1, [r2, r3]
 8001054:	e011      	b.n	800107a <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <Menu_Prev+0x58>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <Menu_Prev+0x58>)
 800105e:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <Menu_Prev+0x5c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <Menu_Prev+0x60>)
 8001066:	5cd2      	ldrb	r2, [r2, r3]
 8001068:	3201      	adds	r2, #1
 800106a:	b2d1      	uxtb	r1, r2
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <Menu_Prev+0x60>)
 800106e:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <Menu_Prev+0x58>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ed      	bne.n	8001056 <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 800107a:	f7ff fee3 	bl	8000e44 <Menu_RefreshScreen>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000078 	.word	0x20000078
 8001088:	2000029c 	.word	0x2000029c
 800108c:	20000294 	.word	0x20000294

08001090 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <nRF24_IRQ_Handler+0x14>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200002a4 	.word	0x200002a4

080010a8 <MenuTask>:
//
//Programs
//

void MenuTask(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	static uint8_t FirstEnterFlag = 0;
	int8_t EncoderRotation = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]

	if(0 == FirstEnterFlag)
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MenuTask+0x48>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <MenuTask+0x1c>
	{
		Menu_RefreshScreen();
 80010ba:	f7ff fec3 	bl	8000e44 <Menu_RefreshScreen>
		FirstEnterFlag = 1;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MenuTask+0x48>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
	}

	EncoderRotation = Inputs_GetEncoderCount();
 80010c4:	f7ff fbb4 	bl	8000830 <Inputs_GetEncoderCount>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]

	if(EncoderRotation > 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd02      	ble.n	80010da <MenuTask+0x32>
	{
		Menu_Next();
 80010d4:	f7ff ff7a 	bl	8000fcc <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 80010d8:	e005      	b.n	80010e6 <MenuTask+0x3e>
	else if(EncoderRotation < 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da01      	bge.n	80010e6 <MenuTask+0x3e>
		Menu_Prev();
 80010e2:	f7ff ffa3 	bl	800102c <Menu_Prev>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002a5 	.word	0x200002a5

080010f4 <SimpleScheduler>:

void SimpleScheduler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	MenuTask();
 80010f8:	f7ff ffd6 	bl	80010a8 <MenuTask>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_SPI2_Init+0x64>)
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <MX_SPI2_Init+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_SPI2_Init+0x64>)
 800110c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001110:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_SPI2_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_SPI2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_SPI2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_SPI2_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_SPI2_Init+0x64>)
 800112c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001130:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_SPI2_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_SPI2_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_SPI2_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_SPI2_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_SPI2_Init+0x64>)
 800114c:	220a      	movs	r2, #10
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_SPI2_Init+0x64>)
 8001152:	f003 f8bd 	bl	80042d0 <HAL_SPI_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800115c:	f7ff fe6d 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200002a8 	.word	0x200002a8
 8001168:	40003800 	.word	0x40003800

0800116c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_SPI_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12c      	bne.n	80011e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d8:	2305      	movs	r3, #5
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011e4:	f001 fde0 	bl	8002da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40003800 	.word	0x40003800
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400

080011fc <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af04      	add	r7, sp, #16
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <OLED_SendCmdSequence+0x34>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	b29b      	uxth	r3, r3
 8001210:	2264      	movs	r2, #100	; 0x64
 8001212:	9202      	str	r2, [sp, #8]
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	2200      	movs	r2, #0
 800121e:	2178      	movs	r1, #120	; 0x78
 8001220:	f002 f8bc 	bl	800339c <HAL_I2C_Mem_Write>
 8001224:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000300 	.word	0x20000300

08001234 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <OLED_SendData+0x30>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2240      	movs	r2, #64	; 0x40
 8001254:	2178      	movs	r1, #120	; 0x78
 8001256:	f002 f8a1 	bl	800339c <HAL_I2C_Mem_Write>
 800125a:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000300 	.word	0x20000300

08001268 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <OLED_Init+0x28>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <OLED_Init+0x2c>)
 8001278:	f000 f916 	bl	80014a8 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 800127c:	2110      	movs	r1, #16
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <OLED_Init+0x30>)
 8001280:	f7ff ffbc 	bl	80011fc <OLED_SendCmdSequence>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000300 	.word	0x20000300
 8001294:	08004c0c 	.word	0x08004c0c
 8001298:	20000080 	.word	0x20000080

0800129c <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b80      	cmp	r3, #128	; 0x80
 80012b4:	d802      	bhi.n	80012bc <OLED_SetDeviceCursor+0x20>
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d901      	bls.n	80012c0 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e01f      	b.n	8001300 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3302      	adds	r3, #2
 80012c4:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 80012de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2103      	movs	r1, #3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff7f 	bl	80011fc <OLED_SendCmdSequence>

	return Status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	460a      	mov	r2, r1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db02      	blt.n	8001326 <OLED_MoveCursor+0x1e>
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	2b3f      	cmp	r3, #63	; 0x3f
 8001324:	d901      	bls.n	800132a <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00b      	b.n	8001342 <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <OLED_MoveCursor+0x48>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <OLED_MoveCursor+0x48>)
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <OLED_MoveCursor+0x48>)
 800133e:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000304 	.word	0x20000304

08001354 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	4613      	mov	r3, r2
 8001362:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e04f      	b.n	800140a <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 800136a:	78bb      	ldrb	r3, [r7, #2]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d116      	bne.n	800139e <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <OLED_WriteToBuffer+0xc8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <OLED_WriteToBuffer+0xc8>)
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	01db      	lsls	r3, r3, #7
 800137c:	4413      	add	r3, r2
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <OLED_WriteToBuffer+0xcc>)
 8001380:	5cd1      	ldrb	r1, [r2, r3]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <OLED_WriteToBuffer+0xc8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <OLED_WriteToBuffer+0xc8>)
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4403      	add	r3, r0
 8001394:	430a      	orrs	r2, r1
 8001396:	b2d1      	uxtb	r1, r2
 8001398:	4a21      	ldr	r2, [pc, #132]	; (8001420 <OLED_WriteToBuffer+0xcc>)
 800139a:	54d1      	strb	r1, [r2, r3]
 800139c:	e020      	b.n	80013e0 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 800139e:	78bb      	ldrb	r3, [r7, #2]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11b      	bne.n	80013dc <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <OLED_WriteToBuffer+0xc8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <OLED_WriteToBuffer+0xc8>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	01db      	lsls	r3, r3, #7
 80013b0:	4413      	add	r3, r2
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <OLED_WriteToBuffer+0xcc>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	4013      	ands	r3, r2
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <OLED_WriteToBuffer+0xc8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <OLED_WriteToBuffer+0xc8>)
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	01db      	lsls	r3, r3, #7
 80013d2:	440b      	add	r3, r1
 80013d4:	b2d1      	uxtb	r1, r2
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <OLED_WriteToBuffer+0xcc>)
 80013d8:	54d1      	strb	r1, [r2, r3]
 80013da:	e001      	b.n	80013e0 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e019      	b.n	8001414 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <OLED_WriteToBuffer+0xc8>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <OLED_WriteToBuffer+0xc8>)
 80013ea:	7852      	ldrb	r2, [r2, #1]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff8a 	bl	8001308 <OLED_MoveCursor>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00a      	b.n	8001414 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3ab      	bcc.n	800136a <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000304 	.word	0x20000304
 8001420:	20000310 	.word	0x20000310

08001424 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	71bb      	strb	r3, [r7, #6]
 8001432:	e019      	b.n	8001468 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	4619      	mov	r1, r3
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff2f 	bl	800129c <OLED_SetDeviceCursor>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4313      	orrs	r3, r2
 8001446:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <OLED_SendBuffer+0x54>)
 800144e:	4413      	add	r3, r2
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff feee 	bl	8001234 <OLED_SendData>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4313      	orrs	r3, r2
 8001460:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	3301      	adds	r3, #1
 8001466:	71bb      	strb	r3, [r7, #6]
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b07      	cmp	r3, #7
 800146c:	d9e2      	bls.n	8001434 <OLED_SendBuffer+0x10>
	}
	return Status;
 800146e:	79fb      	ldrb	r3, [r7, #7]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000310 	.word	0x20000310

0800147c <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	4619      	mov	r1, r3
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <OLED_ClearBuffer+0x28>)
 8001496:	f003 fb59 	bl	8004b4c <memset>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000310 	.word	0x20000310

080014a8 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3302      	adds	r3, #2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d802      	bhi.n	80014cc <OLED_ChangeFont+0x24>
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d901      	bls.n	80014d0 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00e      	b.n	80014ee <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <OLED_ChangeFont+0x54>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <OLED_ChangeFont+0x54>)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <OLED_ChangeFont+0x54>)
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3303      	adds	r3, #3
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <OLED_ChangeFont+0x54>)
 80014ea:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000308 	.word	0x20000308

08001500 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	460a      	mov	r2, r1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d901      	bls.n	800151e <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06f      	b.n	80015fe <OLED_WriteChar+0xfe>
	}
	switch(character)
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b0a      	cmp	r3, #10
 8001522:	d009      	beq.n	8001538 <OLED_WriteChar+0x38>
 8001524:	2b0d      	cmp	r3, #13
 8001526:	d113      	bne.n	8001550 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <OLED_WriteChar+0x108>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	4619      	mov	r1, r3
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff feea 	bl	8001308 <OLED_MoveCursor>
 8001534:	4603      	mov	r3, r0
 8001536:	e062      	b.n	80015fe <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <OLED_WriteChar+0x108>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <OLED_WriteChar+0x108>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	3308      	adds	r3, #8
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fede 	bl	8001308 <OLED_MoveCursor>
 800154c:	4603      	mov	r3, r0
 800154e:	e056      	b.n	80015fe <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4a2e      	ldr	r2, [pc, #184]	; (800160c <OLED_WriteChar+0x10c>)
 8001554:	7912      	ldrb	r2, [r2, #4]
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <OLED_WriteChar+0x10c>)
 800155c:	795b      	ldrb	r3, [r3, #5]
 800155e:	b29b      	uxth	r3, r3
 8001560:	fb12 f303 	smulbb	r3, r2, r3
 8001564:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <OLED_WriteChar+0x10c>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	3304      	adds	r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8001572:	2300      	movs	r3, #0
 8001574:	75bb      	strb	r3, [r7, #22]
 8001576:	e00c      	b.n	8001592 <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8001578:	7dbb      	ldrb	r3, [r7, #22]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	3318      	adds	r3, #24
 8001580:	443b      	add	r3, r7
 8001582:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3301      	adds	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 800158c:	7dbb      	ldrb	r3, [r7, #22]
 800158e:	3301      	adds	r3, #1
 8001590:	75bb      	strb	r3, [r7, #22]
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <OLED_WriteChar+0x10c>)
 8001594:	795b      	ldrb	r3, [r3, #5]
 8001596:	7dba      	ldrb	r2, [r7, #22]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3ed      	bcc.n	8001578 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <OLED_WriteChar+0x10c>)
 800159e:	7959      	ldrb	r1, [r3, #5]
 80015a0:	79ba      	ldrb	r2, [r7, #6]
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fed4 	bl	8001354 <OLED_WriteToBuffer>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <OLED_WriteChar+0x108>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <OLED_WriteChar+0x10c>)
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	4413      	add	r3, r2
 80015c2:	2b7f      	cmp	r3, #127	; 0x7f
 80015c4:	dd1a      	ble.n	80015fc <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <OLED_WriteChar+0x108>)
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 80015ce:	2100      	movs	r1, #0
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fe99 	bl	8001308 <OLED_MoveCursor>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	4313      	orrs	r3, r2
 80015de:	75fb      	strb	r3, [r7, #23]
 80015e0:	e00c      	b.n	80015fc <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <OLED_WriteChar+0x108>)
 80015e4:	785b      	ldrb	r3, [r3, #1]
 80015e6:	3308      	adds	r3, #8
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fe8b 	bl	8001308 <OLED_MoveCursor>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000304 	.word	0x20000304
 800160c:	20000308 	.word	0x20000308

08001610 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d910      	bls.n	8001648 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e013      	b.n	8001652 <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff64 	bl	8001500 <OLED_WriteChar>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	4313      	orrs	r3, r2
 8001640:	73fb      	strb	r3, [r7, #15]
		String++;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
	while(*String)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <OLED_WriteString+0x1a>
	}
	return Status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f952 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <ADC_IRQHandler+0x10>)
 8001706:	f000 f9d2 	bl	8001aae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000b8 	.word	0x200000b8

08001714 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <SPI2_IRQHandler+0x10>)
 800171a:	f002 fe63 	bl	80043e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002a8 	.word	0x200002a8

08001728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 800172c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001730:	f001 fcd8 	bl	80030e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA2_Stream0_IRQHandler+0x10>)
 800173e:	f001 f8c9 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000100 	.word	0x20000100

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f003 f9e4 	bl	8004b4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_TIM3_Init+0xa0>)
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <MX_TIM3_Init+0xa4>)
 8001790:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_TIM3_Init+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_TIM3_Init+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017de:	f002 ff6d 	bl	80046bc <HAL_TIM_Encoder_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017e8:	f7ff fb27 	bl	8000e3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017fa:	f003 f939 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001804:	f7ff fb19 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3730      	adds	r7, #48	; 0x30
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000710 	.word	0x20000710
 8001814:	40000400 	.word	0x40000400

08001818 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_TIM_Encoder_MspInit+0x84>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12b      	bne.n	8001892 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001882:	2302      	movs	r3, #2
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800188e:	f001 fa8b 	bl	8002da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000400 	.word	0x40000400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ac:	480d      	ldr	r0, [pc, #52]	; (80018e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c4:	4c0b      	ldr	r4, [pc, #44]	; (80018f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d2:	f7ff ff3b 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f003 f941 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff f9fb 	bl	8000cd4 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80018ec:	08004e80 	.word	0x08004e80
  ldr r2, =_sbss
 80018f0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80018f4:	2000075c 	.word	0x2000075c

080018f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <DMA1_Stream0_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_Init+0x40>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_Init+0x40>)
 8001912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_Init+0x40>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 fe6b 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	200f      	movs	r0, #15
 800192c:	f000 f808 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff fe94 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fe83 	bl	800266a <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 fe4b 	bl	8002616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000090 	.word	0x20000090
 8001998:	20000098 	.word	0x20000098
 800199c:	20000094 	.word	0x20000094

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000098 	.word	0x20000098
 80019c4:	20000758 	.word	0x20000758

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000758 	.word	0x20000758

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000098 	.word	0x20000098

08001a28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e033      	b.n	8001aa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fdc8 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a6e:	f023 0302 	bic.w	r3, r3, #2
 8001a72:	f043 0202 	orr.w	r2, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fb68 	bl	8002150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
 8001a96:	e001      	b.n	8001a9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d049      	beq.n	8001b78 <HAL_ADC_IRQHandler+0xca>
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d046      	beq.n	8001b78 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12b      	bne.n	8001b68 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d127      	bne.n	8001b68 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d119      	bne.n	8001b68 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0220 	bic.w	r2, r2, #32
 8001b42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7fe fe01 	bl	8000770 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0212 	mvn.w	r2, #18
 8001b76:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d057      	beq.n	8001c3e <HAL_ADC_IRQHandler+0x190>
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d054      	beq.n	8001c3e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d139      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d12b      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d124      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11d      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fc0c 	bl	800244c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 020c 	mvn.w	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d017      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x1d6>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d014      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10d      	bne.n	8001c84 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f925 	bl	8001ec4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0201 	mvn.w	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c92:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d015      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x218>
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d012      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f043 0202 	orr.w	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0220 	mvn.w	r2, #32
 8001cb4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f90e 	bl	8001ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0220 	mvn.w	r2, #32
 8001cc4:	601a      	str	r2, [r3, #0]
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Start_DMA+0x1e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e0ce      	b.n	8001e8c <HAL_ADC_Start_DMA+0x1bc>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d018      	beq.n	8001d36 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d14:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_ADC_Start_DMA+0x1c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a5f      	ldr	r2, [pc, #380]	; (8001e98 <HAL_ADC_Start_DMA+0x1c8>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9a      	lsrs	r2, r3, #18
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d28:	e002      	b.n	8001d30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f9      	bne.n	8001d2a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d44:	d107      	bne.n	8001d56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d54:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	f040 8086 	bne.w	8001e72 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da4:	d106      	bne.n	8001db4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f023 0206 	bic.w	r2, r3, #6
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
 8001db2:	e002      	b.n	8001dba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_ADC_Start_DMA+0x1cc>)
 8001dc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	4a35      	ldr	r2, [pc, #212]	; (8001ea0 <HAL_ADC_Start_DMA+0x1d0>)
 8001dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <HAL_ADC_Start_DMA+0x1d4>)
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dda:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <HAL_ADC_Start_DMA+0x1d8>)
 8001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001df6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e06:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	334c      	adds	r3, #76	; 0x4c
 8001e12:	4619      	mov	r1, r3
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f000 fce2 	bl	80027e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d129      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	e020      	b.n	8001e8a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_ADC_Start_DMA+0x1dc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d11b      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x1ba>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d114      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00b      	b.n	8001e8a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000090 	.word	0x20000090
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	40012300 	.word	0x40012300
 8001ea0:	08002349 	.word	0x08002349
 8001ea4:	08002403 	.word	0x08002403
 8001ea8:	0800241f 	.word	0x0800241f
 8001eac:	40012000 	.word	0x40012000

08001eb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e113      	b.n	8002130 <HAL_ADC_ConfigChannel+0x244>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d925      	bls.n	8001f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43da      	mvns	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68d9      	ldr	r1, [r3, #12]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4403      	add	r3, r0
 8001f56:	3b1e      	subs	r3, #30
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e022      	b.n	8001faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	2207      	movs	r2, #7
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	400a      	ands	r2, r1
 8001f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4403      	add	r3, r0
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d824      	bhi.n	8001ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b05      	subs	r3, #5
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b05      	subs	r3, #5
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffa:	e04c      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d824      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b23      	subs	r3, #35	; 0x23
 8002016:	221f      	movs	r2, #31
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b23      	subs	r3, #35	; 0x23
 8002040:	fa00 f203 	lsl.w	r2, r0, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
 800204c:	e023      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	; 0x41
 8002060:	221f      	movs	r2, #31
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b41      	subs	r3, #65	; 0x41
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_ADC_ConfigChannel+0x250>)
 8002098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_ADC_ConfigChannel+0x254>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d10f      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b12      	cmp	r3, #18
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_ADC_ConfigChannel+0x254>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConfigChannel+0x258>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x1f4>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d122      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_ADC_ConfigChannel+0x258>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_ADC_ConfigChannel+0x25c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x260>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9a      	lsrs	r2, r3, #18
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002118:	e002      	b.n	8002120 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40012300 	.word	0x40012300
 8002140:	40012000 	.word	0x40012000
 8002144:	10000012 	.word	0x10000012
 8002148:	20000090 	.word	0x20000090
 800214c:	431bde83 	.word	0x431bde83

08002150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <ADC_Init+0x1f0>)
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	021a      	lsls	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <ADC_Init+0x1f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e00f      	b.n	800224e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800224c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0202 	bic.w	r2, r2, #2
 800225c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	005a      	lsls	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800229a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	3b01      	subs	r3, #1
 80022a8:	035a      	lsls	r2, r3, #13
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e007      	b.n	80022c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	3b01      	subs	r3, #1
 80022e0:	051a      	lsls	r2, r3, #20
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002306:	025a      	lsls	r2, r3, #9
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	029a      	lsls	r2, r3, #10
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	0f000001 	.word	0x0f000001

08002348 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800235e:	2b00      	cmp	r3, #0
 8002360:	d13c      	bne.n	80023dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d12b      	bne.n	80023d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	d127      	bne.n	80023d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800239c:	2b00      	cmp	r3, #0
 800239e:	d119      	bne.n	80023d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0220 	bic.w	r2, r2, #32
 80023ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7fe f9cb 	bl	8000770 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023da:	e00e      	b.n	80023fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff fd75 	bl	8001ed8 <HAL_ADC_ErrorCallback>
}
 80023ee:	e004      	b.n	80023fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff fd4d 	bl	8001eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff fd4a 	bl	8001ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff3e 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff8e 	bl	8002554 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5d 	bl	8002500 <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff31 	bl	80024c4 <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffa2 	bl	80025bc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff f99a 	bl	80019c8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e099      	b.n	80027d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c0:	e00f      	b.n	80026e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c2:	f7ff f981 	bl	80019c8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d908      	bls.n	80026e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2203      	movs	r2, #3
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e078      	b.n	80027d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e8      	bne.n	80026c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_DMA_Init+0x158>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b04      	cmp	r3, #4
 800273a:	d107      	bne.n	800274c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4313      	orrs	r3, r2
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b04      	cmp	r3, #4
 8002774:	d117      	bne.n	80027a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fa91 	bl	8002cb0 <DMA_CheckFifoParam>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2240      	movs	r2, #64	; 0x40
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027a2:	2301      	movs	r3, #1
 80027a4:	e016      	b.n	80027d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa48 	bl	8002c44 <DMA_CalcBaseAndBitshift>
 80027b4:	4603      	mov	r3, r0
 80027b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	223f      	movs	r2, #63	; 0x3f
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	f010803f 	.word	0xf010803f

080027e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Start_IT+0x26>
 8002802:	2302      	movs	r3, #2
 8002804:	e040      	b.n	8002888 <HAL_DMA_Start_IT+0xa8>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d12f      	bne.n	800287a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f9da 	bl	8002be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	223f      	movs	r2, #63	; 0x3f
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0216 	orr.w	r2, r2, #22
 800284e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0208 	orr.w	r2, r2, #8
 8002866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e005      	b.n	8002886 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00c      	b.n	80028c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2205      	movs	r2, #5
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028e0:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_DMA_IRQHandler+0x248>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a8e      	ldr	r2, [pc, #568]	; (8002b20 <HAL_DMA_IRQHandler+0x24c>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2208      	movs	r2, #8
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0204 	bic.w	r2, r2, #4
 8002926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2208      	movs	r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2204      	movs	r2, #4
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2204      	movs	r2, #4
 800299a:	409a      	lsls	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2210      	movs	r2, #16
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d043      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03c      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2210      	movs	r2, #16
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d024      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e01f      	b.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
 8002a14:	e016      	b.n	8002a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0208 	bic.w	r2, r2, #8
 8002a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2220      	movs	r2, #32
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 808f 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8087 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d136      	bne.n	8002aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0216 	bic.w	r2, r2, #22
 8002a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_DMA_IRQHandler+0x1da>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0208 	bic.w	r2, r2, #8
 8002abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	223f      	movs	r2, #63	; 0x3f
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d07e      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
        }
        return;
 8002aea:	e079      	b.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d031      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
 8002b18:	e02c      	b.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
 8002b1a:	bf00      	nop
 8002b1c:	20000090 	.word	0x20000090
 8002b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e01e      	b.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0210 	bic.w	r2, r2, #16
 8002b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d032      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d022      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d307      	bcc.n	8002bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f2      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x2cc>
 8002bba:	e000      	b.n	8002bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002be0:	bf00      	nop
    }
  }
}
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d108      	bne.n	8002c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c26:	e007      	b.n	8002c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3b10      	subs	r3, #16
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c5e:	4a13      	ldr	r2, [pc, #76]	; (8002cac <DMA_CalcBaseAndBitshift+0x68>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d909      	bls.n	8002c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	1d1a      	adds	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	659a      	str	r2, [r3, #88]	; 0x58
 8002c84:	e007      	b.n	8002c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	aaaaaaab 	.word	0xaaaaaaab
 8002cac:	08004e68 	.word	0x08004e68

08002cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11f      	bne.n	8002d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d856      	bhi.n	8002d7e <DMA_CheckFifoParam+0xce>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <DMA_CheckFifoParam+0x28>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cfb 	.word	0x08002cfb
 8002ce0:	08002ce9 	.word	0x08002ce9
 8002ce4:	08002d7f 	.word	0x08002d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d046      	beq.n	8002d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf8:	e043      	b.n	8002d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d02:	d140      	bne.n	8002d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d08:	e03d      	b.n	8002d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d121      	bne.n	8002d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d837      	bhi.n	8002d8a <DMA_CheckFifoParam+0xda>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <DMA_CheckFifoParam+0x70>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d37 	.word	0x08002d37
 8002d28:	08002d31 	.word	0x08002d31
 8002d2c:	08002d49 	.word	0x08002d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e030      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d025      	beq.n	8002d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d46:	e022      	b.n	8002d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d50:	d11f      	bne.n	8002d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d56:	e01c      	b.n	8002d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d903      	bls.n	8002d66 <DMA_CheckFifoParam+0xb6>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d003      	beq.n	8002d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d64:	e018      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6a:	e015      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7c:	e00b      	b.n	8002d96 <DMA_CheckFifoParam+0xe6>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e00a      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e008      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e006      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e004      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
    }
  } 
  
  return status; 
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e159      	b.n	8003078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8148 	bne.w	8003072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a2 	beq.w	8003072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a49      	ldr	r2, [pc, #292]	; (8003098 <HAL_GPIO_Init+0x2f0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <HAL_GPIO_Init+0x202>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_GPIO_Init+0x2f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0x1fe>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_GPIO_Init+0x2f8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_GPIO_Init+0x2fc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x1f6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_GPIO_Init+0x1f2>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e008      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e004      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002faa:	2300      	movs	r3, #0
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f002 0203 	and.w	r2, r2, #3
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fbc:	4935      	ldr	r1, [pc, #212]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_GPIO_Init+0x304>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_GPIO_Init+0x304>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_GPIO_Init+0x304>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	f67f aea2 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40013800 	.word	0x40013800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
 80030bc:	4613      	mov	r3, r2
 80030be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c0:	787b      	ldrb	r3, [r7, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030cc:	e003      	b.n	80030d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ce:	887b      	ldrh	r3, [r7, #2]
 80030d0:	041a      	lsls	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	619a      	str	r2, [r3, #24]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fe8a 	bl	8000e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40013c00 	.word	0x40013c00

08003114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e12b      	b.n	800337e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fce4 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003178:	f001 f896 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a81      	ldr	r2, [pc, #516]	; (8003388 <HAL_I2C_Init+0x274>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d807      	bhi.n	8003198 <HAL_I2C_Init+0x84>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_I2C_Init+0x278>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e006      	b.n	80031a6 <HAL_I2C_Init+0x92>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a7d      	ldr	r2, [pc, #500]	; (8003390 <HAL_I2C_Init+0x27c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	bf94      	ite	ls
 80031a0:	2301      	movls	r3, #1
 80031a2:	2300      	movhi	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0e7      	b.n	800337e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a78      	ldr	r2, [pc, #480]	; (8003394 <HAL_I2C_Init+0x280>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9b      	lsrs	r3, r3, #18
 80031b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a6a      	ldr	r2, [pc, #424]	; (8003388 <HAL_I2C_Init+0x274>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d802      	bhi.n	80031e8 <HAL_I2C_Init+0xd4>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3301      	adds	r3, #1
 80031e6:	e009      	b.n	80031fc <HAL_I2C_Init+0xe8>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_I2C_Init+0x284>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	3301      	adds	r3, #1
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800320e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	495c      	ldr	r1, [pc, #368]	; (8003388 <HAL_I2C_Init+0x274>)
 8003218:	428b      	cmp	r3, r1
 800321a:	d819      	bhi.n	8003250 <HAL_I2C_Init+0x13c>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e59      	subs	r1, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fbb1 f3f3 	udiv	r3, r1, r3
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003230:	400b      	ands	r3, r1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_I2C_Init+0x138>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e59      	subs	r1, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fbb1 f3f3 	udiv	r3, r1, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324a:	e051      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 800324c:	2304      	movs	r3, #4
 800324e:	e04f      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d111      	bne.n	800327c <HAL_I2C_Init+0x168>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e58      	subs	r0, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_I2C_Init+0x18e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Init+0x196>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e022      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10e      	bne.n	80032d0 <HAL_I2C_Init+0x1bc>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e58      	subs	r0, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	440b      	add	r3, r1
 80032c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Init+0x1dc>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e58      	subs	r0, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	0099      	lsls	r1, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	6809      	ldr	r1, [r1, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800331e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6911      	ldr	r1, [r2, #16]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68d2      	ldr	r2, [r2, #12]
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	000186a0 	.word	0x000186a0
 800338c:	001e847f 	.word	0x001e847f
 8003390:	003d08ff 	.word	0x003d08ff
 8003394:	431bde83 	.word	0x431bde83
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b6:	f7fe fb07 	bl	80019c8 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	f040 80d9 	bne.w	800357c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2319      	movs	r3, #25
 80033d0:	2201      	movs	r2, #1
 80033d2:	496d      	ldr	r1, [pc, #436]	; (8003588 <HAL_I2C_Mem_Write+0x1ec>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f971 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0cc      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Mem_Write+0x56>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0c5      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d007      	beq.n	8003418 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2221      	movs	r2, #33	; 0x21
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a4d      	ldr	r2, [pc, #308]	; (800358c <HAL_I2C_Mem_Write+0x1f0>)
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800345a:	88f8      	ldrh	r0, [r7, #6]
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4603      	mov	r3, r0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f890 	bl	8003590 <I2C_RequestMemoryWrite>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d052      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e081      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f9f2 	bl	8003868 <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_I2C_Mem_Write+0x180>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d017      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1aa      	bne.n	800347a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f9de 	bl	80038ea <I2C_WaitOnBTFFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e016      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	00100002 	.word	0x00100002
 800358c:	ffff0000 	.word	0xffff0000

08003590 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f878 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e0:	d103      	bne.n	80035ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e05f      	b.n	80036ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	6a3a      	ldr	r2, [r7, #32]
 8003602:	492d      	ldr	r1, [pc, #180]	; (80036b8 <I2C_RequestMemoryWrite+0x128>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f8b0 	bl	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e04c      	b.n	80036ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	6a39      	ldr	r1, [r7, #32]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f91a 	bl	8003868 <I2C_WaitOnTXEFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2b04      	cmp	r3, #4
 8003640:	d107      	bne.n	8003652 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e02b      	b.n	80036ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e021      	b.n	80036ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	6a39      	ldr	r1, [r7, #32]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f8f4 	bl	8003868 <I2C_WaitOnTXEFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b04      	cmp	r3, #4
 800368c:	d107      	bne.n	800369e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e005      	b.n	80036ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	00010002 	.word	0x00010002

080036bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036cc:	e025      	b.n	800371a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d021      	beq.n	800371a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe f977 	bl	80019c8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e023      	b.n	8003762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10d      	bne.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	e00c      	b.n	800375a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0b6      	beq.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003778:	e051      	b.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d123      	bne.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e046      	b.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d021      	beq.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fe f8f5 	bl	80019c8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e020      	b.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10c      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e00b      	b.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d18d      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003874:	e02d      	b.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f878 	bl	800396c <I2C_IsAcknowledgeFailed>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e02d      	b.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d021      	beq.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fe f89b 	bl	80019c8 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d1ca      	bne.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f6:	e02d      	b.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f837 	bl	800396c <I2C_IsAcknowledgeFailed>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e02d      	b.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d021      	beq.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003910:	f7fe f85a 	bl	80019c8 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d302      	bcc.n	8003926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e007      	b.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d1ca      	bne.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d11b      	bne.n	80039bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800398c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e267      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d075      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b85      	ldr	r3, [pc, #532]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x108>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d157      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e242      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x74>
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6c      	ldr	r2, [pc, #432]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a64:	4b69      	ldr	r3, [pc, #420]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fd ffa0 	bl	80019c8 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fd ff9c 	bl	80019c8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e207      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xc0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fd ff8c 	bl	80019c8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fd ff88 	bl	80019c8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1f3      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xe8>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c7      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4937      	ldr	r1, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd ff41 	bl	80019c8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fd ff3d 	bl	80019c8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a8      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4925      	ldr	r1, [pc, #148]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd ff20 	bl	80019c8 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7fd ff1c 	bl	80019c8 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e187      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd ff00 	bl	80019c8 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fefc 	bl	80019c8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e167      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x200>
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fee9 	bl	80019c8 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fd fee5 	bl	80019c8 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e150      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470000 	.word	0x42470000
 8003c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8097 	beq.w	8003d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fea5 	bl	80019c8 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fd fea1 	bl	80019c8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2ea>
 8003ca8:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a63      	ldr	r2, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x30c>
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b5c      	ldr	r3, [pc, #368]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a54      	ldr	r2, [pc, #336]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fe66 	bl	80019c8 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fe62 	bl	80019c8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0cb      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7fd fe50 	bl	80019c8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd fe4c 	bl	80019c8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0b5      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a1 	beq.w	8003eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d05c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d141      	bne.n	8003e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd fe20 	bl	80019c8 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fd fe1c 	bl	80019c8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e087      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fd fdf5 	bl	80019c8 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fd fdf1 	bl	80019c8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e05c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x416>
 8003e00:	e054      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd fdde 	bl	80019c8 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fdda 	bl	80019c8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e045      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e038      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d121      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7fd fd0c 	bl	80019c8 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fd fd08 	bl	80019c8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fc6c 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	08004e50 	.word	0x08004e50
 8004080:	20000090 	.word	0x20000090
 8004084:	20000094 	.word	0x20000094

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b094      	sub	sp, #80	; 0x50
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	; 0x44
 8004094:	2300      	movs	r3, #0
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80e1 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e0db      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b73      	ldr	r3, [pc, #460]	; (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040c0:	e0db      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b72      	ldr	r3, [pc, #456]	; (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c6:	e0d8      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
 80040f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040fa:	4622      	mov	r2, r4
 80040fc:	462b      	mov	r3, r5
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410c:	0150      	lsls	r0, r2, #5
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4621      	mov	r1, r4
 8004114:	1a51      	subs	r1, r2, r1
 8004116:	6139      	str	r1, [r7, #16]
 8004118:	4629      	mov	r1, r5
 800411a:	eb63 0301 	sbc.w	r3, r3, r1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800412c:	4659      	mov	r1, fp
 800412e:	018b      	lsls	r3, r1, #6
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004136:	4651      	mov	r1, sl
 8004138:	018a      	lsls	r2, r1, #6
 800413a:	4651      	mov	r1, sl
 800413c:	ebb2 0801 	subs.w	r8, r2, r1
 8004140:	4659      	mov	r1, fp
 8004142:	eb63 0901 	sbc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	462b      	mov	r3, r5
 8004168:	eb49 0303 	adc.w	r3, r9, r3
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800417a:	4629      	mov	r1, r5
 800417c:	028b      	lsls	r3, r1, #10
 800417e:	4621      	mov	r1, r4
 8004180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004184:	4621      	mov	r1, r4
 8004186:	028a      	lsls	r2, r1, #10
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418e:	2200      	movs	r2, #0
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004198:	f7fc f826 	bl	80001e8 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4613      	mov	r3, r2
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a4:	e058      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	2200      	movs	r2, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	4611      	mov	r1, r2
 80041b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	2300      	movs	r3, #0
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
 80041bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	0159      	lsls	r1, r3, #5
 80041ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d2:	0150      	lsls	r0, r2, #5
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4641      	mov	r1, r8
 80041da:	ebb2 0a01 	subs.w	sl, r2, r1
 80041de:	4649      	mov	r1, r9
 80041e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041f8:	ebb2 040a 	subs.w	r4, r2, sl
 80041fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	00eb      	lsls	r3, r5, #3
 800420a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420e:	00e2      	lsls	r2, r4, #3
 8004210:	4614      	mov	r4, r2
 8004212:	461d      	mov	r5, r3
 8004214:	4643      	mov	r3, r8
 8004216:	18e3      	adds	r3, r4, r3
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	464b      	mov	r3, r9
 800421c:	eb45 0303 	adc.w	r3, r5, r3
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800422e:	4629      	mov	r1, r5
 8004230:	028b      	lsls	r3, r1, #10
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004238:	4621      	mov	r1, r4
 800423a:	028a      	lsls	r2, r1, #10
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	2200      	movs	r2, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	61fa      	str	r2, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	f7fb ffcc 	bl	80001e8 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800426a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800427c:	4618      	mov	r0, r3
 800427e:	3750      	adds	r7, #80	; 0x50
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400

08004290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000090 	.word	0x20000090

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042ac:	f7ff fff0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a9b      	lsrs	r3, r3, #10
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08004e60 	.word	0x08004e60

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07b      	b.n	80043da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d009      	beq.n	8004308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	e005      	b.n	8004308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc ff22 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	ea42 0103 	orr.w	r1, r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0104 	and.w	r1, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0210 	and.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	d009      	beq.n	8004424 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
    return;
 8004422:	e0ce      	b.n	80045c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_SPI_IRQHandler+0x5e>
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
    return;
 8004440:	e0bf      	b.n	80045c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <HAL_SPI_IRQHandler+0x7e>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80b0 	beq.w	80045c2 <HAL_SPI_IRQHandler+0x1de>
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80aa 	beq.w	80045c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d023      	beq.n	80044c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b03      	cmp	r3, #3
 8004482:	d011      	beq.n	80044a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	f043 0204 	orr.w	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	e00b      	b.n	80044c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
        return;
 80044be:	e080      	b.n	80045c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f043 0208 	orr.w	r2, r3, #8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	2b00      	cmp	r3, #0
 800451e:	d04f      	beq.n	80045c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800452e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_SPI_IRQHandler+0x168>
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d034      	beq.n	80045b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0203 	bic.w	r2, r2, #3
 800455a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d011      	beq.n	8004588 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <HAL_SPI_IRQHandler+0x1e4>)
 800456a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe f98d 	bl	8002890 <HAL_DMA_Abort_IT>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	2b00      	cmp	r3, #0
 800458e:	d016      	beq.n	80045be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <HAL_SPI_IRQHandler+0x1e4>)
 8004596:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe f977 	bl	8002890 <HAL_DMA_Abort_IT>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80045b4:	e003      	b.n	80045be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f808 	bl	80045cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045bc:	e000      	b.n	80045c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80045be:	bf00      	nop
    return;
 80045c0:	bf00      	nop
  }
}
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	080045e1 	.word	0x080045e1

080045cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff ffe6 	bl	80045cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e03c      	b.n	800469a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_TIM_Base_Start+0xa0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_TIM_Base_Start+0x5c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d013      	beq.n	8004664 <HAL_TIM_Base_Start+0x5c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_TIM_Base_Start+0xa4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_TIM_Base_Start+0x5c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_TIM_Base_Start+0xa8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_TIM_Base_Start+0x5c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <HAL_TIM_Base_Start+0xac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIM_Base_Start+0x5c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <HAL_TIM_Base_Start+0xb0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d111      	bne.n	8004688 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b06      	cmp	r3, #6
 8004674:	d010      	beq.n	8004698 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	e007      	b.n	8004698 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40014000 	.word	0x40014000

080046bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e097      	b.n	8004800 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fd f897 	bl	8001818 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f000 f907 	bl	8004924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	4313      	orrs	r3, r2
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800475c:	f023 030c 	bic.w	r3, r3, #12
 8004760:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	4313      	orrs	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	011a      	lsls	r2, r3, #4
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	031b      	lsls	r3, r3, #12
 800478c:	4313      	orrs	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	4313      	orrs	r3, r2
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004818:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004820:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004828:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004830:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d110      	bne.n	800485a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d102      	bne.n	8004844 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800483e:	7b7b      	ldrb	r3, [r7, #13]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e069      	b.n	800491c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004858:	e031      	b.n	80048be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d110      	bne.n	8004882 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004866:	7b3b      	ldrb	r3, [r7, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e055      	b.n	800491c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004880:	e01d      	b.n	80048be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d108      	bne.n	800489a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004888:	7bbb      	ldrb	r3, [r7, #14]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800488e:	7b7b      	ldrb	r3, [r7, #13]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004894:	7b3b      	ldrb	r3, [r7, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e03e      	b.n	800491c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_Encoder_Start+0xc4>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d008      	beq.n	80048dc <HAL_TIM_Encoder_Start+0xd4>
 80048ca:	e00f      	b.n	80048ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2201      	movs	r2, #1
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f8a5 	bl	8004a24 <TIM_CCxChannelCmd>
      break;
 80048da:	e016      	b.n	800490a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2201      	movs	r2, #1
 80048e2:	2104      	movs	r1, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f89d 	bl	8004a24 <TIM_CCxChannelCmd>
      break;
 80048ea:	e00e      	b.n	800490a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f895 	bl	8004a24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	2104      	movs	r1, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f88e 	bl	8004a24 <TIM_CCxChannelCmd>
      break;
 8004908:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a34      	ldr	r2, [pc, #208]	; (8004a08 <TIM_Base_SetConfig+0xe4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00f      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d00b      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a31      	ldr	r2, [pc, #196]	; (8004a0c <TIM_Base_SetConfig+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d007      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <TIM_Base_SetConfig+0xec>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a2f      	ldr	r2, [pc, #188]	; (8004a14 <TIM_Base_SetConfig+0xf0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_Base_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01b      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d017      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <TIM_Base_SetConfig+0xe8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <TIM_Base_SetConfig+0xec>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00f      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <TIM_Base_SetConfig+0xf0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <TIM_Base_SetConfig+0xf4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <TIM_Base_SetConfig+0xf8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <TIM_Base_SetConfig+0xfc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <TIM_Base_SetConfig+0xe4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800

08004a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2201      	movs	r2, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e050      	b.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d013      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10c      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000

08004b4c <memset>:
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	; (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	; (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	; (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f000 f818 	bl	8004ba4 <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08004e78 	.word	0x08004e78
 8004b98:	08004e78 	.word	0x08004e78
 8004b9c:	08004e78 	.word	0x08004e78
 8004ba0:	08004e7c 	.word	0x08004e7c

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
