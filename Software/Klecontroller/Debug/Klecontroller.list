
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bcc  08008bcc  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd4  08008bd4  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08008bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  200001a0  08008d7c  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  08008d7c  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ae8  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004732  00000000  00000000  00037cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0003c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f2  00000000  00000000  0003dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d06f  00000000  00000000  0003edca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024745  00000000  00000000  0005be39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a003d  00000000  00000000  0008057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066cc  00000000  00000000  001205bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00126c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800879c 	.word	0x0800879c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	0800879c 	.word	0x0800879c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Programs_DiodeTestSendOnCmd>:

//
// -- Setting LED on/off --
//
static void Programs_DiodeTestSendOnCmd(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000592:	23d0      	movs	r3, #208	; 0xd0
 8000594:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_ON;
 8000596:	2320      	movs	r3, #32
 8000598:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fae0 	bl	8001b64 <Radio_TxBufferPut>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Programs_DiodeTestSendOffCmd>:

static void Programs_DiodeTestSendOffCmd(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 80005b2:	23d0      	movs	r3, #208	; 0xd0
 80005b4:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_OFF;
 80005b6:	2321      	movs	r3, #33	; 0x21
 80005b8:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fad0 	bl	8001b64 <Radio_TxBufferPut>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <Programs_DiodeTestProgram>:
//
// -- Main Diode Test Program for Controller --
//

Programs_status_t Programs_DiodeTestProgram(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	/*First entry, code which will be performed only at the first entry to this program after launching it */
	if(0 == FirstEntry)
 80005d0:	4b36      	ldr	r3, [pc, #216]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10f      	bne.n	80005f8 <Programs_DiodeTestProgram+0x2c>
	{
		/* Clearing display */
		OLED_ClearBuffer(BLACK);
 80005d8:	2000      	movs	r0, #0
 80005da:	f002 fd75 	bl	80030c8 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 80005de:	2100      	movs	r1, #0
 80005e0:	2000      	movs	r0, #0
 80005e2:	f002 fcb7 	bl	8002f54 <OLED_MoveCursor>
		OLED_WriteString("Launching Diode Test ...", WHITE);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4831      	ldr	r0, [pc, #196]	; (80006b0 <Programs_DiodeTestProgram+0xe4>)
 80005ea:	f002 fe37 	bl	800325c <OLED_WriteString>
		OLED_SendBuffer();
 80005ee:	f002 fd3f 	bl	8003070 <OLED_SendBuffer>
		FirstEntry = 1;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
	}

	/* Program exit process */
	if(1 == DiodeTestDatabase.ProgramExitFlag)
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d125      	bne.n	800064c <Programs_DiodeTestProgram+0x80>
	{

		/* If there was an exit ACK, CurrentRobotProgramID was cleared by parser */
		if(NO_PROGRAM_SET == Programs_GetCurrentRobotProgramID() )
 8000600:	f000 fa04 	bl	8000a0c <Programs_GetCurrentRobotProgramID>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10a      	bne.n	8000620 <Programs_DiodeTestProgram+0x54>
		{
			DiodeTestDatabase.ProgramExitFlag = 0;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
			DiodeTestDatabase.DiodeState = 0;
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
			return PROGRAM_COMPLETED;
 800061c:	2301      	movs	r3, #1
 800061e:	e042      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
		}
		/* If ACK have not came before timeout, exit program with error */
		else if(HAL_GetTick() - DiodeTestDatabase.TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
 8000620:	f003 f912 	bl	8003848 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000630:	d90c      	bls.n	800064c <Programs_DiodeTestProgram+0x80>
		{
			DiodeTestDatabase.ProgramExitFlag = 0;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	705a      	strb	r2, [r3, #1]
			DiodeTestDatabase.DiodeState = 0;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
			Programs_ClearCurrentRobotProgramID();
 8000644:	f000 f9ee 	bl	8000a24 <Programs_ClearCurrentRobotProgramID>
			return PROGRAM_EXIT_ERROR;
 8000648:	2304      	movs	r3, #4
 800064a:	e02c      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
	}

	/* Program launch process */
	/* Check if we had response from robot that program has properly started
	 * (parser is writing CurrentRobotProgramID if robot sends start ACK*/
	if(DIODE_TEST != Programs_GetCurrentRobotProgramID() )
 800064c:	f000 f9de 	bl	8000a0c <Programs_GetCurrentRobotProgramID>
 8000650:	4603      	mov	r3, r0
 8000652:	2bd0      	cmp	r3, #208	; 0xd0
 8000654:	d00f      	beq.n	8000676 <Programs_DiodeTestProgram+0xaa>
	{
		if(HAL_GetTick() - DiodeTestDatabase.TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 8000656:	f003 f8f7 	bl	8003848 <HAL_GetTick>
 800065a:	4602      	mov	r2, r0
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000666:	d904      	bls.n	8000672 <Programs_DiodeTestProgram+0xa6>
		{
			FirstEntry = 0;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <Programs_DiodeTestProgram+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			return PROGRAM_LAUNCH_ERROR;
 800066e:	2303      	movs	r3, #3
 8000670:	e019      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
		}
		else
		{
			return PROGRAM_IN_PROGRESS;
 8000672:	2302      	movs	r3, #2
 8000674:	e017      	b.n	80006a6 <Programs_DiodeTestProgram+0xda>
		}
	}

	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 8000676:	2000      	movs	r0, #0
 8000678:	f002 fd26 	bl	80030c8 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f002 fc68 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteString("LED STATE:", WHITE);
 8000684:	2101      	movs	r1, #1
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <Programs_DiodeTestProgram+0xec>)
 8000688:	f002 fde8 	bl	800325c <OLED_WriteString>
	OLED_MoveCursor(0, 16);
 800068c:	2110      	movs	r1, #16
 800068e:	2000      	movs	r0, #0
 8000690:	f002 fc60 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteInt(DiodeTestDatabase.DiodeState, WHITE);
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <Programs_DiodeTestProgram+0xe8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fe04 	bl	80032a8 <OLED_WriteInt>
	OLED_SendBuffer();
 80006a0:	f002 fce6 	bl	8003070 <OLED_SendBuffer>

	return PROGRAM_IN_PROGRESS;
 80006a4:	2302      	movs	r3, #2
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001c4 	.word	0x200001c4
 80006b0:	080087b4 	.word	0x080087b4
 80006b4:	200001bc 	.word	0x200001bc
 80006b8:	080087d0 	.word	0x080087d0

080006bc <Programs_DiodeTestSet>:
//
// -- Program start/exit --
//

void Programs_DiodeTestSet(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* Send start command to robot */
	Programs_SendProgramStartCommand(DIODE_TEST);
 80006c0:	20d0      	movs	r0, #208	; 0xd0
 80006c2:	f000 f96b 	bl	800099c <Programs_SendProgramStartCommand>
	/* Set this program in this device */
	Programs_SetProgram(Programs_DiodeTestProgram);
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <Programs_DiodeTestSet+0x38>)
 80006c8:	f000 f930 	bl	800092c <Programs_SetProgram>
	/* Setting proper buttons funcionality for this program */
	Inputs_ClearButtonsCallbacks();
 80006cc:	f000 fdd8 	bl	8001280 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Programs_DiodeTestSendOnCmd, &Programs_DiodeTestExitProgram);
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <Programs_DiodeTestSet+0x3c>)
 80006d2:	490a      	ldr	r1, [pc, #40]	; (80006fc <Programs_DiodeTestSet+0x40>)
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fd8d 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, &Programs_DiodeTestSendOffCmd, NULL);
 80006da:	2200      	movs	r2, #0
 80006dc:	4908      	ldr	r1, [pc, #32]	; (8000700 <Programs_DiodeTestSet+0x44>)
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fd88 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	/* Timestamp for counting timeout for program launch on Klebot */
	DiodeTestDatabase.TimeoutStamp = HAL_GetTick();
 80006e4:	f003 f8b0 	bl	8003848 <HAL_GetTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <Programs_DiodeTestSet+0x48>)
 80006ec:	6053      	str	r3, [r2, #4]
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	080005cd 	.word	0x080005cd
 80006f8:	08000709 	.word	0x08000709
 80006fc:	0800058d 	.word	0x0800058d
 8000700:	080005ad 	.word	0x080005ad
 8000704:	200001bc 	.word	0x200001bc

08000708 <Programs_DiodeTestExitProgram>:

void Programs_DiodeTestExitProgram(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	DiodeTestDatabase.ProgramExitFlag = 1;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <Programs_DiodeTestExitProgram+0x20>)
 800070e:	2201      	movs	r2, #1
 8000710:	705a      	strb	r2, [r3, #1]
	Programs_SendProgramExitCommand(DIODE_TEST);
 8000712:	20d0      	movs	r0, #208	; 0xd0
 8000714:	f000 f956 	bl	80009c4 <Programs_SendProgramExitCommand>
	/* Timestamp for counting timeout for program exit on Klebot */
	DiodeTestDatabase.TimeoutStamp = HAL_GetTick();
 8000718:	f003 f896 	bl	8003848 <HAL_GetTick>
 800071c:	4603      	mov	r3, r0
 800071e:	4a02      	ldr	r2, [pc, #8]	; (8000728 <Programs_DiodeTestExitProgram+0x20>)
 8000720:	6053      	str	r3, [r2, #4]
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001bc 	.word	0x200001bc

0800072c <Programs_DiodeTestParser>:
//
// -- Program Parser --
//

void Programs_DiodeTestParser(uint8_t *command, uint8_t length)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b22      	cmp	r3, #34	; 0x22
 8000742:	d011      	beq.n	8000768 <Programs_DiodeTestParser+0x3c>
 8000744:	2b22      	cmp	r3, #34	; 0x22
 8000746:	dc20      	bgt.n	800078a <Programs_DiodeTestParser+0x5e>
 8000748:	2b10      	cmp	r3, #16
 800074a:	d002      	beq.n	8000752 <Programs_DiodeTestParser+0x26>
 800074c:	2b11      	cmp	r3, #17
 800074e:	d013      	beq.n	8000778 <Programs_DiodeTestParser+0x4c>
			Programs_ClearCurrentRobotProgramID();
		}

	default:

		break;
 8000750:	e01b      	b.n	800078a <Programs_DiodeTestParser+0x5e>
		CurrentByte++;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2bf0      	cmp	r3, #240	; 0xf0
 800075e:	d116      	bne.n	800078e <Programs_DiodeTestParser+0x62>
			Programs_SetCurrentRobotProgramID(DIODE_TEST);				//ack that program has started
 8000760:	20d0      	movs	r0, #208	; 0xd0
 8000762:	f000 f943 	bl	80009ec <Programs_SetCurrentRobotProgramID>
		break;
 8000766:	e012      	b.n	800078e <Programs_DiodeTestParser+0x62>
		CurrentByte++;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
		DiodeTestDatabase.DiodeState = *CurrentByte;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <Programs_DiodeTestParser+0x6c>)
 8000774:	701a      	strb	r2, [r3, #0]
		break;
 8000776:	e00b      	b.n	8000790 <Programs_DiodeTestParser+0x64>
		CurrentByte++;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2bf0      	cmp	r3, #240	; 0xf0
 8000784:	d101      	bne.n	800078a <Programs_DiodeTestParser+0x5e>
			Programs_ClearCurrentRobotProgramID();
 8000786:	f000 f94d 	bl	8000a24 <Programs_ClearCurrentRobotProgramID>
		break;
 800078a:	bf00      	nop
 800078c:	e000      	b.n	8000790 <Programs_DiodeTestParser+0x64>
		break;
 800078e:	bf00      	nop
	}
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001bc 	.word	0x200001bc

0800079c <Programs_MotorsDebugControllProgram>:
//
// -- Main Diode Test Program for Controller --
//

Programs_status_t Programs_MotorsDebugControllProgram(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	/*First entry, code which will be performed only at the first entry to this program after launching it */
	if(0 == FirstEntry)
 80007a0:	4b2e      	ldr	r3, [pc, #184]	; (800085c <Programs_MotorsDebugControllProgram+0xc0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10f      	bne.n	80007c8 <Programs_MotorsDebugControllProgram+0x2c>
	{
		/* Clearing display */
		OLED_ClearBuffer(BLACK);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f002 fc8d 	bl	80030c8 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f002 fbcf 	bl	8002f54 <OLED_MoveCursor>
		OLED_WriteString("Launching Motor Debug ...", WHITE);
 80007b6:	2101      	movs	r1, #1
 80007b8:	4829      	ldr	r0, [pc, #164]	; (8000860 <Programs_MotorsDebugControllProgram+0xc4>)
 80007ba:	f002 fd4f 	bl	800325c <OLED_WriteString>
		OLED_SendBuffer();
 80007be:	f002 fc57 	bl	8003070 <OLED_SendBuffer>
		FirstEntry = 1;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <Programs_MotorsDebugControllProgram+0xc0>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
	}

	/* Program exit process */
	if(1 == MotorsProgramDatabase.ProgramExitFlag)
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <Programs_MotorsDebugControllProgram+0xc8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d11f      	bne.n	8000810 <Programs_MotorsDebugControllProgram+0x74>
	{

		/* If there was an exit ACK, CurrentRobotProgramID was cleared by parser */
		if(NO_PROGRAM_SET == Programs_GetCurrentRobotProgramID() )
 80007d0:	f000 f91c 	bl	8000a0c <Programs_GetCurrentRobotProgramID>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <Programs_MotorsDebugControllProgram+0x4e>
		{
			MotorsProgramDatabase.ProgramExitFlag = 0;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <Programs_MotorsDebugControllProgram+0xc8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <Programs_MotorsDebugControllProgram+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
			return PROGRAM_COMPLETED;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e035      	b.n	8000856 <Programs_MotorsDebugControllProgram+0xba>
		}
		/* If ACK have not came before timeout, exit program with error */
		else if(HAL_GetTick() - MotorsProgramDatabase.TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
 80007ea:	f003 f82d 	bl	8003848 <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <Programs_MotorsDebugControllProgram+0xc8>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007fa:	d909      	bls.n	8000810 <Programs_MotorsDebugControllProgram+0x74>
		{
			MotorsProgramDatabase.ProgramExitFlag = 0;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <Programs_MotorsDebugControllProgram+0xc8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
			FirstEntry = 0;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <Programs_MotorsDebugControllProgram+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
			Programs_ClearCurrentRobotProgramID();
 8000808:	f000 f90c 	bl	8000a24 <Programs_ClearCurrentRobotProgramID>
			return PROGRAM_EXIT_ERROR;
 800080c:	2304      	movs	r3, #4
 800080e:	e022      	b.n	8000856 <Programs_MotorsDebugControllProgram+0xba>
	}

	/* Program launch process */
	/* Check if we had response from robot that program has properly started
	 * (parser is writing CurrentRobotProgramID if robot sends start ACK*/
	if(MOTORS_DEBUG != Programs_GetCurrentRobotProgramID() )
 8000810:	f000 f8fc 	bl	8000a0c <Programs_GetCurrentRobotProgramID>
 8000814:	4603      	mov	r3, r0
 8000816:	2bd1      	cmp	r3, #209	; 0xd1
 8000818:	d00f      	beq.n	800083a <Programs_MotorsDebugControllProgram+0x9e>
	{
		if(HAL_GetTick() - MotorsProgramDatabase.TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 800081a:	f003 f815 	bl	8003848 <HAL_GetTick>
 800081e:	4602      	mov	r2, r0
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <Programs_MotorsDebugControllProgram+0xc8>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082a:	d904      	bls.n	8000836 <Programs_MotorsDebugControllProgram+0x9a>
		{
			FirstEntry = 0;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <Programs_MotorsDebugControllProgram+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			return PROGRAM_LAUNCH_ERROR;
 8000832:	2303      	movs	r3, #3
 8000834:	e00f      	b.n	8000856 <Programs_MotorsDebugControllProgram+0xba>
		}
		else
		{
			return PROGRAM_IN_PROGRESS;
 8000836:	2302      	movs	r3, #2
 8000838:	e00d      	b.n	8000856 <Programs_MotorsDebugControllProgram+0xba>
		}
	}

	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 800083a:	2000      	movs	r0, #0
 800083c:	f002 fc44 	bl	80030c8 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f002 fb86 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteString("TEMPLATE", WHITE);
 8000848:	2101      	movs	r1, #1
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <Programs_MotorsDebugControllProgram+0xcc>)
 800084c:	f002 fd06 	bl	800325c <OLED_WriteString>

	OLED_SendBuffer();
 8000850:	f002 fc0e 	bl	8003070 <OLED_SendBuffer>





	return PROGRAM_IN_PROGRESS;
 8000854:	2302      	movs	r3, #2
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001d4 	.word	0x200001d4
 8000860:	080087dc 	.word	0x080087dc
 8000864:	200001c8 	.word	0x200001c8
 8000868:	080087f8 	.word	0x080087f8

0800086c <Programs_MotorsDebugControllSet>:
//
// -- Program start/exit --
//

void Programs_MotorsDebugControllSet(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	/* Send start command to robot */
	Programs_SendProgramStartCommand(MOTORS_DEBUG);
 8000870:	20d1      	movs	r0, #209	; 0xd1
 8000872:	f000 f893 	bl	800099c <Programs_SendProgramStartCommand>
	/* Set this program in this device */
	Programs_SetProgram(Programs_MotorsDebugControllProgram);
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <Programs_MotorsDebugControllSet+0x38>)
 8000878:	f000 f858 	bl	800092c <Programs_SetProgram>
	/* Setting proper buttons funcionality for this program */
	Inputs_ClearButtonsCallbacks();
 800087c:	f000 fd00 	bl	8001280 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, NULL, &Programs_MotorsDebugControllExitProgram);
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <Programs_MotorsDebugControllSet+0x3c>)
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fcb5 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, NULL, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fcb0 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	/* Timestamp for counting timeout for program launch on Klebot */
	MotorsProgramDatabase.TimeoutStamp = HAL_GetTick();
 8000894:	f002 ffd8 	bl	8003848 <HAL_GetTick>
 8000898:	4603      	mov	r3, r0
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <Programs_MotorsDebugControllSet+0x40>)
 800089c:	6053      	str	r3, [r2, #4]
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	0800079d 	.word	0x0800079d
 80008a8:	080008b1 	.word	0x080008b1
 80008ac:	200001c8 	.word	0x200001c8

080008b0 <Programs_MotorsDebugControllExitProgram>:

void Programs_MotorsDebugControllExitProgram(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	MotorsProgramDatabase.ProgramExitFlag = 1;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <Programs_MotorsDebugControllExitProgram+0x20>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
	Programs_SendProgramExitCommand(MOTORS_DEBUG);
 80008ba:	20d1      	movs	r0, #209	; 0xd1
 80008bc:	f000 f882 	bl	80009c4 <Programs_SendProgramExitCommand>
	/* Timestamp for counting timeout for program exit on Klebot */
	MotorsProgramDatabase.TimeoutStamp = HAL_GetTick();
 80008c0:	f002 ffc2 	bl	8003848 <HAL_GetTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a02      	ldr	r2, [pc, #8]	; (80008d0 <Programs_MotorsDebugControllExitProgram+0x20>)
 80008c8:	6053      	str	r3, [r2, #4]
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001c8 	.word	0x200001c8

080008d4 <Programs_MotorsDebugControllParser>:
//
// -- Program Parser --
//

void Programs_MotorsDebugControllParser(uint8_t *command, uint8_t length)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b10      	cmp	r3, #16
 80008ea:	d002      	beq.n	80008f2 <Programs_MotorsDebugControllParser+0x1e>
 80008ec:	2b11      	cmp	r3, #17
 80008ee:	d00b      	beq.n	8000908 <Programs_MotorsDebugControllParser+0x34>
			Programs_ClearCurrentRobotProgramID();
		}

	default:

		break;
 80008f0:	e016      	b.n	8000920 <Programs_MotorsDebugControllParser+0x4c>
		CurrentByte++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2bf0      	cmp	r3, #240	; 0xf0
 80008fe:	d10d      	bne.n	800091c <Programs_MotorsDebugControllParser+0x48>
			Programs_SetCurrentRobotProgramID(MOTORS_DEBUG);				//ack that program has started
 8000900:	20d1      	movs	r0, #209	; 0xd1
 8000902:	f000 f873 	bl	80009ec <Programs_SetCurrentRobotProgramID>
		break;
 8000906:	e009      	b.n	800091c <Programs_MotorsDebugControllParser+0x48>
		CurrentByte++;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
		if(ACK == *CurrentByte)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2bf0      	cmp	r3, #240	; 0xf0
 8000914:	d104      	bne.n	8000920 <Programs_MotorsDebugControllParser+0x4c>
			Programs_ClearCurrentRobotProgramID();
 8000916:	f000 f885 	bl	8000a24 <Programs_ClearCurrentRobotProgramID>
		break;
 800091a:	e001      	b.n	8000920 <Programs_MotorsDebugControllParser+0x4c>
		break;
 800091c:	bf00      	nop
 800091e:	e000      	b.n	8000922 <Programs_MotorsDebugControllParser+0x4e>
		break;
 8000920:	bf00      	nop
	}
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Programs_SetProgram>:
// -- General functions to manage programs --
//

/* Function for setting current pointer to program */
Programs_error_t Programs_SetProgram(uint8_t (*Program)(void))
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToPerform)
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <Programs_SetProgram+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d104      	bne.n	8000946 <Programs_SetProgram+0x1a>
	{
		ProgramToPerform = Program;
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <Programs_SetProgram+0x28>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
		return PROGRAMS_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <Programs_SetProgram+0x1c>
	}
	else
	{
		return PROGRAMS_ERROR;
 8000946:	2301      	movs	r3, #1
	}
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200001d8 	.word	0x200001d8

08000958 <Programs_ClearProgram>:
{
	return ProgramToPerform;
}

void Programs_ClearProgram(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
	ProgramToPerform = NULL;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <Programs_ClearProgram+0x14>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200001d8 	.word	0x200001d8

08000970 <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	Programs_status_t status;
	/* If there is a program to perform... */
	if(NULL != ProgramToPerform)
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <Programs_PerformProgram+0x28>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <Programs_PerformProgram+0x1a>
	{
	/* Perform it and return it's status */
		status = ProgramToPerform();
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <Programs_PerformProgram+0x28>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4798      	blx	r3
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	e001      	b.n	800098e <Programs_PerformProgram+0x1e>
	}
	else
	{
		status = NO_PROGRAM_SET;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 800098e:	79fb      	ldrb	r3, [r7, #7]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001d8 	.word	0x200001d8

0800099c <Programs_SendProgramStartCommand>:
//
//	-- Sending programs start/exit commands --
//

Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	733b      	strb	r3, [r7, #12]
	Buffer[1] = START_PROGRAM;
 80009aa:	2310      	movs	r3, #16
 80009ac:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f8d5 	bl	8001b64 <Radio_TxBufferPut>
 80009ba:	4603      	mov	r3, r0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Programs_SendProgramExitCommand>:

Programs_error_t Programs_SendProgramExitCommand(uint8_t ProgramID)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = ProgramID;
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	733b      	strb	r3, [r7, #12]
	Buffer[1] = EXIT_PROGRAM;
 80009d2:	2311      	movs	r3, #17
 80009d4:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f8c1 	bl	8001b64 <Radio_TxBufferPut>
 80009e2:	4603      	mov	r3, r0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Programs_SetCurrentRobotProgramID>:
//
//	-- Program which is currently running on robot identifier --
//

void Programs_SetCurrentRobotProgramID(uint8_t ID)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	CurrentRobotProgramID = ID;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <Programs_SetCurrentRobotProgramID+0x1c>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	7013      	strb	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	200001dc 	.word	0x200001dc

08000a0c <Programs_GetCurrentRobotProgramID>:

uint8_t Programs_GetCurrentRobotProgramID(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	return CurrentRobotProgramID;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <Programs_GetCurrentRobotProgramID+0x14>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200001dc 	.word	0x200001dc

08000a24 <Programs_ClearCurrentRobotProgramID>:

void Programs_ClearCurrentRobotProgramID(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	CurrentRobotProgramID = NO_PROGRAM_SET;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <Programs_ClearCurrentRobotProgramID+0x14>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	200001dc 	.word	0x200001dc

08000a3c <TestBlinkProgram>:




Programs_status_t TestBlinkProgram(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	static uint32_t LastTick;
	static uint8_t state = 0;
	static uint8_t blinks = 0;


	if(0 == FirstEntry)
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <TestBlinkProgram+0xc4>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d114      	bne.n	8000a72 <TestBlinkProgram+0x36>
	{
		OLED_ClearBuffer(BLACK);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f002 fb3d 	bl	80030c8 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f002 fa7f 	bl	8002f54 <OLED_MoveCursor>
		OLED_WriteString("Blinks:",WHITE);
 8000a56:	2101      	movs	r1, #1
 8000a58:	482a      	ldr	r0, [pc, #168]	; (8000b04 <TestBlinkProgram+0xc8>)
 8000a5a:	f002 fbff 	bl	800325c <OLED_WriteString>
		LastTick = HAL_GetTick();
 8000a5e:	f002 fef3 	bl	8003848 <HAL_GetTick>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <TestBlinkProgram+0xcc>)
 8000a66:	6013      	str	r3, [r2, #0]
		OLED_SendBuffer();
 8000a68:	f002 fb02 	bl	8003070 <OLED_SendBuffer>
		FirstEntry = 1;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <TestBlinkProgram+0xc4>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]





	if(HAL_GetTick() - LastTick > 1000)
 8000a72:	f002 fee9 	bl	8003848 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <TestBlinkProgram+0xcc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a82:	d934      	bls.n	8000aee <TestBlinkProgram+0xb2>
	{
		switch(state)
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <TestBlinkProgram+0xd0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <TestBlinkProgram+0x56>
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d00e      	beq.n	8000aae <TestBlinkProgram+0x72>
 8000a90:	e02d      	b.n	8000aee <TestBlinkProgram+0xb2>
		{
		case 0:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2104      	movs	r1, #4
 8000a96:	481e      	ldr	r0, [pc, #120]	; (8000b10 <TestBlinkProgram+0xd4>)
 8000a98:	f004 fa62 	bl	8004f60 <HAL_GPIO_WritePin>
			LastTick = HAL_GetTick();
 8000a9c:	f002 fed4 	bl	8003848 <HAL_GetTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <TestBlinkProgram+0xcc>)
 8000aa4:	6013      	str	r3, [r2, #0]
			state = 1;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <TestBlinkProgram+0xd0>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
			break;
 8000aac:	e01f      	b.n	8000aee <TestBlinkProgram+0xb2>

		case 1:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4817      	ldr	r0, [pc, #92]	; (8000b10 <TestBlinkProgram+0xd4>)
 8000ab4:	f004 fa54 	bl	8004f60 <HAL_GPIO_WritePin>
			LastTick = HAL_GetTick();
 8000ab8:	f002 fec6 	bl	8003848 <HAL_GetTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <TestBlinkProgram+0xcc>)
 8000ac0:	6013      	str	r3, [r2, #0]
			blinks++;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <TestBlinkProgram+0xd8>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <TestBlinkProgram+0xd8>)
 8000acc:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <TestBlinkProgram+0xd0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]

			OLED_MoveCursor(64, 0);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2040      	movs	r0, #64	; 0x40
 8000ad8:	f002 fa3c 	bl	8002f54 <OLED_MoveCursor>
			OLED_WriteInt(blinks, WHITE);
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <TestBlinkProgram+0xd8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fbe0 	bl	80032a8 <OLED_WriteInt>
			OLED_SendBuffer();
 8000ae8:	f002 fac2 	bl	8003070 <OLED_SendBuffer>
			break;
 8000aec:	bf00      	nop
	}




	if(blinks >= 10)
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <TestBlinkProgram+0xd8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	d901      	bls.n	8000afa <TestBlinkProgram+0xbe>
	{
		return PROGRAM_COMPLETED;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <TestBlinkProgram+0xc0>
	}
	else
	{
		return PROGRAM_IN_PROGRESS;
 8000afa:	2302      	movs	r3, #2
	}

}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001dd 	.word	0x200001dd
 8000b04:	08008804 	.word	0x08008804
 8000b08:	200001e0 	.word	0x200001e0
 8000b0c:	200001e4 	.word	0x200001e4
 8000b10:	40020400 	.word	0x40020400
 8000b14:	200001e5 	.word	0x200001e5

08000b18 <SetTestBlink>:

void SetTestBlink(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	ProgramToPerform = &TestBlinkProgram;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <SetTestBlink+0x14>)
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <SetTestBlink+0x18>)
 8000b20:	601a      	str	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	200001d8 	.word	0x200001d8
 8000b30:	08000a3d 	.word	0x08000a3d

08000b34 <SetFreeRideControll>:


void SetFreeRideControll(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	ProgramToPerform = &FreeRideControll;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <SetFreeRideControll+0x14>)
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <SetFreeRideControll+0x18>)
 8000b3c:	601a      	str	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	200001d8 	.word	0x200001d8
 8000b4c:	08000b51 	.word	0x08000b51

08000b50 <FreeRideControll>:

Programs_status_t FreeRideControll(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	static uint8_t FirstEntry = 0;
	uint8_t Cmd[4];

	int8_t DevL;
	int8_t DevR, LastDevR = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]

	if(0 == FirstEntry)
 8000b5a:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <FreeRideControll+0x10c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d116      	bne.n	8000b90 <FreeRideControll+0x40>
	{
		Cmd[0] = 0xA1;
 8000b62:	23a1      	movs	r3, #161	; 0xa1
 8000b64:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x10;
 8000b66:	2310      	movs	r3, #16
 8000b68:	707b      	strb	r3, [r7, #1]
		Radio_TxBufferPut(Cmd, 2);
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fff8 	bl	8001b64 <Radio_TxBufferPut>
		Inputs_ClearButtonsCallbacks();
 8000b74:	f000 fb84 	bl	8001280 <Inputs_ClearButtonsCallbacks>
		OLED_ClearBuffer(BLACK);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f002 faa5 	bl	80030c8 <OLED_ClearBuffer>
		OLED_MoveCursor(0, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f002 f9e7 	bl	8002f54 <OLED_MoveCursor>
		OLED_SendBuffer();
 8000b86:	f002 fa73 	bl	8003070 <OLED_SendBuffer>
		FirstEntry = 1;
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <FreeRideControll+0x10c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
	}
	OLED_ClearBuffer(BLACK);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f002 fa99 	bl	80030c8 <OLED_ClearBuffer>

	DevR =  Inputs_GetRightJoystickDev(X_AXIS);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 fa66 	bl	8001068 <Inputs_GetRightJoystickDev>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71bb      	strb	r3, [r7, #6]
	if(DevR > 2 && DevR != LastDevR)
 8000ba0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	dd28      	ble.n	8000bfa <FreeRideControll+0xaa>
 8000ba8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d022      	beq.n	8000bfa <FreeRideControll+0xaa>
	{

		Cmd[0] = 0xA1;
 8000bb4:	23a1      	movs	r3, #161	; 0xa1
 8000bb6:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x22;
 8000bb8:	2322      	movs	r3, #34	; 0x22
 8000bba:	707b      	strb	r3, [r7, #1]
		Cmd[2] = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	70bb      	strb	r3, [r7, #2]
		Radio_TxBufferPut(Cmd, 3);
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 ffcd 	bl	8001b64 <Radio_TxBufferPut>
		Cmd[0] = 0xA1;
 8000bca:	23a1      	movs	r3, #161	; 0xa1
 8000bcc:	703b      	strb	r3, [r7, #0]
		Cmd[1] = 0x20;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	707b      	strb	r3, [r7, #1]
		Cmd[2] = (DevR * 255) / 100;
 8000bd2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <FreeRideControll+0x110>)
 8000bde:	fb82 1203 	smull	r1, r2, r2, r3
 8000be2:	1152      	asrs	r2, r2, #5
 8000be4:	17db      	asrs	r3, r3, #31
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	70bb      	strb	r3, [r7, #2]
		Radio_TxBufferPut(Cmd, 3);
 8000bec:	463b      	mov	r3, r7
 8000bee:	2103      	movs	r1, #3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 ffb7 	bl	8001b64 <Radio_TxBufferPut>
		LastDevR = DevR;
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	71fb      	strb	r3, [r7, #7]
	else
	{

	}

	OLED_MoveCursor(0, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f002 f9a9 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteString("Right Motor: ", WHITE);
 8000c02:	2101      	movs	r1, #1
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <FreeRideControll+0x114>)
 8000c06:	f002 fb29 	bl	800325c <OLED_WriteString>
	OLED_MoveCursor(90, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	205a      	movs	r0, #90	; 0x5a
 8000c0e:	f002 f9a1 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteInt(DevR, WHITE);
 8000c12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fb45 	bl	80032a8 <OLED_WriteInt>

//	OLED_MoveCursor(0, 8);
//	OLED_WriteInt(Inputs_GetRightJoystickDev(Y_AXIS), WHITE);

	DevL = Inputs_GetLeftJoystickDev(X_AXIS);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fa04 	bl	800102c <Inputs_GetLeftJoystickDev>
 8000c24:	4603      	mov	r3, r0
 8000c26:	717b      	strb	r3, [r7, #5]

	OLED_MoveCursor(0, 16);
 8000c28:	2110      	movs	r1, #16
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f002 f992 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteString("LEFT Motor: ", WHITE);
 8000c30:	2101      	movs	r1, #1
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <FreeRideControll+0x118>)
 8000c34:	f002 fb12 	bl	800325c <OLED_WriteString>
	OLED_MoveCursor(90, 16);
 8000c38:	2110      	movs	r1, #16
 8000c3a:	205a      	movs	r0, #90	; 0x5a
 8000c3c:	f002 f98a 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteInt(DevL, WHITE);
 8000c40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fb2e 	bl	80032a8 <OLED_WriteInt>

//	OLED_MoveCursor(0, 32);
//	OLED_WriteInt(Inputs_GetLeftJoystickDev(Y_AXIS), WHITE);

	OLED_SendBuffer();
 8000c4c:	f002 fa10 	bl	8003070 <OLED_SendBuffer>

	return PROGRAM_IN_PROGRESS;
 8000c50:	2302      	movs	r3, #2


}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001e6 	.word	0x200001e6
 8000c60:	51eb851f 	.word	0x51eb851f
 8000c64:	0800880c 	.word	0x0800880c
 8000c68:	0800881c 	.word	0x0800881c

08000c6c <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	425a      	negs	r2, r3
 8000c82:	f003 031f 	and.w	r3, r3, #31
 8000c86:	f002 021f 	and.w	r2, r2, #31
 8000c8a:	bf58      	it	pl
 8000c8c:	4253      	negpl	r3, r2
 8000c8e:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d101      	bne.n	8000ca0 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00b      	b.n	8000cb8 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	425a      	negs	r2, r3
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	f002 021f 	and.w	r2, r2, #31
 8000ce0:	bf58      	it	pl
 8000ce2:	4253      	negpl	r3, r2
 8000ce4:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d101      	bne.n	8000cfa <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00c      	b.n	8000d14 <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	5c9a      	ldrb	r2, [r3, r2]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7bfa      	ldrb	r2, [r7, #15]
 8000d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d34:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <MX_ADC1_Init+0xf0>)
 8000d36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d62:	4a2c      	ldr	r2, [pc, #176]	; (8000e14 <MX_ADC1_Init+0xf4>)
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000d82:	f002 fd91 	bl	80038a8 <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f001 f8f8 	bl	8001f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d90:	230b      	movs	r3, #11
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481a      	ldr	r0, [pc, #104]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000da2:	f002 ffe3 	bl	8003d6c <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dac:	f001 f8e8 	bl	8001f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000db0:	230c      	movs	r3, #12
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000dbe:	f002 ffd5 	bl	8003d6c <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dc8:	f001 f8da 	bl	8001f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000dda:	f002 ffc7 	bl	8003d6c <HAL_ADC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000de4:	f001 f8cc 	bl	8001f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_ADC1_Init+0xec>)
 8000df6:	f002 ffb9 	bl	8003d6c <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e00:	f001 f8be 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001e8 	.word	0x200001e8
 8000e10:	40012000 	.word	0x40012000
 8000e14:	0f000001 	.word	0x0f000001

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a3c      	ldr	r2, [pc, #240]	; (8000f28 <HAL_ADC_MspInit+0x110>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d171      	bne.n	8000f1e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a3a      	ldr	r2, [pc, #232]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a33      	ldr	r2, [pc, #204]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2c      	ldr	r2, [pc, #176]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_ADC_MspInit+0x114>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4823      	ldr	r0, [pc, #140]	; (8000f30 <HAL_ADC_MspInit+0x118>)
 8000ea2:	f003 fec1 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481e      	ldr	r0, [pc, #120]	; (8000f34 <HAL_ADC_MspInit+0x11c>)
 8000eba:	f003 feb5 	bl	8004c28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_ADC_MspInit+0x124>)
 8000ec2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000edc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000f04:	f003 fafe 	bl	8004504 <HAL_DMA_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f0e:	f001 f837 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_ADC_MspInit+0x120>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000230 	.word	0x20000230
 8000f3c:	40026410 	.word	0x40026410

08000f40 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000f46:	4828      	ldr	r0, [pc, #160]	; (8000fe8 <Inputs_Init+0xa8>)
 8000f48:	f006 f824 	bl	8006f94 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 8000f4c:	2228      	movs	r2, #40	; 0x28
 8000f4e:	4927      	ldr	r1, [pc, #156]	; (8000fec <Inputs_Init+0xac>)
 8000f50:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <Inputs_Init+0xb0>)
 8000f52:	f002 fdfd 	bl	8003b50 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000f56:	2032      	movs	r0, #50	; 0x32
 8000f58:	f002 fc82 	bl	8003860 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 8000f5c:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <Inputs_Init+0xb4>)
 8000f5e:	4926      	ldr	r1, [pc, #152]	; (8000ff8 <Inputs_Init+0xb8>)
 8000f60:	4826      	ldr	r0, [pc, #152]	; (8000ffc <Inputs_Init+0xbc>)
 8000f62:	f000 fca5 	bl	80018b0 <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <Inputs_Init+0xc0>)
 8000f68:	4926      	ldr	r1, [pc, #152]	; (8001004 <Inputs_Init+0xc4>)
 8000f6a:	4827      	ldr	r0, [pc, #156]	; (8001008 <Inputs_Init+0xc8>)
 8000f6c:	f000 fca0 	bl	80018b0 <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000f70:	4822      	ldr	r0, [pc, #136]	; (8000ffc <Inputs_Init+0xbc>)
 8000f72:	f000 fcb8 	bl	80018e6 <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <Inputs_Init+0xc8>)
 8000f78:	f000 fcb5 	bl	80018e6 <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f7c:	213c      	movs	r1, #60	; 0x3c
 8000f7e:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <Inputs_Init+0xa8>)
 8000f80:	f006 f908 	bl	8007194 <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
 8000f84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2332      	movs	r3, #50	; 0x32
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	491e      	ldr	r1, [pc, #120]	; (800100c <Inputs_Init+0xcc>)
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <Inputs_Init+0xd0>)
 8000f94:	f000 f9c9 	bl	800132a <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
 8000f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2332      	movs	r3, #50	; 0x32
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	491c      	ldr	r1, [pc, #112]	; (8001014 <Inputs_Init+0xd4>)
 8000fa4:	481c      	ldr	r0, [pc, #112]	; (8001018 <Inputs_Init+0xd8>)
 8000fa6:	f000 f9c0 	bl	800132a <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
 8000faa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2332      	movs	r3, #50	; 0x32
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4915      	ldr	r1, [pc, #84]	; (800100c <Inputs_Init+0xcc>)
 8000fb6:	4819      	ldr	r0, [pc, #100]	; (800101c <Inputs_Init+0xdc>)
 8000fb8:	f000 f9b7 	bl	800132a <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
 8000fbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2332      	movs	r3, #50	; 0x32
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4916      	ldr	r1, [pc, #88]	; (8001020 <Inputs_Init+0xe0>)
 8000fc8:	4816      	ldr	r0, [pc, #88]	; (8001024 <Inputs_Init+0xe4>)
 8000fca:	f000 f9ae 	bl	800132a <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
 8000fce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	4911      	ldr	r1, [pc, #68]	; (8001020 <Inputs_Init+0xe0>)
 8000fda:	4813      	ldr	r0, [pc, #76]	; (8001028 <Inputs_Init+0xe8>)
 8000fdc:	f000 f9a5 	bl	800132a <DB_ButtonInit>
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000093c 	.word	0x2000093c
 8000fec:	20000290 	.word	0x20000290
 8000ff0:	200001e8 	.word	0x200001e8
 8000ff4:	200002e2 	.word	0x200002e2
 8000ff8:	200002e0 	.word	0x200002e0
 8000ffc:	200002e8 	.word	0x200002e8
 8001000:	200002e6 	.word	0x200002e6
 8001004:	200002e4 	.word	0x200002e4
 8001008:	20000300 	.word	0x20000300
 800100c:	40020800 	.word	0x40020800
 8001010:	2000031c 	.word	0x2000031c
 8001014:	40020c00 	.word	0x40020c00
 8001018:	2000033c 	.word	0x2000033c
 800101c:	2000035c 	.word	0x2000035c
 8001020:	40020000 	.word	0x40020000
 8001024:	2000037c 	.word	0x2000037c
 8001028:	2000039c 	.word	0x2000039c

0800102c <Inputs_GetLeftJoystickDev>:

//
// J O Y S T I C K
//
int8_t Inputs_GetLeftJoystickDev(uint8_t axis)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	if(JoysitckCalibrationFlag > 0)
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <Inputs_GetLeftJoystickDev+0x34>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <Inputs_GetLeftJoystickDev+0x20>
	{
		return Joy_GetDeviationPercentCal(&LeftJoystick, axis);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <Inputs_GetLeftJoystickDev+0x38>)
 8001044:	f000 fcba 	bl	80019bc <Joy_GetDeviationPercentCal>
 8001048:	4603      	mov	r3, r0
 800104a:	e005      	b.n	8001058 <Inputs_GetLeftJoystickDev+0x2c>
	}
	else
	{
		return Joy_GetDeviationPercent(&LeftJoystick, axis);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4619      	mov	r1, r3
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <Inputs_GetLeftJoystickDev+0x38>)
 8001052:	f000 fc72 	bl	800193a <Joy_GetDeviationPercent>
 8001056:	4603      	mov	r3, r0
	}
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000318 	.word	0x20000318
 8001064:	200002e8 	.word	0x200002e8

08001068 <Inputs_GetRightJoystickDev>:

int8_t Inputs_GetRightJoystickDev(uint8_t axis)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if(JoysitckCalibrationFlag > 0)
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <Inputs_GetRightJoystickDev+0x34>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <Inputs_GetRightJoystickDev+0x20>
	{
		return Joy_GetDeviationPercentCal(&RightJoystick, axis);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4619      	mov	r1, r3
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <Inputs_GetRightJoystickDev+0x38>)
 8001080:	f000 fc9c 	bl	80019bc <Joy_GetDeviationPercentCal>
 8001084:	4603      	mov	r3, r0
 8001086:	e005      	b.n	8001094 <Inputs_GetRightJoystickDev+0x2c>
	}
	else
	{
		return Joy_GetDeviationPercent(&RightJoystick, axis);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <Inputs_GetRightJoystickDev+0x38>)
 800108e:	f000 fc54 	bl	800193a <Joy_GetDeviationPercent>
 8001092:	4603      	mov	r3, r0
	}
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000318 	.word	0x20000318
 80010a0:	20000300 	.word	0x20000300

080010a4 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 80010bc:	2300      	movs	r3, #0
 80010be:	77fb      	strb	r3, [r7, #31]
 80010c0:	e021      	b.n	8001106 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	7ffa      	ldrb	r2, [r7, #31]
 80010c6:	4924      	ldr	r1, [pc, #144]	; (8001158 <HAL_ADC_ConvCpltCallback+0xb4>)
 80010c8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	7ffa      	ldrb	r2, [r7, #31]
 80010d4:	3201      	adds	r2, #1
 80010d6:	4920      	ldr	r1, [pc, #128]	; (8001158 <HAL_ADC_ConvCpltCallback+0xb4>)
 80010d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010dc:	4413      	add	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	7ffa      	ldrb	r2, [r7, #31]
 80010e4:	3202      	adds	r2, #2
 80010e6:	491c      	ldr	r1, [pc, #112]	; (8001158 <HAL_ADC_ConvCpltCallback+0xb4>)
 80010e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010ec:	4413      	add	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	7ffa      	ldrb	r2, [r7, #31]
 80010f4:	3203      	adds	r2, #3
 80010f6:	4918      	ldr	r1, [pc, #96]	; (8001158 <HAL_ADC_ConvCpltCallback+0xb4>)
 80010f8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010fc:	4413      	add	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	3304      	adds	r3, #4
 8001104:	77fb      	strb	r3, [r7, #31]
 8001106:	7ffb      	ldrb	r3, [r7, #31]
 8001108:	2b24      	cmp	r3, #36	; 0x24
 800110a:	d9da      	bls.n	80010c2 <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_ADC_ConvCpltCallback+0xbc>)
 800111a:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_ADC_ConvCpltCallback+0xbc>)
 800112a:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_ADC_ConvCpltCallback+0xbc>)
 800113a:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_ADC_ConvCpltCallback+0xbc>)
 800114a:	80da      	strh	r2, [r3, #6]
}
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	; 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000290 	.word	0x20000290
 800115c:	cccccccd 	.word	0xcccccccd
 8001160:	200002e0 	.word	0x200002e0

08001164 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <Inputs_GetEncoderCount+0x4c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <Inputs_GetEncoderCount+0x50>)
 8001172:	8812      	ldrh	r2, [r2, #0]
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b03      	cmp	r3, #3
 800117c:	dc03      	bgt.n	8001186 <Inputs_GetEncoderCount+0x22>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f113 0f03 	cmn.w	r3, #3
 8001184:	da0d      	bge.n	80011a2 <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <Inputs_GetEncoderCount+0x4c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <Inputs_GetEncoderCount+0x50>)
 8001190:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	da00      	bge.n	800119a <Inputs_GetEncoderCount+0x36>
 8001198:	3303      	adds	r3, #3
 800119a:	109b      	asrs	r3, r3, #2
 800119c:	425b      	negs	r3, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	e000      	b.n	80011a4 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 80011a2:	2300      	movs	r3, #0
	}
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	2000093c 	.word	0x2000093c
 80011b4:	200003bc 	.word	0x200003bc

080011b8 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <Inputs_ButtonsRoutine+0x28>)
 80011be:	f000 f8ff 	bl	80013c0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <Inputs_ButtonsRoutine+0x2c>)
 80011c4:	f000 f8fc 	bl	80013c0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <Inputs_ButtonsRoutine+0x30>)
 80011ca:	f000 f8f9 	bl	80013c0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <Inputs_ButtonsRoutine+0x34>)
 80011d0:	f000 f8f6 	bl	80013c0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <Inputs_ButtonsRoutine+0x38>)
 80011d6:	f000 f8f3 	bl	80013c0 <DB_ButtonProcess>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000031c 	.word	0x2000031c
 80011e4:	2000033c 	.word	0x2000033c
 80011e8:	2000037c 	.word	0x2000037c
 80011ec:	2000035c 	.word	0x2000035c
 80011f0:	2000039c 	.word	0x2000039c

080011f4 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d82b      	bhi.n	8001260 <Inputs_ButtonsRegisterCallback+0x6c>
 8001208:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <Inputs_ButtonsRegisterCallback+0x1c>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	08001225 	.word	0x08001225
 8001214:	08001231 	.word	0x08001231
 8001218:	0800123d 	.word	0x0800123d
 800121c:	08001249 	.word	0x08001249
 8001220:	08001255 	.word	0x08001255
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <Inputs_ButtonsRegisterCallback+0x78>)
 800122a:	f000 f8a1 	bl	8001370 <DB_ButtonPressCallbackRegister>
		break;
 800122e:	e018      	b.n	8001262 <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <Inputs_ButtonsRegisterCallback+0x7c>)
 8001236:	f000 f89b 	bl	8001370 <DB_ButtonPressCallbackRegister>
		break;
 800123a:	e012      	b.n	8001262 <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <Inputs_ButtonsRegisterCallback+0x80>)
 8001242:	f000 f895 	bl	8001370 <DB_ButtonPressCallbackRegister>
		break;
 8001246:	e00c      	b.n	8001262 <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <Inputs_ButtonsRegisterCallback+0x84>)
 800124e:	f000 f88f 	bl	8001370 <DB_ButtonPressCallbackRegister>
		break;
 8001252:	e006      	b.n	8001262 <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <Inputs_ButtonsRegisterCallback+0x88>)
 800125a:	f000 f889 	bl	8001370 <DB_ButtonPressCallbackRegister>
		break;
 800125e:	e000      	b.n	8001262 <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 8001260:	bf00      	nop
	}
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000031c 	.word	0x2000031c
 8001270:	2000033c 	.word	0x2000033c
 8001274:	2000035c 	.word	0x2000035c
 8001278:	2000037c 	.word	0x2000037c
 800127c:	2000039c 	.word	0x2000039c

08001280 <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <Inputs_ClearButtonsCallbacks+0x3c>)
 800128a:	f000 f871 	bl	8001370 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <Inputs_ClearButtonsCallbacks+0x40>)
 8001294:	f000 f86c 	bl	8001370 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <Inputs_ClearButtonsCallbacks+0x44>)
 800129e:	f000 f867 	bl	8001370 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <Inputs_ClearButtonsCallbacks+0x48>)
 80012a8:	f000 f862 	bl	8001370 <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <Inputs_ClearButtonsCallbacks+0x4c>)
 80012b2:	f000 f85d 	bl	8001370 <DB_ButtonPressCallbackRegister>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000031c 	.word	0x2000031c
 80012c0:	2000033c 	.word	0x2000033c
 80012c4:	2000035c 	.word	0x2000035c
 80012c8:	2000037c 	.word	0x2000037c
 80012cc:	2000039c 	.word	0x2000039c

080012d0 <Parser_Controller>:
 */
#include "controller_parser.h"


void Parser_Controller(uint8_t *command, uint8_t length)							//main parser funciton
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60fb      	str	r3, [r7, #12]
	uint8_t Length = length;
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	72fb      	strb	r3, [r7, #11]



	switch(*CurrentByte)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2bd0      	cmp	r3, #208	; 0xd0
 80012ea:	d002      	beq.n	80012f2 <Parser_Controller+0x22>
 80012ec:	2bd1      	cmp	r3, #209	; 0xd1
 80012ee:	d00c      	beq.n	800130a <Parser_Controller+0x3a>
		Programs_MotorsDebugControllParser(CurrentByte, Length);;
		break;

	default:

		break;
 80012f0:	e017      	b.n	8001322 <Parser_Controller+0x52>
		CurrentByte++;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
		Length--;
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	72fb      	strb	r3, [r7, #11]
		Programs_DiodeTestParser(CurrentByte, Length);
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	4619      	mov	r1, r3
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fa12 	bl	800072c <Programs_DiodeTestParser>
		break;
 8001308:	e00b      	b.n	8001322 <Parser_Controller+0x52>
		CurrentByte++;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
		Length--;
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	3b01      	subs	r3, #1
 8001314:	72fb      	strb	r3, [r7, #11]
		Programs_MotorsDebugControllParser(CurrentByte, Length);;
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	4619      	mov	r1, r3
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff fada 	bl	80008d4 <Programs_MotorsDebugControllParser>
		break;
 8001320:	bf00      	nop
	}


}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <DB_ButtonInit>:


#include "debounce.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	615a      	str	r2, [r3, #20]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f003 fdc2 	bl	8004f30 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <DB_IsButtonPressed+0x22>
	{
		return 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 80013b6:	2300      	movs	r3, #0
	}
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e1b      	ldrb	r3, [r3, #24]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	f200 8082 	bhi.w	80014d6 <DB_ButtonProcess+0x116>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <DB_ButtonProcess+0x18>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	08001407 	.word	0x08001407
 80013e0:	08001447 	.word	0x08001447
 80013e4:	08001491 	.word	0x08001491
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffd3 	bl	8001394 <DB_IsButtonPressed>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d06b      	beq.n	80014cc <DB_ButtonProcess+0x10c>
		{
			Button->ButtonState = DEBOUNCE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 80013fa:	f002 fa25 	bl	8003848 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	61da      	str	r2, [r3, #28]
		}
		break;
 8001404:	e062      	b.n	80014cc <DB_ButtonProcess+0x10c>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 8001406:	f002 fa1f 	bl	8003848 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	429a      	cmp	r2, r3
 8001418:	d95a      	bls.n	80014d0 <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button))
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffba 	bl	8001394 <DB_IsButtonPressed>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2202      	movs	r2, #2
 800142a:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 800142c:	f002 fa0c 	bl	8003848 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonState = IDLE;
				printf("Debounce: Button bounced \n");
			}
		}
		break;
 8001436:	e04b      	b.n	80014d0 <DB_ButtonProcess+0x110>
				Button->ButtonState = IDLE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button bounced \n");
 800143e:	4828      	ldr	r0, [pc, #160]	; (80014e0 <DB_ButtonProcess+0x120>)
 8001440:	f006 faae 	bl	80079a0 <puts>
		break;
 8001444:	e044      	b.n	80014d0 <DB_ButtonProcess+0x110>
	case PRESSED:

		if(0 == DB_IsButtonPressed(Button))
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa4 	bl	8001394 <DB_IsButtonPressed>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10d      	bne.n	800146e <DB_ButtonProcess+0xae>
		{
			if(NULL != Button->ButtonPressAction)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <DB_ButtonProcess+0xa0>
			{
				Button->ButtonPressAction();
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button pressed! \n");
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <DB_ButtonProcess+0x124>)
 8001468:	f006 fa9a 	bl	80079a0 <puts>
			{
				Button->ButtonState = HOLD;
				Button->LastTick = HAL_GetTick();
			}
		}
		break;
 800146c:	e032      	b.n	80014d4 <DB_ButtonProcess+0x114>
			if(HAL_GetTick() - (Button->LastTick) > 150 )
 800146e:	f002 f9eb 	bl	8003848 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b96      	cmp	r3, #150	; 0x96
 800147c:	d92a      	bls.n	80014d4 <DB_ButtonProcess+0x114>
				Button->ButtonState = HOLD;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001484:	f002 f9e0 	bl	8003848 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	61da      	str	r2, [r3, #28]
		break;
 800148e:	e021      	b.n	80014d4 <DB_ButtonProcess+0x114>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 8001490:	f002 f9da 	bl	8003848 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	1ad2      	subs	r2, r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d918      	bls.n	80014d6 <DB_ButtonProcess+0x116>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonHoldAction)
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff75 	bl	8001394 <DB_IsButtonPressed>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <DB_ButtonProcess+0x104>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <DB_ButtonProcess+0x104>
			{
				Button->ButtonHoldAction();
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4798      	blx	r3
				printf("Debounce: Button held! \r\n");
 80014be:	480a      	ldr	r0, [pc, #40]	; (80014e8 <DB_ButtonProcess+0x128>)
 80014c0:	f006 fa6e 	bl	80079a0 <puts>
			}
			Button->ButtonState = IDLE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	761a      	strb	r2, [r3, #24]
		}
	}
}
 80014ca:	e004      	b.n	80014d6 <DB_ButtonProcess+0x116>
		break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <DB_ButtonProcess+0x116>
		break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <DB_ButtonProcess+0x116>
		break;
 80014d4:	bf00      	nop
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	0800882c 	.word	0x0800882c
 80014e4:	08008848 	.word	0x08008848
 80014e8:	08008864 	.word	0x08008864

080014ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_DMA_Init+0x3c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <MX_DMA_Init+0x3c>)
 80014fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_DMA_Init+0x3c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2038      	movs	r0, #56	; 0x38
 8001514:	f002 ffbf 	bl	8004496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001518:	2038      	movs	r0, #56	; 0x38
 800151a:	f002 ffd8 	bl	80044ce <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a56      	ldr	r2, [pc, #344]	; (80016a4 <MX_GPIO_Init+0x178>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <MX_GPIO_Init+0x178>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <MX_GPIO_Init+0x178>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <MX_GPIO_Init+0x178>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a41      	ldr	r2, [pc, #260]	; (80016a4 <MX_GPIO_Init+0x178>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_GPIO_Init+0x178>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <MX_GPIO_Init+0x178>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <MX_GPIO_Init+0x178>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_GPIO_Init+0x178>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2124      	movs	r1, #36	; 0x24
 80015d2:	4835      	ldr	r0, [pc, #212]	; (80016a8 <MX_GPIO_Init+0x17c>)
 80015d4:	f003 fcc4 	bl	8004f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	21c0      	movs	r1, #192	; 0xc0
 80015dc:	4833      	ldr	r0, [pc, #204]	; (80016ac <MX_GPIO_Init+0x180>)
 80015de:	f003 fcbf 	bl	8004f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 80015e2:	f240 4301 	movw	r3, #1025	; 0x401
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <MX_GPIO_Init+0x180>)
 80015f8:	f003 fb16 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 80015fc:	2321      	movs	r3, #33	; 0x21
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4828      	ldr	r0, [pc, #160]	; (80016b0 <MX_GPIO_Init+0x184>)
 8001610:	f003 fb0a 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001614:	2304      	movs	r3, #4
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	481f      	ldr	r0, [pc, #124]	; (80016a8 <MX_GPIO_Init+0x17c>)
 800162c:	f003 fafc 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001636:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_GPIO_Init+0x17c>)
 8001648:	f003 faee 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <MX_GPIO_Init+0x180>)
 8001664:	f003 fae0 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8001668:	2304      	movs	r3, #4
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <MX_GPIO_Init+0x188>)
 800167c:	f003 fad4 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8001680:	2320      	movs	r3, #32
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_GPIO_Init+0x17c>)
 8001698:	f003 fac6 	bl	8004c28 <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x50>)
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <MX_I2C1_Init+0x54>)
 80016c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_I2C1_Init+0x50>)
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_I2C1_Init+0x58>)
 80016c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_I2C1_Init+0x50>)
 80016d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_I2C1_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_I2C1_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_I2C1_Init+0x50>)
 80016f6:	f003 fc65 	bl	8004fc4 <HAL_I2C_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001700:	f000 fc3e 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003c0 	.word	0x200003c0
 800170c:	40005400 	.word	0x40005400
 8001710:	00061a80 	.word	0x00061a80

08001714 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C3_Init+0x50>)
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_I2C3_Init+0x54>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C3_Init+0x50>)
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_I2C3_Init+0x58>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C3_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_I2C3_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_I2C3_Init+0x50>)
 8001732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001736:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_I2C3_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_I2C3_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_I2C3_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_I2C3_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_I2C3_Init+0x50>)
 8001752:	f003 fc37 	bl	8004fc4 <HAL_I2C_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800175c:	f000 fc10 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000414 	.word	0x20000414
 8001768:	40005c00 	.word	0x40005c00
 800176c:	00061a80 	.word	0x00061a80

08001770 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a42      	ldr	r2, [pc, #264]	; (8001898 <HAL_I2C_MspInit+0x128>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12d      	bne.n	80017ee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_I2C_MspInit+0x12c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a40      	ldr	r2, [pc, #256]	; (800189c <HAL_I2C_MspInit+0x12c>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_I2C_MspInit+0x12c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b4:	2312      	movs	r3, #18
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c0:	2304      	movs	r3, #4
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4835      	ldr	r0, [pc, #212]	; (80018a0 <HAL_I2C_MspInit+0x130>)
 80017cc:	f003 fa2c 	bl	8004c28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_I2C_MspInit+0x12c>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_I2C_MspInit+0x12c>)
 80017da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_I2C_MspInit+0x12c>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80017ec:	e050      	b.n	8001890 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <HAL_I2C_MspInit+0x134>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d14b      	bne.n	8001890 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_I2C_MspInit+0x12c>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_I2C_MspInit+0x12c>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_I2C_MspInit+0x12c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_I2C_MspInit+0x12c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_I2C_MspInit+0x12c>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_I2C_MspInit+0x12c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001842:	2304      	movs	r3, #4
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4816      	ldr	r0, [pc, #88]	; (80018a8 <HAL_I2C_MspInit+0x138>)
 800184e:	f003 f9eb 	bl	8004c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001858:	2312      	movs	r3, #18
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001864:	2304      	movs	r3, #4
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	480f      	ldr	r0, [pc, #60]	; (80018ac <HAL_I2C_MspInit+0x13c>)
 8001870:	f003 f9da 	bl	8004c28 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_I2C_MspInit+0x12c>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_I2C_MspInit+0x12c>)
 800187e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001882:	6413      	str	r3, [r2, #64]	; 0x40
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_I2C_MspInit+0x12c>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40005400 	.word	0x40005400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40005c00 	.word	0x40005c00
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020000 	.word	0x40020000

080018b0 <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <JoyS_Init+0x18>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e000      	b.n	80018da <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 80018ee:	f001 ffab 	bl	8003848 <HAL_GetTick>
 80018f2:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 80018f4:	e015      	b.n	8001922 <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <JoyS_SetIdleValues+0x24>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e007      	b.n	8001932 <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 8001922:	f001 ff91 	bl	8003848 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b63      	cmp	r3, #99	; 0x63
 800192e:	d9e2      	bls.n	80018f6 <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 8001930:	2303      	movs	r3, #3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <Joy_GetDeviationPercent>:
	}
	return JOYS_OK;
}

int8_t Joy_GetDeviationPercent(Joystick_t *Joystick, uint8_t axis)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
	uint32_t CurrentValue;
	uint32_t IdleValue;

	if(axis == X_AXIS)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <Joy_GetDeviationPercent+0x22>
	{
		CurrentValue = *(Joystick->ValX);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
		IdleValue = Joystick->IdleX;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	891b      	ldrh	r3, [r3, #8]
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	e00c      	b.n	8001976 <Joy_GetDeviationPercent+0x3c>
	}
	else if(axis == Y_AXIS)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <Joy_GetDeviationPercent+0x38>
	{
		CurrentValue = *(Joystick->ValY);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
		IdleValue = Joystick->IdleY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	895b      	ldrh	r3, [r3, #10]
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	e001      	b.n	8001976 <Joy_GetDeviationPercent+0x3c>
	}
	else return 0;
 8001972:	2300      	movs	r3, #0
 8001974:	e01c      	b.n	80019b0 <Joy_GetDeviationPercent+0x76>


	if(CurrentValue >= IdleValue)
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	429a      	cmp	r2, r3
 800197c:	d30d      	bcc.n	800199a <Joy_GetDeviationPercent+0x60>
	{
		return ( (CurrentValue - IdleValue) * 100) / (4095 - IdleValue);		//formula for positive deviation percentage
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2264      	movs	r2, #100	; 0x64
 8001986:	fb03 f202 	mul.w	r2, r3, r2
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001990:	330f      	adds	r3, #15
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	b25b      	sxtb	r3, r3
 8001998:	e00a      	b.n	80019b0 <Joy_GetDeviationPercent+0x76>
	}
	else
	{
		return -100 + ((CurrentValue * 100) / IdleValue);	//formula for negative deviation percentage
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2264      	movs	r2, #100	; 0x64
 800199e:	fb03 f202 	mul.w	r2, r3, r2
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3b64      	subs	r3, #100	; 0x64
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	b25b      	sxtb	r3, r3
	}

}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <Joy_GetDeviationPercentCal>:


int8_t Joy_GetDeviationPercentCal(Joystick_t *Joystick, uint8_t axis)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	uint32_t CurrentValue;
	uint32_t IdleValue;
	uint32_t MaxValue;
	uint32_t MinValue;

	if(axis == X_AXIS)
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10d      	bne.n	80019ea <Joy_GetDeviationPercentCal+0x2e>
	{
		CurrentValue = *(Joystick->ValX);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	617b      	str	r3, [r7, #20]
		IdleValue = Joystick->IdleX;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	891b      	ldrh	r3, [r3, #8]
 80019da:	613b      	str	r3, [r7, #16]
		MaxValue = Joystick->MaxX;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	89db      	ldrh	r3, [r3, #14]
 80019e0:	60fb      	str	r3, [r7, #12]
		MinValue = Joystick->MinX;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	8a5b      	ldrh	r3, [r3, #18]
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	e012      	b.n	8001a10 <Joy_GetDeviationPercentCal+0x54>
	}
	else if(axis == Y_AXIS)
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10d      	bne.n	8001a0c <Joy_GetDeviationPercentCal+0x50>
	{
		CurrentValue = *(Joystick->ValY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	617b      	str	r3, [r7, #20]
		IdleValue = Joystick->IdleY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	895b      	ldrh	r3, [r3, #10]
 80019fc:	613b      	str	r3, [r7, #16]
		MaxValue = Joystick->MaxY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	899b      	ldrh	r3, [r3, #12]
 8001a02:	60fb      	str	r3, [r7, #12]
		MinValue = Joystick->MinY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	8a1b      	ldrh	r3, [r3, #16]
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	e001      	b.n	8001a10 <Joy_GetDeviationPercentCal+0x54>
	}
	else return 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e02a      	b.n	8001a66 <Joy_GetDeviationPercentCal+0xaa>

	if(MaxValue == 0) return 0;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <Joy_GetDeviationPercentCal+0x5e>
 8001a16:	2300      	movs	r3, #0
 8001a18:	e025      	b.n	8001a66 <Joy_GetDeviationPercentCal+0xaa>

	if(CurrentValue < MinValue)
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d201      	bcs.n	8001a26 <Joy_GetDeviationPercentCal+0x6a>
	{
		CurrentValue = MinValue;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	617b      	str	r3, [r7, #20]
	}
	if(CurrentValue >= IdleValue)
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d30c      	bcc.n	8001a48 <Joy_GetDeviationPercentCal+0x8c>
	{
		return ( (CurrentValue - IdleValue) * 100) / (MaxValue - IdleValue);		//formula for positive deviation percentage
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2264      	movs	r2, #100	; 0x64
 8001a36:	fb03 f202 	mul.w	r2, r3, r2
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1acb      	subs	r3, r1, r3
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	e00e      	b.n	8001a66 <Joy_GetDeviationPercentCal+0xaa>
	}
	else
	{
		return -100 + ((CurrentValue - MinValue) * 100) / (IdleValue - MinValue);	//formula for negative deviation percentage
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2264      	movs	r2, #100	; 0x64
 8001a50:	fb03 f202 	mul.w	r2, r3, r2
 8001a54:	6939      	ldr	r1, [r7, #16]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1acb      	subs	r3, r1, r3
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3b64      	subs	r3, #100	; 0x64
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	b25b      	sxtb	r3, r3
	}
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f001 f87d 	bl	8002b7c <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 8001a82:	4906      	ldr	r1, [pc, #24]	; (8001a9c <Radio_Init+0x28>)
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 fe96 	bl	80027b6 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <Radio_Init+0x2c>)
 8001a8c:	f000 fecc 	bl	8002828 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 8001a90:	f000 fcd6 	bl	8002440 <nRF24_TX_Mode>
#endif
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08008880 	.word	0x08008880
 8001aa0:	08008884 	.word	0x08008884

08001aa4 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73bb      	strb	r3, [r7, #14]
 8001ab8:	e010      	b.n	8001adc <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <Radio_RxBufferPut+0x4c>)
 8001ac2:	f7ff f8d3 	bl	8000c6c <RBuffer_Write>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73bb      	strb	r3, [r7, #14]
 8001adc:	7bba      	ldrb	r2, [r7, #14]
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3ea      	bcc.n	8001aba <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000490 	.word	0x20000490

08001af4 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8001b06:	f107 030d 	add.w	r3, r7, #13
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4814      	ldr	r0, [pc, #80]	; (8001b60 <Radio_RxBufferGet+0x6c>)
 8001b0e:	f7ff f8d9 	bl	8000cc4 <RBuffer_Read>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001b1c:	e012      	b.n	8001b44 <Radio_RxBufferGet+0x50>
	{

		*(CommandDestination+Length) = Data;				//write received byte to destination
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	7b7a      	ldrb	r2, [r7, #13]
 8001b26:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 8001b2e:	f107 030d 	add.w	r3, r7, #13
 8001b32:	4619      	mov	r1, r3
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <Radio_RxBufferGet+0x6c>)
 8001b36:	f7ff f8c5 	bl	8000cc4 <RBuffer_Read>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d002      	beq.n	8001b50 <Radio_RxBufferGet+0x5c>
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0e6      	beq.n	8001b1e <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	701a      	strb	r2, [r3, #0]
	return Status;
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000490 	.word	0x20000490

08001b64 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001b74:	2300      	movs	r3, #0
 8001b76:	73bb      	strb	r3, [r7, #14]
 8001b78:	e010      	b.n	8001b9c <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <Radio_TxBufferPut+0x5c>)
 8001b82:	f7ff f873 	bl	8000c6c <RBuffer_Write>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	73fb      	strb	r3, [r7, #15]
		Command++;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3301      	adds	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	73bb      	strb	r3, [r7, #14]
 8001b9c:	7bba      	ldrb	r2, [r7, #14]
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d3ea      	bcc.n	8001b7a <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <Radio_TxBufferPut+0x5c>)
 8001ba8:	f7ff f860 	bl	8000c6c <RBuffer_Write>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000046c 	.word	0x2000046c

08001bc4 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bda:	1d3a      	adds	r2, r7, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <Radio_TxBufferSend+0x84>)
 8001be2:	f7ff f86f 	bl	8000cc4 <RBuffer_Read>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8001bfe:	3328      	adds	r3, #40	; 0x28
 8001c00:	443b      	add	r3, r7
 8001c02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d003      	beq.n	8001c12 <Radio_TxBufferSend+0x4e>
 8001c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0e1      	beq.n	8001bd6 <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 8001c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d110      	bne.n	8001c3c <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 8001c1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 ff18 	bl	8002a58 <nRF24_SendPacket>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <Radio_TxBufferSend+0x88>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 8001c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000046c 	.word	0x2000046c
 8001c4c:	20000469 	.word	0x20000469

08001c50 <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
#ifdef CONTROLLER
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 8001c56:	f240 4305 	movw	r3, #1029	; 0x405
 8001c5a:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <Radio_SendConnectionCheck+0x28>)
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2102      	movs	r1, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fef6 	bl	8002a58 <nRF24_SendPacket>
 8001c6c:	4603      	mov	r3, r0
#ifdef ROBOT
	uint8_t Command [3] = {CONNECTION_HOLD, _OK, COMM_END};
	TxStatus = RADIO_BUSY;
	return nRF24_WriteAckPayload(0, Command, 3);
#endif
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000469 	.word	0x20000469

08001c7c <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 8001c82:	f000 ff53 	bl	8002b2c <nRF24_Event>

#ifdef CONTROLLER

	static uint32_t LastTick;
	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 8001c86:	f001 fddf 	bl	8003848 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <Radio_Process+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b32      	cmp	r3, #50	; 0x32
 8001c94:	d91c      	bls.n	8001cd0 <Radio_Process+0x54>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <Radio_Process+0x8c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <Radio_Process+0x32>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8001c9e:	f7ff ff91 	bl	8001bc4 <Radio_TxBufferSend>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10e      	bne.n	8001cc6 <Radio_Process+0x4a>
			{
				Radio_SendConnectionCheck();
 8001ca8:	f7ff ffd2 	bl	8001c50 <Radio_SendConnectionCheck>
 8001cac:	e00b      	b.n	8001cc6 <Radio_Process+0x4a>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <Radio_Process+0x8c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <Radio_Process+0x4a>
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <Radio_Process+0x90>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d103      	bne.n	8001cc6 <Radio_Process+0x4a>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8001cbe:	f000 f829 	bl	8001d14 <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 8001cc2:	f7ff ffc5 	bl	8001c50 <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8001cc6:	f001 fdbf 	bl	8003848 <HAL_GetTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <Radio_Process+0x88>)
 8001cce:	6013      	str	r3, [r2, #0]
		ConnectionStatus = RADIO_ERROR;
		Radio_NoConnectionCallback();
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <Radio_Process+0x94>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d110      	bne.n	8001cfa <Radio_Process+0x7e>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001cd8:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff07 	bl	8001af4 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001ce6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 f81c 	bl	8002d2c <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <Radio_Process+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200004b4 	.word	0x200004b4
 8001d08:	20000469 	.word	0x20000469
 8001d0c:	20000468 	.word	0x20000468
 8001d10:	2000046a 	.word	0x2000046a

08001d14 <Radio_NoConnectionCallback>:
{
	nRF24_IRQ_Handler();
}

__weak void Radio_NoConnectionCallback(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <nRF24_EventTxCallback+0x1c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <nRF24_EventTxCallback+0x20>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000469 	.word	0x20000469
 8001d44:	20000468 	.word	0x20000468

08001d48 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001d4e:	1dfa      	adds	r2, r7, #7
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fe68 	bl	8002a2c <nRF24_ReadRXPaylaod>
	ConnectionStatus = RADIO_OK;
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fe9d 	bl	8001aa4 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001d6a:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <nRF24_EventRxCallback+0x30>)
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	701a      	strb	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000046a 	.word	0x2000046a

08001d7c <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <nRF24_EventMrCallback+0x14>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	20000468 	.word	0x20000468

08001d94 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001da0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001dac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001db0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001db4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001dbc:	e000      	b.n	8001dc0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001dbe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001dc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f9      	beq.n	8001dbe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001dca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f001 fcc8 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dec:	f000 f828 	bl	8001e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df0:	f7ff fb9c 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 8001df4:	f7ff fb7a 	bl	80014ec <MX_DMA_Init>
  MX_I2C1_Init();
 8001df8:	f7ff fc5e 	bl	80016b8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001dfc:	f7ff fc8a 	bl	8001714 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001e00:	f000 ffa4 	bl	8002d4c <MX_SPI2_Init>
  MX_TIM3_Init();
 8001e04:	f001 fba8 	bl	8003558 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001e08:	f7fe ff8a 	bl	8000d20 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001e0c:	f001 fbf8 	bl	8003600 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001e10:	f000 f87e 	bl	8001f10 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	2120      	movs	r1, #32
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <main+0x50>)
 8001e1a:	f003 f8a1 	bl	8004f60 <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <main+0x54>)
 8001e20:	f7ff fe28 	bl	8001a74 <Radio_Init>
  Inputs_Init();
 8001e24:	f7ff f88c 	bl	8000f40 <Inputs_Init>
  OLED_Init(&hi2c3);
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <main+0x58>)
 8001e2a:	f001 f843 	bl	8002eb4 <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SimpleScheduler();
 8001e2e:	f000 ff3f 	bl	8002cb0 <SimpleScheduler>
 8001e32:	e7fc      	b.n	8001e2e <main+0x4a>
 8001e34:	40020400 	.word	0x40020400
 8001e38:	200004d0 	.word	0x200004d0
 8001e3c:	20000414 	.word	0x20000414

08001e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	; 0x50
 8001e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	2230      	movs	r2, #48	; 0x30
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f005 fea6 	bl	8007ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <SystemClock_Config+0xc8>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <SystemClock_Config+0xc8>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <SystemClock_Config+0xc8>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <SystemClock_Config+0xcc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <SystemClock_Config+0xcc>)
 8001e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <SystemClock_Config+0xcc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fcd9 	bl	800587c <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ed0:	f000 f856 	bl	8001f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	2103      	movs	r1, #3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 ff3b 	bl	8005d6c <HAL_RCC_ClockConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001efc:	f000 f840 	bl	8001f80 <Error_Handler>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3750      	adds	r7, #80	; 0x50
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	2028      	movs	r0, #40	; 0x28
 8001f1a:	f002 fabc 	bl	8004496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f1e:	2028      	movs	r0, #40	; 0x28
 8001f20:	f002 fad5 	bl	80044ce <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2024      	movs	r0, #36	; 0x24
 8001f2a:	f002 fab4 	bl	8004496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f2e:	2024      	movs	r0, #36	; 0x24
 8001f30:	f002 facd 	bl	80044ce <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	2012      	movs	r0, #18
 8001f3a:	f002 faac 	bl	8004496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f3e:	2012      	movs	r0, #18
 8001f40:	f002 fac5 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff1e 	bl	8001d94 <ITM_SendChar>

	return ch;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f72:	d101      	bne.n	8001f78 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001f74:	f000 fd88 	bl	8002a88 <nRF24_IRQ_Handler>
	}

}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <Error_Handler+0x8>
	...

08001f8c <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	//static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	//if(LastMenuPtr == MenuCurrentMember) return;  TODO: IS THIS NEEDED?

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001f96:	e00c      	b.n	8001fb2 <Menu_RefreshScreen+0x26>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001f98:	4b4f      	ldr	r3, [pc, #316]	; (80020d8 <Menu_RefreshScreen+0x14c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <Menu_RefreshScreen+0x150>)
 8001f9e:	5cd2      	ldrb	r2, [r2, r3]
 8001fa0:	3201      	adds	r2, #1
 8001fa2:	b2d1      	uxtb	r1, r2
 8001fa4:	4a4d      	ldr	r2, [pc, #308]	; (80020dc <Menu_RefreshScreen+0x150>)
 8001fa6:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <Menu_RefreshScreen+0x154>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <Menu_RefreshScreen+0x154>)
 8001fb0:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001fb2:	4b49      	ldr	r3, [pc, #292]	; (80020d8 <Menu_RefreshScreen+0x14c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <Menu_RefreshScreen+0x158>)
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <Menu_RefreshScreen+0x14c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4b45      	ldr	r3, [pc, #276]	; (80020dc <Menu_RefreshScreen+0x150>)
 8001fc6:	5c5b      	ldrb	r3, [r3, r1]
 8001fc8:	3305      	adds	r3, #5
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dce4      	bgt.n	8001f98 <Menu_RefreshScreen+0xc>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001fce:	e00c      	b.n	8001fea <Menu_RefreshScreen+0x5e>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <Menu_RefreshScreen+0x14c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4a41      	ldr	r2, [pc, #260]	; (80020dc <Menu_RefreshScreen+0x150>)
 8001fd6:	5cd2      	ldrb	r2, [r2, r3]
 8001fd8:	3a01      	subs	r2, #1
 8001fda:	b2d1      	uxtb	r1, r2
 8001fdc:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <Menu_RefreshScreen+0x150>)
 8001fde:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <Menu_RefreshScreen+0x154>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	; (80020e0 <Menu_RefreshScreen+0x154>)
 8001fe8:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001fea:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <Menu_RefreshScreen+0x14c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <Menu_RefreshScreen+0x158>)
 8001ff2:	5c9a      	ldrb	r2, [r3, r2]
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <Menu_RefreshScreen+0x14c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <Menu_RefreshScreen+0x150>)
 8001ffc:	5c5b      	ldrb	r3, [r3, r1]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3e6      	bcc.n	8001fd0 <Menu_RefreshScreen+0x44>
	}

	OLED_ClearBuffer(BLACK);
 8002002:	2000      	movs	r0, #0
 8002004:	f001 f860 	bl	80030c8 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8002008:	2100      	movs	r1, #0
 800200a:	2000      	movs	r0, #0
 800200c:	f000 ffa2 	bl	8002f54 <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8002010:	2101      	movs	r1, #1
 8002012:	4835      	ldr	r0, [pc, #212]	; (80020e8 <Menu_RefreshScreen+0x15c>)
 8002014:	f001 f922 	bl	800325c <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <Menu_RefreshScreen+0x154>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 800201e:	e04f      	b.n	80020c0 <Menu_RefreshScreen+0x134>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <Menu_RefreshScreen+0x160>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d126      	bne.n	8002078 <Menu_RefreshScreen+0xec>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f8d6 	bl	80001e0 <strlen>
 8002034:	4602      	mov	r2, r0
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	3301      	adds	r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	b2da      	uxtb	r2, r3
 8002050:	78bb      	ldrb	r3, [r7, #2]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 ff7d 	bl	8002f54 <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 800205a:	2101      	movs	r1, #1
 800205c:	4824      	ldr	r0, [pc, #144]	; (80020f0 <Menu_RefreshScreen+0x164>)
 800205e:	f001 f8fd 	bl	800325c <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f001 f8f7 	bl	800325c <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 800206e:	2101      	movs	r1, #1
 8002070:	4820      	ldr	r0, [pc, #128]	; (80020f4 <Menu_RefreshScreen+0x168>)
 8002072:	f001 f8f3 	bl	800325c <OLED_WriteString>
 8002076:	e01d      	b.n	80020b4 <Menu_RefreshScreen+0x128>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe f8af 	bl	80001e0 <strlen>
 8002082:	4602      	mov	r2, r0
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	3301      	adds	r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	78bb      	ldrb	r3, [r7, #2]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 ff56 	bl	8002f54 <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 f8d4 	bl	800325c <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	3301      	adds	r3, #1
 80020b8:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d002      	beq.n	80020cc <Menu_RefreshScreen+0x140>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1a9      	bne.n	8002020 <Menu_RefreshScreen+0x94>
	}
	OLED_SendBuffer();
 80020cc:	f000 ffd0 	bl	8003070 <OLED_SendBuffer>
	//LastMenuPtr = MenuCurrentMember;

}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200004c0 	.word	0x200004c0
 80020dc:	200004bc 	.word	0x200004bc
 80020e0:	20000124 	.word	0x20000124
 80020e4:	200004b8 	.word	0x200004b8
 80020e8:	08008910 	.word	0x08008910
 80020ec:	20000120 	.word	0x20000120
 80020f0:	08008928 	.word	0x08008928
 80020f4:	0800892c 	.word	0x0800892c

080020f8 <Menu_Next>:

void Menu_Next(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <Menu_Next+0x54>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <Menu_Next+0x54>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <Menu_Next+0x54>)
 800210e:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <Menu_Next+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <Menu_Next+0x5c>)
 8002116:	5cd2      	ldrb	r2, [r2, r3]
 8002118:	3201      	adds	r2, #1
 800211a:	b2d1      	uxtb	r1, r2
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <Menu_Next+0x5c>)
 800211e:	54d1      	strb	r1, [r2, r3]
 8002120:	e00f      	b.n	8002142 <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <Menu_Next+0x54>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <Menu_Next+0x54>)
 800212a:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <Menu_Next+0x54>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f5      	bne.n	8002122 <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <Menu_Next+0x58>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <Menu_Next+0x5c>)
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8002142:	f7ff ff23 	bl	8001f8c <Menu_RefreshScreen>
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000120 	.word	0x20000120
 8002150:	200004c0 	.word	0x200004c0
 8002154:	200004b8 	.word	0x200004b8

08002158 <Menu_Prev>:

void Menu_Prev(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <Menu_Prev+0x58>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01a      	beq.n	800219c <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <Menu_Prev+0x58>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <Menu_Prev+0x58>)
 800216e:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <Menu_Prev+0x5c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <Menu_Prev+0x60>)
 8002176:	5cd2      	ldrb	r2, [r2, r3]
 8002178:	3a01      	subs	r2, #1
 800217a:	b2d1      	uxtb	r1, r2
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <Menu_Prev+0x60>)
 800217e:	54d1      	strb	r1, [r2, r3]
 8002180:	e011      	b.n	80021a6 <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <Menu_Prev+0x58>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <Menu_Prev+0x58>)
 800218a:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <Menu_Prev+0x5c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <Menu_Prev+0x60>)
 8002192:	5cd2      	ldrb	r2, [r2, r3]
 8002194:	3201      	adds	r2, #1
 8002196:	b2d1      	uxtb	r1, r2
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <Menu_Prev+0x60>)
 800219a:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <Menu_Prev+0x58>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ed      	bne.n	8002182 <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 80021a6:	f7ff fef1 	bl	8001f8c <Menu_RefreshScreen>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000120 	.word	0x20000120
 80021b4:	200004c0 	.word	0x200004c0
 80021b8:	200004b8 	.word	0x200004b8

080021bc <Menu_Select>:



void Menu_Select(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <Menu_Select+0x48>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <Menu_Select+0x16>
	{
		MenuCurrentMember->FunctionPtr();
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <Menu_Select+0x48>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	4798      	blx	r3
	}

	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <Menu_Select+0x48>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <Menu_Select+0x3e>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <Menu_Select+0x48>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <Menu_Select+0x48>)
 80021e4:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <Menu_Select+0x48>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <Menu_Select+0x4c>)
 80021ec:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <Menu_Select+0x50>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <Menu_Select+0x50>)
 80021f8:	701a      	strb	r2, [r3, #0]
	}

	Menu_RefreshScreen();
 80021fa:	f7ff fec7 	bl	8001f8c <Menu_RefreshScreen>
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000120 	.word	0x20000120
 8002208:	20000124 	.word	0x20000124
 800220c:	200004c0 	.word	0x200004c0

08002210 <Menu_Back>:

void Menu_Back(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <Menu_Back+0x7c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02e      	beq.n	800227e <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <Menu_Back+0x80>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <Menu_Back+0x84>)
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <Menu_Back+0x7c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <Menu_Back+0x7c>)
 8002234:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <Menu_Back+0x7c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <Menu_Back+0x88>)
 800223c:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <Menu_Back+0x80>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <Menu_Back+0x80>)
 8002248:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 800224a:	2300      	movs	r3, #0
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	e007      	b.n	8002260 <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <Menu_Back+0x88>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <Menu_Back+0x88>)
 8002258:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	3301      	adds	r3, #1
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <Menu_Back+0x80>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <Menu_Back+0x84>)
 800226a:	5c5b      	ldrb	r3, [r3, r1]
 800226c:	4619      	mov	r1, r3
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <Menu_Back+0x80>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <Menu_Back+0x8c>)
 8002276:	5c1b      	ldrb	r3, [r3, r0]
 8002278:	1acb      	subs	r3, r1, r3
 800227a:	429a      	cmp	r2, r3
 800227c:	dbe8      	blt.n	8002250 <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 800227e:	f7ff fe85 	bl	8001f8c <Menu_RefreshScreen>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000120 	.word	0x20000120
 8002290:	200004c0 	.word	0x200004c0
 8002294:	200004b8 	.word	0x200004b8
 8002298:	20000124 	.word	0x20000124
 800229c:	200004bc 	.word	0x200004bc

080022a0 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fad7 	bl	8003860 <HAL_Delay>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <nRF24_SendSpi+0x28>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	f003 ffdc 	bl	8006292 <HAL_SPI_Transmit>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200004c4 	.word	0x200004c4

080022e8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <nRF24_ReadSpi+0x28>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	f004 f902 	bl	800650a <HAL_SPI_Receive>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004c4 	.word	0x200004c4

08002314 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002322:	2200      	movs	r2, #0
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <nRF24_ReadRegister+0x44>)
 8002328:	f002 fe1a 	bl	8004f60 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ffc3 	bl	80022bc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8002336:	f107 030f 	add.w	r3, r7, #15
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ffd3 	bl	80022e8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8002342:	2201      	movs	r2, #1
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <nRF24_ReadRegister+0x44>)
 8002348:	f002 fe0a 	bl	8004f60 <HAL_GPIO_WritePin>

	return result;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40020800 	.word	0x40020800

0800235c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	4613      	mov	r3, r2
 800236a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002370:	2200      	movs	r2, #0
 8002372:	2140      	movs	r1, #64	; 0x40
 8002374:	480a      	ldr	r0, [pc, #40]	; (80023a0 <nRF24_ReadRegisters+0x44>)
 8002376:	f002 fdf3 	bl	8004f60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff9c 	bl	80022bc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	4619      	mov	r1, r3
 8002388:	6838      	ldr	r0, [r7, #0]
 800238a:	f7ff ffad 	bl	80022e8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800238e:	2201      	movs	r2, #1
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <nRF24_ReadRegisters+0x44>)
 8002394:	f002 fde4 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020800 	.word	0x40020800

080023a4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	460a      	mov	r2, r1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f043 0320 	orr.w	r3, r3, #32
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80023c2:	2200      	movs	r2, #0
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	4809      	ldr	r0, [pc, #36]	; (80023ec <nRF24_WriteRegister+0x48>)
 80023c8:	f002 fdca 	bl	8004f60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2102      	movs	r1, #2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff72 	bl	80022bc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80023d8:	2201      	movs	r2, #1
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <nRF24_WriteRegister+0x48>)
 80023de:	f002 fdbf 	bl	8004f60 <HAL_GPIO_WritePin>
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020800 	.word	0x40020800

080023f0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	b2db      	uxtb	r3, r3
 8002408:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800240a:	2200      	movs	r2, #0
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	480b      	ldr	r0, [pc, #44]	; (800243c <nRF24_WriteRegisters+0x4c>)
 8002410:	f002 fda6 	bl	8004f60 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff4f 	bl	80022bc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800241e:	79bb      	ldrb	r3, [r7, #6]
 8002420:	4619      	mov	r1, r3
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f7ff ff4a 	bl	80022bc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002428:	2201      	movs	r2, #1
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	4803      	ldr	r0, [pc, #12]	; (800243c <nRF24_WriteRegisters+0x4c>)
 800242e:	f002 fd97 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40020800 	.word	0x40020800

08002440 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8002446:	2200      	movs	r2, #0
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	4810      	ldr	r0, [pc, #64]	; (800248c <nRF24_TX_Mode+0x4c>)
 800244c:	f002 fd88 	bl	8004f60 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002450:	f000 f81e 	bl	8002490 <nRF24_ReadConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f818 	bl	80024a0 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002470:	2070      	movs	r0, #112	; 0x70
 8002472:	f000 f870 	bl	8002556 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002476:	f000 f87d 	bl	8002574 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800247a:	f000 f895 	bl	80025a8 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff ff0e 	bl	80022a0 <nRF24_Delay_ms>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020800 	.word	0x40020800

08002490 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002494:	2000      	movs	r0, #0
 8002496:	f7ff ff3d 	bl	8002314 <nRF24_ReadRegister>
 800249a:	4603      	mov	r3, r0
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}

080024a0 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4619      	mov	r1, r3
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7ff ff78 	bl	80023a4 <nRF24_WriteRegister>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80024c6:	2006      	movs	r0, #6
 80024c8:	f7ff ff24 	bl	8002314 <nRF24_ReadRegister>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	f023 0307 	bic.w	r3, r3, #7
 80024d6:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	b25a      	sxtb	r2, r3
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	4619      	mov	r1, r3
 80024ec:	2006      	movs	r0, #6
 80024ee:	f7ff ff59 	bl	80023a4 <nRF24_WriteRegister>
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002504:	2006      	movs	r0, #6
 8002506:	f7ff ff05 	bl	8002314 <nRF24_ReadRegister>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002514:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d104      	bne.n	8002526 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	f043 0320 	orr.w	r3, r3, #32
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e006      	b.n	8002534 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d103      	bne.n	8002534 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	4619      	mov	r1, r3
 8002538:	2006      	movs	r0, #6
 800253a:	f7ff ff33 	bl	80023a4 <nRF24_WriteRegister>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800254a:	2007      	movs	r0, #7
 800254c:	f7ff fee2 	bl	8002314 <nRF24_ReadRegister>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}

08002556 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4619      	mov	r1, r3
 8002564:	2007      	movs	r0, #7
 8002566:	f7ff ff1d 	bl	80023a4 <nRF24_WriteRegister>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800257a:	23e2      	movs	r3, #226	; 0xe2
 800257c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800257e:	2200      	movs	r2, #0
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4808      	ldr	r0, [pc, #32]	; (80025a4 <nRF24_FlushRX+0x30>)
 8002584:	f002 fcec 	bl	8004f60 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe95 	bl	80022bc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002592:	2201      	movs	r2, #1
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <nRF24_FlushRX+0x30>)
 8002598:	f002 fce2 	bl	8004f60 <HAL_GPIO_WritePin>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40020800 	.word	0x40020800

080025a8 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80025ae:	23e1      	movs	r3, #225	; 0xe1
 80025b0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80025b2:	2200      	movs	r2, #0
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <nRF24_FlushTX+0x30>)
 80025b8:	f002 fcd2 	bl	8004f60 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe7b 	bl	80022bc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80025c6:	2201      	movs	r2, #1
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	4803      	ldr	r0, [pc, #12]	; (80025d8 <nRF24_FlushTX+0x30>)
 80025cc:	f002 fcc8 	bl	8004f60 <HAL_GPIO_WritePin>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40020800 	.word	0x40020800

080025dc <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80025e6:	f7ff ff53 	bl	8002490 <nRF24_ReadConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e003      	b.n	8002606 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	f023 0308 	bic.w	r3, r3, #8
 8002604:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff49 	bl	80024a0 <nRF24_WriteConfig>
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002620:	f7ff ff36 	bl	8002490 <nRF24_ReadConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d104      	bne.n	8002638 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e003      	b.n	8002640 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	f023 0304 	bic.w	r3, r3, #4
 800263e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff2c 	bl	80024a0 <nRF24_WriteConfig>
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	460a      	mov	r2, r1
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	4613      	mov	r3, r2
 800265e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	b25a      	sxtb	r2, r3
 8002666:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	b25b      	sxtb	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b25b      	sxtb	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4619      	mov	r1, r3
 8002678:	2004      	movs	r0, #4
 800267a:	f7ff fe93 	bl	80023a4 <nRF24_WriteRegister>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	2005      	movs	r0, #5
 800269c:	f7ff fe82 	bl	80023a4 <nRF24_WriteRegister>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	460a      	mov	r2, r1
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d901      	bls.n	80026c2 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80026be:	2305      	movs	r3, #5
 80026c0:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f7ff fe26 	bl	8002314 <nRF24_ReadRegister>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10a      	bne.n	80026e8 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2201      	movs	r2, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	b25a      	sxtb	r2, r3
 80026dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	e00b      	b.n	8002700 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2201      	movs	r2, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	b25a      	sxtb	r2, r3
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4619      	mov	r1, r3
 8002704:	2002      	movs	r0, #2
 8002706:	f7ff fe4d 	bl	80023a4 <nRF24_WriteRegister>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	460a      	mov	r2, r1
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	4613      	mov	r3, r2
 8002720:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d901      	bls.n	800272c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002728:	2305      	movs	r3, #5
 800272a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fdf1 	bl	8002314 <nRF24_ReadRegister>
 8002732:	4603      	mov	r3, r0
 8002734:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10a      	bne.n	8002752 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	b25a      	sxtb	r2, r3
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4313      	orrs	r3, r2
 800274c:	b25b      	sxtb	r3, r3
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e00b      	b.n	800276a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2201      	movs	r2, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	b25b      	sxtb	r3, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	b25a      	sxtb	r2, r3
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	4013      	ands	r3, r2
 8002766:	b25b      	sxtb	r3, r3
 8002768:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	4619      	mov	r1, r3
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff fe18 	bl	80023a4 <nRF24_WriteRegister>
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d901      	bls.n	8002790 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 800278c:	2305      	movs	r3, #5
 800278e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d801      	bhi.n	800279a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002796:	2303      	movs	r3, #3
 8002798:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	3b02      	subs	r3, #2
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	2003      	movs	r0, #3
 80027aa:	f7ff fdfb 	bl	80023a4 <nRF24_WriteRegister>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	6039      	str	r1, [r7, #0]
 80027c0:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <nRF24_SetRXAddress+0x18>
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d11d      	bne.n	800280a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e00d      	b.n	80027f0 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	441a      	add	r2, r3
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	f1c3 0302 	rsb	r3, r3, #2
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	3310      	adds	r3, #16
 80027e4:	443b      	add	r3, r7
 80027e6:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	3301      	adds	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d9ee      	bls.n	80027d4 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	330a      	adds	r3, #10
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f107 010c 	add.w	r1, r7, #12
 8002800:	2203      	movs	r2, #3
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fdf4 	bl	80023f0 <nRF24_WriteRegisters>
	{
 8002808:	e00a      	b.n	8002820 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	330a      	adds	r3, #10
 800280e:	b2da      	uxtb	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3302      	adds	r3, #2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7ff fdc3 	bl	80023a4 <nRF24_WriteRegister>
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	2203      	movs	r2, #3
 8002836:	4619      	mov	r1, r3
 8002838:	200a      	movs	r0, #10
 800283a:	f7ff fd8f 	bl	800235c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	e00c      	b.n	800285e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	f1c3 0302 	rsb	r3, r3, #2
 800284c:	3210      	adds	r2, #16
 800284e:	443a      	add	r2, r7
 8002850:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <nRF24_SetTXAddress+0x88>)
 8002856:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	3301      	adds	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d9ef      	bls.n	8002844 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e00d      	b.n	8002886 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	441a      	add	r2, r3
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	f1c3 0302 	rsb	r3, r3, #2
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	3310      	adds	r3, #16
 800287a:	443b      	add	r3, r7
 800287c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	3301      	adds	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d9ee      	bls.n	800286a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2203      	movs	r2, #3
 8002892:	4619      	mov	r1, r3
 8002894:	200a      	movs	r0, #10
 8002896:	f7ff fdab 	bl	80023f0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	2203      	movs	r2, #3
 80028a0:	4619      	mov	r1, r3
 80028a2:	2010      	movs	r0, #16
 80028a4:	f7ff fda4 	bl	80023f0 <nRF24_WriteRegisters>

}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200004c8 	.word	0x200004c8

080028b4 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80028ba:	f7ff fe44 	bl	8002546 <nRF24_ReadStatus>
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80028c8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fe42 	bl	8002556 <nRF24_WriteStatus>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80028e4:	2060      	movs	r0, #96	; 0x60
 80028e6:	f7ff fd15 	bl	8002314 <nRF24_ReadRegister>
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d906      	bls.n	8002902 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 80028f4:	f7ff fe3e 	bl	8002574 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7ff fcd1 	bl	80022a0 <nRF24_Delay_ms>
        return 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8002902:	79fb      	ldrb	r3, [r7, #7]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002916:	f7ff fdbb 	bl	8002490 <nRF24_ReadConfig>
 800291a:	4603      	mov	r3, r0
 800291c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d104      	bne.n	800292e <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e003      	b.n	8002936 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002934:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fdb1 	bl	80024a0 <nRF24_WriteConfig>
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002950:	f7ff fd9e 	bl	8002490 <nRF24_ReadConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	f043 0320 	orr.w	r3, r3, #32
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e003      	b.n	8002970 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	f023 0320 	bic.w	r3, r3, #32
 800296e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fd94 	bl	80024a0 <nRF24_WriteConfig>
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800298a:	f7ff fd81 	bl	8002490 <nRF24_ReadConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	f043 0310 	orr.w	r3, r3, #16
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e003      	b.n	80029aa <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	f023 0310 	bic.w	r3, r3, #16
 80029a8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fd77 	bl	80024a0 <nRF24_WriteConfig>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	461a      	mov	r2, r3
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	20a0      	movs	r0, #160	; 0xa0
 80029ce:	f7ff fd0f 	bl	80023f0 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80029e2:	2201      	movs	r2, #1
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	4810      	ldr	r0, [pc, #64]	; (8002a28 <nRF24_WaitTX+0x4c>)
 80029e8:	f002 faba 	bl	8004f60 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7ff fc57 	bl	80022a0 <nRF24_Delay_ms>
	NRF24_CE_LOW;
 80029f2:	2200      	movs	r2, #0
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	480c      	ldr	r0, [pc, #48]	; (8002a28 <nRF24_WaitTX+0x4c>)
 80029f8:	f002 fab2 	bl	8004f60 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7ff fc4f 	bl	80022a0 <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 8002a02:	f7ff fda0 	bl	8002546 <nRF24_ReadStatus>
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <nRF24_WaitTX+0x42>
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <nRF24_WaitTX+0x20>

}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40020800 	.word	0x40020800

08002a2c <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8002a36:	f7ff ff50 	bl	80028da <nRF24_GetDynamicPayloadSize>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	2061      	movs	r0, #97	; 0x61
 8002a4c:	f7ff fc86 	bl	800235c <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d901      	bls.n	8002a6e <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e007      	b.n	8002a7e <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa1 	bl	80029ba <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 8002a78:	f7ff ffb0 	bl	80029dc <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <nRF24_IRQ_Handler+0x14>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	200004ce 	.word	0x200004ce

08002aa0 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <nRF24_IRQ_Read+0x7c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d130      	bne.n	8002b12 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <nRF24_IRQ_Read+0x7c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8002ab6:	f7ff fd46 	bl	8002546 <nRF24_ReadStatus>
 8002aba:	4603      	mov	r3, r0
 8002abc:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <nRF24_IRQ_Read+0x80>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad8:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <nRF24_IRQ_Read+0x84>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8002af2:	79bb      	ldrb	r3, [r7, #6]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <nRF24_IRQ_Read+0x88>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f043 0310 	orr.w	r3, r3, #16
 8002b08:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fd22 	bl	8002556 <nRF24_WriteStatus>
	}
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200004ce 	.word	0x200004ce
 8002b20:	200004cb 	.word	0x200004cb
 8002b24:	200004cc 	.word	0x200004cc
 8002b28:	200004cd 	.word	0x200004cd

08002b2c <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8002b30:	f7ff ffb6 	bl	8002aa0 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <nRF24_Event+0x44>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002b3c:	f7ff f904 	bl	8001d48 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <nRF24_Event+0x44>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <nRF24_Event+0x48>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002b4e:	f7ff f8e9 	bl	8001d24 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <nRF24_Event+0x48>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <nRF24_Event+0x4c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002b60:	f7ff f90c 	bl	8001d7c <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <nRF24_Event+0x4c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
	}
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200004cb 	.word	0x200004cb
 8002b74:	200004cc 	.word	0x200004cc
 8002b78:	200004cd 	.word	0x200004cd

08002b7c <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <nRF24_Init+0xc4>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	482d      	ldr	r0, [pc, #180]	; (8002c44 <nRF24_Init+0xc8>)
 8002b90:	f002 f9e6 	bl	8004f60 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002b94:	2201      	movs	r2, #1
 8002b96:	2140      	movs	r1, #64	; 0x40
 8002b98:	482a      	ldr	r0, [pc, #168]	; (8002c44 <nRF24_Init+0xc8>)
 8002b9a:	f002 f9e1 	bl	8004f60 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002b9e:	2005      	movs	r0, #5
 8002ba0:	f7ff fb7e 	bl	80022a0 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f7ff fc89 	bl	80024bc <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002baa:	2002      	movs	r0, #2
 8002bac:	f7ff fca5 	bl	80024fa <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff fd13 	bl	80025dc <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff fd2d 	bl	8002616 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002bbc:	2107      	movs	r1, #7
 8002bbe:	2004      	movs	r0, #4
 8002bc0:	f7ff fd46 	bl	8002650 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002bc4:	201d      	movs	r0, #29
 8002bc6:	f7ff fba5 	bl	8002314 <nRF24_ReadRegister>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	201d      	movs	r0, #29
 8002bd6:	f7ff fbe5 	bl	80023a4 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002bda:	213f      	movs	r1, #63	; 0x3f
 8002bdc:	201c      	movs	r0, #28
 8002bde:	f7ff fbe1 	bl	80023a4 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002be2:	200a      	movs	r0, #10
 8002be4:	f7ff fd4f 	bl	8002686 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002be8:	2101      	movs	r1, #1
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7ff fd5c 	bl	80026a8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7ff fd8d 	bl	8002712 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f7ff fdbf 	bl	800277c <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7ff fb4e 	bl	80022a0 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7ff fe81 	bl	800290c <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff fe9b 	bl	8002946 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7ff feb5 	bl	8002980 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7ff fb42 	bl	80022a0 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002c1c:	f7ff fe4a 	bl	80028b4 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8002c20:	201d      	movs	r0, #29
 8002c22:	f7ff fb77 	bl	8002314 <nRF24_ReadRegister>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	201d      	movs	r0, #29
 8002c32:	f7ff fbb7 	bl	80023a4 <nRF24_WriteRegister>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200004c4 	.word	0x200004c4
 8002c44:	40020800 	.word	0x40020800

08002c48 <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 8002c4c:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <MenuTaskInit+0x2c>)
 8002c4e:	490a      	ldr	r1, [pc, #40]	; (8002c78 <MenuTaskInit+0x30>)
 8002c50:	2004      	movs	r0, #4
 8002c52:	f7fe facf 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 8002c56:	2200      	movs	r2, #0
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <MenuTaskInit+0x30>)
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe faca 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, Menu_Back, NULL);
 8002c60:	2200      	movs	r2, #0
 8002c62:	4904      	ldr	r1, [pc, #16]	; (8002c74 <MenuTaskInit+0x2c>)
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7fe fac5 	bl	80011f4 <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 8002c6a:	f7ff f98f 	bl	8001f8c <Menu_RefreshScreen>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	08002211 	.word	0x08002211
 8002c78:	080021bd 	.word	0x080021bd

08002c7c <MenuTask>:

static void MenuTask(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 8002c86:	f7fe fa6d 	bl	8001164 <Inputs_GetEncoderCount>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dd02      	ble.n	8002c9c <MenuTask+0x20>
	{
		Menu_Next();
 8002c96:	f7ff fa2f 	bl	80020f8 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 8002c9a:	e005      	b.n	8002ca8 <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da01      	bge.n	8002ca8 <MenuTask+0x2c>
		Menu_Prev();
 8002ca4:	f7ff fa58 	bl	8002158 <Menu_Prev>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SimpleScheduler>:

void SimpleScheduler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 8002cb6:	f7fe ffe1 	bl	8001c7c <Radio_Process>

	if(0 == StartupInitFlag)
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <SimpleScheduler+0x78>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d104      	bne.n	8002ccc <SimpleScheduler+0x1c>
	{
		MenuTaskInit();								//Init for menu
 8002cc2:	f7ff ffc1 	bl	8002c48 <MenuTaskInit>
		StartupInitFlag = 1;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <SimpleScheduler+0x78>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
	}

	Inputs_ButtonsRoutine();
 8002ccc:	f7fe fa74 	bl	80011b8 <Inputs_ButtonsRoutine>
	SubProgramStatus = Programs_PerformProgram();
 8002cd0:	f7fd fe4e 	bl	8000970 <Programs_PerformProgram>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d106      	bne.n	8002cec <SimpleScheduler+0x3c>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002cde:	f7fd fe3b 	bl	8000958 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002ce2:	f7fe facd 	bl	8001280 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002ce6:	f7ff ffaf 	bl	8002c48 <MenuTaskInit>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
		MenuTaskInit(); 							//Init for menu again
	}
}
 8002cea:	e018      	b.n	8002d1e <SimpleScheduler+0x6e>
	else if(SubProgramStatus == NO_PROGRAM_SET)		//if there is no pointer to program, perform menu task
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <SimpleScheduler+0x48>
		MenuTask();
 8002cf2:	f7ff ffc3 	bl	8002c7c <MenuTask>
}
 8002cf6:	e012      	b.n	8002d1e <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_LAUNCH_ERROR)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d106      	bne.n	8002d0c <SimpleScheduler+0x5c>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002cfe:	f7fd fe2b 	bl	8000958 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002d02:	f7fe fabd 	bl	8001280 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002d06:	f7ff ff9f 	bl	8002c48 <MenuTaskInit>
}
 8002d0a:	e008      	b.n	8002d1e <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_EXIT_ERROR)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d105      	bne.n	8002d1e <SimpleScheduler+0x6e>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002d12:	f7fd fe21 	bl	8000958 <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 8002d16:	f7fe fab3 	bl	8001280 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 8002d1a:	f7ff ff95 	bl	8002c48 <MenuTaskInit>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200004cf 	.word	0x200004cf

08002d2c <Radio_NewCommandReceivedCallback>:
//
//
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
	Parser_Controller(command, length);
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fac7 	bl	80012d0 <Parser_Controller>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d80:	2218      	movs	r2, #24
 8002d82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d98:	220a      	movs	r2, #10
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d9c:	4804      	ldr	r0, [pc, #16]	; (8002db0 <MX_SPI2_Init+0x64>)
 8002d9e:	f003 f9ef 	bl	8006180 <HAL_SPI_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002da8:	f7ff f8ea 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200004d0 	.word	0x200004d0
 8002db4:	40003800 	.word	0x40003800

08002db8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_SPI_MspInit+0x84>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d12c      	bne.n	8002e34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_SPI_MspInit+0x88>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_SPI_MspInit+0x88>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_SPI_MspInit+0x88>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_SPI_MspInit+0x88>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_SPI_MspInit+0x88>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_SPI_MspInit+0x88>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e20:	2303      	movs	r3, #3
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e24:	2305      	movs	r3, #5
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <HAL_SPI_MspInit+0x8c>)
 8002e30:	f001 fefa 	bl	8004c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e34:	bf00      	nop
 8002e36:	3728      	adds	r7, #40	; 0x28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40003800 	.word	0x40003800
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020400 	.word	0x40020400

08002e48 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <OLED_SendCmdSequence+0x34>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2264      	movs	r2, #100	; 0x64
 8002e5e:	9202      	str	r2, [sp, #8]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2301      	movs	r3, #1
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2178      	movs	r1, #120	; 0x78
 8002e6c:	f002 f9ee 	bl	800524c <HAL_I2C_Mem_Write>
 8002e70:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000528 	.word	0x20000528

08002e80 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af04      	add	r7, sp, #16
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <OLED_SendData+0x30>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	2364      	movs	r3, #100	; 0x64
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	2240      	movs	r2, #64	; 0x40
 8002ea0:	2178      	movs	r1, #120	; 0x78
 8002ea2:	f002 f9d3 	bl	800524c <HAL_I2C_Mem_Write>
 8002ea6:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000528 	.word	0x20000528

08002eb4 <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <OLED_Init+0x28>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 8002ec2:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <OLED_Init+0x2c>)
 8002ec4:	f000 f916 	bl	80030f4 <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002ec8:	2110      	movs	r1, #16
 8002eca:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <OLED_Init+0x30>)
 8002ecc:	f7ff ffbc 	bl	8002e48 <OLED_SendCmdSequence>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000528 	.word	0x20000528
 8002ee0:	08008934 	.word	0x08008934
 8002ee4:	20000128 	.word	0x20000128

08002ee8 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	71fb      	strb	r3, [r7, #7]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d802      	bhi.n	8002f08 <OLED_SetDeviceCursor+0x20>
 8002f02:	79bb      	ldrb	r3, [r7, #6]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d901      	bls.n	8002f0c <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01f      	b.n	8002f4c <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	3302      	adds	r3, #2
 8002f10:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002f2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002f3e:	f107 030c 	add.w	r3, r7, #12
 8002f42:	2103      	movs	r1, #3
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff7f 	bl	8002e48 <OLED_SendCmdSequence>

	return Status;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db02      	blt.n	8002f72 <OLED_MoveCursor+0x1e>
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	2b3f      	cmp	r3, #63	; 0x3f
 8002f70:	d901      	bls.n	8002f76 <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00b      	b.n	8002f8e <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <OLED_MoveCursor+0x48>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <OLED_MoveCursor+0x48>)
 8002f7e:	79bb      	ldrb	r3, [r7, #6]
 8002f80:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002f82:	79bb      	ldrb	r3, [r7, #6]
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <OLED_MoveCursor+0x48>)
 8002f8a:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000052c 	.word	0x2000052c

08002fa0 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
 8002fac:	4613      	mov	r3, r2
 8002fae:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e04f      	b.n	8003056 <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002fb6:	78bb      	ldrb	r3, [r7, #2]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d116      	bne.n	8002fea <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a28      	ldr	r2, [pc, #160]	; (800306c <OLED_WriteToBuffer+0xcc>)
 8002fcc:	5cd1      	ldrb	r1, [r2, r3]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8002fda:	789b      	ldrb	r3, [r3, #2]
 8002fdc:	01db      	lsls	r3, r3, #7
 8002fde:	4403      	add	r3, r0
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	b2d1      	uxtb	r1, r2
 8002fe4:	4a21      	ldr	r2, [pc, #132]	; (800306c <OLED_WriteToBuffer+0xcc>)
 8002fe6:	54d1      	strb	r1, [r2, r3]
 8002fe8:	e020      	b.n	800302c <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002fea:	78bb      	ldrb	r3, [r7, #2]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11b      	bne.n	8003028 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8002ff8:	789b      	ldrb	r3, [r3, #2]
 8002ffa:	01db      	lsls	r3, r3, #7
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <OLED_WriteToBuffer+0xcc>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	b25a      	sxtb	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b25b      	sxtb	r3, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	b25b      	sxtb	r3, r3
 800300e:	4013      	ands	r3, r2
 8003010:	b25a      	sxtb	r2, r3
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	4619      	mov	r1, r3
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 800301a:	789b      	ldrb	r3, [r3, #2]
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	440b      	add	r3, r1
 8003020:	b2d1      	uxtb	r1, r2
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <OLED_WriteToBuffer+0xcc>)
 8003024:	54d1      	strb	r1, [r2, r3]
 8003026:	e001      	b.n	800302c <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e019      	b.n	8003060 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <OLED_WriteToBuffer+0xc8>)
 8003036:	7852      	ldrb	r2, [r2, #1]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff8a 	bl	8002f54 <OLED_MoveCursor>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e00a      	b.n	8003060 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3301      	adds	r3, #1
 800304e:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	3301      	adds	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3ab      	bcc.n	8002fb6 <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	2000052c 	.word	0x2000052c
 800306c:	20000538 	.word	0x20000538

08003070 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	71bb      	strb	r3, [r7, #6]
 800307e:	e019      	b.n	80030b4 <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8003080:	79bb      	ldrb	r3, [r7, #6]
 8003082:	4619      	mov	r1, r3
 8003084:	2000      	movs	r0, #0
 8003086:	f7ff ff2f 	bl	8002ee8 <OLED_SetDeviceCursor>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	4313      	orrs	r3, r2
 8003092:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	01db      	lsls	r3, r3, #7
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <OLED_SendBuffer+0x54>)
 800309a:	4413      	add	r3, r2
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff feee 	bl	8002e80 <OLED_SendData>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 80030ae:	79bb      	ldrb	r3, [r7, #6]
 80030b0:	3301      	adds	r3, #1
 80030b2:	71bb      	strb	r3, [r7, #6]
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b07      	cmp	r3, #7
 80030b8:	d9e2      	bls.n	8003080 <OLED_SendBuffer+0x10>
	}
	return Status;
 80030ba:	79fb      	ldrb	r3, [r7, #7]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000538 	.word	0x20000538

080030c8 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	4613      	mov	r3, r2
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030de:	4619      	mov	r1, r3
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <OLED_ClearBuffer+0x28>)
 80030e2:	f004 fd5d 	bl	8007ba0 <memset>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000538 	.word	0x20000538

080030f4 <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3301      	adds	r3, #1
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3302      	adds	r3, #2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	2b08      	cmp	r3, #8
 8003110:	d802      	bhi.n	8003118 <OLED_ChangeFont+0x24>
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d901      	bls.n	800311c <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e00e      	b.n	800313a <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <OLED_ChangeFont+0x54>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <OLED_ChangeFont+0x54>)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <OLED_ChangeFont+0x54>)
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3303      	adds	r3, #3
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <OLED_ChangeFont+0x54>)
 8003136:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000530 	.word	0x20000530

0800314c <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	460a      	mov	r2, r1
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	4613      	mov	r3, r2
 800315a:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8003160:	79bb      	ldrb	r3, [r7, #6]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d901      	bls.n	800316a <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06f      	b.n	800324a <OLED_WriteChar+0xfe>
	}
	switch(character)
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	2b0a      	cmp	r3, #10
 800316e:	d009      	beq.n	8003184 <OLED_WriteChar+0x38>
 8003170:	2b0d      	cmp	r3, #13
 8003172:	d113      	bne.n	800319c <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <OLED_WriteChar+0x108>)
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	4619      	mov	r1, r3
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff feea 	bl	8002f54 <OLED_MoveCursor>
 8003180:	4603      	mov	r3, r0
 8003182:	e062      	b.n	800324a <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <OLED_WriteChar+0x108>)
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	4b32      	ldr	r3, [pc, #200]	; (8003254 <OLED_WriteChar+0x108>)
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	3308      	adds	r3, #8
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7ff fede 	bl	8002f54 <OLED_MoveCursor>
 8003198:	4603      	mov	r3, r0
 800319a:	e056      	b.n	800324a <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <OLED_WriteChar+0x10c>)
 80031a0:	7912      	ldrb	r2, [r2, #4]
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <OLED_WriteChar+0x10c>)
 80031a8:	795b      	ldrb	r3, [r3, #5]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	fb12 f303 	smulbb	r3, r2, r3
 80031b0:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <OLED_WriteChar+0x10c>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4413      	add	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 80031be:	2300      	movs	r3, #0
 80031c0:	75bb      	strb	r3, [r7, #22]
 80031c2:	e00c      	b.n	80031de <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 80031c4:	7dbb      	ldrb	r3, [r7, #22]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	3318      	adds	r3, #24
 80031cc:	443b      	add	r3, r7
 80031ce:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3301      	adds	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 80031d8:	7dbb      	ldrb	r3, [r7, #22]
 80031da:	3301      	adds	r3, #1
 80031dc:	75bb      	strb	r3, [r7, #22]
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <OLED_WriteChar+0x10c>)
 80031e0:	795b      	ldrb	r3, [r3, #5]
 80031e2:	7dba      	ldrb	r2, [r7, #22]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d3ed      	bcc.n	80031c4 <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <OLED_WriteChar+0x10c>)
 80031ea:	7959      	ldrb	r1, [r3, #5]
 80031ec:	79ba      	ldrb	r2, [r7, #6]
 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fed4 	bl	8002fa0 <OLED_WriteToBuffer>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	4313      	orrs	r3, r2
 8003200:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <OLED_WriteChar+0x108>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <OLED_WriteChar+0x10c>)
 800320a:	795b      	ldrb	r3, [r3, #5]
 800320c:	4413      	add	r3, r2
 800320e:	2b7f      	cmp	r3, #127	; 0x7f
 8003210:	dd1a      	ble.n	8003248 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <OLED_WriteChar+0x108>)
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 800321a:	2100      	movs	r1, #0
 800321c:	2000      	movs	r0, #0
 800321e:	f7ff fe99 	bl	8002f54 <OLED_MoveCursor>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	4313      	orrs	r3, r2
 800322a:	75fb      	strb	r3, [r7, #23]
 800322c:	e00c      	b.n	8003248 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <OLED_WriteChar+0x108>)
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	3308      	adds	r3, #8
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	2000      	movs	r0, #0
 800323a:	f7ff fe8b 	bl	8002f54 <OLED_MoveCursor>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	4313      	orrs	r3, r2
 8003246:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000052c 	.word	0x2000052c
 8003258:	20000530 	.word	0x20000530

0800325c <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d910      	bls.n	8003294 <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e013      	b.n	800329e <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff64 	bl	800314c <OLED_WriteChar>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	4313      	orrs	r3, r2
 800328c:	73fb      	strb	r3, [r7, #15]
		String++;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3301      	adds	r3, #1
 8003292:	607b      	str	r3, [r7, #4]
	while(*String)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ec      	bne.n	8003276 <OLED_WriteString+0x1a>
	}
	return Status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <OLED_WriteInt>:

OLED_Status OLED_WriteInt(int Value, uint8_t color)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
	if(color > 1)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d901      	bls.n	80032be <OLED_WriteInt+0x16>
	{
		return OLED_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <OLED_WriteInt+0x34>
	}

	char Buffer[5];
	sprintf(Buffer,"%d",Value);
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4907      	ldr	r1, [pc, #28]	; (80032e4 <OLED_WriteInt+0x3c>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 fb72 	bl	80079b0 <siprintf>
	return OLED_WriteString(Buffer, color);
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ffc1 	bl	800325c <OLED_WriteString>
 80032da:	4603      	mov	r3, r0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08008930 	.word	0x08008930

080032e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_MspInit+0x4c>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_MspInit+0x4c>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <HAL_MspInit+0x4c>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_MspInit+0x4c>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <HAL_MspInit+0x4c>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_MspInit+0x4c>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800333c:	e7fe      	b.n	800333c <NMI_Handler+0x4>

0800333e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003342:	e7fe      	b.n	8003342 <HardFault_Handler+0x4>

08003344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003348:	e7fe      	b.n	8003348 <MemManage_Handler+0x4>

0800334a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800334e:	e7fe      	b.n	800334e <BusFault_Handler+0x4>

08003350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <UsageFault_Handler+0x4>

08003356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003384:	f000 fa4c 	bl	8003820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}

0800338c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <ADC_IRQHandler+0x10>)
 8003392:	f000 facc 	bl	800392e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200001e8 	.word	0x200001e8

080033a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033a6:	f003 ff83 	bl	80072b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000984 	.word	0x20000984

080033b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <SPI2_IRQHandler+0x10>)
 80033ba:	f003 fb59 	bl	8006a70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200004d0 	.word	0x200004d0

080033c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80033cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033d0:	f001 fde0 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <DMA2_Stream0_IRQHandler+0x10>)
 80033de:	f001 f9b9 	bl	8004754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000230 	.word	0x20000230

080033ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	e00a      	b.n	8003414 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033fe:	f3af 8000 	nop.w
 8003402:	4601      	mov	r1, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	60ba      	str	r2, [r7, #8]
 800340a:	b2ca      	uxtb	r2, r1
 800340c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3301      	adds	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	dbf0      	blt.n	80033fe <_read+0x12>
  }

  return len;
 800341c:	687b      	ldr	r3, [r7, #4]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e009      	b.n	800344c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	60ba      	str	r2, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fd81 	bl	8001f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	3301      	adds	r3, #1
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	dbf1      	blt.n	8003438 <_write+0x12>
  }
  return len;
 8003454:	687b      	ldr	r3, [r7, #4]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_close>:

int _close(int file)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003486:	605a      	str	r2, [r3, #4]
  return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <_isatty>:

int _isatty(int file)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800349e:	2301      	movs	r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <_sbrk+0x5c>)
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <_sbrk+0x60>)
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <_sbrk+0x64>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <_sbrk+0x64>)
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <_sbrk+0x68>)
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <_sbrk+0x64>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d207      	bcs.n	8003508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f8:	f004 fba0 	bl	8007c3c <__errno>
 80034fc:	4603      	mov	r3, r0
 80034fe:	220c      	movs	r2, #12
 8003500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	e009      	b.n	800351c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <_sbrk+0x64>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <_sbrk+0x64>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <_sbrk+0x64>)
 8003518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20020000 	.word	0x20020000
 8003528:	00000400 	.word	0x00000400
 800352c:	20000938 	.word	0x20000938
 8003530:	20000b20 	.word	0x20000b20

08003534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <SystemInit+0x20>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <SystemInit+0x20>)
 8003540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fb1a 	bl	8007ba0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003574:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <MX_TIM3_Init+0xa0>)
 8003576:	4a21      	ldr	r2, [pc, #132]	; (80035fc <MX_TIM3_Init+0xa4>)
 8003578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800357a:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <MX_TIM3_Init+0xa0>)
 800357c:	2200      	movs	r2, #0
 800357e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <MX_TIM3_Init+0xa0>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <MX_TIM3_Init+0xa0>)
 8003588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <MX_TIM3_Init+0xa0>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <MX_TIM3_Init+0xa0>)
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800359a:	2303      	movs	r3, #3
 800359c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035a2:	2301      	movs	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035b2:	2301      	movs	r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	4619      	mov	r1, r3
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <MX_TIM3_Init+0xa0>)
 80035c6:	f003 fd3f 	bl	8007048 <HAL_TIM_Encoder_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80035d0:	f7fe fcd6 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d4:	2300      	movs	r3, #0
 80035d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <MX_TIM3_Init+0xa0>)
 80035e2:	f004 f845 	bl	8007670 <HAL_TIMEx_MasterConfigSynchronization>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80035ec:	f7fe fcc8 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035f0:	bf00      	nop
 80035f2:	3730      	adds	r7, #48	; 0x30
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000093c 	.word	0x2000093c
 80035fc:	40000400 	.word	0x40000400

08003600 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_TIM10_Init+0x40>)
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <MX_TIM10_Init+0x44>)
 8003608:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MX_TIM10_Init+0x40>)
 800360c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003610:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_TIM10_Init+0x40>)
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_TIM10_Init+0x40>)
 800361a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_TIM10_Init+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_TIM10_Init+0x40>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800362c:	4804      	ldr	r0, [pc, #16]	; (8003640 <MX_TIM10_Init+0x40>)
 800362e:	f003 fc61 	bl	8006ef4 <HAL_TIM_Base_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003638:	f7fe fca2 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000984 	.word	0x20000984
 8003644:	40014400 	.word	0x40014400

08003648 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a19      	ldr	r2, [pc, #100]	; (80036cc <HAL_TIM_Encoder_MspInit+0x84>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d12b      	bne.n	80036c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036b2:	2302      	movs	r3, #2
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	4805      	ldr	r0, [pc, #20]	; (80036d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80036be:	f001 fab3 	bl	8004c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020000 	.word	0x40020000

080036d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <HAL_TIM_Base_MspInit+0x48>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d115      	bne.n	8003716 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_TIM_Base_MspInit+0x4c>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a0c      	ldr	r2, [pc, #48]	; (8003724 <HAL_TIM_Base_MspInit+0x4c>)
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_TIM_Base_MspInit+0x4c>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	2019      	movs	r0, #25
 800370c:	f000 fec3 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003710:	2019      	movs	r0, #25
 8003712:	f000 fedc 	bl	80044ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40014400 	.word	0x40014400
 8003724:	40023800 	.word	0x40023800

08003728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800372c:	480d      	ldr	r0, [pc, #52]	; (8003764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800372e:	490e      	ldr	r1, [pc, #56]	; (8003768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003730:	4a0e      	ldr	r2, [pc, #56]	; (800376c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003734:	e002      	b.n	800373c <LoopCopyDataInit>

08003736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373a:	3304      	adds	r3, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800373c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003740:	d3f9      	bcc.n	8003736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003744:	4c0b      	ldr	r4, [pc, #44]	; (8003774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003748:	e001      	b.n	800374e <LoopFillZerobss>

0800374a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800374c:	3204      	adds	r2, #4

0800374e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003750:	d3fb      	bcc.n	800374a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003752:	f7ff feef 	bl	8003534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003756:	f004 fa77 	bl	8007c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800375a:	f7fe fb43 	bl	8001de4 <main>
  bx  lr    
 800375e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003768:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 800376c:	08008bdc 	.word	0x08008bdc
  ldr r2, =_sbss
 8003770:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8003774:	20000b1c 	.word	0x20000b1c

08003778 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <DMA1_Stream0_IRQHandler>
	...

0800377c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_Init+0x40>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_Init+0x40>)
 8003786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_Init+0x40>)
 8003792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_Init+0x40>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a4:	2003      	movs	r0, #3
 80037a6:	f000 fe6b 	bl	8004480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037aa:	200f      	movs	r0, #15
 80037ac:	f000 f808 	bl	80037c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b0:	f7ff fd9a 	bl	80032e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_InitTick+0x54>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_InitTick+0x58>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe83 	bl	80044ea <HAL_SYSTICK_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00e      	b.n	800380c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	d80a      	bhi.n	800380a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f4:	2200      	movs	r2, #0
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f000 fe4b 	bl	8004496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003800:	4a06      	ldr	r2, [pc, #24]	; (800381c <HAL_InitTick+0x5c>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000138 	.word	0x20000138
 8003818:	20000140 	.word	0x20000140
 800381c:	2000013c 	.word	0x2000013c

08003820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_IncTick+0x20>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_IncTick+0x24>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4413      	add	r3, r2
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_IncTick+0x24>)
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000140 	.word	0x20000140
 8003844:	200009cc 	.word	0x200009cc

08003848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return uwTick;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_GetTick+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	200009cc 	.word	0x200009cc

08003860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff ffee 	bl	8003848 <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d005      	beq.n	8003886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_Delay+0x44>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003886:	bf00      	nop
 8003888:	f7ff ffde 	bl	8003848 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d8f7      	bhi.n	8003888 <HAL_Delay+0x28>
  {
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000140 	.word	0x20000140

080038a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e033      	b.n	8003926 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd faa6 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ee:	f023 0302 	bic.w	r3, r3, #2
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fb68 	bl	8003fd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
 8003916:	e001      	b.n	800391c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d049      	beq.n	80039f8 <HAL_ADC_IRQHandler+0xca>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d046      	beq.n	80039f8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d12b      	bne.n	80039e8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003994:	2b00      	cmp	r3, #0
 8003996:	d127      	bne.n	80039e8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d119      	bne.n	80039e8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0220 	bic.w	r2, r2, #32
 80039c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd fb5b 	bl	80010a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f06f 0212 	mvn.w	r2, #18
 80039f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d057      	beq.n	8003abe <HAL_ADC_IRQHandler+0x190>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d054      	beq.n	8003abe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d139      	bne.n	8003aae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d12b      	bne.n	8003aae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d124      	bne.n	8003aae <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d119      	bne.n	8003aae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fc0c 	bl	80042cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 020c 	mvn.w	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x1d6>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10d      	bne.n	8003b04 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f925 	bl	8003d44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0201 	mvn.w	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b12:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_ADC_IRQHandler+0x218>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0202 	orr.w	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0220 	mvn.w	r2, #32
 8003b34:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f90e 	bl	8003d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0220 	mvn.w	r2, #32
 8003b44:	601a      	str	r2, [r3, #0]
  }
}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_Start_DMA+0x1e>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0ce      	b.n	8003d0c <HAL_ADC_Start_DMA+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d018      	beq.n	8003bb6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b94:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <HAL_ADC_Start_DMA+0x1c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <HAL_ADC_Start_DMA+0x1c8>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9a      	lsrs	r2, r3, #18
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ba8:	e002      	b.n	8003bb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f9      	bne.n	8003baa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc4:	d107      	bne.n	8003bd6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 8086 	bne.w	8003cf2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d106      	bne.n	8003c34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f023 0206 	bic.w	r2, r3, #6
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
 8003c32:	e002      	b.n	8003c3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_ADC_Start_DMA+0x1cc>)
 8003c44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <HAL_ADC_Start_DMA+0x1d0>)
 8003c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <HAL_ADC_Start_DMA+0x1d4>)
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	4a33      	ldr	r2, [pc, #204]	; (8003d28 <HAL_ADC_Start_DMA+0x1d8>)
 8003c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	334c      	adds	r3, #76	; 0x4c
 8003c92:	4619      	mov	r1, r3
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f000 fce2 	bl	8004660 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d129      	bne.n	8003d0a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	e020      	b.n	8003d0a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_ADC_Start_DMA+0x1dc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d11b      	bne.n	8003d0a <HAL_ADC_Start_DMA+0x1ba>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d114      	bne.n	8003d0a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	e00b      	b.n	8003d0a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0210 	orr.w	r2, r3, #16
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f043 0201 	orr.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000138 	.word	0x20000138
 8003d18:	431bde83 	.word	0x431bde83
 8003d1c:	40012300 	.word	0x40012300
 8003d20:	080041c9 	.word	0x080041c9
 8003d24:	08004283 	.word	0x08004283
 8003d28:	0800429f 	.word	0x0800429f
 8003d2c:	40012000 	.word	0x40012000

08003d30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1c>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e113      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x244>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d925      	bls.n	8003de4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	3b1e      	subs	r3, #30
 8003dae:	2207      	movs	r2, #7
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43da      	mvns	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	400a      	ands	r2, r1
 8003dbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68d9      	ldr	r1, [r3, #12]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4403      	add	r3, r0
 8003dd6:	3b1e      	subs	r3, #30
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	e022      	b.n	8003e2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6919      	ldr	r1, [r3, #16]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	2207      	movs	r2, #7
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	400a      	ands	r2, r1
 8003e06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6919      	ldr	r1, [r3, #16]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4403      	add	r3, r0
 8003e20:	409a      	lsls	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d824      	bhi.n	8003e7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	3b05      	subs	r3, #5
 8003e44:	221f      	movs	r2, #31
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	400a      	ands	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	4618      	mov	r0, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b05      	subs	r3, #5
 8003e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7a:	e04c      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d824      	bhi.n	8003ece <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	3b23      	subs	r3, #35	; 0x23
 8003e96:	221f      	movs	r2, #31
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3b23      	subs	r3, #35	; 0x23
 8003ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
 8003ecc:	e023      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	3b41      	subs	r3, #65	; 0x41
 8003ee0:	221f      	movs	r2, #31
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	400a      	ands	r2, r1
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4618      	mov	r0, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	3b41      	subs	r3, #65	; 0x41
 8003f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_ADC_ConfigChannel+0x250>)
 8003f18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <HAL_ADC_ConfigChannel+0x254>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10f      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x1d8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b12      	cmp	r3, #18
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_ADC_ConfigChannel+0x254>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d12b      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x23a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_ADC_ConfigChannel+0x258>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0x1f4>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b11      	cmp	r3, #17
 8003f5e:	d122      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <HAL_ADC_ConfigChannel+0x258>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d111      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_ADC_ConfigChannel+0x25c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <HAL_ADC_ConfigChannel+0x260>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	0c9a      	lsrs	r2, r3, #18
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f98:	e002      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f9      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40012300 	.word	0x40012300
 8003fc0:	40012000 	.word	0x40012000
 8003fc4:	10000012 	.word	0x10000012
 8003fc8:	20000138 	.word	0x20000138
 8003fcc:	431bde83 	.word	0x431bde83

08003fd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fd8:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <ADC_Init+0x1f0>)
 8003fda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <ADC_Init+0x1f4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d022      	beq.n	80040ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	e00f      	b.n	80040ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0202 	bic.w	r2, r2, #2
 80040dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6899      	ldr	r1, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7e1b      	ldrb	r3, [r3, #24]
 80040e8:	005a      	lsls	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800411a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	3b01      	subs	r3, #1
 8004128:	035a      	lsls	r2, r3, #13
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e007      	b.n	8004144 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004142:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	3b01      	subs	r3, #1
 8004160:	051a      	lsls	r2, r3, #20
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6899      	ldr	r1, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004186:	025a      	lsls	r2, r3, #9
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	029a      	lsls	r2, r3, #10
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40012300 	.word	0x40012300
 80041c4:	0f000001 	.word	0x0f000001

080041c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d13c      	bne.n	800425c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d12b      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	d127      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800421c:	2b00      	cmp	r3, #0
 800421e:	d119      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0220 	bic.w	r2, r2, #32
 800422e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7fc ff25 	bl	80010a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800425a:	e00e      	b.n	800427a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fd75 	bl	8003d58 <HAL_ADC_ErrorCallback>
}
 800426e:	e004      	b.n	800427a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff fd4d 	bl	8003d30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2240      	movs	r2, #64	; 0x40
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fd4a 	bl	8003d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <__NVIC_SetPriorityGrouping>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800430c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	60d3      	str	r3, [r2, #12]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <__NVIC_GetPriorityGrouping>:
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <__NVIC_GetPriorityGrouping+0x18>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	f003 0307 	and.w	r3, r3, #7
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_EnableIRQ>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	2b00      	cmp	r3, #0
 8004354:	db0b      	blt.n	800436e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	4907      	ldr	r1, [pc, #28]	; (800437c <__NVIC_EnableIRQ+0x38>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2001      	movs	r0, #1
 8004366:	fa00 f202 	lsl.w	r2, r0, r2
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000e100 	.word	0xe000e100

08004380 <__NVIC_SetPriority>:
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db0a      	blt.n	80043aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	490c      	ldr	r1, [pc, #48]	; (80043cc <__NVIC_SetPriority+0x4c>)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	0112      	lsls	r2, r2, #4
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	440b      	add	r3, r1
 80043a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043a8:	e00a      	b.n	80043c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4908      	ldr	r1, [pc, #32]	; (80043d0 <__NVIC_SetPriority+0x50>)
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3b04      	subs	r3, #4
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	440b      	add	r3, r1
 80043be:	761a      	strb	r2, [r3, #24]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <NVIC_EncodePriority>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f1c3 0307 	rsb	r3, r3, #7
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	bf28      	it	cs
 80043f2:	2304      	movcs	r3, #4
 80043f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d902      	bls.n	8004404 <NVIC_EncodePriority+0x30>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3b03      	subs	r3, #3
 8004402:	e000      	b.n	8004406 <NVIC_EncodePriority+0x32>
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	401a      	ands	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800441c:	f04f 31ff 	mov.w	r1, #4294967295
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	43d9      	mvns	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800442c:	4313      	orrs	r3, r2
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <SysTick_Config>:
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800444c:	d301      	bcc.n	8004452 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800444e:	2301      	movs	r3, #1
 8004450:	e00f      	b.n	8004472 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <SysTick_Config+0x40>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800445a:	210f      	movs	r1, #15
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	f7ff ff8e 	bl	8004380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <SysTick_Config+0x40>)
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800446a:	4b04      	ldr	r3, [pc, #16]	; (800447c <SysTick_Config+0x40>)
 800446c:	2207      	movs	r2, #7
 800446e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	e000e010 	.word	0xe000e010

08004480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff29 	bl	80042e0 <__NVIC_SetPriorityGrouping>
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044a8:	f7ff ff3e 	bl	8004328 <__NVIC_GetPriorityGrouping>
 80044ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	6978      	ldr	r0, [r7, #20]
 80044b4:	f7ff ff8e 	bl	80043d4 <NVIC_EncodePriority>
 80044b8:	4602      	mov	r2, r0
 80044ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff5d 	bl	8004380 <__NVIC_SetPriority>
}
 80044c6:	bf00      	nop
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff31 	bl	8004344 <__NVIC_EnableIRQ>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ffa2 	bl	800443c <SysTick_Config>
 80044f8:	4603      	mov	r3, r0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff f99a 	bl	8003848 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e099      	b.n	8004654 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004540:	e00f      	b.n	8004562 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004542:	f7ff f981 	bl	8003848 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b05      	cmp	r3, #5
 800454e:	d908      	bls.n	8004562 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2203      	movs	r2, #3
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e078      	b.n	8004654 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e8      	bne.n	8004542 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4b38      	ldr	r3, [pc, #224]	; (800465c <HAL_DMA_Init+0x158>)
 800457c:	4013      	ands	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800458e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d107      	bne.n	80045cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	4313      	orrs	r3, r2
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d117      	bne.n	8004626 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa91 	bl	8004b30 <DMA_CheckFifoParam>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004622:	2301      	movs	r3, #1
 8004624:	e016      	b.n	8004654 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa48 	bl	8004ac4 <DMA_CalcBaseAndBitshift>
 8004634:	4603      	mov	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	223f      	movs	r2, #63	; 0x3f
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	f010803f 	.word	0xf010803f

08004660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_DMA_Start_IT+0x26>
 8004682:	2302      	movs	r3, #2
 8004684:	e040      	b.n	8004708 <HAL_DMA_Start_IT+0xa8>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d12f      	bne.n	80046fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f9da 	bl	8004a68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	223f      	movs	r2, #63	; 0x3f
 80046ba:	409a      	lsls	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0216 	orr.w	r2, r2, #22
 80046ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0208 	orr.w	r2, r2, #8
 80046e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e005      	b.n	8004706 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004702:	2302      	movs	r3, #2
 8004704:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004706:	7dfb      	ldrb	r3, [r7, #23]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d004      	beq.n	800472e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e00c      	b.n	8004748 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2205      	movs	r2, #5
 8004732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004760:	4b8e      	ldr	r3, [pc, #568]	; (800499c <HAL_DMA_IRQHandler+0x248>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a8e      	ldr	r2, [pc, #568]	; (80049a0 <HAL_DMA_IRQHandler+0x24c>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0a9b      	lsrs	r3, r3, #10
 800476c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	2208      	movs	r2, #8
 8004780:	409a      	lsls	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01a      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d013      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0204 	bic.w	r2, r2, #4
 80047a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	2208      	movs	r2, #8
 80047ae:	409a      	lsls	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f043 0201 	orr.w	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	2201      	movs	r2, #1
 80047e4:	409a      	lsls	r2, r3
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f043 0202 	orr.w	r2, r3, #2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	2204      	movs	r2, #4
 80047fc:	409a      	lsls	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d012      	beq.n	800482c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	2204      	movs	r2, #4
 800481a:	409a      	lsls	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f043 0204 	orr.w	r2, r3, #4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	2210      	movs	r2, #16
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d043      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03c      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	2210      	movs	r2, #16
 8004850:	409a      	lsls	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d018      	beq.n	8004896 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d108      	bne.n	8004884 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d024      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
 8004882:	e01f      	b.n	80048c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
 8004894:	e016      	b.n	80048c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0208 	bic.w	r2, r2, #8
 80048b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	2220      	movs	r2, #32
 80048ca:	409a      	lsls	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 808f 	beq.w	80049f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8087 	beq.w	80049f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	2220      	movs	r2, #32
 80048ec:	409a      	lsls	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d136      	bne.n	800496c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0216 	bic.w	r2, r2, #22
 800490c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800491c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <HAL_DMA_IRQHandler+0x1da>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0208 	bic.w	r2, r2, #8
 800493c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	223f      	movs	r2, #63	; 0x3f
 8004944:	409a      	lsls	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	2b00      	cmp	r3, #0
 8004960:	d07e      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
        }
        return;
 800496a:	e079      	b.n	8004a60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01d      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	2b00      	cmp	r3, #0
 800498e:	d031      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
 8004998:	e02c      	b.n	80049f4 <HAL_DMA_IRQHandler+0x2a0>
 800499a:	bf00      	nop
 800499c:	20000138 	.word	0x20000138
 80049a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d023      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
 80049b4:	e01e      	b.n	80049f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10f      	bne.n	80049e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0210 	bic.w	r2, r2, #16
 80049d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d032      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2205      	movs	r2, #5
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d307      	bcc.n	8004a3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f2      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x2cc>
 8004a3a:	e000      	b.n	8004a3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
 8004a5e:	e000      	b.n	8004a62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a60:	bf00      	nop
    }
  }
}
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d108      	bne.n	8004aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004aa6:	e007      	b.n	8004ab8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	3b10      	subs	r3, #16
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <DMA_CalcBaseAndBitshift+0x64>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ade:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <DMA_CalcBaseAndBitshift+0x68>)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d909      	bls.n	8004b06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58
 8004b04:	e007      	b.n	8004b16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	aaaaaaab 	.word	0xaaaaaaab
 8004b2c:	08008b90 	.word	0x08008b90

08004b30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11f      	bne.n	8004b8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d856      	bhi.n	8004bfe <DMA_CheckFifoParam+0xce>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <DMA_CheckFifoParam+0x28>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b7b 	.word	0x08004b7b
 8004b60:	08004b69 	.word	0x08004b69
 8004b64:	08004bff 	.word	0x08004bff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d046      	beq.n	8004c02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b78:	e043      	b.n	8004c02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b82:	d140      	bne.n	8004c06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e03d      	b.n	8004c06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b92:	d121      	bne.n	8004bd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d837      	bhi.n	8004c0a <DMA_CheckFifoParam+0xda>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <DMA_CheckFifoParam+0x70>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bb7 	.word	0x08004bb7
 8004ba8:	08004bb1 	.word	0x08004bb1
 8004bac:	08004bc9 	.word	0x08004bc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e030      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d025      	beq.n	8004c0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc6:	e022      	b.n	8004c0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bd0:	d11f      	bne.n	8004c12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bd6:	e01c      	b.n	8004c12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d903      	bls.n	8004be6 <DMA_CheckFifoParam+0xb6>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d003      	beq.n	8004bec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004be4:	e018      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bea:	e015      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e00b      	b.n	8004c16 <DMA_CheckFifoParam+0xe6>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e00a      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      break;
 8004c02:	bf00      	nop
 8004c04:	e008      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      break;
 8004c06:	bf00      	nop
 8004c08:	e006      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      break;
 8004c0a:	bf00      	nop
 8004c0c:	e004      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e002      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <DMA_CheckFifoParam+0xe8>
      break;
 8004c16:	bf00      	nop
    }
  } 
  
  return status; 
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop

08004c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e159      	b.n	8004ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c44:	2201      	movs	r2, #1
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	f040 8148 	bne.w	8004ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d005      	beq.n	8004c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d130      	bne.n	8004cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 0201 	and.w	r2, r3, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d017      	beq.n	8004d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d123      	bne.n	8004d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	08da      	lsrs	r2, r3, #3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3208      	adds	r2, #8
 8004d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	220f      	movs	r2, #15
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	08da      	lsrs	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3208      	adds	r2, #8
 8004d66:	69b9      	ldr	r1, [r7, #24]
 8004d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2203      	movs	r2, #3
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 0203 	and.w	r2, r3, #3
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a2 	beq.w	8004ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <HAL_GPIO_Init+0x2e8>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	4a56      	ldr	r2, [pc, #344]	; (8004f10 <HAL_GPIO_Init+0x2e8>)
 8004db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dbe:	4b54      	ldr	r3, [pc, #336]	; (8004f10 <HAL_GPIO_Init+0x2e8>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dca:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <HAL_GPIO_Init+0x2ec>)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	220f      	movs	r2, #15
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a49      	ldr	r2, [pc, #292]	; (8004f18 <HAL_GPIO_Init+0x2f0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d019      	beq.n	8004e2a <HAL_GPIO_Init+0x202>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a48      	ldr	r2, [pc, #288]	; (8004f1c <HAL_GPIO_Init+0x2f4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_GPIO_Init+0x1fe>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a47      	ldr	r2, [pc, #284]	; (8004f20 <HAL_GPIO_Init+0x2f8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00d      	beq.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <HAL_GPIO_Init+0x2fc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <HAL_GPIO_Init+0x1f6>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a45      	ldr	r2, [pc, #276]	; (8004f28 <HAL_GPIO_Init+0x300>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <HAL_GPIO_Init+0x1f2>
 8004e16:	2304      	movs	r3, #4
 8004e18:	e008      	b.n	8004e2c <HAL_GPIO_Init+0x204>
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	e006      	b.n	8004e2c <HAL_GPIO_Init+0x204>
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e004      	b.n	8004e2c <HAL_GPIO_Init+0x204>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e002      	b.n	8004e2c <HAL_GPIO_Init+0x204>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_GPIO_Init+0x204>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	f002 0203 	and.w	r2, r2, #3
 8004e32:	0092      	lsls	r2, r2, #2
 8004e34:	4093      	lsls	r3, r2
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e3c:	4935      	ldr	r1, [pc, #212]	; (8004f14 <HAL_GPIO_Init+0x2ec>)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	3302      	adds	r3, #2
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e4a:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	43db      	mvns	r3, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4013      	ands	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e6e:	4a2f      	ldr	r2, [pc, #188]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e98:	4a24      	ldr	r2, [pc, #144]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e9e:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ec2:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec8:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eec:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <HAL_GPIO_Init+0x304>)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b0f      	cmp	r3, #15
 8004efc:	f67f aea2 	bls.w	8004c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	3724      	adds	r7, #36	; 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40013800 	.word	0x40013800
 8004f18:	40020000 	.word	0x40020000
 8004f1c:	40020400 	.word	0x40020400
 8004f20:	40020800 	.word	0x40020800
 8004f24:	40020c00 	.word	0x40020c00
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40013c00 	.word	0x40013c00

08004f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	887b      	ldrh	r3, [r7, #2]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
 8004f4c:	e001      	b.n	8004f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f70:	787b      	ldrb	r3, [r7, #1]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f7c:	e003      	b.n	8004f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f7e:	887b      	ldrh	r3, [r7, #2]
 8004f80:	041a      	lsls	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004faa:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc ffd5 	bl	8001f62 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40013c00 	.word	0x40013c00

08004fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e12b      	b.n	800522e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fbc0 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005028:	f001 f896 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 800502c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4a81      	ldr	r2, [pc, #516]	; (8005238 <HAL_I2C_Init+0x274>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d807      	bhi.n	8005048 <HAL_I2C_Init+0x84>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a80      	ldr	r2, [pc, #512]	; (800523c <HAL_I2C_Init+0x278>)
 800503c:	4293      	cmp	r3, r2
 800503e:	bf94      	ite	ls
 8005040:	2301      	movls	r3, #1
 8005042:	2300      	movhi	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e006      	b.n	8005056 <HAL_I2C_Init+0x92>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a7d      	ldr	r2, [pc, #500]	; (8005240 <HAL_I2C_Init+0x27c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	bf94      	ite	ls
 8005050:	2301      	movls	r3, #1
 8005052:	2300      	movhi	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0e7      	b.n	800522e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a78      	ldr	r2, [pc, #480]	; (8005244 <HAL_I2C_Init+0x280>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	0c9b      	lsrs	r3, r3, #18
 8005068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a6a      	ldr	r2, [pc, #424]	; (8005238 <HAL_I2C_Init+0x274>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d802      	bhi.n	8005098 <HAL_I2C_Init+0xd4>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3301      	adds	r3, #1
 8005096:	e009      	b.n	80050ac <HAL_I2C_Init+0xe8>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	4a69      	ldr	r2, [pc, #420]	; (8005248 <HAL_I2C_Init+0x284>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	3301      	adds	r3, #1
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	495c      	ldr	r1, [pc, #368]	; (8005238 <HAL_I2C_Init+0x274>)
 80050c8:	428b      	cmp	r3, r1
 80050ca:	d819      	bhi.n	8005100 <HAL_I2C_Init+0x13c>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1e59      	subs	r1, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050e0:	400b      	ands	r3, r1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_I2C_Init+0x138>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1e59      	subs	r1, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fa:	e051      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 80050fc:	2304      	movs	r3, #4
 80050fe:	e04f      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d111      	bne.n	800512c <HAL_I2C_Init+0x168>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1e58      	subs	r0, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	440b      	add	r3, r1
 8005116:	fbb0 f3f3 	udiv	r3, r0, r3
 800511a:	3301      	adds	r3, #1
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e012      	b.n	8005152 <HAL_I2C_Init+0x18e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1e58      	subs	r0, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	0099      	lsls	r1, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005142:	3301      	adds	r3, #1
 8005144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005148:	2b00      	cmp	r3, #0
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_I2C_Init+0x196>
 8005156:	2301      	movs	r3, #1
 8005158:	e022      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10e      	bne.n	8005180 <HAL_I2C_Init+0x1bc>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1e58      	subs	r0, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6859      	ldr	r1, [r3, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	440b      	add	r3, r1
 8005170:	fbb0 f3f3 	udiv	r3, r0, r3
 8005174:	3301      	adds	r3, #1
 8005176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517e:	e00f      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e58      	subs	r0, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	0099      	lsls	r1, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	fbb0 f3f3 	udiv	r3, r0, r3
 8005196:	3301      	adds	r3, #1
 8005198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	6809      	ldr	r1, [r1, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6911      	ldr	r1, [r2, #16]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	000186a0 	.word	0x000186a0
 800523c:	001e847f 	.word	0x001e847f
 8005240:	003d08ff 	.word	0x003d08ff
 8005244:	431bde83 	.word	0x431bde83
 8005248:	10624dd3 	.word	0x10624dd3

0800524c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	460b      	mov	r3, r1
 8005260:	813b      	strh	r3, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005266:	f7fe faef 	bl	8003848 <HAL_GetTick>
 800526a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b20      	cmp	r3, #32
 8005276:	f040 80d9 	bne.w	800542c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2319      	movs	r3, #25
 8005280:	2201      	movs	r2, #1
 8005282:	496d      	ldr	r1, [pc, #436]	; (8005438 <HAL_I2C_Mem_Write+0x1ec>)
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f971 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
 8005292:	e0cc      	b.n	800542e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_I2C_Mem_Write+0x56>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0c5      	b.n	800542e <HAL_I2C_Mem_Write+0x1e2>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d007      	beq.n	80052c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2221      	movs	r2, #33	; 0x21
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a4d      	ldr	r2, [pc, #308]	; (800543c <HAL_I2C_Mem_Write+0x1f0>)
 8005308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530a:	88f8      	ldrh	r0, [r7, #6]
 800530c:	893a      	ldrh	r2, [r7, #8]
 800530e:	8979      	ldrh	r1, [r7, #10]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4603      	mov	r3, r0
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f890 	bl	8005440 <I2C_RequestMemoryWrite>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d052      	beq.n	80053cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e081      	b.n	800542e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f9f2 	bl	8005718 <I2C_WaitOnTXEFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b04      	cmp	r3, #4
 8005340:	d107      	bne.n	8005352 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06b      	b.n	800542e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d11b      	bne.n	80053cc <HAL_I2C_Mem_Write+0x180>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005398:	2b00      	cmp	r3, #0
 800539a:	d017      	beq.n	80053cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1aa      	bne.n	800532a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f9de 	bl	800579a <I2C_WaitOnBTFFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d107      	bne.n	80053fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e016      	b.n	800542e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	00100002 	.word	0x00100002
 800543c:	ffff0000 	.word	0xffff0000

08005440 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2200      	movs	r2, #0
 8005472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f878 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005490:	d103      	bne.n	800549a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e05f      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800549e:	897b      	ldrh	r3, [r7, #10]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	6a3a      	ldr	r2, [r7, #32]
 80054b2:	492d      	ldr	r1, [pc, #180]	; (8005568 <I2C_RequestMemoryWrite+0x128>)
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f8b0 	bl	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e04c      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f91a 	bl	8005718 <I2C_WaitOnTXEFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d107      	bne.n	8005502 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e02b      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800550c:	893b      	ldrh	r3, [r7, #8]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]
 8005516:	e021      	b.n	800555c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005518:	893b      	ldrh	r3, [r7, #8]
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	b29b      	uxth	r3, r3
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	6a39      	ldr	r1, [r7, #32]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f8f4 	bl	8005718 <I2C_WaitOnTXEFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b04      	cmp	r3, #4
 800553c:	d107      	bne.n	800554e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e005      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005552:	893b      	ldrh	r3, [r7, #8]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	00010002 	.word	0x00010002

0800556c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800557c:	e025      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d021      	beq.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	f7fe f95f 	bl	8003848 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d116      	bne.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0220 	orr.w	r2, r3, #32
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e023      	b.n	8005612 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d10d      	bne.n	80055f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	43da      	mvns	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	e00c      	b.n	800560a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	43da      	mvns	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0b6      	beq.n	800557e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005628:	e051      	b.n	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005638:	d123      	bne.n	8005682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005648:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005652:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0204 	orr.w	r2, r3, #4
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e046      	b.n	8005710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d021      	beq.n	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568a:	f7fe f8dd 	bl	8003848 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d302      	bcc.n	80056a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d116      	bne.n	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e020      	b.n	8005710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10c      	bne.n	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e00b      	b.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d18d      	bne.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005724:	e02d      	b.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f878 	bl	800581c <I2C_IsAcknowledgeFailed>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e02d      	b.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d021      	beq.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573e:	f7fe f883 	bl	8003848 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	d302      	bcc.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d116      	bne.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e007      	b.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d1ca      	bne.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a6:	e02d      	b.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f837 	bl	800581c <I2C_IsAcknowledgeFailed>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e02d      	b.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d021      	beq.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c0:	f7fe f842 	bl	8003848 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d302      	bcc.n	80057d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d116      	bne.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e007      	b.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b04      	cmp	r3, #4
 8005810:	d1ca      	bne.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d11b      	bne.n	800586c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800583c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f043 0204 	orr.w	r2, r3, #4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e267      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d075      	beq.n	8005986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800589a:	4b88      	ldr	r3, [pc, #544]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d00c      	beq.n	80058c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a6:	4b85      	ldr	r3, [pc, #532]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d112      	bne.n	80058d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058b2:	4b82      	ldr	r3, [pc, #520]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058be:	d10b      	bne.n	80058d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	4b7e      	ldr	r3, [pc, #504]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05b      	beq.n	8005984 <HAL_RCC_OscConfig+0x108>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d157      	bne.n	8005984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e242      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e0:	d106      	bne.n	80058f0 <HAL_RCC_OscConfig+0x74>
 80058e2:	4b76      	ldr	r3, [pc, #472]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a75      	ldr	r2, [pc, #468]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e01d      	b.n	800592c <HAL_RCC_OscConfig+0xb0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x98>
 80058fa:	4b70      	ldr	r3, [pc, #448]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a6f      	ldr	r2, [pc, #444]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6c      	ldr	r2, [pc, #432]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 800590c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e00b      	b.n	800592c <HAL_RCC_OscConfig+0xb0>
 8005914:	4b69      	ldr	r3, [pc, #420]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a68      	ldr	r2, [pc, #416]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 800591a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	4b66      	ldr	r3, [pc, #408]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a65      	ldr	r2, [pc, #404]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800592a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d013      	beq.n	800595c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005934:	f7fd ff88 	bl	8003848 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800593c:	f7fd ff84 	bl	8003848 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	; 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e207      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594e:	4b5b      	ldr	r3, [pc, #364]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0xc0>
 800595a:	e014      	b.n	8005986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595c:	f7fd ff74 	bl	8003848 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005964:	f7fd ff70 	bl	8003848 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e1f3      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005976:	4b51      	ldr	r3, [pc, #324]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0xe8>
 8005982:	e000      	b.n	8005986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d063      	beq.n	8005a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005992:	4b4a      	ldr	r3, [pc, #296]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599e:	4b47      	ldr	r3, [pc, #284]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d11c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059aa:	4b44      	ldr	r3, [pc, #272]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b6:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_RCC_OscConfig+0x152>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d001      	beq.n	80059ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e1c7      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ce:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4937      	ldr	r1, [pc, #220]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e2:	e03a      	b.n	8005a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d020      	beq.n	8005a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ec:	4b34      	ldr	r3, [pc, #208]	; (8005ac0 <HAL_RCC_OscConfig+0x244>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fd ff29 	bl	8003848 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059fa:	f7fd ff25 	bl	8003848 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e1a8      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a18:	4b28      	ldr	r3, [pc, #160]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4925      	ldr	r1, [pc, #148]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]
 8005a2c:	e015      	b.n	8005a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_RCC_OscConfig+0x244>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fd ff08 	bl	8003848 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3c:	f7fd ff04 	bl	8003848 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e187      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d036      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6e:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <HAL_RCC_OscConfig+0x248>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a74:	f7fd fee8 	bl	8003848 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a7c:	f7fd fee4 	bl	8003848 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e167      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8e:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_OscConfig+0x240>)
 8005a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x200>
 8005a9a:	e01b      	b.n	8005ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a9c:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <HAL_RCC_OscConfig+0x248>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa2:	f7fd fed1 	bl	8003848 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa8:	e00e      	b.n	8005ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aaa:	f7fd fecd 	bl	8003848 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d907      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e150      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	42470000 	.word	0x42470000
 8005ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac8:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1ea      	bne.n	8005aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8097 	beq.w	8005c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ae6:	4b81      	ldr	r3, [pc, #516]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10f      	bne.n	8005b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	4b7d      	ldr	r3, [pc, #500]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	4a7c      	ldr	r2, [pc, #496]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6413      	str	r3, [r2, #64]	; 0x40
 8005b02:	4b7a      	ldr	r3, [pc, #488]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b12:	4b77      	ldr	r3, [pc, #476]	; (8005cf0 <HAL_RCC_OscConfig+0x474>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d118      	bne.n	8005b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b1e:	4b74      	ldr	r3, [pc, #464]	; (8005cf0 <HAL_RCC_OscConfig+0x474>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a73      	ldr	r2, [pc, #460]	; (8005cf0 <HAL_RCC_OscConfig+0x474>)
 8005b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b2a:	f7fd fe8d 	bl	8003848 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b32:	f7fd fe89 	bl	8003848 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e10c      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b44:	4b6a      	ldr	r3, [pc, #424]	; (8005cf0 <HAL_RCC_OscConfig+0x474>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0f0      	beq.n	8005b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d106      	bne.n	8005b66 <HAL_RCC_OscConfig+0x2ea>
 8005b58:	4b64      	ldr	r3, [pc, #400]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	4a63      	ldr	r2, [pc, #396]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b5e:	f043 0301 	orr.w	r3, r3, #1
 8005b62:	6713      	str	r3, [r2, #112]	; 0x70
 8005b64:	e01c      	b.n	8005ba0 <HAL_RCC_OscConfig+0x324>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d10c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x30c>
 8005b6e:	4b5f      	ldr	r3, [pc, #380]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	4a5e      	ldr	r2, [pc, #376]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b74:	f043 0304 	orr.w	r3, r3, #4
 8005b78:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7a:	4b5c      	ldr	r3, [pc, #368]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	4a5b      	ldr	r2, [pc, #364]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	6713      	str	r3, [r2, #112]	; 0x70
 8005b86:	e00b      	b.n	8005ba0 <HAL_RCC_OscConfig+0x324>
 8005b88:	4b58      	ldr	r3, [pc, #352]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	4a57      	ldr	r2, [pc, #348]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	6713      	str	r3, [r2, #112]	; 0x70
 8005b94:	4b55      	ldr	r3, [pc, #340]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	4a54      	ldr	r2, [pc, #336]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005b9a:	f023 0304 	bic.w	r3, r3, #4
 8005b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d015      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fd fe4e 	bl	8003848 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb0:	f7fd fe4a 	bl	8003848 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0cb      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc6:	4b49      	ldr	r3, [pc, #292]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0ee      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x334>
 8005bd2:	e014      	b.n	8005bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd4:	f7fd fe38 	bl	8003848 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bdc:	f7fd fe34 	bl	8003848 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e0b5      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf2:	4b3e      	ldr	r3, [pc, #248]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ee      	bne.n	8005bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d105      	bne.n	8005c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c04:	4b39      	ldr	r3, [pc, #228]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	4a38      	ldr	r2, [pc, #224]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80a1 	beq.w	8005d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c1a:	4b34      	ldr	r3, [pc, #208]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d05c      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d141      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_RCC_OscConfig+0x478>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fd fe08 	bl	8003848 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fd fe04 	bl	8003848 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e087      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4e:	4b27      	ldr	r3, [pc, #156]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69da      	ldr	r2, [r3, #28]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	019b      	lsls	r3, r3, #6
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	3b01      	subs	r3, #1
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	061b      	lsls	r3, r3, #24
 8005c7e:	491b      	ldr	r1, [pc, #108]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c84:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <HAL_RCC_OscConfig+0x478>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8a:	f7fd fddd 	bl	8003848 <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c92:	f7fd fdd9 	bl	8003848 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e05c      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x416>
 8005cb0:	e054      	b.n	8005d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <HAL_RCC_OscConfig+0x478>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fd fdc6 	bl	8003848 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fd fdc2 	bl	8003848 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e045      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCC_OscConfig+0x470>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x444>
 8005cde:	e03d      	b.n	8005d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e038      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cf8:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <HAL_RCC_OscConfig+0x4ec>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d028      	beq.n	8005d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d121      	bne.n	8005d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d11a      	bne.n	8005d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d28:	4013      	ands	r3, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d111      	bne.n	8005d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	3b01      	subs	r3, #1
 8005d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d107      	bne.n	8005d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800

08005d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0cc      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d80:	4b68      	ldr	r3, [pc, #416]	; (8005f24 <HAL_RCC_ClockConfig+0x1b8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d90c      	bls.n	8005da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b65      	ldr	r3, [pc, #404]	; (8005f24 <HAL_RCC_ClockConfig+0x1b8>)
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	4b63      	ldr	r3, [pc, #396]	; (8005f24 <HAL_RCC_ClockConfig+0x1b8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0b8      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dc0:	4b59      	ldr	r3, [pc, #356]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4a58      	ldr	r2, [pc, #352]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd8:	4b53      	ldr	r3, [pc, #332]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a52      	ldr	r2, [pc, #328]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de4:	4b50      	ldr	r3, [pc, #320]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	494d      	ldr	r1, [pc, #308]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d044      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d107      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e0a:	4b47      	ldr	r3, [pc, #284]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d119      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e07f      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d003      	beq.n	8005e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d107      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e06f      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3a:	4b3b      	ldr	r3, [pc, #236]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e067      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e4a:	4b37      	ldr	r3, [pc, #220]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f023 0203 	bic.w	r2, r3, #3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4934      	ldr	r1, [pc, #208]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e5c:	f7fd fcf4 	bl	8003848 <HAL_GetTick>
 8005e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e62:	e00a      	b.n	8005e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e64:	f7fd fcf0 	bl	8003848 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e04f      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7a:	4b2b      	ldr	r3, [pc, #172]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 020c 	and.w	r2, r3, #12
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d1eb      	bne.n	8005e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d20c      	bcs.n	8005eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9a:	4b22      	ldr	r3, [pc, #136]	; (8005f24 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea2:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e032      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4916      	ldr	r1, [pc, #88]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	490e      	ldr	r1, [pc, #56]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ef2:	f000 f821 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	490a      	ldr	r1, [pc, #40]	; (8005f2c <HAL_RCC_ClockConfig+0x1c0>)
 8005f04:	5ccb      	ldrb	r3, [r1, r3]
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd fc54 	bl	80037c0 <HAL_InitTick>

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40023c00 	.word	0x40023c00
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	08008b78 	.word	0x08008b78
 8005f30:	20000138 	.word	0x20000138
 8005f34:	2000013c 	.word	0x2000013c

08005f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f3c:	b094      	sub	sp, #80	; 0x50
 8005f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	647b      	str	r3, [r7, #68]	; 0x44
 8005f44:	2300      	movs	r3, #0
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f48:	2300      	movs	r3, #0
 8005f4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f50:	4b79      	ldr	r3, [pc, #484]	; (8006138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 030c 	and.w	r3, r3, #12
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d00d      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0x40>
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	f200 80e1 	bhi.w	8006124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0x34>
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d003      	beq.n	8005f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f6a:	e0db      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f6c:	4b73      	ldr	r3, [pc, #460]	; (800613c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f70:	e0db      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f72:	4b72      	ldr	r3, [pc, #456]	; (800613c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f76:	e0d8      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f78:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f82:	4b6d      	ldr	r3, [pc, #436]	; (8006138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d063      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f8e:	4b6a      	ldr	r3, [pc, #424]	; (8006138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	099b      	lsrs	r3, r3, #6
 8005f94:	2200      	movs	r2, #0
 8005f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005faa:	4622      	mov	r2, r4
 8005fac:	462b      	mov	r3, r5
 8005fae:	f04f 0000 	mov.w	r0, #0
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	0159      	lsls	r1, r3, #5
 8005fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fbc:	0150      	lsls	r0, r2, #5
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	1a51      	subs	r1, r2, r1
 8005fc6:	6139      	str	r1, [r7, #16]
 8005fc8:	4629      	mov	r1, r5
 8005fca:	eb63 0301 	sbc.w	r3, r3, r1
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fdc:	4659      	mov	r1, fp
 8005fde:	018b      	lsls	r3, r1, #6
 8005fe0:	4651      	mov	r1, sl
 8005fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fe6:	4651      	mov	r1, sl
 8005fe8:	018a      	lsls	r2, r1, #6
 8005fea:	4651      	mov	r1, sl
 8005fec:	ebb2 0801 	subs.w	r8, r2, r1
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800600a:	4690      	mov	r8, r2
 800600c:	4699      	mov	r9, r3
 800600e:	4623      	mov	r3, r4
 8006010:	eb18 0303 	adds.w	r3, r8, r3
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	462b      	mov	r3, r5
 8006018:	eb49 0303 	adc.w	r3, r9, r3
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800602a:	4629      	mov	r1, r5
 800602c:	028b      	lsls	r3, r1, #10
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006034:	4621      	mov	r1, r4
 8006036:	028a      	lsls	r2, r1, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603e:	2200      	movs	r2, #0
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
 8006042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006048:	f7fa f922 	bl	8000290 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006054:	e058      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006056:	4b38      	ldr	r3, [pc, #224]	; (8006138 <HAL_RCC_GetSysClockFreq+0x200>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	099b      	lsrs	r3, r3, #6
 800605c:	2200      	movs	r2, #0
 800605e:	4618      	mov	r0, r3
 8006060:	4611      	mov	r1, r2
 8006062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006066:	623b      	str	r3, [r7, #32]
 8006068:	2300      	movs	r3, #0
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
 800606c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	0159      	lsls	r1, r3, #5
 800607e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006082:	0150      	lsls	r0, r2, #5
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4641      	mov	r1, r8
 800608a:	ebb2 0a01 	subs.w	sl, r2, r1
 800608e:	4649      	mov	r1, r9
 8006090:	eb63 0b01 	sbc.w	fp, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060a8:	ebb2 040a 	subs.w	r4, r2, sl
 80060ac:	eb63 050b 	sbc.w	r5, r3, fp
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	00eb      	lsls	r3, r5, #3
 80060ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060be:	00e2      	lsls	r2, r4, #3
 80060c0:	4614      	mov	r4, r2
 80060c2:	461d      	mov	r5, r3
 80060c4:	4643      	mov	r3, r8
 80060c6:	18e3      	adds	r3, r4, r3
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	464b      	mov	r3, r9
 80060cc:	eb45 0303 	adc.w	r3, r5, r3
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060de:	4629      	mov	r1, r5
 80060e0:	028b      	lsls	r3, r1, #10
 80060e2:	4621      	mov	r1, r4
 80060e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060e8:	4621      	mov	r1, r4
 80060ea:	028a      	lsls	r2, r1, #10
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f2:	2200      	movs	r2, #0
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	61fa      	str	r2, [r7, #28]
 80060f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060fc:	f7fa f8c8 	bl	8000290 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4613      	mov	r3, r2
 8006106:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_GetSysClockFreq+0x200>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	3301      	adds	r3, #1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800611a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006122:	e002      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetSysClockFreq+0x204>)
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800612a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800612c:	4618      	mov	r0, r3
 800612e:	3750      	adds	r7, #80	; 0x50
 8006130:	46bd      	mov	sp, r7
 8006132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006136:	bf00      	nop
 8006138:	40023800 	.word	0x40023800
 800613c:	00f42400 	.word	0x00f42400

08006140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <HAL_RCC_GetHCLKFreq+0x14>)
 8006146:	681b      	ldr	r3, [r3, #0]
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000138 	.word	0x20000138

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800615c:	f7ff fff0 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	0a9b      	lsrs	r3, r3, #10
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4903      	ldr	r1, [pc, #12]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	08008b88 	.word	0x08008b88

08006180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e07b      	b.n	800628a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d108      	bne.n	80061ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d009      	beq.n	80061b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	61da      	str	r2, [r3, #28]
 80061aa:	e005      	b.n	80061b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fc fdf0 	bl	8002db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	ea42 0103 	orr.w	r1, r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	f003 0104 	and.w	r1, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0210 	and.w	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006278:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b088      	sub	sp, #32
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_SPI_Transmit+0x22>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e126      	b.n	8006502 <HAL_SPI_Transmit+0x270>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062bc:	f7fd fac4 	bl	8003848 <HAL_GetTick>
 80062c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
 80062d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062d6:	e10b      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Transmit+0x52>
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062e8:	e102      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2203      	movs	r2, #3
 80062ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	d10f      	bne.n	8006352 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006350:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d007      	beq.n	8006370 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006378:	d14b      	bne.n	8006412 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_SPI_Transmit+0xf6>
 8006382:	8afb      	ldrh	r3, [r7, #22]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d13e      	bne.n	8006406 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063ac:	e02b      	b.n	8006406 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d112      	bne.n	80063e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	881a      	ldrh	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	1c9a      	adds	r2, r3, #2
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	86da      	strh	r2, [r3, #54]	; 0x36
 80063e0:	e011      	b.n	8006406 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e2:	f7fd fa31 	bl	8003848 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d803      	bhi.n	80063fa <HAL_SPI_Transmit+0x168>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_Transmit+0x16e>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006404:	e074      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ce      	bne.n	80063ae <HAL_SPI_Transmit+0x11c>
 8006410:	e04c      	b.n	80064ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Transmit+0x18e>
 800641a:	8afb      	ldrh	r3, [r7, #22]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d140      	bne.n	80064a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006446:	e02c      	b.n	80064a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d113      	bne.n	800647e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	86da      	strh	r2, [r3, #54]	; 0x36
 800647c:	e011      	b.n	80064a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647e:	f7fd f9e3 	bl	8003848 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d803      	bhi.n	8006496 <HAL_SPI_Transmit+0x204>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d102      	bne.n	800649c <HAL_SPI_Transmit+0x20a>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064a0:	e026      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1cd      	bne.n	8006448 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fcdd 	bl	8006e70 <SPI_EndRxTxTransaction>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e000      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80064ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006500:	7ffb      	ldrb	r3, [r7, #31]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b088      	sub	sp, #32
 800650e:	af02      	add	r7, sp, #8
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006526:	d112      	bne.n	800654e <HAL_SPI_Receive+0x44>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10e      	bne.n	800654e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2204      	movs	r2, #4
 8006534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f8f1 	bl	800672c <HAL_SPI_TransmitReceive>
 800654a:	4603      	mov	r3, r0
 800654c:	e0ea      	b.n	8006724 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_SPI_Receive+0x52>
 8006558:	2302      	movs	r3, #2
 800655a:	e0e3      	b.n	8006724 <HAL_SPI_Receive+0x21a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006564:	f7fd f970 	bl	8003848 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	75fb      	strb	r3, [r7, #23]
    goto error;
 800657a:	e0ca      	b.n	8006712 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_SPI_Receive+0x7e>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800658c:	e0c1      	b.n	8006712 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2204      	movs	r2, #4
 8006592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d10f      	bne.n	80065f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d007      	beq.n	8006614 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006612:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d162      	bne.n	80066e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800661c:	e02e      	b.n	800667c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d115      	bne.n	8006658 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f103 020c 	add.w	r2, r3, #12
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006656:	e011      	b.n	800667c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006658:	f7fd f8f6 	bl	8003848 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d803      	bhi.n	8006670 <HAL_SPI_Receive+0x166>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d102      	bne.n	8006676 <HAL_SPI_Receive+0x16c>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	75fb      	strb	r3, [r7, #23]
          goto error;
 800667a:	e04a      	b.n	8006712 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cb      	bne.n	800661e <HAL_SPI_Receive+0x114>
 8006686:	e031      	b.n	80066ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d113      	bne.n	80066be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	b292      	uxth	r2, r2
 80066a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066bc:	e011      	b.n	80066e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066be:	f7fd f8c3 	bl	8003848 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d803      	bhi.n	80066d6 <HAL_SPI_Receive+0x1cc>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d102      	bne.n	80066dc <HAL_SPI_Receive+0x1d2>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066e0:	e017      	b.n	8006712 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1cd      	bne.n	8006688 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fb57 	bl	8006da4 <SPI_EndRxTransaction>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
 800670e:	e000      	b.n	8006712 <HAL_SPI_Receive+0x208>
  }

error :
 8006710:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08c      	sub	sp, #48	; 0x30
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800673a:	2301      	movs	r3, #1
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x26>
 800674e:	2302      	movs	r3, #2
 8006750:	e18a      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x33c>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675a:	f7fd f875 	bl	8003848 <HAL_GetTick>
 800675e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006770:	887b      	ldrh	r3, [r7, #2]
 8006772:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006778:	2b01      	cmp	r3, #1
 800677a:	d00f      	beq.n	800679c <HAL_SPI_TransmitReceive+0x70>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d107      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x68>
 800678c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006790:	2b04      	cmp	r3, #4
 8006792:	d003      	beq.n	800679c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006794:	2302      	movs	r3, #2
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800679a:	e15b      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x82>
 80067a8:	887b      	ldrh	r3, [r7, #2]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067b4:	e14e      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d003      	beq.n	80067ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2205      	movs	r2, #5
 80067c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	887a      	ldrh	r2, [r7, #2]
 80067da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	887a      	ldrh	r2, [r7, #2]
 80067f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d007      	beq.n	800681e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d178      	bne.n	800691a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_SPI_TransmitReceive+0x10a>
 8006830:	8b7b      	ldrh	r3, [r7, #26]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d166      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800685a:	e053      	b.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b02      	cmp	r3, #2
 8006868:	d11b      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x176>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d016      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x176>
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d113      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d119      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x1b8>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d014      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	b292      	uxth	r2, r2
 80068c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	1c9a      	adds	r2, r3, #2
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068e4:	f7fc ffb0 	bl	8003848 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d807      	bhi.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d003      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006902:	e0a7      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1a6      	bne.n	800685c <HAL_SPI_TransmitReceive+0x130>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1a1      	bne.n	800685c <HAL_SPI_TransmitReceive+0x130>
 8006918:	e07c      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x1fc>
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d16b      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800694e:	e057      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d11c      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x26c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x26c>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d114      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d119      	bne.n	80069da <HAL_SPI_TransmitReceive+0x2ae>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d014      	beq.n	80069da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069da:	f7fc ff35 	bl	8003848 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d803      	bhi.n	80069f2 <HAL_SPI_TransmitReceive+0x2c6>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x2cc>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069fe:	e029      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1a2      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x224>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d19d      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fa29 	bl	8006e70 <SPI_EndRxTxTransaction>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d006      	beq.n	8006a32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a30:	e010      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	e000      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3730      	adds	r7, #48	; 0x30
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10e      	bne.n	8006ab0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	4798      	blx	r3
    return;
 8006aae:	e0ce      	b.n	8006c4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_SPI_IRQHandler+0x5e>
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
    return;
 8006acc:	e0bf      	b.n	8006c4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <HAL_SPI_IRQHandler+0x7e>
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80b0 	beq.w	8006c4e <HAL_SPI_IRQHandler+0x1de>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80aa 	beq.w	8006c4e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d023      	beq.n	8006b4c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d011      	beq.n	8006b34 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	f043 0204 	orr.w	r2, r3, #4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	e00b      	b.n	8006b4c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	693b      	ldr	r3, [r7, #16]
        return;
 8006b4a:	e080      	b.n	8006c4e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d014      	beq.n	8006b80 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f043 0201 	orr.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00c      	beq.n	8006ba4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	f043 0208 	orr.w	r2, r3, #8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04f      	beq.n	8006c4c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <HAL_SPI_IRQHandler+0x168>
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d034      	beq.n	8006c42 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0203 	bic.w	r2, r2, #3
 8006be6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d011      	beq.n	8006c14 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf4:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <HAL_SPI_IRQHandler+0x1e4>)
 8006bf6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fd fd87 	bl	8004710 <HAL_DMA_Abort_IT>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d016      	beq.n	8006c4a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <HAL_SPI_IRQHandler+0x1e4>)
 8006c22:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fd fd71 	bl	8004710 <HAL_DMA_Abort_IT>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c40:	e003      	b.n	8006c4a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f808 	bl	8006c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c48:	e000      	b.n	8006c4c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006c4a:	bf00      	nop
    return;
 8006c4c:	bf00      	nop
  }
}
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	08006c6d 	.word	0x08006c6d

08006c58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff ffe6 	bl	8006c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ca4:	f7fc fdd0 	bl	8003848 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cb4:	f7fc fdc8 	bl	8003848 <HAL_GetTick>
 8006cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cba:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	015b      	lsls	r3, r3, #5
 8006cc0:	0d1b      	lsrs	r3, r3, #20
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cca:	e054      	b.n	8006d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d050      	beq.n	8006d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cd4:	f7fc fdb8 	bl	8003848 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d902      	bls.n	8006cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d13d      	bne.n	8006d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d02:	d111      	bne.n	8006d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0c:	d004      	beq.n	8006d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d16:	d107      	bne.n	8006d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d30:	d10f      	bne.n	8006d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e017      	b.n	8006d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	bf0c      	ite	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	2300      	movne	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d19b      	bne.n	8006ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000138 	.word	0x20000138

08006da4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db8:	d111      	bne.n	8006dde <SPI_EndRxTransaction+0x3a>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc2:	d004      	beq.n	8006dce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dcc:	d107      	bne.n	8006dde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ddc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de6:	d12a      	bne.n	8006e3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d012      	beq.n	8006e18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2180      	movs	r1, #128	; 0x80
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff ff49 	bl	8006c94 <SPI_WaitFlagStateUntilTimeout>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d02d      	beq.n	8006e64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e026      	b.n	8006e66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2101      	movs	r1, #1
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7ff ff36 	bl	8006c94 <SPI_WaitFlagStateUntilTimeout>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01a      	beq.n	8006e64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	f043 0220 	orr.w	r2, r3, #32
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e013      	b.n	8006e66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	2101      	movs	r1, #1
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff ff23 	bl	8006c94 <SPI_WaitFlagStateUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e58:	f043 0220 	orr.w	r2, r3, #32
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e000      	b.n	8006e66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <SPI_EndRxTxTransaction+0x7c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1b      	ldr	r2, [pc, #108]	; (8006ef0 <SPI_EndRxTxTransaction+0x80>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	0d5b      	lsrs	r3, r3, #21
 8006e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e8c:	fb02 f303 	mul.w	r3, r2, r3
 8006e90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9a:	d112      	bne.n	8006ec2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff fef4 	bl	8006c94 <SPI_WaitFlagStateUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	f043 0220 	orr.w	r2, r3, #32
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e00f      	b.n	8006ee2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d0f2      	beq.n	8006ec2 <SPI_EndRxTxTransaction+0x52>
 8006edc:	e000      	b.n	8006ee0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ede:	bf00      	nop
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000138 	.word	0x20000138
 8006ef0:	165e9f81 	.word	0x165e9f81

08006ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e041      	b.n	8006f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fc fbdc 	bl	80036d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 faf6 	bl	8007524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d001      	beq.n	8006fac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e03c      	b.n	8007026 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	; (8007034 <HAL_TIM_Base_Start+0xa0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_TIM_Base_Start+0x5c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc6:	d013      	beq.n	8006ff0 <HAL_TIM_Base_Start+0x5c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1a      	ldr	r2, [pc, #104]	; (8007038 <HAL_TIM_Base_Start+0xa4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_TIM_Base_Start+0x5c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <HAL_TIM_Base_Start+0xa8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_TIM_Base_Start+0x5c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <HAL_TIM_Base_Start+0xac>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_Base_Start+0x5c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_TIM_Base_Start+0xb0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b06      	cmp	r3, #6
 8007000:	d010      	beq.n	8007024 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007012:	e007      	b.n	8007024 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40014000 	.word	0x40014000

08007048 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e097      	b.n	800718c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fc fae9 	bl	8003648 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f000 fa41 	bl	8007524 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	4313      	orrs	r3, r2
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80070e8:	f023 030c 	bic.w	r3, r3, #12
 80070ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	021b      	lsls	r3, r3, #8
 8007104:	4313      	orrs	r3, r2
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	011a      	lsls	r2, r3, #4
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	031b      	lsls	r3, r3, #12
 8007118:	4313      	orrs	r3, r2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	4313      	orrs	r3, r2
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d110      	bne.n	80071e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d102      	bne.n	80071d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071ca:	7b7b      	ldrb	r3, [r7, #13]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d001      	beq.n	80071d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e069      	b.n	80072a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e4:	e031      	b.n	800724a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d110      	bne.n	800720e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d102      	bne.n	80071f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071f2:	7b3b      	ldrb	r3, [r7, #12]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d001      	beq.n	80071fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e055      	b.n	80072a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800720c:	e01d      	b.n	800724a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d108      	bne.n	8007226 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d105      	bne.n	8007226 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800721a:	7b7b      	ldrb	r3, [r7, #13]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007220:	7b3b      	ldrb	r3, [r7, #12]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e03e      	b.n	80072a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_TIM_Encoder_Start+0xc4>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b04      	cmp	r3, #4
 8007254:	d008      	beq.n	8007268 <HAL_TIM_Encoder_Start+0xd4>
 8007256:	e00f      	b.n	8007278 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	2100      	movs	r1, #0
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f9df 	bl	8007624 <TIM_CCxChannelCmd>
      break;
 8007266:	e016      	b.n	8007296 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2201      	movs	r2, #1
 800726e:	2104      	movs	r1, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f000 f9d7 	bl	8007624 <TIM_CCxChannelCmd>
      break;
 8007276:	e00e      	b.n	8007296 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2201      	movs	r2, #1
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f9cf 	bl	8007624 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2201      	movs	r2, #1
 800728c:	2104      	movs	r1, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f9c8 	bl	8007624 <TIM_CCxChannelCmd>
      break;
 8007294:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0201 	orr.w	r2, r2, #1
 80072a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d122      	bne.n	800730c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d11b      	bne.n	800730c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0202 	mvn.w	r2, #2
 80072dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8f8 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 80072f8:	e005      	b.n	8007306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8ea 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f8fb 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b04      	cmp	r3, #4
 8007318:	d122      	bne.n	8007360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b04      	cmp	r3, #4
 8007326:	d11b      	bne.n	8007360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0204 	mvn.w	r2, #4
 8007330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f8ce 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 800734c:	e005      	b.n	800735a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8c0 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f8d1 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b08      	cmp	r3, #8
 800736c:	d122      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b08      	cmp	r3, #8
 800737a:	d11b      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0208 	mvn.w	r2, #8
 8007384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f8a4 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f896 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8a7 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d122      	bne.n	8007408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d11b      	bne.n	8007408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0210 	mvn.w	r2, #16
 80073d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2208      	movs	r2, #8
 80073de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f87a 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 80073f4:	e005      	b.n	8007402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f86c 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f87d 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b01      	cmp	r3, #1
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b01      	cmp	r3, #1
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0201 	mvn.w	r2, #1
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f846 	bl	80074c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f980 	bl	8007760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d10e      	bne.n	800748c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d107      	bne.n	800748c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f842 	bl	8007510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b20      	cmp	r3, #32
 8007498:	d10e      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d107      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0220 	mvn.w	r2, #32
 80074b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f94a 	bl	800774c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a34      	ldr	r2, [pc, #208]	; (8007608 <TIM_Base_SetConfig+0xe4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00f      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d00b      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a31      	ldr	r2, [pc, #196]	; (800760c <TIM_Base_SetConfig+0xe8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d007      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a30      	ldr	r2, [pc, #192]	; (8007610 <TIM_Base_SetConfig+0xec>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a2f      	ldr	r2, [pc, #188]	; (8007614 <TIM_Base_SetConfig+0xf0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d108      	bne.n	800756e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a25      	ldr	r2, [pc, #148]	; (8007608 <TIM_Base_SetConfig+0xe4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01b      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757c:	d017      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a22      	ldr	r2, [pc, #136]	; (800760c <TIM_Base_SetConfig+0xe8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a21      	ldr	r2, [pc, #132]	; (8007610 <TIM_Base_SetConfig+0xec>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00f      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <TIM_Base_SetConfig+0xf0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <TIM_Base_SetConfig+0xf4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1e      	ldr	r2, [pc, #120]	; (800761c <TIM_Base_SetConfig+0xf8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1d      	ldr	r2, [pc, #116]	; (8007620 <TIM_Base_SetConfig+0xfc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a08      	ldr	r2, [pc, #32]	; (8007608 <TIM_Base_SetConfig+0xe4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d103      	bne.n	80075f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	615a      	str	r2, [r3, #20]
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40010000 	.word	0x40010000
 800760c:	40000400 	.word	0x40000400
 8007610:	40000800 	.word	0x40000800
 8007614:	40000c00 	.word	0x40000c00
 8007618:	40014000 	.word	0x40014000
 800761c:	40014400 	.word	0x40014400
 8007620:	40014800 	.word	0x40014800

08007624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2201      	movs	r2, #1
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1a      	ldr	r2, [r3, #32]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	43db      	mvns	r3, r3
 8007646:	401a      	ands	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	fa01 f303 	lsl.w	r3, r1, r3
 800765c:	431a      	orrs	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007684:	2302      	movs	r3, #2
 8007686:	e050      	b.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d018      	beq.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d4:	d013      	beq.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00e      	beq.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d009      	beq.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a15      	ldr	r2, [pc, #84]	; (8007744 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d10c      	bne.n	8007718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	4313      	orrs	r3, r2
 800770e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	40014000 	.word	0x40014000

0800774c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <std>:
 8007774:	2300      	movs	r3, #0
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	e9c0 3300 	strd	r3, r3, [r0]
 800777e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	8181      	strh	r1, [r0, #12]
 8007786:	6643      	str	r3, [r0, #100]	; 0x64
 8007788:	81c2      	strh	r2, [r0, #14]
 800778a:	6183      	str	r3, [r0, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	2208      	movs	r2, #8
 8007790:	305c      	adds	r0, #92	; 0x5c
 8007792:	f000 fa05 	bl	8007ba0 <memset>
 8007796:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <std+0x58>)
 8007798:	6263      	str	r3, [r4, #36]	; 0x24
 800779a:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <std+0x5c>)
 800779c:	62a3      	str	r3, [r4, #40]	; 0x28
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <std+0x60>)
 80077a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a2:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <std+0x64>)
 80077a4:	6323      	str	r3, [r4, #48]	; 0x30
 80077a6:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <std+0x68>)
 80077a8:	6224      	str	r4, [r4, #32]
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d006      	beq.n	80077bc <std+0x48>
 80077ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077b2:	4294      	cmp	r4, r2
 80077b4:	d002      	beq.n	80077bc <std+0x48>
 80077b6:	33d0      	adds	r3, #208	; 0xd0
 80077b8:	429c      	cmp	r4, r3
 80077ba:	d105      	bne.n	80077c8 <std+0x54>
 80077bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f000 ba64 	b.w	8007c90 <__retarget_lock_init_recursive>
 80077c8:	bd10      	pop	{r4, pc}
 80077ca:	bf00      	nop
 80077cc:	080079f1 	.word	0x080079f1
 80077d0:	08007a13 	.word	0x08007a13
 80077d4:	08007a4b 	.word	0x08007a4b
 80077d8:	08007a6f 	.word	0x08007a6f
 80077dc:	200009d0 	.word	0x200009d0

080077e0 <stdio_exit_handler>:
 80077e0:	4a02      	ldr	r2, [pc, #8]	; (80077ec <stdio_exit_handler+0xc>)
 80077e2:	4903      	ldr	r1, [pc, #12]	; (80077f0 <stdio_exit_handler+0x10>)
 80077e4:	4803      	ldr	r0, [pc, #12]	; (80077f4 <stdio_exit_handler+0x14>)
 80077e6:	f000 b869 	b.w	80078bc <_fwalk_sglue>
 80077ea:	bf00      	nop
 80077ec:	20000144 	.word	0x20000144
 80077f0:	08008565 	.word	0x08008565
 80077f4:	20000150 	.word	0x20000150

080077f8 <cleanup_stdio>:
 80077f8:	6841      	ldr	r1, [r0, #4]
 80077fa:	4b0c      	ldr	r3, [pc, #48]	; (800782c <cleanup_stdio+0x34>)
 80077fc:	4299      	cmp	r1, r3
 80077fe:	b510      	push	{r4, lr}
 8007800:	4604      	mov	r4, r0
 8007802:	d001      	beq.n	8007808 <cleanup_stdio+0x10>
 8007804:	f000 feae 	bl	8008564 <_fflush_r>
 8007808:	68a1      	ldr	r1, [r4, #8]
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <cleanup_stdio+0x38>)
 800780c:	4299      	cmp	r1, r3
 800780e:	d002      	beq.n	8007816 <cleanup_stdio+0x1e>
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fea7 	bl	8008564 <_fflush_r>
 8007816:	68e1      	ldr	r1, [r4, #12]
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <cleanup_stdio+0x3c>)
 800781a:	4299      	cmp	r1, r3
 800781c:	d004      	beq.n	8007828 <cleanup_stdio+0x30>
 800781e:	4620      	mov	r0, r4
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f000 be9e 	b.w	8008564 <_fflush_r>
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	200009d0 	.word	0x200009d0
 8007830:	20000a38 	.word	0x20000a38
 8007834:	20000aa0 	.word	0x20000aa0

08007838 <global_stdio_init.part.0>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <global_stdio_init.part.0+0x30>)
 800783c:	4c0b      	ldr	r4, [pc, #44]	; (800786c <global_stdio_init.part.0+0x34>)
 800783e:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <global_stdio_init.part.0+0x38>)
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	4620      	mov	r0, r4
 8007844:	2200      	movs	r2, #0
 8007846:	2104      	movs	r1, #4
 8007848:	f7ff ff94 	bl	8007774 <std>
 800784c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007850:	2201      	movs	r2, #1
 8007852:	2109      	movs	r1, #9
 8007854:	f7ff ff8e 	bl	8007774 <std>
 8007858:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800785c:	2202      	movs	r2, #2
 800785e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007862:	2112      	movs	r1, #18
 8007864:	f7ff bf86 	b.w	8007774 <std>
 8007868:	20000b08 	.word	0x20000b08
 800786c:	200009d0 	.word	0x200009d0
 8007870:	080077e1 	.word	0x080077e1

08007874 <__sfp_lock_acquire>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__sfp_lock_acquire+0x8>)
 8007876:	f000 ba0c 	b.w	8007c92 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	20000b11 	.word	0x20000b11

08007880 <__sfp_lock_release>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_release+0x8>)
 8007882:	f000 ba07 	b.w	8007c94 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	20000b11 	.word	0x20000b11

0800788c <__sinit>:
 800788c:	b510      	push	{r4, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	f7ff fff0 	bl	8007874 <__sfp_lock_acquire>
 8007894:	6a23      	ldr	r3, [r4, #32]
 8007896:	b11b      	cbz	r3, 80078a0 <__sinit+0x14>
 8007898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800789c:	f7ff bff0 	b.w	8007880 <__sfp_lock_release>
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <__sinit+0x28>)
 80078a2:	6223      	str	r3, [r4, #32]
 80078a4:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <__sinit+0x2c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <__sinit+0xc>
 80078ac:	f7ff ffc4 	bl	8007838 <global_stdio_init.part.0>
 80078b0:	e7f2      	b.n	8007898 <__sinit+0xc>
 80078b2:	bf00      	nop
 80078b4:	080077f9 	.word	0x080077f9
 80078b8:	20000b08 	.word	0x20000b08

080078bc <_fwalk_sglue>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	4607      	mov	r7, r0
 80078c2:	4688      	mov	r8, r1
 80078c4:	4614      	mov	r4, r2
 80078c6:	2600      	movs	r6, #0
 80078c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078cc:	f1b9 0901 	subs.w	r9, r9, #1
 80078d0:	d505      	bpl.n	80078de <_fwalk_sglue+0x22>
 80078d2:	6824      	ldr	r4, [r4, #0]
 80078d4:	2c00      	cmp	r4, #0
 80078d6:	d1f7      	bne.n	80078c8 <_fwalk_sglue+0xc>
 80078d8:	4630      	mov	r0, r6
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d907      	bls.n	80078f4 <_fwalk_sglue+0x38>
 80078e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e8:	3301      	adds	r3, #1
 80078ea:	d003      	beq.n	80078f4 <_fwalk_sglue+0x38>
 80078ec:	4629      	mov	r1, r5
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c0      	blx	r8
 80078f2:	4306      	orrs	r6, r0
 80078f4:	3568      	adds	r5, #104	; 0x68
 80078f6:	e7e9      	b.n	80078cc <_fwalk_sglue+0x10>

080078f8 <_puts_r>:
 80078f8:	6a03      	ldr	r3, [r0, #32]
 80078fa:	b570      	push	{r4, r5, r6, lr}
 80078fc:	6884      	ldr	r4, [r0, #8]
 80078fe:	4605      	mov	r5, r0
 8007900:	460e      	mov	r6, r1
 8007902:	b90b      	cbnz	r3, 8007908 <_puts_r+0x10>
 8007904:	f7ff ffc2 	bl	800788c <__sinit>
 8007908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800790a:	07db      	lsls	r3, r3, #31
 800790c:	d405      	bmi.n	800791a <_puts_r+0x22>
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	0598      	lsls	r0, r3, #22
 8007912:	d402      	bmi.n	800791a <_puts_r+0x22>
 8007914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007916:	f000 f9bc 	bl	8007c92 <__retarget_lock_acquire_recursive>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	0719      	lsls	r1, r3, #28
 800791e:	d513      	bpl.n	8007948 <_puts_r+0x50>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	b18b      	cbz	r3, 8007948 <_puts_r+0x50>
 8007924:	3e01      	subs	r6, #1
 8007926:	68a3      	ldr	r3, [r4, #8]
 8007928:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800792c:	3b01      	subs	r3, #1
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	b9e9      	cbnz	r1, 800796e <_puts_r+0x76>
 8007932:	2b00      	cmp	r3, #0
 8007934:	da2e      	bge.n	8007994 <_puts_r+0x9c>
 8007936:	4622      	mov	r2, r4
 8007938:	210a      	movs	r1, #10
 800793a:	4628      	mov	r0, r5
 800793c:	f000 f89b 	bl	8007a76 <__swbuf_r>
 8007940:	3001      	adds	r0, #1
 8007942:	d007      	beq.n	8007954 <_puts_r+0x5c>
 8007944:	250a      	movs	r5, #10
 8007946:	e007      	b.n	8007958 <_puts_r+0x60>
 8007948:	4621      	mov	r1, r4
 800794a:	4628      	mov	r0, r5
 800794c:	f000 f8d0 	bl	8007af0 <__swsetup_r>
 8007950:	2800      	cmp	r0, #0
 8007952:	d0e7      	beq.n	8007924 <_puts_r+0x2c>
 8007954:	f04f 35ff 	mov.w	r5, #4294967295
 8007958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800795a:	07da      	lsls	r2, r3, #31
 800795c:	d405      	bmi.n	800796a <_puts_r+0x72>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	059b      	lsls	r3, r3, #22
 8007962:	d402      	bmi.n	800796a <_puts_r+0x72>
 8007964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007966:	f000 f995 	bl	8007c94 <__retarget_lock_release_recursive>
 800796a:	4628      	mov	r0, r5
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	2b00      	cmp	r3, #0
 8007970:	da04      	bge.n	800797c <_puts_r+0x84>
 8007972:	69a2      	ldr	r2, [r4, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	dc06      	bgt.n	8007986 <_puts_r+0x8e>
 8007978:	290a      	cmp	r1, #10
 800797a:	d004      	beq.n	8007986 <_puts_r+0x8e>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	6022      	str	r2, [r4, #0]
 8007982:	7019      	strb	r1, [r3, #0]
 8007984:	e7cf      	b.n	8007926 <_puts_r+0x2e>
 8007986:	4622      	mov	r2, r4
 8007988:	4628      	mov	r0, r5
 800798a:	f000 f874 	bl	8007a76 <__swbuf_r>
 800798e:	3001      	adds	r0, #1
 8007990:	d1c9      	bne.n	8007926 <_puts_r+0x2e>
 8007992:	e7df      	b.n	8007954 <_puts_r+0x5c>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	250a      	movs	r5, #10
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	6022      	str	r2, [r4, #0]
 800799c:	701d      	strb	r5, [r3, #0]
 800799e:	e7db      	b.n	8007958 <_puts_r+0x60>

080079a0 <puts>:
 80079a0:	4b02      	ldr	r3, [pc, #8]	; (80079ac <puts+0xc>)
 80079a2:	4601      	mov	r1, r0
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	f7ff bfa7 	b.w	80078f8 <_puts_r>
 80079aa:	bf00      	nop
 80079ac:	2000019c 	.word	0x2000019c

080079b0 <siprintf>:
 80079b0:	b40e      	push	{r1, r2, r3}
 80079b2:	b500      	push	{lr}
 80079b4:	b09c      	sub	sp, #112	; 0x70
 80079b6:	ab1d      	add	r3, sp, #116	; 0x74
 80079b8:	9002      	str	r0, [sp, #8]
 80079ba:	9006      	str	r0, [sp, #24]
 80079bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079c0:	4809      	ldr	r0, [pc, #36]	; (80079e8 <siprintf+0x38>)
 80079c2:	9107      	str	r1, [sp, #28]
 80079c4:	9104      	str	r1, [sp, #16]
 80079c6:	4909      	ldr	r1, [pc, #36]	; (80079ec <siprintf+0x3c>)
 80079c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079cc:	9105      	str	r1, [sp, #20]
 80079ce:	6800      	ldr	r0, [r0, #0]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	a902      	add	r1, sp, #8
 80079d4:	f000 fab2 	bl	8007f3c <_svfiprintf_r>
 80079d8:	9b02      	ldr	r3, [sp, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	b01c      	add	sp, #112	; 0x70
 80079e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e4:	b003      	add	sp, #12
 80079e6:	4770      	bx	lr
 80079e8:	2000019c 	.word	0x2000019c
 80079ec:	ffff0208 	.word	0xffff0208

080079f0 <__sread>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	f000 f8fc 	bl	8007bf4 <_read_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	bfab      	itete	ge
 8007a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a02:	89a3      	ldrhlt	r3, [r4, #12]
 8007a04:	181b      	addge	r3, r3, r0
 8007a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a0a:	bfac      	ite	ge
 8007a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a0e:	81a3      	strhlt	r3, [r4, #12]
 8007a10:	bd10      	pop	{r4, pc}

08007a12 <__swrite>:
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	461f      	mov	r7, r3
 8007a18:	898b      	ldrh	r3, [r1, #12]
 8007a1a:	05db      	lsls	r3, r3, #23
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4616      	mov	r6, r2
 8007a22:	d505      	bpl.n	8007a30 <__swrite+0x1e>
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2302      	movs	r3, #2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f000 f8d0 	bl	8007bd0 <_lseek_r>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a46:	f000 b8e7 	b.w	8007c18 <_write_r>

08007a4a <__sseek>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a52:	f000 f8bd 	bl	8007bd0 <_lseek_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	bf15      	itete	ne
 8007a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a66:	81a3      	strheq	r3, [r4, #12]
 8007a68:	bf18      	it	ne
 8007a6a:	81a3      	strhne	r3, [r4, #12]
 8007a6c:	bd10      	pop	{r4, pc}

08007a6e <__sclose>:
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 b89d 	b.w	8007bb0 <_close_r>

08007a76 <__swbuf_r>:
 8007a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a78:	460e      	mov	r6, r1
 8007a7a:	4614      	mov	r4, r2
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	b118      	cbz	r0, 8007a88 <__swbuf_r+0x12>
 8007a80:	6a03      	ldr	r3, [r0, #32]
 8007a82:	b90b      	cbnz	r3, 8007a88 <__swbuf_r+0x12>
 8007a84:	f7ff ff02 	bl	800788c <__sinit>
 8007a88:	69a3      	ldr	r3, [r4, #24]
 8007a8a:	60a3      	str	r3, [r4, #8]
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	071a      	lsls	r2, r3, #28
 8007a90:	d525      	bpl.n	8007ade <__swbuf_r+0x68>
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	b31b      	cbz	r3, 8007ade <__swbuf_r+0x68>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	6922      	ldr	r2, [r4, #16]
 8007a9a:	1a98      	subs	r0, r3, r2
 8007a9c:	6963      	ldr	r3, [r4, #20]
 8007a9e:	b2f6      	uxtb	r6, r6
 8007aa0:	4283      	cmp	r3, r0
 8007aa2:	4637      	mov	r7, r6
 8007aa4:	dc04      	bgt.n	8007ab0 <__swbuf_r+0x3a>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f000 fd5b 	bl	8008564 <_fflush_r>
 8007aae:	b9e0      	cbnz	r0, 8007aea <__swbuf_r+0x74>
 8007ab0:	68a3      	ldr	r3, [r4, #8]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	60a3      	str	r3, [r4, #8]
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	6022      	str	r2, [r4, #0]
 8007abc:	701e      	strb	r6, [r3, #0]
 8007abe:	6962      	ldr	r2, [r4, #20]
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d004      	beq.n	8007ad0 <__swbuf_r+0x5a>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	07db      	lsls	r3, r3, #31
 8007aca:	d506      	bpl.n	8007ada <__swbuf_r+0x64>
 8007acc:	2e0a      	cmp	r6, #10
 8007ace:	d104      	bne.n	8007ada <__swbuf_r+0x64>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 fd46 	bl	8008564 <_fflush_r>
 8007ad8:	b938      	cbnz	r0, 8007aea <__swbuf_r+0x74>
 8007ada:	4638      	mov	r0, r7
 8007adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 f805 	bl	8007af0 <__swsetup_r>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d0d5      	beq.n	8007a96 <__swbuf_r+0x20>
 8007aea:	f04f 37ff 	mov.w	r7, #4294967295
 8007aee:	e7f4      	b.n	8007ada <__swbuf_r+0x64>

08007af0 <__swsetup_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <__swsetup_r+0xac>)
 8007af4:	4605      	mov	r5, r0
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	460c      	mov	r4, r1
 8007afa:	b118      	cbz	r0, 8007b04 <__swsetup_r+0x14>
 8007afc:	6a03      	ldr	r3, [r0, #32]
 8007afe:	b90b      	cbnz	r3, 8007b04 <__swsetup_r+0x14>
 8007b00:	f7ff fec4 	bl	800788c <__sinit>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b0a:	0718      	lsls	r0, r3, #28
 8007b0c:	d422      	bmi.n	8007b54 <__swsetup_r+0x64>
 8007b0e:	06d9      	lsls	r1, r3, #27
 8007b10:	d407      	bmi.n	8007b22 <__swsetup_r+0x32>
 8007b12:	2309      	movs	r3, #9
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	e034      	b.n	8007b8c <__swsetup_r+0x9c>
 8007b22:	0758      	lsls	r0, r3, #29
 8007b24:	d512      	bpl.n	8007b4c <__swsetup_r+0x5c>
 8007b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b28:	b141      	cbz	r1, 8007b3c <__swsetup_r+0x4c>
 8007b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d002      	beq.n	8007b38 <__swsetup_r+0x48>
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f8b0 	bl	8007c98 <_free_r>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	2300      	movs	r3, #0
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f043 0308 	orr.w	r3, r3, #8
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b94b      	cbnz	r3, 8007b6c <__swsetup_r+0x7c>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b62:	d003      	beq.n	8007b6c <__swsetup_r+0x7c>
 8007b64:	4621      	mov	r1, r4
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 fd4a 	bl	8008600 <__smakebuf_r>
 8007b6c:	89a0      	ldrh	r0, [r4, #12]
 8007b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b72:	f010 0301 	ands.w	r3, r0, #1
 8007b76:	d00a      	beq.n	8007b8e <__swsetup_r+0x9e>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60a3      	str	r3, [r4, #8]
 8007b7c:	6963      	ldr	r3, [r4, #20]
 8007b7e:	425b      	negs	r3, r3
 8007b80:	61a3      	str	r3, [r4, #24]
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	b943      	cbnz	r3, 8007b98 <__swsetup_r+0xa8>
 8007b86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b8a:	d1c4      	bne.n	8007b16 <__swsetup_r+0x26>
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}
 8007b8e:	0781      	lsls	r1, r0, #30
 8007b90:	bf58      	it	pl
 8007b92:	6963      	ldrpl	r3, [r4, #20]
 8007b94:	60a3      	str	r3, [r4, #8]
 8007b96:	e7f4      	b.n	8007b82 <__swsetup_r+0x92>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e7f7      	b.n	8007b8c <__swsetup_r+0x9c>
 8007b9c:	2000019c 	.word	0x2000019c

08007ba0 <memset>:
 8007ba0:	4402      	add	r2, r0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d100      	bne.n	8007baa <memset+0xa>
 8007ba8:	4770      	bx	lr
 8007baa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bae:	e7f9      	b.n	8007ba4 <memset+0x4>

08007bb0 <_close_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d06      	ldr	r5, [pc, #24]	; (8007bcc <_close_r+0x1c>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7fb fc4f 	bl	800345e <_close>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_close_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_close_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20000b0c 	.word	0x20000b0c

08007bd0 <_lseek_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_lseek_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7fb fc64 	bl	80034ac <_lseek>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_lseek_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_lseek_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20000b0c 	.word	0x20000b0c

08007bf4 <_read_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	; (8007c14 <_read_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7fb fbf2 	bl	80033ec <_read>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_read_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_read_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000b0c 	.word	0x20000b0c

08007c18 <_write_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_write_r+0x20>)
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7fb fbfd 	bl	8003426 <_write>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_write_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_write_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	20000b0c 	.word	0x20000b0c

08007c3c <__errno>:
 8007c3c:	4b01      	ldr	r3, [pc, #4]	; (8007c44 <__errno+0x8>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	2000019c 	.word	0x2000019c

08007c48 <__libc_init_array>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4d0d      	ldr	r5, [pc, #52]	; (8007c80 <__libc_init_array+0x38>)
 8007c4c:	4c0d      	ldr	r4, [pc, #52]	; (8007c84 <__libc_init_array+0x3c>)
 8007c4e:	1b64      	subs	r4, r4, r5
 8007c50:	10a4      	asrs	r4, r4, #2
 8007c52:	2600      	movs	r6, #0
 8007c54:	42a6      	cmp	r6, r4
 8007c56:	d109      	bne.n	8007c6c <__libc_init_array+0x24>
 8007c58:	4d0b      	ldr	r5, [pc, #44]	; (8007c88 <__libc_init_array+0x40>)
 8007c5a:	4c0c      	ldr	r4, [pc, #48]	; (8007c8c <__libc_init_array+0x44>)
 8007c5c:	f000 fd9e 	bl	800879c <_init>
 8007c60:	1b64      	subs	r4, r4, r5
 8007c62:	10a4      	asrs	r4, r4, #2
 8007c64:	2600      	movs	r6, #0
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	d105      	bne.n	8007c76 <__libc_init_array+0x2e>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c70:	4798      	blx	r3
 8007c72:	3601      	adds	r6, #1
 8007c74:	e7ee      	b.n	8007c54 <__libc_init_array+0xc>
 8007c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7a:	4798      	blx	r3
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	e7f2      	b.n	8007c66 <__libc_init_array+0x1e>
 8007c80:	08008bd4 	.word	0x08008bd4
 8007c84:	08008bd4 	.word	0x08008bd4
 8007c88:	08008bd4 	.word	0x08008bd4
 8007c8c:	08008bd8 	.word	0x08008bd8

08007c90 <__retarget_lock_init_recursive>:
 8007c90:	4770      	bx	lr

08007c92 <__retarget_lock_acquire_recursive>:
 8007c92:	4770      	bx	lr

08007c94 <__retarget_lock_release_recursive>:
 8007c94:	4770      	bx	lr
	...

08007c98 <_free_r>:
 8007c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	d044      	beq.n	8007d28 <_free_r+0x90>
 8007c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca2:	9001      	str	r0, [sp, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8007caa:	bfb8      	it	lt
 8007cac:	18e4      	addlt	r4, r4, r3
 8007cae:	f000 f8df 	bl	8007e70 <__malloc_lock>
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <_free_r+0x94>)
 8007cb4:	9801      	ldr	r0, [sp, #4]
 8007cb6:	6813      	ldr	r3, [r2, #0]
 8007cb8:	b933      	cbnz	r3, 8007cc8 <_free_r+0x30>
 8007cba:	6063      	str	r3, [r4, #4]
 8007cbc:	6014      	str	r4, [r2, #0]
 8007cbe:	b003      	add	sp, #12
 8007cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cc4:	f000 b8da 	b.w	8007e7c <__malloc_unlock>
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	d908      	bls.n	8007cde <_free_r+0x46>
 8007ccc:	6825      	ldr	r5, [r4, #0]
 8007cce:	1961      	adds	r1, r4, r5
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf01      	itttt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	1949      	addeq	r1, r1, r5
 8007cda:	6021      	streq	r1, [r4, #0]
 8007cdc:	e7ed      	b.n	8007cba <_free_r+0x22>
 8007cde:	461a      	mov	r2, r3
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	b10b      	cbz	r3, 8007ce8 <_free_r+0x50>
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d9fa      	bls.n	8007cde <_free_r+0x46>
 8007ce8:	6811      	ldr	r1, [r2, #0]
 8007cea:	1855      	adds	r5, r2, r1
 8007cec:	42a5      	cmp	r5, r4
 8007cee:	d10b      	bne.n	8007d08 <_free_r+0x70>
 8007cf0:	6824      	ldr	r4, [r4, #0]
 8007cf2:	4421      	add	r1, r4
 8007cf4:	1854      	adds	r4, r2, r1
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	6011      	str	r1, [r2, #0]
 8007cfa:	d1e0      	bne.n	8007cbe <_free_r+0x26>
 8007cfc:	681c      	ldr	r4, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	6053      	str	r3, [r2, #4]
 8007d02:	440c      	add	r4, r1
 8007d04:	6014      	str	r4, [r2, #0]
 8007d06:	e7da      	b.n	8007cbe <_free_r+0x26>
 8007d08:	d902      	bls.n	8007d10 <_free_r+0x78>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6003      	str	r3, [r0, #0]
 8007d0e:	e7d6      	b.n	8007cbe <_free_r+0x26>
 8007d10:	6825      	ldr	r5, [r4, #0]
 8007d12:	1961      	adds	r1, r4, r5
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf04      	itt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	bf04      	itt	eq
 8007d20:	1949      	addeq	r1, r1, r5
 8007d22:	6021      	streq	r1, [r4, #0]
 8007d24:	6054      	str	r4, [r2, #4]
 8007d26:	e7ca      	b.n	8007cbe <_free_r+0x26>
 8007d28:	b003      	add	sp, #12
 8007d2a:	bd30      	pop	{r4, r5, pc}
 8007d2c:	20000b14 	.word	0x20000b14

08007d30 <sbrk_aligned>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4e0e      	ldr	r6, [pc, #56]	; (8007d6c <sbrk_aligned+0x3c>)
 8007d34:	460c      	mov	r4, r1
 8007d36:	6831      	ldr	r1, [r6, #0]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b911      	cbnz	r1, 8007d42 <sbrk_aligned+0x12>
 8007d3c:	f000 fcd8 	bl	80086f0 <_sbrk_r>
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 fcd3 	bl	80086f0 <_sbrk_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d00a      	beq.n	8007d64 <sbrk_aligned+0x34>
 8007d4e:	1cc4      	adds	r4, r0, #3
 8007d50:	f024 0403 	bic.w	r4, r4, #3
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d007      	beq.n	8007d68 <sbrk_aligned+0x38>
 8007d58:	1a21      	subs	r1, r4, r0
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 fcc8 	bl	80086f0 <_sbrk_r>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d101      	bne.n	8007d68 <sbrk_aligned+0x38>
 8007d64:	f04f 34ff 	mov.w	r4, #4294967295
 8007d68:	4620      	mov	r0, r4
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	20000b18 	.word	0x20000b18

08007d70 <_malloc_r>:
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	1ccd      	adds	r5, r1, #3
 8007d76:	f025 0503 	bic.w	r5, r5, #3
 8007d7a:	3508      	adds	r5, #8
 8007d7c:	2d0c      	cmp	r5, #12
 8007d7e:	bf38      	it	cc
 8007d80:	250c      	movcc	r5, #12
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	4607      	mov	r7, r0
 8007d86:	db01      	blt.n	8007d8c <_malloc_r+0x1c>
 8007d88:	42a9      	cmp	r1, r5
 8007d8a:	d905      	bls.n	8007d98 <_malloc_r+0x28>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	2600      	movs	r6, #0
 8007d92:	4630      	mov	r0, r6
 8007d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e6c <_malloc_r+0xfc>
 8007d9c:	f000 f868 	bl	8007e70 <__malloc_lock>
 8007da0:	f8d8 3000 	ldr.w	r3, [r8]
 8007da4:	461c      	mov	r4, r3
 8007da6:	bb5c      	cbnz	r4, 8007e00 <_malloc_r+0x90>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4638      	mov	r0, r7
 8007dac:	f7ff ffc0 	bl	8007d30 <sbrk_aligned>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	4604      	mov	r4, r0
 8007db4:	d155      	bne.n	8007e62 <_malloc_r+0xf2>
 8007db6:	f8d8 4000 	ldr.w	r4, [r8]
 8007dba:	4626      	mov	r6, r4
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	d145      	bne.n	8007e4c <_malloc_r+0xdc>
 8007dc0:	2c00      	cmp	r4, #0
 8007dc2:	d048      	beq.n	8007e56 <_malloc_r+0xe6>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4638      	mov	r0, r7
 8007dca:	eb04 0903 	add.w	r9, r4, r3
 8007dce:	f000 fc8f 	bl	80086f0 <_sbrk_r>
 8007dd2:	4581      	cmp	r9, r0
 8007dd4:	d13f      	bne.n	8007e56 <_malloc_r+0xe6>
 8007dd6:	6821      	ldr	r1, [r4, #0]
 8007dd8:	1a6d      	subs	r5, r5, r1
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff ffa7 	bl	8007d30 <sbrk_aligned>
 8007de2:	3001      	adds	r0, #1
 8007de4:	d037      	beq.n	8007e56 <_malloc_r+0xe6>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	442b      	add	r3, r5
 8007dea:	6023      	str	r3, [r4, #0]
 8007dec:	f8d8 3000 	ldr.w	r3, [r8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d038      	beq.n	8007e66 <_malloc_r+0xf6>
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	42a2      	cmp	r2, r4
 8007df8:	d12b      	bne.n	8007e52 <_malloc_r+0xe2>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
 8007dfe:	e00f      	b.n	8007e20 <_malloc_r+0xb0>
 8007e00:	6822      	ldr	r2, [r4, #0]
 8007e02:	1b52      	subs	r2, r2, r5
 8007e04:	d41f      	bmi.n	8007e46 <_malloc_r+0xd6>
 8007e06:	2a0b      	cmp	r2, #11
 8007e08:	d917      	bls.n	8007e3a <_malloc_r+0xca>
 8007e0a:	1961      	adds	r1, r4, r5
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	6025      	str	r5, [r4, #0]
 8007e10:	bf18      	it	ne
 8007e12:	6059      	strne	r1, [r3, #4]
 8007e14:	6863      	ldr	r3, [r4, #4]
 8007e16:	bf08      	it	eq
 8007e18:	f8c8 1000 	streq.w	r1, [r8]
 8007e1c:	5162      	str	r2, [r4, r5]
 8007e1e:	604b      	str	r3, [r1, #4]
 8007e20:	4638      	mov	r0, r7
 8007e22:	f104 060b 	add.w	r6, r4, #11
 8007e26:	f000 f829 	bl	8007e7c <__malloc_unlock>
 8007e2a:	f026 0607 	bic.w	r6, r6, #7
 8007e2e:	1d23      	adds	r3, r4, #4
 8007e30:	1af2      	subs	r2, r6, r3
 8007e32:	d0ae      	beq.n	8007d92 <_malloc_r+0x22>
 8007e34:	1b9b      	subs	r3, r3, r6
 8007e36:	50a3      	str	r3, [r4, r2]
 8007e38:	e7ab      	b.n	8007d92 <_malloc_r+0x22>
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	6862      	ldr	r2, [r4, #4]
 8007e3e:	d1dd      	bne.n	8007dfc <_malloc_r+0x8c>
 8007e40:	f8c8 2000 	str.w	r2, [r8]
 8007e44:	e7ec      	b.n	8007e20 <_malloc_r+0xb0>
 8007e46:	4623      	mov	r3, r4
 8007e48:	6864      	ldr	r4, [r4, #4]
 8007e4a:	e7ac      	b.n	8007da6 <_malloc_r+0x36>
 8007e4c:	4634      	mov	r4, r6
 8007e4e:	6876      	ldr	r6, [r6, #4]
 8007e50:	e7b4      	b.n	8007dbc <_malloc_r+0x4c>
 8007e52:	4613      	mov	r3, r2
 8007e54:	e7cc      	b.n	8007df0 <_malloc_r+0x80>
 8007e56:	230c      	movs	r3, #12
 8007e58:	603b      	str	r3, [r7, #0]
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f000 f80e 	bl	8007e7c <__malloc_unlock>
 8007e60:	e797      	b.n	8007d92 <_malloc_r+0x22>
 8007e62:	6025      	str	r5, [r4, #0]
 8007e64:	e7dc      	b.n	8007e20 <_malloc_r+0xb0>
 8007e66:	605b      	str	r3, [r3, #4]
 8007e68:	deff      	udf	#255	; 0xff
 8007e6a:	bf00      	nop
 8007e6c:	20000b14 	.word	0x20000b14

08007e70 <__malloc_lock>:
 8007e70:	4801      	ldr	r0, [pc, #4]	; (8007e78 <__malloc_lock+0x8>)
 8007e72:	f7ff bf0e 	b.w	8007c92 <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	20000b10 	.word	0x20000b10

08007e7c <__malloc_unlock>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__malloc_unlock+0x8>)
 8007e7e:	f7ff bf09 	b.w	8007c94 <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	20000b10 	.word	0x20000b10

08007e88 <__ssputs_r>:
 8007e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	688e      	ldr	r6, [r1, #8]
 8007e8e:	461f      	mov	r7, r3
 8007e90:	42be      	cmp	r6, r7
 8007e92:	680b      	ldr	r3, [r1, #0]
 8007e94:	4682      	mov	sl, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	4690      	mov	r8, r2
 8007e9a:	d82c      	bhi.n	8007ef6 <__ssputs_r+0x6e>
 8007e9c:	898a      	ldrh	r2, [r1, #12]
 8007e9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ea2:	d026      	beq.n	8007ef2 <__ssputs_r+0x6a>
 8007ea4:	6965      	ldr	r5, [r4, #20]
 8007ea6:	6909      	ldr	r1, [r1, #16]
 8007ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007eac:	eba3 0901 	sub.w	r9, r3, r1
 8007eb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007eb4:	1c7b      	adds	r3, r7, #1
 8007eb6:	444b      	add	r3, r9
 8007eb8:	106d      	asrs	r5, r5, #1
 8007eba:	429d      	cmp	r5, r3
 8007ebc:	bf38      	it	cc
 8007ebe:	461d      	movcc	r5, r3
 8007ec0:	0553      	lsls	r3, r2, #21
 8007ec2:	d527      	bpl.n	8007f14 <__ssputs_r+0x8c>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	f7ff ff53 	bl	8007d70 <_malloc_r>
 8007eca:	4606      	mov	r6, r0
 8007ecc:	b360      	cbz	r0, 8007f28 <__ssputs_r+0xa0>
 8007ece:	6921      	ldr	r1, [r4, #16]
 8007ed0:	464a      	mov	r2, r9
 8007ed2:	f000 fc1d 	bl	8008710 <memcpy>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	6126      	str	r6, [r4, #16]
 8007ee4:	6165      	str	r5, [r4, #20]
 8007ee6:	444e      	add	r6, r9
 8007ee8:	eba5 0509 	sub.w	r5, r5, r9
 8007eec:	6026      	str	r6, [r4, #0]
 8007eee:	60a5      	str	r5, [r4, #8]
 8007ef0:	463e      	mov	r6, r7
 8007ef2:	42be      	cmp	r6, r7
 8007ef4:	d900      	bls.n	8007ef8 <__ssputs_r+0x70>
 8007ef6:	463e      	mov	r6, r7
 8007ef8:	6820      	ldr	r0, [r4, #0]
 8007efa:	4632      	mov	r2, r6
 8007efc:	4641      	mov	r1, r8
 8007efe:	f000 fbbb 	bl	8008678 <memmove>
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	1b9b      	subs	r3, r3, r6
 8007f06:	60a3      	str	r3, [r4, #8]
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	4433      	add	r3, r6
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f14:	462a      	mov	r2, r5
 8007f16:	f000 fc09 	bl	800872c <_realloc_r>
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1e0      	bne.n	8007ee2 <__ssputs_r+0x5a>
 8007f20:	6921      	ldr	r1, [r4, #16]
 8007f22:	4650      	mov	r0, sl
 8007f24:	f7ff feb8 	bl	8007c98 <_free_r>
 8007f28:	230c      	movs	r3, #12
 8007f2a:	f8ca 3000 	str.w	r3, [sl]
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3a:	e7e9      	b.n	8007f10 <__ssputs_r+0x88>

08007f3c <_svfiprintf_r>:
 8007f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	4698      	mov	r8, r3
 8007f42:	898b      	ldrh	r3, [r1, #12]
 8007f44:	061b      	lsls	r3, r3, #24
 8007f46:	b09d      	sub	sp, #116	; 0x74
 8007f48:	4607      	mov	r7, r0
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	d50e      	bpl.n	8007f6e <_svfiprintf_r+0x32>
 8007f50:	690b      	ldr	r3, [r1, #16]
 8007f52:	b963      	cbnz	r3, 8007f6e <_svfiprintf_r+0x32>
 8007f54:	2140      	movs	r1, #64	; 0x40
 8007f56:	f7ff ff0b 	bl	8007d70 <_malloc_r>
 8007f5a:	6028      	str	r0, [r5, #0]
 8007f5c:	6128      	str	r0, [r5, #16]
 8007f5e:	b920      	cbnz	r0, 8007f6a <_svfiprintf_r+0x2e>
 8007f60:	230c      	movs	r3, #12
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	e0d0      	b.n	800810c <_svfiprintf_r+0x1d0>
 8007f6a:	2340      	movs	r3, #64	; 0x40
 8007f6c:	616b      	str	r3, [r5, #20]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9309      	str	r3, [sp, #36]	; 0x24
 8007f72:	2320      	movs	r3, #32
 8007f74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f7c:	2330      	movs	r3, #48	; 0x30
 8007f7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008124 <_svfiprintf_r+0x1e8>
 8007f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f86:	f04f 0901 	mov.w	r9, #1
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	469a      	mov	sl, r3
 8007f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f92:	b10a      	cbz	r2, 8007f98 <_svfiprintf_r+0x5c>
 8007f94:	2a25      	cmp	r2, #37	; 0x25
 8007f96:	d1f9      	bne.n	8007f8c <_svfiprintf_r+0x50>
 8007f98:	ebba 0b04 	subs.w	fp, sl, r4
 8007f9c:	d00b      	beq.n	8007fb6 <_svfiprintf_r+0x7a>
 8007f9e:	465b      	mov	r3, fp
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f7ff ff6f 	bl	8007e88 <__ssputs_r>
 8007faa:	3001      	adds	r0, #1
 8007fac:	f000 80a9 	beq.w	8008102 <_svfiprintf_r+0x1c6>
 8007fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb2:	445a      	add	r2, fp
 8007fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 80a1 	beq.w	8008102 <_svfiprintf_r+0x1c6>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fca:	f10a 0a01 	add.w	sl, sl, #1
 8007fce:	9304      	str	r3, [sp, #16]
 8007fd0:	9307      	str	r3, [sp, #28]
 8007fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd8:	4654      	mov	r4, sl
 8007fda:	2205      	movs	r2, #5
 8007fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe0:	4850      	ldr	r0, [pc, #320]	; (8008124 <_svfiprintf_r+0x1e8>)
 8007fe2:	f7f8 f905 	bl	80001f0 <memchr>
 8007fe6:	9a04      	ldr	r2, [sp, #16]
 8007fe8:	b9d8      	cbnz	r0, 8008022 <_svfiprintf_r+0xe6>
 8007fea:	06d0      	lsls	r0, r2, #27
 8007fec:	bf44      	itt	mi
 8007fee:	2320      	movmi	r3, #32
 8007ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff4:	0711      	lsls	r1, r2, #28
 8007ff6:	bf44      	itt	mi
 8007ff8:	232b      	movmi	r3, #43	; 0x2b
 8007ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8008002:	2b2a      	cmp	r3, #42	; 0x2a
 8008004:	d015      	beq.n	8008032 <_svfiprintf_r+0xf6>
 8008006:	9a07      	ldr	r2, [sp, #28]
 8008008:	4654      	mov	r4, sl
 800800a:	2000      	movs	r0, #0
 800800c:	f04f 0c0a 	mov.w	ip, #10
 8008010:	4621      	mov	r1, r4
 8008012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008016:	3b30      	subs	r3, #48	; 0x30
 8008018:	2b09      	cmp	r3, #9
 800801a:	d94d      	bls.n	80080b8 <_svfiprintf_r+0x17c>
 800801c:	b1b0      	cbz	r0, 800804c <_svfiprintf_r+0x110>
 800801e:	9207      	str	r2, [sp, #28]
 8008020:	e014      	b.n	800804c <_svfiprintf_r+0x110>
 8008022:	eba0 0308 	sub.w	r3, r0, r8
 8008026:	fa09 f303 	lsl.w	r3, r9, r3
 800802a:	4313      	orrs	r3, r2
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	46a2      	mov	sl, r4
 8008030:	e7d2      	b.n	8007fd8 <_svfiprintf_r+0x9c>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	1d19      	adds	r1, r3, #4
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	9103      	str	r1, [sp, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	bfbb      	ittet	lt
 800803e:	425b      	neglt	r3, r3
 8008040:	f042 0202 	orrlt.w	r2, r2, #2
 8008044:	9307      	strge	r3, [sp, #28]
 8008046:	9307      	strlt	r3, [sp, #28]
 8008048:	bfb8      	it	lt
 800804a:	9204      	strlt	r2, [sp, #16]
 800804c:	7823      	ldrb	r3, [r4, #0]
 800804e:	2b2e      	cmp	r3, #46	; 0x2e
 8008050:	d10c      	bne.n	800806c <_svfiprintf_r+0x130>
 8008052:	7863      	ldrb	r3, [r4, #1]
 8008054:	2b2a      	cmp	r3, #42	; 0x2a
 8008056:	d134      	bne.n	80080c2 <_svfiprintf_r+0x186>
 8008058:	9b03      	ldr	r3, [sp, #12]
 800805a:	1d1a      	adds	r2, r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	9203      	str	r2, [sp, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfb8      	it	lt
 8008064:	f04f 33ff 	movlt.w	r3, #4294967295
 8008068:	3402      	adds	r4, #2
 800806a:	9305      	str	r3, [sp, #20]
 800806c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008134 <_svfiprintf_r+0x1f8>
 8008070:	7821      	ldrb	r1, [r4, #0]
 8008072:	2203      	movs	r2, #3
 8008074:	4650      	mov	r0, sl
 8008076:	f7f8 f8bb 	bl	80001f0 <memchr>
 800807a:	b138      	cbz	r0, 800808c <_svfiprintf_r+0x150>
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	eba0 000a 	sub.w	r0, r0, sl
 8008082:	2240      	movs	r2, #64	; 0x40
 8008084:	4082      	lsls	r2, r0
 8008086:	4313      	orrs	r3, r2
 8008088:	3401      	adds	r4, #1
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008090:	4825      	ldr	r0, [pc, #148]	; (8008128 <_svfiprintf_r+0x1ec>)
 8008092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008096:	2206      	movs	r2, #6
 8008098:	f7f8 f8aa 	bl	80001f0 <memchr>
 800809c:	2800      	cmp	r0, #0
 800809e:	d038      	beq.n	8008112 <_svfiprintf_r+0x1d6>
 80080a0:	4b22      	ldr	r3, [pc, #136]	; (800812c <_svfiprintf_r+0x1f0>)
 80080a2:	bb1b      	cbnz	r3, 80080ec <_svfiprintf_r+0x1b0>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	3307      	adds	r3, #7
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	3308      	adds	r3, #8
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b2:	4433      	add	r3, r6
 80080b4:	9309      	str	r3, [sp, #36]	; 0x24
 80080b6:	e768      	b.n	8007f8a <_svfiprintf_r+0x4e>
 80080b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80080bc:	460c      	mov	r4, r1
 80080be:	2001      	movs	r0, #1
 80080c0:	e7a6      	b.n	8008010 <_svfiprintf_r+0xd4>
 80080c2:	2300      	movs	r3, #0
 80080c4:	3401      	adds	r4, #1
 80080c6:	9305      	str	r3, [sp, #20]
 80080c8:	4619      	mov	r1, r3
 80080ca:	f04f 0c0a 	mov.w	ip, #10
 80080ce:	4620      	mov	r0, r4
 80080d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d4:	3a30      	subs	r2, #48	; 0x30
 80080d6:	2a09      	cmp	r2, #9
 80080d8:	d903      	bls.n	80080e2 <_svfiprintf_r+0x1a6>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0c6      	beq.n	800806c <_svfiprintf_r+0x130>
 80080de:	9105      	str	r1, [sp, #20]
 80080e0:	e7c4      	b.n	800806c <_svfiprintf_r+0x130>
 80080e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e6:	4604      	mov	r4, r0
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7f0      	b.n	80080ce <_svfiprintf_r+0x192>
 80080ec:	ab03      	add	r3, sp, #12
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	462a      	mov	r2, r5
 80080f2:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <_svfiprintf_r+0x1f4>)
 80080f4:	a904      	add	r1, sp, #16
 80080f6:	4638      	mov	r0, r7
 80080f8:	f3af 8000 	nop.w
 80080fc:	1c42      	adds	r2, r0, #1
 80080fe:	4606      	mov	r6, r0
 8008100:	d1d6      	bne.n	80080b0 <_svfiprintf_r+0x174>
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	065b      	lsls	r3, r3, #25
 8008106:	f53f af2d 	bmi.w	8007f64 <_svfiprintf_r+0x28>
 800810a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800810c:	b01d      	add	sp, #116	; 0x74
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	ab03      	add	r3, sp, #12
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	462a      	mov	r2, r5
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <_svfiprintf_r+0x1f4>)
 800811a:	a904      	add	r1, sp, #16
 800811c:	4638      	mov	r0, r7
 800811e:	f000 f879 	bl	8008214 <_printf_i>
 8008122:	e7eb      	b.n	80080fc <_svfiprintf_r+0x1c0>
 8008124:	08008b98 	.word	0x08008b98
 8008128:	08008ba2 	.word	0x08008ba2
 800812c:	00000000 	.word	0x00000000
 8008130:	08007e89 	.word	0x08007e89
 8008134:	08008b9e 	.word	0x08008b9e

08008138 <_printf_common>:
 8008138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800813c:	4616      	mov	r6, r2
 800813e:	4699      	mov	r9, r3
 8008140:	688a      	ldr	r2, [r1, #8]
 8008142:	690b      	ldr	r3, [r1, #16]
 8008144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008148:	4293      	cmp	r3, r2
 800814a:	bfb8      	it	lt
 800814c:	4613      	movlt	r3, r2
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008154:	4607      	mov	r7, r0
 8008156:	460c      	mov	r4, r1
 8008158:	b10a      	cbz	r2, 800815e <_printf_common+0x26>
 800815a:	3301      	adds	r3, #1
 800815c:	6033      	str	r3, [r6, #0]
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	0699      	lsls	r1, r3, #26
 8008162:	bf42      	ittt	mi
 8008164:	6833      	ldrmi	r3, [r6, #0]
 8008166:	3302      	addmi	r3, #2
 8008168:	6033      	strmi	r3, [r6, #0]
 800816a:	6825      	ldr	r5, [r4, #0]
 800816c:	f015 0506 	ands.w	r5, r5, #6
 8008170:	d106      	bne.n	8008180 <_printf_common+0x48>
 8008172:	f104 0a19 	add.w	sl, r4, #25
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	6832      	ldr	r2, [r6, #0]
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	42ab      	cmp	r3, r5
 800817e:	dc26      	bgt.n	80081ce <_printf_common+0x96>
 8008180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008184:	1e13      	subs	r3, r2, #0
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	bf18      	it	ne
 800818a:	2301      	movne	r3, #1
 800818c:	0692      	lsls	r2, r2, #26
 800818e:	d42b      	bmi.n	80081e8 <_printf_common+0xb0>
 8008190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008194:	4649      	mov	r1, r9
 8008196:	4638      	mov	r0, r7
 8008198:	47c0      	blx	r8
 800819a:	3001      	adds	r0, #1
 800819c:	d01e      	beq.n	80081dc <_printf_common+0xa4>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6922      	ldr	r2, [r4, #16]
 80081a2:	f003 0306 	and.w	r3, r3, #6
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	bf02      	ittt	eq
 80081aa:	68e5      	ldreq	r5, [r4, #12]
 80081ac:	6833      	ldreq	r3, [r6, #0]
 80081ae:	1aed      	subeq	r5, r5, r3
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	bf0c      	ite	eq
 80081b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081b8:	2500      	movne	r5, #0
 80081ba:	4293      	cmp	r3, r2
 80081bc:	bfc4      	itt	gt
 80081be:	1a9b      	subgt	r3, r3, r2
 80081c0:	18ed      	addgt	r5, r5, r3
 80081c2:	2600      	movs	r6, #0
 80081c4:	341a      	adds	r4, #26
 80081c6:	42b5      	cmp	r5, r6
 80081c8:	d11a      	bne.n	8008200 <_printf_common+0xc8>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e008      	b.n	80081e0 <_printf_common+0xa8>
 80081ce:	2301      	movs	r3, #1
 80081d0:	4652      	mov	r2, sl
 80081d2:	4649      	mov	r1, r9
 80081d4:	4638      	mov	r0, r7
 80081d6:	47c0      	blx	r8
 80081d8:	3001      	adds	r0, #1
 80081da:	d103      	bne.n	80081e4 <_printf_common+0xac>
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e4:	3501      	adds	r5, #1
 80081e6:	e7c6      	b.n	8008176 <_printf_common+0x3e>
 80081e8:	18e1      	adds	r1, r4, r3
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	2030      	movs	r0, #48	; 0x30
 80081ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081f2:	4422      	add	r2, r4
 80081f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081fc:	3302      	adds	r3, #2
 80081fe:	e7c7      	b.n	8008190 <_printf_common+0x58>
 8008200:	2301      	movs	r3, #1
 8008202:	4622      	mov	r2, r4
 8008204:	4649      	mov	r1, r9
 8008206:	4638      	mov	r0, r7
 8008208:	47c0      	blx	r8
 800820a:	3001      	adds	r0, #1
 800820c:	d0e6      	beq.n	80081dc <_printf_common+0xa4>
 800820e:	3601      	adds	r6, #1
 8008210:	e7d9      	b.n	80081c6 <_printf_common+0x8e>
	...

08008214 <_printf_i>:
 8008214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	7e0f      	ldrb	r7, [r1, #24]
 800821a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800821c:	2f78      	cmp	r7, #120	; 0x78
 800821e:	4691      	mov	r9, r2
 8008220:	4680      	mov	r8, r0
 8008222:	460c      	mov	r4, r1
 8008224:	469a      	mov	sl, r3
 8008226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800822a:	d807      	bhi.n	800823c <_printf_i+0x28>
 800822c:	2f62      	cmp	r7, #98	; 0x62
 800822e:	d80a      	bhi.n	8008246 <_printf_i+0x32>
 8008230:	2f00      	cmp	r7, #0
 8008232:	f000 80d4 	beq.w	80083de <_printf_i+0x1ca>
 8008236:	2f58      	cmp	r7, #88	; 0x58
 8008238:	f000 80c0 	beq.w	80083bc <_printf_i+0x1a8>
 800823c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008244:	e03a      	b.n	80082bc <_printf_i+0xa8>
 8008246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800824a:	2b15      	cmp	r3, #21
 800824c:	d8f6      	bhi.n	800823c <_printf_i+0x28>
 800824e:	a101      	add	r1, pc, #4	; (adr r1, 8008254 <_printf_i+0x40>)
 8008250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008254:	080082ad 	.word	0x080082ad
 8008258:	080082c1 	.word	0x080082c1
 800825c:	0800823d 	.word	0x0800823d
 8008260:	0800823d 	.word	0x0800823d
 8008264:	0800823d 	.word	0x0800823d
 8008268:	0800823d 	.word	0x0800823d
 800826c:	080082c1 	.word	0x080082c1
 8008270:	0800823d 	.word	0x0800823d
 8008274:	0800823d 	.word	0x0800823d
 8008278:	0800823d 	.word	0x0800823d
 800827c:	0800823d 	.word	0x0800823d
 8008280:	080083c5 	.word	0x080083c5
 8008284:	080082ed 	.word	0x080082ed
 8008288:	0800837f 	.word	0x0800837f
 800828c:	0800823d 	.word	0x0800823d
 8008290:	0800823d 	.word	0x0800823d
 8008294:	080083e7 	.word	0x080083e7
 8008298:	0800823d 	.word	0x0800823d
 800829c:	080082ed 	.word	0x080082ed
 80082a0:	0800823d 	.word	0x0800823d
 80082a4:	0800823d 	.word	0x0800823d
 80082a8:	08008387 	.word	0x08008387
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	1d1a      	adds	r2, r3, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	602a      	str	r2, [r5, #0]
 80082b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082bc:	2301      	movs	r3, #1
 80082be:	e09f      	b.n	8008400 <_printf_i+0x1ec>
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	682b      	ldr	r3, [r5, #0]
 80082c4:	0607      	lsls	r7, r0, #24
 80082c6:	f103 0104 	add.w	r1, r3, #4
 80082ca:	6029      	str	r1, [r5, #0]
 80082cc:	d501      	bpl.n	80082d2 <_printf_i+0xbe>
 80082ce:	681e      	ldr	r6, [r3, #0]
 80082d0:	e003      	b.n	80082da <_printf_i+0xc6>
 80082d2:	0646      	lsls	r6, r0, #25
 80082d4:	d5fb      	bpl.n	80082ce <_printf_i+0xba>
 80082d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80082da:	2e00      	cmp	r6, #0
 80082dc:	da03      	bge.n	80082e6 <_printf_i+0xd2>
 80082de:	232d      	movs	r3, #45	; 0x2d
 80082e0:	4276      	negs	r6, r6
 80082e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082e6:	485a      	ldr	r0, [pc, #360]	; (8008450 <_printf_i+0x23c>)
 80082e8:	230a      	movs	r3, #10
 80082ea:	e012      	b.n	8008312 <_printf_i+0xfe>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	6820      	ldr	r0, [r4, #0]
 80082f0:	1d19      	adds	r1, r3, #4
 80082f2:	6029      	str	r1, [r5, #0]
 80082f4:	0605      	lsls	r5, r0, #24
 80082f6:	d501      	bpl.n	80082fc <_printf_i+0xe8>
 80082f8:	681e      	ldr	r6, [r3, #0]
 80082fa:	e002      	b.n	8008302 <_printf_i+0xee>
 80082fc:	0641      	lsls	r1, r0, #25
 80082fe:	d5fb      	bpl.n	80082f8 <_printf_i+0xe4>
 8008300:	881e      	ldrh	r6, [r3, #0]
 8008302:	4853      	ldr	r0, [pc, #332]	; (8008450 <_printf_i+0x23c>)
 8008304:	2f6f      	cmp	r7, #111	; 0x6f
 8008306:	bf0c      	ite	eq
 8008308:	2308      	moveq	r3, #8
 800830a:	230a      	movne	r3, #10
 800830c:	2100      	movs	r1, #0
 800830e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008312:	6865      	ldr	r5, [r4, #4]
 8008314:	60a5      	str	r5, [r4, #8]
 8008316:	2d00      	cmp	r5, #0
 8008318:	bfa2      	ittt	ge
 800831a:	6821      	ldrge	r1, [r4, #0]
 800831c:	f021 0104 	bicge.w	r1, r1, #4
 8008320:	6021      	strge	r1, [r4, #0]
 8008322:	b90e      	cbnz	r6, 8008328 <_printf_i+0x114>
 8008324:	2d00      	cmp	r5, #0
 8008326:	d04b      	beq.n	80083c0 <_printf_i+0x1ac>
 8008328:	4615      	mov	r5, r2
 800832a:	fbb6 f1f3 	udiv	r1, r6, r3
 800832e:	fb03 6711 	mls	r7, r3, r1, r6
 8008332:	5dc7      	ldrb	r7, [r0, r7]
 8008334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008338:	4637      	mov	r7, r6
 800833a:	42bb      	cmp	r3, r7
 800833c:	460e      	mov	r6, r1
 800833e:	d9f4      	bls.n	800832a <_printf_i+0x116>
 8008340:	2b08      	cmp	r3, #8
 8008342:	d10b      	bne.n	800835c <_printf_i+0x148>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	07de      	lsls	r6, r3, #31
 8008348:	d508      	bpl.n	800835c <_printf_i+0x148>
 800834a:	6923      	ldr	r3, [r4, #16]
 800834c:	6861      	ldr	r1, [r4, #4]
 800834e:	4299      	cmp	r1, r3
 8008350:	bfde      	ittt	le
 8008352:	2330      	movle	r3, #48	; 0x30
 8008354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800835c:	1b52      	subs	r2, r2, r5
 800835e:	6122      	str	r2, [r4, #16]
 8008360:	f8cd a000 	str.w	sl, [sp]
 8008364:	464b      	mov	r3, r9
 8008366:	aa03      	add	r2, sp, #12
 8008368:	4621      	mov	r1, r4
 800836a:	4640      	mov	r0, r8
 800836c:	f7ff fee4 	bl	8008138 <_printf_common>
 8008370:	3001      	adds	r0, #1
 8008372:	d14a      	bne.n	800840a <_printf_i+0x1f6>
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	b004      	add	sp, #16
 800837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f043 0320 	orr.w	r3, r3, #32
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	4833      	ldr	r0, [pc, #204]	; (8008454 <_printf_i+0x240>)
 8008388:	2778      	movs	r7, #120	; 0x78
 800838a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	6829      	ldr	r1, [r5, #0]
 8008392:	061f      	lsls	r7, r3, #24
 8008394:	f851 6b04 	ldr.w	r6, [r1], #4
 8008398:	d402      	bmi.n	80083a0 <_printf_i+0x18c>
 800839a:	065f      	lsls	r7, r3, #25
 800839c:	bf48      	it	mi
 800839e:	b2b6      	uxthmi	r6, r6
 80083a0:	07df      	lsls	r7, r3, #31
 80083a2:	bf48      	it	mi
 80083a4:	f043 0320 	orrmi.w	r3, r3, #32
 80083a8:	6029      	str	r1, [r5, #0]
 80083aa:	bf48      	it	mi
 80083ac:	6023      	strmi	r3, [r4, #0]
 80083ae:	b91e      	cbnz	r6, 80083b8 <_printf_i+0x1a4>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	f023 0320 	bic.w	r3, r3, #32
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	2310      	movs	r3, #16
 80083ba:	e7a7      	b.n	800830c <_printf_i+0xf8>
 80083bc:	4824      	ldr	r0, [pc, #144]	; (8008450 <_printf_i+0x23c>)
 80083be:	e7e4      	b.n	800838a <_printf_i+0x176>
 80083c0:	4615      	mov	r5, r2
 80083c2:	e7bd      	b.n	8008340 <_printf_i+0x12c>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	6826      	ldr	r6, [r4, #0]
 80083c8:	6961      	ldr	r1, [r4, #20]
 80083ca:	1d18      	adds	r0, r3, #4
 80083cc:	6028      	str	r0, [r5, #0]
 80083ce:	0635      	lsls	r5, r6, #24
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	d501      	bpl.n	80083d8 <_printf_i+0x1c4>
 80083d4:	6019      	str	r1, [r3, #0]
 80083d6:	e002      	b.n	80083de <_printf_i+0x1ca>
 80083d8:	0670      	lsls	r0, r6, #25
 80083da:	d5fb      	bpl.n	80083d4 <_printf_i+0x1c0>
 80083dc:	8019      	strh	r1, [r3, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	6123      	str	r3, [r4, #16]
 80083e2:	4615      	mov	r5, r2
 80083e4:	e7bc      	b.n	8008360 <_printf_i+0x14c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	1d1a      	adds	r2, r3, #4
 80083ea:	602a      	str	r2, [r5, #0]
 80083ec:	681d      	ldr	r5, [r3, #0]
 80083ee:	6862      	ldr	r2, [r4, #4]
 80083f0:	2100      	movs	r1, #0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f7f7 fefc 	bl	80001f0 <memchr>
 80083f8:	b108      	cbz	r0, 80083fe <_printf_i+0x1ea>
 80083fa:	1b40      	subs	r0, r0, r5
 80083fc:	6060      	str	r0, [r4, #4]
 80083fe:	6863      	ldr	r3, [r4, #4]
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	2300      	movs	r3, #0
 8008404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008408:	e7aa      	b.n	8008360 <_printf_i+0x14c>
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	462a      	mov	r2, r5
 800840e:	4649      	mov	r1, r9
 8008410:	4640      	mov	r0, r8
 8008412:	47d0      	blx	sl
 8008414:	3001      	adds	r0, #1
 8008416:	d0ad      	beq.n	8008374 <_printf_i+0x160>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	079b      	lsls	r3, r3, #30
 800841c:	d413      	bmi.n	8008446 <_printf_i+0x232>
 800841e:	68e0      	ldr	r0, [r4, #12]
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	4298      	cmp	r0, r3
 8008424:	bfb8      	it	lt
 8008426:	4618      	movlt	r0, r3
 8008428:	e7a6      	b.n	8008378 <_printf_i+0x164>
 800842a:	2301      	movs	r3, #1
 800842c:	4632      	mov	r2, r6
 800842e:	4649      	mov	r1, r9
 8008430:	4640      	mov	r0, r8
 8008432:	47d0      	blx	sl
 8008434:	3001      	adds	r0, #1
 8008436:	d09d      	beq.n	8008374 <_printf_i+0x160>
 8008438:	3501      	adds	r5, #1
 800843a:	68e3      	ldr	r3, [r4, #12]
 800843c:	9903      	ldr	r1, [sp, #12]
 800843e:	1a5b      	subs	r3, r3, r1
 8008440:	42ab      	cmp	r3, r5
 8008442:	dcf2      	bgt.n	800842a <_printf_i+0x216>
 8008444:	e7eb      	b.n	800841e <_printf_i+0x20a>
 8008446:	2500      	movs	r5, #0
 8008448:	f104 0619 	add.w	r6, r4, #25
 800844c:	e7f5      	b.n	800843a <_printf_i+0x226>
 800844e:	bf00      	nop
 8008450:	08008ba9 	.word	0x08008ba9
 8008454:	08008bba 	.word	0x08008bba

08008458 <__sflush_r>:
 8008458:	898a      	ldrh	r2, [r1, #12]
 800845a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	4605      	mov	r5, r0
 8008460:	0710      	lsls	r0, r2, #28
 8008462:	460c      	mov	r4, r1
 8008464:	d458      	bmi.n	8008518 <__sflush_r+0xc0>
 8008466:	684b      	ldr	r3, [r1, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	dc05      	bgt.n	8008478 <__sflush_r+0x20>
 800846c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	dc02      	bgt.n	8008478 <__sflush_r+0x20>
 8008472:	2000      	movs	r0, #0
 8008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800847a:	2e00      	cmp	r6, #0
 800847c:	d0f9      	beq.n	8008472 <__sflush_r+0x1a>
 800847e:	2300      	movs	r3, #0
 8008480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008484:	682f      	ldr	r7, [r5, #0]
 8008486:	6a21      	ldr	r1, [r4, #32]
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	d032      	beq.n	80084f2 <__sflush_r+0x9a>
 800848c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	075a      	lsls	r2, r3, #29
 8008492:	d505      	bpl.n	80084a0 <__sflush_r+0x48>
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	1ac0      	subs	r0, r0, r3
 8008498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800849a:	b10b      	cbz	r3, 80084a0 <__sflush_r+0x48>
 800849c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800849e:	1ac0      	subs	r0, r0, r3
 80084a0:	2300      	movs	r3, #0
 80084a2:	4602      	mov	r2, r0
 80084a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084a6:	6a21      	ldr	r1, [r4, #32]
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b0      	blx	r6
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	d106      	bne.n	80084c0 <__sflush_r+0x68>
 80084b2:	6829      	ldr	r1, [r5, #0]
 80084b4:	291d      	cmp	r1, #29
 80084b6:	d82b      	bhi.n	8008510 <__sflush_r+0xb8>
 80084b8:	4a29      	ldr	r2, [pc, #164]	; (8008560 <__sflush_r+0x108>)
 80084ba:	410a      	asrs	r2, r1
 80084bc:	07d6      	lsls	r6, r2, #31
 80084be:	d427      	bmi.n	8008510 <__sflush_r+0xb8>
 80084c0:	2200      	movs	r2, #0
 80084c2:	6062      	str	r2, [r4, #4]
 80084c4:	04d9      	lsls	r1, r3, #19
 80084c6:	6922      	ldr	r2, [r4, #16]
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	d504      	bpl.n	80084d6 <__sflush_r+0x7e>
 80084cc:	1c42      	adds	r2, r0, #1
 80084ce:	d101      	bne.n	80084d4 <__sflush_r+0x7c>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b903      	cbnz	r3, 80084d6 <__sflush_r+0x7e>
 80084d4:	6560      	str	r0, [r4, #84]	; 0x54
 80084d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084d8:	602f      	str	r7, [r5, #0]
 80084da:	2900      	cmp	r1, #0
 80084dc:	d0c9      	beq.n	8008472 <__sflush_r+0x1a>
 80084de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084e2:	4299      	cmp	r1, r3
 80084e4:	d002      	beq.n	80084ec <__sflush_r+0x94>
 80084e6:	4628      	mov	r0, r5
 80084e8:	f7ff fbd6 	bl	8007c98 <_free_r>
 80084ec:	2000      	movs	r0, #0
 80084ee:	6360      	str	r0, [r4, #52]	; 0x34
 80084f0:	e7c0      	b.n	8008474 <__sflush_r+0x1c>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b0      	blx	r6
 80084f8:	1c41      	adds	r1, r0, #1
 80084fa:	d1c8      	bne.n	800848e <__sflush_r+0x36>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0c5      	beq.n	800848e <__sflush_r+0x36>
 8008502:	2b1d      	cmp	r3, #29
 8008504:	d001      	beq.n	800850a <__sflush_r+0xb2>
 8008506:	2b16      	cmp	r3, #22
 8008508:	d101      	bne.n	800850e <__sflush_r+0xb6>
 800850a:	602f      	str	r7, [r5, #0]
 800850c:	e7b1      	b.n	8008472 <__sflush_r+0x1a>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	e7ad      	b.n	8008474 <__sflush_r+0x1c>
 8008518:	690f      	ldr	r7, [r1, #16]
 800851a:	2f00      	cmp	r7, #0
 800851c:	d0a9      	beq.n	8008472 <__sflush_r+0x1a>
 800851e:	0793      	lsls	r3, r2, #30
 8008520:	680e      	ldr	r6, [r1, #0]
 8008522:	bf08      	it	eq
 8008524:	694b      	ldreq	r3, [r1, #20]
 8008526:	600f      	str	r7, [r1, #0]
 8008528:	bf18      	it	ne
 800852a:	2300      	movne	r3, #0
 800852c:	eba6 0807 	sub.w	r8, r6, r7
 8008530:	608b      	str	r3, [r1, #8]
 8008532:	f1b8 0f00 	cmp.w	r8, #0
 8008536:	dd9c      	ble.n	8008472 <__sflush_r+0x1a>
 8008538:	6a21      	ldr	r1, [r4, #32]
 800853a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800853c:	4643      	mov	r3, r8
 800853e:	463a      	mov	r2, r7
 8008540:	4628      	mov	r0, r5
 8008542:	47b0      	blx	r6
 8008544:	2800      	cmp	r0, #0
 8008546:	dc06      	bgt.n	8008556 <__sflush_r+0xfe>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e78e      	b.n	8008474 <__sflush_r+0x1c>
 8008556:	4407      	add	r7, r0
 8008558:	eba8 0800 	sub.w	r8, r8, r0
 800855c:	e7e9      	b.n	8008532 <__sflush_r+0xda>
 800855e:	bf00      	nop
 8008560:	dfbffffe 	.word	0xdfbffffe

08008564 <_fflush_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	690b      	ldr	r3, [r1, #16]
 8008568:	4605      	mov	r5, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b913      	cbnz	r3, 8008574 <_fflush_r+0x10>
 800856e:	2500      	movs	r5, #0
 8008570:	4628      	mov	r0, r5
 8008572:	bd38      	pop	{r3, r4, r5, pc}
 8008574:	b118      	cbz	r0, 800857e <_fflush_r+0x1a>
 8008576:	6a03      	ldr	r3, [r0, #32]
 8008578:	b90b      	cbnz	r3, 800857e <_fflush_r+0x1a>
 800857a:	f7ff f987 	bl	800788c <__sinit>
 800857e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f3      	beq.n	800856e <_fflush_r+0xa>
 8008586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008588:	07d0      	lsls	r0, r2, #31
 800858a:	d404      	bmi.n	8008596 <_fflush_r+0x32>
 800858c:	0599      	lsls	r1, r3, #22
 800858e:	d402      	bmi.n	8008596 <_fflush_r+0x32>
 8008590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008592:	f7ff fb7e 	bl	8007c92 <__retarget_lock_acquire_recursive>
 8008596:	4628      	mov	r0, r5
 8008598:	4621      	mov	r1, r4
 800859a:	f7ff ff5d 	bl	8008458 <__sflush_r>
 800859e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085a0:	07da      	lsls	r2, r3, #31
 80085a2:	4605      	mov	r5, r0
 80085a4:	d4e4      	bmi.n	8008570 <_fflush_r+0xc>
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	059b      	lsls	r3, r3, #22
 80085aa:	d4e1      	bmi.n	8008570 <_fflush_r+0xc>
 80085ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ae:	f7ff fb71 	bl	8007c94 <__retarget_lock_release_recursive>
 80085b2:	e7dd      	b.n	8008570 <_fflush_r+0xc>

080085b4 <__swhatbuf_r>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	460c      	mov	r4, r1
 80085b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085bc:	2900      	cmp	r1, #0
 80085be:	b096      	sub	sp, #88	; 0x58
 80085c0:	4615      	mov	r5, r2
 80085c2:	461e      	mov	r6, r3
 80085c4:	da0d      	bge.n	80085e2 <__swhatbuf_r+0x2e>
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085cc:	f04f 0100 	mov.w	r1, #0
 80085d0:	bf0c      	ite	eq
 80085d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085d6:	2340      	movne	r3, #64	; 0x40
 80085d8:	2000      	movs	r0, #0
 80085da:	6031      	str	r1, [r6, #0]
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	b016      	add	sp, #88	; 0x58
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	466a      	mov	r2, sp
 80085e4:	f000 f862 	bl	80086ac <_fstat_r>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	dbec      	blt.n	80085c6 <__swhatbuf_r+0x12>
 80085ec:	9901      	ldr	r1, [sp, #4]
 80085ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80085f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80085f6:	4259      	negs	r1, r3
 80085f8:	4159      	adcs	r1, r3
 80085fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085fe:	e7eb      	b.n	80085d8 <__swhatbuf_r+0x24>

08008600 <__smakebuf_r>:
 8008600:	898b      	ldrh	r3, [r1, #12]
 8008602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008604:	079d      	lsls	r5, r3, #30
 8008606:	4606      	mov	r6, r0
 8008608:	460c      	mov	r4, r1
 800860a:	d507      	bpl.n	800861c <__smakebuf_r+0x1c>
 800860c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	6123      	str	r3, [r4, #16]
 8008614:	2301      	movs	r3, #1
 8008616:	6163      	str	r3, [r4, #20]
 8008618:	b002      	add	sp, #8
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	ab01      	add	r3, sp, #4
 800861e:	466a      	mov	r2, sp
 8008620:	f7ff ffc8 	bl	80085b4 <__swhatbuf_r>
 8008624:	9900      	ldr	r1, [sp, #0]
 8008626:	4605      	mov	r5, r0
 8008628:	4630      	mov	r0, r6
 800862a:	f7ff fba1 	bl	8007d70 <_malloc_r>
 800862e:	b948      	cbnz	r0, 8008644 <__smakebuf_r+0x44>
 8008630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008634:	059a      	lsls	r2, r3, #22
 8008636:	d4ef      	bmi.n	8008618 <__smakebuf_r+0x18>
 8008638:	f023 0303 	bic.w	r3, r3, #3
 800863c:	f043 0302 	orr.w	r3, r3, #2
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	e7e3      	b.n	800860c <__smakebuf_r+0xc>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	6020      	str	r0, [r4, #0]
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	6163      	str	r3, [r4, #20]
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	6120      	str	r0, [r4, #16]
 8008656:	b15b      	cbz	r3, 8008670 <__smakebuf_r+0x70>
 8008658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800865c:	4630      	mov	r0, r6
 800865e:	f000 f837 	bl	80086d0 <_isatty_r>
 8008662:	b128      	cbz	r0, 8008670 <__smakebuf_r+0x70>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	f043 0301 	orr.w	r3, r3, #1
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	431d      	orrs	r5, r3
 8008674:	81a5      	strh	r5, [r4, #12]
 8008676:	e7cf      	b.n	8008618 <__smakebuf_r+0x18>

08008678 <memmove>:
 8008678:	4288      	cmp	r0, r1
 800867a:	b510      	push	{r4, lr}
 800867c:	eb01 0402 	add.w	r4, r1, r2
 8008680:	d902      	bls.n	8008688 <memmove+0x10>
 8008682:	4284      	cmp	r4, r0
 8008684:	4623      	mov	r3, r4
 8008686:	d807      	bhi.n	8008698 <memmove+0x20>
 8008688:	1e43      	subs	r3, r0, #1
 800868a:	42a1      	cmp	r1, r4
 800868c:	d008      	beq.n	80086a0 <memmove+0x28>
 800868e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008696:	e7f8      	b.n	800868a <memmove+0x12>
 8008698:	4402      	add	r2, r0
 800869a:	4601      	mov	r1, r0
 800869c:	428a      	cmp	r2, r1
 800869e:	d100      	bne.n	80086a2 <memmove+0x2a>
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086aa:	e7f7      	b.n	800869c <memmove+0x24>

080086ac <_fstat_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_fstat_r+0x20>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	602b      	str	r3, [r5, #0]
 80086ba:	f7fa fedc 	bl	8003476 <_fstat>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d102      	bne.n	80086c8 <_fstat_r+0x1c>
 80086c2:	682b      	ldr	r3, [r5, #0]
 80086c4:	b103      	cbz	r3, 80086c8 <_fstat_r+0x1c>
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
 80086ca:	bf00      	nop
 80086cc:	20000b0c 	.word	0x20000b0c

080086d0 <_isatty_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d06      	ldr	r5, [pc, #24]	; (80086ec <_isatty_r+0x1c>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7fa fedb 	bl	8003496 <_isatty>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_isatty_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_isatty_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000b0c 	.word	0x20000b0c

080086f0 <_sbrk_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_sbrk_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7fa fee4 	bl	80034c8 <_sbrk>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_sbrk_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_sbrk_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	20000b0c 	.word	0x20000b0c

08008710 <memcpy>:
 8008710:	440a      	add	r2, r1
 8008712:	4291      	cmp	r1, r2
 8008714:	f100 33ff 	add.w	r3, r0, #4294967295
 8008718:	d100      	bne.n	800871c <memcpy+0xc>
 800871a:	4770      	bx	lr
 800871c:	b510      	push	{r4, lr}
 800871e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008726:	4291      	cmp	r1, r2
 8008728:	d1f9      	bne.n	800871e <memcpy+0xe>
 800872a:	bd10      	pop	{r4, pc}

0800872c <_realloc_r>:
 800872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	4680      	mov	r8, r0
 8008732:	4614      	mov	r4, r2
 8008734:	460e      	mov	r6, r1
 8008736:	b921      	cbnz	r1, 8008742 <_realloc_r+0x16>
 8008738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	4611      	mov	r1, r2
 800873e:	f7ff bb17 	b.w	8007d70 <_malloc_r>
 8008742:	b92a      	cbnz	r2, 8008750 <_realloc_r+0x24>
 8008744:	f7ff faa8 	bl	8007c98 <_free_r>
 8008748:	4625      	mov	r5, r4
 800874a:	4628      	mov	r0, r5
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	f000 f81b 	bl	800878a <_malloc_usable_size_r>
 8008754:	4284      	cmp	r4, r0
 8008756:	4607      	mov	r7, r0
 8008758:	d802      	bhi.n	8008760 <_realloc_r+0x34>
 800875a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800875e:	d812      	bhi.n	8008786 <_realloc_r+0x5a>
 8008760:	4621      	mov	r1, r4
 8008762:	4640      	mov	r0, r8
 8008764:	f7ff fb04 	bl	8007d70 <_malloc_r>
 8008768:	4605      	mov	r5, r0
 800876a:	2800      	cmp	r0, #0
 800876c:	d0ed      	beq.n	800874a <_realloc_r+0x1e>
 800876e:	42bc      	cmp	r4, r7
 8008770:	4622      	mov	r2, r4
 8008772:	4631      	mov	r1, r6
 8008774:	bf28      	it	cs
 8008776:	463a      	movcs	r2, r7
 8008778:	f7ff ffca 	bl	8008710 <memcpy>
 800877c:	4631      	mov	r1, r6
 800877e:	4640      	mov	r0, r8
 8008780:	f7ff fa8a 	bl	8007c98 <_free_r>
 8008784:	e7e1      	b.n	800874a <_realloc_r+0x1e>
 8008786:	4635      	mov	r5, r6
 8008788:	e7df      	b.n	800874a <_realloc_r+0x1e>

0800878a <_malloc_usable_size_r>:
 800878a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878e:	1f18      	subs	r0, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	bfbc      	itt	lt
 8008794:	580b      	ldrlt	r3, [r1, r0]
 8008796:	18c0      	addlt	r0, r0, r3
 8008798:	4770      	bx	lr
	...

0800879c <_init>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr

080087a8 <_fini>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr
