
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075fc  080075fc  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007604  08007604  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800760c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200000ec  080076f8  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  080076f8  000209a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016723  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f07  00000000  00000000  00036882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108d  00000000  00000000  0003bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b156  00000000  00000000  0003cdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020886  00000000  00000000  00057f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dc7c  00000000  00000000  000787b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c98  00000000  00000000  00116430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072f0 	.word	0x080072f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	080072f0 	.word	0x080072f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800059e:	3301      	adds	r3, #1
 80005a0:	425a      	negs	r2, r3
 80005a2:	f003 031f 	and.w	r3, r3, #31
 80005a6:	f002 021f 	and.w	r2, r2, #31
 80005aa:	bf58      	it	pl
 80005ac:	4253      	negpl	r3, r2
 80005ae:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005b6:	7bfa      	ldrb	r2, [r7, #15]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d101      	bne.n	80005c0 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	e00b      	b.n	80005d8 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7bfa      	ldrb	r2, [r7, #15]
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005f4:	3301      	adds	r3, #1
 80005f6:	425a      	negs	r2, r3
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	f002 021f 	and.w	r2, r2, #31
 8000600:	bf58      	it	pl
 8000602:	4253      	negpl	r3, r2
 8000604:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000612:	429a      	cmp	r2, r3
 8000614:	d101      	bne.n	800061a <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000616:	2301      	movs	r3, #1
 8000618:	e00c      	b.n	8000634 <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	5c9a      	ldrb	r2, [r3, r2]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7bfa      	ldrb	r2, [r7, #15]
 800062e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <MX_ADC1_Init+0xec>)
 8000654:	4a36      	ldr	r2, [pc, #216]	; (8000730 <MX_ADC1_Init+0xf0>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <MX_ADC1_Init+0xec>)
 800065a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <MX_ADC1_Init+0xec>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <MX_ADC1_Init+0xec>)
 8000668:	2201      	movs	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_ADC1_Init+0xec>)
 800066e:	2201      	movs	r2, #1
 8000670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_ADC1_Init+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_ADC1_Init+0xec>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_ADC1_Init+0xec>)
 8000682:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <MX_ADC1_Init+0xf4>)
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_ADC1_Init+0xec>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0xec>)
 800068e:	2204      	movs	r2, #4
 8000690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_ADC1_Init+0xec>)
 8000694:	2201      	movs	r2, #1
 8000696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_ADC1_Init+0xec>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a0:	4822      	ldr	r0, [pc, #136]	; (800072c <MX_ADC1_Init+0xec>)
 80006a2:	f002 fa01 	bl	8002aa8 <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006ac:	f000 fed9 	bl	8001462 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006b0:	230b      	movs	r3, #11
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006b8:	2307      	movs	r3, #7
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <MX_ADC1_Init+0xec>)
 80006c2:	f002 fc53 	bl	8002f6c <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006cc:	f000 fec9 	bl	8001462 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <MX_ADC1_Init+0xec>)
 80006de:	f002 fc45 	bl	8002f6c <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e8:	f000 febb 	bl	8001462 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ADC1_Init+0xec>)
 80006fa:	f002 fc37 	bl	8002f6c <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000704:	f000 fead 	bl	8001462 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000708:	2302      	movs	r3, #2
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_ADC1_Init+0xec>)
 8000716:	f002 fc29 	bl	8002f6c <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000720:	f000 fe9f 	bl	8001462 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000108 	.word	0x20000108
 8000730:	40012000 	.word	0x40012000
 8000734:	0f000001 	.word	0x0f000001

08000738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <HAL_ADC_MspInit+0x110>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d171      	bne.n	800083e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a3a      	ldr	r2, [pc, #232]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <HAL_ADC_MspInit+0x114>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <HAL_ADC_MspInit+0x114>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_ADC_MspInit+0x114>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	; (800084c <HAL_ADC_MspInit+0x114>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <HAL_ADC_MspInit+0x114>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 80007ae:	2306      	movs	r3, #6
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	2303      	movs	r3, #3
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4823      	ldr	r0, [pc, #140]	; (8000850 <HAL_ADC_MspInit+0x118>)
 80007c2:	f003 fb31 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 80007c6:	2306      	movs	r3, #6
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ca:	2303      	movs	r3, #3
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <HAL_ADC_MspInit+0x11c>)
 80007da:	f003 fb25 	bl	8003e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <HAL_ADC_MspInit+0x124>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_ADC_MspInit+0x120>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_ADC_MspInit+0x120>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000824:	f002 ff6e 	bl	8003704 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800082e:	f000 fe18 	bl	8001462 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_ADC_MspInit+0x120>)
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_ADC_MspInit+0x120>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40012000 	.word	0x40012000
 800084c:	40023800 	.word	0x40023800
 8000850:	40020800 	.word	0x40020800
 8000854:	40020000 	.word	0x40020000
 8000858:	20000150 	.word	0x20000150
 800085c:	40026410 	.word	0x40026410

08000860 <ToggleLed>:

//Buttons Variables
DB_Button_t ButtonUp;

void ToggleLed(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000864:	2104      	movs	r1, #4
 8000866:	4802      	ldr	r0, [pc, #8]	; (8000870 <ToggleLed+0x10>)
 8000868:	f003 fc93 	bl	8004192 <HAL_GPIO_TogglePin>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020400 	.word	0x40020400

08000874 <Inputs_Init>:

void Inputs_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <Inputs_Init+0x64>)
 800087a:	f005 fca5 	bl	80061c8 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	4916      	ldr	r1, [pc, #88]	; (80008dc <Inputs_Init+0x68>)
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <Inputs_Init+0x6c>)
 8000884:	f002 fa64 	bl	8002d50 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000888:	2032      	movs	r0, #50	; 0x32
 800088a:	f002 f8e9 	bl	8002a60 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <Inputs_Init+0x70>)
 8000890:	4915      	ldr	r1, [pc, #84]	; (80008e8 <Inputs_Init+0x74>)
 8000892:	4816      	ldr	r0, [pc, #88]	; (80008ec <Inputs_Init+0x78>)
 8000894:	f000 fb40 	bl	8000f18 <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <Inputs_Init+0x7c>)
 800089a:	4916      	ldr	r1, [pc, #88]	; (80008f4 <Inputs_Init+0x80>)
 800089c:	4816      	ldr	r0, [pc, #88]	; (80008f8 <Inputs_Init+0x84>)
 800089e:	f000 fb3b 	bl	8000f18 <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <Inputs_Init+0x78>)
 80008a4:	f000 fb53 	bl	8000f4e <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <Inputs_Init+0x84>)
 80008aa:	f000 fb50 	bl	8000f4e <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80008ae:	213c      	movs	r1, #60	; 0x3c
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <Inputs_Init+0x64>)
 80008b2:	f005 fd89 	bl	80063c8 <HAL_TIM_Encoder_Start>

	/*Debounce timer start */
	HAL_TIM_Base_Start(&htim10);
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <Inputs_Init+0x88>)
 80008b8:	f005 fc86 	bl	80061c8 <HAL_TIM_Base_Start>
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 500);
 80008bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c4:	490e      	ldr	r1, [pc, #56]	; (8000900 <Inputs_Init+0x8c>)
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <Inputs_Init+0x90>)
 80008c8:	f000 f8b6 	bl	8000a38 <DB_ButtonInit>
	DB_ButtonPressCallbackRegister(&ButtonUp, &ToggleLed);
 80008cc:	490e      	ldr	r1, [pc, #56]	; (8000908 <Inputs_Init+0x94>)
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <Inputs_Init+0x90>)
 80008d0:	f000 f8d2 	bl	8000a78 <DB_ButtonPressCallbackRegister>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200007cc 	.word	0x200007cc
 80008dc:	200001b0 	.word	0x200001b0
 80008e0:	20000108 	.word	0x20000108
 80008e4:	20000202 	.word	0x20000202
 80008e8:	20000200 	.word	0x20000200
 80008ec:	20000208 	.word	0x20000208
 80008f0:	20000206 	.word	0x20000206
 80008f4:	20000204 	.word	0x20000204
 80008f8:	20000220 	.word	0x20000220
 80008fc:	20000814 	.word	0x20000814
 8000900:	40020800 	.word	0x40020800
 8000904:	20000238 	.word	0x20000238
 8000908:	08000861 	.word	0x08000861

0800090c <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 8000924:	2300      	movs	r3, #0
 8000926:	77fb      	strb	r3, [r7, #31]
 8000928:	e021      	b.n	800096e <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	4924      	ldr	r1, [pc, #144]	; (80009c0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000930:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000934:	4413      	add	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	7ffa      	ldrb	r2, [r7, #31]
 800093c:	3201      	adds	r2, #1
 800093e:	4920      	ldr	r1, [pc, #128]	; (80009c0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000940:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000944:	4413      	add	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	7ffa      	ldrb	r2, [r7, #31]
 800094c:	3202      	adds	r2, #2
 800094e:	491c      	ldr	r1, [pc, #112]	; (80009c0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000950:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000954:	4413      	add	r3, r2
 8000956:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	7ffa      	ldrb	r2, [r7, #31]
 800095c:	3203      	adds	r2, #3
 800095e:	4918      	ldr	r1, [pc, #96]	; (80009c0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000960:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000964:	4413      	add	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000968:	7ffb      	ldrb	r3, [r7, #31]
 800096a:	3304      	adds	r3, #4
 800096c:	77fb      	strb	r3, [r7, #31]
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	2b24      	cmp	r3, #36	; 0x24
 8000972:	d9da      	bls.n	800092a <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000982:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000992:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_ADC_ConvCpltCallback+0xbc>)
 80009a2:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_ADC_ConvCpltCallback+0xbc>)
 80009b2:	80da      	strh	r2, [r3, #6]
}
 80009b4:	bf00      	nop
 80009b6:	3724      	adds	r7, #36	; 0x24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	200001b0 	.word	0x200001b0
 80009c4:	cccccccd 	.word	0xcccccccd
 80009c8:	20000200 	.word	0x20000200

080009cc <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <Inputs_GetEncoderCount+0x4c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <Inputs_GetEncoderCount+0x50>)
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	dc03      	bgt.n	80009ee <Inputs_GetEncoderCount+0x22>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f113 0f03 	cmn.w	r3, #3
 80009ec:	da0c      	bge.n	8000a08 <Inputs_GetEncoderCount+0x3c>
	{
		LastTimerCounter = htim3.Instance->CNT;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <Inputs_GetEncoderCount+0x4c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <Inputs_GetEncoderCount+0x50>)
 80009f8:	801a      	strh	r2, [r3, #0]
		return (int8_t)(CounterDif / 4);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da00      	bge.n	8000a02 <Inputs_GetEncoderCount+0x36>
 8000a00:	3303      	adds	r3, #3
 8000a02:	109b      	asrs	r3, r3, #2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	e000      	b.n	8000a0a <Inputs_GetEncoderCount+0x3e>
	}
	else
	{
		return 0;
 8000a08:	2300      	movs	r3, #0
	}
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200007cc 	.word	0x200007cc
 8000a1c:	2000024c 	.word	0x2000024c

08000a20 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp, &htim10);
 8000a24:	4902      	ldr	r1, [pc, #8]	; (8000a30 <Inputs_ButtonsRoutine+0x10>)
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <Inputs_ButtonsRoutine+0x14>)
 8000a28:	f000 f834 	bl	8000a94 <DB_ButtonProcess>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000814 	.word	0x20000814
 8000a34:	20000238 	.word	0x20000238

08000a38 <DB_ButtonInit>:

#include "debounce.h"


void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint16_t Debounce_ms)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	460b      	mov	r3, r1
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	80bb      	strh	r3, [r7, #4]
	Button->Button_Port = GPIOx;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = Debounce_ms;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	88ba      	ldrh	r2, [r7, #4]
 8000a5e:	811a      	strh	r2, [r3, #8]
	Button->ButtonState = IDLE;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2200      	movs	r2, #0
 8000a64:	741a      	strb	r2, [r3, #16]
	Button->ButtonPressAction = NULL;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DB_ButtonPressCallbackRegister>:


void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*ActionFun)(void))
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	Button->ButtonPressAction = ActionFun;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	60da      	str	r2, [r3, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button, TIM_HandleTypeDef *htim)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	switch(Button->ButtonState)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7c1b      	ldrb	r3, [r3, #16]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d038      	beq.n	8000b18 <DB_ButtonProcess+0x84>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	dc44      	bgt.n	8000b34 <DB_ButtonProcess+0xa0>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <DB_ButtonProcess+0x20>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d015      	beq.n	8000ade <DB_ButtonProcess+0x4a>
			Button->ButtonPressAction();
		}
		Button->ButtonState = IDLE;
		break;
	}
}
 8000ab2:	e03f      	b.n	8000b34 <DB_ButtonProcess+0xa0>
		if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f003 fb36 	bl	8004130 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d131      	bne.n	8000b2e <DB_ButtonProcess+0x9a>
			Button->ButtonState = DEBOUNCE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2201      	movs	r2, #1
 8000ace:	741a      	strb	r2, [r3, #16]
			Button->TimTick = htim->Instance->CNT;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	825a      	strh	r2, [r3, #18]
		break;
 8000adc:	e027      	b.n	8000b2e <DB_ButtonProcess+0x9a>
		if( (htim->Instance->CNT) - (Button->TimTick) >= (Button->DebounceTime_ms) )
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	8a52      	ldrh	r2, [r2, #18]
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	8912      	ldrh	r2, [r2, #8]
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d31f      	bcc.n	8000b32 <DB_ButtonProcess+0x9e>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f003 fb17 	bl	8004130 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <DB_ButtonProcess+0x7c>
				Button->ButtonState = PRESSED;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	741a      	strb	r2, [r3, #16]
		break;
 8000b0e:	e010      	b.n	8000b32 <DB_ButtonProcess+0x9e>
				Button->ButtonState = IDLE;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	741a      	strb	r2, [r3, #16]
		break;
 8000b16:	e00c      	b.n	8000b32 <DB_ButtonProcess+0x9e>
		if(NULL != Button->ButtonPressAction)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <DB_ButtonProcess+0x92>
			Button->ButtonPressAction();
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4798      	blx	r3
		Button->ButtonState = IDLE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	741a      	strb	r2, [r3, #16]
		break;
 8000b2c:	e002      	b.n	8000b34 <DB_ButtonProcess+0xa0>
		break;
 8000b2e:	bf00      	nop
 8000b30:	e000      	b.n	8000b34 <DB_ButtonProcess+0xa0>
		break;
 8000b32:	bf00      	nop
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_DMA_Init+0x3c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <MX_DMA_Init+0x3c>)
 8000b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_DMA_Init+0x3c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2038      	movs	r0, #56	; 0x38
 8000b64:	f002 fd97 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b68:	2038      	movs	r0, #56	; 0x38
 8000b6a:	f002 fdb0 	bl	80036ce <HAL_NVIC_EnableIRQ>

}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b5d      	ldr	r3, [pc, #372]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a5c      	ldr	r2, [pc, #368]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b5a      	ldr	r3, [pc, #360]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a55      	ldr	r2, [pc, #340]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b53      	ldr	r3, [pc, #332]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a4e      	ldr	r2, [pc, #312]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a47      	ldr	r2, [pc, #284]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a40      	ldr	r2, [pc, #256]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x190>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2124      	movs	r1, #36	; 0x24
 8000c22:	483b      	ldr	r0, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x194>)
 8000c24:	f003 fa9c 	bl	8004160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	21c0      	movs	r1, #192	; 0xc0
 8000c2c:	4839      	ldr	r0, [pc, #228]	; (8000d14 <MX_GPIO_Init+0x198>)
 8000c2e:	f003 fa97 	bl	8004160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_JOY1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4833      	ldr	r0, [pc, #204]	; (8000d14 <MX_GPIO_Init+0x198>)
 8000c46:	f003 f8ef 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 8000c4a:	2321      	movs	r3, #33	; 0x21
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482e      	ldr	r0, [pc, #184]	; (8000d18 <MX_GPIO_Init+0x19c>)
 8000c5e:	f003 f8e3 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c62:	2304      	movs	r3, #4
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4825      	ldr	r0, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x194>)
 8000c7a:	f003 f8d5 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	481e      	ldr	r0, [pc, #120]	; (8000d10 <MX_GPIO_Init+0x194>)
 8000c96:	f003 f8c7 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8000c9a:	23c0      	movs	r3, #192	; 0xc0
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4818      	ldr	r0, [pc, #96]	; (8000d14 <MX_GPIO_Init+0x198>)
 8000cb2:	f003 f8b9 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MX_GPIO_Init+0x198>)
 8000ccc:	f003 f8ac 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_GPIO_Init+0x1a0>)
 8000ce4:	f003 f8a0 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8000ce8:	2320      	movs	r3, #32
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_GPIO_Init+0x194>)
 8000d00:	f003 f892 	bl	8003e28 <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_I2C1_Init+0x58>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d5e:	f003 fa4b 	bl	80041f8 <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f000 fb7b 	bl	8001462 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000250 	.word	0x20000250
 8000d74:	40005400 	.word	0x40005400
 8000d78:	00061a80 	.word	0x00061a80

08000d7c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <MX_I2C3_Init+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000d88:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_I2C3_Init+0x58>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_I2C3_Init+0x50>)
 8000dba:	f003 fa1d 	bl	80041f8 <HAL_I2C_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000dc4:	f000 fb4d 	bl	8001462 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200002a4 	.word	0x200002a4
 8000dd0:	40005c00 	.word	0x40005c00
 8000dd4:	00061a80 	.word	0x00061a80

08000dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <HAL_I2C_MspInit+0x128>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12d      	bne.n	8000e56 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a40      	ldr	r2, [pc, #256]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4835      	ldr	r0, [pc, #212]	; (8000f08 <HAL_I2C_MspInit+0x130>)
 8000e34:	f002 fff8 	bl	8003e28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000e54:	e050      	b.n	8000ef8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <HAL_I2C_MspInit+0x134>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d14b      	bne.n	8000ef8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4816      	ldr	r0, [pc, #88]	; (8000f10 <HAL_I2C_MspInit+0x138>)
 8000eb6:	f002 ffb7 	bl	8003e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <HAL_I2C_MspInit+0x13c>)
 8000ed8:	f002 ffa6 	bl	8003e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_I2C_MspInit+0x12c>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40005c00 	.word	0x40005c00
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020000 	.word	0x40020000

08000f18 <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <JoyS_Init+0x18>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e000      	b.n	8000f42 <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 8000f56:	f001 fd77 	bl	8002a48 <HAL_GetTick>
 8000f5a:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 8000f5c:	e015      	b.n	8000f8a <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <JoyS_SetIdleValues+0x24>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00b      	beq.n	8000f8a <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e007      	b.n	8000f9a <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 8000f8a:	f001 fd5d 	bl	8002a48 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b63      	cmp	r3, #99	; 0x63
 8000f96:	d9e2      	bls.n	8000f5e <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <Parser_Klebot>:
#include "klebot_parser.h"
#include "stdio.h"
#include "klebot_commands.h"

void Parser_Klebot(uint8_t *command, uint8_t length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	; 0x38
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t ResponseCommand[MAX_COMMAND_LENGTH];
	uint32_t tick = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t len = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch(*CurrentByte)
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d002      	beq.n	8000fcc <Parser_Klebot+0x28>
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d00f      	beq.n	8000fea <Parser_Klebot+0x46>
 8000fca:	e02d      	b.n	8001028 <Parser_Klebot+0x84>
	{
	case CONNECTION_HOLD:
		ResponseCommand[0] = CONNECTION_HOLD;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	733b      	strb	r3, [r7, #12]
		ResponseCommand[1] = OK;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	737b      	strb	r3, [r7, #13]
		Radio_TxBufferPut(ResponseCommand, 2);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f8aa 	bl	8001134 <Radio_TxBufferPut>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <Parser_Klebot+0x98>)
 8000fe4:	f003 f8d5 	bl	8004192 <HAL_GPIO_TogglePin>
		break;
 8000fe8:	e024      	b.n	8001034 <Parser_Klebot+0x90>

	case GET_TICK:

		tick = HAL_GetTick();
 8000fea:	f001 fd2d 	bl	8002a48 <HAL_GetTick>
 8000fee:	6338      	str	r0, [r7, #48]	; 0x30

		len = sprintf((char*)&ResponseCommand[1], "%ld", tick);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ff8:	4911      	ldr	r1, [pc, #68]	; (8001040 <Parser_Klebot+0x9c>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fcd4 	bl	80069a8 <siprintf>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ResponseCommand[0] = GET_TICK;
 8001006:	2308      	movs	r3, #8
 8001008:	733b      	strb	r3, [r7, #12]
		ResponseCommand[1] = HAL_GetTick();
 800100a:	f001 fd1d 	bl	8002a48 <HAL_GetTick>
 800100e:	4603      	mov	r3, r0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	737b      	strb	r3, [r7, #13]
		Radio_TxBufferPut(ResponseCommand, len + 1);
 8001014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f886 	bl	8001134 <Radio_TxBufferPut>

	default:
		Radio_TxBufferPut(command, length);
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f881 	bl	8001134 <Radio_TxBufferPut>
		//GFX_DrawString(0, 8, (char*)command, 1, 0);
		//SSD1306_Display();
		break;
 8001032:	bf00      	nop
	}
}
 8001034:	bf00      	nop
 8001036:	3738      	adds	r7, #56	; 0x38
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020400 	.word	0x40020400
 8001040:	08007308 	.word	0x08007308

08001044 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 ff77 	bl	8001f40 <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8001052:	4906      	ldr	r1, [pc, #24]	; (800106c <Radio_Init+0x28>)
 8001054:	2000      	movs	r0, #0
 8001056:	f000 fdc0 	bl	8001bda <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <Radio_Init+0x2c>)
 800105c:	f000 fdf6 	bl	8001c4c <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8001060:	f000 fbfa 	bl	8001858 <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800730c 	.word	0x0800730c
 8001070:	08007310 	.word	0x08007310

08001074 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001084:	2300      	movs	r3, #0
 8001086:	73bb      	strb	r3, [r7, #14]
 8001088:	e010      	b.n	80010ac <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Radio_RxBufferPut+0x4c>)
 8001092:	f7ff fa7b 	bl	800058c <RBuffer_Write>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4313      	orrs	r3, r2
 800109e:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73bb      	strb	r3, [r7, #14]
 80010ac:	7bba      	ldrb	r2, [r7, #14]
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3ea      	bcc.n	800108a <Radio_RxBufferPut+0x16>
	}
	return Status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000320 	.word	0x20000320

080010c4 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);			//Get first byte
 80010d6:	f107 030d 	add.w	r3, r7, #13
 80010da:	4619      	mov	r1, r3
 80010dc:	4814      	ldr	r0, [pc, #80]	; (8001130 <Radio_RxBufferGet+0x6c>)
 80010de:	f7ff fa81 	bl	80005e4 <RBuffer_Read>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 80010ec:	e012      	b.n	8001114 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	7b7a      	ldrb	r2, [r7, #13]
 80010f6:	701a      	strb	r2, [r3, #0]
		Length++;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3301      	adds	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);
 80010fe:	f107 030d 	add.w	r3, r7, #13
 8001102:	4619      	mov	r1, r3
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <Radio_RxBufferGet+0x6c>)
 8001106:	f7ff fa6d 	bl	80005e4 <RBuffer_Read>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	4313      	orrs	r3, r2
 8001112:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d002      	beq.n	8001120 <Radio_RxBufferGet+0x5c>
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0e6      	beq.n	80010ee <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	701a      	strb	r2, [r3, #0]
	return Status;
 8001126:	7bbb      	ldrb	r3, [r7, #14]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000320 	.word	0x20000320

08001134 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001144:	2300      	movs	r3, #0
 8001146:	73bb      	strb	r3, [r7, #14]
 8001148:	e010      	b.n	800116c <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <Radio_TxBufferPut+0x5c>)
 8001152:	f7ff fa1b 	bl	800058c <RBuffer_Write>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4313      	orrs	r3, r2
 800115e:	73fb      	strb	r3, [r7, #15]
		Command++;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3301      	adds	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	3301      	adds	r3, #1
 800116a:	73bb      	strb	r3, [r7, #14]
 800116c:	7bba      	ldrb	r2, [r7, #14]
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3ea      	bcc.n	800114a <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001174:	2104      	movs	r1, #4
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <Radio_TxBufferPut+0x5c>)
 8001178:	f7ff fa08 	bl	800058c <RBuffer_Write>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4313      	orrs	r3, r2
 8001184:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002fc 	.word	0x200002fc

08001194 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 80011a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011aa:	1d3a      	adds	r2, r7, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	4816      	ldr	r0, [pc, #88]	; (800120c <Radio_TxBufferSend+0x78>)
 80011b2:	f7ff fa17 	bl	80005e4 <RBuffer_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011be:	4313      	orrs	r3, r2
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 80011c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80011ce:	3328      	adds	r3, #40	; 0x28
 80011d0:	443b      	add	r3, r7
 80011d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d003      	beq.n	80011e2 <Radio_TxBufferSend+0x4e>
 80011da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0e1      	beq.n	80011a6 <Radio_TxBufferSend+0x12>
		TxStatus = RADIO_BUSY;
	}
#endif

#ifdef ROBOT
	if(Status == RADIO_OK)
 80011e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <Radio_TxBufferSend+0x6a>
	{
		nRF24_WriteAckPayload(0, DataToSend, Length);
 80011ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 fe5c 	bl	8001eb0 <nRF24_WriteAckPayload>
		TxStatus = RADIO_BUSY;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <Radio_TxBufferSend+0x7c>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
	}
#endif

	return Status;
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001202:	4618      	mov	r0, r3
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002fc 	.word	0x200002fc
 8001210:	200002f9 	.word	0x200002f9

08001214 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process( void (*UserParser)(uint8_t *command, uint8_t length) )			//Process to put in main loop
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	nRF24_Event();											//check for irq's
 800121c:	f000 fe68 	bl	8001ef0 <nRF24_Event>
		LastTick = HAL_GetTick();
	}
#endif

#ifdef ROBOT
	if(TxStatus == RADIO_OK)	//If Tx is free, send response
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <Radio_Process+0x54>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <Radio_Process+0x18>
	{
		Radio_TxBufferSend();	//send ack payload
 8001228:	f7ff ffb4 	bl	8001194 <Radio_TxBufferSend>
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <Radio_Process+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b03      	cmp	r3, #3
 8001232:	d114      	bne.n	800125e <Radio_Process+0x4a>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
		uint8_t ReceivedLength;
		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001234:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff40 	bl	80010c4 <Radio_RxBufferGet>
		if(UserParser != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <Radio_Process+0x44>
		{
			UserParser(ReceivedCommand,ReceivedLength);
 800124a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4610      	mov	r0, r2
 8001256:	4798      	blx	r3
		}
		RxStatus = RADIO_OK;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <Radio_Process+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	}
}
 800125e:	bf00      	nop
 8001260:	3730      	adds	r7, #48	; 0x30
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200002f9 	.word	0x200002f9
 800126c:	200002fa 	.word	0x200002fa

08001270 <nRF24_EventTxCallback>:

//
// -- INTERRUPT --
//
void nRF24_EventTxCallback(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <nRF24_EventTxCallback+0x1c>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <nRF24_EventTxCallback+0x20>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200002f9 	.word	0x200002f9
 8001290:	200002f8 	.word	0x200002f8

08001294 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
	RxStatus = RADIO_NEW_RX;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <nRF24_EventRxCallback+0x30>)
 800129c:	2203      	movs	r2, #3
 800129e:	701a      	strb	r2, [r3, #0]
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 80012a0:	1dfa      	adds	r2, r7, #7
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fd98 	bl	8001dde <nRF24_ReadRXPaylaod>
	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fedc 	bl	8001074 <Radio_RxBufferPut>
}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200002fa 	.word	0x200002fa

080012c8 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <nRF24_EventMrCallback+0x14>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	200002f8 	.word	0x200002f8

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f001 fb4a 	bl	800297c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f828 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f7ff fc46 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f7ff fc24 	bl	8000b3c <MX_DMA_Init>
  MX_I2C1_Init();
 80012f4:	f7ff fd14 	bl	8000d20 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012f8:	f7ff fd40 	bl	8000d7c <MX_I2C3_Init>
  MX_SPI2_Init();
 80012fc:	f000 feb2 	bl	8002064 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001300:	f001 fa28 	bl	8002754 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001304:	f7ff f99c 	bl	8000640 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001308:	f001 fa78 	bl	80027fc <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800130c:	f000 f87e 	bl	800140c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Radio_Init(&hspi2);
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <main+0x50>)
 8001312:	f7ff fe97 	bl	8001044 <Radio_Init>
  Inputs_Init();
 8001316:	f7ff faad 	bl	8000874 <Inputs_Init>
  OLED_Init(&hi2c3);
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <main+0x54>)
 800131c:	f000 ff56 	bl	80021cc <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Radio_Process(&Parser_Klebot);
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <main+0x58>)
 8001322:	f7ff ff77 	bl	8001214 <Radio_Process>
	  SimpleScheduler();
 8001326:	f000 fe97 	bl	8002058 <SimpleScheduler>
	  Inputs_ButtonsRoutine();
 800132a:	f7ff fb79 	bl	8000a20 <Inputs_ButtonsRoutine>
	  Radio_Process(&Parser_Klebot);
 800132e:	e7f7      	b.n	8001320 <main+0x40>
 8001330:	20000360 	.word	0x20000360
 8001334:	200002a4 	.word	0x200002a4
 8001338:	08000fa5 	.word	0x08000fa5

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	; 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2230      	movs	r2, #48	; 0x30
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f005 fb4c 	bl	80069e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <SystemClock_Config+0xc8>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a26      	ldr	r2, [pc, #152]	; (8001404 <SystemClock_Config+0xc8>)
 800136a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <SystemClock_Config+0xc8>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <SystemClock_Config+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a20      	ldr	r2, [pc, #128]	; (8001408 <SystemClock_Config+0xcc>)
 8001386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <SystemClock_Config+0xcc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013ac:	2308      	movs	r3, #8
 80013ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0320 	add.w	r3, r7, #32
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fb75 	bl	8004ab0 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013cc:	f000 f849 	bl	8001462 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2103      	movs	r1, #3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fdd7 	bl	8004fa0 <HAL_RCC_ClockConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013f8:	f000 f833 	bl	8001462 <Error_Handler>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3750      	adds	r7, #80	; 0x50
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f002 f93e 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800141a:	2028      	movs	r0, #40	; 0x28
 800141c:	f002 f957 	bl	80036ce <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2024      	movs	r0, #36	; 0x24
 8001426:	f002 f936 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800142a:	2024      	movs	r0, #36	; 0x24
 800142c:	f002 f94f 	bl	80036ce <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2012      	movs	r0, #18
 8001436:	f002 f92e 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800143a:	2012      	movs	r0, #18
 800143c:	f002 f947 	bl	80036ce <HAL_NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001454:	d101      	bne.n	800145a <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001456:	f000 fcd9 	bl	8001e0c <nRF24_IRQ_Handler>
	}

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001466:	b672      	cpsid	i
}
 8001468:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146a:	e7fe      	b.n	800146a <Error_Handler+0x8>

0800146c <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	if(LastMenuPtr == MenuCurrentMember) return;
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <Menu_RefreshScreen+0x164>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <Menu_RefreshScreen+0x168>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	f000 80a2 	beq.w	80015c8 <Menu_RefreshScreen+0x15c>

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001484:	e00c      	b.n	80014a0 <Menu_RefreshScreen+0x34>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001486:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <Menu_RefreshScreen+0x16c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4a54      	ldr	r2, [pc, #336]	; (80015dc <Menu_RefreshScreen+0x170>)
 800148c:	5cd2      	ldrb	r2, [r2, r3]
 800148e:	3201      	adds	r2, #1
 8001490:	b2d1      	uxtb	r1, r2
 8001492:	4a52      	ldr	r2, [pc, #328]	; (80015dc <Menu_RefreshScreen+0x170>)
 8001494:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001496:	4b52      	ldr	r3, [pc, #328]	; (80015e0 <Menu_RefreshScreen+0x174>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <Menu_RefreshScreen+0x174>)
 800149e:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 80014a0:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <Menu_RefreshScreen+0x16c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <Menu_RefreshScreen+0x178>)
 80014a8:	5c9b      	ldrb	r3, [r3, r2]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <Menu_RefreshScreen+0x16c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <Menu_RefreshScreen+0x170>)
 80014b4:	5c5b      	ldrb	r3, [r3, r1]
 80014b6:	3305      	adds	r3, #5
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dce4      	bgt.n	8001486 <Menu_RefreshScreen+0x1a>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 80014bc:	e00c      	b.n	80014d8 <Menu_RefreshScreen+0x6c>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 80014be:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <Menu_RefreshScreen+0x16c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4a46      	ldr	r2, [pc, #280]	; (80015dc <Menu_RefreshScreen+0x170>)
 80014c4:	5cd2      	ldrb	r2, [r2, r3]
 80014c6:	3a01      	subs	r2, #1
 80014c8:	b2d1      	uxtb	r1, r2
 80014ca:	4a44      	ldr	r2, [pc, #272]	; (80015dc <Menu_RefreshScreen+0x170>)
 80014cc:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 80014ce:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <Menu_RefreshScreen+0x174>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a42      	ldr	r2, [pc, #264]	; (80015e0 <Menu_RefreshScreen+0x174>)
 80014d6:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <Menu_RefreshScreen+0x16c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <Menu_RefreshScreen+0x178>)
 80014e0:	5c9a      	ldrb	r2, [r3, r2]
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <Menu_RefreshScreen+0x16c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <Menu_RefreshScreen+0x170>)
 80014ea:	5c5b      	ldrb	r3, [r3, r1]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d3e6      	bcc.n	80014be <Menu_RefreshScreen+0x52>
	}

	OLED_ClearBuffer(BLACK);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 ff75 	bl	80023e0 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 80014f6:	2100      	movs	r1, #0
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 feb7 	bl	800226c <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 80014fe:	2101      	movs	r1, #1
 8001500:	4839      	ldr	r0, [pc, #228]	; (80015e8 <Menu_RefreshScreen+0x17c>)
 8001502:	f001 f837 	bl	8002574 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <Menu_RefreshScreen+0x174>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 800150c:	e04f      	b.n	80015ae <Menu_RefreshScreen+0x142>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <Menu_RefreshScreen+0x168>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	d126      	bne.n	8001566 <Menu_RefreshScreen+0xfa>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fe5f 	bl	80001e0 <strlen>
 8001522:	4602      	mov	r2, r0
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	b2da      	uxtb	r2, r3
 800153e:	78bb      	ldrb	r3, [r7, #2]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fe92 	bl	800226c <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001548:	2101      	movs	r1, #1
 800154a:	4828      	ldr	r0, [pc, #160]	; (80015ec <Menu_RefreshScreen+0x180>)
 800154c:	f001 f812 	bl	8002574 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f80c 	bl	8002574 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 800155c:	2101      	movs	r1, #1
 800155e:	4824      	ldr	r0, [pc, #144]	; (80015f0 <Menu_RefreshScreen+0x184>)
 8001560:	f001 f808 	bl	8002574 <OLED_WriteString>
 8001564:	e01d      	b.n	80015a2 <Menu_RefreshScreen+0x136>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4602      	mov	r2, r0
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	3301      	adds	r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	b2da      	uxtb	r2, r3
 800158c:	78bb      	ldrb	r3, [r7, #2]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fe6b 	bl	800226c <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2101      	movs	r1, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f000 ffe9 	bl	8002574 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	3301      	adds	r3, #1
 80015a6:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d002      	beq.n	80015ba <Menu_RefreshScreen+0x14e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1a9      	bne.n	800150e <Menu_RefreshScreen+0xa2>
	}
	OLED_SendBuffer();
 80015ba:	f000 fee5 	bl	8002388 <OLED_SendBuffer>
	LastMenuPtr = MenuCurrentMember;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <Menu_RefreshScreen+0x168>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <Menu_RefreshScreen+0x164>)
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e000      	b.n	80015ca <Menu_RefreshScreen+0x15e>
	if(LastMenuPtr == MenuCurrentMember) return;
 80015c8:	bf00      	nop

}
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000350 	.word	0x20000350
 80015d4:	20000078 	.word	0x20000078
 80015d8:	2000034c 	.word	0x2000034c
 80015dc:	20000348 	.word	0x20000348
 80015e0:	2000007c 	.word	0x2000007c
 80015e4:	20000344 	.word	0x20000344
 80015e8:	08007344 	.word	0x08007344
 80015ec:	0800735c 	.word	0x0800735c
 80015f0:	08007360 	.word	0x08007360

080015f4 <Menu_Next>:

void Menu_Next(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <Menu_Next+0x54>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <Menu_Next+0x54>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <Menu_Next+0x54>)
 800160a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <Menu_Next+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <Menu_Next+0x5c>)
 8001612:	5cd2      	ldrb	r2, [r2, r3]
 8001614:	3201      	adds	r2, #1
 8001616:	b2d1      	uxtb	r1, r2
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <Menu_Next+0x5c>)
 800161a:	54d1      	strb	r1, [r2, r3]
 800161c:	e00f      	b.n	800163e <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <Menu_Next+0x54>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <Menu_Next+0x54>)
 8001626:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <Menu_Next+0x54>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f5      	bne.n	800161e <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <Menu_Next+0x58>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <Menu_Next+0x5c>)
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 800163e:	f7ff ff15 	bl	800146c <Menu_RefreshScreen>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000078 	.word	0x20000078
 800164c:	2000034c 	.word	0x2000034c
 8001650:	20000344 	.word	0x20000344

08001654 <Menu_Prev>:

void Menu_Prev(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <Menu_Prev+0x58>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01a      	beq.n	8001698 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <Menu_Prev+0x58>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <Menu_Prev+0x58>)
 800166a:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Menu_Prev+0x5c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <Menu_Prev+0x60>)
 8001672:	5cd2      	ldrb	r2, [r2, r3]
 8001674:	3a01      	subs	r2, #1
 8001676:	b2d1      	uxtb	r1, r2
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <Menu_Prev+0x60>)
 800167a:	54d1      	strb	r1, [r2, r3]
 800167c:	e011      	b.n	80016a2 <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <Menu_Prev+0x58>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <Menu_Prev+0x58>)
 8001686:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Menu_Prev+0x5c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <Menu_Prev+0x60>)
 800168e:	5cd2      	ldrb	r2, [r2, r3]
 8001690:	3201      	adds	r2, #1
 8001692:	b2d1      	uxtb	r1, r2
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <Menu_Prev+0x60>)
 8001696:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <Menu_Prev+0x58>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ed      	bne.n	800167e <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 80016a2:	f7ff fee3 	bl	800146c <Menu_RefreshScreen>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000078 	.word	0x20000078
 80016b0:	2000034c 	.word	0x2000034c
 80016b4:	20000344 	.word	0x20000344

080016b8 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 f9cb 	bl	8002a60 <HAL_Delay>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <nRF24_SendSpi+0x28>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	f003 feea 	bl	80054c6 <HAL_SPI_Transmit>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000354 	.word	0x20000354

08001700 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <nRF24_ReadSpi+0x28>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	b29a      	uxth	r2, r3
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	f004 f810 	bl	800573e <HAL_SPI_Receive>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000354 	.word	0x20000354

0800172c <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800173a:	2200      	movs	r2, #0
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <nRF24_ReadRegister+0x44>)
 8001740:	f002 fd0e 	bl	8004160 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001744:	1dfb      	adds	r3, r7, #7
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ffc3 	bl	80016d4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800174e:	f107 030f 	add.w	r3, r7, #15
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffd3 	bl	8001700 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800175a:	2201      	movs	r2, #1
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <nRF24_ReadRegister+0x44>)
 8001760:	f002 fcfe 	bl	8004160 <HAL_GPIO_WritePin>

	return result;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020800 	.word	0x40020800

08001774 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	4613      	mov	r3, r2
 8001782:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001788:	2200      	movs	r2, #0
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <nRF24_ReadRegisters+0x44>)
 800178e:	f002 fce7 	bl	8004160 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff9c 	bl	80016d4 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	4619      	mov	r1, r3
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ffad 	bl	8001700 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80017a6:	2201      	movs	r2, #1
 80017a8:	2140      	movs	r1, #64	; 0x40
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <nRF24_ReadRegisters+0x44>)
 80017ac:	f002 fcd8 	bl	8004160 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020800 	.word	0x40020800

080017bc <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80017da:	2200      	movs	r2, #0
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	4809      	ldr	r0, [pc, #36]	; (8001804 <nRF24_WriteRegister+0x48>)
 80017e0:	f002 fcbe 	bl	8004160 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2102      	movs	r1, #2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff72 	bl	80016d4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80017f0:	2201      	movs	r2, #1
 80017f2:	2140      	movs	r1, #64	; 0x40
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <nRF24_WriteRegister+0x48>)
 80017f6:	f002 fcb3 	bl	8004160 <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020800 	.word	0x40020800

08001808 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	b2db      	uxtb	r3, r3
 8001820:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001822:	2200      	movs	r2, #0
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <nRF24_WriteRegisters+0x4c>)
 8001828:	f002 fc9a 	bl	8004160 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff4f 	bl	80016d4 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	4619      	mov	r1, r3
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff ff4a 	bl	80016d4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001840:	2201      	movs	r2, #1
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <nRF24_WriteRegisters+0x4c>)
 8001846:	f002 fc8b 	bl	8004160 <HAL_GPIO_WritePin>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020800 	.word	0x40020800

08001858 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 800185e:	f000 f829 	bl	80018b4 <nRF24_ReadConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001866:	4911      	ldr	r1, [pc, #68]	; (80018ac <nRF24_RX_Mode+0x54>)
 8001868:	2000      	movs	r0, #0
 800186a:	f000 f9b6 	bl	8001bda <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f81f 	bl	80018c4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001886:	2070      	movs	r0, #112	; 0x70
 8001888:	f000 f877 	bl	800197a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800188c:	f000 f884 	bl	8001998 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001890:	f000 f89c 	bl	80019cc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001894:	2201      	movs	r2, #1
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <nRF24_RX_Mode+0x58>)
 800189a:	f002 fc61 	bl	8004160 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff ff0a 	bl	80016b8 <nRF24_Delay_ms>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000358 	.word	0x20000358
 80018b0:	40020800 	.word	0x40020800

080018b4 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ff37 	bl	800172c <nRF24_ReadRegister>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4619      	mov	r1, r3
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff ff72 	bl	80017bc <nRF24_WriteRegister>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80018ea:	2006      	movs	r0, #6
 80018ec:	f7ff ff1e 	bl	800172c <nRF24_ReadRegister>
 80018f0:	4603      	mov	r3, r0
 80018f2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	f023 0307 	bic.w	r3, r3, #7
 80018fa:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	b25a      	sxtb	r2, r3
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4313      	orrs	r3, r2
 8001908:	b25b      	sxtb	r3, r3
 800190a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	4619      	mov	r1, r3
 8001910:	2006      	movs	r0, #6
 8001912:	f7ff ff53 	bl	80017bc <nRF24_WriteRegister>
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001928:	2006      	movs	r0, #6
 800192a:	f7ff feff 	bl	800172c <nRF24_ReadRegister>
 800192e:	4603      	mov	r3, r0
 8001930:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001938:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d104      	bne.n	800194a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e006      	b.n	8001958 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d103      	bne.n	8001958 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	4619      	mov	r1, r3
 800195c:	2006      	movs	r0, #6
 800195e:	f7ff ff2d 	bl	80017bc <nRF24_WriteRegister>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800196e:	2007      	movs	r0, #7
 8001970:	f7ff fedc 	bl	800172c <nRF24_ReadRegister>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}

0800197a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4619      	mov	r1, r3
 8001988:	2007      	movs	r0, #7
 800198a:	f7ff ff17 	bl	80017bc <nRF24_WriteRegister>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800199e:	23e2      	movs	r3, #226	; 0xe2
 80019a0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80019a2:	2200      	movs	r2, #0
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <nRF24_FlushRX+0x30>)
 80019a8:	f002 fbda 	bl	8004160 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe8f 	bl	80016d4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80019b6:	2201      	movs	r2, #1
 80019b8:	2140      	movs	r1, #64	; 0x40
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <nRF24_FlushRX+0x30>)
 80019bc:	f002 fbd0 	bl	8004160 <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020800 	.word	0x40020800

080019cc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80019d2:	23e1      	movs	r3, #225	; 0xe1
 80019d4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80019d6:	2200      	movs	r2, #0
 80019d8:	2140      	movs	r1, #64	; 0x40
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <nRF24_FlushTX+0x30>)
 80019dc:	f002 fbc0 	bl	8004160 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	2101      	movs	r1, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe75 	bl	80016d4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80019ea:	2201      	movs	r2, #1
 80019ec:	2140      	movs	r1, #64	; 0x40
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <nRF24_FlushTX+0x30>)
 80019f0:	f002 fbb6 	bl	8004160 <HAL_GPIO_WritePin>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020800 	.word	0x40020800

08001a00 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001a0a:	f7ff ff53 	bl	80018b4 <nRF24_ReadConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e003      	b.n	8001a2a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	f023 0308 	bic.w	r3, r3, #8
 8001a28:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff49 	bl	80018c4 <nRF24_WriteConfig>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001a44:	f7ff ff36 	bl	80018b4 <nRF24_ReadConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d104      	bne.n	8001a5c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e003      	b.n	8001a64 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff2c 	bl	80018c4 <nRF24_WriteConfig>
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	b25a      	sxtb	r2, r3
 8001a8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2004      	movs	r0, #4
 8001a9e:	f7ff fe8d 	bl	80017bc <nRF24_WriteRegister>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	2005      	movs	r0, #5
 8001ac0:	f7ff fe7c 	bl	80017bc <nRF24_WriteRegister>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d901      	bls.n	8001ae6 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7ff fe20 	bl	800172c <nRF24_ReadRegister>
 8001aec:	4603      	mov	r3, r0
 8001aee:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10a      	bne.n	8001b0c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2201      	movs	r2, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e00b      	b.n	8001b24 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	b25a      	sxtb	r2, r3
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	4619      	mov	r1, r3
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7ff fe47 	bl	80017bc <nRF24_WriteRegister>
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460a      	mov	r2, r1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	4613      	mov	r3, r2
 8001b44:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d901      	bls.n	8001b50 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff fdeb 	bl	800172c <nRF24_ReadRegister>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001b5a:	79bb      	ldrb	r3, [r7, #6]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10a      	bne.n	8001b76 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2201      	movs	r2, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	b25a      	sxtb	r2, r3
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e00b      	b.n	8001b8e <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	4619      	mov	r1, r3
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fe12 	bl	80017bc <nRF24_WriteRegister>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d901      	bls.n	8001bb4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d801      	bhi.n	8001bbe <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001bba:	2303      	movs	r3, #3
 8001bbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	3b02      	subs	r3, #2
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f7ff fdf5 	bl	80017bc <nRF24_WriteRegister>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	6039      	str	r1, [r7, #0]
 8001be4:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <nRF24_SetRXAddress+0x18>
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d11d      	bne.n	8001c2e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e00d      	b.n	8001c14 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	f1c3 0302 	rsb	r3, r3, #2
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	3310      	adds	r3, #16
 8001c08:	443b      	add	r3, r7
 8001c0a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	3301      	adds	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d9ee      	bls.n	8001bf8 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	330a      	adds	r3, #10
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f107 010c 	add.w	r1, r7, #12
 8001c24:	2203      	movs	r2, #3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fdee 	bl	8001808 <nRF24_WriteRegisters>
	{
 8001c2c:	e00a      	b.n	8001c44 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	330a      	adds	r3, #10
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3302      	adds	r3, #2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7ff fdbd 	bl	80017bc <nRF24_WriteRegister>
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2203      	movs	r2, #3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f7ff fd89 	bl	8001774 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e00c      	b.n	8001c82 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f1c3 0302 	rsb	r3, r3, #2
 8001c70:	3210      	adds	r2, #16
 8001c72:	443a      	add	r2, r7
 8001c74:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001c78:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <nRF24_SetTXAddress+0x88>)
 8001c7a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d9ef      	bls.n	8001c68 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e00d      	b.n	8001caa <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	441a      	add	r2, r3
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f1c3 0302 	rsb	r3, r3, #2
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	443b      	add	r3, r7
 8001ca0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d9ee      	bls.n	8001c8e <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f7ff fda5 	bl	8001808 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	2010      	movs	r0, #16
 8001cc8:	f7ff fd9e 	bl	8001808 <nRF24_WriteRegisters>

}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000358 	.word	0x20000358

08001cd8 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001cde:	f7ff fe44 	bl	800196a <nRF24_ReadStatus>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fe42 	bl	800197a <nRF24_WriteStatus>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8001d08:	2060      	movs	r0, #96	; 0x60
 8001d0a:	f7ff fd0f 	bl	800172c <nRF24_ReadRegister>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d906      	bls.n	8001d26 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8001d18:	f7ff fe3e 	bl	8001998 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7ff fccb 	bl	80016b8 <nRF24_Delay_ms>
        return 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8001d26:	79fb      	ldrb	r3, [r7, #7]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001d3a:	f7ff fdbb 	bl	80018b4 <nRF24_ReadConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e003      	b.n	8001d5a <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d58:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fdb1 	bl	80018c4 <nRF24_WriteConfig>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001d74:	f7ff fd9e 	bl	80018b4 <nRF24_ReadConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	e003      	b.n	8001d94 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f023 0320 	bic.w	r3, r3, #32
 8001d92:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd94 	bl	80018c4 <nRF24_WriteConfig>
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001dae:	f7ff fd81 	bl	80018b4 <nRF24_ReadConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d104      	bne.n	8001dc6 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e003      	b.n	8001dce <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	f023 0310 	bic.w	r3, r3, #16
 8001dcc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fd77 	bl	80018c4 <nRF24_WriteConfig>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8001de8:	f7ff ff89 	bl	8001cfe <nRF24_GetDynamicPayloadSize>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	2061      	movs	r0, #97	; 0x61
 8001dfe:	f7ff fcb9 	bl	8001774 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <nRF24_IRQ_Handler+0x14>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	2000035e 	.word	0x2000035e

08001e24 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <nRF24_IRQ_Read+0x7c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d130      	bne.n	8001e96 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <nRF24_IRQ_Read+0x7c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8001e3a:	f7ff fd96 	bl	800196a <nRF24_ReadStatus>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <nRF24_IRQ_Read+0x80>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5c:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8001e5e:	79bb      	ldrb	r3, [r7, #6]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <nRF24_IRQ_Read+0x84>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f043 0320 	orr.w	r3, r3, #32
 8001e74:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <nRF24_IRQ_Read+0x88>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	f043 0310 	orr.w	r3, r3, #16
 8001e8c:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fd72 	bl	800197a <nRF24_WriteStatus>
	}
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000035e 	.word	0x2000035e
 8001ea4:	2000035b 	.word	0x2000035b
 8001ea8:	2000035c 	.word	0x2000035c
 8001eac:	2000035d 	.word	0x2000035d

08001eb0 <nRF24_WriteAckPayload>:

nRF24_TX_Status nRF24_WriteAckPayload(uint8_t pipe, uint8_t * data, uint8_t size)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	if(size > 32)
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d901      	bls.n	8001eca <nRF24_WriteAckPayload+0x1a>
			return NRF24_NO_TRANSMITTED_PACKET;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00d      	b.n	8001ee6 <nRF24_WriteAckPayload+0x36>
	pipe &= 0x07;
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegisters((NRF24_CMD_W_ACK_PAYLOAD | pipe), data, size);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	79ba      	ldrb	r2, [r7, #6]
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fc92 	bl	8001808 <nRF24_WriteRegisters>
	return NRF24_TRANSMITTED_PACKET;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8001ef4:	f7ff ff96 	bl	8001e24 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <nRF24_Event+0x44>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8001f00:	f7ff f9c8 	bl	8001294 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <nRF24_Event+0x44>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <nRF24_Event+0x48>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8001f12:	f7ff f9ad 	bl	8001270 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <nRF24_Event+0x48>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <nRF24_Event+0x4c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8001f24:	f7ff f9d0 	bl	80012c8 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <nRF24_Event+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
	}
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000035b 	.word	0x2000035b
 8001f38:	2000035c 	.word	0x2000035c
 8001f3c:	2000035d 	.word	0x2000035d

08001f40 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001f48:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <nRF24_Init+0xc4>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	482d      	ldr	r0, [pc, #180]	; (8002008 <nRF24_Init+0xc8>)
 8001f54:	f002 f904 	bl	8004160 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <nRF24_Init+0xc8>)
 8001f5e:	f002 f8ff 	bl	8004160 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8001f62:	2005      	movs	r0, #5
 8001f64:	f7ff fba8 	bl	80016b8 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f7ff fcb9 	bl	80018e0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7ff fcd5 	bl	800191e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff fd43 	bl	8001a00 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fd5d 	bl	8001a3a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001f80:	2107      	movs	r1, #7
 8001f82:	2004      	movs	r0, #4
 8001f84:	f7ff fd76 	bl	8001a74 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8001f88:	201d      	movs	r0, #29
 8001f8a:	f7ff fbcf 	bl	800172c <nRF24_ReadRegister>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4619      	mov	r1, r3
 8001f98:	201d      	movs	r0, #29
 8001f9a:	f7ff fc0f 	bl	80017bc <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8001f9e:	213f      	movs	r1, #63	; 0x3f
 8001fa0:	201c      	movs	r0, #28
 8001fa2:	f7ff fc0b 	bl	80017bc <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001fa6:	200a      	movs	r0, #10
 8001fa8:	f7ff fd7f 	bl	8001aaa <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001fac:	2101      	movs	r1, #1
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff fd8c 	bl	8001acc <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff fdbd 	bl	8001b36 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f7ff fdef 	bl	8001ba0 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff fb78 	bl	80016b8 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff feb1 	bl	8001d30 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fecb 	bl	8001d6a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff fee5 	bl	8001da4 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff fb6c 	bl	80016b8 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8001fe0:	f7ff fe7a 	bl	8001cd8 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8001fe4:	201d      	movs	r0, #29
 8001fe6:	f7ff fba1 	bl	800172c <nRF24_ReadRegister>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	201d      	movs	r0, #29
 8001ff6:	f7ff fbe1 	bl	80017bc <nRF24_WriteRegister>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000354 	.word	0x20000354
 8002008:	40020800 	.word	0x40020800

0800200c <MenuTask>:
//
//Programs
//

void MenuTask(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	static uint8_t FirstEnterFlag = 0;
	int8_t EncoderRotation = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	71fb      	strb	r3, [r7, #7]

	if(0 == FirstEnterFlag)
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MenuTask+0x48>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d104      	bne.n	8002028 <MenuTask+0x1c>
	{
		Menu_RefreshScreen();
 800201e:	f7ff fa25 	bl	800146c <Menu_RefreshScreen>
		FirstEnterFlag = 1;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MenuTask+0x48>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
	}

	EncoderRotation = Inputs_GetEncoderCount();
 8002028:	f7fe fcd0 	bl	80009cc <Inputs_GetEncoderCount>
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]

	if(EncoderRotation > 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	dd02      	ble.n	800203e <MenuTask+0x32>
	{
		Menu_Next();
 8002038:	f7ff fadc 	bl	80015f4 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 800203c:	e005      	b.n	800204a <MenuTask+0x3e>
	else if(EncoderRotation < 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da01      	bge.n	800204a <MenuTask+0x3e>
		Menu_Prev();
 8002046:	f7ff fb05 	bl	8001654 <Menu_Prev>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000035f 	.word	0x2000035f

08002058 <SimpleScheduler>:

void SimpleScheduler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	MenuTask();
 800205c:	f7ff ffd6 	bl	800200c <MenuTask>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_SPI2_Init+0x64>)
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <MX_SPI2_Init+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <MX_SPI2_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_SPI2_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002094:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <MX_SPI2_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020b0:	220a      	movs	r2, #10
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020b6:	f003 f97d 	bl	80053b4 <HAL_SPI_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80020c0:	f7ff f9cf 	bl	8001462 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000360 	.word	0x20000360
 80020cc:	40003800 	.word	0x40003800

080020d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_SPI_MspInit+0x84>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d12c      	bne.n	800214c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_SPI_MspInit+0x88>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_SPI_MspInit+0x88>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_SPI_MspInit+0x88>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_SPI_MspInit+0x88>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_SPI_MspInit+0x88>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_SPI_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800212a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800213c:	2305      	movs	r3, #5
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_SPI_MspInit+0x8c>)
 8002148:	f001 fe6e 	bl	8003e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40003800 	.word	0x40003800
 8002158:	40023800 	.word	0x40023800
 800215c:	40020400 	.word	0x40020400

08002160 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <OLED_SendCmdSequence+0x34>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	b29b      	uxth	r3, r3
 8002174:	2264      	movs	r2, #100	; 0x64
 8002176:	9202      	str	r2, [sp, #8]
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2301      	movs	r3, #1
 8002180:	2200      	movs	r2, #0
 8002182:	2178      	movs	r1, #120	; 0x78
 8002184:	f002 f97c 	bl	8004480 <HAL_I2C_Mem_Write>
 8002188:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200003b8 	.word	0x200003b8

08002198 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af04      	add	r7, sp, #16
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <OLED_SendData+0x30>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2301      	movs	r3, #1
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	2178      	movs	r1, #120	; 0x78
 80021ba:	f002 f961 	bl	8004480 <HAL_I2C_Mem_Write>
 80021be:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200003b8 	.word	0x200003b8

080021cc <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <OLED_Init+0x28>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <OLED_Init+0x2c>)
 80021dc:	f000 f916 	bl	800240c <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 80021e0:	2110      	movs	r1, #16
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <OLED_Init+0x30>)
 80021e4:	f7ff ffbc 	bl	8002160 <OLED_SendCmdSequence>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200003b8 	.word	0x200003b8
 80021f8:	08007364 	.word	0x08007364
 80021fc:	20000080 	.word	0x20000080

08002200 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	460a      	mov	r2, r1
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d802      	bhi.n	8002220 <OLED_SetDeviceCursor+0x20>
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d901      	bls.n	8002224 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e01f      	b.n	8002264 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	3302      	adds	r3, #2
 8002228:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	b2db      	uxtb	r3, r3
 8002232:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	b2db      	uxtb	r3, r3
 8002240:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002242:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	b25b      	sxtb	r3, r3
 800224c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	2103      	movs	r1, #3
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff7f 	bl	8002160 <OLED_SendCmdSequence>

	return Status;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	4613      	mov	r3, r2
 800227a:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db02      	blt.n	800228a <OLED_MoveCursor+0x1e>
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	2b3f      	cmp	r3, #63	; 0x3f
 8002288:	d901      	bls.n	800228e <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00b      	b.n	80022a6 <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <OLED_MoveCursor+0x48>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <OLED_MoveCursor+0x48>)
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	08db      	lsrs	r3, r3, #3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <OLED_MoveCursor+0x48>)
 80022a2:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200003bc 	.word	0x200003bc

080022b8 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e04f      	b.n	800236e <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 80022ce:	78bb      	ldrb	r3, [r7, #2]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d116      	bne.n	8002302 <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 80022dc:	789b      	ldrb	r3, [r3, #2]
 80022de:	01db      	lsls	r3, r3, #7
 80022e0:	4413      	add	r3, r2
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <OLED_WriteToBuffer+0xcc>)
 80022e4:	5cd1      	ldrb	r1, [r2, r3]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	01db      	lsls	r3, r3, #7
 80022f6:	4403      	add	r3, r0
 80022f8:	430a      	orrs	r2, r1
 80022fa:	b2d1      	uxtb	r1, r2
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <OLED_WriteToBuffer+0xcc>)
 80022fe:	54d1      	strb	r1, [r2, r3]
 8002300:	e020      	b.n	8002344 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002302:	78bb      	ldrb	r3, [r7, #2]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11b      	bne.n	8002340 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4413      	add	r3, r2
 8002316:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <OLED_WriteToBuffer+0xcc>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	b25a      	sxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b25b      	sxtb	r3, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	b25b      	sxtb	r3, r3
 8002326:	4013      	ands	r3, r2
 8002328:	b25a      	sxtb	r2, r3
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4619      	mov	r1, r3
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	01db      	lsls	r3, r3, #7
 8002336:	440b      	add	r3, r1
 8002338:	b2d1      	uxtb	r1, r2
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <OLED_WriteToBuffer+0xcc>)
 800233c:	54d1      	strb	r1, [r2, r3]
 800233e:	e001      	b.n	8002344 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e019      	b.n	8002378 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <OLED_WriteToBuffer+0xc8>)
 800234e:	7852      	ldrb	r2, [r2, #1]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff8a 	bl	800226c <OLED_MoveCursor>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00a      	b.n	8002378 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3301      	adds	r3, #1
 8002366:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	429a      	cmp	r2, r3
 8002374:	d3ab      	bcc.n	80022ce <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200003bc 	.word	0x200003bc
 8002384:	200003c8 	.word	0x200003c8

08002388 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	71bb      	strb	r3, [r7, #6]
 8002396:	e019      	b.n	80023cc <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	4619      	mov	r1, r3
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff ff2f 	bl	8002200 <OLED_SetDeviceCursor>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	01db      	lsls	r3, r3, #7
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <OLED_SendBuffer+0x54>)
 80023b2:	4413      	add	r3, r2
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff feee 	bl	8002198 <OLED_SendData>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 80023c6:	79bb      	ldrb	r3, [r7, #6]
 80023c8:	3301      	adds	r3, #1
 80023ca:	71bb      	strb	r3, [r7, #6]
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	2b07      	cmp	r3, #7
 80023d0:	d9e2      	bls.n	8002398 <OLED_SendBuffer+0x10>
	}
	return Status;
 80023d2:	79fb      	ldrb	r3, [r7, #7]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200003c8 	.word	0x200003c8

080023e0 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 80023ea:	79fa      	ldrb	r2, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f6:	4619      	mov	r1, r3
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <OLED_ClearBuffer+0x28>)
 80023fa:	f004 faf5 	bl	80069e8 <memset>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200003c8 	.word	0x200003c8

0800240c <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3301      	adds	r3, #1
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3302      	adds	r3, #2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	2b08      	cmp	r3, #8
 8002428:	d802      	bhi.n	8002430 <OLED_ChangeFont+0x24>
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b06      	cmp	r3, #6
 800242e:	d901      	bls.n	8002434 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e00e      	b.n	8002452 <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <OLED_ChangeFont+0x54>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <OLED_ChangeFont+0x54>)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <OLED_ChangeFont+0x54>)
 8002442:	7bbb      	ldrb	r3, [r7, #14]
 8002444:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3303      	adds	r3, #3
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <OLED_ChangeFont+0x54>)
 800244e:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200003c0 	.word	0x200003c0

08002464 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	460a      	mov	r2, r1
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	4613      	mov	r3, r2
 8002472:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002478:	79bb      	ldrb	r3, [r7, #6]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d901      	bls.n	8002482 <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06f      	b.n	8002562 <OLED_WriteChar+0xfe>
	}
	switch(character)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b0a      	cmp	r3, #10
 8002486:	d009      	beq.n	800249c <OLED_WriteChar+0x38>
 8002488:	2b0d      	cmp	r3, #13
 800248a:	d113      	bne.n	80024b4 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <OLED_WriteChar+0x108>)
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	4619      	mov	r1, r3
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff feea 	bl	800226c <OLED_MoveCursor>
 8002498:	4603      	mov	r3, r0
 800249a:	e062      	b.n	8002562 <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <OLED_WriteChar+0x108>)
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <OLED_WriteChar+0x108>)
 80024a2:	785b      	ldrb	r3, [r3, #1]
 80024a4:	3308      	adds	r3, #8
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7ff fede 	bl	800226c <OLED_MoveCursor>
 80024b0:	4603      	mov	r3, r0
 80024b2:	e056      	b.n	8002562 <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4a2e      	ldr	r2, [pc, #184]	; (8002570 <OLED_WriteChar+0x10c>)
 80024b8:	7912      	ldrb	r2, [r2, #4]
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <OLED_WriteChar+0x10c>)
 80024c0:	795b      	ldrb	r3, [r3, #5]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	fb12 f303 	smulbb	r3, r2, r3
 80024c8:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <OLED_WriteChar+0x10c>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	3304      	adds	r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 80024d6:	2300      	movs	r3, #0
 80024d8:	75bb      	strb	r3, [r7, #22]
 80024da:	e00c      	b.n	80024f6 <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 80024dc:	7dbb      	ldrb	r3, [r7, #22]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	3318      	adds	r3, #24
 80024e4:	443b      	add	r3, r7
 80024e6:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	3301      	adds	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 80024f0:	7dbb      	ldrb	r3, [r7, #22]
 80024f2:	3301      	adds	r3, #1
 80024f4:	75bb      	strb	r3, [r7, #22]
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <OLED_WriteChar+0x10c>)
 80024f8:	795b      	ldrb	r3, [r3, #5]
 80024fa:	7dba      	ldrb	r2, [r7, #22]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d3ed      	bcc.n	80024dc <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <OLED_WriteChar+0x10c>)
 8002502:	7959      	ldrb	r1, [r3, #5]
 8002504:	79ba      	ldrb	r2, [r7, #6]
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fed4 	bl	80022b8 <OLED_WriteToBuffer>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	4313      	orrs	r3, r2
 8002518:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <OLED_WriteChar+0x108>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <OLED_WriteChar+0x10c>)
 8002522:	795b      	ldrb	r3, [r3, #5]
 8002524:	4413      	add	r3, r2
 8002526:	2b7f      	cmp	r3, #127	; 0x7f
 8002528:	dd1a      	ble.n	8002560 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <OLED_WriteChar+0x108>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8002532:	2100      	movs	r1, #0
 8002534:	2000      	movs	r0, #0
 8002536:	f7ff fe99 	bl	800226c <OLED_MoveCursor>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	4313      	orrs	r3, r2
 8002542:	75fb      	strb	r3, [r7, #23]
 8002544:	e00c      	b.n	8002560 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <OLED_WriteChar+0x108>)
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	3308      	adds	r3, #8
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff fe8b 	bl	800226c <OLED_MoveCursor>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	4313      	orrs	r3, r2
 800255e:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 8002560:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200003bc 	.word	0x200003bc
 8002570:	200003c0 	.word	0x200003c0

08002574 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d910      	bls.n	80025ac <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e013      	b.n	80025b6 <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff64 	bl	8002464 <OLED_WriteChar>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	73fb      	strb	r3, [r7, #15]
		String++;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3301      	adds	r3, #1
 80025aa:	607b      	str	r3, [r7, #4]
	while(*String)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ec      	bne.n	800258e <OLED_WriteString+0x1a>
	}
	return Status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_MspInit+0x4c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_MspInit+0x4c>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_MspInit+0x4c>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_MspInit+0x4c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_MspInit+0x4c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <NMI_Handler+0x4>

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f000 f9e0 	bl	8002a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <ADC_IRQHandler+0x10>)
 800266a:	f000 fa60 	bl	8002b2e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000108 	.word	0x20000108

08002678 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800267e:	f003 ff31 	bl	80064e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000814 	.word	0x20000814

0800268c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <SPI2_IRQHandler+0x10>)
 8002692:	f003 fb07 	bl	8005ca4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000360 	.word	0x20000360

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80026a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026a8:	f001 fd8e 	bl	80041c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <DMA2_Stream0_IRQHandler+0x10>)
 80026b6:	f001 f94d 	bl	8003954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000150 	.word	0x20000150

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f004 f980 	bl	80069f8 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20020000 	.word	0x20020000
 8002724:	00000400 	.word	0x00000400
 8002728:	200007c8 	.word	0x200007c8
 800272c:	200009a8 	.word	0x200009a8

08002730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f004 f940 	bl	80069e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <MX_TIM3_Init+0xa0>)
 8002772:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <MX_TIM3_Init+0xa4>)
 8002774:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <MX_TIM3_Init+0xa0>)
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_TIM3_Init+0xa0>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <MX_TIM3_Init+0xa0>)
 8002784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002788:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_TIM3_Init+0xa0>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <MX_TIM3_Init+0xa0>)
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002796:	2301      	movs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800279e:	2301      	movs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ae:	2301      	movs	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	4619      	mov	r1, r3
 80027c0:	480c      	ldr	r0, [pc, #48]	; (80027f4 <MX_TIM3_Init+0xa0>)
 80027c2:	f003 fd5b 	bl	800627c <HAL_TIM_Encoder_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80027cc:	f7fe fe49 	bl	8001462 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_TIM3_Init+0xa0>)
 80027de:	f004 f861 	bl	80068a4 <HAL_TIMEx_MasterConfigSynchronization>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80027e8:	f7fe fe3b 	bl	8001462 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	3730      	adds	r7, #48	; 0x30
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200007cc 	.word	0x200007cc
 80027f8:	40000400 	.word	0x40000400

080027fc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <MX_TIM10_Init+0x44>)
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <MX_TIM10_Init+0x48>)
 8002804:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 24999;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_TIM10_Init+0x44>)
 8002808:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800280c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_TIM10_Init+0x44>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <MX_TIM10_Init+0x44>)
 8002816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_TIM10_Init+0x44>)
 800281e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002822:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_TIM10_Init+0x44>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_TIM10_Init+0x44>)
 800282c:	f003 fc7c 	bl	8006128 <HAL_TIM_Base_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8002836:	f7fe fe14 	bl	8001462 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000814 	.word	0x20000814
 8002844:	40014400 	.word	0x40014400

08002848 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_TIM_Encoder_MspInit+0x84>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12b      	bne.n	80028c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028b2:	2302      	movs	r3, #2
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80028be:	f001 fab3 	bl	8003e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_TIM_Base_MspInit+0x48>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d115      	bne.n	8002916 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_TIM_Base_MspInit+0x4c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <HAL_TIM_Base_MspInit+0x4c>)
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_TIM_Base_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	2019      	movs	r0, #25
 800290c:	f000 fec3 	bl	8003696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002910:	2019      	movs	r0, #25
 8002912:	f000 fedc 	bl	80036ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40014400 	.word	0x40014400
 8002924:	40023800 	.word	0x40023800

08002928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800292c:	480d      	ldr	r0, [pc, #52]	; (8002964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800292e:	490e      	ldr	r1, [pc, #56]	; (8002968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002944:	4c0b      	ldr	r4, [pc, #44]	; (8002974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002952:	f7ff feed 	bl	8002730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f004 f855 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295a:	f7fe fcc1 	bl	80012e0 <main>
  bx  lr    
 800295e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002968:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800296c:	0800760c 	.word	0x0800760c
  ldr r2, =_sbss
 8002970:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002974:	200009a8 	.word	0x200009a8

08002978 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <DMA1_Stream0_IRQHandler>
	...

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_Init+0x40>)
 8002986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_Init+0x40>)
 8002992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_Init+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_Init+0x40>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a4:	2003      	movs	r0, #3
 80029a6:	f000 fe6b 	bl	8003680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029aa:	200f      	movs	r0, #15
 80029ac:	f000 f808 	bl	80029c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b0:	f7ff fe06 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00

080029c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_InitTick+0x54>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x58>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4619      	mov	r1, r3
 80029d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fe83 	bl	80036ea <HAL_SYSTICK_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00e      	b.n	8002a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d80a      	bhi.n	8002a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f4:	2200      	movs	r2, #0
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f000 fe4b 	bl	8003696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a00:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <HAL_InitTick+0x5c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000090 	.word	0x20000090
 8002a18:	20000098 	.word	0x20000098
 8002a1c:	20000094 	.word	0x20000094

08002a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_IncTick+0x20>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x24>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_IncTick+0x24>)
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000098 	.word	0x20000098
 8002a44:	2000085c 	.word	0x2000085c

08002a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_GetTick+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	2000085c 	.word	0x2000085c

08002a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a68:	f7ff ffee 	bl	8002a48 <HAL_GetTick>
 8002a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d005      	beq.n	8002a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_Delay+0x44>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a86:	bf00      	nop
 8002a88:	f7ff ffde 	bl	8002a48 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d8f7      	bhi.n	8002a88 <HAL_Delay+0x28>
  {
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000098 	.word	0x20000098

08002aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e033      	b.n	8002b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd fe36 	bl	8000738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aee:	f023 0302 	bic.w	r3, r3, #2
 8002af2:	f043 0202 	orr.w	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fb68 	bl	80031d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
 8002b16:	e001      	b.n	8002b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d049      	beq.n	8002bf8 <HAL_ADC_IRQHandler+0xca>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d046      	beq.n	8002bf8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d12b      	bne.n	8002be8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d127      	bne.n	8002be8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d119      	bne.n	8002be8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0220 	bic.w	r2, r2, #32
 8002bc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fd fe8f 	bl	800090c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0212 	mvn.w	r2, #18
 8002bf6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d057      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x190>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d054      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d139      	bne.n	8002cae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d12b      	bne.n	8002cae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d124      	bne.n	8002cae <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11d      	bne.n	8002cae <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fc0c 	bl	80034cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 020c 	mvn.w	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d017      	beq.n	8002d04 <HAL_ADC_IRQHandler+0x1d6>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d014      	beq.n	8002d04 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10d      	bne.n	8002d04 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f925 	bl	8002f44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0201 	mvn.w	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d12:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x218>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f043 0202 	orr.w	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0220 	mvn.w	r2, #32
 8002d34:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f90e 	bl	8002f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0220 	mvn.w	r2, #32
 8002d44:	601a      	str	r2, [r3, #0]
  }
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_Start_DMA+0x1e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0ce      	b.n	8002f0c <HAL_ADC_Start_DMA+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d018      	beq.n	8002db6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d94:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_ADC_Start_DMA+0x1c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_ADC_Start_DMA+0x1c8>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9a      	lsrs	r2, r3, #18
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc4:	d107      	bne.n	8002dd6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	f040 8086 	bne.w	8002ef2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d106      	bne.n	8002e34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f023 0206 	bic.w	r2, r3, #6
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_ADC_Start_DMA+0x1cc>)
 8002e44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <HAL_ADC_Start_DMA+0x1d0>)
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_ADC_Start_DMA+0x1d4>)
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4a33      	ldr	r2, [pc, #204]	; (8002f28 <HAL_ADC_Start_DMA+0x1d8>)
 8002e5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	334c      	adds	r3, #76	; 0x4c
 8002e92:	4619      	mov	r1, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f000 fce2 	bl	8003860 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d129      	bne.n	8002f0a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	e020      	b.n	8002f0a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_ADC_Start_DMA+0x1dc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d11b      	bne.n	8002f0a <HAL_ADC_Start_DMA+0x1ba>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d114      	bne.n	8002f0a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	e00b      	b.n	8002f0a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000090 	.word	0x20000090
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	080033c9 	.word	0x080033c9
 8002f24:	08003483 	.word	0x08003483
 8002f28:	0800349f 	.word	0x0800349f
 8002f2c:	40012000 	.word	0x40012000

08002f30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1c>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e113      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x244>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d925      	bls.n	8002fe4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	3b1e      	subs	r3, #30
 8002fae:	2207      	movs	r2, #7
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	400a      	ands	r2, r1
 8002fbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68d9      	ldr	r1, [r3, #12]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4403      	add	r3, r0
 8002fd6:	3b1e      	subs	r3, #30
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	e022      	b.n	800302a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6919      	ldr	r1, [r3, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6919      	ldr	r1, [r3, #16]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	4603      	mov	r3, r0
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4403      	add	r3, r0
 8003020:	409a      	lsls	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b06      	cmp	r3, #6
 8003030:	d824      	bhi.n	800307c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	3b05      	subs	r3, #5
 8003044:	221f      	movs	r2, #31
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	400a      	ands	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b05      	subs	r3, #5
 800306e:	fa00 f203 	lsl.w	r2, r0, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	635a      	str	r2, [r3, #52]	; 0x34
 800307a:	e04c      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d824      	bhi.n	80030ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b23      	subs	r3, #35	; 0x23
 8003096:	221f      	movs	r2, #31
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43da      	mvns	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	400a      	ands	r2, r1
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	3b23      	subs	r3, #35	; 0x23
 80030c0:	fa00 f203 	lsl.w	r2, r0, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
 80030cc:	e023      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3b41      	subs	r3, #65	; 0x41
 80030e0:	221f      	movs	r2, #31
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	400a      	ands	r2, r1
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b41      	subs	r3, #65	; 0x41
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_ADC_ConfigChannel+0x250>)
 8003118:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10f      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x1d8>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b12      	cmp	r3, #18
 800312a:	d10b      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d12b      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x23a>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_ADC_ConfigChannel+0x258>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x1f4>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b11      	cmp	r3, #17
 800315e:	d122      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <HAL_ADC_ConfigChannel+0x258>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d111      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <HAL_ADC_ConfigChannel+0x260>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	0c9a      	lsrs	r2, r3, #18
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003198:	e002      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3b01      	subs	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f9      	bne.n	800319a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012300 	.word	0x40012300
 80031c0:	40012000 	.word	0x40012000
 80031c4:	10000012 	.word	0x10000012
 80031c8:	20000090 	.word	0x20000090
 80031cc:	431bde83 	.word	0x431bde83

080031d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <ADC_Init+0x1f0>)
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <ADC_Init+0x1f4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e00f      	b.n	80032ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0202 	bic.w	r2, r2, #2
 80032dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7e1b      	ldrb	r3, [r3, #24]
 80032e8:	005a      	lsls	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800331a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	3b01      	subs	r3, #1
 8003328:	035a      	lsls	r2, r3, #13
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e007      	b.n	8003344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	3b01      	subs	r3, #1
 8003360:	051a      	lsls	r2, r3, #20
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003386:	025a      	lsls	r2, r3, #9
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	029a      	lsls	r2, r3, #10
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012300 	.word	0x40012300
 80033c4:	0f000001 	.word	0x0f000001

080033c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d13c      	bne.n	800345c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d12b      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003400:	2b00      	cmp	r3, #0
 8003402:	d127      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800341c:	2b00      	cmp	r3, #0
 800341e:	d119      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0220 	bic.w	r2, r2, #32
 800342e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7fd fa59 	bl	800090c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800345a:	e00e      	b.n	800347a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff fd75 	bl	8002f58 <HAL_ADC_ErrorCallback>
}
 800346e:	e004      	b.n	800347a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fd4d 	bl	8002f30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0204 	orr.w	r2, r3, #4
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fd4a 	bl	8002f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800350c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003512:	4a04      	ldr	r2, [pc, #16]	; (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <__NVIC_GetPriorityGrouping+0x18>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 0307 	and.w	r3, r3, #7
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0b      	blt.n	800356e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4907      	ldr	r1, [pc, #28]	; (800357c <__NVIC_EnableIRQ+0x38>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2001      	movs	r0, #1
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db0a      	blt.n	80035aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	490c      	ldr	r1, [pc, #48]	; (80035cc <__NVIC_SetPriority+0x4c>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	440b      	add	r3, r1
 80035a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a8:	e00a      	b.n	80035c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4908      	ldr	r1, [pc, #32]	; (80035d0 <__NVIC_SetPriority+0x50>)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3b04      	subs	r3, #4
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	440b      	add	r3, r1
 80035be:	761a      	strb	r2, [r3, #24]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	bf28      	it	cs
 80035f2:	2304      	movcs	r3, #4
 80035f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d902      	bls.n	8003604 <NVIC_EncodePriority+0x30>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3b03      	subs	r3, #3
 8003602:	e000      	b.n	8003606 <NVIC_EncodePriority+0x32>
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	401a      	ands	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800361c:	f04f 31ff 	mov.w	r1, #4294967295
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43d9      	mvns	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	4313      	orrs	r3, r2
         );
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	; 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800364c:	d301      	bcc.n	8003652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <SysTick_Config+0x40>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365a:	210f      	movs	r1, #15
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f7ff ff8e 	bl	8003580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <SysTick_Config+0x40>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <SysTick_Config+0x40>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010

08003680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff29 	bl	80034e0 <__NVIC_SetPriorityGrouping>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a8:	f7ff ff3e 	bl	8003528 <__NVIC_GetPriorityGrouping>
 80036ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	6978      	ldr	r0, [r7, #20]
 80036b4:	f7ff ff8e 	bl	80035d4 <NVIC_EncodePriority>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ff5d 	bl	8003580 <__NVIC_SetPriority>
}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	4603      	mov	r3, r0
 80036d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff31 	bl	8003544 <__NVIC_EnableIRQ>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffa2 	bl	800363c <SysTick_Config>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff f99a 	bl	8002a48 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e099      	b.n	8003854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003740:	e00f      	b.n	8003762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003742:	f7ff f981 	bl	8002a48 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b05      	cmp	r3, #5
 800374e:	d908      	bls.n	8003762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2203      	movs	r2, #3
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e078      	b.n	8003854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e8      	bne.n	8003742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_DMA_Init+0x158>)
 800377c:	4013      	ands	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d107      	bne.n	80037cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	4313      	orrs	r3, r2
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0307 	bic.w	r3, r3, #7
 80037e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d117      	bne.n	8003826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fa91 	bl	8003d30 <DMA_CheckFifoParam>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2240      	movs	r2, #64	; 0x40
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003822:	2301      	movs	r3, #1
 8003824:	e016      	b.n	8003854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa48 	bl	8003cc4 <DMA_CalcBaseAndBitshift>
 8003834:	4603      	mov	r3, r0
 8003836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	223f      	movs	r2, #63	; 0x3f
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	f010803f 	.word	0xf010803f

08003860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_DMA_Start_IT+0x26>
 8003882:	2302      	movs	r3, #2
 8003884:	e040      	b.n	8003908 <HAL_DMA_Start_IT+0xa8>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d12f      	bne.n	80038fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9da 	bl	8003c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	223f      	movs	r2, #63	; 0x3f
 80038ba:	409a      	lsls	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0216 	orr.w	r2, r2, #22
 80038ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0208 	orr.w	r2, r2, #8
 80038e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e005      	b.n	8003906 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003902:	2302      	movs	r3, #2
 8003904:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d004      	beq.n	800392e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e00c      	b.n	8003948 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2205      	movs	r2, #5
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003960:	4b8e      	ldr	r3, [pc, #568]	; (8003b9c <HAL_DMA_IRQHandler+0x248>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a8e      	ldr	r2, [pc, #568]	; (8003ba0 <HAL_DMA_IRQHandler+0x24c>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0a9b      	lsrs	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2208      	movs	r2, #8
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01a      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2208      	movs	r2, #8
 80039ae:	409a      	lsls	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d012      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	2201      	movs	r2, #1
 80039e4:	409a      	lsls	r2, r3
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	2204      	movs	r2, #4
 80039fc:	409a      	lsls	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2204      	movs	r2, #4
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2210      	movs	r2, #16
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d043      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03c      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2210      	movs	r2, #16
 8003a50:	409a      	lsls	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d018      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d024      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
 8003a82:	e01f      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e016      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0208 	bic.w	r2, r2, #8
 8003ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	2220      	movs	r2, #32
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 808f 	beq.w	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8087 	beq.w	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2220      	movs	r2, #32
 8003aec:	409a      	lsls	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d136      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0216 	bic.w	r2, r2, #22
 8003b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x1da>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0208 	bic.w	r2, r2, #8
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	223f      	movs	r2, #63	; 0x3f
 8003b44:	409a      	lsls	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d07e      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
        }
        return;
 8003b6a:	e079      	b.n	8003c60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01d      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10d      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d031      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
 8003b98:	e02c      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
 8003b9a:	bf00      	nop
 8003b9c:	20000090 	.word	0x20000090
 8003ba0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d023      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
 8003bb4:	e01e      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10f      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0210 	bic.w	r2, r2, #16
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d032      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d022      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3301      	adds	r3, #1
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d307      	bcc.n	8003c3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f2      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x2cc>
 8003c3a:	e000      	b.n	8003c3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
 8003c5e:	e000      	b.n	8003c62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c60:	bf00      	nop
    }
  }
}
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d108      	bne.n	8003ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ca6:	e007      	b.n	8003cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	3b10      	subs	r3, #16
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <DMA_CalcBaseAndBitshift+0x64>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cde:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <DMA_CalcBaseAndBitshift+0x68>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d909      	bls.n	8003d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	659a      	str	r2, [r3, #88]	; 0x58
 8003d04:	e007      	b.n	8003d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	aaaaaaab 	.word	0xaaaaaaab
 8003d2c:	080075c0 	.word	0x080075c0

08003d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d11f      	bne.n	8003d8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d856      	bhi.n	8003dfe <DMA_CheckFifoParam+0xce>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <DMA_CheckFifoParam+0x28>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d69 	.word	0x08003d69
 8003d5c:	08003d7b 	.word	0x08003d7b
 8003d60:	08003d69 	.word	0x08003d69
 8003d64:	08003dff 	.word	0x08003dff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d046      	beq.n	8003e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d78:	e043      	b.n	8003e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d82:	d140      	bne.n	8003e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d88:	e03d      	b.n	8003e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d92:	d121      	bne.n	8003dd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d837      	bhi.n	8003e0a <DMA_CheckFifoParam+0xda>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <DMA_CheckFifoParam+0x70>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003db7 	.word	0x08003db7
 8003da8:	08003db1 	.word	0x08003db1
 8003dac:	08003dc9 	.word	0x08003dc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      break;
 8003db4:	e030      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d025      	beq.n	8003e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e022      	b.n	8003e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dd0:	d11f      	bne.n	8003e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dd6:	e01c      	b.n	8003e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d903      	bls.n	8003de6 <DMA_CheckFifoParam+0xb6>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d003      	beq.n	8003dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003de4:	e018      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dea:	e015      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e00b      	b.n	8003e16 <DMA_CheckFifoParam+0xe6>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e00a      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
 8003e04:	e008      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      break;
 8003e06:	bf00      	nop
 8003e08:	e006      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
    }
  } 
  
  return status; 
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop

08003e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e159      	b.n	80040f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e44:	2201      	movs	r2, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f040 8148 	bne.w	80040f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d005      	beq.n	8003e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d130      	bne.n	8003edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 0201 	and.w	r2, r3, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d017      	beq.n	8003f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d123      	bne.n	8003f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	08da      	lsrs	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3208      	adds	r2, #8
 8003f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	220f      	movs	r2, #15
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	08da      	lsrs	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3208      	adds	r2, #8
 8003f66:	69b9      	ldr	r1, [r7, #24]
 8003f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a2 	beq.w	80040f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b57      	ldr	r3, [pc, #348]	; (8004110 <HAL_GPIO_Init+0x2e8>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	4a56      	ldr	r2, [pc, #344]	; (8004110 <HAL_GPIO_Init+0x2e8>)
 8003fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fbe:	4b54      	ldr	r3, [pc, #336]	; (8004110 <HAL_GPIO_Init+0x2e8>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fca:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_GPIO_Init+0x2ec>)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0x202>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a48      	ldr	r2, [pc, #288]	; (800411c <HAL_GPIO_Init+0x2f4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_GPIO_Init+0x1fe>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a47      	ldr	r2, [pc, #284]	; (8004120 <HAL_GPIO_Init+0x2f8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_GPIO_Init+0x1fa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a46      	ldr	r2, [pc, #280]	; (8004124 <HAL_GPIO_Init+0x2fc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <HAL_GPIO_Init+0x1f6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a45      	ldr	r2, [pc, #276]	; (8004128 <HAL_GPIO_Init+0x300>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_GPIO_Init+0x1f2>
 8004016:	2304      	movs	r3, #4
 8004018:	e008      	b.n	800402c <HAL_GPIO_Init+0x204>
 800401a:	2307      	movs	r3, #7
 800401c:	e006      	b.n	800402c <HAL_GPIO_Init+0x204>
 800401e:	2303      	movs	r3, #3
 8004020:	e004      	b.n	800402c <HAL_GPIO_Init+0x204>
 8004022:	2302      	movs	r3, #2
 8004024:	e002      	b.n	800402c <HAL_GPIO_Init+0x204>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_GPIO_Init+0x204>
 800402a:	2300      	movs	r3, #0
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f002 0203 	and.w	r2, r2, #3
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	4093      	lsls	r3, r2
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800403c:	4935      	ldr	r1, [pc, #212]	; (8004114 <HAL_GPIO_Init+0x2ec>)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	3302      	adds	r3, #2
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_GPIO_Init+0x304>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800406e:	4a2f      	ldr	r2, [pc, #188]	; (800412c <HAL_GPIO_Init+0x304>)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_GPIO_Init+0x304>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_GPIO_Init+0x304>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <HAL_GPIO_Init+0x304>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040c2:	4a1a      	ldr	r2, [pc, #104]	; (800412c <HAL_GPIO_Init+0x304>)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_GPIO_Init+0x304>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ec:	4a0f      	ldr	r2, [pc, #60]	; (800412c <HAL_GPIO_Init+0x304>)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3301      	adds	r3, #1
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	f67f aea2 	bls.w	8003e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	40013800 	.word	0x40013800
 8004118:	40020000 	.word	0x40020000
 800411c:	40020400 	.word	0x40020400
 8004120:	40020800 	.word	0x40020800
 8004124:	40020c00 	.word	0x40020c00
 8004128:	40021000 	.word	0x40021000
 800412c:	40013c00 	.word	0x40013c00

08004130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e001      	b.n	8004152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
 800416c:	4613      	mov	r3, r2
 800416e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004170:	787b      	ldrb	r3, [r7, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800417c:	e003      	b.n	8004186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417e:	887b      	ldrh	r3, [r7, #2]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	619a      	str	r2, [r3, #24]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4013      	ands	r3, r2
 80041aa:	041a      	lsls	r2, r3, #16
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	400b      	ands	r3, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd f92c 	bl	8001444 <HAL_GPIO_EXTI_Callback>
  }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e12b      	b.n	8004462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fdda 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	; 0x24
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800424a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800425a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800425c:	f001 f896 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4a81      	ldr	r2, [pc, #516]	; (800446c <HAL_I2C_Init+0x274>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d807      	bhi.n	800427c <HAL_I2C_Init+0x84>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a80      	ldr	r2, [pc, #512]	; (8004470 <HAL_I2C_Init+0x278>)
 8004270:	4293      	cmp	r3, r2
 8004272:	bf94      	ite	ls
 8004274:	2301      	movls	r3, #1
 8004276:	2300      	movhi	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e006      	b.n	800428a <HAL_I2C_Init+0x92>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a7d      	ldr	r2, [pc, #500]	; (8004474 <HAL_I2C_Init+0x27c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	bf94      	ite	ls
 8004284:	2301      	movls	r3, #1
 8004286:	2300      	movhi	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0e7      	b.n	8004462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a78      	ldr	r2, [pc, #480]	; (8004478 <HAL_I2C_Init+0x280>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a6a      	ldr	r2, [pc, #424]	; (800446c <HAL_I2C_Init+0x274>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d802      	bhi.n	80042cc <HAL_I2C_Init+0xd4>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	3301      	adds	r3, #1
 80042ca:	e009      	b.n	80042e0 <HAL_I2C_Init+0xe8>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	4a69      	ldr	r2, [pc, #420]	; (800447c <HAL_I2C_Init+0x284>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	3301      	adds	r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	495c      	ldr	r1, [pc, #368]	; (800446c <HAL_I2C_Init+0x274>)
 80042fc:	428b      	cmp	r3, r1
 80042fe:	d819      	bhi.n	8004334 <HAL_I2C_Init+0x13c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1e59      	subs	r1, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fbb1 f3f3 	udiv	r3, r1, r3
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004314:	400b      	ands	r3, r1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_I2C_Init+0x138>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1e59      	subs	r1, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fbb1 f3f3 	udiv	r3, r1, r3
 8004328:	3301      	adds	r3, #1
 800432a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432e:	e051      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 8004330:	2304      	movs	r3, #4
 8004332:	e04f      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d111      	bne.n	8004360 <HAL_I2C_Init+0x168>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e58      	subs	r0, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e012      	b.n	8004386 <HAL_I2C_Init+0x18e>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1e58      	subs	r0, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	0099      	lsls	r1, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	fbb0 f3f3 	udiv	r3, r0, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Init+0x196>
 800438a:	2301      	movs	r3, #1
 800438c:	e022      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10e      	bne.n	80043b4 <HAL_I2C_Init+0x1bc>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1e58      	subs	r0, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	460b      	mov	r3, r1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	440b      	add	r3, r1
 80043a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b2:	e00f      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e58      	subs	r0, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	0099      	lsls	r1, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	6809      	ldr	r1, [r1, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6911      	ldr	r1, [r2, #16]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68d2      	ldr	r2, [r2, #12]
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	000186a0 	.word	0x000186a0
 8004470:	001e847f 	.word	0x001e847f
 8004474:	003d08ff 	.word	0x003d08ff
 8004478:	431bde83 	.word	0x431bde83
 800447c:	10624dd3 	.word	0x10624dd3

08004480 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	461a      	mov	r2, r3
 800448e:	4603      	mov	r3, r0
 8004490:	817b      	strh	r3, [r7, #10]
 8004492:	460b      	mov	r3, r1
 8004494:	813b      	strh	r3, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800449a:	f7fe fad5 	bl	8002a48 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	f040 80d9 	bne.w	8004660 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2319      	movs	r3, #25
 80044b4:	2201      	movs	r2, #1
 80044b6:	496d      	ldr	r1, [pc, #436]	; (800466c <HAL_I2C_Mem_Write+0x1ec>)
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f971 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0cc      	b.n	8004662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_Mem_Write+0x56>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0c5      	b.n	8004662 <HAL_I2C_Mem_Write+0x1e2>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d007      	beq.n	80044fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2221      	movs	r2, #33	; 0x21
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2240      	movs	r2, #64	; 0x40
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_I2C_Mem_Write+0x1f0>)
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800453e:	88f8      	ldrh	r0, [r7, #6]
 8004540:	893a      	ldrh	r2, [r7, #8]
 8004542:	8979      	ldrh	r1, [r7, #10]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	4603      	mov	r3, r0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f890 	bl	8004674 <I2C_RequestMemoryWrite>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d052      	beq.n	8004600 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e081      	b.n	8004662 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f9f2 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06b      	b.n	8004662 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d11b      	bne.n	8004600 <HAL_I2C_Mem_Write+0x180>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1aa      	bne.n	800455e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f9de 	bl	80049ce <I2C_WaitOnBTFFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2b04      	cmp	r3, #4
 800461e:	d107      	bne.n	8004630 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e016      	b.n	8004662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	00100002 	.word	0x00100002
 8004670:	ffff0000 	.word	0xffff0000

08004674 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f878 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c4:	d103      	bne.n	80046ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e05f      	b.n	8004792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	492d      	ldr	r1, [pc, #180]	; (800479c <I2C_RequestMemoryWrite+0x128>)
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f8b0 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e04c      	b.n	8004792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004710:	6a39      	ldr	r1, [r7, #32]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f91a 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	2b04      	cmp	r3, #4
 8004724:	d107      	bne.n	8004736 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e02b      	b.n	8004792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004740:	893b      	ldrh	r3, [r7, #8]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	611a      	str	r2, [r3, #16]
 800474a:	e021      	b.n	8004790 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	b29b      	uxth	r3, r3
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800475a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475c:	6a39      	ldr	r1, [r7, #32]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f8f4 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00d      	beq.n	8004786 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b04      	cmp	r3, #4
 8004770:	d107      	bne.n	8004782 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e005      	b.n	8004792 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004786:	893b      	ldrh	r3, [r7, #8]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	00010002 	.word	0x00010002

080047a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b0:	e025      	b.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d021      	beq.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe f945 	bl	8002a48 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d116      	bne.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e023      	b.n	8004846 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10d      	bne.n	8004824 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	43da      	mvns	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	e00c      	b.n	800483e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d0b6      	beq.n	80047b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800485c:	e051      	b.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d123      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004886:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e046      	b.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d021      	beq.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fe f8c3 	bl	8002a48 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e020      	b.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e00b      	b.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	43da      	mvns	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d18d      	bne.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004958:	e02d      	b.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f878 	bl	8004a50 <I2C_IsAcknowledgeFailed>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e02d      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d021      	beq.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7fe f869 	bl	8002a48 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e007      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d1ca      	bne.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049da:	e02d      	b.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f837 	bl	8004a50 <I2C_IsAcknowledgeFailed>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e02d      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d021      	beq.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fe f828 	bl	8002a48 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d1ca      	bne.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d11b      	bne.n	8004aa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e267      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d075      	beq.n	8004bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ada:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d112      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	4b7e      	ldr	r3, [pc, #504]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05b      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x108>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d157      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e242      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x74>
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x98>
 8004b2e:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6f      	ldr	r2, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b6d      	ldr	r3, [pc, #436]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6c      	ldr	r2, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a68      	ldr	r2, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd ff6e 	bl	8002a48 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fd ff6a 	bl	8002a48 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e207      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xc0>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fd ff5a 	bl	8002a48 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fd ff56 	bl	8002a48 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e1f3      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	4b51      	ldr	r3, [pc, #324]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0xe8>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d063      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x152>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1c7      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4937      	ldr	r1, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e03a      	b.n	8004c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <HAL_RCC_OscConfig+0x244>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fd ff0f 	bl	8002a48 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7fd ff0b 	bl	8002a48 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e1a8      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4925      	ldr	r1, [pc, #148]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
 8004c60:	e015      	b.n	8004c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x244>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd feee 	bl	8002a48 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c70:	f7fd feea 	bl	8002a48 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e187      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d036      	beq.n	8004d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCC_OscConfig+0x248>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fd fece 	bl	8002a48 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fd feca 	bl	8002a48 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e167      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x200>
 8004cce:	e01b      	b.n	8004d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_OscConfig+0x248>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd feb7 	bl	8002a48 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	e00e      	b.n	8004cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd feb3 	bl	8002a48 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d907      	bls.n	8004cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e150      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	42470000 	.word	0x42470000
 8004cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b88      	ldr	r3, [pc, #544]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ea      	bne.n	8004cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8097 	beq.w	8004e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b81      	ldr	r3, [pc, #516]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b7d      	ldr	r3, [pc, #500]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b7a      	ldr	r3, [pc, #488]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b77      	ldr	r3, [pc, #476]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a73      	ldr	r2, [pc, #460]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fe73 	bl	8002a48 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd fe6f 	bl	8002a48 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e10c      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b6a      	ldr	r3, [pc, #424]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x2ea>
 8004d8c:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a63      	ldr	r2, [pc, #396]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e01c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x324>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x30c>
 8004da2:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a5e      	ldr	r2, [pc, #376]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a5b      	ldr	r2, [pc, #364]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x324>
 8004dbc:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a57      	ldr	r2, [pc, #348]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a54      	ldr	r2, [pc, #336]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd fe34 	bl	8002a48 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd fe30 	bl	8002a48 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0cb      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ee      	beq.n	8004de4 <HAL_RCC_OscConfig+0x334>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e08:	f7fd fe1e 	bl	8002a48 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fd fe1a 	bl	8002a48 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0b5      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4a38      	ldr	r2, [pc, #224]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80a1 	beq.w	8004f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e4e:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d05c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d141      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fdee 	bl	8002a48 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fdea 	bl	8002a48 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e087      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	491b      	ldr	r1, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fd fdc3 	bl	8002a48 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fd fdbf 	bl	8002a48 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e05c      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x416>
 8004ee4:	e054      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fd fdac 	bl	8002a48 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd fda8 	bl	8002a48 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e045      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x444>
 8004f12:	e03d      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e038      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40007000 	.word	0x40007000
 8004f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_RCC_OscConfig+0x4ec>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d028      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d121      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d11a      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d111      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	3b01      	subs	r3, #1
 8004f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800

08004fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0cc      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d90c      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b63      	ldr	r3, [pc, #396]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b8      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a52      	ldr	r2, [pc, #328]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	494d      	ldr	r1, [pc, #308]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d044      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d119      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e07f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d003      	beq.n	800505e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	4b3f      	ldr	r3, [pc, #252]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e06f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e067      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4934      	ldr	r1, [pc, #208]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005090:	f7fd fcda 	bl	8002a48 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fd fcd6 	bl	8002a48 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e04f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d20c      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b22      	ldr	r3, [pc, #136]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e032      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	490e      	ldr	r1, [pc, #56]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005126:	f000 f821 	bl	800516c <HAL_RCC_GetSysClockFreq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fc3a 	bl	80029c0 <HAL_InitTick>

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023c00 	.word	0x40023c00
 800515c:	40023800 	.word	0x40023800
 8005160:	080075a8 	.word	0x080075a8
 8005164:	20000090 	.word	0x20000090
 8005168:	20000094 	.word	0x20000094

0800516c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b094      	sub	sp, #80	; 0x50
 8005172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
 8005178:	2300      	movs	r3, #0
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517c:	2300      	movs	r3, #0
 800517e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005184:	4b79      	ldr	r3, [pc, #484]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d00d      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x40>
 8005190:	2b08      	cmp	r3, #8
 8005192:	f200 80e1 	bhi.w	8005358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x34>
 800519a:	2b04      	cmp	r3, #4
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800519e:	e0db      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b73      	ldr	r3, [pc, #460]	; (8005370 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051a4:	e0db      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a6:	4b72      	ldr	r3, [pc, #456]	; (8005370 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051aa:	e0d8      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ac:	4b6f      	ldr	r3, [pc, #444]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d063      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c2:	4b6a      	ldr	r3, [pc, #424]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	2200      	movs	r2, #0
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80051cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	2300      	movs	r3, #0
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
 80051da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051de:	4622      	mov	r2, r4
 80051e0:	462b      	mov	r3, r5
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f04f 0100 	mov.w	r1, #0
 80051ea:	0159      	lsls	r1, r3, #5
 80051ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f0:	0150      	lsls	r0, r2, #5
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4621      	mov	r1, r4
 80051f8:	1a51      	subs	r1, r2, r1
 80051fa:	6139      	str	r1, [r7, #16]
 80051fc:	4629      	mov	r1, r5
 80051fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005210:	4659      	mov	r1, fp
 8005212:	018b      	lsls	r3, r1, #6
 8005214:	4651      	mov	r1, sl
 8005216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800521a:	4651      	mov	r1, sl
 800521c:	018a      	lsls	r2, r1, #6
 800521e:	4651      	mov	r1, sl
 8005220:	ebb2 0801 	subs.w	r8, r2, r1
 8005224:	4659      	mov	r1, fp
 8005226:	eb63 0901 	sbc.w	r9, r3, r1
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523e:	4690      	mov	r8, r2
 8005240:	4699      	mov	r9, r3
 8005242:	4623      	mov	r3, r4
 8005244:	eb18 0303 	adds.w	r3, r8, r3
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	462b      	mov	r3, r5
 800524c:	eb49 0303 	adc.w	r3, r9, r3
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800525e:	4629      	mov	r1, r5
 8005260:	028b      	lsls	r3, r1, #10
 8005262:	4621      	mov	r1, r4
 8005264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005268:	4621      	mov	r1, r4
 800526a:	028a      	lsls	r2, r1, #10
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005272:	2200      	movs	r2, #0
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800527c:	f7fb f808 	bl	8000290 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4613      	mov	r3, r2
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	e058      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528a:	4b38      	ldr	r3, [pc, #224]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	2200      	movs	r2, #0
 8005292:	4618      	mov	r0, r3
 8005294:	4611      	mov	r1, r2
 8005296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800529a:	623b      	str	r3, [r7, #32]
 800529c:	2300      	movs	r3, #0
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
 80052a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	f04f 0100 	mov.w	r1, #0
 80052b0:	0159      	lsls	r1, r3, #5
 80052b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052b6:	0150      	lsls	r0, r2, #5
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4641      	mov	r1, r8
 80052be:	ebb2 0a01 	subs.w	sl, r2, r1
 80052c2:	4649      	mov	r1, r9
 80052c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052dc:	ebb2 040a 	subs.w	r4, r2, sl
 80052e0:	eb63 050b 	sbc.w	r5, r3, fp
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	00eb      	lsls	r3, r5, #3
 80052ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f2:	00e2      	lsls	r2, r4, #3
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	4643      	mov	r3, r8
 80052fa:	18e3      	adds	r3, r4, r3
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	464b      	mov	r3, r9
 8005300:	eb45 0303 	adc.w	r3, r5, r3
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005312:	4629      	mov	r1, r5
 8005314:	028b      	lsls	r3, r1, #10
 8005316:	4621      	mov	r1, r4
 8005318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800531c:	4621      	mov	r1, r4
 800531e:	028a      	lsls	r2, r1, #10
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	2200      	movs	r2, #0
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	61fa      	str	r2, [r7, #28]
 800532c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005330:	f7fa ffae 	bl	8000290 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800534c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800534e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005356:	e002      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetSysClockFreq+0x204>)
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800535c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800535e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005360:	4618      	mov	r0, r3
 8005362:	3750      	adds	r7, #80	; 0x50
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536a:	bf00      	nop
 800536c:	40023800 	.word	0x40023800
 8005370:	00f42400 	.word	0x00f42400

08005374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000090 	.word	0x20000090

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4903      	ldr	r1, [pc, #12]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	080075b8 	.word	0x080075b8

080053b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07b      	b.n	80054be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d6:	d009      	beq.n	80053ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]
 80053de:	e005      	b.n	80053ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc fe62 	bl	80020d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	ea42 0103 	orr.w	r1, r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	f003 0104 	and.w	r1, r3, #4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0210 	and.w	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_SPI_Transmit+0x22>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e126      	b.n	8005736 <HAL_SPI_Transmit+0x270>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f0:	f7fd faaa 	bl	8002a48 <HAL_GetTick>
 80054f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005506:	2302      	movs	r3, #2
 8005508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800550a:	e10b      	b.n	8005724 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_Transmit+0x52>
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800551c:	e102      	b.n	8005724 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2203      	movs	r2, #3
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	d10f      	bne.n	8005586 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005584:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d14b      	bne.n	8005646 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_Transmit+0xf6>
 80055b6:	8afb      	ldrh	r3, [r7, #22]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d13e      	bne.n	800563a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055e0:	e02b      	b.n	800563a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d112      	bne.n	8005616 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	1c9a      	adds	r2, r3, #2
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	86da      	strh	r2, [r3, #54]	; 0x36
 8005614:	e011      	b.n	800563a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005616:	f7fd fa17 	bl	8002a48 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d803      	bhi.n	800562e <HAL_SPI_Transmit+0x168>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d102      	bne.n	8005634 <HAL_SPI_Transmit+0x16e>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005638:	e074      	b.n	8005724 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ce      	bne.n	80055e2 <HAL_SPI_Transmit+0x11c>
 8005644:	e04c      	b.n	80056e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_Transmit+0x18e>
 800564e:	8afb      	ldrh	r3, [r7, #22]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d140      	bne.n	80056d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800567a:	e02c      	b.n	80056d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d113      	bne.n	80056b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	7812      	ldrb	r2, [r2, #0]
 8005696:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80056b0:	e011      	b.n	80056d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b2:	f7fd f9c9 	bl	8002a48 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d803      	bhi.n	80056ca <HAL_SPI_Transmit+0x204>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_Transmit+0x20a>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056d4:	e026      	b.n	8005724 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1cd      	bne.n	800567c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fcdd 	bl	80060a4 <SPI_EndRxTxTransaction>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e000      	b.n	8005724 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005734:	7ffb      	ldrb	r3, [r7, #31]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b088      	sub	sp, #32
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800575a:	d112      	bne.n	8005782 <HAL_SPI_Receive+0x44>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10e      	bne.n	8005782 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2204      	movs	r2, #4
 8005768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800576c:	88fa      	ldrh	r2, [r7, #6]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	4613      	mov	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f8f1 	bl	8005960 <HAL_SPI_TransmitReceive>
 800577e:	4603      	mov	r3, r0
 8005780:	e0ea      	b.n	8005958 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_SPI_Receive+0x52>
 800578c:	2302      	movs	r3, #2
 800578e:	e0e3      	b.n	8005958 <HAL_SPI_Receive+0x21a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005798:	f7fd f956 	bl	8002a48 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057ae:	e0ca      	b.n	8005946 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Receive+0x7e>
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c0:	e0c1      	b.n	8005946 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2204      	movs	r2, #4
 80057c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005808:	d10f      	bne.n	800582a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d007      	beq.n	8005848 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005846:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d162      	bne.n	8005916 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005850:	e02e      	b.n	80058b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d115      	bne.n	800588c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f103 020c 	add.w	r2, r3, #12
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	7812      	ldrb	r2, [r2, #0]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800588a:	e011      	b.n	80058b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588c:	f7fd f8dc 	bl	8002a48 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d803      	bhi.n	80058a4 <HAL_SPI_Receive+0x166>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d102      	bne.n	80058aa <HAL_SPI_Receive+0x16c>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058ae:	e04a      	b.n	8005946 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1cb      	bne.n	8005852 <HAL_SPI_Receive+0x114>
 80058ba:	e031      	b.n	8005920 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d113      	bne.n	80058f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	b292      	uxth	r2, r2
 80058d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f0:	e011      	b.n	8005916 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f2:	f7fd f8a9 	bl	8002a48 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d803      	bhi.n	800590a <HAL_SPI_Receive+0x1cc>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d102      	bne.n	8005910 <HAL_SPI_Receive+0x1d2>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005914:	e017      	b.n	8005946 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1cd      	bne.n	80058bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fb57 	bl	8005fd8 <SPI_EndRxTransaction>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
 8005942:	e000      	b.n	8005946 <HAL_SPI_Receive+0x208>
  }

error :
 8005944:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005956:	7dfb      	ldrb	r3, [r7, #23]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	; 0x30
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800596e:	2301      	movs	r3, #1
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x26>
 8005982:	2302      	movs	r3, #2
 8005984:	e18a      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x33c>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598e:	f7fd f85b 	bl	8002a48 <HAL_GetTick>
 8005992:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059a4:	887b      	ldrh	r3, [r7, #2]
 80059a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d00f      	beq.n	80059d0 <HAL_SPI_TransmitReceive+0x70>
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b6:	d107      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x68>
 80059c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d003      	beq.n	80059d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059ce:	e15b      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x82>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x82>
 80059dc:	887b      	ldrh	r3, [r7, #2]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059e8:	e14e      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d003      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2205      	movs	r2, #5
 80059fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	887a      	ldrh	r2, [r7, #2]
 8005a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	887a      	ldrh	r2, [r7, #2]
 8005a26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d007      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d178      	bne.n	8005b4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x10a>
 8005a64:	8b7b      	ldrh	r3, [r7, #26]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d166      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a8e:	e053      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d11b      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x176>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d016      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x176>
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d113      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	881a      	ldrh	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d119      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x1b8>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d014      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	b292      	uxth	r2, r2
 8005afa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b14:	2301      	movs	r3, #1
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b18:	f7fc ff96 	bl	8002a48 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d807      	bhi.n	8005b38 <HAL_SPI_TransmitReceive+0x1d8>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d003      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b36:	e0a7      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1a6      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x130>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1a1      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x130>
 8005b4c:	e07c      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x1fc>
 8005b56:	8b7b      	ldrh	r3, [r7, #26]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d16b      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b82:	e057      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d11c      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x26c>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d017      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x26c>
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d114      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	7812      	ldrb	r2, [r2, #0]
 8005bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d119      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x2ae>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d014      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c0e:	f7fc ff1b 	bl	8002a48 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d803      	bhi.n	8005c26 <HAL_SPI_TransmitReceive+0x2c6>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x2cc>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c32:	e029      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1a2      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x224>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d19d      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fa29 	bl	80060a4 <SPI_EndRxTxTransaction>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c64:	e010      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	e000      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3730      	adds	r7, #48	; 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10e      	bne.n	8005ce4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	4798      	blx	r3
    return;
 8005ce2:	e0ce      	b.n	8005e82 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_SPI_IRQHandler+0x5e>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
    return;
 8005d00:	e0bf      	b.n	8005e82 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <HAL_SPI_IRQHandler+0x7e>
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d105      	bne.n	8005d22 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80b0 	beq.w	8005e82 <HAL_SPI_IRQHandler+0x1de>
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80aa 	beq.w	8005e82 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d023      	beq.n	8005d80 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d011      	beq.n	8005d68 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	f043 0204 	orr.w	r2, r3, #4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	e00b      	b.n	8005d80 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
        return;
 8005d7e:	e080      	b.n	8005e82 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	f043 0201 	orr.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0208 	orr.w	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d04f      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <HAL_SPI_IRQHandler+0x168>
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d034      	beq.n	8005e76 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0203 	bic.w	r2, r2, #3
 8005e1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d011      	beq.n	8005e48 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e28:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_SPI_IRQHandler+0x1e4>)
 8005e2a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fd fd6d 	bl	8003910 <HAL_DMA_Abort_IT>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e54:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <HAL_SPI_IRQHandler+0x1e4>)
 8005e56:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fd fd57 	bl	8003910 <HAL_DMA_Abort_IT>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005e74:	e003      	b.n	8005e7e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f808 	bl	8005e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e7c:	e000      	b.n	8005e80 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005e7e:	bf00      	nop
    return;
 8005e80:	bf00      	nop
  }
}
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08005ea1 	.word	0x08005ea1

08005e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff ffe6 	bl	8005e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ed8:	f7fc fdb6 	bl	8002a48 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ee8:	f7fc fdae 	bl	8002a48 <HAL_GetTick>
 8005eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005eee:	4b39      	ldr	r3, [pc, #228]	; (8005fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	015b      	lsls	r3, r3, #5
 8005ef4:	0d1b      	lsrs	r3, r3, #20
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	fb02 f303 	mul.w	r3, r2, r3
 8005efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005efe:	e054      	b.n	8005faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d050      	beq.n	8005faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f08:	f7fc fd9e 	bl	8002a48 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d902      	bls.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d13d      	bne.n	8005f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f36:	d111      	bne.n	8005f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f40:	d004      	beq.n	8005f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	d107      	bne.n	8005f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f64:	d10f      	bne.n	8005f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e017      	b.n	8005fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	bf0c      	ite	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	2300      	movne	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d19b      	bne.n	8005f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000090 	.word	0x20000090

08005fd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fec:	d111      	bne.n	8006012 <SPI_EndRxTransaction+0x3a>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff6:	d004      	beq.n	8006002 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006000:	d107      	bne.n	8006012 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601a:	d12a      	bne.n	8006072 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006024:	d012      	beq.n	800604c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff ff49 	bl	8005ec8 <SPI_WaitFlagStateUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d02d      	beq.n	8006098 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e026      	b.n	800609a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	2101      	movs	r1, #1
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ff36 	bl	8005ec8 <SPI_WaitFlagStateUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01a      	beq.n	8006098 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e013      	b.n	800609a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2200      	movs	r2, #0
 800607a:	2101      	movs	r1, #1
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff ff23 	bl	8005ec8 <SPI_WaitFlagStateUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e000      	b.n	800609a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <SPI_EndRxTxTransaction+0x7c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <SPI_EndRxTxTransaction+0x80>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	0d5b      	lsrs	r3, r3, #21
 80060bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060c0:	fb02 f303 	mul.w	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ce:	d112      	bne.n	80060f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fef4 	bl	8005ec8 <SPI_WaitFlagStateUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e00f      	b.n	8006116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3b01      	subs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b80      	cmp	r3, #128	; 0x80
 800610e:	d0f2      	beq.n	80060f6 <SPI_EndRxTxTransaction+0x52>
 8006110:	e000      	b.n	8006114 <SPI_EndRxTxTransaction+0x70>
        break;
 8006112:	bf00      	nop
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000090 	.word	0x20000090
 8006124:	165e9f81 	.word	0x165e9f81

08006128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e041      	b.n	80061be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fc fbc2 	bl	80028d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f000 faf6 	bl	8006758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d001      	beq.n	80061e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e03c      	b.n	800625a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_TIM_Base_Start+0xa0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_TIM_Base_Start+0x5c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d013      	beq.n	8006224 <HAL_TIM_Base_Start+0x5c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1a      	ldr	r2, [pc, #104]	; (800626c <HAL_TIM_Base_Start+0xa4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start+0x5c>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a19      	ldr	r2, [pc, #100]	; (8006270 <HAL_TIM_Base_Start+0xa8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start+0x5c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a17      	ldr	r2, [pc, #92]	; (8006274 <HAL_TIM_Base_Start+0xac>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start+0x5c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a16      	ldr	r2, [pc, #88]	; (8006278 <HAL_TIM_Base_Start+0xb0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d111      	bne.n	8006248 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d010      	beq.n	8006258 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006246:	e007      	b.n	8006258 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000
 800626c:	40000400 	.word	0x40000400
 8006270:	40000800 	.word	0x40000800
 8006274:	40000c00 	.word	0x40000c00
 8006278:	40014000 	.word	0x40014000

0800627c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e097      	b.n	80063c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fc facf 	bl	8002848 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c0:	f023 0307 	bic.w	r3, r3, #7
 80062c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f000 fa41 	bl	8006758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4313      	orrs	r3, r2
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800631c:	f023 030c 	bic.w	r3, r3, #12
 8006320:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800632c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	4313      	orrs	r3, r2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	031b      	lsls	r3, r3, #12
 800634c:	4313      	orrs	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	4313      	orrs	r3, r2
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d110      	bne.n	800641a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d102      	bne.n	8006404 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d001      	beq.n	8006408 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e069      	b.n	80064dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006418:	e031      	b.n	800647e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d110      	bne.n	8006442 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d102      	bne.n	800642c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006426:	7b3b      	ldrb	r3, [r7, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d001      	beq.n	8006430 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e055      	b.n	80064dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006440:	e01d      	b.n	800647e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d108      	bne.n	800645a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800644e:	7b7b      	ldrb	r3, [r7, #13]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d102      	bne.n	800645a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006454:	7b3b      	ldrb	r3, [r7, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d001      	beq.n	800645e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e03e      	b.n	80064dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_TIM_Encoder_Start+0xc4>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b04      	cmp	r3, #4
 8006488:	d008      	beq.n	800649c <HAL_TIM_Encoder_Start+0xd4>
 800648a:	e00f      	b.n	80064ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f9df 	bl	8006858 <TIM_CCxChannelCmd>
      break;
 800649a:	e016      	b.n	80064ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	2104      	movs	r1, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f9d7 	bl	8006858 <TIM_CCxChannelCmd>
      break;
 80064aa:	e00e      	b.n	80064ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f9cf 	bl	8006858 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2201      	movs	r2, #1
 80064c0:	2104      	movs	r1, #4
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f9c8 	bl	8006858 <TIM_CCxChannelCmd>
      break;
 80064c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0201 	orr.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d122      	bne.n	8006540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d11b      	bne.n	8006540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0202 	mvn.w	r2, #2
 8006510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8f8 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 800652c:	e005      	b.n	800653a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8ea 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8fb 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b04      	cmp	r3, #4
 800654c:	d122      	bne.n	8006594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d11b      	bne.n	8006594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0204 	mvn.w	r2, #4
 8006564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f8ce 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006580:	e005      	b.n	800658e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f8c0 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8d1 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d122      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0208 	mvn.w	r2, #8
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2204      	movs	r2, #4
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8a4 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f896 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8a7 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d122      	bne.n	800663c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b10      	cmp	r3, #16
 8006602:	d11b      	bne.n	800663c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0210 	mvn.w	r2, #16
 800660c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2208      	movs	r2, #8
 8006612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f87a 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006628:	e005      	b.n	8006636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f86c 	bl	8006708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f87d 	bl	8006730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10e      	bne.n	8006668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d107      	bne.n	8006668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0201 	mvn.w	r2, #1
 8006660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f846 	bl	80066f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	2b80      	cmp	r3, #128	; 0x80
 8006674:	d10e      	bne.n	8006694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d107      	bne.n	8006694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f980 	bl	8006994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d10e      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d107      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f842 	bl	8006744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d10e      	bne.n	80066ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d107      	bne.n	80066ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0220 	mvn.w	r2, #32
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f94a 	bl	8006980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a34      	ldr	r2, [pc, #208]	; (800683c <TIM_Base_SetConfig+0xe4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00f      	beq.n	8006790 <TIM_Base_SetConfig+0x38>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006776:	d00b      	beq.n	8006790 <TIM_Base_SetConfig+0x38>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a31      	ldr	r2, [pc, #196]	; (8006840 <TIM_Base_SetConfig+0xe8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d007      	beq.n	8006790 <TIM_Base_SetConfig+0x38>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a30      	ldr	r2, [pc, #192]	; (8006844 <TIM_Base_SetConfig+0xec>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_Base_SetConfig+0x38>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a2f      	ldr	r2, [pc, #188]	; (8006848 <TIM_Base_SetConfig+0xf0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d108      	bne.n	80067a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a25      	ldr	r2, [pc, #148]	; (800683c <TIM_Base_SetConfig+0xe4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01b      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b0:	d017      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <TIM_Base_SetConfig+0xe8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a21      	ldr	r2, [pc, #132]	; (8006844 <TIM_Base_SetConfig+0xec>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00f      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a20      	ldr	r2, [pc, #128]	; (8006848 <TIM_Base_SetConfig+0xf0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00b      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1f      	ldr	r2, [pc, #124]	; (800684c <TIM_Base_SetConfig+0xf4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d007      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1e      	ldr	r2, [pc, #120]	; (8006850 <TIM_Base_SetConfig+0xf8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_Base_SetConfig+0x8a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <TIM_Base_SetConfig+0xfc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d108      	bne.n	80067f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <TIM_Base_SetConfig+0xe4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40010000 	.word	0x40010000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800

08006858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	2201      	movs	r2, #1
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	43db      	mvns	r3, r3
 800687a:	401a      	ands	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1a      	ldr	r2, [r3, #32]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	fa01 f303 	lsl.w	r3, r1, r3
 8006890:	431a      	orrs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e050      	b.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1c      	ldr	r2, [pc, #112]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d013      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a18      	ldr	r2, [pc, #96]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a15      	ldr	r2, [pc, #84]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a13      	ldr	r2, [pc, #76]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d10c      	bne.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4313      	orrs	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40014000 	.word	0x40014000

08006980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <siprintf>:
 80069a8:	b40e      	push	{r1, r2, r3}
 80069aa:	b500      	push	{lr}
 80069ac:	b09c      	sub	sp, #112	; 0x70
 80069ae:	ab1d      	add	r3, sp, #116	; 0x74
 80069b0:	9002      	str	r0, [sp, #8]
 80069b2:	9006      	str	r0, [sp, #24]
 80069b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b8:	4809      	ldr	r0, [pc, #36]	; (80069e0 <siprintf+0x38>)
 80069ba:	9107      	str	r1, [sp, #28]
 80069bc:	9104      	str	r1, [sp, #16]
 80069be:	4909      	ldr	r1, [pc, #36]	; (80069e4 <siprintf+0x3c>)
 80069c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c4:	9105      	str	r1, [sp, #20]
 80069c6:	6800      	ldr	r0, [r0, #0]
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	a902      	add	r1, sp, #8
 80069cc:	f000 f992 	bl	8006cf4 <_svfiprintf_r>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	b01c      	add	sp, #112	; 0x70
 80069d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069dc:	b003      	add	sp, #12
 80069de:	4770      	bx	lr
 80069e0:	200000e8 	.word	0x200000e8
 80069e4:	ffff0208 	.word	0xffff0208

080069e8 <memset>:
 80069e8:	4402      	add	r2, r0
 80069ea:	4603      	mov	r3, r0
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d100      	bne.n	80069f2 <memset+0xa>
 80069f0:	4770      	bx	lr
 80069f2:	f803 1b01 	strb.w	r1, [r3], #1
 80069f6:	e7f9      	b.n	80069ec <memset+0x4>

080069f8 <__errno>:
 80069f8:	4b01      	ldr	r3, [pc, #4]	; (8006a00 <__errno+0x8>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	200000e8 	.word	0x200000e8

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	; (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	; (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	; (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 fc6a 	bl	80072f0 <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08007604 	.word	0x08007604
 8006a40:	08007604 	.word	0x08007604
 8006a44:	08007604 	.word	0x08007604
 8006a48:	08007608 	.word	0x08007608

08006a4c <__retarget_lock_acquire_recursive>:
 8006a4c:	4770      	bx	lr

08006a4e <__retarget_lock_release_recursive>:
 8006a4e:	4770      	bx	lr

08006a50 <_free_r>:
 8006a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a52:	2900      	cmp	r1, #0
 8006a54:	d044      	beq.n	8006ae0 <_free_r+0x90>
 8006a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5a:	9001      	str	r0, [sp, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a62:	bfb8      	it	lt
 8006a64:	18e4      	addlt	r4, r4, r3
 8006a66:	f000 f8df 	bl	8006c28 <__malloc_lock>
 8006a6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <_free_r+0x94>)
 8006a6c:	9801      	ldr	r0, [sp, #4]
 8006a6e:	6813      	ldr	r3, [r2, #0]
 8006a70:	b933      	cbnz	r3, 8006a80 <_free_r+0x30>
 8006a72:	6063      	str	r3, [r4, #4]
 8006a74:	6014      	str	r4, [r2, #0]
 8006a76:	b003      	add	sp, #12
 8006a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a7c:	f000 b8da 	b.w	8006c34 <__malloc_unlock>
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	d908      	bls.n	8006a96 <_free_r+0x46>
 8006a84:	6825      	ldr	r5, [r4, #0]
 8006a86:	1961      	adds	r1, r4, r5
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf01      	itttt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	1949      	addeq	r1, r1, r5
 8006a92:	6021      	streq	r1, [r4, #0]
 8006a94:	e7ed      	b.n	8006a72 <_free_r+0x22>
 8006a96:	461a      	mov	r2, r3
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b10b      	cbz	r3, 8006aa0 <_free_r+0x50>
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	d9fa      	bls.n	8006a96 <_free_r+0x46>
 8006aa0:	6811      	ldr	r1, [r2, #0]
 8006aa2:	1855      	adds	r5, r2, r1
 8006aa4:	42a5      	cmp	r5, r4
 8006aa6:	d10b      	bne.n	8006ac0 <_free_r+0x70>
 8006aa8:	6824      	ldr	r4, [r4, #0]
 8006aaa:	4421      	add	r1, r4
 8006aac:	1854      	adds	r4, r2, r1
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	6011      	str	r1, [r2, #0]
 8006ab2:	d1e0      	bne.n	8006a76 <_free_r+0x26>
 8006ab4:	681c      	ldr	r4, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	6053      	str	r3, [r2, #4]
 8006aba:	440c      	add	r4, r1
 8006abc:	6014      	str	r4, [r2, #0]
 8006abe:	e7da      	b.n	8006a76 <_free_r+0x26>
 8006ac0:	d902      	bls.n	8006ac8 <_free_r+0x78>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	6003      	str	r3, [r0, #0]
 8006ac6:	e7d6      	b.n	8006a76 <_free_r+0x26>
 8006ac8:	6825      	ldr	r5, [r4, #0]
 8006aca:	1961      	adds	r1, r4, r5
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf04      	itt	eq
 8006ad0:	6819      	ldreq	r1, [r3, #0]
 8006ad2:	685b      	ldreq	r3, [r3, #4]
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	bf04      	itt	eq
 8006ad8:	1949      	addeq	r1, r1, r5
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	6054      	str	r4, [r2, #4]
 8006ade:	e7ca      	b.n	8006a76 <_free_r+0x26>
 8006ae0:	b003      	add	sp, #12
 8006ae2:	bd30      	pop	{r4, r5, pc}
 8006ae4:	200009a0 	.word	0x200009a0

08006ae8 <sbrk_aligned>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	4e0e      	ldr	r6, [pc, #56]	; (8006b24 <sbrk_aligned+0x3c>)
 8006aec:	460c      	mov	r4, r1
 8006aee:	6831      	ldr	r1, [r6, #0]
 8006af0:	4605      	mov	r5, r0
 8006af2:	b911      	cbnz	r1, 8006afa <sbrk_aligned+0x12>
 8006af4:	f000 fba6 	bl	8007244 <_sbrk_r>
 8006af8:	6030      	str	r0, [r6, #0]
 8006afa:	4621      	mov	r1, r4
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 fba1 	bl	8007244 <_sbrk_r>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	d00a      	beq.n	8006b1c <sbrk_aligned+0x34>
 8006b06:	1cc4      	adds	r4, r0, #3
 8006b08:	f024 0403 	bic.w	r4, r4, #3
 8006b0c:	42a0      	cmp	r0, r4
 8006b0e:	d007      	beq.n	8006b20 <sbrk_aligned+0x38>
 8006b10:	1a21      	subs	r1, r4, r0
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 fb96 	bl	8007244 <_sbrk_r>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d101      	bne.n	8006b20 <sbrk_aligned+0x38>
 8006b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b20:	4620      	mov	r0, r4
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	200009a4 	.word	0x200009a4

08006b28 <_malloc_r>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	1ccd      	adds	r5, r1, #3
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	db01      	blt.n	8006b44 <_malloc_r+0x1c>
 8006b40:	42a9      	cmp	r1, r5
 8006b42:	d905      	bls.n	8006b50 <_malloc_r+0x28>
 8006b44:	230c      	movs	r3, #12
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	2600      	movs	r6, #0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c24 <_malloc_r+0xfc>
 8006b54:	f000 f868 	bl	8006c28 <__malloc_lock>
 8006b58:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5c:	461c      	mov	r4, r3
 8006b5e:	bb5c      	cbnz	r4, 8006bb8 <_malloc_r+0x90>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4638      	mov	r0, r7
 8006b64:	f7ff ffc0 	bl	8006ae8 <sbrk_aligned>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	d155      	bne.n	8006c1a <_malloc_r+0xf2>
 8006b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8006b72:	4626      	mov	r6, r4
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	d145      	bne.n	8006c04 <_malloc_r+0xdc>
 8006b78:	2c00      	cmp	r4, #0
 8006b7a:	d048      	beq.n	8006c0e <_malloc_r+0xe6>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4638      	mov	r0, r7
 8006b82:	eb04 0903 	add.w	r9, r4, r3
 8006b86:	f000 fb5d 	bl	8007244 <_sbrk_r>
 8006b8a:	4581      	cmp	r9, r0
 8006b8c:	d13f      	bne.n	8006c0e <_malloc_r+0xe6>
 8006b8e:	6821      	ldr	r1, [r4, #0]
 8006b90:	1a6d      	subs	r5, r5, r1
 8006b92:	4629      	mov	r1, r5
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7ff ffa7 	bl	8006ae8 <sbrk_aligned>
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d037      	beq.n	8006c0e <_malloc_r+0xe6>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	442b      	add	r3, r5
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d038      	beq.n	8006c1e <_malloc_r+0xf6>
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	42a2      	cmp	r2, r4
 8006bb0:	d12b      	bne.n	8006c0a <_malloc_r+0xe2>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e00f      	b.n	8006bd8 <_malloc_r+0xb0>
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	1b52      	subs	r2, r2, r5
 8006bbc:	d41f      	bmi.n	8006bfe <_malloc_r+0xd6>
 8006bbe:	2a0b      	cmp	r2, #11
 8006bc0:	d917      	bls.n	8006bf2 <_malloc_r+0xca>
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	bf18      	it	ne
 8006bca:	6059      	strne	r1, [r3, #4]
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	bf08      	it	eq
 8006bd0:	f8c8 1000 	streq.w	r1, [r8]
 8006bd4:	5162      	str	r2, [r4, r5]
 8006bd6:	604b      	str	r3, [r1, #4]
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f104 060b 	add.w	r6, r4, #11
 8006bde:	f000 f829 	bl	8006c34 <__malloc_unlock>
 8006be2:	f026 0607 	bic.w	r6, r6, #7
 8006be6:	1d23      	adds	r3, r4, #4
 8006be8:	1af2      	subs	r2, r6, r3
 8006bea:	d0ae      	beq.n	8006b4a <_malloc_r+0x22>
 8006bec:	1b9b      	subs	r3, r3, r6
 8006bee:	50a3      	str	r3, [r4, r2]
 8006bf0:	e7ab      	b.n	8006b4a <_malloc_r+0x22>
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	6862      	ldr	r2, [r4, #4]
 8006bf6:	d1dd      	bne.n	8006bb4 <_malloc_r+0x8c>
 8006bf8:	f8c8 2000 	str.w	r2, [r8]
 8006bfc:	e7ec      	b.n	8006bd8 <_malloc_r+0xb0>
 8006bfe:	4623      	mov	r3, r4
 8006c00:	6864      	ldr	r4, [r4, #4]
 8006c02:	e7ac      	b.n	8006b5e <_malloc_r+0x36>
 8006c04:	4634      	mov	r4, r6
 8006c06:	6876      	ldr	r6, [r6, #4]
 8006c08:	e7b4      	b.n	8006b74 <_malloc_r+0x4c>
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	e7cc      	b.n	8006ba8 <_malloc_r+0x80>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	4638      	mov	r0, r7
 8006c14:	f000 f80e 	bl	8006c34 <__malloc_unlock>
 8006c18:	e797      	b.n	8006b4a <_malloc_r+0x22>
 8006c1a:	6025      	str	r5, [r4, #0]
 8006c1c:	e7dc      	b.n	8006bd8 <_malloc_r+0xb0>
 8006c1e:	605b      	str	r3, [r3, #4]
 8006c20:	deff      	udf	#255	; 0xff
 8006c22:	bf00      	nop
 8006c24:	200009a0 	.word	0x200009a0

08006c28 <__malloc_lock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__malloc_lock+0x8>)
 8006c2a:	f7ff bf0f 	b.w	8006a4c <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	2000099c 	.word	0x2000099c

08006c34 <__malloc_unlock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__malloc_unlock+0x8>)
 8006c36:	f7ff bf0a 	b.w	8006a4e <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	2000099c 	.word	0x2000099c

08006c40 <__ssputs_r>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	688e      	ldr	r6, [r1, #8]
 8006c46:	461f      	mov	r7, r3
 8006c48:	42be      	cmp	r6, r7
 8006c4a:	680b      	ldr	r3, [r1, #0]
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4690      	mov	r8, r2
 8006c52:	d82c      	bhi.n	8006cae <__ssputs_r+0x6e>
 8006c54:	898a      	ldrh	r2, [r1, #12]
 8006c56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c5a:	d026      	beq.n	8006caa <__ssputs_r+0x6a>
 8006c5c:	6965      	ldr	r5, [r4, #20]
 8006c5e:	6909      	ldr	r1, [r1, #16]
 8006c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c64:	eba3 0901 	sub.w	r9, r3, r1
 8006c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c6c:	1c7b      	adds	r3, r7, #1
 8006c6e:	444b      	add	r3, r9
 8006c70:	106d      	asrs	r5, r5, #1
 8006c72:	429d      	cmp	r5, r3
 8006c74:	bf38      	it	cc
 8006c76:	461d      	movcc	r5, r3
 8006c78:	0553      	lsls	r3, r2, #21
 8006c7a:	d527      	bpl.n	8006ccc <__ssputs_r+0x8c>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	f7ff ff53 	bl	8006b28 <_malloc_r>
 8006c82:	4606      	mov	r6, r0
 8006c84:	b360      	cbz	r0, 8006ce0 <__ssputs_r+0xa0>
 8006c86:	6921      	ldr	r1, [r4, #16]
 8006c88:	464a      	mov	r2, r9
 8006c8a:	f000 faeb 	bl	8007264 <memcpy>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	6126      	str	r6, [r4, #16]
 8006c9c:	6165      	str	r5, [r4, #20]
 8006c9e:	444e      	add	r6, r9
 8006ca0:	eba5 0509 	sub.w	r5, r5, r9
 8006ca4:	6026      	str	r6, [r4, #0]
 8006ca6:	60a5      	str	r5, [r4, #8]
 8006ca8:	463e      	mov	r6, r7
 8006caa:	42be      	cmp	r6, r7
 8006cac:	d900      	bls.n	8006cb0 <__ssputs_r+0x70>
 8006cae:	463e      	mov	r6, r7
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	4632      	mov	r2, r6
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	f000 faab 	bl	8007210 <memmove>
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	1b9b      	subs	r3, r3, r6
 8006cbe:	60a3      	str	r3, [r4, #8]
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	4433      	add	r3, r6
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ccc:	462a      	mov	r2, r5
 8006cce:	f000 fad7 	bl	8007280 <_realloc_r>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d1e0      	bne.n	8006c9a <__ssputs_r+0x5a>
 8006cd8:	6921      	ldr	r1, [r4, #16]
 8006cda:	4650      	mov	r0, sl
 8006cdc:	f7ff feb8 	bl	8006a50 <_free_r>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	f8ca 3000 	str.w	r3, [sl]
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf2:	e7e9      	b.n	8006cc8 <__ssputs_r+0x88>

08006cf4 <_svfiprintf_r>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	4698      	mov	r8, r3
 8006cfa:	898b      	ldrh	r3, [r1, #12]
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	b09d      	sub	sp, #116	; 0x74
 8006d00:	4607      	mov	r7, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	4614      	mov	r4, r2
 8006d06:	d50e      	bpl.n	8006d26 <_svfiprintf_r+0x32>
 8006d08:	690b      	ldr	r3, [r1, #16]
 8006d0a:	b963      	cbnz	r3, 8006d26 <_svfiprintf_r+0x32>
 8006d0c:	2140      	movs	r1, #64	; 0x40
 8006d0e:	f7ff ff0b 	bl	8006b28 <_malloc_r>
 8006d12:	6028      	str	r0, [r5, #0]
 8006d14:	6128      	str	r0, [r5, #16]
 8006d16:	b920      	cbnz	r0, 8006d22 <_svfiprintf_r+0x2e>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e0d0      	b.n	8006ec4 <_svfiprintf_r+0x1d0>
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	616b      	str	r3, [r5, #20]
 8006d26:	2300      	movs	r3, #0
 8006d28:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2a:	2320      	movs	r3, #32
 8006d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d34:	2330      	movs	r3, #48	; 0x30
 8006d36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006edc <_svfiprintf_r+0x1e8>
 8006d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d3e:	f04f 0901 	mov.w	r9, #1
 8006d42:	4623      	mov	r3, r4
 8006d44:	469a      	mov	sl, r3
 8006d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d4a:	b10a      	cbz	r2, 8006d50 <_svfiprintf_r+0x5c>
 8006d4c:	2a25      	cmp	r2, #37	; 0x25
 8006d4e:	d1f9      	bne.n	8006d44 <_svfiprintf_r+0x50>
 8006d50:	ebba 0b04 	subs.w	fp, sl, r4
 8006d54:	d00b      	beq.n	8006d6e <_svfiprintf_r+0x7a>
 8006d56:	465b      	mov	r3, fp
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff ff6f 	bl	8006c40 <__ssputs_r>
 8006d62:	3001      	adds	r0, #1
 8006d64:	f000 80a9 	beq.w	8006eba <_svfiprintf_r+0x1c6>
 8006d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d6a:	445a      	add	r2, fp
 8006d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80a1 	beq.w	8006eba <_svfiprintf_r+0x1c6>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d82:	f10a 0a01 	add.w	sl, sl, #1
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	9307      	str	r3, [sp, #28]
 8006d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d90:	4654      	mov	r4, sl
 8006d92:	2205      	movs	r2, #5
 8006d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d98:	4850      	ldr	r0, [pc, #320]	; (8006edc <_svfiprintf_r+0x1e8>)
 8006d9a:	f7f9 fa29 	bl	80001f0 <memchr>
 8006d9e:	9a04      	ldr	r2, [sp, #16]
 8006da0:	b9d8      	cbnz	r0, 8006dda <_svfiprintf_r+0xe6>
 8006da2:	06d0      	lsls	r0, r2, #27
 8006da4:	bf44      	itt	mi
 8006da6:	2320      	movmi	r3, #32
 8006da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dac:	0711      	lsls	r1, r2, #28
 8006dae:	bf44      	itt	mi
 8006db0:	232b      	movmi	r3, #43	; 0x2b
 8006db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dba:	2b2a      	cmp	r3, #42	; 0x2a
 8006dbc:	d015      	beq.n	8006dea <_svfiprintf_r+0xf6>
 8006dbe:	9a07      	ldr	r2, [sp, #28]
 8006dc0:	4654      	mov	r4, sl
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f04f 0c0a 	mov.w	ip, #10
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dce:	3b30      	subs	r3, #48	; 0x30
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	d94d      	bls.n	8006e70 <_svfiprintf_r+0x17c>
 8006dd4:	b1b0      	cbz	r0, 8006e04 <_svfiprintf_r+0x110>
 8006dd6:	9207      	str	r2, [sp, #28]
 8006dd8:	e014      	b.n	8006e04 <_svfiprintf_r+0x110>
 8006dda:	eba0 0308 	sub.w	r3, r0, r8
 8006dde:	fa09 f303 	lsl.w	r3, r9, r3
 8006de2:	4313      	orrs	r3, r2
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	46a2      	mov	sl, r4
 8006de8:	e7d2      	b.n	8006d90 <_svfiprintf_r+0x9c>
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	1d19      	adds	r1, r3, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	9103      	str	r1, [sp, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bfbb      	ittet	lt
 8006df6:	425b      	neglt	r3, r3
 8006df8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dfc:	9307      	strge	r3, [sp, #28]
 8006dfe:	9307      	strlt	r3, [sp, #28]
 8006e00:	bfb8      	it	lt
 8006e02:	9204      	strlt	r2, [sp, #16]
 8006e04:	7823      	ldrb	r3, [r4, #0]
 8006e06:	2b2e      	cmp	r3, #46	; 0x2e
 8006e08:	d10c      	bne.n	8006e24 <_svfiprintf_r+0x130>
 8006e0a:	7863      	ldrb	r3, [r4, #1]
 8006e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0e:	d134      	bne.n	8006e7a <_svfiprintf_r+0x186>
 8006e10:	9b03      	ldr	r3, [sp, #12]
 8006e12:	1d1a      	adds	r2, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	9203      	str	r2, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfb8      	it	lt
 8006e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e20:	3402      	adds	r4, #2
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006eec <_svfiprintf_r+0x1f8>
 8006e28:	7821      	ldrb	r1, [r4, #0]
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	f7f9 f9df 	bl	80001f0 <memchr>
 8006e32:	b138      	cbz	r0, 8006e44 <_svfiprintf_r+0x150>
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	eba0 000a 	sub.w	r0, r0, sl
 8006e3a:	2240      	movs	r2, #64	; 0x40
 8006e3c:	4082      	lsls	r2, r0
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	3401      	adds	r4, #1
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e48:	4825      	ldr	r0, [pc, #148]	; (8006ee0 <_svfiprintf_r+0x1ec>)
 8006e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e4e:	2206      	movs	r2, #6
 8006e50:	f7f9 f9ce 	bl	80001f0 <memchr>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d038      	beq.n	8006eca <_svfiprintf_r+0x1d6>
 8006e58:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <_svfiprintf_r+0x1f0>)
 8006e5a:	bb1b      	cbnz	r3, 8006ea4 <_svfiprintf_r+0x1b0>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	3307      	adds	r3, #7
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	3308      	adds	r3, #8
 8006e66:	9303      	str	r3, [sp, #12]
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	4433      	add	r3, r6
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	e768      	b.n	8006d42 <_svfiprintf_r+0x4e>
 8006e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e74:	460c      	mov	r4, r1
 8006e76:	2001      	movs	r0, #1
 8006e78:	e7a6      	b.n	8006dc8 <_svfiprintf_r+0xd4>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	3401      	adds	r4, #1
 8006e7e:	9305      	str	r3, [sp, #20]
 8006e80:	4619      	mov	r1, r3
 8006e82:	f04f 0c0a 	mov.w	ip, #10
 8006e86:	4620      	mov	r0, r4
 8006e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8c:	3a30      	subs	r2, #48	; 0x30
 8006e8e:	2a09      	cmp	r2, #9
 8006e90:	d903      	bls.n	8006e9a <_svfiprintf_r+0x1a6>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c6      	beq.n	8006e24 <_svfiprintf_r+0x130>
 8006e96:	9105      	str	r1, [sp, #20]
 8006e98:	e7c4      	b.n	8006e24 <_svfiprintf_r+0x130>
 8006e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e7f0      	b.n	8006e86 <_svfiprintf_r+0x192>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <_svfiprintf_r+0x1f4>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f3af 8000 	nop.w
 8006eb4:	1c42      	adds	r2, r0, #1
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	d1d6      	bne.n	8006e68 <_svfiprintf_r+0x174>
 8006eba:	89ab      	ldrh	r3, [r5, #12]
 8006ebc:	065b      	lsls	r3, r3, #25
 8006ebe:	f53f af2d 	bmi.w	8006d1c <_svfiprintf_r+0x28>
 8006ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec4:	b01d      	add	sp, #116	; 0x74
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	462a      	mov	r2, r5
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <_svfiprintf_r+0x1f4>)
 8006ed2:	a904      	add	r1, sp, #16
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f000 f879 	bl	8006fcc <_printf_i>
 8006eda:	e7eb      	b.n	8006eb4 <_svfiprintf_r+0x1c0>
 8006edc:	080075c8 	.word	0x080075c8
 8006ee0:	080075d2 	.word	0x080075d2
 8006ee4:	00000000 	.word	0x00000000
 8006ee8:	08006c41 	.word	0x08006c41
 8006eec:	080075ce 	.word	0x080075ce

08006ef0 <_printf_common>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	4699      	mov	r9, r3
 8006ef8:	688a      	ldr	r2, [r1, #8]
 8006efa:	690b      	ldr	r3, [r1, #16]
 8006efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	bfb8      	it	lt
 8006f04:	4613      	movlt	r3, r2
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b10a      	cbz	r2, 8006f16 <_printf_common+0x26>
 8006f12:	3301      	adds	r3, #1
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	0699      	lsls	r1, r3, #26
 8006f1a:	bf42      	ittt	mi
 8006f1c:	6833      	ldrmi	r3, [r6, #0]
 8006f1e:	3302      	addmi	r3, #2
 8006f20:	6033      	strmi	r3, [r6, #0]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	f015 0506 	ands.w	r5, r5, #6
 8006f28:	d106      	bne.n	8006f38 <_printf_common+0x48>
 8006f2a:	f104 0a19 	add.w	sl, r4, #25
 8006f2e:	68e3      	ldr	r3, [r4, #12]
 8006f30:	6832      	ldr	r2, [r6, #0]
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	42ab      	cmp	r3, r5
 8006f36:	dc26      	bgt.n	8006f86 <_printf_common+0x96>
 8006f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f3c:	1e13      	subs	r3, r2, #0
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	bf18      	it	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	0692      	lsls	r2, r2, #26
 8006f46:	d42b      	bmi.n	8006fa0 <_printf_common+0xb0>
 8006f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d01e      	beq.n	8006f94 <_printf_common+0xa4>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	6922      	ldr	r2, [r4, #16]
 8006f5a:	f003 0306 	and.w	r3, r3, #6
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	bf02      	ittt	eq
 8006f62:	68e5      	ldreq	r5, [r4, #12]
 8006f64:	6833      	ldreq	r3, [r6, #0]
 8006f66:	1aed      	subeq	r5, r5, r3
 8006f68:	68a3      	ldr	r3, [r4, #8]
 8006f6a:	bf0c      	ite	eq
 8006f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f70:	2500      	movne	r5, #0
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bfc4      	itt	gt
 8006f76:	1a9b      	subgt	r3, r3, r2
 8006f78:	18ed      	addgt	r5, r5, r3
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	341a      	adds	r4, #26
 8006f7e:	42b5      	cmp	r5, r6
 8006f80:	d11a      	bne.n	8006fb8 <_printf_common+0xc8>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e008      	b.n	8006f98 <_printf_common+0xa8>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4652      	mov	r2, sl
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	47c0      	blx	r8
 8006f90:	3001      	adds	r0, #1
 8006f92:	d103      	bne.n	8006f9c <_printf_common+0xac>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	e7c6      	b.n	8006f2e <_printf_common+0x3e>
 8006fa0:	18e1      	adds	r1, r4, r3
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	2030      	movs	r0, #48	; 0x30
 8006fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006faa:	4422      	add	r2, r4
 8006fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	e7c7      	b.n	8006f48 <_printf_common+0x58>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	47c0      	blx	r8
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d0e6      	beq.n	8006f94 <_printf_common+0xa4>
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7d9      	b.n	8006f7e <_printf_common+0x8e>
	...

08006fcc <_printf_i>:
 8006fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	7e0f      	ldrb	r7, [r1, #24]
 8006fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fd4:	2f78      	cmp	r7, #120	; 0x78
 8006fd6:	4691      	mov	r9, r2
 8006fd8:	4680      	mov	r8, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	469a      	mov	sl, r3
 8006fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fe2:	d807      	bhi.n	8006ff4 <_printf_i+0x28>
 8006fe4:	2f62      	cmp	r7, #98	; 0x62
 8006fe6:	d80a      	bhi.n	8006ffe <_printf_i+0x32>
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	f000 80d4 	beq.w	8007196 <_printf_i+0x1ca>
 8006fee:	2f58      	cmp	r7, #88	; 0x58
 8006ff0:	f000 80c0 	beq.w	8007174 <_printf_i+0x1a8>
 8006ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ffc:	e03a      	b.n	8007074 <_printf_i+0xa8>
 8006ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007002:	2b15      	cmp	r3, #21
 8007004:	d8f6      	bhi.n	8006ff4 <_printf_i+0x28>
 8007006:	a101      	add	r1, pc, #4	; (adr r1, 800700c <_printf_i+0x40>)
 8007008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800700c:	08007065 	.word	0x08007065
 8007010:	08007079 	.word	0x08007079
 8007014:	08006ff5 	.word	0x08006ff5
 8007018:	08006ff5 	.word	0x08006ff5
 800701c:	08006ff5 	.word	0x08006ff5
 8007020:	08006ff5 	.word	0x08006ff5
 8007024:	08007079 	.word	0x08007079
 8007028:	08006ff5 	.word	0x08006ff5
 800702c:	08006ff5 	.word	0x08006ff5
 8007030:	08006ff5 	.word	0x08006ff5
 8007034:	08006ff5 	.word	0x08006ff5
 8007038:	0800717d 	.word	0x0800717d
 800703c:	080070a5 	.word	0x080070a5
 8007040:	08007137 	.word	0x08007137
 8007044:	08006ff5 	.word	0x08006ff5
 8007048:	08006ff5 	.word	0x08006ff5
 800704c:	0800719f 	.word	0x0800719f
 8007050:	08006ff5 	.word	0x08006ff5
 8007054:	080070a5 	.word	0x080070a5
 8007058:	08006ff5 	.word	0x08006ff5
 800705c:	08006ff5 	.word	0x08006ff5
 8007060:	0800713f 	.word	0x0800713f
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	602a      	str	r2, [r5, #0]
 800706c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007074:	2301      	movs	r3, #1
 8007076:	e09f      	b.n	80071b8 <_printf_i+0x1ec>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	0607      	lsls	r7, r0, #24
 800707e:	f103 0104 	add.w	r1, r3, #4
 8007082:	6029      	str	r1, [r5, #0]
 8007084:	d501      	bpl.n	800708a <_printf_i+0xbe>
 8007086:	681e      	ldr	r6, [r3, #0]
 8007088:	e003      	b.n	8007092 <_printf_i+0xc6>
 800708a:	0646      	lsls	r6, r0, #25
 800708c:	d5fb      	bpl.n	8007086 <_printf_i+0xba>
 800708e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007092:	2e00      	cmp	r6, #0
 8007094:	da03      	bge.n	800709e <_printf_i+0xd2>
 8007096:	232d      	movs	r3, #45	; 0x2d
 8007098:	4276      	negs	r6, r6
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709e:	485a      	ldr	r0, [pc, #360]	; (8007208 <_printf_i+0x23c>)
 80070a0:	230a      	movs	r3, #10
 80070a2:	e012      	b.n	80070ca <_printf_i+0xfe>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	1d19      	adds	r1, r3, #4
 80070aa:	6029      	str	r1, [r5, #0]
 80070ac:	0605      	lsls	r5, r0, #24
 80070ae:	d501      	bpl.n	80070b4 <_printf_i+0xe8>
 80070b0:	681e      	ldr	r6, [r3, #0]
 80070b2:	e002      	b.n	80070ba <_printf_i+0xee>
 80070b4:	0641      	lsls	r1, r0, #25
 80070b6:	d5fb      	bpl.n	80070b0 <_printf_i+0xe4>
 80070b8:	881e      	ldrh	r6, [r3, #0]
 80070ba:	4853      	ldr	r0, [pc, #332]	; (8007208 <_printf_i+0x23c>)
 80070bc:	2f6f      	cmp	r7, #111	; 0x6f
 80070be:	bf0c      	ite	eq
 80070c0:	2308      	moveq	r3, #8
 80070c2:	230a      	movne	r3, #10
 80070c4:	2100      	movs	r1, #0
 80070c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ca:	6865      	ldr	r5, [r4, #4]
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	bfa2      	ittt	ge
 80070d2:	6821      	ldrge	r1, [r4, #0]
 80070d4:	f021 0104 	bicge.w	r1, r1, #4
 80070d8:	6021      	strge	r1, [r4, #0]
 80070da:	b90e      	cbnz	r6, 80070e0 <_printf_i+0x114>
 80070dc:	2d00      	cmp	r5, #0
 80070de:	d04b      	beq.n	8007178 <_printf_i+0x1ac>
 80070e0:	4615      	mov	r5, r2
 80070e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070e6:	fb03 6711 	mls	r7, r3, r1, r6
 80070ea:	5dc7      	ldrb	r7, [r0, r7]
 80070ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070f0:	4637      	mov	r7, r6
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	460e      	mov	r6, r1
 80070f6:	d9f4      	bls.n	80070e2 <_printf_i+0x116>
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d10b      	bne.n	8007114 <_printf_i+0x148>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	07de      	lsls	r6, r3, #31
 8007100:	d508      	bpl.n	8007114 <_printf_i+0x148>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	4299      	cmp	r1, r3
 8007108:	bfde      	ittt	le
 800710a:	2330      	movle	r3, #48	; 0x30
 800710c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007110:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007114:	1b52      	subs	r2, r2, r5
 8007116:	6122      	str	r2, [r4, #16]
 8007118:	f8cd a000 	str.w	sl, [sp]
 800711c:	464b      	mov	r3, r9
 800711e:	aa03      	add	r2, sp, #12
 8007120:	4621      	mov	r1, r4
 8007122:	4640      	mov	r0, r8
 8007124:	f7ff fee4 	bl	8006ef0 <_printf_common>
 8007128:	3001      	adds	r0, #1
 800712a:	d14a      	bne.n	80071c2 <_printf_i+0x1f6>
 800712c:	f04f 30ff 	mov.w	r0, #4294967295
 8007130:	b004      	add	sp, #16
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f043 0320 	orr.w	r3, r3, #32
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	4833      	ldr	r0, [pc, #204]	; (800720c <_printf_i+0x240>)
 8007140:	2778      	movs	r7, #120	; 0x78
 8007142:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	6829      	ldr	r1, [r5, #0]
 800714a:	061f      	lsls	r7, r3, #24
 800714c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007150:	d402      	bmi.n	8007158 <_printf_i+0x18c>
 8007152:	065f      	lsls	r7, r3, #25
 8007154:	bf48      	it	mi
 8007156:	b2b6      	uxthmi	r6, r6
 8007158:	07df      	lsls	r7, r3, #31
 800715a:	bf48      	it	mi
 800715c:	f043 0320 	orrmi.w	r3, r3, #32
 8007160:	6029      	str	r1, [r5, #0]
 8007162:	bf48      	it	mi
 8007164:	6023      	strmi	r3, [r4, #0]
 8007166:	b91e      	cbnz	r6, 8007170 <_printf_i+0x1a4>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	f023 0320 	bic.w	r3, r3, #32
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	2310      	movs	r3, #16
 8007172:	e7a7      	b.n	80070c4 <_printf_i+0xf8>
 8007174:	4824      	ldr	r0, [pc, #144]	; (8007208 <_printf_i+0x23c>)
 8007176:	e7e4      	b.n	8007142 <_printf_i+0x176>
 8007178:	4615      	mov	r5, r2
 800717a:	e7bd      	b.n	80070f8 <_printf_i+0x12c>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	6826      	ldr	r6, [r4, #0]
 8007180:	6961      	ldr	r1, [r4, #20]
 8007182:	1d18      	adds	r0, r3, #4
 8007184:	6028      	str	r0, [r5, #0]
 8007186:	0635      	lsls	r5, r6, #24
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	d501      	bpl.n	8007190 <_printf_i+0x1c4>
 800718c:	6019      	str	r1, [r3, #0]
 800718e:	e002      	b.n	8007196 <_printf_i+0x1ca>
 8007190:	0670      	lsls	r0, r6, #25
 8007192:	d5fb      	bpl.n	800718c <_printf_i+0x1c0>
 8007194:	8019      	strh	r1, [r3, #0]
 8007196:	2300      	movs	r3, #0
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	4615      	mov	r5, r2
 800719c:	e7bc      	b.n	8007118 <_printf_i+0x14c>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	1d1a      	adds	r2, r3, #4
 80071a2:	602a      	str	r2, [r5, #0]
 80071a4:	681d      	ldr	r5, [r3, #0]
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	2100      	movs	r1, #0
 80071aa:	4628      	mov	r0, r5
 80071ac:	f7f9 f820 	bl	80001f0 <memchr>
 80071b0:	b108      	cbz	r0, 80071b6 <_printf_i+0x1ea>
 80071b2:	1b40      	subs	r0, r0, r5
 80071b4:	6060      	str	r0, [r4, #4]
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	6123      	str	r3, [r4, #16]
 80071ba:	2300      	movs	r3, #0
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c0:	e7aa      	b.n	8007118 <_printf_i+0x14c>
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	462a      	mov	r2, r5
 80071c6:	4649      	mov	r1, r9
 80071c8:	4640      	mov	r0, r8
 80071ca:	47d0      	blx	sl
 80071cc:	3001      	adds	r0, #1
 80071ce:	d0ad      	beq.n	800712c <_printf_i+0x160>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	079b      	lsls	r3, r3, #30
 80071d4:	d413      	bmi.n	80071fe <_printf_i+0x232>
 80071d6:	68e0      	ldr	r0, [r4, #12]
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	4298      	cmp	r0, r3
 80071dc:	bfb8      	it	lt
 80071de:	4618      	movlt	r0, r3
 80071e0:	e7a6      	b.n	8007130 <_printf_i+0x164>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4632      	mov	r2, r6
 80071e6:	4649      	mov	r1, r9
 80071e8:	4640      	mov	r0, r8
 80071ea:	47d0      	blx	sl
 80071ec:	3001      	adds	r0, #1
 80071ee:	d09d      	beq.n	800712c <_printf_i+0x160>
 80071f0:	3501      	adds	r5, #1
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	9903      	ldr	r1, [sp, #12]
 80071f6:	1a5b      	subs	r3, r3, r1
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dcf2      	bgt.n	80071e2 <_printf_i+0x216>
 80071fc:	e7eb      	b.n	80071d6 <_printf_i+0x20a>
 80071fe:	2500      	movs	r5, #0
 8007200:	f104 0619 	add.w	r6, r4, #25
 8007204:	e7f5      	b.n	80071f2 <_printf_i+0x226>
 8007206:	bf00      	nop
 8007208:	080075d9 	.word	0x080075d9
 800720c:	080075ea 	.word	0x080075ea

08007210 <memmove>:
 8007210:	4288      	cmp	r0, r1
 8007212:	b510      	push	{r4, lr}
 8007214:	eb01 0402 	add.w	r4, r1, r2
 8007218:	d902      	bls.n	8007220 <memmove+0x10>
 800721a:	4284      	cmp	r4, r0
 800721c:	4623      	mov	r3, r4
 800721e:	d807      	bhi.n	8007230 <memmove+0x20>
 8007220:	1e43      	subs	r3, r0, #1
 8007222:	42a1      	cmp	r1, r4
 8007224:	d008      	beq.n	8007238 <memmove+0x28>
 8007226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800722e:	e7f8      	b.n	8007222 <memmove+0x12>
 8007230:	4402      	add	r2, r0
 8007232:	4601      	mov	r1, r0
 8007234:	428a      	cmp	r2, r1
 8007236:	d100      	bne.n	800723a <memmove+0x2a>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800723e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007242:	e7f7      	b.n	8007234 <memmove+0x24>

08007244 <_sbrk_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d06      	ldr	r5, [pc, #24]	; (8007260 <_sbrk_r+0x1c>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fb fa38 	bl	80026c4 <_sbrk>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_sbrk_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_sbrk_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20000998 	.word	0x20000998

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <_realloc_r>:
 8007280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007284:	4680      	mov	r8, r0
 8007286:	4614      	mov	r4, r2
 8007288:	460e      	mov	r6, r1
 800728a:	b921      	cbnz	r1, 8007296 <_realloc_r+0x16>
 800728c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007290:	4611      	mov	r1, r2
 8007292:	f7ff bc49 	b.w	8006b28 <_malloc_r>
 8007296:	b92a      	cbnz	r2, 80072a4 <_realloc_r+0x24>
 8007298:	f7ff fbda 	bl	8006a50 <_free_r>
 800729c:	4625      	mov	r5, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a4:	f000 f81b 	bl	80072de <_malloc_usable_size_r>
 80072a8:	4284      	cmp	r4, r0
 80072aa:	4607      	mov	r7, r0
 80072ac:	d802      	bhi.n	80072b4 <_realloc_r+0x34>
 80072ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072b2:	d812      	bhi.n	80072da <_realloc_r+0x5a>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4640      	mov	r0, r8
 80072b8:	f7ff fc36 	bl	8006b28 <_malloc_r>
 80072bc:	4605      	mov	r5, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	d0ed      	beq.n	800729e <_realloc_r+0x1e>
 80072c2:	42bc      	cmp	r4, r7
 80072c4:	4622      	mov	r2, r4
 80072c6:	4631      	mov	r1, r6
 80072c8:	bf28      	it	cs
 80072ca:	463a      	movcs	r2, r7
 80072cc:	f7ff ffca 	bl	8007264 <memcpy>
 80072d0:	4631      	mov	r1, r6
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7ff fbbc 	bl	8006a50 <_free_r>
 80072d8:	e7e1      	b.n	800729e <_realloc_r+0x1e>
 80072da:	4635      	mov	r5, r6
 80072dc:	e7df      	b.n	800729e <_realloc_r+0x1e>

080072de <_malloc_usable_size_r>:
 80072de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e2:	1f18      	subs	r0, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfbc      	itt	lt
 80072e8:	580b      	ldrlt	r3, [r1, r0]
 80072ea:	18c0      	addlt	r0, r0, r3
 80072ec:	4770      	bx	lr
	...

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
