
Klecontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f0  080086f0  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f8  080086f8  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08008700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000198  08008898  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08008898  00020af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017821  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047bd  00000000  00000000  00037a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e4  00000000  00000000  0003d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c384  00000000  00000000  0003eb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020b85  00000000  00000000  0005aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a004a  00000000  00000000  0007ba75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006688  00000000  00000000  0011bac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00122148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008344 	.word	0x08008344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	08008344 	.word	0x08008344

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Prog_DiodeTest_SendOnCmd>:

//
// -- Setting LED on/off --
//
static void Prog_DiodeTest_SendOnCmd(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 8000592:	23d0      	movs	r3, #208	; 0xd0
 8000594:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_ON;
 8000596:	2320      	movs	r3, #32
 8000598:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f8b4 	bl	800170c <Radio_TxBufferPut>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Prog_DiodeTest_SendOffCmd>:

static void Prog_DiodeTest_SendOffCmd(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint8_t Buffer[2];
	Buffer[0] = DIODE_TEST;
 80005b2:	23d0      	movs	r3, #208	; 0xd0
 80005b4:	713b      	strb	r3, [r7, #4]
	Buffer[1] = DIODE_SET_OFF;
 80005b6:	2321      	movs	r3, #33	; 0x21
 80005b8:	717b      	strb	r3, [r7, #5]
	Radio_TxBufferPut(Buffer, 2);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f8a4 	bl	800170c <Radio_TxBufferPut>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <Prog_DiodeTest_Init>:

//
// -- Init & Deinit functions for Diode Test Program --
//
Programs_error_t Prog_DiodeTest_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	Inputs_ClearButtonsCallbacks();
 80005d0:	f000 fcae 	bl	8000f30 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, &Prog_DiodeTest_SendOnCmd, NULL);
 80005d4:	2200      	movs	r2, #0
 80005d6:	490d      	ldr	r1, [pc, #52]	; (800060c <Prog_DiodeTest_Init+0x40>)
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fc63 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, &Prog_DiodeTest_SendOffCmd, NULL);
 80005de:	2200      	movs	r2, #0
 80005e0:	490b      	ldr	r1, [pc, #44]	; (8000610 <Prog_DiodeTest_Init+0x44>)
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fc5e 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, NULL, &Programs_ExitProgram);
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <Prog_DiodeTest_Init+0x48>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	2004      	movs	r0, #4
 80005ee:	f000 fc59 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>
	OLED_ClearBuffer(BLACK);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f002 fb3c 	bl	8002c70 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2000      	movs	r0, #0
 80005fc:	f002 fa7e 	bl	8002afc <OLED_MoveCursor>
	OLED_SendBuffer();
 8000600:	f002 fb0a 	bl	8002c18 <OLED_SendBuffer>
	return PROGRAMS_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	0800058d 	.word	0x0800058d
 8000610:	080005ad 	.word	0x080005ad
 8000614:	080007f1 	.word	0x080007f1

08000618 <Prog_DiodeTest_Deinit>:

Programs_error_t Prog_DiodeTest_Deinit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	DiodeState = 0;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <Prog_DiodeTest_Deinit+0x18>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	return PROGRAMS_OK;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	200001b4 	.word	0x200001b4

08000634 <Prog_DiodeTest_Program>:
//
// -- Main Diode Test Program for Controller --
//

Programs_error_t Prog_DiodeTest_Program(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 8000638:	2000      	movs	r0, #0
 800063a:	f002 fb19 	bl	8002c70 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	2000      	movs	r0, #0
 8000642:	f002 fa5b 	bl	8002afc <OLED_MoveCursor>
	OLED_WriteString("LED STATE:", WHITE);
 8000646:	2101      	movs	r1, #1
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <Prog_DiodeTest_Program+0x38>)
 800064a:	f002 fbdb 	bl	8002e04 <OLED_WriteString>
	OLED_MoveCursor(0, 16);
 800064e:	2110      	movs	r1, #16
 8000650:	2000      	movs	r0, #0
 8000652:	f002 fa53 	bl	8002afc <OLED_MoveCursor>
	OLED_WriteInt(DiodeState, WHITE);
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <Prog_DiodeTest_Program+0x3c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fbf7 	bl	8002e50 <OLED_WriteInt>
	OLED_SendBuffer();
 8000662:	f002 fad9 	bl	8002c18 <OLED_SendBuffer>

	return PROGRAMS_OK;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	bd80      	pop	{r7, pc}
 800066c:	0800835c 	.word	0x0800835c
 8000670:	200001b4 	.word	0x200001b4

08000674 <Prog_DiodeTest_Launch>:
//
// -- Set / Launch function --
//

void Prog_DiodeTest_Launch(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	Programs_SetProgram(&DiodeTestProgram);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <Prog_DiodeTest_Launch+0x10>)
 800067a:	f000 f88d 	bl	8000798 <Programs_SetProgram>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <Prog_DiodeTest_Parser>:
//
// -- Program Parser --
//

void Prog_DiodeTest_Parser(uint8_t *command, uint8_t length)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60fb      	str	r3, [r7, #12]

	switch(*CurrentByte)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b22      	cmp	r3, #34	; 0x22
 800069e:	d107      	bne.n	80006b0 <Prog_DiodeTest_Parser+0x28>
	{
	case DIODE_REAL_STATE:
		CurrentByte++;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
		DiodeState = *CurrentByte;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <Prog_DiodeTest_Parser+0x38>)
 80006ac:	701a      	strb	r2, [r3, #0]
		break;
 80006ae:	e000      	b.n	80006b2 <Prog_DiodeTest_Parser+0x2a>

	default:
		break;
 80006b0:	bf00      	nop
	}
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	200001b4 	.word	0x200001b4

080006c4 <Prog_MotorsDebug_Init>:

//
// -- Init & Deinit functions for Motors Debug Program --
//
Programs_error_t Prog_MotorsDebug_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	Inputs_ClearButtonsCallbacks();
 80006c8:	f000 fc32 	bl	8000f30 <Inputs_ClearButtonsCallbacks>
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, NULL, &Programs_ExitProgram);
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <Prog_MotorsDebug_Init+0x2c>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	2004      	movs	r0, #4
 80006d2:	f000 fbe7 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>


	OLED_ClearBuffer(BLACK);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f002 faca 	bl	8002c70 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	f002 fa0c 	bl	8002afc <OLED_MoveCursor>
	OLED_SendBuffer();
 80006e4:	f002 fa98 	bl	8002c18 <OLED_SendBuffer>
	return PROGRAMS_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	080007f1 	.word	0x080007f1

080006f4 <Prog_MotorsDebug_Deinit>:

Programs_error_t Prog_MotorsDebug_Deinit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

	return PROGRAMS_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <Prog_MotorsDebug_Program>:
//
// -- Main Diode Test Program for Controller --
//

Programs_error_t Prog_MotorsDebug_Program(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	OLED_ClearBuffer(BLACK);
 8000708:	2000      	movs	r0, #0
 800070a:	f002 fab1 	bl	8002c70 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f002 f9f3 	bl	8002afc <OLED_MoveCursor>

	OLED_SendBuffer();
 8000716:	f002 fa7f 	bl	8002c18 <OLED_SendBuffer>

	return PROGRAMS_OK;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	bd80      	pop	{r7, pc}

08000720 <Prog_MotorsDebug_Launch>:
//
// -- Set / Launch function --
//

void Prog_MotorsDebug_Launch(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	Programs_SetProgram(&MotorsDebugProgram);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <Prog_MotorsDebug_Launch+0x10>)
 8000726:	f000 f837 	bl	8000798 <Programs_SetProgram>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000014 	.word	0x20000014

08000734 <Prog_MotorsDebug_Parser>:
//
// -- Program Parser --
//

void Prog_MotorsDebug_Parser(uint8_t *command, uint8_t length)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60fb      	str	r3, [r7, #12]
	switch(*CurrentByte)
	{


	default:
		break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <Programs_SendProgramStartCommand>:
//
//	-- Sending programs start/exit commands --
//

static Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = START_PROGRAM;
 800075c:	2310      	movs	r3, #16
 800075e:	733b      	strb	r3, [r7, #12]
	Buffer[1] = ProgramID;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ffce 	bl	800170c <Radio_TxBufferPut>
 8000770:	4603      	mov	r3, r0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <Programs_SendProgramExitCommand>:

static Programs_error_t Programs_SendProgramExitCommand(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
	uint8_t Buffer = EXIT_PROGRAM;
 8000780:	2311      	movs	r3, #17
 8000782:	71fb      	strb	r3, [r7, #7]
	return Radio_TxBufferPut(&Buffer, 1);
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 ffbf 	bl	800170c <Radio_TxBufferPut>
 800078e:	4603      	mov	r3, r0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <Programs_SetProgram>:
//

/* Function starting a launch of specific program by setting current pointer
 * to program and sending start command to robot 				*/
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToSet)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <Programs_SetProgram+0x12>
	{
		return PROGRAMS_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e017      	b.n	80007da <Programs_SetProgram+0x42>
	}

	if(NULL == CurrentlyRunningProg)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <Programs_SetProgram+0x4c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d112      	bne.n	80007d8 <Programs_SetProgram+0x40>
	{
		CurrentlyRunningProg = ProgramToSet;
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <Programs_SetProgram+0x4c>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6013      	str	r3, [r2, #0]
		Programs_SendProgramStartCommand(ProgramToSet->ProgramID);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c1b      	ldrb	r3, [r3, #16]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ffc8 	bl	8000752 <Programs_SendProgramStartCommand>
		TimeoutStamp = HAL_GetTick();
 80007c2:	f002 fe15 	bl	80033f0 <HAL_GetTick>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <Programs_SetProgram+0x50>)
 80007cc:	801a      	strh	r2, [r3, #0]
		ProgramState = PROGRAM_LAUNCHING;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <Programs_SetProgram+0x54>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
		return PROGRAMS_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e000      	b.n	80007da <Programs_SetProgram+0x42>
	}
	else
	{
		return PROGRAMS_ERROR;
 80007d8:	2301      	movs	r3, #1
	}
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001b8 	.word	0x200001b8
 80007e8:	200001be 	.word	0x200001be
 80007ec:	200001bc 	.word	0x200001bc

080007f0 <Programs_ExitProgram>:

/* Function starting a exit program process */
void Programs_ExitProgram(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* Call program DeInit function */
	CurrentlyRunningProg->ProgramExitFunction();
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <Programs_ExitProgram+0x28>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4798      	blx	r3
	/*Send exit program command to robot */
	Programs_SendProgramExitCommand();
 80007fc:	f7ff ffbd 	bl	800077a <Programs_SendProgramExitCommand>
	/*Start counting timeout for wainting to robot's ACK */
	TimeoutStamp = HAL_GetTick();
 8000800:	f002 fdf6 	bl	80033f0 <HAL_GetTick>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <Programs_ExitProgram+0x2c>)
 800080a:	801a      	strh	r2, [r3, #0]
	ProgramState = PROGRAM_EXITING;
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <Programs_ExitProgram+0x30>)
 800080e:	2203      	movs	r2, #3
 8000810:	701a      	strb	r2, [r3, #0]

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001b8 	.word	0x200001b8
 800081c:	200001be 	.word	0x200001be
 8000820:	200001bc 	.word	0x200001bc

08000824 <Programs_GetProgram>:

/* Function which returns current pointer to program */
Programs_Program_t* Programs_GetProgram(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	return CurrentlyRunningProg;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <Programs_GetProgram+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200001b8 	.word	0x200001b8

0800083c <Programs_ClearProgram>:

/* Clearing the program pointer and status variable */
void Programs_ClearProgram(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	CurrentlyRunningProg = NULL;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <Programs_ClearProgram+0x1c>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
	ProgramState = NO_PROGRAM_SET;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <Programs_ClearProgram+0x20>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200001b8 	.word	0x200001b8
 800085c:	200001bc 	.word	0x200001bc

08000860 <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	switch(ProgramState)
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <Programs_PerformProgram+0x94>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b07      	cmp	r3, #7
 800086a:	d837      	bhi.n	80008dc <Programs_PerformProgram+0x7c>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <Programs_PerformProgram+0x14>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	080008dd 	.word	0x080008dd
 8000878:	08000895 	.word	0x08000895
 800087c:	080008af 	.word	0x080008af
 8000880:	080008c3 	.word	0x080008c3
 8000884:	080008dd 	.word	0x080008dd
 8000888:	080008dd 	.word	0x080008dd
 800088c:	080008dd 	.word	0x080008dd
 8000890:	080008dd 	.word	0x080008dd
		/* No program set, no action */
		break;

	case PROGRAM_LAUNCHING:
		/* Waiting for program launch ACK from robot */
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
 8000894:	f002 fdac 	bl	80033f0 <HAL_GetTick>
 8000898:	4603      	mov	r3, r0
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <Programs_PerformProgram+0x98>)
 800089c:	8812      	ldrh	r2, [r2, #0]
 800089e:	1a9b      	subs	r3, r3, r2
 80008a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008a4:	d91c      	bls.n	80008e0 <Programs_PerformProgram+0x80>
		{
			ProgramState = PROGRAM_LAUNCH_ERROR;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <Programs_PerformProgram+0x94>)
 80008a8:	2206      	movs	r2, #6
 80008aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008ac:	e018      	b.n	80008e0 <Programs_PerformProgram+0x80>

	case PROGRAM_IN_PROGRESS:
		/* Run the program */
		if(NULL != CurrentlyRunningProg->ProgramRoutine)
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <Programs_PerformProgram+0x9c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d015      	beq.n	80008e4 <Programs_PerformProgram+0x84>
		{
			CurrentlyRunningProg->ProgramRoutine();
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <Programs_PerformProgram+0x9c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	4798      	blx	r3
		}
		break;
 80008c0:	e010      	b.n	80008e4 <Programs_PerformProgram+0x84>

	case PROGRAM_EXITING:
		/* Waiting for program exit ACK from robot */
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
 80008c2:	f002 fd95 	bl	80033f0 <HAL_GetTick>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <Programs_PerformProgram+0x98>)
 80008ca:	8812      	ldrh	r2, [r2, #0]
 80008cc:	1a9b      	subs	r3, r3, r2
 80008ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d2:	d909      	bls.n	80008e8 <Programs_PerformProgram+0x88>
		{
			ProgramState = PROGRAM_EXIT_ERROR;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <Programs_PerformProgram+0x94>)
 80008d6:	2207      	movs	r2, #7
 80008d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008da:	e005      	b.n	80008e8 <Programs_PerformProgram+0x88>
		/* Clear the program after exit error*/
		//Programs_ClearProgram();
		break;

	default:
		break;
 80008dc:	bf00      	nop
 80008de:	e004      	b.n	80008ea <Programs_PerformProgram+0x8a>
		break;
 80008e0:	bf00      	nop
 80008e2:	e002      	b.n	80008ea <Programs_PerformProgram+0x8a>
		break;
 80008e4:	bf00      	nop
 80008e6:	e000      	b.n	80008ea <Programs_PerformProgram+0x8a>
		break;
 80008e8:	bf00      	nop
	}

	return ProgramState;
 80008ea:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <Programs_PerformProgram+0x94>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200001bc 	.word	0x200001bc
 80008f8:	200001be 	.word	0x200001be
 80008fc:	200001b8 	.word	0x200001b8

08000900 <Programs_ProgramLaunchedACK>:
//

/* This functions are called by parser, when the robot acknowledges the proper program launch */

void Programs_ProgramLaunchedACK(uint8_t ProgramID, uint8_t ACKorNACK)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
	switch(ACKorNACK)
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	2bf0      	cmp	r3, #240	; 0xf0
 8000914:	d002      	beq.n	800091c <Programs_ProgramLaunchedACK+0x1c>
 8000916:	2bf1      	cmp	r3, #241	; 0xf1
 8000918:	d012      	beq.n	8000940 <Programs_ProgramLaunchedACK+0x40>
		//TODO: ADD NACK MANAGEMENT
		break;

	default:

		break;
 800091a:	e014      	b.n	8000946 <Programs_ProgramLaunchedACK+0x46>
		if(PROGRAM_LAUNCHING == ProgramState && ProgramID == CurrentlyRunningProg->ProgramID)
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <Programs_ProgramLaunchedACK+0x50>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10f      	bne.n	8000944 <Programs_ProgramLaunchedACK+0x44>
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <Programs_ProgramLaunchedACK+0x54>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	7c1b      	ldrb	r3, [r3, #16]
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	429a      	cmp	r2, r3
 800092e:	d109      	bne.n	8000944 <Programs_ProgramLaunchedACK+0x44>
				CurrentlyRunningProg->ProgramInitFunction();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <Programs_ProgramLaunchedACK+0x54>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4798      	blx	r3
				ProgramState = PROGRAM_IN_PROGRESS;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <Programs_ProgramLaunchedACK+0x50>)
 800093a:	2202      	movs	r2, #2
 800093c:	701a      	strb	r2, [r3, #0]
		break;
 800093e:	e001      	b.n	8000944 <Programs_ProgramLaunchedACK+0x44>
		break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <Programs_ProgramLaunchedACK+0x46>
		break;
 8000944:	bf00      	nop
	}
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001bc 	.word	0x200001bc
 8000954:	200001b8 	.word	0x200001b8

08000958 <Programs_ProgramExitACK>:

void Programs_ProgramExitACK(uint8_t ACKorNACK)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	switch(ACKorNACK)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2bf0      	cmp	r3, #240	; 0xf0
 8000966:	d002      	beq.n	800096e <Programs_ProgramExitACK+0x16>
 8000968:	2bf1      	cmp	r3, #241	; 0xf1
 800096a:	d008      	beq.n	800097e <Programs_ProgramExitACK+0x26>
		//TODO: ADD NACK MANAGEMENT
		break;

	default:

		break;
 800096c:	e00a      	b.n	8000984 <Programs_ProgramExitACK+0x2c>
		if(PROGRAM_EXITING == ProgramState)
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <Programs_ProgramExitACK+0x38>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d105      	bne.n	8000982 <Programs_ProgramExitACK+0x2a>
			ProgramState = PROGRAM_COMPLETED;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <Programs_ProgramExitACK+0x38>)
 8000978:	2205      	movs	r2, #5
 800097a:	701a      	strb	r2, [r3, #0]
		break;
 800097c:	e001      	b.n	8000982 <Programs_ProgramExitACK+0x2a>
		break;
 800097e:	bf00      	nop
 8000980:	e000      	b.n	8000984 <Programs_ProgramExitACK+0x2c>
		break;
 8000982:	bf00      	nop
	}

}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	200001bc 	.word	0x200001bc

08000994 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a6:	3301      	adds	r3, #1
 80009a8:	425a      	negs	r2, r3
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	f002 021f 	and.w	r2, r2, #31
 80009b2:	bf58      	it	pl
 80009b4:	4253      	negpl	r3, r2
 80009b6:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d101      	bne.n	80009c8 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e00b      	b.n	80009e0 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ce:	4619      	mov	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	78fa      	ldrb	r2, [r7, #3]
 80009d4:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009fc:	3301      	adds	r3, #1
 80009fe:	425a      	negs	r2, r3
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	f002 021f 	and.w	r2, r2, #31
 8000a08:	bf58      	it	pl
 8000a0a:	4253      	negpl	r3, r2
 8000a0c:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d101      	bne.n	8000a22 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00c      	b.n	8000a3c <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	5c9a      	ldrb	r2, [r3, r2]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a5c:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <MX_ADC1_Init+0xf0>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a68:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a6e:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <MX_ADC1_Init+0xf4>)
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa8:	4822      	ldr	r0, [pc, #136]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000aaa:	f002 fcd1 	bl	8003450 <HAL_ADC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f001 f838 	bl	8001b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab8:	230b      	movs	r3, #11
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000aca:	f002 ff23 	bl	8003914 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ad4:	f001 f828 	bl	8001b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000ae6:	f002 ff15 	bl	8003914 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af0:	f001 f81a 	bl	8001b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000af8:	2303      	movs	r3, #3
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000b02:	f002 ff07 	bl	8003914 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b0c:	f001 f80c 	bl	8001b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0xec>)
 8000b1e:	f002 fef9 	bl	8003914 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b28:	f000 fffe 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001c0 	.word	0x200001c0
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	0f000001 	.word	0x0f000001

08000b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a3c      	ldr	r2, [pc, #240]	; (8000c50 <HAL_ADC_MspInit+0x110>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d171      	bne.n	8000c46 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a33      	ldr	r2, [pc, #204]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_ADC_MspInit+0x114>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_ADC_Y_Pin|JOY1_ADC_X_Pin;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4823      	ldr	r0, [pc, #140]	; (8000c58 <HAL_ADC_MspInit+0x118>)
 8000bca:	f003 fe01 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_ADC_Y_Pin|JOY2_ADC_X_Pin;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	481e      	ldr	r0, [pc, #120]	; (8000c5c <HAL_ADC_MspInit+0x11c>)
 8000be2:	f003 fdf5 	bl	80047d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_ADC_MspInit+0x124>)
 8000bea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c2c:	f003 fa3e 	bl	80040ac <HAL_DMA_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000c36:	f000 ff77 	bl	8001b28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_ADC_MspInit+0x120>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	20000208 	.word	0x20000208
 8000c64:	40026410 	.word	0x40026410

08000c68 <Inputs_Init>:
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af02      	add	r7, sp, #8
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
 8000c6e:	4828      	ldr	r0, [pc, #160]	; (8000d10 <Inputs_Init+0xa8>)
 8000c70:	f005 ff64 	bl	8006b3c <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
 8000c74:	2228      	movs	r2, #40	; 0x28
 8000c76:	4927      	ldr	r1, [pc, #156]	; (8000d14 <Inputs_Init+0xac>)
 8000c78:	4827      	ldr	r0, [pc, #156]	; (8000d18 <Inputs_Init+0xb0>)
 8000c7a:	f002 fd3d 	bl	80036f8 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8000c7e:	2032      	movs	r0, #50	; 0x32
 8000c80:	f002 fbc2 	bl	8003408 <HAL_Delay>
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
 8000c84:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <Inputs_Init+0xb4>)
 8000c86:	4926      	ldr	r1, [pc, #152]	; (8000d20 <Inputs_Init+0xb8>)
 8000c88:	4826      	ldr	r0, [pc, #152]	; (8000d24 <Inputs_Init+0xbc>)
 8000c8a:	f000 fc81 	bl	8001590 <JoyS_Init>
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
 8000c8e:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <Inputs_Init+0xc0>)
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <Inputs_Init+0xc4>)
 8000c92:	4827      	ldr	r0, [pc, #156]	; (8000d30 <Inputs_Init+0xc8>)
 8000c94:	f000 fc7c 	bl	8001590 <JoyS_Init>
	JoyS_SetIdleValues(&LeftJoystick);
 8000c98:	4822      	ldr	r0, [pc, #136]	; (8000d24 <Inputs_Init+0xbc>)
 8000c9a:	f000 fc94 	bl	80015c6 <JoyS_SetIdleValues>
	JoyS_SetIdleValues(&RightJoystick);
 8000c9e:	4824      	ldr	r0, [pc, #144]	; (8000d30 <Inputs_Init+0xc8>)
 8000ca0:	f000 fc91 	bl	80015c6 <JoyS_SetIdleValues>

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ca4:	213c      	movs	r1, #60	; 0x3c
 8000ca6:	481a      	ldr	r0, [pc, #104]	; (8000d10 <Inputs_Init+0xa8>)
 8000ca8:	f006 f848 	bl	8006d3c <HAL_TIM_Encoder_Start>

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
 8000cac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2332      	movs	r3, #50	; 0x32
 8000cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb8:	491e      	ldr	r1, [pc, #120]	; (8000d34 <Inputs_Init+0xcc>)
 8000cba:	481f      	ldr	r0, [pc, #124]	; (8000d38 <Inputs_Init+0xd0>)
 8000cbc:	f000 f9a4 	bl	8001008 <DB_ButtonInit>
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
 8000cc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2332      	movs	r3, #50	; 0x32
 8000cc8:	2204      	movs	r2, #4
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <Inputs_Init+0xd4>)
 8000ccc:	481c      	ldr	r0, [pc, #112]	; (8000d40 <Inputs_Init+0xd8>)
 8000cce:	f000 f99b 	bl	8001008 <DB_ButtonInit>
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
 8000cd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2332      	movs	r3, #50	; 0x32
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4915      	ldr	r1, [pc, #84]	; (8000d34 <Inputs_Init+0xcc>)
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <Inputs_Init+0xdc>)
 8000ce0:	f000 f992 	bl	8001008 <DB_ButtonInit>
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
 8000ce4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2332      	movs	r3, #50	; 0x32
 8000cec:	2201      	movs	r2, #1
 8000cee:	4916      	ldr	r1, [pc, #88]	; (8000d48 <Inputs_Init+0xe0>)
 8000cf0:	4816      	ldr	r0, [pc, #88]	; (8000d4c <Inputs_Init+0xe4>)
 8000cf2:	f000 f989 	bl	8001008 <DB_ButtonInit>
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
 8000cf6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2332      	movs	r3, #50	; 0x32
 8000cfe:	2220      	movs	r2, #32
 8000d00:	4911      	ldr	r1, [pc, #68]	; (8000d48 <Inputs_Init+0xe0>)
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <Inputs_Init+0xe8>)
 8000d04:	f000 f980 	bl	8001008 <DB_ButtonInit>
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000910 	.word	0x20000910
 8000d14:	20000268 	.word	0x20000268
 8000d18:	200001c0 	.word	0x200001c0
 8000d1c:	200002ba 	.word	0x200002ba
 8000d20:	200002b8 	.word	0x200002b8
 8000d24:	200002c0 	.word	0x200002c0
 8000d28:	200002be 	.word	0x200002be
 8000d2c:	200002bc 	.word	0x200002bc
 8000d30:	200002d8 	.word	0x200002d8
 8000d34:	40020800 	.word	0x40020800
 8000d38:	200002f0 	.word	0x200002f0
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	20000310 	.word	0x20000310
 8000d44:	20000330 	.word	0x20000330
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	20000350 	.word	0x20000350
 8000d50:	20000370 	.word	0x20000370

08000d54 <HAL_ADC_ConvCpltCallback>:
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	ValuesBuffer[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
	ValuesBuffer[2] = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
	ValuesBuffer[3] = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < 37; i+=4)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	77fb      	strb	r3, [r7, #31]
 8000d70:	e021      	b.n	8000db6 <HAL_ADC_ConvCpltCallback+0x62>
	{
		ValuesBuffer[0] += AdcSamples[i];
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	7ffa      	ldrb	r2, [r7, #31]
 8000d76:	4924      	ldr	r1, [pc, #144]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000d78:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
		ValuesBuffer[1] += AdcSamples[i+1];
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	7ffa      	ldrb	r2, [r7, #31]
 8000d84:	3201      	adds	r2, #1
 8000d86:	4920      	ldr	r1, [pc, #128]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000d88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
		ValuesBuffer[2] += AdcSamples[i+2];
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	7ffa      	ldrb	r2, [r7, #31]
 8000d94:	3202      	adds	r2, #2
 8000d96:	491c      	ldr	r1, [pc, #112]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000d98:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
		ValuesBuffer[3] += AdcSamples[i+3];
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	7ffa      	ldrb	r2, [r7, #31]
 8000da4:	3203      	adds	r2, #3
 8000da6:	4918      	ldr	r1, [pc, #96]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000da8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dac:	4413      	add	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < 37; i+=4)
 8000db0:	7ffb      	ldrb	r3, [r7, #31]
 8000db2:	3304      	adds	r3, #4
 8000db4:	77fb      	strb	r3, [r7, #31]
 8000db6:	7ffb      	ldrb	r3, [r7, #31]
 8000db8:	2b24      	cmp	r3, #36	; 0x24
 8000dba:	d9da      	bls.n	8000d72 <HAL_ADC_ConvCpltCallback+0x1e>
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000dca:	801a      	strh	r2, [r3, #0]
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000dda:	805a      	strh	r2, [r3, #2]
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000dea:	809a      	strh	r2, [r3, #4]
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000dfa:	80da      	strh	r2, [r3, #6]
}
 8000dfc:	bf00      	nop
 8000dfe:	3724      	adds	r7, #36	; 0x24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20000268 	.word	0x20000268
 8000e0c:	cccccccd 	.word	0xcccccccd
 8000e10:	200002b8 	.word	0x200002b8

08000e14 <Inputs_GetEncoderCount>:

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <Inputs_GetEncoderCount+0x4c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <Inputs_GetEncoderCount+0x50>)
 8000e22:	8812      	ldrh	r2, [r2, #0]
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	607b      	str	r3, [r7, #4]
	if(CounterDif >= 4 || CounterDif <= -4)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	dc03      	bgt.n	8000e36 <Inputs_GetEncoderCount+0x22>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f113 0f03 	cmn.w	r3, #3
 8000e34:	da0d      	bge.n	8000e52 <Inputs_GetEncoderCount+0x3e>
	{
		LastTimerCounter = htim3.Instance->CNT;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <Inputs_GetEncoderCount+0x4c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <Inputs_GetEncoderCount+0x50>)
 8000e40:	801a      	strh	r2, [r3, #0]
		return (int8_t)(-CounterDif / 4);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da00      	bge.n	8000e4a <Inputs_GetEncoderCount+0x36>
 8000e48:	3303      	adds	r3, #3
 8000e4a:	109b      	asrs	r3, r3, #2
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	e000      	b.n	8000e54 <Inputs_GetEncoderCount+0x40>
	}
	else
	{
		return 0;
 8000e52:	2300      	movs	r3, #0
	}
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000910 	.word	0x20000910
 8000e64:	20000390 	.word	0x20000390

08000e68 <Inputs_ButtonsRoutine>:
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	DB_ButtonProcess(&ButtonUp);
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <Inputs_ButtonsRoutine+0x28>)
 8000e6e:	f000 f917 	bl	80010a0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonDown);
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <Inputs_ButtonsRoutine+0x2c>)
 8000e74:	f000 f914 	bl	80010a0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonRightJ);
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <Inputs_ButtonsRoutine+0x30>)
 8000e7a:	f000 f911 	bl	80010a0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonLeftJ);
 8000e7e:	4807      	ldr	r0, [pc, #28]	; (8000e9c <Inputs_ButtonsRoutine+0x34>)
 8000e80:	f000 f90e 	bl	80010a0 <DB_ButtonProcess>
	DB_ButtonProcess(&ButtonEncoder);
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <Inputs_ButtonsRoutine+0x38>)
 8000e86:	f000 f90b 	bl	80010a0 <DB_ButtonProcess>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200002f0 	.word	0x200002f0
 8000e94:	20000310 	.word	0x20000310
 8000e98:	20000350 	.word	0x20000350
 8000e9c:	20000330 	.word	0x20000330
 8000ea0:	20000370 	.word	0x20000370

08000ea4 <Inputs_ButtonsRegisterCallback>:

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
	switch(ButtonID)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d82b      	bhi.n	8000f10 <Inputs_ButtonsRegisterCallback+0x6c>
 8000eb8:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <Inputs_ButtonsRegisterCallback+0x1c>)
 8000eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebe:	bf00      	nop
 8000ec0:	08000ed5 	.word	0x08000ed5
 8000ec4:	08000ee1 	.word	0x08000ee1
 8000ec8:	08000eed 	.word	0x08000eed
 8000ecc:	08000ef9 	.word	0x08000ef9
 8000ed0:	08000f05 	.word	0x08000f05
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <Inputs_ButtonsRegisterCallback+0x78>)
 8000eda:	f000 f8b8 	bl	800104e <DB_ButtonPressCallbackRegister>
		break;
 8000ede:	e018      	b.n	8000f12 <Inputs_ButtonsRegisterCallback+0x6e>
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	480e      	ldr	r0, [pc, #56]	; (8000f20 <Inputs_ButtonsRegisterCallback+0x7c>)
 8000ee6:	f000 f8b2 	bl	800104e <DB_ButtonPressCallbackRegister>
		break;
 8000eea:	e012      	b.n	8000f12 <Inputs_ButtonsRegisterCallback+0x6e>
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <Inputs_ButtonsRegisterCallback+0x80>)
 8000ef2:	f000 f8ac 	bl	800104e <DB_ButtonPressCallbackRegister>
		break;
 8000ef6:	e00c      	b.n	8000f12 <Inputs_ButtonsRegisterCallback+0x6e>
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	480a      	ldr	r0, [pc, #40]	; (8000f28 <Inputs_ButtonsRegisterCallback+0x84>)
 8000efe:	f000 f8a6 	bl	800104e <DB_ButtonPressCallbackRegister>
		break;
 8000f02:	e006      	b.n	8000f12 <Inputs_ButtonsRegisterCallback+0x6e>
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <Inputs_ButtonsRegisterCallback+0x88>)
 8000f0a:	f000 f8a0 	bl	800104e <DB_ButtonPressCallbackRegister>
		break;
 8000f0e:	e000      	b.n	8000f12 <Inputs_ButtonsRegisterCallback+0x6e>
	default:
		break;
 8000f10:	bf00      	nop
	}
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002f0 	.word	0x200002f0
 8000f20:	20000310 	.word	0x20000310
 8000f24:	20000330 	.word	0x20000330
 8000f28:	20000350 	.word	0x20000350
 8000f2c:	20000370 	.word	0x20000370

08000f30 <Inputs_ClearButtonsCallbacks>:

void Inputs_ClearButtonsCallbacks(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <Inputs_ClearButtonsCallbacks+0x3c>)
 8000f3a:	f000 f888 	bl	800104e <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <Inputs_ClearButtonsCallbacks+0x40>)
 8000f44:	f000 f883 	bl	800104e <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <Inputs_ClearButtonsCallbacks+0x44>)
 8000f4e:	f000 f87e 	bl	800104e <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <Inputs_ClearButtonsCallbacks+0x48>)
 8000f58:	f000 f879 	bl	800104e <DB_ButtonPressCallbackRegister>
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <Inputs_ClearButtonsCallbacks+0x4c>)
 8000f62:	f000 f874 	bl	800104e <DB_ButtonPressCallbackRegister>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002f0 	.word	0x200002f0
 8000f70:	20000310 	.word	0x20000310
 8000f74:	20000330 	.word	0x20000330
 8000f78:	20000350 	.word	0x20000350
 8000f7c:	20000370 	.word	0x20000370

08000f80 <Parser_Controller>:
#include "Programs/DiodeTest_Prog.h"
#include "Programs/MotorsDebug_Prog.h"


void Parser_Controller(uint8_t *command, uint8_t length)							//main parser funciton
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	617b      	str	r3, [r7, #20]
	uint8_t Length = length;
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	74fb      	strb	r3, [r7, #19]
	Programs_Program_t* CurrentProgram = Programs_GetProgram();
 8000f94:	f7ff fc46 	bl	8000824 <Programs_GetProgram>
 8000f98:	60f8      	str	r0, [r7, #12]

	/* If the command header is currently running program's ID, then pass the rest fo the command to it's parser */
	if(NULL != CurrentProgram && *CurrentByte == CurrentProgram->ProgramID)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d012      	beq.n	8000fc6 <Parser_Controller+0x46>
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	7c1b      	ldrb	r3, [r3, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d10c      	bne.n	8000fc6 <Parser_Controller+0x46>
	{
		CurrentByte++;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
		Length--;
 8000fb2:	7cfb      	ldrb	r3, [r7, #19]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	74fb      	strb	r3, [r7, #19]
		/* Frame: [ProgramID, Specific program commands...] */
		CurrentProgram->ProgramParser(CurrentByte, Length);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	7cfa      	ldrb	r2, [r7, #19]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	4798      	blx	r3
 8000fc4:	e01c      	b.n	8001000 <Parser_Controller+0x80>
	}
	else
	/* If command header is different, check if it is launch/exit commands */
	{
		switch(*CurrentByte)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d002      	beq.n	8000fd4 <Parser_Controller+0x54>
 8000fce:	2b11      	cmp	r3, #17
 8000fd0:	d00d      	beq.n	8000fee <Parser_Controller+0x6e>
			CurrentByte++;
			Programs_ProgramExitACK(*CurrentByte);
			break;

		default:
			break;
 8000fd2:	e015      	b.n	8001000 <Parser_Controller+0x80>
			CurrentByte++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
			Programs_ProgramLaunchedACK(*CurrentByte, *(CurrentByte + 1) );
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	f7ff fc8a 	bl	8000900 <Programs_ProgramLaunchedACK>
			break;
 8000fec:	e008      	b.n	8001000 <Parser_Controller+0x80>
			CurrentByte++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
			Programs_ProgramExitACK(*CurrentByte);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fcad 	bl	8000958 <Programs_ProgramExitACK>
			break;
 8000ffe:	bf00      	nop
		}
	}
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <DB_ButtonInit>:

#include "debounce.h"
#include "stdio.h"

void DB_ButtonInit(DB_Button_t *Button, GPIO_TypeDef* GPIOx, uint16_t Gpio_Pin, uint32_t DebounceTime_ms, uint32_t HoldTime_ms)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	80fb      	strh	r3, [r7, #6]
	Button->Button_Port = GPIOx;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	605a      	str	r2, [r3, #4]
	Button->Button_Pin = Gpio_Pin;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	88fa      	ldrh	r2, [r7, #6]
 8001022:	801a      	strh	r2, [r3, #0]
	Button->DebounceTime_ms = DebounceTime_ms;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	60da      	str	r2, [r3, #12]
	Button->HoldTime_ms = HoldTime_ms;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	609a      	str	r2, [r3, #8]
	Button->ButtonState = IDLE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	761a      	strb	r2, [r3, #24]
	Button->ButtonPressAction = NULL;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = NULL;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DB_ButtonPressCallbackRegister>:

void DB_ButtonPressCallbackRegister(DB_Button_t *Button, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	Button->ButtonPressAction = PressActionFun;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	611a      	str	r2, [r3, #16]
	Button->ButtonHoldAction = HoldActionFun;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	615a      	str	r2, [r3, #20]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <DB_IsButtonPressed>:

static uint8_t DB_IsButtonPressed(DB_Button_t *Button)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button->Button_Port, Button->Button_Pin) )
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f003 fd27 	bl	8004ad8 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <DB_IsButtonPressed+0x22>
	{
		return 1;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <DB_IsButtonPressed+0x24>
	}
	else
	{
		return 0;
 8001094:	2300      	movs	r3, #0
	}
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <DB_ButtonProcess>:

void DB_ButtonProcess(DB_Button_t *Button)	//pass a handle to timer with 1ms tick! Don't forget to start a timer in main loop
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	switch(Button->ButtonState)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	f200 8082 	bhi.w	80011b6 <DB_ButtonProcess+0x116>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <DB_ButtonProcess+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010e7 	.word	0x080010e7
 80010c0:	08001127 	.word	0x08001127
 80010c4:	08001171 	.word	0x08001171
	{
	case IDLE:
		if(DB_IsButtonPressed(Button))
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffd2 	bl	8001072 <DB_IsButtonPressed>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d06b      	beq.n	80011ac <DB_ButtonProcess+0x10c>
		{
			Button->ButtonState = DEBOUNCE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	761a      	strb	r2, [r3, #24]
			Button->LastTick = HAL_GetTick();
 80010da:	f002 f989 	bl	80033f0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	61da      	str	r2, [r3, #28]
		}
		break;
 80010e4:	e062      	b.n	80011ac <DB_ButtonProcess+0x10c>
	case DEBOUNCE:
		if(HAL_GetTick() - (Button->LastTick) > (Button->DebounceTime_ms) )
 80010e6:	f002 f983 	bl	80033f0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d95a      	bls.n	80011b0 <DB_ButtonProcess+0x110>
		{
			if(DB_IsButtonPressed(Button))
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb9 	bl	8001072 <DB_IsButtonPressed>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <DB_ButtonProcess+0x78>
			{
				Button->ButtonState = PRESSED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2202      	movs	r2, #2
 800110a:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 800110c:	f002 f970 	bl	80033f0 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	61da      	str	r2, [r3, #28]
			{
				Button->ButtonState = IDLE;
				printf("Debounce: Button bounced \n");
			}
		}
		break;
 8001116:	e04b      	b.n	80011b0 <DB_ButtonProcess+0x110>
				Button->ButtonState = IDLE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	761a      	strb	r2, [r3, #24]
				printf("Debounce: Button bounced \n");
 800111e:	4828      	ldr	r0, [pc, #160]	; (80011c0 <DB_ButtonProcess+0x120>)
 8001120:	f006 fa12 	bl	8007548 <puts>
		break;
 8001124:	e044      	b.n	80011b0 <DB_ButtonProcess+0x110>
	case PRESSED:

		if(0 == DB_IsButtonPressed(Button))
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa3 	bl	8001072 <DB_IsButtonPressed>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <DB_ButtonProcess+0xae>
		{
			if(NULL != Button->ButtonPressAction)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <DB_ButtonProcess+0xa0>
			{
				Button->ButtonPressAction();
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4798      	blx	r3
			}
			Button->ButtonState = IDLE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
			printf("Debounce: Button pressed! \n");
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <DB_ButtonProcess+0x124>)
 8001148:	f006 f9fe 	bl	8007548 <puts>
			{
				Button->ButtonState = HOLD;
				Button->LastTick = HAL_GetTick();
			}
		}
		break;
 800114c:	e032      	b.n	80011b4 <DB_ButtonProcess+0x114>
			if(HAL_GetTick() - (Button->LastTick) > 150 )
 800114e:	f002 f94f 	bl	80033f0 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b96      	cmp	r3, #150	; 0x96
 800115c:	d92a      	bls.n	80011b4 <DB_ButtonProcess+0x114>
				Button->ButtonState = HOLD;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	761a      	strb	r2, [r3, #24]
				Button->LastTick = HAL_GetTick();
 8001164:	f002 f944 	bl	80033f0 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	61da      	str	r2, [r3, #28]
		break;
 800116e:	e021      	b.n	80011b4 <DB_ButtonProcess+0x114>
	case HOLD:
		if(HAL_GetTick() - (Button->LastTick) > (Button->HoldTime_ms) )
 8001170:	f002 f93e 	bl	80033f0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	429a      	cmp	r2, r3
 8001182:	d918      	bls.n	80011b6 <DB_ButtonProcess+0x116>
		{
			if(DB_IsButtonPressed(Button) && NULL != Button->ButtonHoldAction)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff74 	bl	8001072 <DB_IsButtonPressed>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d009      	beq.n	80011a4 <DB_ButtonProcess+0x104>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <DB_ButtonProcess+0x104>
			{
				Button->ButtonHoldAction();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4798      	blx	r3
				printf("Debounce: Button held! \r\n");
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <DB_ButtonProcess+0x128>)
 80011a0:	f006 f9d2 	bl	8007548 <puts>
			}
			Button->ButtonState = IDLE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
		}
	}
}
 80011aa:	e004      	b.n	80011b6 <DB_ButtonProcess+0x116>
		break;
 80011ac:	bf00      	nop
 80011ae:	e002      	b.n	80011b6 <DB_ButtonProcess+0x116>
		break;
 80011b0:	bf00      	nop
 80011b2:	e000      	b.n	80011b6 <DB_ButtonProcess+0x116>
		break;
 80011b4:	bf00      	nop
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	08008368 	.word	0x08008368
 80011c4:	08008384 	.word	0x08008384
 80011c8:	080083a0 	.word	0x080083a0

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_DMA_Init+0x3c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <MX_DMA_Init+0x3c>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_DMA_Init+0x3c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2038      	movs	r0, #56	; 0x38
 80011f4:	f002 ff23 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f8:	2038      	movs	r0, #56	; 0x38
 80011fa:	f002 ff3c 	bl	8004076 <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b57      	ldr	r3, [pc, #348]	; (8001384 <MX_GPIO_Init+0x178>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a56      	ldr	r2, [pc, #344]	; (8001384 <MX_GPIO_Init+0x178>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b54      	ldr	r3, [pc, #336]	; (8001384 <MX_GPIO_Init+0x178>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b50      	ldr	r3, [pc, #320]	; (8001384 <MX_GPIO_Init+0x178>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <MX_GPIO_Init+0x178>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <MX_GPIO_Init+0x178>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b49      	ldr	r3, [pc, #292]	; (8001384 <MX_GPIO_Init+0x178>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <MX_GPIO_Init+0x178>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <MX_GPIO_Init+0x178>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <MX_GPIO_Init+0x178>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a41      	ldr	r2, [pc, #260]	; (8001384 <MX_GPIO_Init+0x178>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <MX_GPIO_Init+0x178>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <MX_GPIO_Init+0x178>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a3a      	ldr	r2, [pc, #232]	; (8001384 <MX_GPIO_Init+0x178>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <MX_GPIO_Init+0x178>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2124      	movs	r1, #36	; 0x24
 80012b2:	4835      	ldr	r0, [pc, #212]	; (8001388 <MX_GPIO_Init+0x17c>)
 80012b4:	f003 fc28 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	21c0      	movs	r1, #192	; 0xc0
 80012bc:	4833      	ldr	r0, [pc, #204]	; (800138c <MX_GPIO_Init+0x180>)
 80012be:	f003 fc23 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_JOY1_Pin|BUTTON_UP_Pin;
 80012c2:	f240 4301 	movw	r3, #1025	; 0x401
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	482d      	ldr	r0, [pc, #180]	; (800138c <MX_GPIO_Init+0x180>)
 80012d8:	f003 fa7a 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_JOY2_Pin|BUTTON_ENC_Pin;
 80012dc:	2321      	movs	r3, #33	; 0x21
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4828      	ldr	r0, [pc, #160]	; (8001390 <MX_GPIO_Init+0x184>)
 80012f0:	f003 fa6e 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012f4:	2304      	movs	r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	481f      	ldr	r0, [pc, #124]	; (8001388 <MX_GPIO_Init+0x17c>)
 800130c:	f003 fa60 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001316:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4818      	ldr	r0, [pc, #96]	; (8001388 <MX_GPIO_Init+0x17c>)
 8001328:	f003 fa52 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 800132c:	23c0      	movs	r3, #192	; 0xc0
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4812      	ldr	r0, [pc, #72]	; (800138c <MX_GPIO_Init+0x180>)
 8001344:	f003 fa44 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8001348:	2304      	movs	r3, #4
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_GPIO_Init+0x188>)
 800135c:	f003 fa38 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEEP_ALIVE_Pin;
 8001360:	2320      	movs	r3, #32
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEEP_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_GPIO_Init+0x17c>)
 8001378:	f003 fa2a 	bl	80047d0 <HAL_GPIO_Init>

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020c00 	.word	0x40020c00

08001398 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C1_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d6:	f003 fbc9 	bl	8004b6c <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 fba2 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000394 	.word	0x20000394
 80013ec:	40005400 	.word	0x40005400
 80013f0:	00061a80 	.word	0x00061a80

080013f4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C3_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C3_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C3_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C3_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C3_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C3_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C3_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C3_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C3_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C3_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C3_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C3_Init+0x50>)
 8001432:	f003 fb9b 	bl	8004b6c <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 fb74 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200003e8 	.word	0x200003e8
 8001448:	40005c00 	.word	0x40005c00
 800144c:	00061a80 	.word	0x00061a80

08001450 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a42      	ldr	r2, [pc, #264]	; (8001578 <HAL_I2C_MspInit+0x128>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12d      	bne.n	80014ce <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_I2C_MspInit+0x12c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a40      	ldr	r2, [pc, #256]	; (800157c <HAL_I2C_MspInit+0x12c>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_I2C_MspInit+0x12c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4835      	ldr	r0, [pc, #212]	; (8001580 <HAL_I2C_MspInit+0x130>)
 80014ac:	f003 f990 	bl	80047d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014cc:	e050      	b.n	8001570 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <HAL_I2C_MspInit+0x134>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d14b      	bne.n	8001570 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6313      	str	r3, [r2, #48]	; 0x30
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_I2C_MspInit+0x12c>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_I2C_MspInit+0x12c>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001516:	2312      	movs	r3, #18
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001522:	2304      	movs	r3, #4
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4816      	ldr	r0, [pc, #88]	; (8001588 <HAL_I2C_MspInit+0x138>)
 800152e:	f003 f94f 	bl	80047d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001544:	2304      	movs	r3, #4
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <HAL_I2C_MspInit+0x13c>)
 8001550:	f003 f93e 	bl	80047d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_I2C_MspInit+0x12c>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_I2C_MspInit+0x12c>)
 800155e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_I2C_MspInit+0x12c>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005400 	.word	0x40005400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400
 8001584:	40005c00 	.word	0x40005c00
 8001588:	40020800 	.word	0x40020800
 800158c:	40020000 	.word	0x40020000

08001590 <JoyS_Init>:
#include "main.h"
#include "joystick.h"

//Use after starting ADC
JOYS_StatusTypeDef JoyS_Init(Joystick_t *Joystick, uint16_t *AdcValueSourceX, uint16_t *AdcValueSourceY)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	if(AdcValueSourceX || AdcValueSourceX)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <JoyS_Init+0x18>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <JoyS_Init+0x28>
	{
		Joystick->ValX = AdcValueSourceX;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	601a      	str	r2, [r3, #0]
		Joystick->ValY = AdcValueSourceY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	605a      	str	r2, [r3, #4]
		return JOYS_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <JoyS_Init+0x2a>
	}
	return JOYS_ERROR;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <JoyS_SetIdleValues>:

//When this function is called, joystick must be in idle position
JOYS_StatusTypeDef JoyS_SetIdleValues(Joystick_t *Joystick)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 80015ce:	f001 ff0f 	bl	80033f0 <HAL_GetTick>
 80015d2:	60f8      	str	r0, [r7, #12]
	while( (HAL_GetTick() - tick) < 100)
 80015d4:	e015      	b.n	8001602 <JoyS_SetIdleValues+0x3c>
	{
		if( ( *(Joystick->ValX) != 0) || ( *(Joystick->ValY) ) != 0 )
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <JoyS_SetIdleValues+0x24>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <JoyS_SetIdleValues+0x3c>
		{
			Joystick->IdleX = *(Joystick->ValX);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	811a      	strh	r2, [r3, #8]
			Joystick->IdleY = *(Joystick->ValY);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	881a      	ldrh	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	815a      	strh	r2, [r3, #10]
			return JOYS_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e007      	b.n	8001612 <JoyS_SetIdleValues+0x4c>
	while( (HAL_GetTick() - tick) < 100)
 8001602:	f001 fef5 	bl	80033f0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b63      	cmp	r3, #99	; 0x63
 800160e:	d9e2      	bls.n	80015d6 <JoyS_SetIdleValues+0x10>
		}
	}
	return JOYS_TIMEOUT;
 8001610:	2303      	movs	r3, #3
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 f87d 	bl	8002724 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 800162a:	4906      	ldr	r1, [pc, #24]	; (8001644 <Radio_Init+0x28>)
 800162c:	2000      	movs	r0, #0
 800162e:	f000 fe96 	bl	800235e <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <Radio_Init+0x2c>)
 8001634:	f000 fecc 	bl	80023d0 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 8001638:	f000 fcd6 	bl	8001fe8 <nRF24_TX_Mode>
#endif
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	080083bc 	.word	0x080083bc
 8001648:	080083c0 	.word	0x080083c0

0800164c <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 800165c:	2300      	movs	r3, #0
 800165e:	73bb      	strb	r3, [r7, #14]
 8001660:	e010      	b.n	8001684 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <Radio_RxBufferPut+0x4c>)
 800166a:	f7ff f993 	bl	8000994 <RBuffer_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	4313      	orrs	r3, r2
 8001676:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 800167e:	7bbb      	ldrb	r3, [r7, #14]
 8001680:	3301      	adds	r3, #1
 8001682:	73bb      	strb	r3, [r7, #14]
 8001684:	7bba      	ldrb	r2, [r7, #14]
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3ea      	bcc.n	8001662 <Radio_RxBufferPut+0x16>
	}
	return Status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000464 	.word	0x20000464

0800169c <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 80016ae:	f107 030d 	add.w	r3, r7, #13
 80016b2:	4619      	mov	r1, r3
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <Radio_RxBufferGet+0x6c>)
 80016b6:	f7ff f999 	bl	80009ec <RBuffer_Read>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80016c4:	e012      	b.n	80016ec <Radio_RxBufferGet+0x50>
	{

		*(CommandDestination+Length) = Data;				//write received byte to destination
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	7b7a      	ldrb	r2, [r7, #13]
 80016ce:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	3301      	adds	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 80016d6:	f107 030d 	add.w	r3, r7, #13
 80016da:	4619      	mov	r1, r3
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <Radio_RxBufferGet+0x6c>)
 80016de:	f7ff f985 	bl	80009ec <RBuffer_Read>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	7bbb      	ldrb	r3, [r7, #14]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d002      	beq.n	80016f8 <Radio_RxBufferGet+0x5c>
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0e6      	beq.n	80016c6 <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	701a      	strb	r2, [r3, #0]
	return Status;
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000464 	.word	0x20000464

0800170c <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 800171c:	2300      	movs	r3, #0
 800171e:	73bb      	strb	r3, [r7, #14]
 8001720:	e010      	b.n	8001744 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	480f      	ldr	r0, [pc, #60]	; (8001768 <Radio_TxBufferPut+0x5c>)
 800172a:	f7ff f933 	bl	8000994 <RBuffer_Write>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	4313      	orrs	r3, r2
 8001736:	73fb      	strb	r3, [r7, #15]
		Command++;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	3301      	adds	r3, #1
 8001742:	73bb      	strb	r3, [r7, #14]
 8001744:	7bba      	ldrb	r2, [r7, #14]
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3ea      	bcc.n	8001722 <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 800174c:	2104      	movs	r1, #4
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <Radio_TxBufferPut+0x5c>)
 8001750:	f7ff f920 	bl	8000994 <RBuffer_Write>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	4313      	orrs	r3, r2
 800175c:	73fb      	strb	r3, [r7, #15]
	return Status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000440 	.word	0x20000440

0800176c <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 800177e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001782:	1d3a      	adds	r2, r7, #4
 8001784:	4413      	add	r3, r2
 8001786:	4619      	mov	r1, r3
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <Radio_TxBufferSend+0x84>)
 800178a:	f7ff f92f 	bl	80009ec <RBuffer_Read>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001796:	4313      	orrs	r3, r2
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 800179c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80017a6:	3328      	adds	r3, #40	; 0x28
 80017a8:	443b      	add	r3, r7
 80017aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d003      	beq.n	80017ba <Radio_TxBufferSend+0x4e>
 80017b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0e1      	beq.n	800177e <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 80017ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d110      	bne.n	80017e4 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 80017c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 ff18 	bl	8002600 <nRF24_SendPacket>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017d8:	4313      	orrs	r3, r2
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <Radio_TxBufferSend+0x88>)
 80017e0:	2202      	movs	r2, #2
 80017e2:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 80017e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000440 	.word	0x20000440
 80017f4:	2000043d 	.word	0x2000043d

080017f8 <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
#ifdef CONTROLLER
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 80017fe:	f240 4305 	movw	r3, #1029	; 0x405
 8001802:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <Radio_SendConnectionCheck+0x28>)
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fef6 	bl	8002600 <nRF24_SendPacket>
 8001814:	4603      	mov	r3, r0
#ifdef ROBOT
	uint8_t Command [3] = {CONNECTION_HOLD, _OK, COMM_END};
	TxStatus = RADIO_BUSY;
	return nRF24_WriteAckPayload(0, Command, 3);
#endif
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000043d 	.word	0x2000043d

08001824 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 800182a:	f000 ff53 	bl	80026d4 <nRF24_Event>

#ifdef CONTROLLER

	static uint32_t LastTick;
	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 800182e:	f001 fddf 	bl	80033f0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <Radio_Process+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b32      	cmp	r3, #50	; 0x32
 800183c:	d91c      	bls.n	8001878 <Radio_Process+0x54>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <Radio_Process+0x8c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <Radio_Process+0x32>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8001846:	f7ff ff91 	bl	800176c <Radio_TxBufferSend>
 800184a:	4603      	mov	r3, r0
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10e      	bne.n	800186e <Radio_Process+0x4a>
			{
				Radio_SendConnectionCheck();
 8001850:	f7ff ffd2 	bl	80017f8 <Radio_SendConnectionCheck>
 8001854:	e00b      	b.n	800186e <Radio_Process+0x4a>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <Radio_Process+0x8c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <Radio_Process+0x4a>
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <Radio_Process+0x90>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d103      	bne.n	800186e <Radio_Process+0x4a>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8001866:	f000 f829 	bl	80018bc <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 800186a:	f7ff ffc5 	bl	80017f8 <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 800186e:	f001 fdbf 	bl	80033f0 <HAL_GetTick>
 8001872:	4603      	mov	r3, r0
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <Radio_Process+0x88>)
 8001876:	6013      	str	r3, [r2, #0]
		ConnectionStatus = RADIO_ERROR;
		Radio_NoConnectionCallback();
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <Radio_Process+0x94>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d110      	bne.n	80018a2 <Radio_Process+0x7e>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001880:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff07 	bl	800169c <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 800188e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f001 f81c 	bl	80028d4 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <Radio_Process+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
	}
}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000488 	.word	0x20000488
 80018b0:	2000043d 	.word	0x2000043d
 80018b4:	2000043c 	.word	0x2000043c
 80018b8:	2000043e 	.word	0x2000043e

080018bc <Radio_NoConnectionCallback>:
{
	nRF24_IRQ_Handler();
}

__weak void Radio_NoConnectionCallback(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <nRF24_EventTxCallback+0x1c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <nRF24_EventTxCallback+0x20>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000043d 	.word	0x2000043d
 80018ec:	2000043c 	.word	0x2000043c

080018f0 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 80018f6:	1dfa      	adds	r2, r7, #7
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fe68 	bl	80025d4 <nRF24_ReadRXPaylaod>
	ConnectionStatus = RADIO_OK;
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fe9d 	bl	800164c <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <nRF24_EventRxCallback+0x30>)
 8001914:	2203      	movs	r2, #3
 8001916:	701a      	strb	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000043e 	.word	0x2000043e

08001924 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <nRF24_EventMrCallback+0x14>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	2000043c 	.word	0x2000043c

0800193c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001944:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001948:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001954:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001958:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800195c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00b      	beq.n	800197c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001964:	e000      	b.n	8001968 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001966:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001968:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f9      	beq.n	8001966 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001972:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f001 fcc8 	bl	8003324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f828 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f7ff fc38 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 800199c:	f7ff fc16 	bl	80011cc <MX_DMA_Init>
  MX_I2C1_Init();
 80019a0:	f7ff fcfa 	bl	8001398 <MX_I2C1_Init>
  MX_I2C3_Init();
 80019a4:	f7ff fd26 	bl	80013f4 <MX_I2C3_Init>
  MX_SPI2_Init();
 80019a8:	f000 ffa4 	bl	80028f4 <MX_SPI2_Init>
  MX_TIM3_Init();
 80019ac:	f001 fba8 	bl	8003100 <MX_TIM3_Init>
  MX_ADC1_Init();
 80019b0:	f7ff f84a 	bl	8000a48 <MX_ADC1_Init>
  MX_TIM10_Init();
 80019b4:	f001 fbf8 	bl	80031a8 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80019b8:	f000 f87e 	bl	8001ab8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2120      	movs	r1, #32
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <main+0x50>)
 80019c2:	f003 f8a1 	bl	8004b08 <HAL_GPIO_WritePin>

  Radio_Init(&hspi2);
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <main+0x54>)
 80019c8:	f7ff fe28 	bl	800161c <Radio_Init>
  Inputs_Init();
 80019cc:	f7ff f94c 	bl	8000c68 <Inputs_Init>
  OLED_Init(&hi2c3);
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <main+0x58>)
 80019d2:	f001 f843 	bl	8002a5c <OLED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SimpleScheduler();
 80019d6:	f000 ff3f 	bl	8002858 <SimpleScheduler>
 80019da:	e7fc      	b.n	80019d6 <main+0x4a>
 80019dc:	40020400 	.word	0x40020400
 80019e0:	200004a4 	.word	0x200004a4
 80019e4:	200003e8 	.word	0x200003e8

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	; 0x50
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	2230      	movs	r2, #48	; 0x30
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 fea6 	bl	8007748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <SystemClock_Config+0xc8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <SystemClock_Config+0xc8>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <SystemClock_Config+0xc8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <SystemClock_Config+0xcc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <SystemClock_Config+0xcc>)
 8001a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <SystemClock_Config+0xcc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a44:	2301      	movs	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a5c:	2364      	movs	r3, #100	; 0x64
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fcd9 	bl	8005424 <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a78:	f000 f856 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2103      	movs	r1, #3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 ff3b 	bl	8005914 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001aa4:	f000 f840 	bl	8001b28 <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3750      	adds	r7, #80	; 0x50
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2028      	movs	r0, #40	; 0x28
 8001ac2:	f002 fabc 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ac6:	2028      	movs	r0, #40	; 0x28
 8001ac8:	f002 fad5 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2024      	movs	r0, #36	; 0x24
 8001ad2:	f002 fab4 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ad6:	2024      	movs	r0, #36	; 0x24
 8001ad8:	f002 facd 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2012      	movs	r0, #18
 8001ae2:	f002 faac 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ae6:	2012      	movs	r0, #18
 8001ae8:	f002 fac5 	bl	8004076 <HAL_NVIC_EnableIRQ>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff1e 	bl	800193c <ITM_SendChar>

	return ch;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8001b1c:	f000 fd88 	bl	8002630 <nRF24_IRQ_Handler>
	}

}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <Menu_RefreshScreen>:
//
//Functions
//

void Menu_RefreshScreen(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	//static Menu_t *LastMenuPtr = NULL;
	Menu_t *Tmp;
	uint8_t i = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	70fb      	strb	r3, [r7, #3]
	uint8_t CenterCalculate;

	//if(LastMenuPtr == MenuCurrentMember) return;  TODO: IS THIS NEEDED?

	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001b3e:	e00c      	b.n	8001b5a <Menu_RefreshScreen+0x26>
	{
		LevelsFirstMembersToDisplay[MenuLevel]++;																//"scroll down" by increasing first to display member
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <Menu_RefreshScreen+0x14c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <Menu_RefreshScreen+0x150>)
 8001b46:	5cd2      	ldrb	r2, [r2, r3]
 8001b48:	3201      	adds	r2, #1
 8001b4a:	b2d1      	uxtb	r1, r2
 8001b4c:	4a4d      	ldr	r2, [pc, #308]	; (8001c84 <Menu_RefreshScreen+0x150>)
 8001b4e:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Next;
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <Menu_RefreshScreen+0x154>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a4c      	ldr	r2, [pc, #304]	; (8001c88 <Menu_RefreshScreen+0x154>)
 8001b58:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] > (LevelsFirstMembersToDisplay[MenuLevel] + MENU_ROWS_TO_DISPLAY - 1) )		//while our menu member is in out of screen range...
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <Menu_RefreshScreen+0x14c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <Menu_RefreshScreen+0x158>)
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <Menu_RefreshScreen+0x14c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <Menu_RefreshScreen+0x150>)
 8001b6e:	5c5b      	ldrb	r3, [r3, r1]
 8001b70:	3305      	adds	r3, #5
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dce4      	bgt.n	8001b40 <Menu_RefreshScreen+0xc>
	}
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001b76:	e00c      	b.n	8001b92 <Menu_RefreshScreen+0x5e>
	{
		LevelsFirstMembersToDisplay[MenuLevel]--;																//or "scroll up"
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <Menu_RefreshScreen+0x14c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4a41      	ldr	r2, [pc, #260]	; (8001c84 <Menu_RefreshScreen+0x150>)
 8001b7e:	5cd2      	ldrb	r2, [r2, r3]
 8001b80:	3a01      	subs	r2, #1
 8001b82:	b2d1      	uxtb	r1, r2
 8001b84:	4a3f      	ldr	r2, [pc, #252]	; (8001c84 <Menu_RefreshScreen+0x150>)
 8001b86:	54d1      	strb	r1, [r2, r3]
		FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001b88:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <Menu_RefreshScreen+0x154>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4a3e      	ldr	r2, [pc, #248]	; (8001c88 <Menu_RefreshScreen+0x154>)
 8001b90:	6013      	str	r3, [r2, #0]
	while(LevelsIndexes[MenuLevel] < LevelsFirstMembersToDisplay[MenuLevel] )
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <Menu_RefreshScreen+0x14c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <Menu_RefreshScreen+0x158>)
 8001b9a:	5c9a      	ldrb	r2, [r3, r2]
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <Menu_RefreshScreen+0x14c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <Menu_RefreshScreen+0x150>)
 8001ba4:	5c5b      	ldrb	r3, [r3, r1]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d3e6      	bcc.n	8001b78 <Menu_RefreshScreen+0x44>
	}

	OLED_ClearBuffer(BLACK);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f001 f860 	bl	8002c70 <OLED_ClearBuffer>
	OLED_MoveCursor(0, 0);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 ffa2 	bl	8002afc <OLED_MoveCursor>
	OLED_WriteString("-------M E N U-------",WHITE);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4835      	ldr	r0, [pc, #212]	; (8001c90 <Menu_RefreshScreen+0x15c>)
 8001bbc:	f001 f922 	bl	8002e04 <OLED_WriteString>

	Tmp = FirstMemberToDisplayPtr;															//temporary pointer for displaying
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <Menu_RefreshScreen+0x154>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001bc6:	e04f      	b.n	8001c68 <Menu_RefreshScreen+0x134>
	{
		if(MenuCurrentMember == Tmp)														//if actually printed member is current member, add >> <<
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <Menu_RefreshScreen+0x160>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d126      	bne.n	8001c20 <Menu_RefreshScreen+0xec>
		{
			CenterCalculate = ((DISPLAY_WIDTH - ((strlen(Tmp->Name) + 6) * 6) ) / 2);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fb02 	bl	80001e0 <strlen>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 ff7d 	bl	8002afc <OLED_MoveCursor>
			OLED_WriteString(">> ", WHITE);
 8001c02:	2101      	movs	r1, #1
 8001c04:	4824      	ldr	r0, [pc, #144]	; (8001c98 <Menu_RefreshScreen+0x164>)
 8001c06:	f001 f8fd 	bl	8002e04 <OLED_WriteString>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 f8f7 	bl	8002e04 <OLED_WriteString>
			OLED_WriteString(" <<", WHITE);
 8001c16:	2101      	movs	r1, #1
 8001c18:	4820      	ldr	r0, [pc, #128]	; (8001c9c <Menu_RefreshScreen+0x168>)
 8001c1a:	f001 f8f3 	bl	8002e04 <OLED_WriteString>
 8001c1e:	e01d      	b.n	8001c5c <Menu_RefreshScreen+0x128>
		}
		else																				//if not, just print it
		{
			CenterCalculate = ((DISPLAY_WIDTH - (strlen(Tmp->Name) * 6) ) / 2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fadb 	bl	80001e0 <strlen>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	70bb      	strb	r3, [r7, #2]
			OLED_MoveCursor(CenterCalculate, (i+1)*8);
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	78bb      	ldrb	r3, [r7, #2]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 ff56 	bl	8002afc <OLED_MoveCursor>
			OLED_WriteString((char*)Tmp->Name, WHITE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 f8d4 	bl	8002e04 <OLED_WriteString>
		}
		i++;																				//increment for printing next member
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	70fb      	strb	r3, [r7, #3]
		Tmp = Tmp->Next;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	607b      	str	r3, [r7, #4]
	while((i != MENU_ROWS_TO_DISPLAY) && Tmp != NULL)										//print all menu rows
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d002      	beq.n	8001c74 <Menu_RefreshScreen+0x140>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1a9      	bne.n	8001bc8 <Menu_RefreshScreen+0x94>
	}
	OLED_SendBuffer();
 8001c74:	f000 ffd0 	bl	8002c18 <OLED_SendBuffer>
	//LastMenuPtr = MenuCurrentMember;

}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000494 	.word	0x20000494
 8001c84:	20000490 	.word	0x20000490
 8001c88:	2000011c 	.word	0x2000011c
 8001c8c:	2000048c 	.word	0x2000048c
 8001c90:	08008434 	.word	0x08008434
 8001c94:	20000118 	.word	0x20000118
 8001c98:	0800844c 	.word	0x0800844c
 8001c9c:	08008450 	.word	0x08008450

08001ca0 <Menu_Next>:

void Menu_Next(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Next != NULL)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <Menu_Next+0x54>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <Menu_Next+0x34>
	{
		MenuCurrentMember = MenuCurrentMember->Next;	//change current member pointer to next member
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <Menu_Next+0x54>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <Menu_Next+0x54>)
 8001cb6:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]++;						//increase current level index
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <Menu_Next+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <Menu_Next+0x5c>)
 8001cbe:	5cd2      	ldrb	r2, [r2, r3]
 8001cc0:	3201      	adds	r2, #1
 8001cc2:	b2d1      	uxtb	r1, r2
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <Menu_Next+0x5c>)
 8001cc6:	54d1      	strb	r1, [r2, r3]
 8001cc8:	e00f      	b.n	8001cea <Menu_Next+0x4a>
#ifdef MENU_LOOPING
	else												//if there is no next member, go to first member (looping)
	{
		while(MenuCurrentMember->Prev != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Prev;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <Menu_Next+0x54>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <Menu_Next+0x54>)
 8001cd2:	6013      	str	r3, [r2, #0]
		while(MenuCurrentMember->Prev != NULL)
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <Menu_Next+0x54>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f5      	bne.n	8001cca <Menu_Next+0x2a>
		}
		LevelsIndexes[MenuLevel] = 0;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <Menu_Next+0x58>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <Menu_Next+0x5c>)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]
	}
#endif

	Menu_RefreshScreen();
 8001cea:	f7ff ff23 	bl	8001b34 <Menu_RefreshScreen>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000118 	.word	0x20000118
 8001cf8:	20000494 	.word	0x20000494
 8001cfc:	2000048c 	.word	0x2000048c

08001d00 <Menu_Prev>:

void Menu_Prev(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->Prev != NULL)
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <Menu_Prev+0x58>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01a      	beq.n	8001d44 <Menu_Prev+0x44>
	{
		MenuCurrentMember = MenuCurrentMember->Prev;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <Menu_Prev+0x58>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <Menu_Prev+0x58>)
 8001d16:	6013      	str	r3, [r2, #0]
		LevelsIndexes[MenuLevel]--;
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <Menu_Prev+0x5c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <Menu_Prev+0x60>)
 8001d1e:	5cd2      	ldrb	r2, [r2, r3]
 8001d20:	3a01      	subs	r2, #1
 8001d22:	b2d1      	uxtb	r1, r2
 8001d24:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <Menu_Prev+0x60>)
 8001d26:	54d1      	strb	r1, [r2, r3]
 8001d28:	e011      	b.n	8001d4e <Menu_Prev+0x4e>
#ifdef MENU_LOOPING
	else
	{
		while(MenuCurrentMember->Next != NULL)
		{
			MenuCurrentMember = MenuCurrentMember->Next;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <Menu_Prev+0x58>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <Menu_Prev+0x58>)
 8001d32:	6013      	str	r3, [r2, #0]
			LevelsIndexes[MenuLevel]++;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <Menu_Prev+0x5c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <Menu_Prev+0x60>)
 8001d3a:	5cd2      	ldrb	r2, [r2, r3]
 8001d3c:	3201      	adds	r2, #1
 8001d3e:	b2d1      	uxtb	r1, r2
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <Menu_Prev+0x60>)
 8001d42:	54d1      	strb	r1, [r2, r3]
		while(MenuCurrentMember->Next != NULL)
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <Menu_Prev+0x58>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ed      	bne.n	8001d2a <Menu_Prev+0x2a>
		}
	}
#endif

	Menu_RefreshScreen();
 8001d4e:	f7ff fef1 	bl	8001b34 <Menu_RefreshScreen>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000118 	.word	0x20000118
 8001d5c:	20000494 	.word	0x20000494
 8001d60:	2000048c 	.word	0x2000048c

08001d64 <Menu_Select>:



void Menu_Select(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	if(MenuCurrentMember->FunctionPtr != NULL)			//if there is a function pointer...
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <Menu_Select+0x48>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <Menu_Select+0x16>
	{
		MenuCurrentMember->FunctionPtr();
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <Menu_Select+0x48>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	4798      	blx	r3
	}

	if(MenuCurrentMember->Child != NULL)				//if there is a child...
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <Menu_Select+0x48>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <Menu_Select+0x3e>
	{
		MenuCurrentMember = MenuCurrentMember->Child;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <Menu_Select+0x48>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <Menu_Select+0x48>)
 8001d8c:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <Menu_Select+0x48>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <Menu_Select+0x4c>)
 8001d94:	6013      	str	r3, [r2, #0]
		MenuLevel++;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <Menu_Select+0x50>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <Menu_Select+0x50>)
 8001da0:	701a      	strb	r2, [r3, #0]
	}

	Menu_RefreshScreen();
 8001da2:	f7ff fec7 	bl	8001b34 <Menu_RefreshScreen>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000118 	.word	0x20000118
 8001db0:	2000011c 	.word	0x2000011c
 8001db4:	20000494 	.word	0x20000494

08001db8 <Menu_Back>:

void Menu_Back(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
	uint8_t i;

	if(MenuCurrentMember->Parent != NULL)
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <Menu_Back+0x7c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d02e      	beq.n	8001e26 <Menu_Back+0x6e>
	{
		LevelsIndexes[MenuLevel] = 0;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <Menu_Back+0x80>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <Menu_Back+0x84>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]
		MenuCurrentMember = MenuCurrentMember->Parent;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <Menu_Back+0x7c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <Menu_Back+0x7c>)
 8001ddc:	6013      	str	r3, [r2, #0]
		FirstMemberToDisplayPtr = MenuCurrentMember;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <Menu_Back+0x7c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <Menu_Back+0x88>)
 8001de4:	6013      	str	r3, [r2, #0]
		MenuLevel--;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <Menu_Back+0x80>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <Menu_Back+0x80>)
 8001df0:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	e007      	b.n	8001e08 <Menu_Back+0x50>
		{
			FirstMemberToDisplayPtr = FirstMemberToDisplayPtr->Prev;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <Menu_Back+0x88>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <Menu_Back+0x88>)
 8001e00:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (LevelsIndexes[MenuLevel] - LevelsFirstMembersToDisplay[MenuLevel]) ; i++)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	3301      	adds	r3, #1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	79fa      	ldrb	r2, [r7, #7]
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <Menu_Back+0x80>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <Menu_Back+0x84>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <Menu_Back+0x80>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <Menu_Back+0x8c>)
 8001e1e:	5c1b      	ldrb	r3, [r3, r0]
 8001e20:	1acb      	subs	r3, r1, r3
 8001e22:	429a      	cmp	r2, r3
 8001e24:	dbe8      	blt.n	8001df8 <Menu_Back+0x40>
		}
	}

	Menu_RefreshScreen();
 8001e26:	f7ff fe85 	bl	8001b34 <Menu_RefreshScreen>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000118 	.word	0x20000118
 8001e38:	20000494 	.word	0x20000494
 8001e3c:	2000048c 	.word	0x2000048c
 8001e40:	2000011c 	.word	0x2000011c
 8001e44:	20000490 	.word	0x20000490

08001e48 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f001 fad7 	bl	8003408 <HAL_Delay>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <nRF24_SendSpi+0x28>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	f003 ffdc 	bl	8005e3a <HAL_SPI_Transmit>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000498 	.word	0x20000498

08001e90 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <nRF24_ReadSpi+0x28>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	f004 f902 	bl	80060b2 <HAL_SPI_Receive>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000498 	.word	0x20000498

08001ebc <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2140      	movs	r1, #64	; 0x40
 8001ece:	480c      	ldr	r0, [pc, #48]	; (8001f00 <nRF24_ReadRegister+0x44>)
 8001ed0:	f002 fe1a 	bl	8004b08 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffc3 	bl	8001e64 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001ede:	f107 030f 	add.w	r3, r7, #15
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ffd3 	bl	8001e90 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001eea:	2201      	movs	r2, #1
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <nRF24_ReadRegister+0x44>)
 8001ef0:	f002 fe0a 	bl	8004b08 <HAL_GPIO_WritePin>

	return result;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40020800 	.word	0x40020800

08001f04 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	480a      	ldr	r0, [pc, #40]	; (8001f48 <nRF24_ReadRegisters+0x44>)
 8001f1e:	f002 fdf3 	bl	8004b08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff9c 	bl	8001e64 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001f2c:	79bb      	ldrb	r3, [r7, #6]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f7ff ffad 	bl	8001e90 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001f36:	2201      	movs	r2, #1
 8001f38:	2140      	movs	r1, #64	; 0x40
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <nRF24_ReadRegisters+0x44>)
 8001f3c:	f002 fde4 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020800 	.word	0x40020800

08001f4c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f043 0320 	orr.w	r3, r3, #32
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <nRF24_WriteRegister+0x48>)
 8001f70:	f002 fdca 	bl	8004b08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff72 	bl	8001e64 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f80:	2201      	movs	r2, #1
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <nRF24_WriteRegister+0x48>)
 8001f86:	f002 fdbf 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020800 	.word	0x40020800

08001f98 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <nRF24_WriteRegisters+0x4c>)
 8001fb8:	f002 fda6 	bl	8004b08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff4f 	bl	8001e64 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	f7ff ff4a 	bl	8001e64 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <nRF24_WriteRegisters+0x4c>)
 8001fd6:	f002 fd97 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	4810      	ldr	r0, [pc, #64]	; (8002034 <nRF24_TX_Mode+0x4c>)
 8001ff4:	f002 fd88 	bl	8004b08 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001ff8:	f000 f81e 	bl	8002038 <nRF24_ReadConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f818 	bl	8002048 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002018:	2070      	movs	r0, #112	; 0x70
 800201a:	f000 f870 	bl	80020fe <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800201e:	f000 f87d 	bl	800211c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002022:	f000 f895 	bl	8002150 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff ff0e 	bl	8001e48 <nRF24_Delay_ms>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40020800 	.word	0x40020800

08002038 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff ff3d 	bl	8001ebc <nRF24_ReadRegister>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}

08002048 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4619      	mov	r1, r3
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff ff78 	bl	8001f4c <nRF24_WriteRegister>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800206e:	2006      	movs	r0, #6
 8002070:	f7ff ff24 	bl	8001ebc <nRF24_ReadRegister>
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	f023 0307 	bic.w	r3, r3, #7
 800207e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	b25a      	sxtb	r2, r3
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4313      	orrs	r3, r2
 800208c:	b25b      	sxtb	r3, r3
 800208e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4619      	mov	r1, r3
 8002094:	2006      	movs	r0, #6
 8002096:	f7ff ff59 	bl	8001f4c <nRF24_WriteRegister>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020ac:	2006      	movs	r0, #6
 80020ae:	f7ff ff05 	bl	8001ebc <nRF24_ReadRegister>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80020bc:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d104      	bne.n	80020ce <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	f043 0320 	orr.w	r3, r3, #32
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e006      	b.n	80020dc <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d103      	bne.n	80020dc <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	4619      	mov	r1, r3
 80020e0:	2006      	movs	r0, #6
 80020e2:	f7ff ff33 	bl	8001f4c <nRF24_WriteRegister>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80020f2:	2007      	movs	r0, #7
 80020f4:	f7ff fee2 	bl	8001ebc <nRF24_ReadRegister>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}

080020fe <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4619      	mov	r1, r3
 800210c:	2007      	movs	r0, #7
 800210e:	f7ff ff1d 	bl	8001f4c <nRF24_WriteRegister>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002122:	23e2      	movs	r3, #226	; 0xe2
 8002124:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002126:	2200      	movs	r2, #0
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <nRF24_FlushRX+0x30>)
 800212c:	f002 fcec 	bl	8004b08 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	2101      	movs	r1, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fe95 	bl	8001e64 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800213a:	2201      	movs	r2, #1
 800213c:	2140      	movs	r1, #64	; 0x40
 800213e:	4803      	ldr	r0, [pc, #12]	; (800214c <nRF24_FlushRX+0x30>)
 8002140:	f002 fce2 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020800 	.word	0x40020800

08002150 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002156:	23e1      	movs	r3, #225	; 0xe1
 8002158:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800215a:	2200      	movs	r2, #0
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	4808      	ldr	r0, [pc, #32]	; (8002180 <nRF24_FlushTX+0x30>)
 8002160:	f002 fcd2 	bl	8004b08 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	2101      	movs	r1, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fe7b 	bl	8001e64 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800216e:	2201      	movs	r2, #1
 8002170:	2140      	movs	r1, #64	; 0x40
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <nRF24_FlushTX+0x30>)
 8002174:	f002 fcc8 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40020800 	.word	0x40020800

08002184 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800218e:	f7ff ff53 	bl	8002038 <nRF24_ReadConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e003      	b.n	80021ae <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	f023 0308 	bic.w	r3, r3, #8
 80021ac:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff49 	bl	8002048 <nRF24_WriteConfig>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021c8:	f7ff ff36 	bl	8002038 <nRF24_ReadConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d104      	bne.n	80021e0 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e003      	b.n	80021e8 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff2c 	bl	8002048 <nRF24_WriteConfig>
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	460a      	mov	r2, r1
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	4613      	mov	r3, r2
 8002206:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	b25a      	sxtb	r2, r3
 800220e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	b25b      	sxtb	r3, r3
 8002218:	4313      	orrs	r3, r2
 800221a:	b25b      	sxtb	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	2004      	movs	r0, #4
 8002222:	f7ff fe93 	bl	8001f4c <nRF24_WriteRegister>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	2005      	movs	r0, #5
 8002244:	f7ff fe82 	bl	8001f4c <nRF24_WriteRegister>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	460a      	mov	r2, r1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	4613      	mov	r3, r2
 800225e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d901      	bls.n	800226a <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002266:	2305      	movs	r3, #5
 8002268:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800226a:	2002      	movs	r0, #2
 800226c:	f7ff fe26 	bl	8001ebc <nRF24_ReadRegister>
 8002270:	4603      	mov	r3, r0
 8002272:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10a      	bne.n	8002290 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2201      	movs	r2, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	b25a      	sxtb	r2, r3
 8002284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002288:	4313      	orrs	r3, r2
 800228a:	b25b      	sxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e00b      	b.n	80022a8 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2201      	movs	r2, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	b25b      	sxtb	r3, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	b25a      	sxtb	r2, r3
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4013      	ands	r3, r2
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4619      	mov	r1, r3
 80022ac:	2002      	movs	r0, #2
 80022ae:	f7ff fe4d 	bl	8001f4c <nRF24_WriteRegister>
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	460a      	mov	r2, r1
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	4613      	mov	r3, r2
 80022c8:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d901      	bls.n	80022d4 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80022d0:	2305      	movs	r3, #5
 80022d2:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff fdf1 	bl	8001ebc <nRF24_ReadRegister>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10a      	bne.n	80022fa <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2201      	movs	r2, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	b25a      	sxtb	r2, r3
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e00b      	b.n	8002312 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	b25b      	sxtb	r3, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	b25a      	sxtb	r2, r3
 8002308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230c:	4013      	ands	r3, r2
 800230e:	b25b      	sxtb	r3, r3
 8002310:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4619      	mov	r1, r3
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff fe18 	bl	8001f4c <nRF24_WriteRegister>
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d901      	bls.n	8002338 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002334:	2305      	movs	r3, #5
 8002336:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d801      	bhi.n	8002342 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800233e:	2303      	movs	r3, #3
 8002340:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	3b02      	subs	r3, #2
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	2003      	movs	r0, #3
 8002352:	f7ff fdfb 	bl	8001f4c <nRF24_WriteRegister>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	6039      	str	r1, [r7, #0]
 8002368:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <nRF24_SetRXAddress+0x18>
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11d      	bne.n	80023b2 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e00d      	b.n	8002398 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	441a      	add	r2, r3
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	f1c3 0302 	rsb	r3, r3, #2
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	3310      	adds	r3, #16
 800238c:	443b      	add	r3, r7
 800238e:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d9ee      	bls.n	800237c <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	330a      	adds	r3, #10
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f107 010c 	add.w	r1, r7, #12
 80023a8:	2203      	movs	r2, #3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fdf4 	bl	8001f98 <nRF24_WriteRegisters>
	{
 80023b0:	e00a      	b.n	80023c8 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	330a      	adds	r3, #10
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	3302      	adds	r3, #2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7ff fdc3 	bl	8001f4c <nRF24_WriteRegister>
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd8f 	bl	8001f04 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e00c      	b.n	8002406 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	f1c3 0302 	rsb	r3, r3, #2
 80023f4:	3210      	adds	r2, #16
 80023f6:	443a      	add	r2, r7
 80023f8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023fc:	4a16      	ldr	r2, [pc, #88]	; (8002458 <nRF24_SetTXAddress+0x88>)
 80023fe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	3301      	adds	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d9ef      	bls.n	80023ec <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e00d      	b.n	800242e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	441a      	add	r2, r3
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	f1c3 0302 	rsb	r3, r3, #2
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	3310      	adds	r3, #16
 8002422:	443b      	add	r3, r7
 8002424:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	3301      	adds	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d9ee      	bls.n	8002412 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2203      	movs	r2, #3
 800243a:	4619      	mov	r1, r3
 800243c:	200a      	movs	r0, #10
 800243e:	f7ff fdab 	bl	8001f98 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	2203      	movs	r2, #3
 8002448:	4619      	mov	r1, r3
 800244a:	2010      	movs	r0, #16
 800244c:	f7ff fda4 	bl	8001f98 <nRF24_WriteRegisters>

}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000049c 	.word	0x2000049c

0800245c <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002462:	f7ff fe44 	bl	80020ee <nRF24_ReadStatus>
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002470:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe42 	bl	80020fe <nRF24_WriteStatus>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 800248c:	2060      	movs	r0, #96	; 0x60
 800248e:	f7ff fd15 	bl	8001ebc <nRF24_ReadRegister>
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b20      	cmp	r3, #32
 800249a:	d906      	bls.n	80024aa <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 800249c:	f7ff fe3e 	bl	800211c <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7ff fcd1 	bl	8001e48 <nRF24_Delay_ms>
        return 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024be:	f7ff fdbb 	bl	8002038 <nRF24_ReadConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e003      	b.n	80024de <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024dc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fdb1 	bl	8002048 <nRF24_WriteConfig>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024f8:	f7ff fd9e 	bl	8002038 <nRF24_ReadConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e003      	b.n	8002518 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	f023 0320 	bic.w	r3, r3, #32
 8002516:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd94 	bl	8002048 <nRF24_WriteConfig>
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002532:	f7ff fd81 	bl	8002038 <nRF24_ReadConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e003      	b.n	8002552 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	f023 0310 	bic.w	r3, r3, #16
 8002550:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fd77 	bl	8002048 <nRF24_WriteConfig>
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	461a      	mov	r2, r3
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	20a0      	movs	r0, #160	; 0xa0
 8002576:	f7ff fd0f 	bl	8001f98 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800258a:	2201      	movs	r2, #1
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	4810      	ldr	r0, [pc, #64]	; (80025d0 <nRF24_WaitTX+0x4c>)
 8002590:	f002 faba 	bl	8004b08 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8002594:	2001      	movs	r0, #1
 8002596:	f7ff fc57 	bl	8001e48 <nRF24_Delay_ms>
	NRF24_CE_LOW;
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	480c      	ldr	r0, [pc, #48]	; (80025d0 <nRF24_WaitTX+0x4c>)
 80025a0:	f002 fab2 	bl	8004b08 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7ff fc4f 	bl	8001e48 <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 80025aa:	f7ff fda0 	bl	80020ee <nRF24_ReadStatus>
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <nRF24_WaitTX+0x42>
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ee      	beq.n	80025a4 <nRF24_WaitTX+0x20>

}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40020800 	.word	0x40020800

080025d4 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 80025de:	f7ff ff50 	bl	8002482 <nRF24_GetDynamicPayloadSize>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	2061      	movs	r0, #97	; 0x61
 80025f4:	f7ff fc86 	bl	8001f04 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	2b20      	cmp	r3, #32
 8002610:	d901      	bls.n	8002616 <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 8002612:	2301      	movs	r3, #1
 8002614:	e007      	b.n	8002626 <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa1 	bl	8002562 <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 8002620:	f7ff ffb0 	bl	8002584 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <nRF24_IRQ_Handler+0x14>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	200004a2 	.word	0x200004a2

08002648 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <nRF24_IRQ_Read+0x7c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d130      	bne.n	80026ba <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <nRF24_IRQ_Read+0x7c>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 800265e:	f7ff fd46 	bl	80020ee <nRF24_ReadStatus>
 8002662:	4603      	mov	r3, r0
 8002664:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <nRF24_IRQ_Read+0x80>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002680:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <nRF24_IRQ_Read+0x84>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f043 0320 	orr.w	r3, r3, #32
 8002698:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <nRF24_IRQ_Read+0x88>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fd22 	bl	80020fe <nRF24_WriteStatus>
	}
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200004a2 	.word	0x200004a2
 80026c8:	2000049f 	.word	0x2000049f
 80026cc:	200004a0 	.word	0x200004a0
 80026d0:	200004a1 	.word	0x200004a1

080026d4 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 80026d8:	f7ff ffb6 	bl	8002648 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <nRF24_Event+0x44>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 80026e4:	f7ff f904 	bl	80018f0 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <nRF24_Event+0x44>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <nRF24_Event+0x48>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 80026f6:	f7ff f8e9 	bl	80018cc <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <nRF24_Event+0x48>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <nRF24_Event+0x4c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002708:	f7ff f90c 	bl	8001924 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <nRF24_Event+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
	}
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2000049f 	.word	0x2000049f
 800271c:	200004a0 	.word	0x200004a0
 8002720:	200004a1 	.word	0x200004a1

08002724 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800272c:	4a2e      	ldr	r2, [pc, #184]	; (80027e8 <nRF24_Init+0xc4>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002732:	2200      	movs	r2, #0
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	482d      	ldr	r0, [pc, #180]	; (80027ec <nRF24_Init+0xc8>)
 8002738:	f002 f9e6 	bl	8004b08 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800273c:	2201      	movs	r2, #1
 800273e:	2140      	movs	r1, #64	; 0x40
 8002740:	482a      	ldr	r0, [pc, #168]	; (80027ec <nRF24_Init+0xc8>)
 8002742:	f002 f9e1 	bl	8004b08 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002746:	2005      	movs	r0, #5
 8002748:	f7ff fb7e 	bl	8001e48 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800274c:	2003      	movs	r0, #3
 800274e:	f7ff fc89 	bl	8002064 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002752:	2002      	movs	r0, #2
 8002754:	f7ff fca5 	bl	80020a2 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff fd13 	bl	8002184 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800275e:	2000      	movs	r0, #0
 8002760:	f7ff fd2d 	bl	80021be <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002764:	2107      	movs	r1, #7
 8002766:	2004      	movs	r0, #4
 8002768:	f7ff fd46 	bl	80021f8 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 800276c:	201d      	movs	r0, #29
 800276e:	f7ff fba5 	bl	8001ebc <nRF24_ReadRegister>
 8002772:	4603      	mov	r3, r0
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	201d      	movs	r0, #29
 800277e:	f7ff fbe5 	bl	8001f4c <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002782:	213f      	movs	r1, #63	; 0x3f
 8002784:	201c      	movs	r0, #28
 8002786:	f7ff fbe1 	bl	8001f4c <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800278a:	200a      	movs	r0, #10
 800278c:	f7ff fd4f 	bl	800222e <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002790:	2101      	movs	r1, #1
 8002792:	2000      	movs	r0, #0
 8002794:	f7ff fd5c 	bl	8002250 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002798:	2101      	movs	r1, #1
 800279a:	2000      	movs	r0, #0
 800279c:	f7ff fd8d 	bl	80022ba <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80027a0:	2003      	movs	r0, #3
 80027a2:	f7ff fdbf 	bl	8002324 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff fb4e 	bl	8001e48 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7ff fe81 	bl	80024b4 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7ff fe9b 	bl	80024ee <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7ff feb5 	bl	8002528 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff fb42 	bl	8001e48 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80027c4:	f7ff fe4a 	bl	800245c <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 80027c8:	201d      	movs	r0, #29
 80027ca:	f7ff fb77 	bl	8001ebc <nRF24_ReadRegister>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4619      	mov	r1, r3
 80027d8:	201d      	movs	r0, #29
 80027da:	f7ff fbb7 	bl	8001f4c <nRF24_WriteRegister>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000498 	.word	0x20000498
 80027ec:	40020800 	.word	0x40020800

080027f0 <MenuTaskInit>:
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

static void MenuTaskInit(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	Inputs_ButtonsRegisterCallback(ENC_BUTTON, Menu_Select, Menu_Back);
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <MenuTaskInit+0x2c>)
 80027f6:	490a      	ldr	r1, [pc, #40]	; (8002820 <MenuTaskInit+0x30>)
 80027f8:	2004      	movs	r0, #4
 80027fa:	f7fe fb53 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(UP_BUTTON, Menu_Select, NULL);
 80027fe:	2200      	movs	r2, #0
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <MenuTaskInit+0x30>)
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe fb4e 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>
	Inputs_ButtonsRegisterCallback(DOWN_BUTTON, Menu_Back, NULL);
 8002808:	2200      	movs	r2, #0
 800280a:	4904      	ldr	r1, [pc, #16]	; (800281c <MenuTaskInit+0x2c>)
 800280c:	2001      	movs	r0, #1
 800280e:	f7fe fb49 	bl	8000ea4 <Inputs_ButtonsRegisterCallback>
	Menu_RefreshScreen();
 8002812:	f7ff f98f 	bl	8001b34 <Menu_RefreshScreen>
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08001db9 	.word	0x08001db9
 8002820:	08001d65 	.word	0x08001d65

08002824 <MenuTask>:

static void MenuTask(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
	int8_t EncoderRotation = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]

	EncoderRotation = Inputs_GetEncoderCount();
 800282e:	f7fe faf1 	bl	8000e14 <Inputs_GetEncoderCount>
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
	if(EncoderRotation > 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	dd02      	ble.n	8002844 <MenuTask+0x20>
	{
		Menu_Next();
 800283e:	f7ff fa2f 	bl	8001ca0 <Menu_Next>
	else if(EncoderRotation < 0)
	{
		Menu_Prev();
	}

}
 8002842:	e005      	b.n	8002850 <MenuTask+0x2c>
	else if(EncoderRotation < 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da01      	bge.n	8002850 <MenuTask+0x2c>
		Menu_Prev();
 800284c:	f7ff fa58 	bl	8001d00 <Menu_Prev>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <SimpleScheduler>:

void SimpleScheduler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 800285e:	f7fe ffe1 	bl	8001824 <Radio_Process>

	if(0 == StartupInitFlag)
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <SimpleScheduler+0x78>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <SimpleScheduler+0x1c>
	{
		MenuTaskInit();								//Init for menu
 800286a:	f7ff ffc1 	bl	80027f0 <MenuTaskInit>
		StartupInitFlag = 1;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <SimpleScheduler+0x78>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
	}

	Inputs_ButtonsRoutine();
 8002874:	f7fe faf8 	bl	8000e68 <Inputs_ButtonsRoutine>
	SubProgramStatus = Programs_PerformProgram();
 8002878:	f7fd fff2 	bl	8000860 <Programs_PerformProgram>
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d106      	bne.n	8002894 <SimpleScheduler+0x3c>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 8002886:	f7fd ffd9 	bl	800083c <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 800288a:	f7fe fb51 	bl	8000f30 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 800288e:	f7ff ffaf 	bl	80027f0 <MenuTaskInit>
	{
		Programs_ClearProgram();					//clear program pointer to go to menu next time
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
		MenuTaskInit(); 							//Init for menu again
	}
}
 8002892:	e018      	b.n	80028c6 <SimpleScheduler+0x6e>
	else if(SubProgramStatus == NO_PROGRAM_SET)		//if there is no pointer to program, perform menu task
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <SimpleScheduler+0x48>
		MenuTask();
 800289a:	f7ff ffc3 	bl	8002824 <MenuTask>
}
 800289e:	e012      	b.n	80028c6 <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_LAUNCH_ERROR)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d106      	bne.n	80028b4 <SimpleScheduler+0x5c>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 80028a6:	f7fd ffc9 	bl	800083c <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 80028aa:	f7fe fb41 	bl	8000f30 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 80028ae:	f7ff ff9f 	bl	80027f0 <MenuTaskInit>
}
 80028b2:	e008      	b.n	80028c6 <SimpleScheduler+0x6e>
	else if(SubProgramStatus == PROGRAM_EXIT_ERROR)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b07      	cmp	r3, #7
 80028b8:	d105      	bne.n	80028c6 <SimpleScheduler+0x6e>
		Programs_ClearProgram();					//clear program pointer to go to menu next time
 80028ba:	f7fd ffbf 	bl	800083c <Programs_ClearProgram>
		Inputs_ClearButtonsCallbacks();				//clear callbacks for buttons after last subprogram
 80028be:	f7fe fb37 	bl	8000f30 <Inputs_ClearButtonsCallbacks>
		MenuTaskInit(); 							//Init for menu again
 80028c2:	f7ff ff95 	bl	80027f0 <MenuTaskInit>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200004a3 	.word	0x200004a3

080028d4 <Radio_NewCommandReceivedCallback>:
//
//
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
	Parser_Controller(command, length);
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fb4b 	bl	8000f80 <Parser_Controller>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <MX_SPI2_Init+0x64>)
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <MX_SPI2_Init+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_SPI2_Init+0x64>)
 8002900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002904:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_SPI2_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_SPI2_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_SPI2_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_SPI2_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_SPI2_Init+0x64>)
 8002920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002924:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_SPI2_Init+0x64>)
 8002928:	2218      	movs	r2, #24
 800292a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <MX_SPI2_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_SPI2_Init+0x64>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <MX_SPI2_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_SPI2_Init+0x64>)
 8002940:	220a      	movs	r2, #10
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_SPI2_Init+0x64>)
 8002946:	f003 f9ef 	bl	8005d28 <HAL_SPI_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002950:	f7ff f8ea 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200004a4 	.word	0x200004a4
 800295c:	40003800 	.word	0x40003800

08002960 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_SPI_MspInit+0x84>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d12c      	bne.n	80029dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_SPI_MspInit+0x88>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <HAL_SPI_MspInit+0x88>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_SPI_MspInit+0x88>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_SPI_MspInit+0x88>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_SPI_MspInit+0x88>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_SPI_MspInit+0x88>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029cc:	2305      	movs	r3, #5
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <HAL_SPI_MspInit+0x8c>)
 80029d8:	f001 fefa 	bl	80047d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40003800 	.word	0x40003800
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020400 	.word	0x40020400

080029f0 <OLED_SendCmdSequence>:
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <OLED_SendCmdSequence+0x34>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2264      	movs	r2, #100	; 0x64
 8002a06:	9202      	str	r2, [sp, #8]
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2200      	movs	r2, #0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	f002 f9ee 	bl	8004df4 <HAL_I2C_Mem_Write>
 8002a18:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200004fc 	.word	0x200004fc

08002a28 <OLED_SendData>:

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af04      	add	r7, sp, #16
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <OLED_SendData+0x30>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	2364      	movs	r3, #100	; 0x64
 8002a3a:	9302      	str	r3, [sp, #8]
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	2178      	movs	r1, #120	; 0x78
 8002a4a:	f002 f9d3 	bl	8004df4 <HAL_I2C_Mem_Write>
 8002a4e:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200004fc 	.word	0x200004fc

08002a5c <OLED_Init>:

//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	OledI2C = hi2c;
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <OLED_Init+0x28>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
	OLED_ChangeFont(StandardASCII);
 8002a6a:	4807      	ldr	r0, [pc, #28]	; (8002a88 <OLED_Init+0x2c>)
 8002a6c:	f000 f916 	bl	8002c9c <OLED_ChangeFont>
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
 8002a70:	2110      	movs	r1, #16
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <OLED_Init+0x30>)
 8002a74:	f7ff ffbc 	bl	80029f0 <OLED_SendCmdSequence>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200004fc 	.word	0x200004fc
 8002a88:	08008458 	.word	0x08008458
 8002a8c:	20000120 	.word	0x20000120

08002a90 <OLED_SetDeviceCursor>:
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	d802      	bhi.n	8002ab0 <OLED_SetDeviceCursor+0x20>
 8002aaa:	79bb      	ldrb	r3, [r7, #6]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d901      	bls.n	8002ab4 <OLED_SetDeviceCursor+0x24>
	{
		return OLED_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e01f      	b.n	8002af4 <OLED_SetDeviceCursor+0x64>
	}
	collumn+=COLLUMN_CENTER_OFFSET;
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	71fb      	strb	r3, [r7, #7]
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	733b      	strb	r3, [r7, #12]
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0310 	orr.w	r3, r3, #16
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	737b      	strb	r3, [r7, #13]
	Sequence[2] = SET_PAGE | (page & 0x07);
 8002ad2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	73bb      	strb	r3, [r7, #14]

	OLED_SendCmdSequence(Sequence, 3);
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	2103      	movs	r1, #3
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff7f 	bl	80029f0 <OLED_SendCmdSequence>

	return Status;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <OLED_MoveCursor>:
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	460a      	mov	r2, r1
 8002b06:	71fb      	strb	r3, [r7, #7]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71bb      	strb	r3, [r7, #6]
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db02      	blt.n	8002b1a <OLED_MoveCursor+0x1e>
 8002b14:	79bb      	ldrb	r3, [r7, #6]
 8002b16:	2b3f      	cmp	r3, #63	; 0x3f
 8002b18:	d901      	bls.n	8002b1e <OLED_MoveCursor+0x22>
	{
		return OLED_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00b      	b.n	8002b36 <OLED_MoveCursor+0x3a>
	}
	Cursor.x = x;
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <OLED_MoveCursor+0x48>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	7013      	strb	r3, [r2, #0]
	Cursor.y = y;
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <OLED_MoveCursor+0x48>)
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	7053      	strb	r3, [r2, #1]
	Cursor.page = y/8;
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <OLED_MoveCursor+0x48>)
 8002b32:	709a      	strb	r2, [r3, #2]

	return OLED_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000500 	.word	0x20000500

08002b48 <OLED_WriteToBuffer>:

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
 8002b54:	4613      	mov	r3, r2
 8002b56:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for(i = 0; i < length; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e04f      	b.n	8002bfe <OLED_WriteToBuffer+0xb6>
	{
		if(WHITE == color)
 8002b5e:	78bb      	ldrb	r3, [r7, #2]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d116      	bne.n	8002b92 <OLED_WriteToBuffer+0x4a>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002b6c:	789b      	ldrb	r3, [r3, #2]
 8002b6e:	01db      	lsls	r3, r3, #7
 8002b70:	4413      	add	r3, r2
 8002b72:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <OLED_WriteToBuffer+0xcc>)
 8002b74:	5cd1      	ldrb	r1, [r2, r3]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002b82:	789b      	ldrb	r3, [r3, #2]
 8002b84:	01db      	lsls	r3, r3, #7
 8002b86:	4403      	add	r3, r0
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	b2d1      	uxtb	r1, r2
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <OLED_WriteToBuffer+0xcc>)
 8002b8e:	54d1      	strb	r1, [r2, r3]
 8002b90:	e020      	b.n	8002bd4 <OLED_WriteToBuffer+0x8c>
		}
		else if(BLACK == color)
 8002b92:	78bb      	ldrb	r3, [r7, #2]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11b      	bne.n	8002bd0 <OLED_WriteToBuffer+0x88>
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	01db      	lsls	r3, r3, #7
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <OLED_WriteToBuffer+0xcc>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
 8002baa:	b25a      	sxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b25a      	sxtb	r2, r3
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002bc2:	789b      	ldrb	r3, [r3, #2]
 8002bc4:	01db      	lsls	r3, r3, #7
 8002bc6:	440b      	add	r3, r1
 8002bc8:	b2d1      	uxtb	r1, r2
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <OLED_WriteToBuffer+0xcc>)
 8002bcc:	54d1      	strb	r1, [r2, r3]
 8002bce:	e001      	b.n	8002bd4 <OLED_WriteToBuffer+0x8c>
		}
		else
		{
			return OLED_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e019      	b.n	8002c08 <OLED_WriteToBuffer+0xc0>
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <OLED_WriteToBuffer+0xc8>)
 8002bde:	7852      	ldrb	r2, [r2, #1]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff8a 	bl	8002afc <OLED_MoveCursor>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <OLED_WriteToBuffer+0xaa>
		{
			return OLED_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00a      	b.n	8002c08 <OLED_WriteToBuffer+0xc0>
		}
		else
		{
			data++;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
	for(i = 0; i < length; i++)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3ab      	bcc.n	8002b5e <OLED_WriteToBuffer+0x16>
		}

	}
	return OLED_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000500 	.word	0x20000500
 8002c14:	2000050c 	.word	0x2000050c

08002c18 <OLED_SendBuffer>:

OLED_Status OLED_SendBuffer(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
	uint8_t Status = OLED_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	71bb      	strb	r3, [r7, #6]
 8002c26:	e019      	b.n	8002c5c <OLED_SendBuffer+0x44>
	{
		Status |= OLED_SetDeviceCursor(0, i);
 8002c28:	79bb      	ldrb	r3, [r7, #6]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff ff2f 	bl	8002a90 <OLED_SetDeviceCursor>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	71fb      	strb	r3, [r7, #7]
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
 8002c3c:	79bb      	ldrb	r3, [r7, #6]
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <OLED_SendBuffer+0x54>)
 8002c42:	4413      	add	r3, r2
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff feee 	bl	8002a28 <OLED_SendData>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++)
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	71bb      	strb	r3, [r7, #6]
 8002c5c:	79bb      	ldrb	r3, [r7, #6]
 8002c5e:	2b07      	cmp	r3, #7
 8002c60:	d9e2      	bls.n	8002c28 <OLED_SendBuffer+0x10>
	}
	return Status;
 8002c62:	79fb      	ldrb	r3, [r7, #7]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000050c 	.word	0x2000050c

08002c70 <OLED_ClearBuffer>:

void OLED_ClearBuffer(uint8_t color)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c86:	4619      	mov	r1, r3
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <OLED_ClearBuffer+0x28>)
 8002c8a:	f004 fd5d 	bl	8007748 <memset>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000050c 	.word	0x2000050c

08002c9c <OLED_ChangeFont>:
//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	uint8_t Width, Height;
	Width = *(Font + 1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	73fb      	strb	r3, [r7, #15]
	Height = *(Font + 2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3302      	adds	r3, #2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	73bb      	strb	r3, [r7, #14]
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d802      	bhi.n	8002cc0 <OLED_ChangeFont+0x24>
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d901      	bls.n	8002cc4 <OLED_ChangeFont+0x28>
	{
		return OLED_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e00e      	b.n	8002ce2 <OLED_ChangeFont+0x46>
	}

	CurrentFont.FontPointer = Font;
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <OLED_ChangeFont+0x54>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6013      	str	r3, [r2, #0]
	CurrentFont.FontWidth = Width;
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <OLED_ChangeFont+0x54>)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	7153      	strb	r3, [r2, #5]
	CurrentFont.FontHeight = Height;
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <OLED_ChangeFont+0x54>)
 8002cd2:	7bbb      	ldrb	r3, [r7, #14]
 8002cd4:	7193      	strb	r3, [r2, #6]
	CurrentFont.FirstChar = *(Font + 3);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3303      	adds	r3, #3
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <OLED_ChangeFont+0x54>)
 8002cde:	711a      	strb	r2, [r3, #4]
	return OLED_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000504 	.word	0x20000504

08002cf4 <OLED_WriteChar>:

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71bb      	strb	r3, [r7, #6]
	uint8_t Status = OLED_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]
	if(color > 1)
 8002d08:	79bb      	ldrb	r3, [r7, #6]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d901      	bls.n	8002d12 <OLED_WriteChar+0x1e>
	{
		return OLED_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <OLED_WriteChar+0xfe>
	}
	switch(character)
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2b0a      	cmp	r3, #10
 8002d16:	d009      	beq.n	8002d2c <OLED_WriteChar+0x38>
 8002d18:	2b0d      	cmp	r3, #13
 8002d1a:	d113      	bne.n	8002d44 <OLED_WriteChar+0x50>
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;
 8002d1c:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <OLED_WriteChar+0x108>)
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	4619      	mov	r1, r3
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7ff feea 	bl	8002afc <OLED_MoveCursor>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	e062      	b.n	8002df2 <OLED_WriteChar+0xfe>

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);
 8002d2c:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <OLED_WriteChar+0x108>)
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <OLED_WriteChar+0x108>)
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	3308      	adds	r3, #8
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7ff fede 	bl	8002afc <OLED_MoveCursor>
 8002d40:	4603      	mov	r3, r0
 8002d42:	e056      	b.n	8002df2 <OLED_WriteChar+0xfe>

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <OLED_WriteChar+0x10c>)
 8002d48:	7912      	ldrb	r2, [r2, #4]
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <OLED_WriteChar+0x10c>)
 8002d50:	795b      	ldrb	r3, [r3, #5]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	fb12 f303 	smulbb	r3, r2, r3
 8002d58:	81fb      	strh	r3, [r7, #14]
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <OLED_WriteChar+0x10c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002d66:	2300      	movs	r3, #0
 8002d68:	75bb      	strb	r3, [r7, #22]
 8002d6a:	e00c      	b.n	8002d86 <OLED_WriteChar+0x92>
		{
			BytesToSend[i] = *CharPointer;
 8002d6c:	7dbb      	ldrb	r3, [r7, #22]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	3318      	adds	r3, #24
 8002d74:	443b      	add	r3, r7
 8002d76:	f803 2c10 	strb.w	r2, [r3, #-16]
			CharPointer++;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
 8002d80:	7dbb      	ldrb	r3, [r7, #22]
 8002d82:	3301      	adds	r3, #1
 8002d84:	75bb      	strb	r3, [r7, #22]
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <OLED_WriteChar+0x10c>)
 8002d88:	795b      	ldrb	r3, [r3, #5]
 8002d8a:	7dba      	ldrb	r2, [r7, #22]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3ed      	bcc.n	8002d6c <OLED_WriteChar+0x78>
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <OLED_WriteChar+0x10c>)
 8002d92:	7959      	ldrb	r1, [r3, #5]
 8002d94:	79ba      	ldrb	r2, [r7, #6]
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fed4 	bl	8002b48 <OLED_WriteToBuffer>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	75fb      	strb	r3, [r7, #23]
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <OLED_WriteChar+0x108>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <OLED_WriteChar+0x10c>)
 8002db2:	795b      	ldrb	r3, [r3, #5]
 8002db4:	4413      	add	r3, r2
 8002db6:	2b7f      	cmp	r3, #127	; 0x7f
 8002db8:	dd1a      	ble.n	8002df0 <OLED_WriteChar+0xfc>
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <OLED_WriteChar+0x108>)
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <OLED_WriteChar+0xe2>
			{
				Status |= OLED_MoveCursor(0,0);
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff fe99 	bl	8002afc <OLED_MoveCursor>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	75fb      	strb	r3, [r7, #23]
 8002dd4:	e00c      	b.n	8002df0 <OLED_WriteChar+0xfc>
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <OLED_WriteChar+0x108>)
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff fe8b 	bl	8002afc <OLED_MoveCursor>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	75fb      	strb	r3, [r7, #23]
			}

		}
		return Status;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000500 	.word	0x20000500
 8002e00:	20000504 	.word	0x20000504

08002e04 <OLED_WriteString>:

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t Status = OLED_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
	if(color > 1)
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d910      	bls.n	8002e3c <OLED_WriteString+0x38>
	{
		return OLED_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e013      	b.n	8002e46 <OLED_WriteString+0x42>
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff64 	bl	8002cf4 <OLED_WriteChar>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	73fb      	strb	r3, [r7, #15]
		String++;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
	while(*String)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ec      	bne.n	8002e1e <OLED_WriteString+0x1a>
	}
	return Status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <OLED_WriteInt>:

OLED_Status OLED_WriteInt(int Value, uint8_t color)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
	if(color > 1)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d901      	bls.n	8002e66 <OLED_WriteInt+0x16>
	{
		return OLED_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00e      	b.n	8002e84 <OLED_WriteInt+0x34>
	}

	char Buffer[5];
	sprintf(Buffer,"%d",Value);
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <OLED_WriteInt+0x3c>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fb72 	bl	8007558 <siprintf>
	return OLED_WriteString(Buffer, color);
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ffc1 	bl	8002e04 <OLED_WriteString>
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	08008454 	.word	0x08008454

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_MspInit+0x4c>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_MspInit+0x4c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_MspInit+0x4c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_MspInit+0x4c>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_MspInit+0x4c>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_MspInit+0x4c>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <NMI_Handler+0x4>

08002ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eea:	e7fe      	b.n	8002eea <HardFault_Handler+0x4>

08002eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler+0x4>

08002ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef6:	e7fe      	b.n	8002ef6 <BusFault_Handler+0x4>

08002ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002efc:	e7fe      	b.n	8002efc <UsageFault_Handler+0x4>

08002efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f2c:	f000 fa4c 	bl	80033c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <ADC_IRQHandler+0x10>)
 8002f3a:	f000 facc 	bl	80034d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200001c0 	.word	0x200001c0

08002f48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f4e:	f003 ff83 	bl	8006e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000958 	.word	0x20000958

08002f5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <SPI2_IRQHandler+0x10>)
 8002f62:	f003 fb59 	bl	8006618 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200004a4 	.word	0x200004a4

08002f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002f74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f78:	f001 fde0 	bl	8004b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <DMA2_Stream0_IRQHandler+0x10>)
 8002f86:	f001 f9b9 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000208 	.word	0x20000208

08002f94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e00a      	b.n	8002fbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa6:	f3af 8000 	nop.w
 8002faa:	4601      	mov	r1, r0
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	60ba      	str	r2, [r7, #8]
 8002fb2:	b2ca      	uxtb	r2, r1
 8002fb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	dbf0      	blt.n	8002fa6 <_read+0x12>
  }

  return len;
 8002fc4:	687b      	ldr	r3, [r7, #4]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e009      	b.n	8002ff4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	60ba      	str	r2, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fd81 	bl	8001af0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dbf1      	blt.n	8002fe0 <_write+0x12>
  }
  return len;
 8002ffc:	687b      	ldr	r3, [r7, #4]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_close>:

int _close(int file)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302e:	605a      	str	r2, [r3, #4]
  return 0;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <_isatty>:

int _isatty(int file)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <_sbrk+0x5c>)
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <_sbrk+0x60>)
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <_sbrk+0x64>)
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <_sbrk+0x68>)
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d207      	bcs.n	80030b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a0:	f004 fba0 	bl	80077e4 <__errno>
 80030a4:	4603      	mov	r3, r0
 80030a6:	220c      	movs	r2, #12
 80030a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e009      	b.n	80030c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <_sbrk+0x64>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <_sbrk+0x64>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <_sbrk+0x64>)
 80030c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20020000 	.word	0x20020000
 80030d0:	00000400 	.word	0x00000400
 80030d4:	2000090c 	.word	0x2000090c
 80030d8:	20000af0 	.word	0x20000af0

080030dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <SystemInit+0x20>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <SystemInit+0x20>)
 80030e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f004 fb1a 	bl	8007748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <MX_TIM3_Init+0xa0>)
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <MX_TIM3_Init+0xa4>)
 8003120:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <MX_TIM3_Init+0xa0>)
 8003124:	2200      	movs	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <MX_TIM3_Init+0xa0>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <MX_TIM3_Init+0xa0>)
 8003130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003134:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <MX_TIM3_Init+0xa0>)
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <MX_TIM3_Init+0xa0>)
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003142:	2303      	movs	r3, #3
 8003144:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800314a:	2301      	movs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800315a:	2301      	movs	r3, #1
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800315e:	2300      	movs	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	4619      	mov	r1, r3
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <MX_TIM3_Init+0xa0>)
 800316e:	f003 fd3f 	bl	8006bf0 <HAL_TIM_Encoder_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003178:	f7fe fcd6 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4805      	ldr	r0, [pc, #20]	; (80031a0 <MX_TIM3_Init+0xa0>)
 800318a:	f004 f845 	bl	8007218 <HAL_TIMEx_MasterConfigSynchronization>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003194:	f7fe fcc8 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003198:	bf00      	nop
 800319a:	3730      	adds	r7, #48	; 0x30
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000910 	.word	0x20000910
 80031a4:	40000400 	.word	0x40000400

080031a8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031ae:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <MX_TIM10_Init+0x44>)
 80031b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49999;
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80031b8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80031d4:	4804      	ldr	r0, [pc, #16]	; (80031e8 <MX_TIM10_Init+0x40>)
 80031d6:	f003 fc61 	bl	8006a9c <HAL_TIM_Base_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80031e0:	f7fe fca2 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000958 	.word	0x20000958
 80031ec:	40014400 	.word	0x40014400

080031f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <HAL_TIM_Encoder_MspInit+0x84>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d12b      	bne.n	800326a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_TIM_Encoder_MspInit+0x88>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <HAL_TIM_Encoder_MspInit+0x88>)
 800321c:	f043 0302 	orr.w	r3, r3, #2
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_TIM_Encoder_MspInit+0x88>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_TIM_Encoder_MspInit+0x88>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_TIM_Encoder_MspInit+0x88>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_TIM_Encoder_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800324a:	23c0      	movs	r3, #192	; 0xc0
 800324c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800325a:	2302      	movs	r3, #2
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003266:	f001 fab3 	bl	80047d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800326a:	bf00      	nop
 800326c:	3728      	adds	r7, #40	; 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40000400 	.word	0x40000400
 8003278:	40023800 	.word	0x40023800
 800327c:	40020000 	.word	0x40020000

08003280 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_TIM_Base_MspInit+0x48>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d115      	bne.n	80032be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_TIM_Base_MspInit+0x4c>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <HAL_TIM_Base_MspInit+0x4c>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_TIM_Base_MspInit+0x4c>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2019      	movs	r0, #25
 80032b4:	f000 fec3 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032b8:	2019      	movs	r0, #25
 80032ba:	f000 fedc 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40014400 	.word	0x40014400
 80032cc:	40023800 	.word	0x40023800

080032d0 <Reset_Handler>:
 80032d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003308 <LoopFillZerobss+0x12>
 80032d4:	480d      	ldr	r0, [pc, #52]	; (800330c <LoopFillZerobss+0x16>)
 80032d6:	490e      	ldr	r1, [pc, #56]	; (8003310 <LoopFillZerobss+0x1a>)
 80032d8:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <LoopFillZerobss+0x1e>)
 80032da:	2300      	movs	r3, #0
 80032dc:	e002      	b.n	80032e4 <LoopCopyDataInit>

080032de <CopyDataInit>:
 80032de:	58d4      	ldr	r4, [r2, r3]
 80032e0:	50c4      	str	r4, [r0, r3]
 80032e2:	3304      	adds	r3, #4

080032e4 <LoopCopyDataInit>:
 80032e4:	18c4      	adds	r4, r0, r3
 80032e6:	428c      	cmp	r4, r1
 80032e8:	d3f9      	bcc.n	80032de <CopyDataInit>
 80032ea:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <LoopFillZerobss+0x22>)
 80032ec:	4c0b      	ldr	r4, [pc, #44]	; (800331c <LoopFillZerobss+0x26>)
 80032ee:	2300      	movs	r3, #0
 80032f0:	e001      	b.n	80032f6 <LoopFillZerobss>

080032f2 <FillZerobss>:
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	3204      	adds	r2, #4

080032f6 <LoopFillZerobss>:
 80032f6:	42a2      	cmp	r2, r4
 80032f8:	d3fb      	bcc.n	80032f2 <FillZerobss>
 80032fa:	f7ff feef 	bl	80030dc <SystemInit>
 80032fe:	f004 fa77 	bl	80077f0 <__libc_init_array>
 8003302:	f7fe fb43 	bl	800198c <main>
 8003306:	4770      	bx	lr
 8003308:	20020000 	.word	0x20020000
 800330c:	20000000 	.word	0x20000000
 8003310:	20000198 	.word	0x20000198
 8003314:	08008700 	.word	0x08008700
 8003318:	20000198 	.word	0x20000198
 800331c:	20000af0 	.word	0x20000af0

08003320 <DMA1_Stream0_IRQHandler>:
 8003320:	e7fe      	b.n	8003320 <DMA1_Stream0_IRQHandler>
	...

08003324 <HAL_Init>:
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_Init+0x40>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <HAL_Init+0x40>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <HAL_Init+0x40>)
 800333a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_Init+0x40>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	2003      	movs	r0, #3
 800334e:	f000 fe6b 	bl	8004028 <HAL_NVIC_SetPriorityGrouping>
 8003352:	200f      	movs	r0, #15
 8003354:	f000 f808 	bl	8003368 <HAL_InitTick>
 8003358:	f7ff fd9a 	bl	8002e90 <HAL_MspInit>
 800335c:	2300      	movs	r3, #0
 800335e:	4618      	mov	r0, r3
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00

08003368 <HAL_InitTick>:
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_InitTick+0x54>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_InitTick+0x58>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fe83 	bl	8004092 <HAL_SYSTICK_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_InitTick+0x2e>
 8003392:	2301      	movs	r3, #1
 8003394:	e00e      	b.n	80033b4 <HAL_InitTick+0x4c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b0f      	cmp	r3, #15
 800339a:	d80a      	bhi.n	80033b2 <HAL_InitTick+0x4a>
 800339c:	2200      	movs	r2, #0
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f000 fe4b 	bl	800403e <HAL_NVIC_SetPriority>
 80033a8:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <HAL_InitTick+0x5c>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_InitTick+0x4c>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000130 	.word	0x20000130
 80033c0:	20000138 	.word	0x20000138
 80033c4:	20000134 	.word	0x20000134

080033c8 <HAL_IncTick>:
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x20>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_IncTick+0x24>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_IncTick+0x24>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000138 	.word	0x20000138
 80033ec:	200009a0 	.word	0x200009a0

080033f0 <HAL_GetTick>:
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_GetTick+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	200009a0 	.word	0x200009a0

08003408 <HAL_Delay>:
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	f7ff ffee 	bl	80033f0 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d005      	beq.n	800342e <HAL_Delay+0x26>
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_Delay+0x44>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	bf00      	nop
 8003430:	f7ff ffde 	bl	80033f0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d8f7      	bhi.n	8003430 <HAL_Delay+0x28>
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000138 	.word	0x20000138

08003450 <HAL_ADC_Init>:
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Init+0x16>
 8003462:	2301      	movs	r3, #1
 8003464:	e033      	b.n	80034ce <HAL_ADC_Init+0x7e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_ADC_Init+0x32>
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fb66 	bl	8000b40 <HAL_ADC_MspInit>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_ADC_Init+0x70>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003496:	f023 0302 	bic.w	r3, r3, #2
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fb68 	bl	8003b78 <ADC_Init>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
 80034be:	e001      	b.n	80034c4 <HAL_ADC_Init+0x74>
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_ADC_IRQHandler>:
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d049      	beq.n	80035a0 <HAL_ADC_IRQHandler+0xca>
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d046      	beq.n	80035a0 <HAL_ADC_IRQHandler+0xca>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <HAL_ADC_IRQHandler+0x54>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d12b      	bne.n	8003590 <HAL_ADC_IRQHandler+0xba>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d127      	bne.n	8003590 <HAL_ADC_IRQHandler+0xba>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <HAL_ADC_IRQHandler+0x86>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d119      	bne.n	8003590 <HAL_ADC_IRQHandler+0xba>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0220 	bic.w	r2, r2, #32
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d105      	bne.n	8003590 <HAL_ADC_IRQHandler+0xba>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fd fbdf 	bl	8000d54 <HAL_ADC_ConvCpltCallback>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f06f 0212 	mvn.w	r2, #18
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d057      	beq.n	8003666 <HAL_ADC_IRQHandler+0x190>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d054      	beq.n	8003666 <HAL_ADC_IRQHandler+0x190>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_ADC_IRQHandler+0xfe>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d139      	bne.n	8003656 <HAL_ADC_IRQHandler+0x180>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <HAL_ADC_IRQHandler+0x128>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d12b      	bne.n	8003656 <HAL_ADC_IRQHandler+0x180>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d124      	bne.n	8003656 <HAL_ADC_IRQHandler+0x180>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <HAL_ADC_IRQHandler+0x180>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7e1b      	ldrb	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_ADC_IRQHandler+0x180>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <HAL_ADC_IRQHandler+0x180>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fc0c 	bl	8003e74 <HAL_ADCEx_InjectedConvCpltCallback>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 020c 	mvn.w	r2, #12
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_ADC_IRQHandler+0x1d6>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d014      	beq.n	80036ac <HAL_ADC_IRQHandler+0x1d6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10d      	bne.n	80036ac <HAL_ADC_IRQHandler+0x1d6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f925 	bl	80038ec <HAL_ADC_LevelOutOfWindowCallback>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0201 	mvn.w	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <HAL_ADC_IRQHandler+0x218>
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <HAL_ADC_IRQHandler+0x218>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0220 	mvn.w	r2, #32
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f90e 	bl	8003900 <HAL_ADC_ErrorCallback>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0220 	mvn.w	r2, #32
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_ADC_Start_DMA>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_ADC_Start_DMA+0x1e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0ce      	b.n	80038b4 <HAL_ADC_Start_DMA+0x1bc>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d018      	beq.n	800375e <HAL_ADC_Start_DMA+0x66>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <HAL_ADC_Start_DMA+0x1c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <HAL_ADC_Start_DMA+0x1c8>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0c9a      	lsrs	r2, r3, #18
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e002      	b.n	8003758 <HAL_ADC_Start_DMA+0x60>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3b01      	subs	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f9      	bne.n	8003752 <HAL_ADC_Start_DMA+0x5a>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d107      	bne.n	800377e <HAL_ADC_Start_DMA+0x86>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	f040 8086 	bne.w	800389a <HAL_ADC_Start_DMA+0x1a2>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <HAL_ADC_Start_DMA+0xc8>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d106      	bne.n	80037dc <HAL_ADC_Start_DMA+0xe4>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f023 0206 	bic.w	r2, r3, #6
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
 80037da:	e002      	b.n	80037e2 <HAL_ADC_Start_DMA+0xea>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_ADC_Start_DMA+0x1cc>)
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <HAL_ADC_Start_DMA+0x1d0>)
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4a34      	ldr	r2, [pc, #208]	; (80038cc <HAL_ADC_Start_DMA+0x1d4>)
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	4a33      	ldr	r2, [pc, #204]	; (80038d0 <HAL_ADC_Start_DMA+0x1d8>)
 8003804:	64da      	str	r2, [r3, #76]	; 0x4c
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	334c      	adds	r3, #76	; 0x4c
 800383a:	4619      	mov	r1, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f000 fce2 	bl	8004208 <HAL_DMA_Start_IT>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_ADC_Start_DMA+0x178>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d129      	bne.n	80038b2 <HAL_ADC_Start_DMA+0x1ba>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	e020      	b.n	80038b2 <HAL_ADC_Start_DMA+0x1ba>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_ADC_Start_DMA+0x1dc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d11b      	bne.n	80038b2 <HAL_ADC_Start_DMA+0x1ba>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d114      	bne.n	80038b2 <HAL_ADC_Start_DMA+0x1ba>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e00b      	b.n	80038b2 <HAL_ADC_Start_DMA+0x1ba>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
 80038b2:	2300      	movs	r3, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000130 	.word	0x20000130
 80038c0:	431bde83 	.word	0x431bde83
 80038c4:	40012300 	.word	0x40012300
 80038c8:	08003d71 	.word	0x08003d71
 80038cc:	08003e2b 	.word	0x08003e2b
 80038d0:	08003e47 	.word	0x08003e47
 80038d4:	40012000 	.word	0x40012000

080038d8 <HAL_ADC_ConvHalfCpltCallback>:
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_ADC_LevelOutOfWindowCallback>:
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_ADC_ErrorCallback>:
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADC_ConfigChannel>:
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x1c>
 800392c:	2302      	movs	r3, #2
 800392e:	e113      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x244>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b09      	cmp	r3, #9
 800393e:	d925      	bls.n	800398c <HAL_ADC_ConfigChannel+0x78>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68d9      	ldr	r1, [r3, #12]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	3b1e      	subs	r3, #30
 8003956:	2207      	movs	r2, #7
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43da      	mvns	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	400a      	ands	r2, r1
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	4618      	mov	r0, r3
 8003978:	4603      	mov	r3, r0
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4403      	add	r3, r0
 800397e:	3b1e      	subs	r3, #30
 8003980:	409a      	lsls	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	e022      	b.n	80039d2 <HAL_ADC_ConfigChannel+0xbe>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6919      	ldr	r1, [r3, #16]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	2207      	movs	r2, #7
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	611a      	str	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6919      	ldr	r1, [r3, #16]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4618      	mov	r0, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4403      	add	r3, r0
 80039c8:	409a      	lsls	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	611a      	str	r2, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d824      	bhi.n	8003a24 <HAL_ADC_ConfigChannel+0x110>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	3b05      	subs	r3, #5
 80039ec:	221f      	movs	r2, #31
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	400a      	ands	r2, r1
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	3b05      	subs	r3, #5
 8003a16:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34
 8003a22:	e04c      	b.n	8003abe <HAL_ADC_ConfigChannel+0x1aa>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d824      	bhi.n	8003a76 <HAL_ADC_ConfigChannel+0x162>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b23      	subs	r3, #35	; 0x23
 8003a3e:	221f      	movs	r2, #31
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43da      	mvns	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	3b23      	subs	r3, #35	; 0x23
 8003a68:	fa00 f203 	lsl.w	r2, r0, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
 8003a74:	e023      	b.n	8003abe <HAL_ADC_ConfigChannel+0x1aa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	3b41      	subs	r3, #65	; 0x41
 8003a88:	221f      	movs	r2, #31
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	400a      	ands	r2, r1
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	3b41      	subs	r3, #65	; 0x41
 8003ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_ADC_ConfigChannel+0x250>)
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a28      	ldr	r2, [pc, #160]	; (8003b68 <HAL_ADC_ConfigChannel+0x254>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10f      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x1d8>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b12      	cmp	r3, #18
 8003ad2:	d10b      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x1d8>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_ADC_ConfigChannel+0x254>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d12b      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x23a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_ADC_ConfigChannel+0x258>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x1f4>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b11      	cmp	r3, #17
 8003b06:	d122      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x23a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <HAL_ADC_ConfigChannel+0x258>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d111      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x23a>
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_ADC_ConfigChannel+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <HAL_ADC_ConfigChannel+0x260>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	0c9a      	lsrs	r2, r3, #18
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	e002      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x234>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f9      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x22e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b56:	2300      	movs	r3, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40012300 	.word	0x40012300
 8003b68:	40012000 	.word	0x40012000
 8003b6c:	10000012 	.word	0x10000012
 8003b70:	20000130 	.word	0x20000130
 8003b74:	431bde83 	.word	0x431bde83

08003b78 <ADC_Init>:
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <ADC_Init+0x1f0>)
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021a      	lsls	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <ADC_Init+0x1f4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <ADC_Init+0xde>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6899      	ldr	r1, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6899      	ldr	r1, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	e00f      	b.n	8003c76 <ADC_Init+0xfe>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0202 	bic.w	r2, r2, #2
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7e1b      	ldrb	r3, [r3, #24]
 8003c90:	005a      	lsls	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <ADC_Init+0x164>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	035a      	lsls	r2, r3, #13
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	e007      	b.n	8003cec <ADC_Init+0x174>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	051a      	lsls	r2, r3, #20
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d2e:	025a      	lsls	r2, r3, #9
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	029a      	lsls	r2, r3, #10
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40012300 	.word	0x40012300
 8003d6c:	0f000001 	.word	0x0f000001

08003d70 <ADC_DMAConvCplt>:
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d13c      	bne.n	8003e04 <ADC_DMAConvCplt+0x94>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d12b      	bne.n	8003dfc <ADC_DMAConvCplt+0x8c>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	7e1b      	ldrb	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d127      	bne.n	8003dfc <ADC_DMAConvCplt+0x8c>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <ADC_DMAConvCplt+0x58>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d119      	bne.n	8003dfc <ADC_DMAConvCplt+0x8c>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0220 	bic.w	r2, r2, #32
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <ADC_DMAConvCplt+0x8c>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7fc ffa9 	bl	8000d54 <HAL_ADC_ConvCpltCallback>
 8003e02:	e00e      	b.n	8003e22 <ADC_DMAConvCplt+0xb2>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <ADC_DMAConvCplt+0xa8>
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fd75 	bl	8003900 <HAL_ADC_ErrorCallback>
 8003e16:	e004      	b.n	8003e22 <ADC_DMAConvCplt+0xb2>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <ADC_DMAHalfConvCplt>:
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff fd4d 	bl	80038d8 <HAL_ADC_ConvHalfCpltCallback>
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <ADC_DMAError>:
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2240      	movs	r2, #64	; 0x40
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f043 0204 	orr.w	r2, r3, #4
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fd4a 	bl	8003900 <HAL_ADC_ErrorCallback>
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_ADCEx_InjectedConvCpltCallback>:
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <__NVIC_SetPriorityGrouping>:
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	60d3      	str	r3, [r2, #12]
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <__NVIC_GetPriorityGrouping>:
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_EnableIRQ>:
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db0b      	blt.n	8003f16 <__NVIC_EnableIRQ+0x2a>
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <__NVIC_EnableIRQ+0x38>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000e100 	.word	0xe000e100

08003f28 <__NVIC_SetPriority>:
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db0a      	blt.n	8003f52 <__NVIC_SetPriority+0x2a>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	490c      	ldr	r1, [pc, #48]	; (8003f74 <__NVIC_SetPriority+0x4c>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003f50:	e00a      	b.n	8003f68 <__NVIC_SetPriority+0x40>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <__NVIC_SetPriority+0x50>)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	440b      	add	r3, r1
 8003f66:	761a      	strb	r2, [r3, #24]
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <NVIC_EncodePriority>:
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf28      	it	cs
 8003f9a:	2304      	movcs	r3, #4
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d902      	bls.n	8003fac <NVIC_EncodePriority+0x30>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	e000      	b.n	8003fae <NVIC_EncodePriority+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <SysTick_Config>:
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff4:	d301      	bcc.n	8003ffa <SysTick_Config+0x16>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00f      	b.n	800401a <SysTick_Config+0x36>
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <SysTick_Config+0x40>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	6053      	str	r3, [r2, #4]
 8004002:	210f      	movs	r1, #15
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	f7ff ff8e 	bl	8003f28 <__NVIC_SetPriority>
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <SysTick_Config+0x40>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SysTick_Config+0x40>)
 8004014:	2207      	movs	r2, #7
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <HAL_NVIC_SetPriorityGrouping>:
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff29 	bl	8003e88 <__NVIC_SetPriorityGrouping>
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_SetPriority>:
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f7ff ff3e 	bl	8003ed0 <__NVIC_GetPriorityGrouping>
 8004054:	6178      	str	r0, [r7, #20]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	6978      	ldr	r0, [r7, #20]
 800405c:	f7ff ff8e 	bl	8003f7c <NVIC_EncodePriority>
 8004060:	4602      	mov	r2, r0
 8004062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff5d 	bl	8003f28 <__NVIC_SetPriority>
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_EnableIRQ>:
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	71fb      	strb	r3, [r7, #7]
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff31 	bl	8003eec <__NVIC_EnableIRQ>
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_SYSTICK_Config>:
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ffa2 	bl	8003fe4 <SysTick_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_DMA_Init>:
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	f7ff f99a 	bl	80033f0 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_DMA_Init+0x1c>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e099      	b.n	80041fc <HAL_DMA_Init+0x150>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e00f      	b.n	800410a <HAL_DMA_Init+0x5e>
 80040ea:	f7ff f981 	bl	80033f0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d908      	bls.n	800410a <HAL_DMA_Init+0x5e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2203      	movs	r2, #3
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004106:	2303      	movs	r3, #3
 8004108:	e078      	b.n	80041fc <HAL_DMA_Init+0x150>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e8      	bne.n	80040ea <HAL_DMA_Init+0x3e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_DMA_Init+0x158>)
 8004124:	4013      	ands	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4313      	orrs	r3, r2
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b04      	cmp	r3, #4
 8004162:	d107      	bne.n	8004174 <HAL_DMA_Init+0xc8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b04      	cmp	r3, #4
 800419c:	d117      	bne.n	80041ce <HAL_DMA_Init+0x122>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_Init+0x122>
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa91 	bl	80046d8 <DMA_CheckFifoParam>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Init+0x122>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041ca:	2301      	movs	r3, #1
 80041cc:	e016      	b.n	80041fc <HAL_DMA_Init+0x150>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	615a      	str	r2, [r3, #20]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa48 	bl	800466c <DMA_CalcBaseAndBitshift>
 80041dc:	4603      	mov	r3, r0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	223f      	movs	r2, #63	; 0x3f
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041fa:	2300      	movs	r3, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	f010803f 	.word	0xf010803f

08004208 <HAL_DMA_Start_IT>:
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_DMA_Start_IT+0x26>
 800422a:	2302      	movs	r3, #2
 800422c:	e040      	b.n	80042b0 <HAL_DMA_Start_IT+0xa8>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d12f      	bne.n	80042a2 <HAL_DMA_Start_IT+0x9a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f9da 	bl	8004610 <DMA_SetConfig>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0216 	orr.w	r2, r2, #22
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_DMA_Start_IT+0x88>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e005      	b.n	80042ae <HAL_DMA_Start_IT+0xa6>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80042aa:	2302      	movs	r3, #2
 80042ac:	75fb      	strb	r3, [r7, #23]
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_Abort_IT>:
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort_IT+0x1e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00c      	b.n	80042f0 <HAL_DMA_Abort_IT+0x38>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2205      	movs	r2, #5
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	2300      	movs	r3, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_DMA_IRQHandler>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_DMA_IRQHandler+0x248>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a8e      	ldr	r2, [pc, #568]	; (8004548 <HAL_DMA_IRQHandler+0x24c>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2208      	movs	r2, #8
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01a      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	2208      	movs	r2, #8
 8004356:	409a      	lsls	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	2204      	movs	r2, #4
 80043a4:	409a      	lsls	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	2204      	movs	r2, #4
 80043c2:	409a      	lsls	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	2210      	movs	r2, #16
 80043da:	409a      	lsls	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d043      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03c      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	2210      	movs	r2, #16
 80043f8:	409a      	lsls	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0x142>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <HAL_DMA_IRQHandler+0x130>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e01f      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
 800443c:	e016      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_DMA_IRQHandler+0x160>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	2220      	movs	r2, #32
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 808f 	beq.w	800459c <HAL_DMA_IRQHandler+0x2a0>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8087 	beq.w	800459c <HAL_DMA_IRQHandler+0x2a0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	2220      	movs	r2, #32
 8004494:	409a      	lsls	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d136      	bne.n	8004514 <HAL_DMA_IRQHandler+0x218>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0216 	bic.w	r2, r2, #22
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c4:	615a      	str	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x1da>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x1ea>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0208 	bic.w	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	223f      	movs	r2, #63	; 0x3f
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d07e      	beq.n	8004608 <HAL_DMA_IRQHandler+0x30c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
 8004512:	e079      	b.n	8004608 <HAL_DMA_IRQHandler+0x30c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0x262>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_DMA_IRQHandler+0x250>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	2b00      	cmp	r3, #0
 8004536:	d031      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e02c      	b.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 8004542:	bf00      	nop
 8004544:	20000130 	.word	0x20000130
 8004548:	1b4e81b5 	.word	0x1b4e81b5
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d023      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
 800455c:	e01e      	b.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_DMA_IRQHandler+0x290>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0210 	bic.w	r2, r2, #16
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d032      	beq.n	800460a <HAL_DMA_IRQHandler+0x30e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d022      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2fa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2205      	movs	r2, #5
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d307      	bcc.n	80045e4 <HAL_DMA_IRQHandler+0x2e8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f2      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x2cc>
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_IRQHandler+0x2ea>
 80045e4:	bf00      	nop
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_DMA_IRQHandler+0x30e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
 8004606:	e000      	b.n	800460a <HAL_DMA_IRQHandler+0x30e>
 8004608:	bf00      	nop
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <DMA_SetConfig>:
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d108      	bne.n	8004650 <DMA_SetConfig+0x40>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	e007      	b.n	8004660 <DMA_SetConfig+0x50>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <DMA_CalcBaseAndBitshift>:
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	3b10      	subs	r3, #16
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <DMA_CalcBaseAndBitshift+0x64>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	; 0x5c
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d909      	bls.n	80046ae <DMA_CalcBaseAndBitshift+0x42>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	1d1a      	adds	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	659a      	str	r2, [r3, #88]	; 0x58
 80046ac:	e007      	b.n	80046be <DMA_CalcBaseAndBitshift+0x52>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	aaaaaaab 	.word	0xaaaaaaab
 80046d4:	080086b4 	.word	0x080086b4

080046d8 <DMA_CheckFifoParam>:
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0x5a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d856      	bhi.n	80047a6 <DMA_CheckFifoParam+0xce>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <DMA_CheckFifoParam+0x28>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004711 	.word	0x08004711
 8004704:	08004723 	.word	0x08004723
 8004708:	08004711 	.word	0x08004711
 800470c:	080047a7 	.word	0x080047a7
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d046      	beq.n	80047aa <DMA_CheckFifoParam+0xd2>
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
 8004720:	e043      	b.n	80047aa <DMA_CheckFifoParam+0xd2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800472a:	d140      	bne.n	80047ae <DMA_CheckFifoParam+0xd6>
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	e03d      	b.n	80047ae <DMA_CheckFifoParam+0xd6>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473a:	d121      	bne.n	8004780 <DMA_CheckFifoParam+0xa8>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d837      	bhi.n	80047b2 <DMA_CheckFifoParam+0xda>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <DMA_CheckFifoParam+0x70>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	08004759 	.word	0x08004759
 800474c:	0800475f 	.word	0x0800475f
 8004750:	08004759 	.word	0x08004759
 8004754:	08004771 	.word	0x08004771
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e030      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d025      	beq.n	80047b6 <DMA_CheckFifoParam+0xde>
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
 800476e:	e022      	b.n	80047b6 <DMA_CheckFifoParam+0xde>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004778:	d11f      	bne.n	80047ba <DMA_CheckFifoParam+0xe2>
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	e01c      	b.n	80047ba <DMA_CheckFifoParam+0xe2>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d903      	bls.n	800478e <DMA_CheckFifoParam+0xb6>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d003      	beq.n	8004794 <DMA_CheckFifoParam+0xbc>
 800478c:	e018      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e015      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00e      	beq.n	80047be <DMA_CheckFifoParam+0xe6>
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e00b      	b.n	80047be <DMA_CheckFifoParam+0xe6>
 80047a6:	bf00      	nop
 80047a8:	e00a      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 80047aa:	bf00      	nop
 80047ac:	e008      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 80047ae:	bf00      	nop
 80047b0:	e006      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 80047b2:	bf00      	nop
 80047b4:	e004      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <DMA_CheckFifoParam+0xe8>
 80047be:	bf00      	nop
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <HAL_GPIO_Init>:
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e159      	b.n	8004aa0 <HAL_GPIO_Init+0x2d0>
 80047ec:	2201      	movs	r2, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	429a      	cmp	r2, r3
 8004806:	f040 8148 	bne.w	8004a9a <HAL_GPIO_Init+0x2ca>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d005      	beq.n	8004822 <HAL_GPIO_Init+0x52>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d130      	bne.n	8004884 <HAL_GPIO_Init+0xb4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2203      	movs	r2, #3
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	609a      	str	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	2201      	movs	r2, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 0201 	and.w	r2, r3, #1
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b03      	cmp	r3, #3
 800488e:	d017      	beq.n	80048c0 <HAL_GPIO_Init+0xf0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2203      	movs	r2, #3
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d123      	bne.n	8004914 <HAL_GPIO_Init+0x144>
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	08da      	lsrs	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3208      	adds	r2, #8
 80048d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	220f      	movs	r2, #15
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	69b9      	ldr	r1, [r7, #24]
 8004910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2203      	movs	r2, #3
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80a2 	beq.w	8004a9a <HAL_GPIO_Init+0x2ca>
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	4b57      	ldr	r3, [pc, #348]	; (8004ab8 <HAL_GPIO_Init+0x2e8>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	4a56      	ldr	r2, [pc, #344]	; (8004ab8 <HAL_GPIO_Init+0x2e8>)
 8004960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004964:	6453      	str	r3, [r2, #68]	; 0x44
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <HAL_GPIO_Init+0x2e8>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_GPIO_Init+0x2ec>)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	3302      	adds	r3, #2
 800497a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a49      	ldr	r2, [pc, #292]	; (8004ac0 <HAL_GPIO_Init+0x2f0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d019      	beq.n	80049d2 <HAL_GPIO_Init+0x202>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a48      	ldr	r2, [pc, #288]	; (8004ac4 <HAL_GPIO_Init+0x2f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_GPIO_Init+0x1fe>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a47      	ldr	r2, [pc, #284]	; (8004ac8 <HAL_GPIO_Init+0x2f8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00d      	beq.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a46      	ldr	r2, [pc, #280]	; (8004acc <HAL_GPIO_Init+0x2fc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <HAL_GPIO_Init+0x1f6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a45      	ldr	r2, [pc, #276]	; (8004ad0 <HAL_GPIO_Init+0x300>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_GPIO_Init+0x1f2>
 80049be:	2304      	movs	r3, #4
 80049c0:	e008      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049c2:	2307      	movs	r3, #7
 80049c4:	e006      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e004      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e002      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049d2:	2300      	movs	r3, #0
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	f002 0203 	and.w	r2, r2, #3
 80049da:	0092      	lsls	r2, r2, #2
 80049dc:	4093      	lsls	r3, r2
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	4935      	ldr	r1, [pc, #212]	; (8004abc <HAL_GPIO_Init+0x2ec>)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80049f2:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x246>
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	4a2f      	ldr	r2, [pc, #188]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6093      	str	r3, [r2, #8]
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x270>
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	60d3      	str	r3, [r2, #12]
 8004a46:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x29a>
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6053      	str	r3, [r2, #4]
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x2c4>
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	f67f aea2 	bls.w	80047ec <HAL_GPIO_Init+0x1c>
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	40020c00 	.word	0x40020c00
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40013c00 	.word	0x40013c00

08004ad8 <HAL_GPIO_ReadPin>:
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	887b      	ldrh	r3, [r7, #2]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_GPIO_ReadPin+0x1e>
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	e001      	b.n	8004afa <HAL_GPIO_ReadPin+0x22>
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_GPIO_WritePin>:
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
 8004b14:	4613      	mov	r3, r2
 8004b16:	707b      	strb	r3, [r7, #1]
 8004b18:	787b      	ldrb	r3, [r7, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_WritePin+0x1e>
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
 8004b24:	e003      	b.n	8004b2e <HAL_GPIO_WritePin+0x26>
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	041a      	lsls	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_GPIO_EXTI_IRQHandler>:
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8004b52:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	6153      	str	r3, [r2, #20]
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc ffd5 	bl	8001b0a <HAL_GPIO_EXTI_Callback>
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40013c00 	.word	0x40013c00

08004b6c <HAL_I2C_Init>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Init+0x12>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e12b      	b.n	8004dd6 <HAL_I2C_Init+0x26a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_I2C_Init+0x2c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fc5c 	bl	8001450 <HAL_I2C_MspInit>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f001 f896 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a81      	ldr	r2, [pc, #516]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d807      	bhi.n	8004bf0 <HAL_I2C_Init+0x84>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_I2C_Init+0x278>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bf94      	ite	ls
 8004be8:	2301      	movls	r3, #1
 8004bea:	2300      	movhi	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e006      	b.n	8004bfe <HAL_I2C_Init+0x92>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a7d      	ldr	r2, [pc, #500]	; (8004de8 <HAL_I2C_Init+0x27c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf94      	ite	ls
 8004bf8:	2301      	movls	r3, #1
 8004bfa:	2300      	movhi	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Init+0x9a>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0e7      	b.n	8004dd6 <HAL_I2C_Init+0x26a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a78      	ldr	r2, [pc, #480]	; (8004dec <HAL_I2C_Init+0x280>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0c9b      	lsrs	r3, r3, #18
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a6a      	ldr	r2, [pc, #424]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d802      	bhi.n	8004c40 <HAL_I2C_Init+0xd4>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	e009      	b.n	8004c54 <HAL_I2C_Init+0xe8>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	4a69      	ldr	r2, [pc, #420]	; (8004df0 <HAL_I2C_Init+0x284>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	099b      	lsrs	r3, r3, #6
 8004c52:	3301      	adds	r3, #1
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6213      	str	r3, [r2, #32]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	495c      	ldr	r1, [pc, #368]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004c70:	428b      	cmp	r3, r1
 8004c72:	d819      	bhi.n	8004ca8 <HAL_I2C_Init+0x13c>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1e59      	subs	r1, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c88:	400b      	ands	r3, r1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_I2C_Init+0x138>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1e59      	subs	r1, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca2:	e051      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e04f      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <HAL_I2C_Init+0x168>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	440b      	add	r3, r1
 8004cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e012      	b.n	8004cfa <HAL_I2C_Init+0x18e>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e58      	subs	r0, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	0099      	lsls	r1, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x196>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e022      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10e      	bne.n	8004d28 <HAL_I2C_Init+0x1bc>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1e58      	subs	r0, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	440b      	add	r3, r1
 8004d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	e00f      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e58      	subs	r0, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	0099      	lsls	r1, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	6809      	ldr	r1, [r1, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61cb      	str	r3, [r1, #28]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6911      	ldr	r1, [r2, #16]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	4311      	orrs	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6093      	str	r3, [r2, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	000186a0 	.word	0x000186a0
 8004de4:	001e847f 	.word	0x001e847f
 8004de8:	003d08ff 	.word	0x003d08ff
 8004dec:	431bde83 	.word	0x431bde83
 8004df0:	10624dd3 	.word	0x10624dd3

08004df4 <HAL_I2C_Mem_Write>:
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	817b      	strh	r3, [r7, #10]
 8004e06:	460b      	mov	r3, r1
 8004e08:	813b      	strh	r3, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
 8004e0e:	f7fe faef 	bl	80033f0 <HAL_GetTick>
 8004e12:	6178      	str	r0, [r7, #20]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	f040 80d9 	bne.w	8004fd4 <HAL_I2C_Mem_Write+0x1e0>
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	2319      	movs	r3, #25
 8004e28:	2201      	movs	r2, #1
 8004e2a:	496d      	ldr	r1, [pc, #436]	; (8004fe0 <HAL_I2C_Mem_Write+0x1ec>)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f971 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x48>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0cc      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_I2C_Mem_Write+0x56>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e0c5      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d007      	beq.n	8004e70 <HAL_I2C_Mem_Write+0x7c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2221      	movs	r2, #33	; 0x21
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a4d      	ldr	r2, [pc, #308]	; (8004fe4 <HAL_I2C_Mem_Write+0x1f0>)
 8004eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eb2:	88f8      	ldrh	r0, [r7, #6]
 8004eb4:	893a      	ldrh	r2, [r7, #8]
 8004eb6:	8979      	ldrh	r1, [r7, #10]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f890 	bl	8004fe8 <I2C_RequestMemoryWrite>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d052      	beq.n	8004f74 <HAL_I2C_Mem_Write+0x180>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e081      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f9f2 	bl	80052c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_I2C_Mem_Write+0x10a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <HAL_I2C_Mem_Write+0x106>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06b      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x180>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_I2C_Mem_Write+0x180>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1aa      	bne.n	8004ed2 <HAL_I2C_Mem_Write+0xde>
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f9de 	bl	8005342 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x1b4>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d107      	bne.n	8004fa4 <HAL_I2C_Mem_Write+0x1b0>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e016      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	00100002 	.word	0x00100002
 8004fe4:	ffff0000 	.word	0xffff0000

08004fe8 <I2C_RequestMemoryWrite>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	817b      	strh	r3, [r7, #10]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	813b      	strh	r3, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2200      	movs	r2, #0
 800501a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f878 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <I2C_RequestMemoryWrite+0x5e>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005038:	d103      	bne.n	8005042 <I2C_RequestMemoryWrite+0x5a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
 8005042:	2303      	movs	r3, #3
 8005044:	e05f      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005054:	611a      	str	r2, [r3, #16]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	492d      	ldr	r1, [pc, #180]	; (8005110 <I2C_RequestMemoryWrite+0x128>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f8b0 	bl	80051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <I2C_RequestMemoryWrite+0x84>
 8005068:	2301      	movs	r3, #1
 800506a:	e04c      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	6a39      	ldr	r1, [r7, #32]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f91a 	bl	80052c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <I2C_RequestMemoryWrite+0xc6>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <I2C_RequestMemoryWrite+0xc2>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02b      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d105      	bne.n	80050c0 <I2C_RequestMemoryWrite+0xd8>
 80050b4:	893b      	ldrh	r3, [r7, #8]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e021      	b.n	8005104 <I2C_RequestMemoryWrite+0x11c>
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	6a39      	ldr	r1, [r7, #32]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f8f4 	bl	80052c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <I2C_RequestMemoryWrite+0x112>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d107      	bne.n	80050f6 <I2C_RequestMemoryWrite+0x10e>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	2301      	movs	r3, #1
 80050f8:	e005      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
 80050fa:	893b      	ldrh	r3, [r7, #8]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]
 8005104:	2300      	movs	r3, #0
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_WaitOnFlagUntilTimeout>:
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
 8005124:	e025      	b.n	8005172 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d021      	beq.n	8005172 <I2C_WaitOnFlagUntilTimeout+0x5e>
 800512e:	f7fe f95f 	bl	80033f0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d116      	bne.n	8005172 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800516e:	2301      	movs	r3, #1
 8005170:	e023      	b.n	80051ba <I2C_WaitOnFlagUntilTimeout+0xa6>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10d      	bne.n	8005198 <I2C_WaitOnFlagUntilTimeout+0x84>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	43da      	mvns	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	e00c      	b.n	80051b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	43da      	mvns	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d0b6      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x12>
 80051b8:	2300      	movs	r3, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	e051      	b.n	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d123      	bne.n	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051fa:	615a      	str	r2, [r3, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	631a      	str	r2, [r3, #48]	; 0x30
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005226:	2301      	movs	r3, #1
 8005228:	e046      	b.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d021      	beq.n	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005232:	f7fe f8dd 	bl	80033f0 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005272:	2301      	movs	r3, #1
 8005274:	e020      	b.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10c      	bne.n	800529a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	43da      	mvns	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	e00b      	b.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	43da      	mvns	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d18d      	bne.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80052b6:	2300      	movs	r3, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <I2C_WaitOnTXEFlagUntilTimeout>:
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	e02d      	b.n	800532a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f878 	bl	80053c4 <I2C_IsAcknowledgeFailed>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80052da:	2301      	movs	r3, #1
 80052dc:	e02d      	b.n	800533a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d021      	beq.n	800532a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80052e6:	f7fe f883 	bl	80033f0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d116      	bne.n	800532a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005326:	2301      	movs	r3, #1
 8005328:	e007      	b.n	800533a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d1ca      	bne.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8005338:	2300      	movs	r3, #0
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <I2C_WaitOnBTFFlagUntilTimeout>:
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	e02d      	b.n	80053ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f837 	bl	80053c4 <I2C_IsAcknowledgeFailed>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800535c:	2301      	movs	r3, #1
 800535e:	e02d      	b.n	80053bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d021      	beq.n	80053ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005368:	f7fe f842 	bl	80033f0 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d116      	bne.n	80053ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053a8:	2301      	movs	r3, #1
 80053aa:	e007      	b.n	80053bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d1ca      	bne.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80053ba:	2300      	movs	r3, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2C_IsAcknowledgeFailed>:
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053da:	d11b      	bne.n	8005414 <I2C_IsAcknowledgeFailed+0x50>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053e4:	615a      	str	r2, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <I2C_IsAcknowledgeFailed+0x52>
 8005414:	2300      	movs	r3, #0
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_RCC_OscConfig>:
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_OscConfig+0x12>
 8005432:	2301      	movs	r3, #1
 8005434:	e267      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d075      	beq.n	800552e <HAL_RCC_OscConfig+0x10a>
 8005442:	4b88      	ldr	r3, [pc, #544]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x44>
 800544e:	4b85      	ldr	r3, [pc, #532]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
 800545a:	4b82      	ldr	r3, [pc, #520]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005466:	d10b      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
 8005468:	4b7e      	ldr	r3, [pc, #504]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05b      	beq.n	800552c <HAL_RCC_OscConfig+0x108>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d157      	bne.n	800552c <HAL_RCC_OscConfig+0x108>
 800547c:	2301      	movs	r3, #1
 800547e:	e242      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x74>
 800548a:	4b76      	ldr	r3, [pc, #472]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a75      	ldr	r2, [pc, #468]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x98>
 80054a2:	4b70      	ldr	r3, [pc, #448]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6f      	ldr	r2, [pc, #444]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b6d      	ldr	r3, [pc, #436]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a6c      	ldr	r2, [pc, #432]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 80054bc:	4b69      	ldr	r3, [pc, #420]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a68      	ldr	r2, [pc, #416]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b66      	ldr	r3, [pc, #408]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a65      	ldr	r2, [pc, #404]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0xe0>
 80054dc:	f7fd ff88 	bl	80033f0 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xd2>
 80054e4:	f7fd ff84 	bl	80033f0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xd2>
 80054f2:	2303      	movs	r3, #3
 80054f4:	e207      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 80054f6:	4b5b      	ldr	r3, [pc, #364]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xc0>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
 8005504:	f7fd ff74 	bl	80033f0 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xfa>
 800550c:	f7fd ff70 	bl	80033f0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xfa>
 800551a:	2303      	movs	r3, #3
 800551c:	e1f3      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 800551e:	4b51      	ldr	r3, [pc, #324]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0xe8>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
 800552c:	bf00      	nop
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d063      	beq.n	8005602 <HAL_RCC_OscConfig+0x1de>
 800553a:	4b4a      	ldr	r3, [pc, #296]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCC_OscConfig+0x13a>
 8005546:	4b47      	ldr	r3, [pc, #284]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
 8005552:	4b44      	ldr	r3, [pc, #272]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
 800555e:	4b41      	ldr	r3, [pc, #260]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
 8005572:	2301      	movs	r3, #1
 8005574:	e1c7      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005576:	4b3b      	ldr	r3, [pc, #236]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4937      	ldr	r1, [pc, #220]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
 800558a:	e03a      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_OscConfig+0x1b2>
 8005594:	4b34      	ldr	r3, [pc, #208]	; (8005668 <HAL_RCC_OscConfig+0x244>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	f7fd ff29 	bl	80033f0 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x190>
 80055a2:	f7fd ff25 	bl	80033f0 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x190>
 80055b0:	2303      	movs	r3, #3
 80055b2:	e1a8      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 80055b4:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x17e>
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4925      	ldr	r1, [pc, #148]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	e015      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
 80055d6:	4b24      	ldr	r3, [pc, #144]	; (8005668 <HAL_RCC_OscConfig+0x244>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f7fd ff08 	bl	80033f0 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
 80055e4:	f7fd ff04 	bl	80033f0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
 80055f2:	2303      	movs	r3, #3
 80055f4:	e187      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 80055f6:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1c0>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d036      	beq.n	800567c <HAL_RCC_OscConfig+0x258>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_RCC_OscConfig+0x220>
 8005616:	4b15      	ldr	r3, [pc, #84]	; (800566c <HAL_RCC_OscConfig+0x248>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f7fd fee8 	bl	80033f0 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x212>
 8005624:	f7fd fee4 	bl	80033f0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x212>
 8005632:	2303      	movs	r3, #3
 8005634:	e167      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005636:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_OscConfig+0x240>)
 8005638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x200>
 8005642:	e01b      	b.n	800567c <HAL_RCC_OscConfig+0x258>
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <HAL_RCC_OscConfig+0x248>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	f7fd fed1 	bl	80033f0 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]
 8005650:	e00e      	b.n	8005670 <HAL_RCC_OscConfig+0x24c>
 8005652:	f7fd fecd 	bl	80033f0 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d907      	bls.n	8005670 <HAL_RCC_OscConfig+0x24c>
 8005660:	2303      	movs	r3, #3
 8005662:	e150      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005664:	40023800 	.word	0x40023800
 8005668:	42470000 	.word	0x42470000
 800566c:	42470e80 	.word	0x42470e80
 8005670:	4b88      	ldr	r3, [pc, #544]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ea      	bne.n	8005652 <HAL_RCC_OscConfig+0x22e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8097 	beq.w	80057b8 <HAL_RCC_OscConfig+0x394>
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]
 800568e:	4b81      	ldr	r3, [pc, #516]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <HAL_RCC_OscConfig+0x296>
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	4a7c      	ldr	r2, [pc, #496]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6413      	str	r3, [r2, #64]	; 0x40
 80056aa:	4b7a      	ldr	r3, [pc, #488]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
 80056ba:	4b77      	ldr	r3, [pc, #476]	; (8005898 <HAL_RCC_OscConfig+0x474>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d118      	bne.n	80056f8 <HAL_RCC_OscConfig+0x2d4>
 80056c6:	4b74      	ldr	r3, [pc, #464]	; (8005898 <HAL_RCC_OscConfig+0x474>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a73      	ldr	r2, [pc, #460]	; (8005898 <HAL_RCC_OscConfig+0x474>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	f7fd fe8d 	bl	80033f0 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x2c8>
 80056da:	f7fd fe89 	bl	80033f0 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x2c8>
 80056e8:	2303      	movs	r3, #3
 80056ea:	e10c      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 80056ec:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <HAL_RCC_OscConfig+0x474>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCC_OscConfig+0x2b6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d106      	bne.n	800570e <HAL_RCC_OscConfig+0x2ea>
 8005700:	4b64      	ldr	r3, [pc, #400]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	4a63      	ldr	r2, [pc, #396]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	6713      	str	r3, [r2, #112]	; 0x70
 800570c:	e01c      	b.n	8005748 <HAL_RCC_OscConfig+0x324>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b05      	cmp	r3, #5
 8005714:	d10c      	bne.n	8005730 <HAL_RCC_OscConfig+0x30c>
 8005716:	4b5f      	ldr	r3, [pc, #380]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4a5e      	ldr	r2, [pc, #376]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	6713      	str	r3, [r2, #112]	; 0x70
 8005722:	4b5c      	ldr	r3, [pc, #368]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	4a5b      	ldr	r2, [pc, #364]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6713      	str	r3, [r2, #112]	; 0x70
 800572e:	e00b      	b.n	8005748 <HAL_RCC_OscConfig+0x324>
 8005730:	4b58      	ldr	r3, [pc, #352]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4a57      	ldr	r2, [pc, #348]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	6713      	str	r3, [r2, #112]	; 0x70
 800573c:	4b55      	ldr	r3, [pc, #340]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	4a54      	ldr	r2, [pc, #336]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	6713      	str	r3, [r2, #112]	; 0x70
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCC_OscConfig+0x358>
 8005750:	f7fd fe4e 	bl	80033f0 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]
 8005756:	e00a      	b.n	800576e <HAL_RCC_OscConfig+0x34a>
 8005758:	f7fd fe4a 	bl	80033f0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x34a>
 800576a:	2303      	movs	r3, #3
 800576c:	e0cb      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 800576e:	4b49      	ldr	r3, [pc, #292]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ee      	beq.n	8005758 <HAL_RCC_OscConfig+0x334>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x382>
 800577c:	f7fd fe38 	bl	80033f0 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]
 8005782:	e00a      	b.n	800579a <HAL_RCC_OscConfig+0x376>
 8005784:	f7fd fe34 	bl	80033f0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x376>
 8005796:	2303      	movs	r3, #3
 8005798:	e0b5      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 800579a:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ee      	bne.n	8005784 <HAL_RCC_OscConfig+0x360>
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d105      	bne.n	80057b8 <HAL_RCC_OscConfig+0x394>
 80057ac:	4b39      	ldr	r3, [pc, #228]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	4a38      	ldr	r2, [pc, #224]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80057b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6413      	str	r3, [r2, #64]	; 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a1 	beq.w	8005904 <HAL_RCC_OscConfig+0x4e0>
 80057c2:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d05c      	beq.n	8005888 <HAL_RCC_OscConfig+0x464>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d141      	bne.n	800585a <HAL_RCC_OscConfig+0x436>
 80057d6:	4b31      	ldr	r3, [pc, #196]	; (800589c <HAL_RCC_OscConfig+0x478>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f7fd fe08 	bl	80033f0 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x3d2>
 80057e4:	f7fd fe04 	bl	80033f0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x3d2>
 80057f2:	2303      	movs	r3, #3
 80057f4:	e087      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 80057f6:	4b27      	ldr	r3, [pc, #156]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x3c0>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	3b01      	subs	r3, #1
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	061b      	lsls	r3, r3, #24
 8005826:	491b      	ldr	r1, [pc, #108]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_RCC_OscConfig+0x478>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	f7fd fddd 	bl	80033f0 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x428>
 800583a:	f7fd fdd9 	bl	80033f0 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x428>
 8005848:	2303      	movs	r3, #3
 800584a:	e05c      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x416>
 8005858:	e054      	b.n	8005904 <HAL_RCC_OscConfig+0x4e0>
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_RCC_OscConfig+0x478>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f7fd fdc6 	bl	80033f0 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x456>
 8005868:	f7fd fdc2 	bl	80033f0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x456>
 8005876:	2303      	movs	r3, #3
 8005878:	e045      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCC_OscConfig+0x470>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x444>
 8005886:	e03d      	b.n	8005904 <HAL_RCC_OscConfig+0x4e0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_OscConfig+0x47c>
 8005890:	2301      	movs	r3, #1
 8005892:	e038      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005894:	40023800 	.word	0x40023800
 8005898:	40007000 	.word	0x40007000
 800589c:	42470060 	.word	0x42470060
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_RCC_OscConfig+0x4ec>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d028      	beq.n	8005900 <HAL_RCC_OscConfig+0x4dc>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d121      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d11a      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058d6:	0192      	lsls	r2, r2, #6
 80058d8:	4293      	cmp	r3, r2
 80058da:	d111      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	061b      	lsls	r3, r3, #24
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x4e0>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005904:	2300      	movs	r3, #0
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_RCC_ClockConfig>:
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_ClockConfig+0x14>
 8005924:	2301      	movs	r3, #1
 8005926:	e0cc      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 8005928:	4b68      	ldr	r3, [pc, #416]	; (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d90c      	bls.n	8005950 <HAL_RCC_ClockConfig+0x3c>
 8005936:	4b65      	ldr	r3, [pc, #404]	; (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	4b63      	ldr	r3, [pc, #396]	; (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <HAL_RCC_ClockConfig+0x3c>
 800594c:	2301      	movs	r3, #1
 800594e:	e0b8      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_RCC_ClockConfig+0x8a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_RCC_ClockConfig+0x60>
 8005968:	4b59      	ldr	r3, [pc, #356]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4a58      	ldr	r2, [pc, #352]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005972:	6093      	str	r3, [r2, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCC_ClockConfig+0x78>
 8005980:	4b53      	ldr	r3, [pc, #332]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4a52      	ldr	r2, [pc, #328]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800598a:	6093      	str	r3, [r2, #8]
 800598c:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	494d      	ldr	r1, [pc, #308]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d044      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x120>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <HAL_RCC_ClockConfig+0xae>
 80059b2:	4b47      	ldr	r3, [pc, #284]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d119      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
 80059be:	2301      	movs	r3, #1
 80059c0:	e07f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d003      	beq.n	80059d2 <HAL_RCC_ClockConfig+0xbe>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d107      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xce>
 80059d2:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
 80059de:	2301      	movs	r3, #1
 80059e0:	e06f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 80059e2:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e067      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 80059f2:	4b37      	ldr	r3, [pc, #220]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 0203 	bic.w	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4934      	ldr	r1, [pc, #208]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	608b      	str	r3, [r1, #8]
 8005a04:	f7fd fcf4 	bl	80033f0 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_ClockConfig+0x10e>
 8005a0c:	f7fd fcf0 	bl	80033f0 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_ClockConfig+0x10e>
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 8005a22:	4b2b      	ldr	r3, [pc, #172]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 020c 	and.w	r2, r3, #12
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d1eb      	bne.n	8005a0c <HAL_RCC_ClockConfig+0xf8>
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d20c      	bcs.n	8005a5c <HAL_RCC_ClockConfig+0x148>
 8005a42:	4b22      	ldr	r3, [pc, #136]	; (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x148>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e032      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x166>
 8005a68:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4916      	ldr	r1, [pc, #88]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x186>
 8005a86:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	490e      	ldr	r1, [pc, #56]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
 8005a9a:	f000 f821 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	490a      	ldr	r1, [pc, #40]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005aac:	5ccb      	ldrb	r3, [r1, r3]
 8005aae:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fd fc54 	bl	8003368 <HAL_InitTick>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40023c00 	.word	0x40023c00
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	0800869c 	.word	0x0800869c
 8005ad8:	20000130 	.word	0x20000130
 8005adc:	20000134 	.word	0x20000134

08005ae0 <HAL_RCC_GetSysClockFreq>:
 8005ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae4:	b094      	sub	sp, #80	; 0x50
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	647b      	str	r3, [r7, #68]	; 0x44
 8005aec:	2300      	movs	r3, #0
 8005aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af0:	2300      	movs	r3, #0
 8005af2:	643b      	str	r3, [r7, #64]	; 0x40
 8005af4:	2300      	movs	r3, #0
 8005af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af8:	4b79      	ldr	r3, [pc, #484]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 030c 	and.w	r3, r3, #12
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d00d      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0x40>
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	f200 80e1 	bhi.w	8005ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x34>
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d003      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b12:	e0db      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b14:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b18:	e0db      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
 8005b1a:	4b72      	ldr	r3, [pc, #456]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b1e:	e0d8      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
 8005b20:	4b6f      	ldr	r3, [pc, #444]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b28:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2a:	4b6d      	ldr	r3, [pc, #436]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d063      	beq.n	8005bfe <HAL_RCC_GetSysClockFreq+0x11e>
 8005b36:	4b6a      	ldr	r3, [pc, #424]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	099b      	lsrs	r3, r3, #6
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b52:	4622      	mov	r2, r4
 8005b54:	462b      	mov	r3, r5
 8005b56:	f04f 0000 	mov.w	r0, #0
 8005b5a:	f04f 0100 	mov.w	r1, #0
 8005b5e:	0159      	lsls	r1, r3, #5
 8005b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b64:	0150      	lsls	r0, r2, #5
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	1a51      	subs	r1, r2, r1
 8005b6e:	6139      	str	r1, [r7, #16]
 8005b70:	4629      	mov	r1, r5
 8005b72:	eb63 0301 	sbc.w	r3, r3, r1
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b84:	4659      	mov	r1, fp
 8005b86:	018b      	lsls	r3, r1, #6
 8005b88:	4651      	mov	r1, sl
 8005b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b8e:	4651      	mov	r1, sl
 8005b90:	018a      	lsls	r2, r1, #6
 8005b92:	4651      	mov	r1, sl
 8005b94:	ebb2 0801 	subs.w	r8, r2, r1
 8005b98:	4659      	mov	r1, fp
 8005b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bb2:	4690      	mov	r8, r2
 8005bb4:	4699      	mov	r9, r3
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	eb18 0303 	adds.w	r3, r8, r3
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	462b      	mov	r3, r5
 8005bc0:	eb49 0303 	adc.w	r3, r9, r3
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	028b      	lsls	r3, r1, #10
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bdc:	4621      	mov	r1, r4
 8005bde:	028a      	lsls	r2, r1, #10
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be6:	2200      	movs	r2, #0
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bf0:	f7fa fb4e 	bl	8000290 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	e058      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x1d0>
 8005bfe:	4b38      	ldr	r3, [pc, #224]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	099b      	lsrs	r3, r3, #6
 8005c04:	2200      	movs	r2, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	4611      	mov	r1, r2
 8005c0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c0e:	623b      	str	r3, [r7, #32]
 8005c10:	2300      	movs	r3, #0
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
 8005c14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	f04f 0000 	mov.w	r0, #0
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	0159      	lsls	r1, r3, #5
 8005c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c2a:	0150      	lsls	r0, r2, #5
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4641      	mov	r1, r8
 8005c32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c36:	4649      	mov	r1, r9
 8005c38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c50:	ebb2 040a 	subs.w	r4, r2, sl
 8005c54:	eb63 050b 	sbc.w	r5, r3, fp
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	00eb      	lsls	r3, r5, #3
 8005c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c66:	00e2      	lsls	r2, r4, #3
 8005c68:	4614      	mov	r4, r2
 8005c6a:	461d      	mov	r5, r3
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	18e3      	adds	r3, r4, r3
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	464b      	mov	r3, r9
 8005c74:	eb45 0303 	adc.w	r3, r5, r3
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c86:	4629      	mov	r1, r5
 8005c88:	028b      	lsls	r3, r1, #10
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c90:	4621      	mov	r1, r4
 8005c92:	028a      	lsls	r2, r1, #10
 8005c94:	4610      	mov	r0, r2
 8005c96:	4619      	mov	r1, r3
 8005c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	61fa      	str	r2, [r7, #28]
 8005ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca4:	f7fa faf4 	bl	8000290 <__aeabi_uldivmod>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4613      	mov	r3, r2
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cca:	e002      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd0:	bf00      	nop
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3750      	adds	r7, #80	; 0x50
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	00f42400 	.word	0x00f42400

08005ce8 <HAL_RCC_GetHCLKFreq>:
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000130 	.word	0x20000130

08005d00 <HAL_RCC_GetPCLK1Freq>:
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	f7ff fff0 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	0a9b      	lsrs	r3, r3, #10
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4903      	ldr	r1, [pc, #12]	; (8005d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d16:	5ccb      	ldrb	r3, [r1, r3]
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40023800 	.word	0x40023800
 8005d24:	080086ac 	.word	0x080086ac

08005d28 <HAL_SPI_Init>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_SPI_Init+0x12>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e07b      	b.n	8005e32 <HAL_SPI_Init+0x10a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <HAL_SPI_Init+0x2c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d4a:	d009      	beq.n	8005d60 <HAL_SPI_Init+0x38>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	61da      	str	r2, [r3, #28]
 8005d52:	e005      	b.n	8005d60 <HAL_SPI_Init+0x38>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	611a      	str	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	615a      	str	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	629a      	str	r2, [r3, #40]	; 0x28
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_SPI_Init+0x58>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc fdf0 	bl	8002960 <HAL_SPI_MspInit>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	ea42 0103 	orr.w	r1, r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	f003 0104 	and.w	r1, r3, #4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0210 	and.w	r2, r3, #16
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e20:	61da      	str	r2, [r3, #28]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005e30:	2300      	movs	r3, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_SPI_Transmit>:
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b088      	sub	sp, #32
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	603b      	str	r3, [r7, #0]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_SPI_Transmit+0x22>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e126      	b.n	80060aa <HAL_SPI_Transmit+0x270>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005e64:	f7fd fac4 	bl	80033f0 <HAL_GetTick>
 8005e68:	61b8      	str	r0, [r7, #24]
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	82fb      	strh	r3, [r7, #22]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d002      	beq.n	8005e80 <HAL_SPI_Transmit+0x46>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e10b      	b.n	8006098 <HAL_SPI_Transmit+0x25e>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_SPI_Transmit+0x52>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <HAL_SPI_Transmit+0x58>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e102      	b.n	8006098 <HAL_SPI_Transmit+0x25e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2203      	movs	r2, #3
 8005e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	869a      	strh	r2, [r3, #52]	; 0x34
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	645a      	str	r2, [r3, #68]	; 0x44
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d10f      	bne.n	8005efa <HAL_SPI_Transmit+0xc0>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d007      	beq.n	8005f18 <HAL_SPI_Transmit+0xde>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f20:	d14b      	bne.n	8005fba <HAL_SPI_Transmit+0x180>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_Transmit+0xf6>
 8005f2a:	8afb      	ldrh	r3, [r7, #22]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d13e      	bne.n	8005fae <HAL_SPI_Transmit+0x174>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f54:	e02b      	b.n	8005fae <HAL_SPI_Transmit+0x174>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d112      	bne.n	8005f8a <HAL_SPI_Transmit+0x150>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	1c9a      	adds	r2, r3, #2
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f88:	e011      	b.n	8005fae <HAL_SPI_Transmit+0x174>
 8005f8a:	f7fd fa31 	bl	80033f0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d803      	bhi.n	8005fa2 <HAL_SPI_Transmit+0x168>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_Transmit+0x16e>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x174>
 8005fa8:	2303      	movs	r3, #3
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e074      	b.n	8006098 <HAL_SPI_Transmit+0x25e>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ce      	bne.n	8005f56 <HAL_SPI_Transmit+0x11c>
 8005fb8:	e04c      	b.n	8006054 <HAL_SPI_Transmit+0x21a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_Transmit+0x18e>
 8005fc2:	8afb      	ldrh	r3, [r7, #22]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d140      	bne.n	800604a <HAL_SPI_Transmit+0x210>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fee:	e02c      	b.n	800604a <HAL_SPI_Transmit+0x210>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d113      	bne.n	8006026 <HAL_SPI_Transmit+0x1ec>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	86da      	strh	r2, [r3, #54]	; 0x36
 8006024:	e011      	b.n	800604a <HAL_SPI_Transmit+0x210>
 8006026:	f7fd f9e3 	bl	80033f0 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d803      	bhi.n	800603e <HAL_SPI_Transmit+0x204>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d102      	bne.n	8006044 <HAL_SPI_Transmit+0x20a>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <HAL_SPI_Transmit+0x210>
 8006044:	2303      	movs	r3, #3
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e026      	b.n	8006098 <HAL_SPI_Transmit+0x25e>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1cd      	bne.n	8005ff0 <HAL_SPI_Transmit+0x1b6>
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fcdd 	bl	8006a18 <SPI_EndRxTxTransaction>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_SPI_Transmit+0x230>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <HAL_SPI_Transmit+0x24e>
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_SPI_Transmit+0x25c>
 8006090:	2301      	movs	r3, #1
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e000      	b.n	8006098 <HAL_SPI_Transmit+0x25e>
 8006096:	bf00      	nop
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80060a8:	7ffb      	ldrb	r3, [r7, #31]
 80060aa:	4618      	mov	r0, r3
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_SPI_Receive>:
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b088      	sub	sp, #32
 80060b6:	af02      	add	r7, sp, #8
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ce:	d112      	bne.n	80060f6 <HAL_SPI_Receive+0x44>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10e      	bne.n	80060f6 <HAL_SPI_Receive+0x44>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2204      	movs	r2, #4
 80060dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f8f1 	bl	80062d4 <HAL_SPI_TransmitReceive>
 80060f2:	4603      	mov	r3, r0
 80060f4:	e0ea      	b.n	80062cc <HAL_SPI_Receive+0x21a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_SPI_Receive+0x52>
 8006100:	2302      	movs	r3, #2
 8006102:	e0e3      	b.n	80062cc <HAL_SPI_Receive+0x21a>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800610c:	f7fd f970 	bl	80033f0 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Receive+0x72>
 800611e:	2302      	movs	r3, #2
 8006120:	75fb      	strb	r3, [r7, #23]
 8006122:	e0ca      	b.n	80062ba <HAL_SPI_Receive+0x208>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_SPI_Receive+0x7e>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <HAL_SPI_Receive+0x84>
 8006130:	2301      	movs	r3, #1
 8006132:	75fb      	strb	r3, [r7, #23]
 8006134:	e0c1      	b.n	80062ba <HAL_SPI_Receive+0x208>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2204      	movs	r2, #4
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	88fa      	ldrh	r2, [r7, #6]
 800614e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	869a      	strh	r2, [r3, #52]	; 0x34
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	86da      	strh	r2, [r3, #54]	; 0x36
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	645a      	str	r2, [r3, #68]	; 0x44
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617c:	d10f      	bne.n	800619e <HAL_SPI_Receive+0xec>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d007      	beq.n	80061bc <HAL_SPI_Receive+0x10a>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d162      	bne.n	800628a <HAL_SPI_Receive+0x1d8>
 80061c4:	e02e      	b.n	8006224 <HAL_SPI_Receive+0x172>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d115      	bne.n	8006200 <HAL_SPI_Receive+0x14e>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f103 020c 	add.w	r2, r3, #12
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061fe:	e011      	b.n	8006224 <HAL_SPI_Receive+0x172>
 8006200:	f7fd f8f6 	bl	80033f0 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d803      	bhi.n	8006218 <HAL_SPI_Receive+0x166>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d102      	bne.n	800621e <HAL_SPI_Receive+0x16c>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <HAL_SPI_Receive+0x172>
 800621e:	2303      	movs	r3, #3
 8006220:	75fb      	strb	r3, [r7, #23]
 8006222:	e04a      	b.n	80062ba <HAL_SPI_Receive+0x208>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1cb      	bne.n	80061c6 <HAL_SPI_Receive+0x114>
 800622e:	e031      	b.n	8006294 <HAL_SPI_Receive+0x1e2>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	d113      	bne.n	8006266 <HAL_SPI_Receive+0x1b4>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	b292      	uxth	r2, r2
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	1c9a      	adds	r2, r3, #2
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006264:	e011      	b.n	800628a <HAL_SPI_Receive+0x1d8>
 8006266:	f7fd f8c3 	bl	80033f0 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d803      	bhi.n	800627e <HAL_SPI_Receive+0x1cc>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d102      	bne.n	8006284 <HAL_SPI_Receive+0x1d2>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <HAL_SPI_Receive+0x1d8>
 8006284:	2303      	movs	r3, #3
 8006286:	75fb      	strb	r3, [r7, #23]
 8006288:	e017      	b.n	80062ba <HAL_SPI_Receive+0x208>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1cd      	bne.n	8006230 <HAL_SPI_Receive+0x17e>
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fb57 	bl	800694c <SPI_EndRxTransaction>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_Receive+0x1f8>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_Receive+0x206>
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
 80062b6:	e000      	b.n	80062ba <HAL_SPI_Receive+0x208>
 80062b8:	bf00      	nop
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_SPI_TransmitReceive>:
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	; 0x30
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	807b      	strh	r3, [r7, #2]
 80062e2:	2301      	movs	r3, #1
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x26>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e18a      	b.n	8006610 <HAL_SPI_TransmitReceive+0x33c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006302:	f7fd f875 	bl	80033f0 <HAL_GetTick>
 8006306:	6278      	str	r0, [r7, #36]	; 0x24
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	837b      	strh	r3, [r7, #26]
 800631c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006320:	2b01      	cmp	r3, #1
 8006322:	d00f      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x70>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632a:	d107      	bne.n	800633c <HAL_SPI_TransmitReceive+0x68>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <HAL_SPI_TransmitReceive+0x68>
 8006334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006338:	2b04      	cmp	r3, #4
 800633a:	d003      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x70>
 800633c:	2302      	movs	r3, #2
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006342:	e15b      	b.n	80065fc <HAL_SPI_TransmitReceive+0x328>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_SPI_TransmitReceive+0x82>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_SPI_TransmitReceive+0x82>
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <HAL_SPI_TransmitReceive+0x8a>
 8006356:	2301      	movs	r3, #1
 8006358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800635c:	e14e      	b.n	80065fc <HAL_SPI_TransmitReceive+0x328>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b04      	cmp	r3, #4
 8006368:	d003      	beq.n	8006372 <HAL_SPI_TransmitReceive+0x9e>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2205      	movs	r2, #5
 800636e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	887a      	ldrh	r2, [r7, #2]
 8006382:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	879a      	strh	r2, [r3, #60]	; 0x3c
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	86da      	strh	r2, [r3, #54]	; 0x36
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	887a      	ldrh	r2, [r7, #2]
 800639a:	869a      	strh	r2, [r3, #52]	; 0x34
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d007      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0xf2>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ce:	d178      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x1ee>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_SPI_TransmitReceive+0x10a>
 80063d8:	8b7b      	ldrh	r3, [r7, #26]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d166      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x1d8>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	1c9a      	adds	r2, r3, #2
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	86da      	strh	r2, [r3, #54]	; 0x36
 8006402:	e053      	b.n	80064ac <HAL_SPI_TransmitReceive+0x1d8>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d11b      	bne.n	800644a <HAL_SPI_TransmitReceive+0x176>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d016      	beq.n	800644a <HAL_SPI_TransmitReceive+0x176>
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d113      	bne.n	800644a <HAL_SPI_TransmitReceive+0x176>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	; 0x36
 8006446:	2300      	movs	r3, #0
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d119      	bne.n	800648c <HAL_SPI_TransmitReceive+0x1b8>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d014      	beq.n	800648c <HAL_SPI_TransmitReceive+0x1b8>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	b292      	uxth	r2, r2
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	1c9a      	adds	r2, r3, #2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006488:	2301      	movs	r3, #1
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648c:	f7fc ffb0 	bl	80033f0 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006498:	429a      	cmp	r2, r3
 800649a:	d807      	bhi.n	80064ac <HAL_SPI_TransmitReceive+0x1d8>
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d003      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x1d8>
 80064a4:	2303      	movs	r3, #3
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e0a7      	b.n	80065fc <HAL_SPI_TransmitReceive+0x328>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1a6      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x130>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1a1      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x130>
 80064c0:	e07c      	b.n	80065bc <HAL_SPI_TransmitReceive+0x2e8>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_TransmitReceive+0x1fc>
 80064ca:	8b7b      	ldrh	r3, [r7, #26]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d16b      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x2d4>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80064f6:	e057      	b.n	80065a8 <HAL_SPI_TransmitReceive+0x2d4>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d11c      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x26c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d017      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x26c>
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d114      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x26c>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	7812      	ldrb	r2, [r2, #0]
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	86da      	strh	r2, [r3, #54]	; 0x36
 800653c:	2300      	movs	r3, #0
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d119      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x2ae>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d014      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x2ae>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800657e:	2301      	movs	r3, #1
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006582:	f7fc ff35 	bl	80033f0 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658e:	429a      	cmp	r2, r3
 8006590:	d803      	bhi.n	800659a <HAL_SPI_TransmitReceive+0x2c6>
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x2cc>
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x2d4>
 80065a0:	2303      	movs	r3, #3
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e029      	b.n	80065fc <HAL_SPI_TransmitReceive+0x328>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1a2      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x224>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d19d      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x224>
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fa29 	bl	8006a18 <SPI_EndRxTxTransaction>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <HAL_SPI_TransmitReceive+0x306>
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
 80065d8:	e010      	b.n	80065fc <HAL_SPI_TransmitReceive+0x328>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <HAL_SPI_TransmitReceive+0x326>
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	e000      	b.n	80065fc <HAL_SPI_TransmitReceive+0x328>
 80065fa:	bf00      	nop
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800660c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006610:	4618      	mov	r0, r3
 8006612:	3730      	adds	r7, #48	; 0x30
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_SPI_IRQHandler>:
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10e      	bne.n	8006658 <HAL_SPI_IRQHandler+0x40>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <HAL_SPI_IRQHandler+0x40>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d004      	beq.n	8006658 <HAL_SPI_IRQHandler+0x40>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	e0ce      	b.n	80067f6 <HAL_SPI_IRQHandler+0x1de>
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_SPI_IRQHandler+0x5e>
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_SPI_IRQHandler+0x5e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
 8006674:	e0bf      	b.n	80067f6 <HAL_SPI_IRQHandler+0x1de>
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <HAL_SPI_IRQHandler+0x7e>
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <HAL_SPI_IRQHandler+0x7e>
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80b0 	beq.w	80067f6 <HAL_SPI_IRQHandler+0x1de>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80aa 	beq.w	80067f6 <HAL_SPI_IRQHandler+0x1de>
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d023      	beq.n	80066f4 <HAL_SPI_IRQHandler+0xdc>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d011      	beq.n	80066dc <HAL_SPI_IRQHandler+0xc4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066bc:	f043 0204 	orr.w	r2, r3, #4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	e00b      	b.n	80066f4 <HAL_SPI_IRQHandler+0xdc>
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	e080      	b.n	80067f6 <HAL_SPI_IRQHandler+0x1de>
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d014      	beq.n	8006728 <HAL_SPI_IRQHandler+0x110>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	f043 0201 	orr.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <HAL_SPI_IRQHandler+0x134>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f043 0208 	orr.w	r2, r3, #8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	2b00      	cmp	r3, #0
 8006752:	d04f      	beq.n	80067f4 <HAL_SPI_IRQHandler+0x1dc>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006762:	605a      	str	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <HAL_SPI_IRQHandler+0x168>
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d034      	beq.n	80067ea <HAL_SPI_IRQHandler+0x1d2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0203 	bic.w	r2, r2, #3
 800678e:	605a      	str	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d011      	beq.n	80067bc <HAL_SPI_IRQHandler+0x1a4>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_SPI_IRQHandler+0x1e4>)
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fd fd87 	bl	80042b8 <HAL_DMA_Abort_IT>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_SPI_IRQHandler+0x1a4>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d016      	beq.n	80067f2 <HAL_SPI_IRQHandler+0x1da>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c8:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <HAL_SPI_IRQHandler+0x1e4>)
 80067ca:	651a      	str	r2, [r3, #80]	; 0x50
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fd fd71 	bl	80042b8 <HAL_DMA_Abort_IT>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <HAL_SPI_IRQHandler+0x1da>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
 80067e8:	e003      	b.n	80067f2 <HAL_SPI_IRQHandler+0x1da>
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f808 	bl	8006800 <HAL_SPI_ErrorCallback>
 80067f0:	e000      	b.n	80067f4 <HAL_SPI_IRQHandler+0x1dc>
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	08006815 	.word	0x08006815

08006800 <HAL_SPI_ErrorCallback>:
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <SPI_DMAAbortOnError>:
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	86da      	strh	r2, [r3, #54]	; 0x36
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff ffe6 	bl	8006800 <HAL_SPI_ErrorCallback>
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <SPI_WaitFlagStateUntilTimeout>:
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	71fb      	strb	r3, [r7, #7]
 800684c:	f7fc fdd0 	bl	80033f0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	4413      	add	r3, r2
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	f7fc fdc8 	bl	80033f0 <HAL_GetTick>
 8006860:	61b8      	str	r0, [r7, #24]
 8006862:	4b39      	ldr	r3, [pc, #228]	; (8006948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	015b      	lsls	r3, r3, #5
 8006868:	0d1b      	lsrs	r3, r3, #20
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	fb02 f303 	mul.w	r3, r2, r3
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e054      	b.n	800691e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d050      	beq.n	800691e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800687c:	f7fc fdb8 	bl	80033f0 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	429a      	cmp	r2, r3
 800688a:	d902      	bls.n	8006892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d13d      	bne.n	800690e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068aa:	d111      	bne.n	80068d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b4:	d004      	beq.n	80068c0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068be:	d107      	bne.n	80068d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d8:	d10f      	bne.n	80068fa <SPI_WaitFlagStateUntilTimeout+0xbe>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800690a:	2303      	movs	r3, #3
 800690c:	e017      	b.n	800693e <SPI_WaitFlagStateUntilTimeout+0x102>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006914:	2300      	movs	r3, #0
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	3b01      	subs	r3, #1
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4013      	ands	r3, r2
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	bf0c      	ite	eq
 800692e:	2301      	moveq	r3, #1
 8006930:	2300      	movne	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	429a      	cmp	r2, r3
 800693a:	d19b      	bne.n	8006874 <SPI_WaitFlagStateUntilTimeout+0x38>
 800693c:	2300      	movs	r3, #0
 800693e:	4618      	mov	r0, r3
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000130 	.word	0x20000130

0800694c <SPI_EndRxTransaction>:
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006960:	d111      	bne.n	8006986 <SPI_EndRxTransaction+0x3a>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696a:	d004      	beq.n	8006976 <SPI_EndRxTransaction+0x2a>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d107      	bne.n	8006986 <SPI_EndRxTransaction+0x3a>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800698e:	d12a      	bne.n	80069e6 <SPI_EndRxTransaction+0x9a>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006998:	d012      	beq.n	80069c0 <SPI_EndRxTransaction+0x74>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2180      	movs	r1, #128	; 0x80
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff ff49 	bl	800683c <SPI_WaitFlagStateUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d02d      	beq.n	8006a0c <SPI_EndRxTransaction+0xc0>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	f043 0220 	orr.w	r2, r3, #32
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
 80069bc:	2303      	movs	r3, #3
 80069be:	e026      	b.n	8006a0e <SPI_EndRxTransaction+0xc2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	2101      	movs	r1, #1
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7ff ff36 	bl	800683c <SPI_WaitFlagStateUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01a      	beq.n	8006a0c <SPI_EndRxTransaction+0xc0>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54
 80069e2:	2303      	movs	r3, #3
 80069e4:	e013      	b.n	8006a0e <SPI_EndRxTransaction+0xc2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2101      	movs	r1, #1
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff ff23 	bl	800683c <SPI_WaitFlagStateUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <SPI_EndRxTransaction+0xc0>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e000      	b.n	8006a0e <SPI_EndRxTransaction+0xc2>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <SPI_EndRxTxTransaction>:
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <SPI_EndRxTxTransaction+0x7c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1b      	ldr	r2, [pc, #108]	; (8006a98 <SPI_EndRxTxTransaction+0x80>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	0d5b      	lsrs	r3, r3, #21
 8006a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a34:	fb02 f303 	mul.w	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a42:	d112      	bne.n	8006a6a <SPI_EndRxTxTransaction+0x52>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff fef4 	bl	800683c <SPI_WaitFlagStateUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <SPI_EndRxTxTransaction+0x70>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
 8006a66:	2303      	movs	r3, #3
 8006a68:	e00f      	b.n	8006a8a <SPI_EndRxTxTransaction+0x72>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <SPI_EndRxTxTransaction+0x6e>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d0f2      	beq.n	8006a6a <SPI_EndRxTxTransaction+0x52>
 8006a84:	e000      	b.n	8006a88 <SPI_EndRxTxTransaction+0x70>
 8006a86:	bf00      	nop
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000130 	.word	0x20000130
 8006a98:	165e9f81 	.word	0x165e9f81

08006a9c <HAL_TIM_Base_Init>:
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_Base_Init+0x12>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e041      	b.n	8006b32 <HAL_TIM_Base_Init+0x96>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_Base_Init+0x2c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fc fbdc 	bl	8003280 <HAL_TIM_Base_MspInit>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 faf6 	bl	80070cc <TIM_Base_SetConfig>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b30:	2300      	movs	r3, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_TIM_Base_Start>:
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d001      	beq.n	8006b54 <HAL_TIM_Base_Start+0x18>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e03c      	b.n	8006bce <HAL_TIM_Base_Start+0x92>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <HAL_TIM_Base_Start+0xa0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <HAL_TIM_Base_Start+0x5c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d013      	beq.n	8006b98 <HAL_TIM_Base_Start+0x5c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_TIM_Base_Start+0xa4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <HAL_TIM_Base_Start+0x5c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_TIM_Base_Start+0xa8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_TIM_Base_Start+0x5c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <HAL_TIM_Base_Start+0xac>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_TIM_Base_Start+0x5c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a16      	ldr	r2, [pc, #88]	; (8006bec <HAL_TIM_Base_Start+0xb0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d111      	bne.n	8006bbc <HAL_TIM_Base_Start+0x80>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d010      	beq.n	8006bcc <HAL_TIM_Base_Start+0x90>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e007      	b.n	8006bcc <HAL_TIM_Base_Start+0x90>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_TIM_Encoder_Init>:
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIM_Encoder_Init+0x14>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e097      	b.n	8006d34 <HAL_TIM_Encoder_Init+0x144>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_TIM_Encoder_Init+0x2e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fc fae9 	bl	80031f0 <HAL_TIM_Encoder_MspInit>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c34:	f023 0307 	bic.w	r3, r3, #7
 8006c38:	6093      	str	r3, [r2, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f000 fa41 	bl	80070cc <TIM_Base_SetConfig>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	4313      	orrs	r3, r2
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c90:	f023 030c 	bic.w	r3, r3, #12
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	4313      	orrs	r3, r2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	011a      	lsls	r2, r3, #4
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	031b      	lsls	r3, r3, #12
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	619a      	str	r2, [r3, #24]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d32:	2300      	movs	r3, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_TIM_Encoder_Start>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d54:	73bb      	strb	r3, [r7, #14]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d5c:	737b      	strb	r3, [r7, #13]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d64:	733b      	strb	r3, [r7, #12]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d110      	bne.n	8006d8e <HAL_TIM_Encoder_Start+0x52>
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d102      	bne.n	8006d78 <HAL_TIM_Encoder_Start+0x3c>
 8006d72:	7b7b      	ldrb	r3, [r7, #13]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d001      	beq.n	8006d7c <HAL_TIM_Encoder_Start+0x40>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e069      	b.n	8006e50 <HAL_TIM_Encoder_Start+0x114>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d8c:	e031      	b.n	8006df2 <HAL_TIM_Encoder_Start+0xb6>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d110      	bne.n	8006db6 <HAL_TIM_Encoder_Start+0x7a>
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d102      	bne.n	8006da0 <HAL_TIM_Encoder_Start+0x64>
 8006d9a:	7b3b      	ldrb	r3, [r7, #12]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d001      	beq.n	8006da4 <HAL_TIM_Encoder_Start+0x68>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e055      	b.n	8006e50 <HAL_TIM_Encoder_Start+0x114>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006db4:	e01d      	b.n	8006df2 <HAL_TIM_Encoder_Start+0xb6>
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d108      	bne.n	8006dce <HAL_TIM_Encoder_Start+0x92>
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d105      	bne.n	8006dce <HAL_TIM_Encoder_Start+0x92>
 8006dc2:	7b7b      	ldrb	r3, [r7, #13]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d102      	bne.n	8006dce <HAL_TIM_Encoder_Start+0x92>
 8006dc8:	7b3b      	ldrb	r3, [r7, #12]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d001      	beq.n	8006dd2 <HAL_TIM_Encoder_Start+0x96>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e03e      	b.n	8006e50 <HAL_TIM_Encoder_Start+0x114>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2202      	movs	r2, #2
 8006dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_TIM_Encoder_Start+0xc4>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d008      	beq.n	8006e10 <HAL_TIM_Encoder_Start+0xd4>
 8006dfe:	e00f      	b.n	8006e20 <HAL_TIM_Encoder_Start+0xe4>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2201      	movs	r2, #1
 8006e06:	2100      	movs	r1, #0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f9df 	bl	80071cc <TIM_CCxChannelCmd>
 8006e0e:	e016      	b.n	8006e3e <HAL_TIM_Encoder_Start+0x102>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2201      	movs	r2, #1
 8006e16:	2104      	movs	r1, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f9d7 	bl	80071cc <TIM_CCxChannelCmd>
 8006e1e:	e00e      	b.n	8006e3e <HAL_TIM_Encoder_Start+0x102>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2201      	movs	r2, #1
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f9cf 	bl	80071cc <TIM_CCxChannelCmd>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2201      	movs	r2, #1
 8006e34:	2104      	movs	r1, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f9c8 	bl	80071cc <TIM_CCxChannelCmd>
 8006e3c:	bf00      	nop
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0201 	orr.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_IRQHandler>:
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0202 	mvn.w	r2, #2
 8006e84:	611a      	str	r2, [r3, #16]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	771a      	strb	r2, [r3, #28]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x4a>
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8f8 	bl	8007090 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x56>
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8ea 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8fb 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0204 	mvn.w	r2, #4
 8006ed8:	611a      	str	r2, [r3, #16]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	771a      	strb	r2, [r3, #28]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x9e>
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f8ce 	bl	8007090 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0xaa>
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8c0 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8d1 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0208 	mvn.w	r2, #8
 8006f2c:	611a      	str	r2, [r3, #16]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	771a      	strb	r2, [r3, #28]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0xf2>
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8a4 	bl	8007090 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xfe>
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f896 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8a7 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0210 	mvn.w	r2, #16
 8006f80:	611a      	str	r2, [r3, #16]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2208      	movs	r2, #8
 8006f86:	771a      	strb	r2, [r3, #28]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x146>
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f87a 	bl	8007090 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0x152>
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f86c 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f87d 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10e      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0201 	mvn.w	r2, #1
 8006fd4:	611a      	str	r2, [r3, #16]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f846 	bl	8007068 <HAL_TIM_PeriodElapsedCallback>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d10e      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d107      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007000:	611a      	str	r2, [r3, #16]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f980 	bl	8007308 <HAL_TIMEx_BreakCallback>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d10e      	bne.n	8007034 <HAL_TIM_IRQHandler+0x1dc>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d107      	bne.n	8007034 <HAL_TIM_IRQHandler+0x1dc>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800702c:	611a      	str	r2, [r3, #16]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f842 	bl	80070b8 <HAL_TIM_TriggerCallback>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b20      	cmp	r3, #32
 8007040:	d10e      	bne.n	8007060 <HAL_TIM_IRQHandler+0x208>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b20      	cmp	r3, #32
 800704e:	d107      	bne.n	8007060 <HAL_TIM_IRQHandler+0x208>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0220 	mvn.w	r2, #32
 8007058:	611a      	str	r2, [r3, #16]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f94a 	bl	80072f4 <HAL_TIMEx_CommutCallback>
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_PeriodElapsedCallback>:
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_OC_DelayElapsedCallback>:
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIM_IC_CaptureCallback>:
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_TriggerCallback>:
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <TIM_Base_SetConfig>:
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a34      	ldr	r2, [pc, #208]	; (80071b0 <TIM_Base_SetConfig+0xe4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00f      	beq.n	8007104 <TIM_Base_SetConfig+0x38>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ea:	d00b      	beq.n	8007104 <TIM_Base_SetConfig+0x38>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a31      	ldr	r2, [pc, #196]	; (80071b4 <TIM_Base_SetConfig+0xe8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_Base_SetConfig+0x38>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a30      	ldr	r2, [pc, #192]	; (80071b8 <TIM_Base_SetConfig+0xec>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0x38>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <TIM_Base_SetConfig+0xf0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d108      	bne.n	8007116 <TIM_Base_SetConfig+0x4a>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <TIM_Base_SetConfig+0xe4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d01b      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007124:	d017      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a22      	ldr	r2, [pc, #136]	; (80071b4 <TIM_Base_SetConfig+0xe8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a21      	ldr	r2, [pc, #132]	; (80071b8 <TIM_Base_SetConfig+0xec>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a20      	ldr	r2, [pc, #128]	; (80071bc <TIM_Base_SetConfig+0xf0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <TIM_Base_SetConfig+0xf4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a1e      	ldr	r2, [pc, #120]	; (80071c4 <TIM_Base_SetConfig+0xf8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_Base_SetConfig+0x8a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a1d      	ldr	r2, [pc, #116]	; (80071c8 <TIM_Base_SetConfig+0xfc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d108      	bne.n	8007168 <TIM_Base_SetConfig+0x9c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	62da      	str	r2, [r3, #44]	; 0x2c
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	629a      	str	r2, [r3, #40]	; 0x28
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <TIM_Base_SetConfig+0xe4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d103      	bne.n	800719c <TIM_Base_SetConfig+0xd0>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	631a      	str	r2, [r3, #48]	; 0x30
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	615a      	str	r2, [r3, #20]
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40014000 	.word	0x40014000
 80071c4:	40014400 	.word	0x40014400
 80071c8:	40014800 	.word	0x40014800

080071cc <TIM_CCxChannelCmd>:
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2201      	movs	r2, #1
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	43db      	mvns	r3, r3
 80071ee:	401a      	ands	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1a      	ldr	r2, [r3, #32]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	fa01 f303 	lsl.w	r3, r1, r3
 8007204:	431a      	orrs	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	621a      	str	r2, [r3, #32]
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
	...

08007218 <HAL_TIMEx_MasterConfigSynchronization>:
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800722c:	2302      	movs	r3, #2
 800722e:	e050      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d013      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a18      	ldr	r2, [pc, #96]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a16      	ldr	r2, [pc, #88]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a15      	ldr	r2, [pc, #84]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072d0:	2300      	movs	r3, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40014000 	.word	0x40014000

080072f4 <HAL_TIMEx_CommutCallback>:
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_BreakCallback>:
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <std>:
 800731c:	2300      	movs	r3, #0
 800731e:	b510      	push	{r4, lr}
 8007320:	4604      	mov	r4, r0
 8007322:	e9c0 3300 	strd	r3, r3, [r0]
 8007326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800732a:	6083      	str	r3, [r0, #8]
 800732c:	8181      	strh	r1, [r0, #12]
 800732e:	6643      	str	r3, [r0, #100]	; 0x64
 8007330:	81c2      	strh	r2, [r0, #14]
 8007332:	6183      	str	r3, [r0, #24]
 8007334:	4619      	mov	r1, r3
 8007336:	2208      	movs	r2, #8
 8007338:	305c      	adds	r0, #92	; 0x5c
 800733a:	f000 fa05 	bl	8007748 <memset>
 800733e:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <std+0x58>)
 8007340:	6263      	str	r3, [r4, #36]	; 0x24
 8007342:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <std+0x5c>)
 8007344:	62a3      	str	r3, [r4, #40]	; 0x28
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <std+0x60>)
 8007348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <std+0x64>)
 800734c:	6323      	str	r3, [r4, #48]	; 0x30
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <std+0x68>)
 8007350:	6224      	str	r4, [r4, #32]
 8007352:	429c      	cmp	r4, r3
 8007354:	d006      	beq.n	8007364 <std+0x48>
 8007356:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800735a:	4294      	cmp	r4, r2
 800735c:	d002      	beq.n	8007364 <std+0x48>
 800735e:	33d0      	adds	r3, #208	; 0xd0
 8007360:	429c      	cmp	r4, r3
 8007362:	d105      	bne.n	8007370 <std+0x54>
 8007364:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736c:	f000 ba64 	b.w	8007838 <__retarget_lock_init_recursive>
 8007370:	bd10      	pop	{r4, pc}
 8007372:	bf00      	nop
 8007374:	08007599 	.word	0x08007599
 8007378:	080075bb 	.word	0x080075bb
 800737c:	080075f3 	.word	0x080075f3
 8007380:	08007617 	.word	0x08007617
 8007384:	200009a4 	.word	0x200009a4

08007388 <stdio_exit_handler>:
 8007388:	4a02      	ldr	r2, [pc, #8]	; (8007394 <stdio_exit_handler+0xc>)
 800738a:	4903      	ldr	r1, [pc, #12]	; (8007398 <stdio_exit_handler+0x10>)
 800738c:	4803      	ldr	r0, [pc, #12]	; (800739c <stdio_exit_handler+0x14>)
 800738e:	f000 b869 	b.w	8007464 <_fwalk_sglue>
 8007392:	bf00      	nop
 8007394:	2000013c 	.word	0x2000013c
 8007398:	0800810d 	.word	0x0800810d
 800739c:	20000148 	.word	0x20000148

080073a0 <cleanup_stdio>:
 80073a0:	6841      	ldr	r1, [r0, #4]
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <cleanup_stdio+0x34>)
 80073a4:	4299      	cmp	r1, r3
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4604      	mov	r4, r0
 80073aa:	d001      	beq.n	80073b0 <cleanup_stdio+0x10>
 80073ac:	f000 feae 	bl	800810c <_fflush_r>
 80073b0:	68a1      	ldr	r1, [r4, #8]
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <cleanup_stdio+0x38>)
 80073b4:	4299      	cmp	r1, r3
 80073b6:	d002      	beq.n	80073be <cleanup_stdio+0x1e>
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fea7 	bl	800810c <_fflush_r>
 80073be:	68e1      	ldr	r1, [r4, #12]
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <cleanup_stdio+0x3c>)
 80073c2:	4299      	cmp	r1, r3
 80073c4:	d004      	beq.n	80073d0 <cleanup_stdio+0x30>
 80073c6:	4620      	mov	r0, r4
 80073c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073cc:	f000 be9e 	b.w	800810c <_fflush_r>
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop
 80073d4:	200009a4 	.word	0x200009a4
 80073d8:	20000a0c 	.word	0x20000a0c
 80073dc:	20000a74 	.word	0x20000a74

080073e0 <global_stdio_init.part.0>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <global_stdio_init.part.0+0x30>)
 80073e4:	4c0b      	ldr	r4, [pc, #44]	; (8007414 <global_stdio_init.part.0+0x34>)
 80073e6:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <global_stdio_init.part.0+0x38>)
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	4620      	mov	r0, r4
 80073ec:	2200      	movs	r2, #0
 80073ee:	2104      	movs	r1, #4
 80073f0:	f7ff ff94 	bl	800731c <std>
 80073f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073f8:	2201      	movs	r2, #1
 80073fa:	2109      	movs	r1, #9
 80073fc:	f7ff ff8e 	bl	800731c <std>
 8007400:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007404:	2202      	movs	r2, #2
 8007406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740a:	2112      	movs	r1, #18
 800740c:	f7ff bf86 	b.w	800731c <std>
 8007410:	20000adc 	.word	0x20000adc
 8007414:	200009a4 	.word	0x200009a4
 8007418:	08007389 	.word	0x08007389

0800741c <__sfp_lock_acquire>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__sfp_lock_acquire+0x8>)
 800741e:	f000 ba0c 	b.w	800783a <__retarget_lock_acquire_recursive>
 8007422:	bf00      	nop
 8007424:	20000ae5 	.word	0x20000ae5

08007428 <__sfp_lock_release>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__sfp_lock_release+0x8>)
 800742a:	f000 ba07 	b.w	800783c <__retarget_lock_release_recursive>
 800742e:	bf00      	nop
 8007430:	20000ae5 	.word	0x20000ae5

08007434 <__sinit>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4604      	mov	r4, r0
 8007438:	f7ff fff0 	bl	800741c <__sfp_lock_acquire>
 800743c:	6a23      	ldr	r3, [r4, #32]
 800743e:	b11b      	cbz	r3, 8007448 <__sinit+0x14>
 8007440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007444:	f7ff bff0 	b.w	8007428 <__sfp_lock_release>
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <__sinit+0x28>)
 800744a:	6223      	str	r3, [r4, #32]
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <__sinit+0x2c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f5      	bne.n	8007440 <__sinit+0xc>
 8007454:	f7ff ffc4 	bl	80073e0 <global_stdio_init.part.0>
 8007458:	e7f2      	b.n	8007440 <__sinit+0xc>
 800745a:	bf00      	nop
 800745c:	080073a1 	.word	0x080073a1
 8007460:	20000adc 	.word	0x20000adc

08007464 <_fwalk_sglue>:
 8007464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007468:	4607      	mov	r7, r0
 800746a:	4688      	mov	r8, r1
 800746c:	4614      	mov	r4, r2
 800746e:	2600      	movs	r6, #0
 8007470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007474:	f1b9 0901 	subs.w	r9, r9, #1
 8007478:	d505      	bpl.n	8007486 <_fwalk_sglue+0x22>
 800747a:	6824      	ldr	r4, [r4, #0]
 800747c:	2c00      	cmp	r4, #0
 800747e:	d1f7      	bne.n	8007470 <_fwalk_sglue+0xc>
 8007480:	4630      	mov	r0, r6
 8007482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007486:	89ab      	ldrh	r3, [r5, #12]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d907      	bls.n	800749c <_fwalk_sglue+0x38>
 800748c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007490:	3301      	adds	r3, #1
 8007492:	d003      	beq.n	800749c <_fwalk_sglue+0x38>
 8007494:	4629      	mov	r1, r5
 8007496:	4638      	mov	r0, r7
 8007498:	47c0      	blx	r8
 800749a:	4306      	orrs	r6, r0
 800749c:	3568      	adds	r5, #104	; 0x68
 800749e:	e7e9      	b.n	8007474 <_fwalk_sglue+0x10>

080074a0 <_puts_r>:
 80074a0:	6a03      	ldr	r3, [r0, #32]
 80074a2:	b570      	push	{r4, r5, r6, lr}
 80074a4:	6884      	ldr	r4, [r0, #8]
 80074a6:	4605      	mov	r5, r0
 80074a8:	460e      	mov	r6, r1
 80074aa:	b90b      	cbnz	r3, 80074b0 <_puts_r+0x10>
 80074ac:	f7ff ffc2 	bl	8007434 <__sinit>
 80074b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074b2:	07db      	lsls	r3, r3, #31
 80074b4:	d405      	bmi.n	80074c2 <_puts_r+0x22>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	0598      	lsls	r0, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_puts_r+0x22>
 80074bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074be:	f000 f9bc 	bl	800783a <__retarget_lock_acquire_recursive>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	0719      	lsls	r1, r3, #28
 80074c6:	d513      	bpl.n	80074f0 <_puts_r+0x50>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	b18b      	cbz	r3, 80074f0 <_puts_r+0x50>
 80074cc:	3e01      	subs	r6, #1
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074d4:	3b01      	subs	r3, #1
 80074d6:	60a3      	str	r3, [r4, #8]
 80074d8:	b9e9      	cbnz	r1, 8007516 <_puts_r+0x76>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da2e      	bge.n	800753c <_puts_r+0x9c>
 80074de:	4622      	mov	r2, r4
 80074e0:	210a      	movs	r1, #10
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 f89b 	bl	800761e <__swbuf_r>
 80074e8:	3001      	adds	r0, #1
 80074ea:	d007      	beq.n	80074fc <_puts_r+0x5c>
 80074ec:	250a      	movs	r5, #10
 80074ee:	e007      	b.n	8007500 <_puts_r+0x60>
 80074f0:	4621      	mov	r1, r4
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 f8d0 	bl	8007698 <__swsetup_r>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d0e7      	beq.n	80074cc <_puts_r+0x2c>
 80074fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007502:	07da      	lsls	r2, r3, #31
 8007504:	d405      	bmi.n	8007512 <_puts_r+0x72>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	059b      	lsls	r3, r3, #22
 800750a:	d402      	bmi.n	8007512 <_puts_r+0x72>
 800750c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750e:	f000 f995 	bl	800783c <__retarget_lock_release_recursive>
 8007512:	4628      	mov	r0, r5
 8007514:	bd70      	pop	{r4, r5, r6, pc}
 8007516:	2b00      	cmp	r3, #0
 8007518:	da04      	bge.n	8007524 <_puts_r+0x84>
 800751a:	69a2      	ldr	r2, [r4, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	dc06      	bgt.n	800752e <_puts_r+0x8e>
 8007520:	290a      	cmp	r1, #10
 8007522:	d004      	beq.n	800752e <_puts_r+0x8e>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	7019      	strb	r1, [r3, #0]
 800752c:	e7cf      	b.n	80074ce <_puts_r+0x2e>
 800752e:	4622      	mov	r2, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 f874 	bl	800761e <__swbuf_r>
 8007536:	3001      	adds	r0, #1
 8007538:	d1c9      	bne.n	80074ce <_puts_r+0x2e>
 800753a:	e7df      	b.n	80074fc <_puts_r+0x5c>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	250a      	movs	r5, #10
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	701d      	strb	r5, [r3, #0]
 8007546:	e7db      	b.n	8007500 <_puts_r+0x60>

08007548 <puts>:
 8007548:	4b02      	ldr	r3, [pc, #8]	; (8007554 <puts+0xc>)
 800754a:	4601      	mov	r1, r0
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	f7ff bfa7 	b.w	80074a0 <_puts_r>
 8007552:	bf00      	nop
 8007554:	20000194 	.word	0x20000194

08007558 <siprintf>:
 8007558:	b40e      	push	{r1, r2, r3}
 800755a:	b500      	push	{lr}
 800755c:	b09c      	sub	sp, #112	; 0x70
 800755e:	ab1d      	add	r3, sp, #116	; 0x74
 8007560:	9002      	str	r0, [sp, #8]
 8007562:	9006      	str	r0, [sp, #24]
 8007564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007568:	4809      	ldr	r0, [pc, #36]	; (8007590 <siprintf+0x38>)
 800756a:	9107      	str	r1, [sp, #28]
 800756c:	9104      	str	r1, [sp, #16]
 800756e:	4909      	ldr	r1, [pc, #36]	; (8007594 <siprintf+0x3c>)
 8007570:	f853 2b04 	ldr.w	r2, [r3], #4
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	a902      	add	r1, sp, #8
 800757c:	f000 fab2 	bl	8007ae4 <_svfiprintf_r>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	b01c      	add	sp, #112	; 0x70
 8007588:	f85d eb04 	ldr.w	lr, [sp], #4
 800758c:	b003      	add	sp, #12
 800758e:	4770      	bx	lr
 8007590:	20000194 	.word	0x20000194
 8007594:	ffff0208 	.word	0xffff0208

08007598 <__sread>:
 8007598:	b510      	push	{r4, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	f000 f8fc 	bl	800779c <_read_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	bfab      	itete	ge
 80075a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075aa:	89a3      	ldrhlt	r3, [r4, #12]
 80075ac:	181b      	addge	r3, r3, r0
 80075ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075b2:	bfac      	ite	ge
 80075b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075b6:	81a3      	strhlt	r3, [r4, #12]
 80075b8:	bd10      	pop	{r4, pc}

080075ba <__swrite>:
 80075ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	461f      	mov	r7, r3
 80075c0:	898b      	ldrh	r3, [r1, #12]
 80075c2:	05db      	lsls	r3, r3, #23
 80075c4:	4605      	mov	r5, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	4616      	mov	r6, r2
 80075ca:	d505      	bpl.n	80075d8 <__swrite+0x1e>
 80075cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d0:	2302      	movs	r3, #2
 80075d2:	2200      	movs	r2, #0
 80075d4:	f000 f8d0 	bl	8007778 <_lseek_r>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	4628      	mov	r0, r5
 80075ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ee:	f000 b8e7 	b.w	80077c0 <_write_r>

080075f2 <__sseek>:
 80075f2:	b510      	push	{r4, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	f000 f8bd 	bl	8007778 <_lseek_r>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	bf15      	itete	ne
 8007604:	6560      	strne	r0, [r4, #84]	; 0x54
 8007606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800760a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800760e:	81a3      	strheq	r3, [r4, #12]
 8007610:	bf18      	it	ne
 8007612:	81a3      	strhne	r3, [r4, #12]
 8007614:	bd10      	pop	{r4, pc}

08007616 <__sclose>:
 8007616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761a:	f000 b89d 	b.w	8007758 <_close_r>

0800761e <__swbuf_r>:
 800761e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007620:	460e      	mov	r6, r1
 8007622:	4614      	mov	r4, r2
 8007624:	4605      	mov	r5, r0
 8007626:	b118      	cbz	r0, 8007630 <__swbuf_r+0x12>
 8007628:	6a03      	ldr	r3, [r0, #32]
 800762a:	b90b      	cbnz	r3, 8007630 <__swbuf_r+0x12>
 800762c:	f7ff ff02 	bl	8007434 <__sinit>
 8007630:	69a3      	ldr	r3, [r4, #24]
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	071a      	lsls	r2, r3, #28
 8007638:	d525      	bpl.n	8007686 <__swbuf_r+0x68>
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	b31b      	cbz	r3, 8007686 <__swbuf_r+0x68>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	6922      	ldr	r2, [r4, #16]
 8007642:	1a98      	subs	r0, r3, r2
 8007644:	6963      	ldr	r3, [r4, #20]
 8007646:	b2f6      	uxtb	r6, r6
 8007648:	4283      	cmp	r3, r0
 800764a:	4637      	mov	r7, r6
 800764c:	dc04      	bgt.n	8007658 <__swbuf_r+0x3a>
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 fd5b 	bl	800810c <_fflush_r>
 8007656:	b9e0      	cbnz	r0, 8007692 <__swbuf_r+0x74>
 8007658:	68a3      	ldr	r3, [r4, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	60a3      	str	r3, [r4, #8]
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	701e      	strb	r6, [r3, #0]
 8007666:	6962      	ldr	r2, [r4, #20]
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	429a      	cmp	r2, r3
 800766c:	d004      	beq.n	8007678 <__swbuf_r+0x5a>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	07db      	lsls	r3, r3, #31
 8007672:	d506      	bpl.n	8007682 <__swbuf_r+0x64>
 8007674:	2e0a      	cmp	r6, #10
 8007676:	d104      	bne.n	8007682 <__swbuf_r+0x64>
 8007678:	4621      	mov	r1, r4
 800767a:	4628      	mov	r0, r5
 800767c:	f000 fd46 	bl	800810c <_fflush_r>
 8007680:	b938      	cbnz	r0, 8007692 <__swbuf_r+0x74>
 8007682:	4638      	mov	r0, r7
 8007684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007686:	4621      	mov	r1, r4
 8007688:	4628      	mov	r0, r5
 800768a:	f000 f805 	bl	8007698 <__swsetup_r>
 800768e:	2800      	cmp	r0, #0
 8007690:	d0d5      	beq.n	800763e <__swbuf_r+0x20>
 8007692:	f04f 37ff 	mov.w	r7, #4294967295
 8007696:	e7f4      	b.n	8007682 <__swbuf_r+0x64>

08007698 <__swsetup_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4b2a      	ldr	r3, [pc, #168]	; (8007744 <__swsetup_r+0xac>)
 800769c:	4605      	mov	r5, r0
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	460c      	mov	r4, r1
 80076a2:	b118      	cbz	r0, 80076ac <__swsetup_r+0x14>
 80076a4:	6a03      	ldr	r3, [r0, #32]
 80076a6:	b90b      	cbnz	r3, 80076ac <__swsetup_r+0x14>
 80076a8:	f7ff fec4 	bl	8007434 <__sinit>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076b2:	0718      	lsls	r0, r3, #28
 80076b4:	d422      	bmi.n	80076fc <__swsetup_r+0x64>
 80076b6:	06d9      	lsls	r1, r3, #27
 80076b8:	d407      	bmi.n	80076ca <__swsetup_r+0x32>
 80076ba:	2309      	movs	r3, #9
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	e034      	b.n	8007734 <__swsetup_r+0x9c>
 80076ca:	0758      	lsls	r0, r3, #29
 80076cc:	d512      	bpl.n	80076f4 <__swsetup_r+0x5c>
 80076ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d0:	b141      	cbz	r1, 80076e4 <__swsetup_r+0x4c>
 80076d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d6:	4299      	cmp	r1, r3
 80076d8:	d002      	beq.n	80076e0 <__swsetup_r+0x48>
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 f8b0 	bl	8007840 <_free_r>
 80076e0:	2300      	movs	r3, #0
 80076e2:	6363      	str	r3, [r4, #52]	; 0x34
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	2300      	movs	r3, #0
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f043 0308 	orr.w	r3, r3, #8
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	b94b      	cbnz	r3, 8007714 <__swsetup_r+0x7c>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770a:	d003      	beq.n	8007714 <__swsetup_r+0x7c>
 800770c:	4621      	mov	r1, r4
 800770e:	4628      	mov	r0, r5
 8007710:	f000 fd4a 	bl	80081a8 <__smakebuf_r>
 8007714:	89a0      	ldrh	r0, [r4, #12]
 8007716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800771a:	f010 0301 	ands.w	r3, r0, #1
 800771e:	d00a      	beq.n	8007736 <__swsetup_r+0x9e>
 8007720:	2300      	movs	r3, #0
 8007722:	60a3      	str	r3, [r4, #8]
 8007724:	6963      	ldr	r3, [r4, #20]
 8007726:	425b      	negs	r3, r3
 8007728:	61a3      	str	r3, [r4, #24]
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	b943      	cbnz	r3, 8007740 <__swsetup_r+0xa8>
 800772e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007732:	d1c4      	bne.n	80076be <__swsetup_r+0x26>
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	0781      	lsls	r1, r0, #30
 8007738:	bf58      	it	pl
 800773a:	6963      	ldrpl	r3, [r4, #20]
 800773c:	60a3      	str	r3, [r4, #8]
 800773e:	e7f4      	b.n	800772a <__swsetup_r+0x92>
 8007740:	2000      	movs	r0, #0
 8007742:	e7f7      	b.n	8007734 <__swsetup_r+0x9c>
 8007744:	20000194 	.word	0x20000194

08007748 <memset>:
 8007748:	4402      	add	r2, r0
 800774a:	4603      	mov	r3, r0
 800774c:	4293      	cmp	r3, r2
 800774e:	d100      	bne.n	8007752 <memset+0xa>
 8007750:	4770      	bx	lr
 8007752:	f803 1b01 	strb.w	r1, [r3], #1
 8007756:	e7f9      	b.n	800774c <memset+0x4>

08007758 <_close_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d06      	ldr	r5, [pc, #24]	; (8007774 <_close_r+0x1c>)
 800775c:	2300      	movs	r3, #0
 800775e:	4604      	mov	r4, r0
 8007760:	4608      	mov	r0, r1
 8007762:	602b      	str	r3, [r5, #0]
 8007764:	f7fb fc4f 	bl	8003006 <_close>
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	d102      	bne.n	8007772 <_close_r+0x1a>
 800776c:	682b      	ldr	r3, [r5, #0]
 800776e:	b103      	cbz	r3, 8007772 <_close_r+0x1a>
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	20000ae0 	.word	0x20000ae0

08007778 <_lseek_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4d07      	ldr	r5, [pc, #28]	; (8007798 <_lseek_r+0x20>)
 800777c:	4604      	mov	r4, r0
 800777e:	4608      	mov	r0, r1
 8007780:	4611      	mov	r1, r2
 8007782:	2200      	movs	r2, #0
 8007784:	602a      	str	r2, [r5, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	f7fb fc64 	bl	8003054 <_lseek>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_lseek_r+0x1e>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_lseek_r+0x1e>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	20000ae0 	.word	0x20000ae0

0800779c <_read_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4d07      	ldr	r5, [pc, #28]	; (80077bc <_read_r+0x20>)
 80077a0:	4604      	mov	r4, r0
 80077a2:	4608      	mov	r0, r1
 80077a4:	4611      	mov	r1, r2
 80077a6:	2200      	movs	r2, #0
 80077a8:	602a      	str	r2, [r5, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	f7fb fbf2 	bl	8002f94 <_read>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_read_r+0x1e>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_read_r+0x1e>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	20000ae0 	.word	0x20000ae0

080077c0 <_write_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d07      	ldr	r5, [pc, #28]	; (80077e0 <_write_r+0x20>)
 80077c4:	4604      	mov	r4, r0
 80077c6:	4608      	mov	r0, r1
 80077c8:	4611      	mov	r1, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	602a      	str	r2, [r5, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f7fb fbfd 	bl	8002fce <_write>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_write_r+0x1e>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_write_r+0x1e>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20000ae0 	.word	0x20000ae0

080077e4 <__errno>:
 80077e4:	4b01      	ldr	r3, [pc, #4]	; (80077ec <__errno+0x8>)
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20000194 	.word	0x20000194

080077f0 <__libc_init_array>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	4d0d      	ldr	r5, [pc, #52]	; (8007828 <__libc_init_array+0x38>)
 80077f4:	4c0d      	ldr	r4, [pc, #52]	; (800782c <__libc_init_array+0x3c>)
 80077f6:	1b64      	subs	r4, r4, r5
 80077f8:	10a4      	asrs	r4, r4, #2
 80077fa:	2600      	movs	r6, #0
 80077fc:	42a6      	cmp	r6, r4
 80077fe:	d109      	bne.n	8007814 <__libc_init_array+0x24>
 8007800:	4d0b      	ldr	r5, [pc, #44]	; (8007830 <__libc_init_array+0x40>)
 8007802:	4c0c      	ldr	r4, [pc, #48]	; (8007834 <__libc_init_array+0x44>)
 8007804:	f000 fd9e 	bl	8008344 <_init>
 8007808:	1b64      	subs	r4, r4, r5
 800780a:	10a4      	asrs	r4, r4, #2
 800780c:	2600      	movs	r6, #0
 800780e:	42a6      	cmp	r6, r4
 8007810:	d105      	bne.n	800781e <__libc_init_array+0x2e>
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	f855 3b04 	ldr.w	r3, [r5], #4
 8007818:	4798      	blx	r3
 800781a:	3601      	adds	r6, #1
 800781c:	e7ee      	b.n	80077fc <__libc_init_array+0xc>
 800781e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007822:	4798      	blx	r3
 8007824:	3601      	adds	r6, #1
 8007826:	e7f2      	b.n	800780e <__libc_init_array+0x1e>
 8007828:	080086f8 	.word	0x080086f8
 800782c:	080086f8 	.word	0x080086f8
 8007830:	080086f8 	.word	0x080086f8
 8007834:	080086fc 	.word	0x080086fc

08007838 <__retarget_lock_init_recursive>:
 8007838:	4770      	bx	lr

0800783a <__retarget_lock_acquire_recursive>:
 800783a:	4770      	bx	lr

0800783c <__retarget_lock_release_recursive>:
 800783c:	4770      	bx	lr
	...

08007840 <_free_r>:
 8007840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007842:	2900      	cmp	r1, #0
 8007844:	d044      	beq.n	80078d0 <_free_r+0x90>
 8007846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f1a1 0404 	sub.w	r4, r1, #4
 8007852:	bfb8      	it	lt
 8007854:	18e4      	addlt	r4, r4, r3
 8007856:	f000 f8df 	bl	8007a18 <__malloc_lock>
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <_free_r+0x94>)
 800785c:	9801      	ldr	r0, [sp, #4]
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	b933      	cbnz	r3, 8007870 <_free_r+0x30>
 8007862:	6063      	str	r3, [r4, #4]
 8007864:	6014      	str	r4, [r2, #0]
 8007866:	b003      	add	sp, #12
 8007868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800786c:	f000 b8da 	b.w	8007a24 <__malloc_unlock>
 8007870:	42a3      	cmp	r3, r4
 8007872:	d908      	bls.n	8007886 <_free_r+0x46>
 8007874:	6825      	ldr	r5, [r4, #0]
 8007876:	1961      	adds	r1, r4, r5
 8007878:	428b      	cmp	r3, r1
 800787a:	bf01      	itttt	eq
 800787c:	6819      	ldreq	r1, [r3, #0]
 800787e:	685b      	ldreq	r3, [r3, #4]
 8007880:	1949      	addeq	r1, r1, r5
 8007882:	6021      	streq	r1, [r4, #0]
 8007884:	e7ed      	b.n	8007862 <_free_r+0x22>
 8007886:	461a      	mov	r2, r3
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	b10b      	cbz	r3, 8007890 <_free_r+0x50>
 800788c:	42a3      	cmp	r3, r4
 800788e:	d9fa      	bls.n	8007886 <_free_r+0x46>
 8007890:	6811      	ldr	r1, [r2, #0]
 8007892:	1855      	adds	r5, r2, r1
 8007894:	42a5      	cmp	r5, r4
 8007896:	d10b      	bne.n	80078b0 <_free_r+0x70>
 8007898:	6824      	ldr	r4, [r4, #0]
 800789a:	4421      	add	r1, r4
 800789c:	1854      	adds	r4, r2, r1
 800789e:	42a3      	cmp	r3, r4
 80078a0:	6011      	str	r1, [r2, #0]
 80078a2:	d1e0      	bne.n	8007866 <_free_r+0x26>
 80078a4:	681c      	ldr	r4, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	6053      	str	r3, [r2, #4]
 80078aa:	440c      	add	r4, r1
 80078ac:	6014      	str	r4, [r2, #0]
 80078ae:	e7da      	b.n	8007866 <_free_r+0x26>
 80078b0:	d902      	bls.n	80078b8 <_free_r+0x78>
 80078b2:	230c      	movs	r3, #12
 80078b4:	6003      	str	r3, [r0, #0]
 80078b6:	e7d6      	b.n	8007866 <_free_r+0x26>
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	1961      	adds	r1, r4, r5
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf04      	itt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	bf04      	itt	eq
 80078c8:	1949      	addeq	r1, r1, r5
 80078ca:	6021      	streq	r1, [r4, #0]
 80078cc:	6054      	str	r4, [r2, #4]
 80078ce:	e7ca      	b.n	8007866 <_free_r+0x26>
 80078d0:	b003      	add	sp, #12
 80078d2:	bd30      	pop	{r4, r5, pc}
 80078d4:	20000ae8 	.word	0x20000ae8

080078d8 <sbrk_aligned>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4e0e      	ldr	r6, [pc, #56]	; (8007914 <sbrk_aligned+0x3c>)
 80078dc:	460c      	mov	r4, r1
 80078de:	6831      	ldr	r1, [r6, #0]
 80078e0:	4605      	mov	r5, r0
 80078e2:	b911      	cbnz	r1, 80078ea <sbrk_aligned+0x12>
 80078e4:	f000 fcd8 	bl	8008298 <_sbrk_r>
 80078e8:	6030      	str	r0, [r6, #0]
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 fcd3 	bl	8008298 <_sbrk_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d00a      	beq.n	800790c <sbrk_aligned+0x34>
 80078f6:	1cc4      	adds	r4, r0, #3
 80078f8:	f024 0403 	bic.w	r4, r4, #3
 80078fc:	42a0      	cmp	r0, r4
 80078fe:	d007      	beq.n	8007910 <sbrk_aligned+0x38>
 8007900:	1a21      	subs	r1, r4, r0
 8007902:	4628      	mov	r0, r5
 8007904:	f000 fcc8 	bl	8008298 <_sbrk_r>
 8007908:	3001      	adds	r0, #1
 800790a:	d101      	bne.n	8007910 <sbrk_aligned+0x38>
 800790c:	f04f 34ff 	mov.w	r4, #4294967295
 8007910:	4620      	mov	r0, r4
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	20000aec 	.word	0x20000aec

08007918 <_malloc_r>:
 8007918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800791c:	1ccd      	adds	r5, r1, #3
 800791e:	f025 0503 	bic.w	r5, r5, #3
 8007922:	3508      	adds	r5, #8
 8007924:	2d0c      	cmp	r5, #12
 8007926:	bf38      	it	cc
 8007928:	250c      	movcc	r5, #12
 800792a:	2d00      	cmp	r5, #0
 800792c:	4607      	mov	r7, r0
 800792e:	db01      	blt.n	8007934 <_malloc_r+0x1c>
 8007930:	42a9      	cmp	r1, r5
 8007932:	d905      	bls.n	8007940 <_malloc_r+0x28>
 8007934:	230c      	movs	r3, #12
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	2600      	movs	r6, #0
 800793a:	4630      	mov	r0, r6
 800793c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007940:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a14 <_malloc_r+0xfc>
 8007944:	f000 f868 	bl	8007a18 <__malloc_lock>
 8007948:	f8d8 3000 	ldr.w	r3, [r8]
 800794c:	461c      	mov	r4, r3
 800794e:	bb5c      	cbnz	r4, 80079a8 <_malloc_r+0x90>
 8007950:	4629      	mov	r1, r5
 8007952:	4638      	mov	r0, r7
 8007954:	f7ff ffc0 	bl	80078d8 <sbrk_aligned>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	4604      	mov	r4, r0
 800795c:	d155      	bne.n	8007a0a <_malloc_r+0xf2>
 800795e:	f8d8 4000 	ldr.w	r4, [r8]
 8007962:	4626      	mov	r6, r4
 8007964:	2e00      	cmp	r6, #0
 8007966:	d145      	bne.n	80079f4 <_malloc_r+0xdc>
 8007968:	2c00      	cmp	r4, #0
 800796a:	d048      	beq.n	80079fe <_malloc_r+0xe6>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	4631      	mov	r1, r6
 8007970:	4638      	mov	r0, r7
 8007972:	eb04 0903 	add.w	r9, r4, r3
 8007976:	f000 fc8f 	bl	8008298 <_sbrk_r>
 800797a:	4581      	cmp	r9, r0
 800797c:	d13f      	bne.n	80079fe <_malloc_r+0xe6>
 800797e:	6821      	ldr	r1, [r4, #0]
 8007980:	1a6d      	subs	r5, r5, r1
 8007982:	4629      	mov	r1, r5
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff ffa7 	bl	80078d8 <sbrk_aligned>
 800798a:	3001      	adds	r0, #1
 800798c:	d037      	beq.n	80079fe <_malloc_r+0xe6>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	442b      	add	r3, r5
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	f8d8 3000 	ldr.w	r3, [r8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d038      	beq.n	8007a0e <_malloc_r+0xf6>
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	42a2      	cmp	r2, r4
 80079a0:	d12b      	bne.n	80079fa <_malloc_r+0xe2>
 80079a2:	2200      	movs	r2, #0
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	e00f      	b.n	80079c8 <_malloc_r+0xb0>
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	1b52      	subs	r2, r2, r5
 80079ac:	d41f      	bmi.n	80079ee <_malloc_r+0xd6>
 80079ae:	2a0b      	cmp	r2, #11
 80079b0:	d917      	bls.n	80079e2 <_malloc_r+0xca>
 80079b2:	1961      	adds	r1, r4, r5
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	6025      	str	r5, [r4, #0]
 80079b8:	bf18      	it	ne
 80079ba:	6059      	strne	r1, [r3, #4]
 80079bc:	6863      	ldr	r3, [r4, #4]
 80079be:	bf08      	it	eq
 80079c0:	f8c8 1000 	streq.w	r1, [r8]
 80079c4:	5162      	str	r2, [r4, r5]
 80079c6:	604b      	str	r3, [r1, #4]
 80079c8:	4638      	mov	r0, r7
 80079ca:	f104 060b 	add.w	r6, r4, #11
 80079ce:	f000 f829 	bl	8007a24 <__malloc_unlock>
 80079d2:	f026 0607 	bic.w	r6, r6, #7
 80079d6:	1d23      	adds	r3, r4, #4
 80079d8:	1af2      	subs	r2, r6, r3
 80079da:	d0ae      	beq.n	800793a <_malloc_r+0x22>
 80079dc:	1b9b      	subs	r3, r3, r6
 80079de:	50a3      	str	r3, [r4, r2]
 80079e0:	e7ab      	b.n	800793a <_malloc_r+0x22>
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	6862      	ldr	r2, [r4, #4]
 80079e6:	d1dd      	bne.n	80079a4 <_malloc_r+0x8c>
 80079e8:	f8c8 2000 	str.w	r2, [r8]
 80079ec:	e7ec      	b.n	80079c8 <_malloc_r+0xb0>
 80079ee:	4623      	mov	r3, r4
 80079f0:	6864      	ldr	r4, [r4, #4]
 80079f2:	e7ac      	b.n	800794e <_malloc_r+0x36>
 80079f4:	4634      	mov	r4, r6
 80079f6:	6876      	ldr	r6, [r6, #4]
 80079f8:	e7b4      	b.n	8007964 <_malloc_r+0x4c>
 80079fa:	4613      	mov	r3, r2
 80079fc:	e7cc      	b.n	8007998 <_malloc_r+0x80>
 80079fe:	230c      	movs	r3, #12
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	4638      	mov	r0, r7
 8007a04:	f000 f80e 	bl	8007a24 <__malloc_unlock>
 8007a08:	e797      	b.n	800793a <_malloc_r+0x22>
 8007a0a:	6025      	str	r5, [r4, #0]
 8007a0c:	e7dc      	b.n	80079c8 <_malloc_r+0xb0>
 8007a0e:	605b      	str	r3, [r3, #4]
 8007a10:	deff      	udf	#255	; 0xff
 8007a12:	bf00      	nop
 8007a14:	20000ae8 	.word	0x20000ae8

08007a18 <__malloc_lock>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__malloc_lock+0x8>)
 8007a1a:	f7ff bf0e 	b.w	800783a <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	20000ae4 	.word	0x20000ae4

08007a24 <__malloc_unlock>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__malloc_unlock+0x8>)
 8007a26:	f7ff bf09 	b.w	800783c <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20000ae4 	.word	0x20000ae4

08007a30 <__ssputs_r>:
 8007a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	688e      	ldr	r6, [r1, #8]
 8007a36:	461f      	mov	r7, r3
 8007a38:	42be      	cmp	r6, r7
 8007a3a:	680b      	ldr	r3, [r1, #0]
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4690      	mov	r8, r2
 8007a42:	d82c      	bhi.n	8007a9e <__ssputs_r+0x6e>
 8007a44:	898a      	ldrh	r2, [r1, #12]
 8007a46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a4a:	d026      	beq.n	8007a9a <__ssputs_r+0x6a>
 8007a4c:	6965      	ldr	r5, [r4, #20]
 8007a4e:	6909      	ldr	r1, [r1, #16]
 8007a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a54:	eba3 0901 	sub.w	r9, r3, r1
 8007a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a5c:	1c7b      	adds	r3, r7, #1
 8007a5e:	444b      	add	r3, r9
 8007a60:	106d      	asrs	r5, r5, #1
 8007a62:	429d      	cmp	r5, r3
 8007a64:	bf38      	it	cc
 8007a66:	461d      	movcc	r5, r3
 8007a68:	0553      	lsls	r3, r2, #21
 8007a6a:	d527      	bpl.n	8007abc <__ssputs_r+0x8c>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7ff ff53 	bl	8007918 <_malloc_r>
 8007a72:	4606      	mov	r6, r0
 8007a74:	b360      	cbz	r0, 8007ad0 <__ssputs_r+0xa0>
 8007a76:	6921      	ldr	r1, [r4, #16]
 8007a78:	464a      	mov	r2, r9
 8007a7a:	f000 fc1d 	bl	80082b8 <memcpy>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	6126      	str	r6, [r4, #16]
 8007a8c:	6165      	str	r5, [r4, #20]
 8007a8e:	444e      	add	r6, r9
 8007a90:	eba5 0509 	sub.w	r5, r5, r9
 8007a94:	6026      	str	r6, [r4, #0]
 8007a96:	60a5      	str	r5, [r4, #8]
 8007a98:	463e      	mov	r6, r7
 8007a9a:	42be      	cmp	r6, r7
 8007a9c:	d900      	bls.n	8007aa0 <__ssputs_r+0x70>
 8007a9e:	463e      	mov	r6, r7
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	4632      	mov	r2, r6
 8007aa4:	4641      	mov	r1, r8
 8007aa6:	f000 fbbb 	bl	8008220 <memmove>
 8007aaa:	68a3      	ldr	r3, [r4, #8]
 8007aac:	1b9b      	subs	r3, r3, r6
 8007aae:	60a3      	str	r3, [r4, #8]
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	4433      	add	r3, r6
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	462a      	mov	r2, r5
 8007abe:	f000 fc09 	bl	80082d4 <_realloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e0      	bne.n	8007a8a <__ssputs_r+0x5a>
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	4650      	mov	r0, sl
 8007acc:	f7ff feb8 	bl	8007840 <_free_r>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	f8ca 3000 	str.w	r3, [sl]
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	e7e9      	b.n	8007ab8 <__ssputs_r+0x88>

08007ae4 <_svfiprintf_r>:
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	4698      	mov	r8, r3
 8007aea:	898b      	ldrh	r3, [r1, #12]
 8007aec:	061b      	lsls	r3, r3, #24
 8007aee:	b09d      	sub	sp, #116	; 0x74
 8007af0:	4607      	mov	r7, r0
 8007af2:	460d      	mov	r5, r1
 8007af4:	4614      	mov	r4, r2
 8007af6:	d50e      	bpl.n	8007b16 <_svfiprintf_r+0x32>
 8007af8:	690b      	ldr	r3, [r1, #16]
 8007afa:	b963      	cbnz	r3, 8007b16 <_svfiprintf_r+0x32>
 8007afc:	2140      	movs	r1, #64	; 0x40
 8007afe:	f7ff ff0b 	bl	8007918 <_malloc_r>
 8007b02:	6028      	str	r0, [r5, #0]
 8007b04:	6128      	str	r0, [r5, #16]
 8007b06:	b920      	cbnz	r0, 8007b12 <_svfiprintf_r+0x2e>
 8007b08:	230c      	movs	r3, #12
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	e0d0      	b.n	8007cb4 <_svfiprintf_r+0x1d0>
 8007b12:	2340      	movs	r3, #64	; 0x40
 8007b14:	616b      	str	r3, [r5, #20]
 8007b16:	2300      	movs	r3, #0
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	2320      	movs	r3, #32
 8007b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b24:	2330      	movs	r3, #48	; 0x30
 8007b26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ccc <_svfiprintf_r+0x1e8>
 8007b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b2e:	f04f 0901 	mov.w	r9, #1
 8007b32:	4623      	mov	r3, r4
 8007b34:	469a      	mov	sl, r3
 8007b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3a:	b10a      	cbz	r2, 8007b40 <_svfiprintf_r+0x5c>
 8007b3c:	2a25      	cmp	r2, #37	; 0x25
 8007b3e:	d1f9      	bne.n	8007b34 <_svfiprintf_r+0x50>
 8007b40:	ebba 0b04 	subs.w	fp, sl, r4
 8007b44:	d00b      	beq.n	8007b5e <_svfiprintf_r+0x7a>
 8007b46:	465b      	mov	r3, fp
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f7ff ff6f 	bl	8007a30 <__ssputs_r>
 8007b52:	3001      	adds	r0, #1
 8007b54:	f000 80a9 	beq.w	8007caa <_svfiprintf_r+0x1c6>
 8007b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b5a:	445a      	add	r2, fp
 8007b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80a1 	beq.w	8007caa <_svfiprintf_r+0x1c6>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b72:	f10a 0a01 	add.w	sl, sl, #1
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	9307      	str	r3, [sp, #28]
 8007b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b80:	4654      	mov	r4, sl
 8007b82:	2205      	movs	r2, #5
 8007b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b88:	4850      	ldr	r0, [pc, #320]	; (8007ccc <_svfiprintf_r+0x1e8>)
 8007b8a:	f7f8 fb31 	bl	80001f0 <memchr>
 8007b8e:	9a04      	ldr	r2, [sp, #16]
 8007b90:	b9d8      	cbnz	r0, 8007bca <_svfiprintf_r+0xe6>
 8007b92:	06d0      	lsls	r0, r2, #27
 8007b94:	bf44      	itt	mi
 8007b96:	2320      	movmi	r3, #32
 8007b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9c:	0711      	lsls	r1, r2, #28
 8007b9e:	bf44      	itt	mi
 8007ba0:	232b      	movmi	r3, #43	; 0x2b
 8007ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8007baa:	2b2a      	cmp	r3, #42	; 0x2a
 8007bac:	d015      	beq.n	8007bda <_svfiprintf_r+0xf6>
 8007bae:	9a07      	ldr	r2, [sp, #28]
 8007bb0:	4654      	mov	r4, sl
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	f04f 0c0a 	mov.w	ip, #10
 8007bb8:	4621      	mov	r1, r4
 8007bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bbe:	3b30      	subs	r3, #48	; 0x30
 8007bc0:	2b09      	cmp	r3, #9
 8007bc2:	d94d      	bls.n	8007c60 <_svfiprintf_r+0x17c>
 8007bc4:	b1b0      	cbz	r0, 8007bf4 <_svfiprintf_r+0x110>
 8007bc6:	9207      	str	r2, [sp, #28]
 8007bc8:	e014      	b.n	8007bf4 <_svfiprintf_r+0x110>
 8007bca:	eba0 0308 	sub.w	r3, r0, r8
 8007bce:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	46a2      	mov	sl, r4
 8007bd8:	e7d2      	b.n	8007b80 <_svfiprintf_r+0x9c>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	1d19      	adds	r1, r3, #4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	9103      	str	r1, [sp, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfbb      	ittet	lt
 8007be6:	425b      	neglt	r3, r3
 8007be8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bec:	9307      	strge	r3, [sp, #28]
 8007bee:	9307      	strlt	r3, [sp, #28]
 8007bf0:	bfb8      	it	lt
 8007bf2:	9204      	strlt	r2, [sp, #16]
 8007bf4:	7823      	ldrb	r3, [r4, #0]
 8007bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf8:	d10c      	bne.n	8007c14 <_svfiprintf_r+0x130>
 8007bfa:	7863      	ldrb	r3, [r4, #1]
 8007bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfe:	d134      	bne.n	8007c6a <_svfiprintf_r+0x186>
 8007c00:	9b03      	ldr	r3, [sp, #12]
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	9203      	str	r2, [sp, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bfb8      	it	lt
 8007c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c10:	3402      	adds	r4, #2
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cdc <_svfiprintf_r+0x1f8>
 8007c18:	7821      	ldrb	r1, [r4, #0]
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	f7f8 fae7 	bl	80001f0 <memchr>
 8007c22:	b138      	cbz	r0, 8007c34 <_svfiprintf_r+0x150>
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	eba0 000a 	sub.w	r0, r0, sl
 8007c2a:	2240      	movs	r2, #64	; 0x40
 8007c2c:	4082      	lsls	r2, r0
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	3401      	adds	r4, #1
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c38:	4825      	ldr	r0, [pc, #148]	; (8007cd0 <_svfiprintf_r+0x1ec>)
 8007c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c3e:	2206      	movs	r2, #6
 8007c40:	f7f8 fad6 	bl	80001f0 <memchr>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d038      	beq.n	8007cba <_svfiprintf_r+0x1d6>
 8007c48:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <_svfiprintf_r+0x1f0>)
 8007c4a:	bb1b      	cbnz	r3, 8007c94 <_svfiprintf_r+0x1b0>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	3307      	adds	r3, #7
 8007c50:	f023 0307 	bic.w	r3, r3, #7
 8007c54:	3308      	adds	r3, #8
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	4433      	add	r3, r6
 8007c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c5e:	e768      	b.n	8007b32 <_svfiprintf_r+0x4e>
 8007c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c64:	460c      	mov	r4, r1
 8007c66:	2001      	movs	r0, #1
 8007c68:	e7a6      	b.n	8007bb8 <_svfiprintf_r+0xd4>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	3401      	adds	r4, #1
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f04f 0c0a 	mov.w	ip, #10
 8007c76:	4620      	mov	r0, r4
 8007c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c7c:	3a30      	subs	r2, #48	; 0x30
 8007c7e:	2a09      	cmp	r2, #9
 8007c80:	d903      	bls.n	8007c8a <_svfiprintf_r+0x1a6>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0c6      	beq.n	8007c14 <_svfiprintf_r+0x130>
 8007c86:	9105      	str	r1, [sp, #20]
 8007c88:	e7c4      	b.n	8007c14 <_svfiprintf_r+0x130>
 8007c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8e:	4604      	mov	r4, r0
 8007c90:	2301      	movs	r3, #1
 8007c92:	e7f0      	b.n	8007c76 <_svfiprintf_r+0x192>
 8007c94:	ab03      	add	r3, sp, #12
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	462a      	mov	r2, r5
 8007c9a:	4b0f      	ldr	r3, [pc, #60]	; (8007cd8 <_svfiprintf_r+0x1f4>)
 8007c9c:	a904      	add	r1, sp, #16
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f3af 8000 	nop.w
 8007ca4:	1c42      	adds	r2, r0, #1
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	d1d6      	bne.n	8007c58 <_svfiprintf_r+0x174>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	065b      	lsls	r3, r3, #25
 8007cae:	f53f af2d 	bmi.w	8007b0c <_svfiprintf_r+0x28>
 8007cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb4:	b01d      	add	sp, #116	; 0x74
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	ab03      	add	r3, sp, #12
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <_svfiprintf_r+0x1f4>)
 8007cc2:	a904      	add	r1, sp, #16
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f000 f879 	bl	8007dbc <_printf_i>
 8007cca:	e7eb      	b.n	8007ca4 <_svfiprintf_r+0x1c0>
 8007ccc:	080086bc 	.word	0x080086bc
 8007cd0:	080086c6 	.word	0x080086c6
 8007cd4:	00000000 	.word	0x00000000
 8007cd8:	08007a31 	.word	0x08007a31
 8007cdc:	080086c2 	.word	0x080086c2

08007ce0 <_printf_common>:
 8007ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	4699      	mov	r9, r3
 8007ce8:	688a      	ldr	r2, [r1, #8]
 8007cea:	690b      	ldr	r3, [r1, #16]
 8007cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	bfb8      	it	lt
 8007cf4:	4613      	movlt	r3, r2
 8007cf6:	6033      	str	r3, [r6, #0]
 8007cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	b10a      	cbz	r2, 8007d06 <_printf_common+0x26>
 8007d02:	3301      	adds	r3, #1
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	0699      	lsls	r1, r3, #26
 8007d0a:	bf42      	ittt	mi
 8007d0c:	6833      	ldrmi	r3, [r6, #0]
 8007d0e:	3302      	addmi	r3, #2
 8007d10:	6033      	strmi	r3, [r6, #0]
 8007d12:	6825      	ldr	r5, [r4, #0]
 8007d14:	f015 0506 	ands.w	r5, r5, #6
 8007d18:	d106      	bne.n	8007d28 <_printf_common+0x48>
 8007d1a:	f104 0a19 	add.w	sl, r4, #25
 8007d1e:	68e3      	ldr	r3, [r4, #12]
 8007d20:	6832      	ldr	r2, [r6, #0]
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dc26      	bgt.n	8007d76 <_printf_common+0x96>
 8007d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d2c:	1e13      	subs	r3, r2, #0
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	bf18      	it	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	0692      	lsls	r2, r2, #26
 8007d36:	d42b      	bmi.n	8007d90 <_printf_common+0xb0>
 8007d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c0      	blx	r8
 8007d42:	3001      	adds	r0, #1
 8007d44:	d01e      	beq.n	8007d84 <_printf_common+0xa4>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	6922      	ldr	r2, [r4, #16]
 8007d4a:	f003 0306 	and.w	r3, r3, #6
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	bf02      	ittt	eq
 8007d52:	68e5      	ldreq	r5, [r4, #12]
 8007d54:	6833      	ldreq	r3, [r6, #0]
 8007d56:	1aed      	subeq	r5, r5, r3
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	bf0c      	ite	eq
 8007d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d60:	2500      	movne	r5, #0
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bfc4      	itt	gt
 8007d66:	1a9b      	subgt	r3, r3, r2
 8007d68:	18ed      	addgt	r5, r5, r3
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	341a      	adds	r4, #26
 8007d6e:	42b5      	cmp	r5, r6
 8007d70:	d11a      	bne.n	8007da8 <_printf_common+0xc8>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e008      	b.n	8007d88 <_printf_common+0xa8>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4652      	mov	r2, sl
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	47c0      	blx	r8
 8007d80:	3001      	adds	r0, #1
 8007d82:	d103      	bne.n	8007d8c <_printf_common+0xac>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	e7c6      	b.n	8007d1e <_printf_common+0x3e>
 8007d90:	18e1      	adds	r1, r4, r3
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	2030      	movs	r0, #48	; 0x30
 8007d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d9a:	4422      	add	r2, r4
 8007d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007da4:	3302      	adds	r3, #2
 8007da6:	e7c7      	b.n	8007d38 <_printf_common+0x58>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4622      	mov	r2, r4
 8007dac:	4649      	mov	r1, r9
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c0      	blx	r8
 8007db2:	3001      	adds	r0, #1
 8007db4:	d0e6      	beq.n	8007d84 <_printf_common+0xa4>
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7d9      	b.n	8007d6e <_printf_common+0x8e>
	...

08007dbc <_printf_i>:
 8007dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	7e0f      	ldrb	r7, [r1, #24]
 8007dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dc4:	2f78      	cmp	r7, #120	; 0x78
 8007dc6:	4691      	mov	r9, r2
 8007dc8:	4680      	mov	r8, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	469a      	mov	sl, r3
 8007dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dd2:	d807      	bhi.n	8007de4 <_printf_i+0x28>
 8007dd4:	2f62      	cmp	r7, #98	; 0x62
 8007dd6:	d80a      	bhi.n	8007dee <_printf_i+0x32>
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	f000 80d4 	beq.w	8007f86 <_printf_i+0x1ca>
 8007dde:	2f58      	cmp	r7, #88	; 0x58
 8007de0:	f000 80c0 	beq.w	8007f64 <_printf_i+0x1a8>
 8007de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dec:	e03a      	b.n	8007e64 <_printf_i+0xa8>
 8007dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007df2:	2b15      	cmp	r3, #21
 8007df4:	d8f6      	bhi.n	8007de4 <_printf_i+0x28>
 8007df6:	a101      	add	r1, pc, #4	; (adr r1, 8007dfc <_printf_i+0x40>)
 8007df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dfc:	08007e55 	.word	0x08007e55
 8007e00:	08007e69 	.word	0x08007e69
 8007e04:	08007de5 	.word	0x08007de5
 8007e08:	08007de5 	.word	0x08007de5
 8007e0c:	08007de5 	.word	0x08007de5
 8007e10:	08007de5 	.word	0x08007de5
 8007e14:	08007e69 	.word	0x08007e69
 8007e18:	08007de5 	.word	0x08007de5
 8007e1c:	08007de5 	.word	0x08007de5
 8007e20:	08007de5 	.word	0x08007de5
 8007e24:	08007de5 	.word	0x08007de5
 8007e28:	08007f6d 	.word	0x08007f6d
 8007e2c:	08007e95 	.word	0x08007e95
 8007e30:	08007f27 	.word	0x08007f27
 8007e34:	08007de5 	.word	0x08007de5
 8007e38:	08007de5 	.word	0x08007de5
 8007e3c:	08007f8f 	.word	0x08007f8f
 8007e40:	08007de5 	.word	0x08007de5
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007de5 	.word	0x08007de5
 8007e4c:	08007de5 	.word	0x08007de5
 8007e50:	08007f2f 	.word	0x08007f2f
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	1d1a      	adds	r2, r3, #4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	602a      	str	r2, [r5, #0]
 8007e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e64:	2301      	movs	r3, #1
 8007e66:	e09f      	b.n	8007fa8 <_printf_i+0x1ec>
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	0607      	lsls	r7, r0, #24
 8007e6e:	f103 0104 	add.w	r1, r3, #4
 8007e72:	6029      	str	r1, [r5, #0]
 8007e74:	d501      	bpl.n	8007e7a <_printf_i+0xbe>
 8007e76:	681e      	ldr	r6, [r3, #0]
 8007e78:	e003      	b.n	8007e82 <_printf_i+0xc6>
 8007e7a:	0646      	lsls	r6, r0, #25
 8007e7c:	d5fb      	bpl.n	8007e76 <_printf_i+0xba>
 8007e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	da03      	bge.n	8007e8e <_printf_i+0xd2>
 8007e86:	232d      	movs	r3, #45	; 0x2d
 8007e88:	4276      	negs	r6, r6
 8007e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8e:	485a      	ldr	r0, [pc, #360]	; (8007ff8 <_printf_i+0x23c>)
 8007e90:	230a      	movs	r3, #10
 8007e92:	e012      	b.n	8007eba <_printf_i+0xfe>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	6820      	ldr	r0, [r4, #0]
 8007e98:	1d19      	adds	r1, r3, #4
 8007e9a:	6029      	str	r1, [r5, #0]
 8007e9c:	0605      	lsls	r5, r0, #24
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_i+0xe8>
 8007ea0:	681e      	ldr	r6, [r3, #0]
 8007ea2:	e002      	b.n	8007eaa <_printf_i+0xee>
 8007ea4:	0641      	lsls	r1, r0, #25
 8007ea6:	d5fb      	bpl.n	8007ea0 <_printf_i+0xe4>
 8007ea8:	881e      	ldrh	r6, [r3, #0]
 8007eaa:	4853      	ldr	r0, [pc, #332]	; (8007ff8 <_printf_i+0x23c>)
 8007eac:	2f6f      	cmp	r7, #111	; 0x6f
 8007eae:	bf0c      	ite	eq
 8007eb0:	2308      	moveq	r3, #8
 8007eb2:	230a      	movne	r3, #10
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eba:	6865      	ldr	r5, [r4, #4]
 8007ebc:	60a5      	str	r5, [r4, #8]
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	bfa2      	ittt	ge
 8007ec2:	6821      	ldrge	r1, [r4, #0]
 8007ec4:	f021 0104 	bicge.w	r1, r1, #4
 8007ec8:	6021      	strge	r1, [r4, #0]
 8007eca:	b90e      	cbnz	r6, 8007ed0 <_printf_i+0x114>
 8007ecc:	2d00      	cmp	r5, #0
 8007ece:	d04b      	beq.n	8007f68 <_printf_i+0x1ac>
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8007eda:	5dc7      	ldrb	r7, [r0, r7]
 8007edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ee0:	4637      	mov	r7, r6
 8007ee2:	42bb      	cmp	r3, r7
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	d9f4      	bls.n	8007ed2 <_printf_i+0x116>
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d10b      	bne.n	8007f04 <_printf_i+0x148>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	07de      	lsls	r6, r3, #31
 8007ef0:	d508      	bpl.n	8007f04 <_printf_i+0x148>
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	6861      	ldr	r1, [r4, #4]
 8007ef6:	4299      	cmp	r1, r3
 8007ef8:	bfde      	ittt	le
 8007efa:	2330      	movle	r3, #48	; 0x30
 8007efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f04:	1b52      	subs	r2, r2, r5
 8007f06:	6122      	str	r2, [r4, #16]
 8007f08:	f8cd a000 	str.w	sl, [sp]
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	aa03      	add	r2, sp, #12
 8007f10:	4621      	mov	r1, r4
 8007f12:	4640      	mov	r0, r8
 8007f14:	f7ff fee4 	bl	8007ce0 <_printf_common>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d14a      	bne.n	8007fb2 <_printf_i+0x1f6>
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f20:	b004      	add	sp, #16
 8007f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f043 0320 	orr.w	r3, r3, #32
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	4833      	ldr	r0, [pc, #204]	; (8007ffc <_printf_i+0x240>)
 8007f30:	2778      	movs	r7, #120	; 0x78
 8007f32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	6829      	ldr	r1, [r5, #0]
 8007f3a:	061f      	lsls	r7, r3, #24
 8007f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f40:	d402      	bmi.n	8007f48 <_printf_i+0x18c>
 8007f42:	065f      	lsls	r7, r3, #25
 8007f44:	bf48      	it	mi
 8007f46:	b2b6      	uxthmi	r6, r6
 8007f48:	07df      	lsls	r7, r3, #31
 8007f4a:	bf48      	it	mi
 8007f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f50:	6029      	str	r1, [r5, #0]
 8007f52:	bf48      	it	mi
 8007f54:	6023      	strmi	r3, [r4, #0]
 8007f56:	b91e      	cbnz	r6, 8007f60 <_printf_i+0x1a4>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	f023 0320 	bic.w	r3, r3, #32
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	2310      	movs	r3, #16
 8007f62:	e7a7      	b.n	8007eb4 <_printf_i+0xf8>
 8007f64:	4824      	ldr	r0, [pc, #144]	; (8007ff8 <_printf_i+0x23c>)
 8007f66:	e7e4      	b.n	8007f32 <_printf_i+0x176>
 8007f68:	4615      	mov	r5, r2
 8007f6a:	e7bd      	b.n	8007ee8 <_printf_i+0x12c>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	6826      	ldr	r6, [r4, #0]
 8007f70:	6961      	ldr	r1, [r4, #20]
 8007f72:	1d18      	adds	r0, r3, #4
 8007f74:	6028      	str	r0, [r5, #0]
 8007f76:	0635      	lsls	r5, r6, #24
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	d501      	bpl.n	8007f80 <_printf_i+0x1c4>
 8007f7c:	6019      	str	r1, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <_printf_i+0x1ca>
 8007f80:	0670      	lsls	r0, r6, #25
 8007f82:	d5fb      	bpl.n	8007f7c <_printf_i+0x1c0>
 8007f84:	8019      	strh	r1, [r3, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	4615      	mov	r5, r2
 8007f8c:	e7bc      	b.n	8007f08 <_printf_i+0x14c>
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	1d1a      	adds	r2, r3, #4
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	681d      	ldr	r5, [r3, #0]
 8007f96:	6862      	ldr	r2, [r4, #4]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7f8 f928 	bl	80001f0 <memchr>
 8007fa0:	b108      	cbz	r0, 8007fa6 <_printf_i+0x1ea>
 8007fa2:	1b40      	subs	r0, r0, r5
 8007fa4:	6060      	str	r0, [r4, #4]
 8007fa6:	6863      	ldr	r3, [r4, #4]
 8007fa8:	6123      	str	r3, [r4, #16]
 8007faa:	2300      	movs	r3, #0
 8007fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb0:	e7aa      	b.n	8007f08 <_printf_i+0x14c>
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	462a      	mov	r2, r5
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4640      	mov	r0, r8
 8007fba:	47d0      	blx	sl
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d0ad      	beq.n	8007f1c <_printf_i+0x160>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	079b      	lsls	r3, r3, #30
 8007fc4:	d413      	bmi.n	8007fee <_printf_i+0x232>
 8007fc6:	68e0      	ldr	r0, [r4, #12]
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	4298      	cmp	r0, r3
 8007fcc:	bfb8      	it	lt
 8007fce:	4618      	movlt	r0, r3
 8007fd0:	e7a6      	b.n	8007f20 <_printf_i+0x164>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	47d0      	blx	sl
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d09d      	beq.n	8007f1c <_printf_i+0x160>
 8007fe0:	3501      	adds	r5, #1
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	9903      	ldr	r1, [sp, #12]
 8007fe6:	1a5b      	subs	r3, r3, r1
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	dcf2      	bgt.n	8007fd2 <_printf_i+0x216>
 8007fec:	e7eb      	b.n	8007fc6 <_printf_i+0x20a>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	f104 0619 	add.w	r6, r4, #25
 8007ff4:	e7f5      	b.n	8007fe2 <_printf_i+0x226>
 8007ff6:	bf00      	nop
 8007ff8:	080086cd 	.word	0x080086cd
 8007ffc:	080086de 	.word	0x080086de

08008000 <__sflush_r>:
 8008000:	898a      	ldrh	r2, [r1, #12]
 8008002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	4605      	mov	r5, r0
 8008008:	0710      	lsls	r0, r2, #28
 800800a:	460c      	mov	r4, r1
 800800c:	d458      	bmi.n	80080c0 <__sflush_r+0xc0>
 800800e:	684b      	ldr	r3, [r1, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	dc05      	bgt.n	8008020 <__sflush_r+0x20>
 8008014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	dc02      	bgt.n	8008020 <__sflush_r+0x20>
 800801a:	2000      	movs	r0, #0
 800801c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008022:	2e00      	cmp	r6, #0
 8008024:	d0f9      	beq.n	800801a <__sflush_r+0x1a>
 8008026:	2300      	movs	r3, #0
 8008028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800802c:	682f      	ldr	r7, [r5, #0]
 800802e:	6a21      	ldr	r1, [r4, #32]
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	d032      	beq.n	800809a <__sflush_r+0x9a>
 8008034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	075a      	lsls	r2, r3, #29
 800803a:	d505      	bpl.n	8008048 <__sflush_r+0x48>
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	1ac0      	subs	r0, r0, r3
 8008040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008042:	b10b      	cbz	r3, 8008048 <__sflush_r+0x48>
 8008044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008046:	1ac0      	subs	r0, r0, r3
 8008048:	2300      	movs	r3, #0
 800804a:	4602      	mov	r2, r0
 800804c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800804e:	6a21      	ldr	r1, [r4, #32]
 8008050:	4628      	mov	r0, r5
 8008052:	47b0      	blx	r6
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	d106      	bne.n	8008068 <__sflush_r+0x68>
 800805a:	6829      	ldr	r1, [r5, #0]
 800805c:	291d      	cmp	r1, #29
 800805e:	d82b      	bhi.n	80080b8 <__sflush_r+0xb8>
 8008060:	4a29      	ldr	r2, [pc, #164]	; (8008108 <__sflush_r+0x108>)
 8008062:	410a      	asrs	r2, r1
 8008064:	07d6      	lsls	r6, r2, #31
 8008066:	d427      	bmi.n	80080b8 <__sflush_r+0xb8>
 8008068:	2200      	movs	r2, #0
 800806a:	6062      	str	r2, [r4, #4]
 800806c:	04d9      	lsls	r1, r3, #19
 800806e:	6922      	ldr	r2, [r4, #16]
 8008070:	6022      	str	r2, [r4, #0]
 8008072:	d504      	bpl.n	800807e <__sflush_r+0x7e>
 8008074:	1c42      	adds	r2, r0, #1
 8008076:	d101      	bne.n	800807c <__sflush_r+0x7c>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b903      	cbnz	r3, 800807e <__sflush_r+0x7e>
 800807c:	6560      	str	r0, [r4, #84]	; 0x54
 800807e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008080:	602f      	str	r7, [r5, #0]
 8008082:	2900      	cmp	r1, #0
 8008084:	d0c9      	beq.n	800801a <__sflush_r+0x1a>
 8008086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800808a:	4299      	cmp	r1, r3
 800808c:	d002      	beq.n	8008094 <__sflush_r+0x94>
 800808e:	4628      	mov	r0, r5
 8008090:	f7ff fbd6 	bl	8007840 <_free_r>
 8008094:	2000      	movs	r0, #0
 8008096:	6360      	str	r0, [r4, #52]	; 0x34
 8008098:	e7c0      	b.n	800801c <__sflush_r+0x1c>
 800809a:	2301      	movs	r3, #1
 800809c:	4628      	mov	r0, r5
 800809e:	47b0      	blx	r6
 80080a0:	1c41      	adds	r1, r0, #1
 80080a2:	d1c8      	bne.n	8008036 <__sflush_r+0x36>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0c5      	beq.n	8008036 <__sflush_r+0x36>
 80080aa:	2b1d      	cmp	r3, #29
 80080ac:	d001      	beq.n	80080b2 <__sflush_r+0xb2>
 80080ae:	2b16      	cmp	r3, #22
 80080b0:	d101      	bne.n	80080b6 <__sflush_r+0xb6>
 80080b2:	602f      	str	r7, [r5, #0]
 80080b4:	e7b1      	b.n	800801a <__sflush_r+0x1a>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	e7ad      	b.n	800801c <__sflush_r+0x1c>
 80080c0:	690f      	ldr	r7, [r1, #16]
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	d0a9      	beq.n	800801a <__sflush_r+0x1a>
 80080c6:	0793      	lsls	r3, r2, #30
 80080c8:	680e      	ldr	r6, [r1, #0]
 80080ca:	bf08      	it	eq
 80080cc:	694b      	ldreq	r3, [r1, #20]
 80080ce:	600f      	str	r7, [r1, #0]
 80080d0:	bf18      	it	ne
 80080d2:	2300      	movne	r3, #0
 80080d4:	eba6 0807 	sub.w	r8, r6, r7
 80080d8:	608b      	str	r3, [r1, #8]
 80080da:	f1b8 0f00 	cmp.w	r8, #0
 80080de:	dd9c      	ble.n	800801a <__sflush_r+0x1a>
 80080e0:	6a21      	ldr	r1, [r4, #32]
 80080e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080e4:	4643      	mov	r3, r8
 80080e6:	463a      	mov	r2, r7
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b0      	blx	r6
 80080ec:	2800      	cmp	r0, #0
 80080ee:	dc06      	bgt.n	80080fe <__sflush_r+0xfe>
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e78e      	b.n	800801c <__sflush_r+0x1c>
 80080fe:	4407      	add	r7, r0
 8008100:	eba8 0800 	sub.w	r8, r8, r0
 8008104:	e7e9      	b.n	80080da <__sflush_r+0xda>
 8008106:	bf00      	nop
 8008108:	dfbffffe 	.word	0xdfbffffe

0800810c <_fflush_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	690b      	ldr	r3, [r1, #16]
 8008110:	4605      	mov	r5, r0
 8008112:	460c      	mov	r4, r1
 8008114:	b913      	cbnz	r3, 800811c <_fflush_r+0x10>
 8008116:	2500      	movs	r5, #0
 8008118:	4628      	mov	r0, r5
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	b118      	cbz	r0, 8008126 <_fflush_r+0x1a>
 800811e:	6a03      	ldr	r3, [r0, #32]
 8008120:	b90b      	cbnz	r3, 8008126 <_fflush_r+0x1a>
 8008122:	f7ff f987 	bl	8007434 <__sinit>
 8008126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f3      	beq.n	8008116 <_fflush_r+0xa>
 800812e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008130:	07d0      	lsls	r0, r2, #31
 8008132:	d404      	bmi.n	800813e <_fflush_r+0x32>
 8008134:	0599      	lsls	r1, r3, #22
 8008136:	d402      	bmi.n	800813e <_fflush_r+0x32>
 8008138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800813a:	f7ff fb7e 	bl	800783a <__retarget_lock_acquire_recursive>
 800813e:	4628      	mov	r0, r5
 8008140:	4621      	mov	r1, r4
 8008142:	f7ff ff5d 	bl	8008000 <__sflush_r>
 8008146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008148:	07da      	lsls	r2, r3, #31
 800814a:	4605      	mov	r5, r0
 800814c:	d4e4      	bmi.n	8008118 <_fflush_r+0xc>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	059b      	lsls	r3, r3, #22
 8008152:	d4e1      	bmi.n	8008118 <_fflush_r+0xc>
 8008154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008156:	f7ff fb71 	bl	800783c <__retarget_lock_release_recursive>
 800815a:	e7dd      	b.n	8008118 <_fflush_r+0xc>

0800815c <__swhatbuf_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	460c      	mov	r4, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	2900      	cmp	r1, #0
 8008166:	b096      	sub	sp, #88	; 0x58
 8008168:	4615      	mov	r5, r2
 800816a:	461e      	mov	r6, r3
 800816c:	da0d      	bge.n	800818a <__swhatbuf_r+0x2e>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008174:	f04f 0100 	mov.w	r1, #0
 8008178:	bf0c      	ite	eq
 800817a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800817e:	2340      	movne	r3, #64	; 0x40
 8008180:	2000      	movs	r0, #0
 8008182:	6031      	str	r1, [r6, #0]
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	b016      	add	sp, #88	; 0x58
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	466a      	mov	r2, sp
 800818c:	f000 f862 	bl	8008254 <_fstat_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	dbec      	blt.n	800816e <__swhatbuf_r+0x12>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800819a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800819e:	4259      	negs	r1, r3
 80081a0:	4159      	adcs	r1, r3
 80081a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a6:	e7eb      	b.n	8008180 <__swhatbuf_r+0x24>

080081a8 <__smakebuf_r>:
 80081a8:	898b      	ldrh	r3, [r1, #12]
 80081aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ac:	079d      	lsls	r5, r3, #30
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	d507      	bpl.n	80081c4 <__smakebuf_r+0x1c>
 80081b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	2301      	movs	r3, #1
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	b002      	add	sp, #8
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	ab01      	add	r3, sp, #4
 80081c6:	466a      	mov	r2, sp
 80081c8:	f7ff ffc8 	bl	800815c <__swhatbuf_r>
 80081cc:	9900      	ldr	r1, [sp, #0]
 80081ce:	4605      	mov	r5, r0
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff fba1 	bl	8007918 <_malloc_r>
 80081d6:	b948      	cbnz	r0, 80081ec <__smakebuf_r+0x44>
 80081d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d4ef      	bmi.n	80081c0 <__smakebuf_r+0x18>
 80081e0:	f023 0303 	bic.w	r3, r3, #3
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	e7e3      	b.n	80081b4 <__smakebuf_r+0xc>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	6020      	str	r0, [r4, #0]
 80081f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	9b00      	ldr	r3, [sp, #0]
 80081f8:	6163      	str	r3, [r4, #20]
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	6120      	str	r0, [r4, #16]
 80081fe:	b15b      	cbz	r3, 8008218 <__smakebuf_r+0x70>
 8008200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008204:	4630      	mov	r0, r6
 8008206:	f000 f837 	bl	8008278 <_isatty_r>
 800820a:	b128      	cbz	r0, 8008218 <__smakebuf_r+0x70>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	81a3      	strh	r3, [r4, #12]
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	431d      	orrs	r5, r3
 800821c:	81a5      	strh	r5, [r4, #12]
 800821e:	e7cf      	b.n	80081c0 <__smakebuf_r+0x18>

08008220 <memmove>:
 8008220:	4288      	cmp	r0, r1
 8008222:	b510      	push	{r4, lr}
 8008224:	eb01 0402 	add.w	r4, r1, r2
 8008228:	d902      	bls.n	8008230 <memmove+0x10>
 800822a:	4284      	cmp	r4, r0
 800822c:	4623      	mov	r3, r4
 800822e:	d807      	bhi.n	8008240 <memmove+0x20>
 8008230:	1e43      	subs	r3, r0, #1
 8008232:	42a1      	cmp	r1, r4
 8008234:	d008      	beq.n	8008248 <memmove+0x28>
 8008236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800823a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800823e:	e7f8      	b.n	8008232 <memmove+0x12>
 8008240:	4402      	add	r2, r0
 8008242:	4601      	mov	r1, r0
 8008244:	428a      	cmp	r2, r1
 8008246:	d100      	bne.n	800824a <memmove+0x2a>
 8008248:	bd10      	pop	{r4, pc}
 800824a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800824e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008252:	e7f7      	b.n	8008244 <memmove+0x24>

08008254 <_fstat_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4d07      	ldr	r5, [pc, #28]	; (8008274 <_fstat_r+0x20>)
 8008258:	2300      	movs	r3, #0
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	4611      	mov	r1, r2
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	f7fa fedc 	bl	800301e <_fstat>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	d102      	bne.n	8008270 <_fstat_r+0x1c>
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	b103      	cbz	r3, 8008270 <_fstat_r+0x1c>
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	bd38      	pop	{r3, r4, r5, pc}
 8008272:	bf00      	nop
 8008274:	20000ae0 	.word	0x20000ae0

08008278 <_isatty_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d06      	ldr	r5, [pc, #24]	; (8008294 <_isatty_r+0x1c>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	f7fa fedb 	bl	800303e <_isatty>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_isatty_r+0x1a>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_isatty_r+0x1a>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20000ae0 	.word	0x20000ae0

08008298 <_sbrk_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d06      	ldr	r5, [pc, #24]	; (80082b4 <_sbrk_r+0x1c>)
 800829c:	2300      	movs	r3, #0
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	602b      	str	r3, [r5, #0]
 80082a4:	f7fa fee4 	bl	8003070 <_sbrk>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d102      	bne.n	80082b2 <_sbrk_r+0x1a>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	b103      	cbz	r3, 80082b2 <_sbrk_r+0x1a>
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	20000ae0 	.word	0x20000ae0

080082b8 <memcpy>:
 80082b8:	440a      	add	r2, r1
 80082ba:	4291      	cmp	r1, r2
 80082bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082c0:	d100      	bne.n	80082c4 <memcpy+0xc>
 80082c2:	4770      	bx	lr
 80082c4:	b510      	push	{r4, lr}
 80082c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ce:	4291      	cmp	r1, r2
 80082d0:	d1f9      	bne.n	80082c6 <memcpy+0xe>
 80082d2:	bd10      	pop	{r4, pc}

080082d4 <_realloc_r>:
 80082d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	4680      	mov	r8, r0
 80082da:	4614      	mov	r4, r2
 80082dc:	460e      	mov	r6, r1
 80082de:	b921      	cbnz	r1, 80082ea <_realloc_r+0x16>
 80082e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	4611      	mov	r1, r2
 80082e6:	f7ff bb17 	b.w	8007918 <_malloc_r>
 80082ea:	b92a      	cbnz	r2, 80082f8 <_realloc_r+0x24>
 80082ec:	f7ff faa8 	bl	8007840 <_free_r>
 80082f0:	4625      	mov	r5, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f8:	f000 f81b 	bl	8008332 <_malloc_usable_size_r>
 80082fc:	4284      	cmp	r4, r0
 80082fe:	4607      	mov	r7, r0
 8008300:	d802      	bhi.n	8008308 <_realloc_r+0x34>
 8008302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008306:	d812      	bhi.n	800832e <_realloc_r+0x5a>
 8008308:	4621      	mov	r1, r4
 800830a:	4640      	mov	r0, r8
 800830c:	f7ff fb04 	bl	8007918 <_malloc_r>
 8008310:	4605      	mov	r5, r0
 8008312:	2800      	cmp	r0, #0
 8008314:	d0ed      	beq.n	80082f2 <_realloc_r+0x1e>
 8008316:	42bc      	cmp	r4, r7
 8008318:	4622      	mov	r2, r4
 800831a:	4631      	mov	r1, r6
 800831c:	bf28      	it	cs
 800831e:	463a      	movcs	r2, r7
 8008320:	f7ff ffca 	bl	80082b8 <memcpy>
 8008324:	4631      	mov	r1, r6
 8008326:	4640      	mov	r0, r8
 8008328:	f7ff fa8a 	bl	8007840 <_free_r>
 800832c:	e7e1      	b.n	80082f2 <_realloc_r+0x1e>
 800832e:	4635      	mov	r5, r6
 8008330:	e7df      	b.n	80082f2 <_realloc_r+0x1e>

08008332 <_malloc_usable_size_r>:
 8008332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008336:	1f18      	subs	r0, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	bfbc      	itt	lt
 800833c:	580b      	ldrlt	r3, [r1, r0]
 800833e:	18c0      	addlt	r0, r0, r3
 8008340:	4770      	bx	lr
	...

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
