/*
 * ssd1106.c
 *
 *  Created on: 7 mar 2023
 *      Author: Michal Klebokowski
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "ssd1106.h"
#include "fonts.h"
#include "bitmaps.h"

I2C_HandleTypeDef *OledI2C;

static CursorPosition Cursor;
static FontInfo CurrentFont;
static uint8_t BufferVRAM[DISPLAY_WIDTH * (DISPLAY_HEIGHT/8)];

uint8_t InitCommands[] = {
	DISPLAY_OFF,
	SET_COMM_SCAN_FBOT,
	SET_COLLUMN_ADDR_L,
	SET_COLLUMN_ADDR_H,
	SET_CONTRAST,0x3F,
	SET_SEGMENT_REMAP,
	SET_MULTIPLEX_RATIO, 63,
	SET_OFFSET,0,
	SET_VCOM,0x20,
	SET_DCDC,0x8B,
	DISPLAY_ON
};


//
//Basic Write Functions
//
static OLED_Status OLED_SendCmd(uint8_t command)
{
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1, 100);		//dma bad behavior
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, &command, 1);
}

static OLED_Status OLED_SendCmdSequence(uint8_t *commandSequence, uint8_t length)
{
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length, 100);
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_COMMAND, 1, commandSequence, length);
}

static OLED_Status OLED_SendData(uint8_t *data, uint16_t length)
{
	return HAL_I2C_Mem_Write(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length, 100);
	//return HAL_I2C_Mem_Write_DMA(OledI2C, OLED_ADDR, SEND_DATA, 1, data, length);
}


//
//Specific OLED commands sending funcions
//
OLED_Status OLED_Init(I2C_HandleTypeDef *hi2c)
{
	OledI2C = hi2c;
	OLED_ChangeFont(StandardASCII);
	return OLED_SendCmdSequence(InitCommands, sizeof(InitCommands));
}

OLED_Status OLED_ClearDisp(void)	//device display, not VRAM buffer
{
	uint8_t Status = OLED_OK;
	uint8_t ZerosBuff[DISPLAY_WIDTH];
	uint8_t i;
	memset(ZerosBuff, 0x00, sizeof(ZerosBuff));		//prepare zeros for clearing each page
	for(i = 0; i < DISPLAY_HEIGHT/8; i++)				//clear each page by sending zeros
	{
		Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (COLLUMN_CENTER_OFFSET & 0x0F) );
		Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (COLLUMN_CENTER_OFFSET >> 4));
		Status |= OLED_SendCmd(SET_PAGE | i );
		Status |= OLED_SendData(&ZerosBuff[0],sizeof(ZerosBuff));
	}
	return Status;
}

OLED_Status OLED_SetDeviceCursor(uint8_t collumn, uint8_t page)
{
	uint8_t Status = OLED_OK;
	uint8_t Sequence[3];
	if(collumn > DISPLAY_WIDTH || page > (DISPLAY_HEIGHT/8) )
	{
		return OLED_ERROR;
	}
	collumn+=COLLUMN_CENTER_OFFSET;
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_L | (collumn & 0x0F) );
//	Status |= OLED_SendCmd(SET_COLLUMN_ADDR_H | (collumn >> 4) );
//	Status |= OLED_SendCmd(SET_PAGE | (page & 0x07) );


	Sequence[0] = SET_COLLUMN_ADDR_L | (collumn & 0x0F);
	Sequence[1] = SET_COLLUMN_ADDR_H | (collumn >> 4);
	Sequence[2] = SET_PAGE | (page & 0x07);

	OLED_SendCmdSequence(Sequence, 3);

	return Status;
}

OLED_Status OLED_InvertDisplay(uint8_t invertState)
{
	if(1 == invertState)
	{
		return OLED_SendCmd(SET_INVERSE_MODE);
	}
	else if(0 == invertState)
	{
		return OLED_SendCmd(NO_INVERSE_MODE);
	}
	else
	{
		return OLED_ERROR;
	}
}
//
//Cursor related
//
OLED_Status OLED_MoveCursor(uint8_t x, uint8_t y)
{
	if(x > (DISPLAY_WIDTH - 1) || y > (DISPLAY_HEIGHT - 1) )
	{
		return OLED_ERROR;
	}
	Cursor.x = x;
	Cursor.y = y;
	Cursor.page = y/8;

	return OLED_OK;
}

void OLED_GetCursorPosition(CursorPosition *OutputPosition)
{
	OutputPosition->x = Cursor.x;
	OutputPosition->y = Cursor.y;
	OutputPosition->page = Cursor.page;
}

//
//VRAM Buffer operation
//
OLED_Status OLED_WriteToBuffer(uint8_t *data, uint8_t length, uint8_t color)
{
	uint8_t i;
	for(i = 0; i < length; i++)
	{
		if(WHITE == color)
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] |= *data;
		}
		else if(BLACK == color)
		{
			BufferVRAM[Cursor.x + (Cursor.page * DISPLAY_WIDTH)] &= ~(*data);
		}
		else
		{
			return OLED_ERROR;
		}

		if(OLED_ERROR == OLED_MoveCursor(Cursor.x + 1, Cursor.y))
		{
			return OLED_ERROR;
		}
		else
		{
			data++;
		}

	}
	return OLED_OK;
}

OLED_Status OLED_SendBuffer(void)
{
	uint8_t Status = OLED_OK;
	uint8_t i;
	for(i = 0; i < 8; i++)
	{
		Status |= OLED_SetDeviceCursor(0, i);
		Status |= OLED_SendData(&BufferVRAM[0 + (i*DISPLAY_WIDTH)], DISPLAY_WIDTH);
	}
	return Status;
}

void OLED_ClearBuffer(uint8_t color)
{
	memset(BufferVRAM, (color*0xFF), DISPLAY_WIDTH * (DISPLAY_HEIGHT/8));
}


//
//Text writing
//

OLED_Status OLED_ChangeFont(const uint8_t *Font)
{
	uint8_t Width, Height;
	Width = *(Font + 1);
	Height = *(Font + 2);
	if(MAX_FONT_HEIGHT < Height || MAX_FONT_WIDTH < Width)
	{
		return OLED_ERROR;
	}

	CurrentFont.FontPointer = Font;
	CurrentFont.FontWidth = Width;
	CurrentFont.FontHeight = Height;
	CurrentFont.FirstChar = *(Font + 3);
	return OLED_OK;
}

OLED_Status OLED_WriteChar(char character, uint8_t color)
{
	uint8_t Status = OLED_OK;
	if(color > 1)
	{
		return OLED_ERROR;
	}
	switch(character)
	{
	case '\r':	//carriage return
		return OLED_MoveCursor(0, Cursor.y);;

	case '\n':	//linefeed, next line
		return OLED_MoveCursor(Cursor.x, Cursor.y + 8);

	default: ;	//any other characters
		uint8_t i;
		uint8_t BytesToSend [MAX_FONT_WIDTH];
		uint16_t CharTableNumber = (character - CurrentFont.FirstChar ) * CurrentFont.FontWidth;  //calculate character position in font table
		const uint8_t *CharPointer = (CurrentFont.FontPointer + 4) + CharTableNumber;         //Increase pointer to this data

		for(i = 0; i < CurrentFont.FontWidth; i++)                                                //copy character from flash to buffer
		{
			BytesToSend[i] = *CharPointer;
			CharPointer++;
		}
		Status |= OLED_WriteToBuffer(BytesToSend,CurrentFont.FontWidth, color);                                         //print it
		if(Cursor.x + CurrentFont.FontWidth > DISPLAY_WIDTH - 1)
		{
			if(Cursor.y + 8 > (DISPLAY_HEIGHT/8) )
			{
				Status |= OLED_MoveCursor(0,0);
			}
			else
			{
				Status |= OLED_MoveCursor(0,Cursor.y + 8);
			}

		}
		return Status;
	}
}

OLED_Status OLED_WriteString(char *String, uint8_t color)
{
	uint8_t Status = OLED_OK;
	if(color > 1)
	{
		return OLED_ERROR;
	}

	while(*String)
	{
		Status |= OLED_WriteChar(*String, color);
		String++;
	}
	return Status;
}

OLED_Status OLED_WriteInt(int Value, uint8_t color)
{
	if(color > 1)
	{
		return OLED_ERROR;
	}

	char Buffer[5];
	sprintf(Buffer,"%d",Value);
	return OLED_WriteString(Buffer, color);
}

//
//Bitmaps drawing
//

OLED_Status OLED_DrawBitmapFlash(uint8_t x, uint8_t y, const uint8_t *bitmap, uint8_t color)
{
	uint8_t Status = OLED_OK;

	uint8_t Width = *(bitmap);                             //Read bitmap's width
	uint8_t Height = *(bitmap + 1);                        //Read bitmap's height
	uint8_t WidthToSend = Width;

	if( (Width-(DISPLAY_WIDTH-x)) > 0 )                                //Check if bitmap was placed out of range of display
	{
		WidthToSend = Width-(Width-(DISPLAY_WIDTH-x));                 //If it was, limit width to send to only visible part
	}                                                                  //This prevents from image looping at the screen beggining
	if(x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return OLED_ERROR;

	uint8_t BytesToDisplay[WidthToSend];
	uint8_t BitShift = y % 8; //value of bit shift
	uint8_t ShiftedFromPrevious[WidthToSend];
	uint8_t ShiftBuffer[WidthToSend];
	memset(&ShiftBuffer, 0x00, sizeof(ShiftBuffer));
	const uint8_t *ImageStart = bitmap + 2;

	uint8_t i,j;
	for(i = 0; i < (Height/8); i++)                                     //Data is sent by pages to the bottom of the screen
	{
		for(j = 0; j < WidthToSend; j++)                                //Copying current page's image data to ram
		{
			BytesToDisplay[j] = *(ImageStart + j);          			//Read oryginal
			if(BitShift == 0) continue;                                 //skip part below if there is no need for shifting image
                                                                        /*Bit shifting part in case when y coordinate isnt page's 0 bit*/
			ShiftedFromPrevious[j] = ShiftBuffer[j];                    //Save bits which were shifted out from previus byte (page) in order to add them to this byte
			ShiftBuffer[j] = (BytesToDisplay[j] >> (8 - BitShift));	    //Save shifted out bits for next page
			BytesToDisplay[j] <<= BitShift;                             //Shift original page's byte
			BytesToDisplay[j] |= ShiftedFromPrevious[j];                //Add bits shifted out from prevous page's byte to current page's byte
		}
		Status |= OLED_MoveCursor(x, (y + (i*8)) );                               //Move cursor to proper (next) page
		Status |= OLED_WriteToBuffer(BytesToDisplay, WidthToSend, color);         //Write one page data to buffer
		ImageStart += Width;                                            //Increase pointer to data for next page
		if( ((y/8) + i + 1) > (DISPLAY_HEIGHT/8) - 1) break;            //Prevent writing data out of display range
	}
	return Status;
}


