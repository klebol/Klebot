/*
 * controller_inputs.c
 *
 *  Created on: 5 maj 2023
 *      Author: miqix
 */

#include "controller_inputs.h"
#include "joystick.h"
#include "debounce.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"



//JoyStick Variables
uint16_t AdcSamples[40];
uint16_t AdcSamplesMean[4];
Joystick_t LeftJoystick;
Joystick_t RightJoystick;
uint8_t JoysitckCalibrationFlag;

//Buttons Variables
DB_Button_t ButtonUp;
DB_Button_t ButtonDown;
DB_Button_t ButtonLeftJ;
DB_Button_t ButtonRightJ;
DB_Button_t ButtonEncoder;


void Inputs_Init(void)
{
	/*Start ADC for Joysticks and init Joystick api library */
	HAL_TIM_Base_Start(&htim3);								//Update event for ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcSamples, 40);	//External trigger conversion source, Scan mode, DMA continuous requests, DMA circular mode
	HAL_Delay(50);
	JoyS_Init(&LeftJoystick, &AdcSamplesMean[0], &AdcSamplesMean[1]);
	JoyS_Init(&RightJoystick, &AdcSamplesMean[2], &AdcSamplesMean[3]);
	JoyS_SetIdleValues(&LeftJoystick);
	JoyS_SetIdleValues(&RightJoystick);

	/*Start Encoder timer */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

	/*Button debounce init */
	DB_ButtonInit(&ButtonUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 50, 2000);
	DB_ButtonInit(&ButtonDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 50, 2000);
	DB_ButtonInit(&ButtonLeftJ, BUTTON_JOY1_GPIO_Port, BUTTON_JOY1_Pin, 50, 2000);
	DB_ButtonInit(&ButtonRightJ, BUTTON_JOY2_GPIO_Port, BUTTON_JOY2_Pin, 50, 2000);
	DB_ButtonInit(&ButtonEncoder, BUTTON_ENC_GPIO_Port, BUTTON_ENC_Pin, 50, 2000);
}

//
// J O Y S T I C K
//
int8_t Inputs_GetLeftJoystickDev(uint8_t axis)
{
	if(JoysitckCalibrationFlag > 0)
	{
		return Joy_GetDeviationPercentCal(&LeftJoystick, axis);
	}
	else
	{
		return Joy_GetDeviationPercent(&LeftJoystick, axis);
	}
}

int8_t Inputs_GetRightJoystickDev(uint8_t axis)
{
	if(JoysitckCalibrationFlag > 0)
	{
		return Joy_GetDeviationPercentCal(&RightJoystick, axis);
	}
	else
	{
		return Joy_GetDeviationPercent(&RightJoystick, axis);
	}
}

void Inputs_CalibrateLeftJoystickMax(uint8_t axis)
{
	Joy_SetMaxValue(&LeftJoystick, axis);
}

void Inputs_CalibrateRightJoystickMax(uint8_t axis)
{
	Joy_SetMaxValue(&RightJoystick, axis);
}

void Inputs_CalibrateLeftJoystickMin(uint8_t axis)
{
	Joy_SetMinValue(&LeftJoystick, axis);
}

void Inputs_CalibrateRightJoystickMin(uint8_t axis)
{
	Joy_SetMinValue(&RightJoystick, axis);
}

void Inputs_CalibrateRightJoystickIdle(void)
{
	JoyS_SetIdleValues(&RightJoystick);
}

void Inputs_CalibrateLeftJoystickIdle(void)
{
	JoyS_SetIdleValues(&LeftJoystick);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//getting 10 samples of ADC, each
{
	uint32_t ValuesBuffer[4];

	ValuesBuffer[0] = 0;
	ValuesBuffer[1] = 0;
	ValuesBuffer[2] = 0;
	ValuesBuffer[3] = 0;

	for(uint8_t i = 0; i < 37; i+=4)
	{
		ValuesBuffer[0] += AdcSamples[i];
		ValuesBuffer[1] += AdcSamples[i+1];
		ValuesBuffer[2] += AdcSamples[i+2];
		ValuesBuffer[3] += AdcSamples[i+3];
	}

	AdcSamplesMean[0] = ValuesBuffer[0]/10;
	AdcSamplesMean[1] = ValuesBuffer[1]/10;
	AdcSamplesMean[2] = ValuesBuffer[2]/10;
	AdcSamplesMean[3] = ValuesBuffer[3]/10;
}

//
// E N C O D E R
//
int8_t Inputs_GetEncoderCount(void)
{
	static uint16_t LastTimerCounter = 0;
	int CounterDif = htim3.Instance->CNT - LastTimerCounter;
	if(CounterDif >= 4 || CounterDif <= -4)
	{
		LastTimerCounter = htim3.Instance->CNT;
		return (int8_t)(-CounterDif / 4);
	}
	else
	{
		return 0;
	}
}

//
// B U T T O N S
//


void Inputs_ButtonsRoutine(void)
{
	DB_ButtonProcess(&ButtonUp);
	DB_ButtonProcess(&ButtonDown);
	DB_ButtonProcess(&ButtonRightJ);
	DB_ButtonProcess(&ButtonLeftJ);
	DB_ButtonProcess(&ButtonEncoder);
}

void Inputs_ButtonsRegisterCallback(uint8_t ButtonID, void(*PressActionFun)(void), void(*HoldActionFun)(void))
{
	switch(ButtonID)
	{
	case UP_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonUp, PressActionFun, HoldActionFun);
		break;
	case DOWN_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonDown, PressActionFun, HoldActionFun);
		break;
	case LJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonLeftJ, PressActionFun, HoldActionFun);
		break;
	case RJ_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonRightJ, PressActionFun, HoldActionFun);
		break;
	case ENC_BUTTON:
		DB_ButtonPressCallbackRegister(&ButtonEncoder, PressActionFun, HoldActionFun);
		break;
	default:
		break;
	}
}

void Inputs_ClearButtonsCallbacks(void)
{
	DB_ButtonPressCallbackRegister(&ButtonUp, NULL, NULL);
	DB_ButtonPressCallbackRegister(&ButtonDown, NULL, NULL);
	DB_ButtonPressCallbackRegister(&ButtonLeftJ, NULL, NULL);
	DB_ButtonPressCallbackRegister(&ButtonRightJ, NULL, NULL);
	DB_ButtonPressCallbackRegister(&ButtonEncoder, NULL, NULL);
}

