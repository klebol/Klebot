/*
 * controller_programs.c
 *
 *  Created on: Nov 16, 2023
 *      Author: Michal Klebokowski
 */

#include "Programs/controller_programs.h"
#include "klebot_radio.h"
#include "klebot_commands.h"

/*Pointer to current running program struct */
Programs_Program_t *CurrentlyRunningProg;

uint16_t TimeoutStamp;

Programs_status_t ProgramState = NO_PROGRAM_SET;


//
// -- General functions to manage programs --
//

/* Function starting a launch of specific program by setting current pointer
 *  			to program and sending start command to robot 				*/
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
	if(NULL == ProgramToSet)
	{
		return PROGRAMS_ERROR;
	}

	if(NULL == CurrentlyRunningProg)
	{

		CurrentlyRunningProg = ProgramToSet;
		Programs_SendProgramStartCommand(ProgramToSet->ProgramID);
		TimeoutStamp = HAL_GetTick();
		ProgramState = PROGRAM_LAUNCHING;
		return PROGRAMS_OK;
	}
	else
	{
		return PROGRAMS_ERROR;
	}
}


void Programs_ExitProgram(void)
{
	CurrentlyRunningProg->ProgramExitFunction();
	Programs_SendProgramExitCommand();
	TimeoutStamp = HAL_GetTick();
	ProgramState = PROGRAM_EXITING;

}

/* Function which returns current pointer to program */
Programs_Program_t* Programs_GetProgram(void)
{
	return CurrentlyRunningProg;
}


void Programs_ClearProgram(void)
{
	CurrentlyRunningProg = NULL;
	ProgramState = NO_PROGRAM_SET;
}

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
	switch(ProgramState)
	{
	case NO_PROGRAM_SET:

		break;

	case PROGRAM_LAUNCHING:
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_START_TIMEOUT_MS)
		{
			ProgramState = PROGRAM_LAUNCH_ERROR;
		}

		break;

	case PROGRAM_IN_PROGRESS:
		CurrentlyRunningProg->ProgramRoutine();

		break;

	case PROGRAM_EXITING:
		if(HAL_GetTick() - TimeoutStamp > PROGRAM_EXIT_TIMEOUT_MS)
		{
			ProgramState = PROGRAM_EXIT_ERROR;
		}
		break;

	case PROGRAM_COMPLETED:

		break;

	case PROGRAM_LAUNCH_ERROR:
		Programs_ClearProgram();
		//temporary solution error handle



		break;

	case PROGRAM_EXIT_ERROR:

		break;

	default:
		break;
	}

	return ProgramState;



}

//
//	-- Sending programs start/exit commands --
//

Programs_error_t Programs_SendProgramStartCommand(uint8_t ProgramID)
{
	uint8_t Buffer[2];
	Buffer[0] = START_PROGRAM;
	Buffer[1] = ProgramID;
	return Radio_TxBufferPut(Buffer, 2);
}

Programs_error_t Programs_SendProgramExitCommand(void)
{
	uint8_t Buffer = EXIT_PROGRAM;
	return Radio_TxBufferPut(&Buffer, 1);
}

//
// -- Functions for parser to ACK launch/exit --
//

/* This functions are called by parser, when the robot acknowledges the proper program launch */

void Programs_ProgramLaunchedACK(uint8_t ProgramID)
{
	if(PROGRAM_LAUNCHING == ProgramState && ProgramID == CurrentlyRunningProg->ProgramID)
	{
		/* Call an init function for program which is being launched */
		CurrentlyRunningProg->ProgramInitFunction();
		/* Change the program state for program in progess state, which will allow the program itself to run */
		ProgramState = PROGRAM_IN_PROGRESS;
	}
	else
	{
		//ERROR
	}
}

void Programs_ProgramExitACK(void)
{
	if(PROGRAM_EXITING == ProgramState)
	{
		ProgramState = PROGRAM_COMPLETED;
	}
}
