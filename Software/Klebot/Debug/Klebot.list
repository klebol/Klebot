
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000987c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08009a68  08009a68  00019a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e24  08009e24  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e2c  08009e2c  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e30  08009e30  00019e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08009e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000260  0800a094  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  2000071c  0800a094  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001620e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e86  00000000  00000000  000364da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f6  00000000  00000000  0003b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230f9  00000000  00000000  0003ca66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6de  00000000  00000000  0005fb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c22eb  00000000  00000000  0007c23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b60  00000000  00000000  0013e528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00145088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000260 	.word	0x20000260
 8000204:	00000000 	.word	0x00000000
 8000208:	08009a4c 	.word	0x08009a4c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000264 	.word	0x20000264
 8000224:	08009a4c 	.word	0x08009a4c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_f2iz>:
 8000ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30f      	bcc.n	8000f0e <__aeabi_f2iz+0x2a>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d90d      	bls.n	8000f14 <__aeabi_f2iz+0x30>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f04:	fa23 f002 	lsr.w	r0, r3, r2
 8000f08:	bf18      	it	ne
 8000f0a:	4240      	negne	r0, r0
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2iz+0x3a>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d105      	bne.n	8000f2a <__aeabi_f2iz+0x46>
 8000f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f28:	4770      	bx	lr
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_uldivmod>:
 8000f30:	b953      	cbnz	r3, 8000f48 <__aeabi_uldivmod+0x18>
 8000f32:	b94a      	cbnz	r2, 8000f48 <__aeabi_uldivmod+0x18>
 8000f34:	2900      	cmp	r1, #0
 8000f36:	bf08      	it	eq
 8000f38:	2800      	cmpeq	r0, #0
 8000f3a:	bf1c      	itt	ne
 8000f3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f40:	f04f 30ff 	movne.w	r0, #4294967295
 8000f44:	f000 b972 	b.w	800122c <__aeabi_idiv0>
 8000f48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f50:	f000 f806 	bl	8000f60 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <__udivmoddi4>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	9e08      	ldr	r6, [sp, #32]
 8000f66:	460d      	mov	r5, r1
 8000f68:	4604      	mov	r4, r0
 8000f6a:	468e      	mov	lr, r1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d14c      	bne.n	800100a <__udivmoddi4+0xaa>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	4694      	mov	ip, r2
 8000f74:	d967      	bls.n	8001046 <__udivmoddi4+0xe6>
 8000f76:	fab2 f382 	clz	r3, r2
 8000f7a:	b153      	cbz	r3, 8000f92 <__udivmoddi4+0x32>
 8000f7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f80:	f1c3 0220 	rsb	r2, r3, #32
 8000f84:	fa01 fe03 	lsl.w	lr, r1, r3
 8000f88:	fa20 f202 	lsr.w	r2, r0, r2
 8000f8c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000f90:	409c      	lsls	r4, r3
 8000f92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f96:	fbbe f1f7 	udiv	r1, lr, r7
 8000f9a:	fa1f f58c 	uxth.w	r5, ip
 8000f9e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000fa2:	fb01 f005 	mul.w	r0, r1, r5
 8000fa6:	0c22      	lsrs	r2, r4, #16
 8000fa8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d90a      	bls.n	8000fc6 <__udivmoddi4+0x66>
 8000fb0:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000fb8:	f080 8119 	bcs.w	80011ee <__udivmoddi4+0x28e>
 8000fbc:	4290      	cmp	r0, r2
 8000fbe:	f240 8116 	bls.w	80011ee <__udivmoddi4+0x28e>
 8000fc2:	3902      	subs	r1, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000fd0:	fb00 f505 	mul.w	r5, r0, r5
 8000fd4:	b2a4      	uxth	r4, r4
 8000fd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fda:	42a5      	cmp	r5, r4
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x94>
 8000fde:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe6:	f080 8104 	bcs.w	80011f2 <__udivmoddi4+0x292>
 8000fea:	42a5      	cmp	r5, r4
 8000fec:	f240 8101 	bls.w	80011f2 <__udivmoddi4+0x292>
 8000ff0:	4464      	add	r4, ip
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	1b64      	subs	r4, r4, r5
 8000ffc:	b11e      	cbz	r6, 8001006 <__udivmoddi4+0xa6>
 8000ffe:	40dc      	lsrs	r4, r3
 8001000:	2300      	movs	r3, #0
 8001002:	e9c6 4300 	strd	r4, r3, [r6]
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	428b      	cmp	r3, r1
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0xc0>
 800100e:	2e00      	cmp	r6, #0
 8001010:	f000 80ea 	beq.w	80011e8 <__udivmoddi4+0x288>
 8001014:	2100      	movs	r1, #0
 8001016:	e9c6 0500 	strd	r0, r5, [r6]
 800101a:	4608      	mov	r0, r1
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001020:	fab3 f183 	clz	r1, r3
 8001024:	2900      	cmp	r1, #0
 8001026:	d148      	bne.n	80010ba <__udivmoddi4+0x15a>
 8001028:	42ab      	cmp	r3, r5
 800102a:	d302      	bcc.n	8001032 <__udivmoddi4+0xd2>
 800102c:	4282      	cmp	r2, r0
 800102e:	f200 80f8 	bhi.w	8001222 <__udivmoddi4+0x2c2>
 8001032:	1a84      	subs	r4, r0, r2
 8001034:	eb65 0203 	sbc.w	r2, r5, r3
 8001038:	2001      	movs	r0, #1
 800103a:	4696      	mov	lr, r2
 800103c:	2e00      	cmp	r6, #0
 800103e:	d0e2      	beq.n	8001006 <__udivmoddi4+0xa6>
 8001040:	e9c6 4e00 	strd	r4, lr, [r6]
 8001044:	e7df      	b.n	8001006 <__udivmoddi4+0xa6>
 8001046:	b902      	cbnz	r2, 800104a <__udivmoddi4+0xea>
 8001048:	deff      	udf	#255	; 0xff
 800104a:	fab2 f382 	clz	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 808e 	bne.w	8001170 <__udivmoddi4+0x210>
 8001054:	1a88      	subs	r0, r1, r2
 8001056:	2101      	movs	r1, #1
 8001058:	0c17      	lsrs	r7, r2, #16
 800105a:	fa1f fe82 	uxth.w	lr, r2
 800105e:	fbb0 f5f7 	udiv	r5, r0, r7
 8001062:	fb07 0015 	mls	r0, r7, r5, r0
 8001066:	0c22      	lsrs	r2, r4, #16
 8001068:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800106c:	fb0e f005 	mul.w	r0, lr, r5
 8001070:	4290      	cmp	r0, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x126>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d202      	bcs.n	8001084 <__udivmoddi4+0x124>
 800107e:	4290      	cmp	r0, r2
 8001080:	f200 80cc 	bhi.w	800121c <__udivmoddi4+0x2bc>
 8001084:	4645      	mov	r5, r8
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	fbb2 f0f7 	udiv	r0, r2, r7
 800108c:	fb07 2210 	mls	r2, r7, r0, r2
 8001090:	fb0e fe00 	mul.w	lr, lr, r0
 8001094:	b2a4      	uxth	r4, r4
 8001096:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800109a:	45a6      	cmp	lr, r4
 800109c:	d908      	bls.n	80010b0 <__udivmoddi4+0x150>
 800109e:	eb1c 0404 	adds.w	r4, ip, r4
 80010a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80010a6:	d202      	bcs.n	80010ae <__udivmoddi4+0x14e>
 80010a8:	45a6      	cmp	lr, r4
 80010aa:	f200 80b4 	bhi.w	8001216 <__udivmoddi4+0x2b6>
 80010ae:	4610      	mov	r0, r2
 80010b0:	eba4 040e 	sub.w	r4, r4, lr
 80010b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80010b8:	e7a0      	b.n	8000ffc <__udivmoddi4+0x9c>
 80010ba:	f1c1 0720 	rsb	r7, r1, #32
 80010be:	408b      	lsls	r3, r1
 80010c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80010c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80010cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d0:	fbba f8f9 	udiv	r8, sl, r9
 80010d4:	408d      	lsls	r5, r1
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	432b      	orrs	r3, r5
 80010e4:	fa00 f501 	lsl.w	r5, r0, r1
 80010e8:	fb08 f00e 	mul.w	r0, r8, lr
 80010ec:	0c1c      	lsrs	r4, r3, #16
 80010ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f2:	42a0      	cmp	r0, r4
 80010f4:	fa02 f201 	lsl.w	r2, r2, r1
 80010f8:	d90b      	bls.n	8001112 <__udivmoddi4+0x1b2>
 80010fa:	eb1c 0404 	adds.w	r4, ip, r4
 80010fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8001102:	f080 8086 	bcs.w	8001212 <__udivmoddi4+0x2b2>
 8001106:	42a0      	cmp	r0, r4
 8001108:	f240 8083 	bls.w	8001212 <__udivmoddi4+0x2b2>
 800110c:	f1a8 0802 	sub.w	r8, r8, #2
 8001110:	4464      	add	r4, ip
 8001112:	1a24      	subs	r4, r4, r0
 8001114:	b298      	uxth	r0, r3
 8001116:	fbb4 f3f9 	udiv	r3, r4, r9
 800111a:	fb09 4413 	mls	r4, r9, r3, r4
 800111e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001122:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001126:	45a6      	cmp	lr, r4
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x1dc>
 800112a:	eb1c 0404 	adds.w	r4, ip, r4
 800112e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001132:	d26a      	bcs.n	800120a <__udivmoddi4+0x2aa>
 8001134:	45a6      	cmp	lr, r4
 8001136:	d968      	bls.n	800120a <__udivmoddi4+0x2aa>
 8001138:	3b02      	subs	r3, #2
 800113a:	4464      	add	r4, ip
 800113c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001140:	fba0 9302 	umull	r9, r3, r0, r2
 8001144:	eba4 040e 	sub.w	r4, r4, lr
 8001148:	429c      	cmp	r4, r3
 800114a:	46c8      	mov	r8, r9
 800114c:	469e      	mov	lr, r3
 800114e:	d354      	bcc.n	80011fa <__udivmoddi4+0x29a>
 8001150:	d051      	beq.n	80011f6 <__udivmoddi4+0x296>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d067      	beq.n	8001226 <__udivmoddi4+0x2c6>
 8001156:	ebb5 0308 	subs.w	r3, r5, r8
 800115a:	eb64 040e 	sbc.w	r4, r4, lr
 800115e:	40cb      	lsrs	r3, r1
 8001160:	fa04 f707 	lsl.w	r7, r4, r7
 8001164:	431f      	orrs	r7, r3
 8001166:	40cc      	lsrs	r4, r1
 8001168:	e9c6 7400 	strd	r7, r4, [r6]
 800116c:	2100      	movs	r1, #0
 800116e:	e74a      	b.n	8001006 <__udivmoddi4+0xa6>
 8001170:	fa02 fc03 	lsl.w	ip, r2, r3
 8001174:	f1c3 0020 	rsb	r0, r3, #32
 8001178:	40c1      	lsrs	r1, r0
 800117a:	409d      	lsls	r5, r3
 800117c:	fa24 f000 	lsr.w	r0, r4, r0
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	4328      	orrs	r0, r5
 8001186:	fbb1 f5f7 	udiv	r5, r1, r7
 800118a:	fb07 1115 	mls	r1, r7, r5, r1
 800118e:	fa1f fe8c 	uxth.w	lr, ip
 8001192:	0c02      	lsrs	r2, r0, #16
 8001194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001198:	fb05 f10e 	mul.w	r1, r5, lr
 800119c:	4291      	cmp	r1, r2
 800119e:	fa04 f403 	lsl.w	r4, r4, r3
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x256>
 80011a4:	eb1c 0202 	adds.w	r2, ip, r2
 80011a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011ac:	d22f      	bcs.n	800120e <__udivmoddi4+0x2ae>
 80011ae:	4291      	cmp	r1, r2
 80011b0:	d92d      	bls.n	800120e <__udivmoddi4+0x2ae>
 80011b2:	3d02      	subs	r5, #2
 80011b4:	4462      	add	r2, ip
 80011b6:	1a52      	subs	r2, r2, r1
 80011b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80011bc:	fb07 2211 	mls	r2, r7, r1, r2
 80011c0:	b280      	uxth	r0, r0
 80011c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011c6:	fb01 f20e 	mul.w	r2, r1, lr
 80011ca:	4282      	cmp	r2, r0
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x280>
 80011ce:	eb1c 0000 	adds.w	r0, ip, r0
 80011d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80011d6:	d216      	bcs.n	8001206 <__udivmoddi4+0x2a6>
 80011d8:	4282      	cmp	r2, r0
 80011da:	d914      	bls.n	8001206 <__udivmoddi4+0x2a6>
 80011dc:	3902      	subs	r1, #2
 80011de:	4460      	add	r0, ip
 80011e0:	1a80      	subs	r0, r0, r2
 80011e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011e6:	e73a      	b.n	800105e <__udivmoddi4+0xfe>
 80011e8:	4631      	mov	r1, r6
 80011ea:	4630      	mov	r0, r6
 80011ec:	e70b      	b.n	8001006 <__udivmoddi4+0xa6>
 80011ee:	4671      	mov	r1, lr
 80011f0:	e6e9      	b.n	8000fc6 <__udivmoddi4+0x66>
 80011f2:	4610      	mov	r0, r2
 80011f4:	e6fe      	b.n	8000ff4 <__udivmoddi4+0x94>
 80011f6:	454d      	cmp	r5, r9
 80011f8:	d2ab      	bcs.n	8001152 <__udivmoddi4+0x1f2>
 80011fa:	ebb9 0802 	subs.w	r8, r9, r2
 80011fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001202:	3801      	subs	r0, #1
 8001204:	e7a5      	b.n	8001152 <__udivmoddi4+0x1f2>
 8001206:	4641      	mov	r1, r8
 8001208:	e7ea      	b.n	80011e0 <__udivmoddi4+0x280>
 800120a:	4603      	mov	r3, r0
 800120c:	e796      	b.n	800113c <__udivmoddi4+0x1dc>
 800120e:	4645      	mov	r5, r8
 8001210:	e7d1      	b.n	80011b6 <__udivmoddi4+0x256>
 8001212:	46d0      	mov	r8, sl
 8001214:	e77d      	b.n	8001112 <__udivmoddi4+0x1b2>
 8001216:	4464      	add	r4, ip
 8001218:	3802      	subs	r0, #2
 800121a:	e749      	b.n	80010b0 <__udivmoddi4+0x150>
 800121c:	3d02      	subs	r5, #2
 800121e:	4462      	add	r2, ip
 8001220:	e731      	b.n	8001086 <__udivmoddi4+0x126>
 8001222:	4608      	mov	r0, r1
 8001224:	e70a      	b.n	800103c <__udivmoddi4+0xdc>
 8001226:	4631      	mov	r1, r6
 8001228:	e6ed      	b.n	8001006 <__udivmoddi4+0xa6>
 800122a:	bf00      	nop

0800122c <__aeabi_idiv0>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <FIRFilter_Init>:




void FIRFilter_Init(FIRFilter *fir)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e008      	b.n	8001250 <FIRFilter_Init+0x20>
	{
		fir->buf[n] = 0.0f;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f04f 0100 	mov.w	r1, #0
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	3301      	adds	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b18      	cmp	r3, #24
 8001254:	d9f3      	bls.n	800123e <FIRFilter_Init+0xe>
	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	/* Clear filter output */
	fir->out = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001280:	4619      	mov	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	if(fir->bufIndex == FIR_FILTER_LENGTH)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80012a0:	2b19      	cmp	r3, #25
 80012a2:	d103      	bne.n	80012ac <FIRFilter_Update+0x3c>
	{
		fir->bufIndex = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}

	/* Compute new output sample (via convulation) */
	fir->out = 0.0f;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	669a      	str	r2, [r3, #104]	; 0x68

	uint8_t sumIndex = fir->bufIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80012ba:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73bb      	strb	r3, [r7, #14]
 80012c0:	e021      	b.n	8001306 <FIRFilter_Update+0x96>
	{
		/* Decrement index and wrap if necessary */
		if (sumIndex > 0)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <FIRFilter_Update+0x60>
		{
			sumIndex--;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e001      	b.n	80012d4 <FIRFilter_Update+0x64>
		}
		else
		{
			sumIndex = FIR_FILTER_LENGTH - 1;
 80012d0:	2318      	movs	r3, #24
 80012d2:	73fb      	strb	r3, [r7, #15]
		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <FIRFilter_Update+0xa8>)
 80012dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7fe ffa5 	bl	8000238 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fcee 	bl	8000cd4 <__addsf3>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	669a      	str	r2, [r3, #104]	; 0x68
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	3301      	adds	r3, #1
 8001304:	73bb      	strb	r3, [r7, #14]
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	2b18      	cmp	r3, #24
 800130a:	d9da      	bls.n	80012c2 <FIRFilter_Update+0x52>
	}

	/* Return filtered output */
	return fir->out;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000000 	.word	0x20000000

0800131c <RBuffer_Write>:
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132e:	3301      	adds	r3, #1
 8001330:	425a      	negs	r2, r3
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	f002 021f 	and.w	r2, r2, #31
 800133a:	bf58      	it	pl
 800133c:	4253      	negpl	r3, r2
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	429a      	cmp	r2, r3
 800134a:	d101      	bne.n	8001350 <RBuffer_Write+0x34>
 800134c:	2301      	movs	r3, #1
 800134e:	e00b      	b.n	8001368 <RBuffer_Write+0x4c>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	4619      	mov	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	545a      	strb	r2, [r3, r1]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
 8001366:	2300      	movs	r3, #0
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <RBuffer_Read>:
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001382:	3301      	adds	r3, #1
 8001384:	425a      	negs	r2, r3
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	bf58      	it	pl
 8001390:	4253      	negpl	r3, r2
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d101      	bne.n	80013a8 <RBuffer_Read+0x36>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e00c      	b.n	80013c2 <RBuffer_Read+0x50>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	5c9a      	ldrb	r2, [r3, r2]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80013c0:	2300      	movs	r3, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <MX_GPIO_Init>:
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <MX_GPIO_Init+0x154>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <MX_GPIO_Init+0x154>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <MX_GPIO_Init+0x154>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <MX_GPIO_Init+0x154>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <MX_GPIO_Init+0x154>)
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <MX_GPIO_Init+0x154>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <MX_GPIO_Init+0x154>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a42      	ldr	r2, [pc, #264]	; (8001520 <MX_GPIO_Init+0x154>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b40      	ldr	r3, [pc, #256]	; (8001520 <MX_GPIO_Init+0x154>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <MX_GPIO_Init+0x154>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <MX_GPIO_Init+0x154>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <MX_GPIO_Init+0x154>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	f246 0103 	movw	r1, #24579	; 0x6003
 8001446:	4837      	ldr	r0, [pc, #220]	; (8001524 <MX_GPIO_Init+0x158>)
 8001448:	f002 fdae 	bl	8003fa8 <HAL_GPIO_WritePin>
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	4835      	ldr	r0, [pc, #212]	; (8001528 <MX_GPIO_Init+0x15c>)
 8001452:	f002 fda9 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001456:	2200      	movs	r2, #0
 8001458:	2110      	movs	r1, #16
 800145a:	4834      	ldr	r0, [pc, #208]	; (800152c <MX_GPIO_Init+0x160>)
 800145c:	f002 fda4 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001460:	f246 0302 	movw	r3, #24578	; 0x6002
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	482a      	ldr	r0, [pc, #168]	; (8001524 <MX_GPIO_Init+0x158>)
 800147a:	f002 fc11 	bl	8003ca0 <HAL_GPIO_Init>
 800147e:	2301      	movs	r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	2303      	movs	r3, #3
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_GPIO_Init+0x158>)
 8001496:	f002 fc03 	bl	8003ca0 <HAL_GPIO_Init>
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4820      	ldr	r0, [pc, #128]	; (8001530 <MX_GPIO_Init+0x164>)
 80014b0:	f002 fbf6 	bl	8003ca0 <HAL_GPIO_Init>
 80014b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_GPIO_Init+0x168>)
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <MX_GPIO_Init+0x164>)
 80014ca:	f002 fbe9 	bl	8003ca0 <HAL_GPIO_Init>
 80014ce:	2304      	movs	r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	2301      	movs	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	2302      	movs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_GPIO_Init+0x15c>)
 80014e6:	f002 fbdb 	bl	8003ca0 <HAL_GPIO_Init>
 80014ea:	2310      	movs	r3, #16
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <MX_GPIO_Init+0x160>)
 8001502:	f002 fbcd 	bl	8003ca0 <HAL_GPIO_Init>
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f002 fb91 	bl	8003c32 <HAL_NVIC_SetPriority>
 8001510:	2028      	movs	r0, #40	; 0x28
 8001512:	f002 fbaa 	bl	8003c6a <HAL_NVIC_EnableIRQ>
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40011000 	.word	0x40011000
 8001528:	40011400 	.word	0x40011400
 800152c:	40010c00 	.word	0x40010c00
 8001530:	40010800 	.word	0x40010800
 8001534:	10210000 	.word	0x10210000

08001538 <MX_I2C1_Init>:
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C1_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C1_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C1_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C1_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C1_Init+0x50>)
 8001576:	f002 fd61 	bl	800403c <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x4c>
 8001580:	f000 fb6f 	bl	8001c62 <Error_Handler>
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000027c 	.word	0x2000027c
 800158c:	40005400 	.word	0x40005400
 8001590:	00061a80 	.word	0x00061a80

08001594 <HAL_I2C_MspInit>:
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_I2C_MspInit+0x90>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d132      	bne.n	800161a <HAL_I2C_MspInit+0x86>
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_I2C_MspInit+0x94>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <HAL_I2C_MspInit+0x94>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_I2C_MspInit+0x94>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	2312      	movs	r3, #18
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <HAL_I2C_MspInit+0x98>)
 80015e2:	f002 fb5d 	bl	8003ca0 <HAL_GPIO_Init>
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_I2C_MspInit+0x9c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_I2C_MspInit+0x9c>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	6053      	str	r3, [r2, #4]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_I2C_MspInit+0x94>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_I2C_MspInit+0x94>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_I2C_MspInit+0x94>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40005400 	.word	0x40005400
 8001628:	40021000 	.word	0x40021000
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40010000 	.word	0x40010000

08001634 <Parser_ParseProgramLaunchCommand>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2bd0      	cmp	r3, #208	; 0xd0
 8001642:	d002      	beq.n	800164a <Parser_ParseProgramLaunchCommand+0x16>
 8001644:	2bd1      	cmp	r3, #209	; 0xd1
 8001646:	d005      	beq.n	8001654 <Parser_ParseProgramLaunchCommand+0x20>
 8001648:	e009      	b.n	800165e <Parser_ParseProgramLaunchCommand+0x2a>
 800164a:	f002 f833 	bl	80036b4 <Prog_DiodeTest_Launch>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e007      	b.n	8001664 <Parser_ParseProgramLaunchCommand+0x30>
 8001654:	f002 f88e 	bl	8003774 <Prog_MotorsDebug_Launch>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e002      	b.n	8001664 <Parser_ParseProgramLaunchCommand+0x30>
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	bf00      	nop
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <Parser_ParseProgramLaunchCommand+0x42>
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	21f0      	movs	r1, #240	; 0xf0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f92e 	bl	80038d0 <Programs_SendProgramStartedACK>
 8001674:	e004      	b.n	8001680 <Parser_ParseProgramLaunchCommand+0x4c>
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	21f1      	movs	r1, #241	; 0xf1
 800167a:	4618      	mov	r0, r3
 800167c:	f002 f928 	bl	80038d0 <Programs_SendProgramStartedACK>
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <Parser_Klebot>:
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	74fb      	strb	r3, [r7, #19]
 800169c:	f002 f8d8 	bl	8003850 <Programs_GetProgram>
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d012      	beq.n	80016ce <Parser_Klebot+0x46>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	7c1b      	ldrb	r3, [r3, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10c      	bne.n	80016ce <Parser_Klebot+0x46>
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	7cfb      	ldrb	r3, [r7, #19]
 80016bc:	3b01      	subs	r3, #1
 80016be:	74fb      	strb	r3, [r7, #19]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	7cfa      	ldrb	r2, [r7, #19]
 80016c6:	4611      	mov	r1, r2
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	4798      	blx	r3
 80016cc:	e014      	b.n	80016f8 <Parser_Klebot+0x70>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d002      	beq.n	80016dc <Parser_Klebot+0x54>
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d008      	beq.n	80016ec <Parser_Klebot+0x64>
 80016da:	e00d      	b.n	80016f8 <Parser_Klebot+0x70>
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	72fb      	strb	r3, [r7, #11]
 80016e2:	7afb      	ldrb	r3, [r7, #11]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ffa5 	bl	8001634 <Parser_ParseProgramLaunchCommand>
 80016ea:	e005      	b.n	80016f8 <Parser_Klebot+0x70>
 80016ec:	f002 f8a0 	bl	8003830 <Programs_ExitProgram>
 80016f0:	20f0      	movs	r0, #240	; 0xf0
 80016f2:	f002 f906 	bl	8003902 <Programs_SendProgramExitACK>
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <Radio_Init>:
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fed3 	bl	80024b4 <nRF24_Init>
 800170e:	4906      	ldr	r1, [pc, #24]	; (8001728 <Radio_Init+0x28>)
 8001710:	2000      	movs	r0, #0
 8001712:	f000 fd3c 	bl	800218e <nRF24_SetRXAddress>
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <Radio_Init+0x2c>)
 8001718:	f000 fd72 	bl	8002200 <nRF24_SetTXAddress>
 800171c:	f000 fb76 	bl	8001e0c <nRF24_RX_Mode>
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	08009a68 	.word	0x08009a68
 800172c:	08009a6c 	.word	0x08009a6c

08001730 <Radio_RxBufferPut>:
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	2300      	movs	r3, #0
 8001742:	73bb      	strb	r3, [r7, #14]
 8001744:	e010      	b.n	8001768 <Radio_RxBufferPut+0x38>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <Radio_RxBufferPut+0x4c>)
 800174e:	f7ff fde5 	bl	800131c <RBuffer_Write>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4313      	orrs	r3, r2
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	3301      	adds	r3, #1
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	7bba      	ldrb	r2, [r7, #14]
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3ea      	bcc.n	8001746 <Radio_RxBufferPut+0x16>
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002f8 	.word	0x200002f8

08001780 <Radio_RxBufferGet>:
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	2300      	movs	r3, #0
 8001790:	73bb      	strb	r3, [r7, #14]
 8001792:	f107 030d 	add.w	r3, r7, #13
 8001796:	4619      	mov	r1, r3
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <Radio_RxBufferGet+0x6c>)
 800179a:	f7ff fdea 	bl	8001372 <RBuffer_Read>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	73bb      	strb	r3, [r7, #14]
 80017a8:	e012      	b.n	80017d0 <Radio_RxBufferGet+0x50>
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	7b7a      	ldrb	r2, [r7, #13]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	3301      	adds	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	f107 030d 	add.w	r3, r7, #13
 80017be:	4619      	mov	r1, r3
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <Radio_RxBufferGet+0x6c>)
 80017c2:	f7ff fdd6 	bl	8001372 <RBuffer_Read>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	73bb      	strb	r3, [r7, #14]
 80017d0:	7b7b      	ldrb	r3, [r7, #13]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d002      	beq.n	80017dc <Radio_RxBufferGet+0x5c>
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0e6      	beq.n	80017aa <Radio_RxBufferGet+0x2a>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200002f8 	.word	0x200002f8

080017f0 <Radio_TxBufferPut>:
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	2300      	movs	r3, #0
 8001802:	73bb      	strb	r3, [r7, #14]
 8001804:	e010      	b.n	8001828 <Radio_TxBufferPut+0x38>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	480f      	ldr	r0, [pc, #60]	; (800184c <Radio_TxBufferPut+0x5c>)
 800180e:	f7ff fd85 	bl	800131c <RBuffer_Write>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	4313      	orrs	r3, r2
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	3301      	adds	r3, #1
 8001826:	73bb      	strb	r3, [r7, #14]
 8001828:	7bba      	ldrb	r2, [r7, #14]
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3ea      	bcc.n	8001806 <Radio_TxBufferPut+0x16>
 8001830:	2104      	movs	r1, #4
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <Radio_TxBufferPut+0x5c>)
 8001834:	f7ff fd72 	bl	800131c <RBuffer_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002d4 	.word	0x200002d4

08001850 <Radio_TxBufferSend>:
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001866:	1d3a      	adds	r2, r7, #4
 8001868:	4413      	add	r3, r2
 800186a:	4619      	mov	r1, r3
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <Radio_TxBufferSend+0x78>)
 800186e:	f7ff fd80 	bl	8001372 <RBuffer_Read>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800187a:	4313      	orrs	r3, r2
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800188a:	3328      	adds	r3, #40	; 0x28
 800188c:	443b      	add	r3, r7
 800188e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d003      	beq.n	800189e <Radio_TxBufferSend+0x4e>
 8001896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <Radio_TxBufferSend+0x12>
 800189e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <Radio_TxBufferSend+0x6a>
 80018a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 fe68 	bl	8002584 <nRF24_WriteAckPayload>
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <Radio_TxBufferSend+0x7c>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018be:	4618      	mov	r0, r3
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200002d4 	.word	0x200002d4
 80018cc:	200002d1 	.word	0x200002d1

080018d0 <Radio_Process>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	f000 fdc5 	bl	8002464 <nRF24_Event>
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <Radio_Process+0x64>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <Radio_Process+0x16>
 80018e2:	f7ff ffb5 	bl	8001850 <Radio_TxBufferSend>
 80018e6:	f002 f89f 	bl	8003a28 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <Radio_Process+0x68>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b96      	cmp	r3, #150	; 0x96
 80018f4:	d904      	bls.n	8001900 <Radio_Process+0x30>
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <Radio_Process+0x6c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	f000 f832 	bl	8001964 <Radio_NoConnectionCallback>
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <Radio_Process+0x70>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d110      	bne.n	800192a <Radio_Process+0x5a>
 8001908:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff35 	bl	8001780 <Radio_RxBufferGet>
 8001916:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8b2 	bl	8001a88 <Radio_NewCommandReceivedCallback>
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <Radio_Process+0x70>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002d1 	.word	0x200002d1
 8001938:	2000031c 	.word	0x2000031c
 800193c:	200002d0 	.word	0x200002d0
 8001940:	200002d2 	.word	0x200002d2

08001944 <Radio_GetConnectionStatus>:
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <Radio_GetConnectionStatus+0x10>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	200002d0 	.word	0x200002d0

08001958 <Radio_HandlerIRQ>:
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
 800195c:	f000 fd30 	bl	80023c0 <nRF24_IRQ_Handler>
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <Radio_NoConnectionCallback>:
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <nRF24_EventTxCallback>:
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <nRF24_EventTxCallback+0x18>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <nRF24_EventTxCallback+0x1c>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	200002d1 	.word	0x200002d1
 800198c:	200002d0 	.word	0x200002d0

08001990 <nRF24_EventRxCallback>:
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	1dfa      	adds	r2, r7, #7
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fcf7 	bl	8002392 <nRF24_ReadRXPaylaod>
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <nRF24_EventRxCallback+0x48>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	f002 f83d 	bl	8003a28 <HAL_GetTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <nRF24_EventRxCallback+0x4c>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	7a3b      	ldrb	r3, [r7, #8]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d00a      	beq.n	80019d0 <nRF24_EventRxCallback+0x40>
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff feb4 	bl	8001730 <Radio_RxBufferPut>
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <nRF24_EventRxCallback+0x50>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e000      	b.n	80019d2 <nRF24_EventRxCallback+0x42>
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200002d0 	.word	0x200002d0
 80019dc:	2000031c 	.word	0x2000031c
 80019e0:	200002d2 	.word	0x200002d2

080019e4 <nRF24_EventMrCallback>:
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <nRF24_EventMrCallback+0x14>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200002d0 	.word	0x200002d0

080019fc <ConnectionBlinkLED>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	f7ff ffa0 	bl	8001944 <Radio_GetConnectionStatus>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <ConnectionBlinkLED+0x1a>
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <ConnectionBlinkLED+0x40>)
 8001a10:	f002 faca 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001a14:	e011      	b.n	8001a3a <ConnectionBlinkLED+0x3e>
 8001a16:	f002 f807 	bl	8003a28 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <ConnectionBlinkLED+0x44>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a26:	d908      	bls.n	8001a3a <ConnectionBlinkLED+0x3e>
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <ConnectionBlinkLED+0x40>)
 8001a2c:	f002 fad4 	bl	8003fd8 <HAL_GPIO_TogglePin>
 8001a30:	f001 fffa 	bl	8003a28 <HAL_GetTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a02      	ldr	r2, [pc, #8]	; (8001a40 <ConnectionBlinkLED+0x44>)
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	20000324 	.word	0x20000324

08001a44 <KlebotScheduler>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	f7ff ff41 	bl	80018d0 <Radio_Process>
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <KlebotScheduler+0x40>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <KlebotScheduler+0x18>
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <KlebotScheduler+0x40>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	f001 ff12 	bl	8003884 <Programs_PerformProgram>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d102      	bne.n	8001a70 <KlebotScheduler+0x2c>
 8001a6a:	f001 fefb 	bl	8003864 <Programs_ClearProgram>
 8001a6e:	e004      	b.n	8001a7a <KlebotScheduler+0x36>
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <KlebotScheduler+0x36>
 8001a76:	f7ff ffc1 	bl	80019fc <ConnectionBlinkLED>
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000328 	.word	0x20000328

08001a88 <Radio_NewCommandReceivedCallback>:
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <Radio_NewCommandReceivedCallback+0x28>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <Radio_NewCommandReceivedCallback+0x1e>
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fdf1 	bl	8001688 <Parser_Klebot>
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000320 	.word	0x20000320

08001ab4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001abc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ac0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001acc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ad0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ad4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001adc:	e000      	b.n	8001ae0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ade:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ae0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f9      	beq.n	8001ade <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001aea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f001 ff38 	bl	8003978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f82e 	bl	8001b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f7ff fc5e 	bl	80013cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b10:	f7ff fd12 	bl	8001538 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001b14:	f000 fd56 	bl	80025c4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001b18:	f000 ff18 	bl	800294c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b1c:	f000 ff6e 	bl	80029fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b20:	f001 f802 	bl	8002b28 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001b24:	f001 f854 	bl	8002bd0 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001b28:	f001 f978 	bl	8002e1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <main+0x5c>)
 8001b34:	f002 fa38 	bl	8003fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <main+0x5c>)
 8001b40:	f002 fa32 	bl	8003fa8 <HAL_GPIO_WritePin>

  //MotorEnc_Init(&MotorEncoderA, &htim4);
  Motors_Init();
 8001b44:	f001 fcbe 	bl	80034c4 <Motors_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <main+0x60>)
 8001b4a:	f003 fed9 	bl	8005900 <HAL_TIM_Base_Start_IT>



  Radio_Init(&hspi3);
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <main+0x64>)
 8001b50:	f7ff fdd6 	bl	8001700 <Radio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KlebotScheduler();
 8001b54:	f7ff ff76 	bl	8001a44 <KlebotScheduler>
 8001b58:	e7fc      	b.n	8001b54 <main+0x54>
 8001b5a:	bf00      	nop
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	2000046c 	.word	0x2000046c
 8001b64:	20000338 	.word	0x20000338

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b094      	sub	sp, #80	; 0x50
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 fe7d 	bl	8007876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001baa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fb83 	bl	80042c4 <HAL_RCC_OscConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001bc4:	f000 f84d 	bl	8001c62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	230f      	movs	r3, #15
 8001bca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fe84 	bl	80048f0 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001bee:	f000 f838 	bl	8001c62 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001bf2:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <SystemClock_Config+0x98>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	42420070 	.word	0x42420070

08001c04 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff50 	bl	8001ab4 <ITM_SendChar>

	return ch;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_TIM_PeriodElapsedCallback>:
		return 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Motors_EncoderSample();
 8001c32:	f001 fce3 	bl	80035fc <Motors_EncoderSample>
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;", MotorEncoderA.Velocity );
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;",(int16_t) MotorEncoderA.Position );
		//HAL_UART_Transmit(&huart2, USB_Buffer, USB_Buffer_Length, 500);

	}
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40001400 	.word	0x40001400

08001c44 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 8001c56:	f7ff fe7f 	bl	8001958 <Radio_HandlerIRQ>

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c66:	b672      	cpsid	i
}
 8001c68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <Error_Handler+0x8>

08001c6c <nRF24_Delay_ms>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fedf 	bl	8003a3c <HAL_Delay>
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <nRF24_SendSpi>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <nRF24_SendSpi+0x28>)
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	f003 f8d9 	bl	8004e58 <HAL_SPI_Transmit>
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000032c 	.word	0x2000032c

08001cb4 <nRF24_ReadSpi>:
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <nRF24_ReadSpi+0x28>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	f003 fa06 	bl	80050de <HAL_SPI_Receive>
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000032c 	.word	0x2000032c

08001ce0 <nRF24_ReadRegister>:
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <nRF24_ReadRegister+0x44>)
 8001cf4:	f002 f958 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ffc3 	bl	8001c88 <nRF24_SendSpi>
 8001d02:	f107 030f 	add.w	r3, r7, #15
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffd3 	bl	8001cb4 <nRF24_ReadSpi>
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2104      	movs	r1, #4
 8001d12:	4804      	ldr	r0, [pc, #16]	; (8001d24 <nRF24_ReadRegister+0x44>)
 8001d14:	f002 f948 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40011400 	.word	0x40011400

08001d28 <nRF24_ReadRegisters>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2104      	movs	r1, #4
 8001d40:	480a      	ldr	r0, [pc, #40]	; (8001d6c <nRF24_ReadRegisters+0x44>)
 8001d42:	f002 f931 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff9c 	bl	8001c88 <nRF24_SendSpi>
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f7ff ffad 	bl	8001cb4 <nRF24_ReadSpi>
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <nRF24_ReadRegisters+0x44>)
 8001d60:	f002 f922 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40011400 	.word	0x40011400

08001d70 <nRF24_WriteRegister>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f043 0320 	orr.w	r3, r3, #32
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	733b      	strb	r3, [r7, #12]
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	737b      	strb	r3, [r7, #13]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2104      	movs	r1, #4
 8001d92:	4809      	ldr	r0, [pc, #36]	; (8001db8 <nRF24_WriteRegister+0x48>)
 8001d94:	f002 f908 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff72 	bl	8001c88 <nRF24_SendSpi>
 8001da4:	2201      	movs	r2, #1
 8001da6:	2104      	movs	r1, #4
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <nRF24_WriteRegister+0x48>)
 8001daa:	f002 f8fd 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40011400 	.word	0x40011400

08001dbc <nRF24_WriteRegisters>:
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f043 0320 	orr.w	r3, r3, #32
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2104      	movs	r1, #4
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <nRF24_WriteRegisters+0x4c>)
 8001ddc:	f002 f8e4 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff4f 	bl	8001c88 <nRF24_SendSpi>
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f7ff ff4a 	bl	8001c88 <nRF24_SendSpi>
 8001df4:	2201      	movs	r2, #1
 8001df6:	2104      	movs	r1, #4
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <nRF24_WriteRegisters+0x4c>)
 8001dfa:	f002 f8d5 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40011400 	.word	0x40011400

08001e0c <nRF24_RX_Mode>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	f000 f829 	bl	8001e68 <nRF24_ReadConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	4911      	ldr	r1, [pc, #68]	; (8001e60 <nRF24_RX_Mode+0x54>)
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 f9b6 	bl	800218e <nRF24_SetRXAddress>
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 f81f 	bl	8001e78 <nRF24_WriteConfig>
 8001e3a:	2070      	movs	r0, #112	; 0x70
 8001e3c:	f000 f877 	bl	8001f2e <nRF24_WriteStatus>
 8001e40:	f000 f884 	bl	8001f4c <nRF24_FlushRX>
 8001e44:	f000 f89c 	bl	8001f80 <nRF24_FlushTX>
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <nRF24_RX_Mode+0x58>)
 8001e4e:	f002 f8ab 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff ff0a 	bl	8001c6c <nRF24_Delay_ms>
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000330 	.word	0x20000330
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <nRF24_ReadConfig>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff ff37 	bl	8001ce0 <nRF24_ReadRegister>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <nRF24_WriteConfig>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff ff72 	bl	8001d70 <nRF24_WriteRegister>
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <nRF24_SetPALevel>:
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	2006      	movs	r0, #6
 8001ea0:	f7ff ff1e 	bl	8001ce0 <nRF24_ReadRegister>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b25a      	sxtb	r2, r3
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2006      	movs	r0, #6
 8001ec6:	f7ff ff53 	bl	8001d70 <nRF24_WriteRegister>
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <nRF24_SetDataRate>:
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	2006      	movs	r0, #6
 8001ede:	f7ff feff 	bl	8001ce0 <nRF24_ReadRegister>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d104      	bne.n	8001efe <nRF24_SetDataRate+0x2c>
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e006      	b.n	8001f0c <nRF24_SetDataRate+0x3a>
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d103      	bne.n	8001f0c <nRF24_SetDataRate+0x3a>
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2006      	movs	r0, #6
 8001f12:	f7ff ff2d 	bl	8001d70 <nRF24_WriteRegister>
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <nRF24_ReadStatus>:
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	2007      	movs	r0, #7
 8001f24:	f7ff fedc 	bl	8001ce0 <nRF24_ReadRegister>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <nRF24_WriteStatus>:
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2007      	movs	r0, #7
 8001f3e:	f7ff ff17 	bl	8001d70 <nRF24_WriteRegister>
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <nRF24_FlushRX>:
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	23e2      	movs	r3, #226	; 0xe2
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2104      	movs	r1, #4
 8001f5a:	4808      	ldr	r0, [pc, #32]	; (8001f7c <nRF24_FlushRX+0x30>)
 8001f5c:	f002 f824 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	2101      	movs	r1, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe8f 	bl	8001c88 <nRF24_SendSpi>
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <nRF24_FlushRX+0x30>)
 8001f70:	f002 f81a 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40011400 	.word	0x40011400

08001f80 <nRF24_FlushTX>:
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	23e1      	movs	r3, #225	; 0xe1
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <nRF24_FlushTX+0x30>)
 8001f90:	f002 f80a 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe75 	bl	8001c88 <nRF24_SendSpi>
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <nRF24_FlushTX+0x30>)
 8001fa4:	f002 f800 	bl	8003fa8 <HAL_GPIO_WritePin>
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40011400 	.word	0x40011400

08001fb4 <nRF24_EnableCRC>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	f7ff ff53 	bl	8001e68 <nRF24_ReadConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <nRF24_EnableCRC+0x22>
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e003      	b.n	8001fde <nRF24_EnableCRC+0x2a>
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	f023 0308 	bic.w	r3, r3, #8
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff49 	bl	8001e78 <nRF24_WriteConfig>
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <nRF24_SetCRCLength>:
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	f7ff ff36 	bl	8001e68 <nRF24_ReadConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d104      	bne.n	8002010 <nRF24_SetCRCLength+0x22>
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e003      	b.n	8002018 <nRF24_SetCRCLength+0x2a>
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff2c 	bl	8001e78 <nRF24_WriteConfig>
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <nRF24_SetRetries>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	71bb      	strb	r3, [r7, #6]
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	b25a      	sxtb	r2, r3
 800203e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	2004      	movs	r0, #4
 8002052:	f7ff fe8d 	bl	8001d70 <nRF24_WriteRegister>
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <nRF24_SetRFChannel>:
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	2005      	movs	r0, #5
 8002074:	f7ff fe7c 	bl	8001d70 <nRF24_WriteRegister>
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <nRF24_EnablePipe>:
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d901      	bls.n	800209a <nRF24_EnablePipe+0x1a>
 8002096:	2305      	movs	r3, #5
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	2002      	movs	r0, #2
 800209c:	f7ff fe20 	bl	8001ce0 <nRF24_ReadRegister>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10a      	bne.n	80020c0 <nRF24_EnablePipe+0x40>
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e00b      	b.n	80020d8 <nRF24_EnablePipe+0x58>
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2201      	movs	r2, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4013      	ands	r3, r2
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	4619      	mov	r1, r3
 80020dc:	2002      	movs	r0, #2
 80020de:	f7ff fe47 	bl	8001d70 <nRF24_WriteRegister>
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <nRF24_AutoACK>:
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	460a      	mov	r2, r1
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4613      	mov	r3, r2
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d901      	bls.n	8002104 <nRF24_AutoACK+0x1a>
 8002100:	2305      	movs	r3, #5
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff fdeb 	bl	8001ce0 <nRF24_ReadRegister>
 800210a:	4603      	mov	r3, r0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10a      	bne.n	800212a <nRF24_AutoACK+0x40>
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2201      	movs	r2, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	b25a      	sxtb	r2, r3
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4313      	orrs	r3, r2
 8002124:	b25b      	sxtb	r3, r3
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e00b      	b.n	8002142 <nRF24_AutoACK+0x58>
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	b25b      	sxtb	r3, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	b25a      	sxtb	r2, r3
 8002138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213c:	4013      	ands	r3, r2
 800213e:	b25b      	sxtb	r3, r3
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	4619      	mov	r1, r3
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff fe12 	bl	8001d70 <nRF24_WriteRegister>
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <nRF24_SetAddressWidth>:
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d901      	bls.n	8002168 <nRF24_SetAddressWidth+0x14>
 8002164:	2305      	movs	r3, #5
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d801      	bhi.n	8002172 <nRF24_SetAddressWidth+0x1e>
 800216e:	2303      	movs	r3, #3
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	3b02      	subs	r3, #2
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	2003      	movs	r0, #3
 8002182:	f7ff fdf5 	bl	8001d70 <nRF24_WriteRegister>
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <nRF24_SetRXAddress>:
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	6039      	str	r1, [r7, #0]
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <nRF24_SetRXAddress+0x18>
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d11d      	bne.n	80021e2 <nRF24_SetRXAddress+0x54>
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e00d      	b.n	80021c8 <nRF24_SetRXAddress+0x3a>
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	441a      	add	r2, r3
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	f1c3 0302 	rsb	r3, r3, #2
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	3310      	adds	r3, #16
 80021bc:	443b      	add	r3, r7
 80021be:	f803 2c04 	strb.w	r2, [r3, #-4]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d9ee      	bls.n	80021ac <nRF24_SetRXAddress+0x1e>
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	330a      	adds	r3, #10
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f107 010c 	add.w	r1, r7, #12
 80021d8:	2203      	movs	r2, #3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fdee 	bl	8001dbc <nRF24_WriteRegisters>
 80021e0:	e00a      	b.n	80021f8 <nRF24_SetRXAddress+0x6a>
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	330a      	adds	r3, #10
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	3302      	adds	r3, #2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7ff fdbd 	bl	8001d70 <nRF24_WriteRegister>
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <nRF24_SetTXAddress>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2203      	movs	r2, #3
 800220e:	4619      	mov	r1, r3
 8002210:	200a      	movs	r0, #10
 8002212:	f7ff fd89 	bl	8001d28 <nRF24_ReadRegisters>
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e00c      	b.n	8002236 <nRF24_SetTXAddress+0x36>
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	f1c3 0302 	rsb	r3, r3, #2
 8002224:	3210      	adds	r2, #16
 8002226:	443a      	add	r2, r7
 8002228:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <nRF24_SetTXAddress+0x88>)
 800222e:	54d1      	strb	r1, [r2, r3]
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3301      	adds	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d9ef      	bls.n	800221c <nRF24_SetTXAddress+0x1c>
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e00d      	b.n	800225e <nRF24_SetTXAddress+0x5e>
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	441a      	add	r2, r3
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	f1c3 0302 	rsb	r3, r3, #2
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	3310      	adds	r3, #16
 8002252:	443b      	add	r3, r7
 8002254:	f803 2c04 	strb.w	r2, [r3, #-4]
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	3301      	adds	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d9ee      	bls.n	8002242 <nRF24_SetTXAddress+0x42>
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2203      	movs	r2, #3
 800226a:	4619      	mov	r1, r3
 800226c:	200a      	movs	r0, #10
 800226e:	f7ff fda5 	bl	8001dbc <nRF24_WriteRegisters>
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	2203      	movs	r2, #3
 8002278:	4619      	mov	r1, r3
 800227a:	2010      	movs	r0, #16
 800227c:	f7ff fd9e 	bl	8001dbc <nRF24_WriteRegisters>
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000330 	.word	0x20000330

0800228c <nRF24_ClearInterrupts>:
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	f7ff fe44 	bl	8001f1e <nRF24_ReadStatus>
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fe42 	bl	8001f2e <nRF24_WriteStatus>
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <nRF24_GetDynamicPayloadSize>:
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	2300      	movs	r3, #0
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	2060      	movs	r0, #96	; 0x60
 80022be:	f7ff fd0f 	bl	8001ce0 <nRF24_ReadRegister>
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d906      	bls.n	80022da <nRF24_GetDynamicPayloadSize+0x28>
 80022cc:	f7ff fe3e 	bl	8001f4c <nRF24_FlushRX>
 80022d0:	2002      	movs	r0, #2
 80022d2:	f7ff fccb 	bl	8001c6c <nRF24_Delay_ms>
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <nRF24_GetDynamicPayloadSize+0x2a>
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <nRF24_EnableRXDataReadyIRQ>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	f7ff fdbb 	bl	8001e68 <nRF24_ReadConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <nRF24_EnableRXDataReadyIRQ+0x22>
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e003      	b.n	800230e <nRF24_EnableRXDataReadyIRQ+0x2a>
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fdb1 	bl	8001e78 <nRF24_WriteConfig>
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <nRF24_EnableTXDataSentIRQ>:
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	f7ff fd9e 	bl	8001e68 <nRF24_ReadConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <nRF24_EnableTXDataSentIRQ+0x22>
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e003      	b.n	8002348 <nRF24_EnableTXDataSentIRQ+0x2a>
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	f023 0320 	bic.w	r3, r3, #32
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fd94 	bl	8001e78 <nRF24_WriteConfig>
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <nRF24_EnableMaxRetransmitIRQ>:
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	f7ff fd81 	bl	8001e68 <nRF24_ReadConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <nRF24_EnableMaxRetransmitIRQ+0x22>
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e003      	b.n	8002382 <nRF24_EnableMaxRetransmitIRQ+0x2a>
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	f023 0310 	bic.w	r3, r3, #16
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fd77 	bl	8001e78 <nRF24_WriteConfig>
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <nRF24_ReadRXPaylaod>:
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
 800239c:	f7ff ff89 	bl	80022b2 <nRF24_GetDynamicPayloadSize>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	2061      	movs	r0, #97	; 0x61
 80023b2:	f7ff fcb9 	bl	8001d28 <nRF24_ReadRegisters>
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <nRF24_IRQ_Handler>:
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <nRF24_IRQ_Handler+0x14>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000336 	.word	0x20000336

080023d8 <nRF24_IRQ_Read>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <nRF24_IRQ_Read+0x7c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d130      	bne.n	800244a <nRF24_IRQ_Read+0x72>
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <nRF24_IRQ_Read+0x7c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	f7ff fd96 	bl	8001f1e <nRF24_ReadStatus>
 80023f2:	4603      	mov	r3, r0
 80023f4:	71bb      	strb	r3, [r7, #6]
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <nRF24_IRQ_Read+0x3a>
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <nRF24_IRQ_Read+0x80>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	79bb      	ldrb	r3, [r7, #6]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <nRF24_IRQ_Read+0x52>
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <nRF24_IRQ_Read+0x84>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <nRF24_IRQ_Read+0x6a>
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <nRF24_IRQ_Read+0x88>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fd72 	bl	8001f2e <nRF24_WriteStatus>
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000336 	.word	0x20000336
 8002458:	20000333 	.word	0x20000333
 800245c:	20000334 	.word	0x20000334
 8002460:	20000335 	.word	0x20000335

08002464 <nRF24_Event>:
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
 8002468:	f7ff ffb6 	bl	80023d8 <nRF24_IRQ_Read>
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <nRF24_Event+0x44>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <nRF24_Event+0x1a>
 8002474:	f7ff fa8c 	bl	8001990 <nRF24_EventRxCallback>
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <nRF24_Event+0x44>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <nRF24_Event+0x48>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <nRF24_Event+0x2c>
 8002486:	f7ff fa73 	bl	8001970 <nRF24_EventTxCallback>
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <nRF24_Event+0x48>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <nRF24_Event+0x4c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <nRF24_Event+0x3e>
 8002498:	f7ff faa4 	bl	80019e4 <nRF24_EventMrCallback>
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <nRF24_Event+0x4c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000333 	.word	0x20000333
 80024ac:	20000334 	.word	0x20000334
 80024b0:	20000335 	.word	0x20000335

080024b4 <nRF24_Init>:
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <nRF24_Init+0xc4>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2110      	movs	r1, #16
 80024c6:	482d      	ldr	r0, [pc, #180]	; (800257c <nRF24_Init+0xc8>)
 80024c8:	f001 fd6e 	bl	8003fa8 <HAL_GPIO_WritePin>
 80024cc:	2201      	movs	r2, #1
 80024ce:	2104      	movs	r1, #4
 80024d0:	482b      	ldr	r0, [pc, #172]	; (8002580 <nRF24_Init+0xcc>)
 80024d2:	f001 fd69 	bl	8003fa8 <HAL_GPIO_WritePin>
 80024d6:	2005      	movs	r0, #5
 80024d8:	f7ff fbc8 	bl	8001c6c <nRF24_Delay_ms>
 80024dc:	2003      	movs	r0, #3
 80024de:	f7ff fcd9 	bl	8001e94 <nRF24_SetPALevel>
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7ff fcf5 	bl	8001ed2 <nRF24_SetDataRate>
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7ff fd63 	bl	8001fb4 <nRF24_EnableCRC>
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7ff fd7d 	bl	8001fee <nRF24_SetCRCLength>
 80024f4:	2107      	movs	r1, #7
 80024f6:	2004      	movs	r0, #4
 80024f8:	f7ff fd96 	bl	8002028 <nRF24_SetRetries>
 80024fc:	201d      	movs	r0, #29
 80024fe:	f7ff fbef 	bl	8001ce0 <nRF24_ReadRegister>
 8002502:	4603      	mov	r3, r0
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4619      	mov	r1, r3
 800250c:	201d      	movs	r0, #29
 800250e:	f7ff fc2f 	bl	8001d70 <nRF24_WriteRegister>
 8002512:	213f      	movs	r1, #63	; 0x3f
 8002514:	201c      	movs	r0, #28
 8002516:	f7ff fc2b 	bl	8001d70 <nRF24_WriteRegister>
 800251a:	200a      	movs	r0, #10
 800251c:	f7ff fd9f 	bl	800205e <nRF24_SetRFChannel>
 8002520:	2101      	movs	r1, #1
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fdac 	bl	8002080 <nRF24_EnablePipe>
 8002528:	2101      	movs	r1, #1
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff fddd 	bl	80020ea <nRF24_AutoACK>
 8002530:	2003      	movs	r0, #3
 8002532:	f7ff fe0f 	bl	8002154 <nRF24_SetAddressWidth>
 8002536:	2001      	movs	r0, #1
 8002538:	f7ff fb98 	bl	8001c6c <nRF24_Delay_ms>
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff fed1 	bl	80022e4 <nRF24_EnableRXDataReadyIRQ>
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff feeb 	bl	800231e <nRF24_EnableTXDataSentIRQ>
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ff05 	bl	8002358 <nRF24_EnableMaxRetransmitIRQ>
 800254e:	2001      	movs	r0, #1
 8002550:	f7ff fb8c 	bl	8001c6c <nRF24_Delay_ms>
 8002554:	f7ff fe9a 	bl	800228c <nRF24_ClearInterrupts>
 8002558:	201d      	movs	r0, #29
 800255a:	f7ff fbc1 	bl	8001ce0 <nRF24_ReadRegister>
 800255e:	4603      	mov	r3, r0
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	201d      	movs	r0, #29
 800256a:	f7ff fc01 	bl	8001d70 <nRF24_WriteRegister>
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000032c 	.word	0x2000032c
 800257c:	40010c00 	.word	0x40010c00
 8002580:	40011400 	.word	0x40011400

08002584 <nRF24_WriteAckPayload>:
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	4613      	mov	r3, r2
 8002592:	71bb      	strb	r3, [r7, #6]
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	2b20      	cmp	r3, #32
 8002598:	d901      	bls.n	800259e <nRF24_WriteAckPayload+0x1a>
 800259a:	2301      	movs	r3, #1
 800259c:	e00d      	b.n	80025ba <nRF24_WriteAckPayload+0x36>
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	71fb      	strb	r3, [r7, #7]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f063 0357 	orn	r3, r3, #87	; 0x57
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	79ba      	ldrb	r2, [r7, #6]
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc02 	bl	8001dbc <nRF24_WriteRegisters>
 80025b8:	2300      	movs	r3, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <MX_SPI3_Init>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <MX_SPI3_Init+0x64>)
 80025ca:	4a18      	ldr	r2, [pc, #96]	; (800262c <MX_SPI3_Init+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <MX_SPI3_Init+0x64>)
 80025d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_SPI3_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_SPI3_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_SPI3_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_SPI3_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_SPI3_Init+0x64>)
 80025f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f4:	619a      	str	r2, [r3, #24]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_SPI3_Init+0x64>)
 80025f8:	2218      	movs	r2, #24
 80025fa:	61da      	str	r2, [r3, #28]
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <MX_SPI3_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	621a      	str	r2, [r3, #32]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_SPI3_Init+0x64>)
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <MX_SPI3_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_SPI3_Init+0x64>)
 8002610:	220a      	movs	r2, #10
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_SPI3_Init+0x64>)
 8002616:	f002 fb9b 	bl	8004d50 <HAL_SPI_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_SPI3_Init+0x60>
 8002620:	f7ff fb1f 	bl	8001c62 <Error_Handler>
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000338 	.word	0x20000338
 800262c:	40003c00 	.word	0x40003c00

08002630 <HAL_SPI_MspInit>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <HAL_SPI_MspInit+0xa8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d13f      	bne.n	80026d0 <HAL_SPI_MspInit+0xa0>
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_SPI_MspInit+0xac>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <HAL_SPI_MspInit+0xac>)
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	61d3      	str	r3, [r2, #28]
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_SPI_MspInit+0xac>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_SPI_MspInit+0xac>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_SPI_MspInit+0xac>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_SPI_MspInit+0xac>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4812      	ldr	r0, [pc, #72]	; (80026e0 <HAL_SPI_MspInit+0xb0>)
 8002696:	f001 fb03 	bl	8003ca0 <HAL_GPIO_Init>
 800269a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	480c      	ldr	r0, [pc, #48]	; (80026e0 <HAL_SPI_MspInit+0xb0>)
 80026b0:	f001 faf6 	bl	8003ca0 <HAL_GPIO_Init>
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_SPI_MspInit+0xb4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_SPI_MspInit+0xb4>)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	6053      	str	r3, [r2, #4]
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40003c00 	.word	0x40003c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40011000 	.word	0x40011000
 80026e4:	40010000 	.word	0x40010000

080026e8 <HAL_MspInit>:
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_MspInit+0x5c>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_MspInit+0x5c>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6193      	str	r3, [r2, #24]
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_MspInit+0x5c>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_MspInit+0x5c>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_MspInit+0x5c>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_MspInit+0x5c>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_MspInit+0x60>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_MspInit+0x60>)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6053      	str	r3, [r2, #4]
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000

0800274c <NMI_Handler>:
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <DebugMon_Handler>:
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <SysTick_Handler>:
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
 8002792:	f001 f937 	bl	8003a04 <HAL_IncTick>
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <EXTI15_10_IRQHandler>:
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
 800279e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027a2:	f001 fc33 	bl	800400c <HAL_GPIO_EXTI_IRQHandler>
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <TIM7_IRQHandler>:
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM7_IRQHandler+0x10>)
 80027b2:	f003 fb31 	bl	8005e18 <HAL_TIM_IRQHandler>
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000046c 	.word	0x2000046c

080027c0 <_getpid>:
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	2301      	movs	r3, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <_kill>:
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
 80027d8:	f005 f8a0 	bl	800791c <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	2216      	movs	r2, #22
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_exit>:
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	f04f 31ff 	mov.w	r1, #4294967295
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffe7 	bl	80027ce <_kill>
 8002800:	e7fe      	b.n	8002800 <_exit+0x12>

08002802 <_read>:
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e00a      	b.n	800282a <_read+0x28>
 8002814:	f3af 8000 	nop.w
 8002818:	4601      	mov	r1, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60ba      	str	r2, [r7, #8]
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbf0      	blt.n	8002814 <_read+0x12>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_write>:
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e009      	b.n	8002862 <_write+0x26>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	60ba      	str	r2, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f9d4 	bl	8001c04 <__io_putchar>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf1      	blt.n	800284e <_write+0x12>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_close>:
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <_fstat>:
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	2300      	movs	r3, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_isatty>:
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	2301      	movs	r3, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <_lseek>:
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	2300      	movs	r3, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <_sbrk>:
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <_sbrk+0x5c>)
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <_sbrk+0x60>)
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <_sbrk+0x22>
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_sbrk+0x64>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <_sbrk+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <_sbrk+0x40>
 8002904:	f005 f80a 	bl	800791c <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e009      	b.n	8002928 <_sbrk+0x54>
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <_sbrk+0x64>)
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20010000 	.word	0x20010000
 8002934:	00001000 	.word	0x00001000
 8002938:	20000390 	.word	0x20000390
 800293c:	20000720 	.word	0x20000720

08002940 <SystemInit>:
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f004 ff8b 	bl	8007876 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <MX_TIM1_Init+0xa8>)
 800296a:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <MX_TIM1_Init+0xac>)
 800296c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <MX_TIM1_Init+0xa8>)
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_TIM1_Init+0xa8>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002994:	2303      	movs	r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800299c:	2301      	movs	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4619      	mov	r1, r3
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <MX_TIM1_Init+0xa8>)
 80029c0:	f003 f8fa 	bl	8005bb8 <HAL_TIM_Encoder_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80029ca:	f7ff f94a 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <MX_TIM1_Init+0xa8>)
 80029dc:	f003 ff80 	bl	80068e0 <HAL_TIMEx_MasterConfigSynchronization>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80029e6:	f7ff f93c 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	3730      	adds	r7, #48	; 0x30
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000394 	.word	0x20000394
 80029f8:	40012c00 	.word	0x40012c00

080029fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	; (8002b24 <MX_TIM3_Init+0x128>)
 8002a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a50:	4833      	ldr	r0, [pc, #204]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a52:	f002 ff05 	bl	8005860 <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002a5c:	f7ff f901 	bl	8001c62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	482c      	ldr	r0, [pc, #176]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a6e:	f003 fb9d 	bl	80061ac <HAL_TIM_ConfigClockSource>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002a78:	f7ff f8f3 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a7c:	4828      	ldr	r0, [pc, #160]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a7e:	f002 ff99 	bl	80059b4 <HAL_TIM_PWM_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002a88:	f7ff f8eb 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a9c:	f003 ff20 	bl	80068e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002aa6:	f7ff f8dc 	bl	8001c62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aaa:	2360      	movs	r3, #96	; 0x60
 8002aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4817      	ldr	r0, [pc, #92]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002ac2:	f003 fab1 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002acc:	f7ff f8c9 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4812      	ldr	r0, [pc, #72]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002ad8:	f003 faa6 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002ae2:	f7ff f8be 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2208      	movs	r2, #8
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002aee:	f003 fa9b 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002af8:	f7ff f8b3 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	220c      	movs	r2, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	4807      	ldr	r0, [pc, #28]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002b04:	f003 fa90 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002b0e:	f7ff f8a8 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002b14:	f000 f93a 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200003dc 	.word	0x200003dc
 8002b24:	40000400 	.word	0x40000400

08002b28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fe9d 	bl	8007876 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b46:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <MX_TIM4_Init+0xa4>)
 8002b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b82:	2301      	movs	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b96:	f003 f80f 	bl	8005bb8 <HAL_TIM_Encoder_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ba0:	f7ff f85f 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002bb2:	f003 fe95 	bl	80068e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002bbc:	f7ff f851 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000424 	.word	0x20000424
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <MX_TIM7_Init+0x68>)
 8002be2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002be6:	2247      	movs	r2, #71	; 0x47
 8002be8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002bf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002c00:	f002 fe2e 	bl	8005860 <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002c0a:	f7ff f82a 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c16:	463b      	mov	r3, r7
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4806      	ldr	r0, [pc, #24]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002c1c:	f003 fe60 	bl	80068e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002c26:	f7ff f81c 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000046c 	.word	0x2000046c
 8002c38:	40001400 	.word	0x40001400

08002c3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d125      	bne.n	8002ca8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8002c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	481a      	ldr	r0, [pc, #104]	; (8002d0c <HAL_TIM_Encoder_MspInit+0xd0>)
 8002ca2:	f000 fffd 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ca6:	e028      	b.n	8002cfa <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d123      	bne.n	8002cfa <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6193      	str	r3, [r2, #24]
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f107 0318 	add.w	r3, r7, #24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002cf6:	f000 ffd3 	bl	8003ca0 <HAL_GPIO_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	40000800 	.word	0x40000800
 8002d14:	40010c00 	.word	0x40010c00

08002d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_TIM_Base_MspInit+0x68>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10c      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d42:	e018      	b.n	8002d76 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_TIM_Base_MspInit+0x70>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d113      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d54:	f043 0320 	orr.w	r3, r3, #32
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2037      	movs	r0, #55	; 0x37
 8002d6c:	f000 ff61 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d70:	2037      	movs	r0, #55	; 0x37
 8002d72:	f000 ff7a 	bl	8003c6a <HAL_NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40001400 	.word	0x40001400

08002d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_MspPostInit+0x80>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d12a      	bne.n	8002e02 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_TIM_MspPostInit+0x84>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_TIM_MspPostInit+0x84>)
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_TIM_MspPostInit+0x84>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8002dc4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480e      	ldr	r0, [pc, #56]	; (8002e14 <HAL_TIM_MspPostInit+0x88>)
 8002dda:	f000 ff61 	bl	8003ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_TIM_MspPostInit+0x8c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <HAL_TIM_MspPostInit+0x8c>)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40010000 	.word	0x40010000

08002e1c <MX_USART2_UART_Init>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <MX_USART2_UART_Init+0x50>)
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e54:	f003 fdbc 	bl	80069d0 <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART2_UART_Init+0x46>
 8002e5e:	f7fe ff00 	bl	8001c62 <Error_Handler>
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200004b4 	.word	0x200004b4
 8002e6c:	40004400 	.word	0x40004400

08002e70 <HAL_UART_MspInit>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_UART_MspInit+0x88>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d12f      	bne.n	8002ef0 <HAL_UART_MspInit+0x80>
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9a:	61d3      	str	r3, [r2, #28]
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	2303      	movs	r3, #3
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480b      	ldr	r0, [pc, #44]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002ed4:	f000 fee4 	bl	8003ca0 <HAL_GPIO_Init>
 8002ed8:	2308      	movs	r3, #8
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002eec:	f000 fed8 	bl	8003ca0 <HAL_GPIO_Init>
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40004400 	.word	0x40004400
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010800 	.word	0x40010800

08002f04 <DRV8836_Init>:
 */
#include "Motors/drv8836.h"
#include "tim.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	460b      	mov	r3, r1
 8002f14:	80fb      	strh	r3, [r7, #6]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88ba      	ldrh	r2, [r7, #4]
 8002f2a:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8b3a      	ldrh	r2, [r7, #24]
 8002f30:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8bba      	ldrh	r2, [r7, #28]
 8002f36:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	891b      	ldrh	r3, [r3, #8]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f002 fd8e 	bl	8005a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	895b      	ldrh	r3, [r3, #10]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f002 fd86 	bl	8005a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	899b      	ldrh	r3, [r3, #12]
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f002 fd7e 	bl	8005a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	89db      	ldrh	r3, [r3, #14]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f002 fd76 	bl	8005a64 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <DRV8836_Init+0x86>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
 8002f88:	e016      	b.n	8002fb8 <DRV8836_Init+0xb4>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d105      	bne.n	8002f9c <DRV8836_Init+0x98>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	6393      	str	r3, [r2, #56]	; 0x38
 8002f9a:	e00d      	b.n	8002fb8 <DRV8836_Init+0xb4>
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d105      	bne.n	8002fae <DRV8836_Init+0xaa>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002fac:	e004      	b.n	8002fb8 <DRV8836_Init+0xb4>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <DRV8836_Init+0xc6>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc8:	e016      	b.n	8002ff8 <DRV8836_Init+0xf4>
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d105      	bne.n	8002fdc <DRV8836_Init+0xd8>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6393      	str	r3, [r2, #56]	; 0x38
 8002fda:	e00d      	b.n	8002ff8 <DRV8836_Init+0xf4>
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d105      	bne.n	8002fee <DRV8836_Init+0xea>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002fec:	e004      	b.n	8002ff8 <DRV8836_Init+0xf4>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 8002ff8:	8b3b      	ldrh	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <DRV8836_Init+0x106>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34
 8003008:	e016      	b.n	8003038 <DRV8836_Init+0x134>
 800300a:	8b3b      	ldrh	r3, [r7, #24]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d105      	bne.n	800301c <DRV8836_Init+0x118>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	6393      	str	r3, [r2, #56]	; 0x38
 800301a:	e00d      	b.n	8003038 <DRV8836_Init+0x134>
 800301c:	8b3b      	ldrh	r3, [r7, #24]
 800301e:	2b08      	cmp	r3, #8
 8003020:	d105      	bne.n	800302e <DRV8836_Init+0x12a>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800302c:	e004      	b.n	8003038 <DRV8836_Init+0x134>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8003038:	8bbb      	ldrh	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <DRV8836_Init+0x146>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003048:	e016      	b.n	8003078 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800304a:	8bbb      	ldrh	r3, [r7, #28]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d105      	bne.n	800305c <DRV8836_Init+0x158>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	6393      	str	r3, [r2, #56]	; 0x38
}
 800305a:	e00d      	b.n	8003078 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800305c:	8bbb      	ldrh	r3, [r7, #28]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d105      	bne.n	800306e <DRV8836_Init+0x16a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800306c:	e004      	b.n	8003078 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <DRV8836_SetMotor>:

DRV8836_Error_t DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	70bb      	strb	r3, [r7, #2]
 8003096:	4613      	mov	r3, r2
 8003098:	803b      	strh	r3, [r7, #0]
	DRV8836_Direction_t *TargetDirection;
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;

	if(speed > ic->drv_htim->Instance->ARR) //check if pwm value fit the counter period range
 800309a:	883a      	ldrh	r2, [r7, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d901      	bls.n	80030ac <DRV8836_SetMotor+0x2c>
	{
		return DRV8836_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e14e      	b.n	800334a <DRV8836_SetMotor+0x2ca>
	}

	if(Output_A == output)
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <DRV8836_SetMotor+0x4c>
	{
		TargetForwardChannel = ic->a_forward_channel;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	891b      	ldrh	r3, [r3, #8]
 80030b6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	895b      	ldrh	r3, [r3, #10]
 80030bc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3310      	adds	r3, #16
 80030c2:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3314      	adds	r3, #20
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e011      	b.n	80030f0 <DRV8836_SetMotor+0x70>
	}
	else if(Output_B == output)
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10c      	bne.n	80030ec <DRV8836_SetMotor+0x6c>
	{
		TargetForwardChannel = ic->b_forward_channel;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	899b      	ldrh	r3, [r3, #12]
 80030d6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	89db      	ldrh	r3, [r3, #14]
 80030dc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3312      	adds	r3, #18
 80030e2:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3315      	adds	r3, #21
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e001      	b.n	80030f0 <DRV8836_SetMotor+0x70>
	}
	else
	{
		return DRV8836_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e12c      	b.n	800334a <DRV8836_SetMotor+0x2ca>
	}

	switch(direction)
 80030f0:	78bb      	ldrb	r3, [r7, #2]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	f200 8120 	bhi.w	8003338 <DRV8836_SetMotor+0x2b8>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <DRV8836_SetMotor+0x80>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003111 	.word	0x08003111
 8003104:	08003193 	.word	0x08003193
 8003108:	08003215 	.word	0x08003215
 800310c:	08003297 	.word	0x08003297
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <DRV8836_SetMotor+0xa2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34
 8003120:	e016      	b.n	8003150 <DRV8836_SetMotor+0xd0>
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d105      	bne.n	8003134 <DRV8836_SetMotor+0xb4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	6393      	str	r3, [r2, #56]	; 0x38
 8003132:	e00d      	b.n	8003150 <DRV8836_SetMotor+0xd0>
 8003134:	89fb      	ldrh	r3, [r7, #14]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d105      	bne.n	8003146 <DRV8836_SetMotor+0xc6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2300      	movs	r3, #0
 8003142:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003144:	e004      	b.n	8003150 <DRV8836_SetMotor+0xd0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003150:	89bb      	ldrh	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <DRV8836_SetMotor+0xe2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003160:	e0ec      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003162:	89bb      	ldrh	r3, [r7, #12]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d105      	bne.n	8003174 <DRV8836_SetMotor+0xf4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003172:	e0e3      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003174:	89bb      	ldrh	r3, [r7, #12]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d105      	bne.n	8003186 <DRV8836_SetMotor+0x106>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	2300      	movs	r3, #0
 8003182:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003184:	e0da      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003190:	e0d4      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <DRV8836_SetMotor+0x124>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34
 80031a2:	e016      	b.n	80031d2 <DRV8836_SetMotor+0x152>
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d105      	bne.n	80031b6 <DRV8836_SetMotor+0x136>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	6393      	str	r3, [r2, #56]	; 0x38
 80031b4:	e00d      	b.n	80031d2 <DRV8836_SetMotor+0x152>
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d105      	bne.n	80031c8 <DRV8836_SetMotor+0x148>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80031c6:	e004      	b.n	80031d2 <DRV8836_SetMotor+0x152>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80031d2:	89bb      	ldrh	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <DRV8836_SetMotor+0x164>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	883a      	ldrh	r2, [r7, #0]
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80031e2:	e0ab      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80031e4:	89bb      	ldrh	r3, [r7, #12]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d105      	bne.n	80031f6 <DRV8836_SetMotor+0x176>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	883b      	ldrh	r3, [r7, #0]
 80031f2:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80031f4:	e0a2      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80031f6:	89bb      	ldrh	r3, [r7, #12]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d105      	bne.n	8003208 <DRV8836_SetMotor+0x188>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	883b      	ldrh	r3, [r7, #0]
 8003204:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003206:	e099      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	883b      	ldrh	r3, [r7, #0]
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003212:	e093      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 8003214:	89fb      	ldrh	r3, [r7, #14]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <DRV8836_SetMotor+0x1a6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	883a      	ldrh	r2, [r7, #0]
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
 8003224:	e016      	b.n	8003254 <DRV8836_SetMotor+0x1d4>
 8003226:	89fb      	ldrh	r3, [r7, #14]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d105      	bne.n	8003238 <DRV8836_SetMotor+0x1b8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	883b      	ldrh	r3, [r7, #0]
 8003234:	6393      	str	r3, [r2, #56]	; 0x38
 8003236:	e00d      	b.n	8003254 <DRV8836_SetMotor+0x1d4>
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	2b08      	cmp	r3, #8
 800323c:	d105      	bne.n	800324a <DRV8836_SetMotor+0x1ca>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	883b      	ldrh	r3, [r7, #0]
 8003246:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003248:	e004      	b.n	8003254 <DRV8836_SetMotor+0x1d4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	883b      	ldrh	r3, [r7, #0]
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003254:	89bb      	ldrh	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <DRV8836_SetMotor+0x1e6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003264:	e06a      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003266:	89bb      	ldrh	r3, [r7, #12]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d105      	bne.n	8003278 <DRV8836_SetMotor+0x1f8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003276:	e061      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003278:	89bb      	ldrh	r3, [r7, #12]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d105      	bne.n	800328a <DRV8836_SetMotor+0x20a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003288:	e058      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003294:	e052      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <DRV8836_SetMotor+0x22c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
 80032aa:	e01c      	b.n	80032e6 <DRV8836_SetMotor+0x266>
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d107      	bne.n	80032c2 <DRV8836_SetMotor+0x242>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6852      	ldr	r2, [r2, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	6393      	str	r3, [r2, #56]	; 0x38
 80032c0:	e011      	b.n	80032e6 <DRV8836_SetMotor+0x266>
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d107      	bne.n	80032d8 <DRV8836_SetMotor+0x258>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6852      	ldr	r2, [r2, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80032d6:	e006      	b.n	80032e6 <DRV8836_SetMotor+0x266>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6852      	ldr	r2, [r2, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80032e6:	89bb      	ldrh	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <DRV8836_SetMotor+0x27c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80032fa:	e01f      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80032fc:	89bb      	ldrh	r3, [r7, #12]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <DRV8836_SetMotor+0x292>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6852      	ldr	r2, [r2, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003310:	e014      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d107      	bne.n	8003328 <DRV8836_SetMotor+0x2a8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6852      	ldr	r2, [r2, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003326:	e009      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6852      	ldr	r2, [r2, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003336:	e001      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	default:
		return DRV8836_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e006      	b.n	800334a <DRV8836_SetMotor+0x2ca>
		break;
	}

	*TargetDirection = direction;	//save set direction and speed to struct
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	78ba      	ldrb	r2, [r7, #2]
 8003340:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	883a      	ldrh	r2, [r7, #0]
 8003346:	801a      	strh	r2, [r3, #0]

	return DRV8836_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8003364:	213c      	movs	r1, #60	; 0x3c
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f002 fcc8 	bl	8005cfc <HAL_TIM_Encoder_Start>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <MotorEnc_Uptade>:

void MotorEnc_Uptade(MotorEncoder_t *encoder)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	uint32_t NewCounter = encoder->htimEnc->Instance->CNT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	60fb      	str	r3, [r7, #12]
	int16_t TempPosition = encoder->Position;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	899b      	ldrh	r3, [r3, #12]
 800338a:	817b      	strh	r3, [r7, #10]

	if(NewCounter == encoder->LastCounter)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	429a      	cmp	r2, r3
 8003394:	d103      	bne.n	800339e <MotorEnc_Uptade+0x2a>
	{
		encoder->Velocity = 0;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	809a      	strh	r2, [r3, #4]
 800339c:	e052      	b.n	8003444 <MotorEnc_Uptade+0xd0>
	}
	else if(NewCounter > encoder->LastCounter)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d924      	bls.n	80033f2 <MotorEnc_Uptade+0x7e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))	//overflow happened
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d111      	bne.n	80033dc <MotorEnc_Uptade+0x68>
		{
			encoder->Velocity = - ( encoder->LastCounter + (encoder->htimEnc->Instance->ARR - NewCounter) );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	b21a      	sxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	809a      	strh	r2, [r3, #4]
 80033da:	e033      	b.n	8003444 <MotorEnc_Uptade+0xd0>
		}
		else
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b21a      	sxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	809a      	strh	r2, [r3, #4]
 80033f0:	e028      	b.n	8003444 <MotorEnc_Uptade+0xd0>
		}
	}
	else if(NewCounter < encoder->LastCounter)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d223      	bcs.n	8003444 <MotorEnc_Uptade+0xd0>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b10      	cmp	r3, #16
 800340a:	d10a      	bne.n	8003422 <MotorEnc_Uptade+0xae>
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	b29b      	uxth	r3, r3
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	b29b      	uxth	r3, r3
 800341a:	b21a      	sxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	809a      	strh	r2, [r3, #4]
 8003420:	e010      	b.n	8003444 <MotorEnc_Uptade+0xd0>
		}
		else																//overflow happened
		{
			encoder->Velocity = NewCounter + (encoder->htimEnc->Instance->ARR + encoder->LastCounter);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4413      	add	r3, r2
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4413      	add	r3, r2
 800343c:	b29b      	uxth	r3, r3
 800343e:	b21a      	sxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	809a      	strh	r2, [r3, #4]
		}
	}


	TempPosition = encoder->Position + encoder->Velocity;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003452:	b29b      	uxth	r3, r3
 8003454:	4413      	add	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	817b      	strh	r3, [r7, #10]

	if(encoder->Velocity != 0)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d024      	beq.n	80034ae <MotorEnc_Uptade+0x13a>
	{
		if(TempPosition >= 0)
 8003464:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db16      	blt.n	800349a <MotorEnc_Uptade+0x126>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800347a:	4413      	add	r3, r2
 800347c:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <MotorEnc_Uptade+0x14c>)
 800347e:	fb82 1203 	smull	r1, r2, r2, r3
 8003482:	1251      	asrs	r1, r2, #9
 8003484:	17da      	asrs	r2, r3, #31
 8003486:	1a8a      	subs	r2, r1, r2
 8003488:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800348c:	fb01 f202 	mul.w	r2, r1, r2
 8003490:	1a9a      	subs	r2, r3, r2
 8003492:	b212      	sxth	r2, r2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	819a      	strh	r2, [r3, #12]
 8003498:	e009      	b.n	80034ae <MotorEnc_Uptade+0x13a>
		}
		else
		{
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	b21a      	sxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	819a      	strh	r2, [r3, #12]
		}
	}

	//encoder->RPM = (encoder->Velocity * (1000 / ENCODER_SAMPLING_TIME_MS) * 60 ) / PULSES_PER_ROTATION; //define constants
	encoder->LastCounter = NewCounter;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	611a      	str	r2, [r3, #16]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	5d9f7391 	.word	0x5d9f7391

080034c4 <Motors_Init>:
//
// -- Init --
//

void Motors_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af02      	add	r7, sp, #8
	DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80034ca:	230c      	movs	r3, #12
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	2308      	movs	r3, #8
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2304      	movs	r3, #4
 80034d4:	2200      	movs	r2, #0
 80034d6:	4909      	ldr	r1, [pc, #36]	; (80034fc <Motors_Init+0x38>)
 80034d8:	4809      	ldr	r0, [pc, #36]	; (8003500 <Motors_Init+0x3c>)
 80034da:	f7ff fd13 	bl	8002f04 <DRV8836_Init>
	MotorEnc_Init(&MotorEncoderA, &htim1);
 80034de:	4909      	ldr	r1, [pc, #36]	; (8003504 <Motors_Init+0x40>)
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <Motors_Init+0x44>)
 80034e2:	f7ff ff37 	bl	8003354 <MotorEnc_Init>
	MotorEnc_Init(&MotorEncoderB, &htim4);
 80034e6:	4909      	ldr	r1, [pc, #36]	; (800350c <Motors_Init+0x48>)
 80034e8:	4809      	ldr	r0, [pc, #36]	; (8003510 <Motors_Init+0x4c>)
 80034ea:	f7ff ff33 	bl	8003354 <MotorEnc_Init>

	FIRFilter_Init(&EncoderFilterA);
 80034ee:	4809      	ldr	r0, [pc, #36]	; (8003514 <Motors_Init+0x50>)
 80034f0:	f7fd fe9e 	bl	8001230 <FIRFilter_Init>
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200003dc 	.word	0x200003dc
 8003500:	200004fc 	.word	0x200004fc
 8003504:	20000394 	.word	0x20000394
 8003508:	20000514 	.word	0x20000514
 800350c:	20000424 	.word	0x20000424
 8003510:	2000052c 	.word	0x2000052c
 8003514:	20000544 	.word	0x20000544

08003518 <Motors_SetMotorPWM>:
{
	DRV8836_SetMotor(&MotorDriver, motorAB, direction, speed);
}

Motors_Error_t Motors_SetMotorPWM(DRV8836_Output_t motorAB, uint16_t speed)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	460a      	mov	r2, r1
 8003522:	71fb      	strb	r3, [r7, #7]
 8003524:	4613      	mov	r3, r2
 8003526:	80bb      	strh	r3, [r7, #4]
	switch(motorAB)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <Motors_SetMotorPWM+0x1c>
 800352e:	2b01      	cmp	r3, #1
 8003530:	d009      	beq.n	8003546 <Motors_SetMotorPWM+0x2e>
 8003532:	e011      	b.n	8003558 <Motors_SetMotorPWM+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.a_direction, speed);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <Motors_SetMotorPWM+0x4c>)
 8003536:	7d1a      	ldrb	r2, [r3, #20]
 8003538:	88bb      	ldrh	r3, [r7, #4]
 800353a:	79f9      	ldrb	r1, [r7, #7]
 800353c:	4809      	ldr	r0, [pc, #36]	; (8003564 <Motors_SetMotorPWM+0x4c>)
 800353e:	f7ff fd9f 	bl	8003080 <DRV8836_SetMotor>
 8003542:	4603      	mov	r3, r0
 8003544:	e009      	b.n	800355a <Motors_SetMotorPWM+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.b_direction, speed);
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <Motors_SetMotorPWM+0x4c>)
 8003548:	7d5a      	ldrb	r2, [r3, #21]
 800354a:	88bb      	ldrh	r3, [r7, #4]
 800354c:	79f9      	ldrb	r1, [r7, #7]
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <Motors_SetMotorPWM+0x4c>)
 8003550:	f7ff fd96 	bl	8003080 <DRV8836_SetMotor>
 8003554:	4603      	mov	r3, r0
 8003556:	e000      	b.n	800355a <Motors_SetMotorPWM+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8003558:	2301      	movs	r3, #1
		break;
	}
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200004fc 	.word	0x200004fc

08003568 <Motors_SetMotorDirection>:

Motors_Error_t Motors_SetMotorDirection(DRV8836_Output_t motorAB, DRV8836_Direction_t direction)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	460a      	mov	r2, r1
 8003572:	71fb      	strb	r3, [r7, #7]
 8003574:	4613      	mov	r3, r2
 8003576:	71bb      	strb	r3, [r7, #6]
	switch(motorAB)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <Motors_SetMotorDirection+0x1c>
 800357e:	2b01      	cmp	r3, #1
 8003580:	d009      	beq.n	8003596 <Motors_SetMotorDirection+0x2e>
 8003582:	e011      	b.n	80035a8 <Motors_SetMotorDirection+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.a_speed);
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <Motors_SetMotorDirection+0x4c>)
 8003586:	8a1b      	ldrh	r3, [r3, #16]
 8003588:	79ba      	ldrb	r2, [r7, #6]
 800358a:	79f9      	ldrb	r1, [r7, #7]
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <Motors_SetMotorDirection+0x4c>)
 800358e:	f7ff fd77 	bl	8003080 <DRV8836_SetMotor>
 8003592:	4603      	mov	r3, r0
 8003594:	e009      	b.n	80035aa <Motors_SetMotorDirection+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.b_speed);
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <Motors_SetMotorDirection+0x4c>)
 8003598:	8a5b      	ldrh	r3, [r3, #18]
 800359a:	79ba      	ldrb	r2, [r7, #6]
 800359c:	79f9      	ldrb	r1, [r7, #7]
 800359e:	4805      	ldr	r0, [pc, #20]	; (80035b4 <Motors_SetMotorDirection+0x4c>)
 80035a0:	f7ff fd6e 	bl	8003080 <DRV8836_SetMotor>
 80035a4:	4603      	mov	r3, r0
 80035a6:	e000      	b.n	80035aa <Motors_SetMotorDirection+0x42>
		break;

	default:
		return MOTORS_ERROR;
 80035a8:	2301      	movs	r3, #1
		break;
	}
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200004fc 	.word	0x200004fc

080035b8 <Motors_SetMotorsOff>:

Motors_Error_t Motors_SetMotorsOff(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
	Motors_Error_t status = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, Output_A, Coast, 0);
 80035c2:	2300      	movs	r3, #0
 80035c4:	2200      	movs	r2, #0
 80035c6:	2100      	movs	r1, #0
 80035c8:	480b      	ldr	r0, [pc, #44]	; (80035f8 <Motors_SetMotorsOff+0x40>)
 80035ca:	f7ff fd59 	bl	8003080 <DRV8836_SetMotor>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, Output_B, Coast, 0);
 80035d8:	2300      	movs	r3, #0
 80035da:	2200      	movs	r2, #0
 80035dc:	2101      	movs	r1, #1
 80035de:	4806      	ldr	r0, [pc, #24]	; (80035f8 <Motors_SetMotorsOff+0x40>)
 80035e0:	f7ff fd4e 	bl	8003080 <DRV8836_SetMotor>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	71fb      	strb	r3, [r7, #7]
	return status;
 80035ee:	79fb      	ldrb	r3, [r7, #7]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200004fc 	.word	0x200004fc

080035fc <Motors_EncoderSample>:
//
// -- Encoder routine --
//

void Motors_EncoderSample(void)						//call this function with encoder sampling frequency
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	MotorEnc_Uptade(&MotorEncoderA);
 8003600:	4818      	ldr	r0, [pc, #96]	; (8003664 <Motors_EncoderSample+0x68>)
 8003602:	f7ff feb7 	bl	8003374 <MotorEnc_Uptade>
	MotorEnc_Uptade(&MotorEncoderB);
 8003606:	4818      	ldr	r0, [pc, #96]	; (8003668 <Motors_EncoderSample+0x6c>)
 8003608:	f7ff feb4 	bl	8003374 <MotorEnc_Uptade>
	//MotorEnc_FilterVelocity(&MotorEncoderA);
	//MotorEnc_FilterVelocity(&MotorEncoderB);

	MotorEncoderA.VelocityFiltered = FIRFilter_Update(&EncoderFilterA, MotorEncoderA.Velocity);
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <Motors_EncoderSample+0x68>)
 800360e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fc12 	bl	8000e3c <__aeabi_i2f>
 8003618:	4603      	mov	r3, r0
 800361a:	4619      	mov	r1, r3
 800361c:	4813      	ldr	r0, [pc, #76]	; (800366c <Motors_EncoderSample+0x70>)
 800361e:	f7fd fe27 	bl	8001270 <FIRFilter_Update>
 8003622:	4603      	mov	r3, r0
 8003624:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <Motors_EncoderSample+0x68>)
 8003626:	6093      	str	r3, [r2, #8]


	UartBufferLength = sprintf((char*) UartBuffer, "$%d %d;",(int16_t) MotorEncoderA.VelocityFiltered, MotorEncoderA.Velocity );
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <Motors_EncoderSample+0x68>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fc59 	bl	8000ee4 <__aeabi_f2iz>
 8003632:	4603      	mov	r3, r0
 8003634:	b21b      	sxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <Motors_EncoderSample+0x68>)
 800363a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800363e:	490c      	ldr	r1, [pc, #48]	; (8003670 <Motors_EncoderSample+0x74>)
 8003640:	480c      	ldr	r0, [pc, #48]	; (8003674 <Motors_EncoderSample+0x78>)
 8003642:	f004 f8b5 	bl	80077b0 <siprintf>
 8003646:	4603      	mov	r3, r0
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <Motors_EncoderSample+0x7c>)
 800364c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, UartBuffer, UartBufferLength, 500);
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <Motors_EncoderSample+0x7c>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b29a      	uxth	r2, r3
 8003654:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003658:	4906      	ldr	r1, [pc, #24]	; (8003674 <Motors_EncoderSample+0x78>)
 800365a:	4808      	ldr	r0, [pc, #32]	; (800367c <Motors_EncoderSample+0x80>)
 800365c:	f003 fa08 	bl	8006a70 <HAL_UART_Transmit>

}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000514 	.word	0x20000514
 8003668:	2000052c 	.word	0x2000052c
 800366c:	20000544 	.word	0x20000544
 8003670:	08009a74 	.word	0x08009a74
 8003674:	200005b0 	.word	0x200005b0
 8003678:	200005c0 	.word	0x200005c0
 800367c:	200004b4 	.word	0x200004b4

08003680 <Prog_DiodeTest_Init>:
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
 8003684:	2201      	movs	r2, #1
 8003686:	2101      	movs	r1, #1
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <Prog_DiodeTest_Init+0x14>)
 800368a:	f000 fc8d 	bl	8003fa8 <HAL_GPIO_WritePin>
 800368e:	2300      	movs	r3, #0
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40011000 	.word	0x40011000

08003698 <Prog_DiodeTest_Deinit>:
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
 800369c:	2300      	movs	r3, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <Prog_DiodeTest_Program>:
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	2300      	movs	r3, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <Prog_DiodeTest_Launch>:
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <Prog_DiodeTest_Launch+0x10>)
 80036ba:	f000 f897 	bl	80037ec <Programs_SetProgram>
 80036be:	4603      	mov	r3, r0
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000068 	.word	0x20000068

080036c8 <Prog_DiodeTest_Parser>:
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d002      	beq.n	80036e6 <Prog_DiodeTest_Parser+0x1e>
 80036e0:	2b21      	cmp	r3, #33	; 0x21
 80036e2:	d012      	beq.n	800370a <Prog_DiodeTest_Parser+0x42>
 80036e4:	e023      	b.n	800372e <Prog_DiodeTest_Parser+0x66>
 80036e6:	2200      	movs	r2, #0
 80036e8:	2101      	movs	r1, #1
 80036ea:	4813      	ldr	r0, [pc, #76]	; (8003738 <Prog_DiodeTest_Parser+0x70>)
 80036ec:	f000 fc5c 	bl	8003fa8 <HAL_GPIO_WritePin>
 80036f0:	23d0      	movs	r3, #208	; 0xd0
 80036f2:	723b      	strb	r3, [r7, #8]
 80036f4:	2322      	movs	r3, #34	; 0x22
 80036f6:	727b      	strb	r3, [r7, #9]
 80036f8:	2301      	movs	r3, #1
 80036fa:	72bb      	strb	r3, [r7, #10]
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	2103      	movs	r1, #3
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe f874 	bl	80017f0 <Radio_TxBufferPut>
 8003708:	e011      	b.n	800372e <Prog_DiodeTest_Parser+0x66>
 800370a:	2201      	movs	r2, #1
 800370c:	2101      	movs	r1, #1
 800370e:	480a      	ldr	r0, [pc, #40]	; (8003738 <Prog_DiodeTest_Parser+0x70>)
 8003710:	f000 fc4a 	bl	8003fa8 <HAL_GPIO_WritePin>
 8003714:	23d0      	movs	r3, #208	; 0xd0
 8003716:	723b      	strb	r3, [r7, #8]
 8003718:	2322      	movs	r3, #34	; 0x22
 800371a:	727b      	strb	r3, [r7, #9]
 800371c:	2300      	movs	r3, #0
 800371e:	72bb      	strb	r3, [r7, #10]
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	2103      	movs	r1, #3
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe f862 	bl	80017f0 <Radio_TxBufferPut>
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40011000 	.word	0x40011000

0800373c <Prog_MotorsDebug_Init>:
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
 8003740:	2201      	movs	r2, #1
 8003742:	2101      	movs	r1, #1
 8003744:	4803      	ldr	r0, [pc, #12]	; (8003754 <Prog_MotorsDebug_Init+0x18>)
 8003746:	f000 fc2f 	bl	8003fa8 <HAL_GPIO_WritePin>
 800374a:	f7ff ff35 	bl	80035b8 <Motors_SetMotorsOff>
 800374e:	2300      	movs	r3, #0
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40011000 	.word	0x40011000

08003758 <Prog_MotorsDebug_Deinit>:
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
 800375c:	f7ff ff2c 	bl	80035b8 <Motors_SetMotorsOff>
 8003760:	2300      	movs	r3, #0
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}

08003766 <Prog_MotorsDebug_Program>:
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
 800376a:	2300      	movs	r3, #0
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <Prog_MotorsDebug_Launch>:
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <Prog_MotorsDebug_Launch+0x10>)
 800377a:	f000 f837 	bl	80037ec <Programs_SetProgram>
 800377e:	4603      	mov	r3, r0
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	2000007c 	.word	0x2000007c

08003788 <Prog_MotorsDebug_Parser>:
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b20      	cmp	r3, #32
 800379e:	d002      	beq.n	80037a6 <Prog_MotorsDebug_Parser+0x1e>
 80037a0:	2b21      	cmp	r3, #33	; 0x21
 80037a2:	d00f      	beq.n	80037c4 <Prog_MotorsDebug_Parser+0x3c>
 80037a4:	e01d      	b.n	80037e2 <Prog_MotorsDebug_Parser+0x5a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	72fb      	strb	r3, [r7, #11]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	789b      	ldrb	r3, [r3, #2]
 80037b2:	727b      	strb	r3, [r7, #9]
 80037b4:	7a7b      	ldrb	r3, [r7, #9]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff feab 	bl	8003518 <Motors_SetMotorPWM>
 80037c2:	e00e      	b.n	80037e2 <Prog_MotorsDebug_Parser+0x5a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3301      	adds	r3, #1
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	72fb      	strb	r3, [r7, #11]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3302      	adds	r3, #2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	72bb      	strb	r3, [r7, #10]
 80037d4:	7aba      	ldrb	r2, [r7, #10]
 80037d6:	7afb      	ldrb	r3, [r7, #11]
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fec4 	bl	8003568 <Motors_SetMotorDirection>
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <Programs_SetProgram>:
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <Programs_SetProgram+0x12>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e010      	b.n	8003820 <Programs_SetProgram+0x34>
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <Programs_SetProgram+0x3c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <Programs_SetProgram+0x32>
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <Programs_SetProgram+0x3c>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <Programs_SetProgram+0x3c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4798      	blx	r3
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <Programs_SetProgram+0x40>)
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <Programs_SetProgram+0x34>
 800381e:	2301      	movs	r3, #1
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200005c4 	.word	0x200005c4
 800382c:	200005c8 	.word	0x200005c8

08003830 <Programs_ExitProgram>:
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <Programs_ExitProgram+0x18>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4798      	blx	r3
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <Programs_ExitProgram+0x1c>)
 800383e:	2202      	movs	r2, #2
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200005c4 	.word	0x200005c4
 800384c:	200005c8 	.word	0x200005c8

08003850 <Programs_GetProgram>:
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <Programs_GetProgram+0x10>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	200005c4 	.word	0x200005c4

08003864 <Programs_ClearProgram>:
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <Programs_ClearProgram+0x18>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <Programs_ClearProgram+0x1c>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	200005c4 	.word	0x200005c4
 8003880:	200005c8 	.word	0x200005c8

08003884 <Programs_PerformProgram>:
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <Programs_PerformProgram+0x44>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d010      	beq.n	80038b2 <Programs_PerformProgram+0x2e>
 8003890:	2b02      	cmp	r3, #2
 8003892:	dc10      	bgt.n	80038b6 <Programs_PerformProgram+0x32>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <Programs_PerformProgram+0x36>
 8003898:	2b01      	cmp	r3, #1
 800389a:	d000      	beq.n	800389e <Programs_PerformProgram+0x1a>
 800389c:	e00b      	b.n	80038b6 <Programs_PerformProgram+0x32>
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <Programs_PerformProgram+0x48>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <Programs_PerformProgram+0x3a>
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <Programs_PerformProgram+0x48>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4798      	blx	r3
 80038b0:	e005      	b.n	80038be <Programs_PerformProgram+0x3a>
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <Programs_PerformProgram+0x3c>
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <Programs_PerformProgram+0x3c>
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <Programs_PerformProgram+0x3c>
 80038be:	bf00      	nop
 80038c0:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <Programs_PerformProgram+0x44>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200005c8 	.word	0x200005c8
 80038cc:	200005c4 	.word	0x200005c4

080038d0 <Programs_SendProgramStartedACK>:
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	460a      	mov	r2, r1
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	4613      	mov	r3, r2
 80038de:	71bb      	strb	r3, [r7, #6]
 80038e0:	2310      	movs	r3, #16
 80038e2:	733b      	strb	r3, [r7, #12]
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	737b      	strb	r3, [r7, #13]
 80038e8:	79bb      	ldrb	r3, [r7, #6]
 80038ea:	73bb      	strb	r3, [r7, #14]
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	2103      	movs	r1, #3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd ff7c 	bl	80017f0 <Radio_TxBufferPut>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <Programs_SendProgramExitACK>:
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
 800390c:	2311      	movs	r3, #17
 800390e:	733b      	strb	r3, [r7, #12]
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	737b      	strb	r3, [r7, #13]
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	2102      	movs	r1, #2
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd ff68 	bl	80017f0 <Radio_TxBufferPut>
 8003920:	4603      	mov	r3, r0
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800392c:	f7ff f808 	bl	8002940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003930:	480b      	ldr	r0, [pc, #44]	; (8003960 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003932:	490c      	ldr	r1, [pc, #48]	; (8003964 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003938:	e002      	b.n	8003940 <LoopCopyDataInit>

0800393a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800393c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393e:	3304      	adds	r3, #4

08003940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003944:	d3f9      	bcc.n	800393a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003948:	4c09      	ldr	r4, [pc, #36]	; (8003970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800394c:	e001      	b.n	8003952 <LoopFillZerobss>

0800394e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003950:	3204      	adds	r2, #4

08003952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003954:	d3fb      	bcc.n	800394e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003956:	f003 ffe7 	bl	8007928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800395a:	f7fe f8d1 	bl	8001b00 <main>
  bx lr
 800395e:	4770      	bx	lr
  ldr r0, =_sdata
 8003960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003964:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8003968:	08009e34 	.word	0x08009e34
  ldr r2, =_sbss
 800396c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003970:	2000071c 	.word	0x2000071c

08003974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <ADC1_2_IRQHandler>
	...

08003978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <HAL_Init+0x28>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_Init+0x28>)
 8003982:	f043 0310 	orr.w	r3, r3, #16
 8003986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003988:	2003      	movs	r0, #3
 800398a:	f000 f947 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800398e:	200f      	movs	r0, #15
 8003990:	f000 f808 	bl	80039a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003994:	f7fe fea8 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_InitTick+0x54>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_InitTick+0x58>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f95f 	bl	8003c86 <HAL_SYSTICK_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00e      	b.n	80039f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d80a      	bhi.n	80039ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d8:	2200      	movs	r2, #0
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f000 f927 	bl	8003c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039e4:	4a06      	ldr	r2, [pc, #24]	; (8003a00 <HAL_InitTick+0x5c>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000064 	.word	0x20000064
 80039fc:	20000094 	.word	0x20000094
 8003a00:	20000090 	.word	0x20000090

08003a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_IncTick+0x1c>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_IncTick+0x20>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	4a03      	ldr	r2, [pc, #12]	; (8003a24 <HAL_IncTick+0x20>)
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000094 	.word	0x20000094
 8003a24:	200005cc 	.word	0x200005cc

08003a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a2c:	4b02      	ldr	r3, [pc, #8]	; (8003a38 <HAL_GetTick+0x10>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	200005cc 	.word	0x200005cc

08003a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a44:	f7ff fff0 	bl	8003a28 <HAL_GetTick>
 8003a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d005      	beq.n	8003a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_Delay+0x44>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a62:	bf00      	nop
 8003a64:	f7ff ffe0 	bl	8003a28 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d8f7      	bhi.n	8003a64 <HAL_Delay+0x28>
  {
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000094 	.word	0x20000094

08003a84 <__NVIC_SetPriorityGrouping>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab6:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	60d3      	str	r3, [r2, #12]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_GetPriorityGrouping>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 0307 	and.w	r3, r3, #7
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_EnableIRQ>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db0b      	blt.n	8003b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4906      	ldr	r1, [pc, #24]	; (8003b1c <__NVIC_EnableIRQ+0x34>)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2001      	movs	r0, #1
 8003b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPriority>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db0a      	blt.n	8003b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	490c      	ldr	r1, [pc, #48]	; (8003b6c <__NVIC_SetPriority+0x4c>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b48:	e00a      	b.n	8003b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <__NVIC_SetPriority+0x50>)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	3b04      	subs	r3, #4
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	761a      	strb	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e100 	.word	0xe000e100
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <NVIC_EncodePriority>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f1c3 0307 	rsb	r3, r3, #7
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	bf28      	it	cs
 8003b92:	2304      	movcs	r3, #4
 8003b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d902      	bls.n	8003ba4 <NVIC_EncodePriority+0x30>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3b03      	subs	r3, #3
 8003ba2:	e000      	b.n	8003ba6 <NVIC_EncodePriority+0x32>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43d9      	mvns	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	4313      	orrs	r3, r2
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <SysTick_Config>:
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be8:	d301      	bcc.n	8003bee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00f      	b.n	8003c0e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <SysTick_Config+0x40>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bf6:	210f      	movs	r1, #15
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	f7ff ff90 	bl	8003b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <SysTick_Config+0x40>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c06:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <SysTick_Config+0x40>)
 8003c08:	2207      	movs	r2, #7
 8003c0a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	e000e010 	.word	0xe000e010

08003c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff2d 	bl	8003a84 <__NVIC_SetPriorityGrouping>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c44:	f7ff ff42 	bl	8003acc <__NVIC_GetPriorityGrouping>
 8003c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f7ff ff90 	bl	8003b74 <NVIC_EncodePriority>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff5f 	bl	8003b20 <__NVIC_SetPriority>
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4603      	mov	r3, r0
 8003c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff35 	bl	8003ae8 <__NVIC_EnableIRQ>
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ffa2 	bl	8003bd8 <SysTick_Config>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b08b      	sub	sp, #44	; 0x2c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	e169      	b.n	8003f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	f040 8158 	bne.w	8003f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a9a      	ldr	r2, [pc, #616]	; (8003f40 <HAL_GPIO_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d05e      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003cdc:	4a98      	ldr	r2, [pc, #608]	; (8003f40 <HAL_GPIO_Init+0x2a0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d875      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003ce2:	4a98      	ldr	r2, [pc, #608]	; (8003f44 <HAL_GPIO_Init+0x2a4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d058      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003ce8:	4a96      	ldr	r2, [pc, #600]	; (8003f44 <HAL_GPIO_Init+0x2a4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d86f      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003cee:	4a96      	ldr	r2, [pc, #600]	; (8003f48 <HAL_GPIO_Init+0x2a8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d052      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003cf4:	4a94      	ldr	r2, [pc, #592]	; (8003f48 <HAL_GPIO_Init+0x2a8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d869      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003cfa:	4a94      	ldr	r2, [pc, #592]	; (8003f4c <HAL_GPIO_Init+0x2ac>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04c      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003d00:	4a92      	ldr	r2, [pc, #584]	; (8003f4c <HAL_GPIO_Init+0x2ac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d863      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003d06:	4a92      	ldr	r2, [pc, #584]	; (8003f50 <HAL_GPIO_Init+0x2b0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d046      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
 8003d0c:	4a90      	ldr	r2, [pc, #576]	; (8003f50 <HAL_GPIO_Init+0x2b0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d85d      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003d12:	2b12      	cmp	r3, #18
 8003d14:	d82a      	bhi.n	8003d6c <HAL_GPIO_Init+0xcc>
 8003d16:	2b12      	cmp	r3, #18
 8003d18:	d859      	bhi.n	8003dce <HAL_GPIO_Init+0x12e>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <HAL_GPIO_Init+0x80>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d9b 	.word	0x08003d9b
 8003d24:	08003d75 	.word	0x08003d75
 8003d28:	08003d87 	.word	0x08003d87
 8003d2c:	08003dc9 	.word	0x08003dc9
 8003d30:	08003dcf 	.word	0x08003dcf
 8003d34:	08003dcf 	.word	0x08003dcf
 8003d38:	08003dcf 	.word	0x08003dcf
 8003d3c:	08003dcf 	.word	0x08003dcf
 8003d40:	08003dcf 	.word	0x08003dcf
 8003d44:	08003dcf 	.word	0x08003dcf
 8003d48:	08003dcf 	.word	0x08003dcf
 8003d4c:	08003dcf 	.word	0x08003dcf
 8003d50:	08003dcf 	.word	0x08003dcf
 8003d54:	08003dcf 	.word	0x08003dcf
 8003d58:	08003dcf 	.word	0x08003dcf
 8003d5c:	08003dcf 	.word	0x08003dcf
 8003d60:	08003dcf 	.word	0x08003dcf
 8003d64:	08003d7d 	.word	0x08003d7d
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	4a79      	ldr	r2, [pc, #484]	; (8003f54 <HAL_GPIO_Init+0x2b4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d72:	e02c      	b.n	8003dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	623b      	str	r3, [r7, #32]
          break;
 8003d7a:	e029      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	3304      	adds	r3, #4
 8003d82:	623b      	str	r3, [r7, #32]
          break;
 8003d84:	e024      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	623b      	str	r3, [r7, #32]
          break;
 8003d8e:	e01f      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	330c      	adds	r3, #12
 8003d96:	623b      	str	r3, [r7, #32]
          break;
 8003d98:	e01a      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003da2:	2304      	movs	r3, #4
 8003da4:	623b      	str	r3, [r7, #32]
          break;
 8003da6:	e013      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db0:	2308      	movs	r3, #8
 8003db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	611a      	str	r2, [r3, #16]
          break;
 8003dba:	e009      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	615a      	str	r2, [r3, #20]
          break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	623b      	str	r3, [r7, #32]
          break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_GPIO_Init+0x130>
          break;
 8003dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2bff      	cmp	r3, #255	; 0xff
 8003dd4:	d801      	bhi.n	8003dda <HAL_GPIO_Init+0x13a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	e001      	b.n	8003dde <HAL_GPIO_Init+0x13e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	d802      	bhi.n	8003dec <HAL_GPIO_Init+0x14c>
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	e002      	b.n	8003df2 <HAL_GPIO_Init+0x152>
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	3b08      	subs	r3, #8
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	210f      	movs	r1, #15
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	401a      	ands	r2, r3
 8003e04:	6a39      	ldr	r1, [r7, #32]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80b1 	beq.w	8003f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e20:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <HAL_GPIO_Init+0x2b8>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	4a4c      	ldr	r2, [pc, #304]	; (8003f58 <HAL_GPIO_Init+0x2b8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6193      	str	r3, [r2, #24]
 8003e2c:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_GPIO_Init+0x2b8>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e38:	4a48      	ldr	r2, [pc, #288]	; (8003f5c <HAL_GPIO_Init+0x2bc>)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <HAL_GPIO_Init+0x2c0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_GPIO_Init+0x1ec>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3f      	ldr	r2, [pc, #252]	; (8003f64 <HAL_GPIO_Init+0x2c4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00d      	beq.n	8003e88 <HAL_GPIO_Init+0x1e8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3e      	ldr	r2, [pc, #248]	; (8003f68 <HAL_GPIO_Init+0x2c8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <HAL_GPIO_Init+0x1e4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3d      	ldr	r2, [pc, #244]	; (8003f6c <HAL_GPIO_Init+0x2cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_GPIO_Init+0x1e0>
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e004      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e002      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_GPIO_Init+0x1ee>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	f002 0203 	and.w	r2, r2, #3
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4093      	lsls	r3, r2
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e9e:	492f      	ldr	r1, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x2bc>)
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	492c      	ldr	r1, [pc, #176]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4928      	ldr	r1, [pc, #160]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4922      	ldr	r1, [pc, #136]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
 8003eec:	e006      	b.n	8003efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	491e      	ldr	r1, [pc, #120]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4918      	ldr	r1, [pc, #96]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	4914      	ldr	r1, [pc, #80]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d021      	beq.n	8003f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_GPIO_Init+0x2d0>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	e021      	b.n	8003f82 <HAL_GPIO_Init+0x2e2>
 8003f3e:	bf00      	nop
 8003f40:	10320000 	.word	0x10320000
 8003f44:	10310000 	.word	0x10310000
 8003f48:	10220000 	.word	0x10220000
 8003f4c:	10210000 	.word	0x10210000
 8003f50:	10120000 	.word	0x10120000
 8003f54:	10110000 	.word	0x10110000
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40010800 	.word	0x40010800
 8003f64:	40010c00 	.word	0x40010c00
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_GPIO_Init+0x304>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <HAL_GPIO_Init+0x304>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	3301      	adds	r3, #1
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f47f ae8e 	bne.w	8003cb4 <HAL_GPIO_Init+0x14>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	372c      	adds	r7, #44	; 0x2c
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb8:	787b      	ldrb	r3, [r7, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fc4:	e003      	b.n	8003fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	041a      	lsls	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	43d9      	mvns	r1, r3
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
	...

0800400c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004022:	4a05      	ldr	r2, [pc, #20]	; (8004038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fd fe0a 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40010400 	.word	0x40010400

0800403c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e12b      	b.n	80042a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fa96 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800409e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040a0:	f000 fe10 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 80040a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a81      	ldr	r2, [pc, #516]	; (80042b0 <HAL_I2C_Init+0x274>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d807      	bhi.n	80040c0 <HAL_I2C_Init+0x84>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a80      	ldr	r2, [pc, #512]	; (80042b4 <HAL_I2C_Init+0x278>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	bf94      	ite	ls
 80040b8:	2301      	movls	r3, #1
 80040ba:	2300      	movhi	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e006      	b.n	80040ce <HAL_I2C_Init+0x92>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a7d      	ldr	r2, [pc, #500]	; (80042b8 <HAL_I2C_Init+0x27c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bf94      	ite	ls
 80040c8:	2301      	movls	r3, #1
 80040ca:	2300      	movhi	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0e7      	b.n	80042a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a78      	ldr	r2, [pc, #480]	; (80042bc <HAL_I2C_Init+0x280>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0c9b      	lsrs	r3, r3, #18
 80040e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a6a      	ldr	r2, [pc, #424]	; (80042b0 <HAL_I2C_Init+0x274>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d802      	bhi.n	8004110 <HAL_I2C_Init+0xd4>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3301      	adds	r3, #1
 800410e:	e009      	b.n	8004124 <HAL_I2C_Init+0xe8>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	4a69      	ldr	r2, [pc, #420]	; (80042c0 <HAL_I2C_Init+0x284>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	3301      	adds	r3, #1
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	430b      	orrs	r3, r1
 800412a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	495c      	ldr	r1, [pc, #368]	; (80042b0 <HAL_I2C_Init+0x274>)
 8004140:	428b      	cmp	r3, r1
 8004142:	d819      	bhi.n	8004178 <HAL_I2C_Init+0x13c>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e59      	subs	r1, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004152:	1c59      	adds	r1, r3, #1
 8004154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004158:	400b      	ands	r3, r1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_I2C_Init+0x138>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1e59      	subs	r1, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fbb1 f3f3 	udiv	r3, r1, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004172:	e051      	b.n	8004218 <HAL_I2C_Init+0x1dc>
 8004174:	2304      	movs	r3, #4
 8004176:	e04f      	b.n	8004218 <HAL_I2C_Init+0x1dc>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d111      	bne.n	80041a4 <HAL_I2C_Init+0x168>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1e58      	subs	r0, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	440b      	add	r3, r1
 800418e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e012      	b.n	80041ca <HAL_I2C_Init+0x18e>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e58      	subs	r0, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	0099      	lsls	r1, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Init+0x196>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e022      	b.n	8004218 <HAL_I2C_Init+0x1dc>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10e      	bne.n	80041f8 <HAL_I2C_Init+0x1bc>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1e58      	subs	r0, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	440b      	add	r3, r1
 80041e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	e00f      	b.n	8004218 <HAL_I2C_Init+0x1dc>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1e58      	subs	r0, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	0099      	lsls	r1, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	fbb0 f3f3 	udiv	r3, r0, r3
 800420e:	3301      	adds	r3, #1
 8004210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	6809      	ldr	r1, [r1, #0]
 800421c:	4313      	orrs	r3, r2
 800421e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6911      	ldr	r1, [r2, #16]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	4311      	orrs	r1, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	430b      	orrs	r3, r1
 800425a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	000186a0 	.word	0x000186a0
 80042b4:	001e847f 	.word	0x001e847f
 80042b8:	003d08ff 	.word	0x003d08ff
 80042bc:	431bde83 	.word	0x431bde83
 80042c0:	10624dd3 	.word	0x10624dd3

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e304      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8087 	beq.w	80043f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e4:	4b92      	ldr	r3, [pc, #584]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d00c      	beq.n	800430a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042f0:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d112      	bne.n	8004322 <HAL_RCC_OscConfig+0x5e>
 80042fc:	4b8c      	ldr	r3, [pc, #560]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d10b      	bne.n	8004322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430a:	4b89      	ldr	r3, [pc, #548]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d06c      	beq.n	80043f0 <HAL_RCC_OscConfig+0x12c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d168      	bne.n	80043f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e2de      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x76>
 800432c:	4b80      	ldr	r3, [pc, #512]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a7f      	ldr	r2, [pc, #508]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e02e      	b.n	8004398 <HAL_RCC_OscConfig+0xd4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x98>
 8004342:	4b7b      	ldr	r3, [pc, #492]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7a      	ldr	r2, [pc, #488]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b78      	ldr	r3, [pc, #480]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a77      	ldr	r2, [pc, #476]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e01d      	b.n	8004398 <HAL_RCC_OscConfig+0xd4>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0xbc>
 8004366:	4b72      	ldr	r3, [pc, #456]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a71      	ldr	r2, [pc, #452]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6e      	ldr	r2, [pc, #440]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0xd4>
 8004380:	4b6b      	ldr	r3, [pc, #428]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6a      	ldr	r2, [pc, #424]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b68      	ldr	r3, [pc, #416]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a67      	ldr	r2, [pc, #412]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7ff fb42 	bl	8003a28 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7ff fb3e 	bl	8003a28 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e292      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0xe4>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7ff fb2e 	bl	8003a28 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7ff fb2a 	bl	8003a28 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e27e      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	4b53      	ldr	r3, [pc, #332]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x10c>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043fe:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800440a:	4b49      	ldr	r3, [pc, #292]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b08      	cmp	r3, #8
 8004414:	d11c      	bne.n	8004450 <HAL_RCC_OscConfig+0x18c>
 8004416:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x176>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e252      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443a:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4939      	ldr	r1, [pc, #228]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	e03a      	b.n	80044c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x270>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7ff fae3 	bl	8003a28 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004466:	f7ff fadf 	bl	8003a28 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e233      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4927      	ldr	r1, [pc, #156]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
 8004498:	e015      	b.n	80044c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCC_OscConfig+0x270>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7ff fac2 	bl	8003a28 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a8:	f7ff fabe 	bl	8003a28 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e212      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d03a      	beq.n	8004548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d019      	beq.n	800450e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_RCC_OscConfig+0x274>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e0:	f7ff faa2 	bl	8003a28 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e8:	f7ff fa9e 	bl	8003a28 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e1f2      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004506:	2001      	movs	r0, #1
 8004508:	f000 fc04 	bl	8004d14 <RCC_Delay>
 800450c:	e01c      	b.n	8004548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_RCC_OscConfig+0x274>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004514:	f7ff fa88 	bl	8003a28 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451a:	e00f      	b.n	800453c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451c:	f7ff fa84 	bl	8003a28 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d908      	bls.n	800453c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1d8      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	42420000 	.word	0x42420000
 8004538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800453c:	4b9b      	ldr	r3, [pc, #620]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e9      	bne.n	800451c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a6 	beq.w	80046a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4b94      	ldr	r3, [pc, #592]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b91      	ldr	r3, [pc, #580]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	4a90      	ldr	r2, [pc, #576]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	61d3      	str	r3, [r2, #28]
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004582:	4b8b      	ldr	r3, [pc, #556]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458e:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a87      	ldr	r2, [pc, #540]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7ff fa45 	bl	8003a28 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7ff fa41 	bl	8003a28 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e195      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x312>
 80045c8:	4b78      	ldr	r3, [pc, #480]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a77      	ldr	r2, [pc, #476]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6213      	str	r3, [r2, #32]
 80045d4:	e02d      	b.n	8004632 <HAL_RCC_OscConfig+0x36e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x334>
 80045de:	4b73      	ldr	r3, [pc, #460]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4a72      	ldr	r2, [pc, #456]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6213      	str	r3, [r2, #32]
 80045ea:	4b70      	ldr	r3, [pc, #448]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4a6f      	ldr	r2, [pc, #444]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045f0:	f023 0304 	bic.w	r3, r3, #4
 80045f4:	6213      	str	r3, [r2, #32]
 80045f6:	e01c      	b.n	8004632 <HAL_RCC_OscConfig+0x36e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b05      	cmp	r3, #5
 80045fe:	d10c      	bne.n	800461a <HAL_RCC_OscConfig+0x356>
 8004600:	4b6a      	ldr	r3, [pc, #424]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	4b67      	ldr	r3, [pc, #412]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4a66      	ldr	r2, [pc, #408]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6213      	str	r3, [r2, #32]
 8004618:	e00b      	b.n	8004632 <HAL_RCC_OscConfig+0x36e>
 800461a:	4b64      	ldr	r3, [pc, #400]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4a63      	ldr	r2, [pc, #396]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6213      	str	r3, [r2, #32]
 8004626:	4b61      	ldr	r3, [pc, #388]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4a60      	ldr	r2, [pc, #384]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d015      	beq.n	8004666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7ff f9f5 	bl	8003a28 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7ff f9f1 	bl	8003a28 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e143      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	4b54      	ldr	r3, [pc, #336]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ee      	beq.n	8004642 <HAL_RCC_OscConfig+0x37e>
 8004664:	e014      	b.n	8004690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004666:	f7ff f9df 	bl	8003a28 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7ff f9db 	bl	8003a28 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e12d      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004684:	4b49      	ldr	r3, [pc, #292]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ee      	bne.n	800466e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d105      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004696:	4b45      	ldr	r3, [pc, #276]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4a44      	ldr	r2, [pc, #272]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800469c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 808c 	beq.w	80047c4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80046ac:	4b3f      	ldr	r3, [pc, #252]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d10e      	bne.n	80046d8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80046ba:	4b3c      	ldr	r3, [pc, #240]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d108      	bne.n	80046d8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e103      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d14e      	bne.n	800477e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80046e0:	4b32      	ldr	r3, [pc, #200]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80046ec:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0ef      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004700:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_RCC_OscConfig+0x4f0>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7ff f98f 	bl	8003a28 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800470e:	f7ff f98b 	bl	8003a28 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0df      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004720:	4b22      	ldr	r3, [pc, #136]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800472c:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	491c      	ldr	r1, [pc, #112]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4918      	ldr	r1, [pc, #96]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_RCC_OscConfig+0x4f0>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7ff f967 	bl	8003a28 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800475e:	f7ff f963 	bl	8003a28 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b64      	cmp	r3, #100	; 0x64
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0b7      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x49a>
 800477c:	e022      	b.n	80047c4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCC_OscConfig+0x4f0>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7ff f94a 	bl	8003a28 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004796:	e00f      	b.n	80047b8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004798:	f7ff f946 	bl	8003a28 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d908      	bls.n	80047b8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e09a      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40007000 	.word	0x40007000
 80047b4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e9      	bne.n	8004798 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8088 	beq.w	80048de <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ce:	4b46      	ldr	r3, [pc, #280]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d068      	beq.n	80048ac <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d14d      	bne.n	800487e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	4b42      	ldr	r3, [pc, #264]	; (80048ec <HAL_RCC_OscConfig+0x628>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7ff f91e 	bl	8003a28 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f0:	f7ff f91a 	bl	8003a28 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e06e      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d10f      	bne.n	8004838 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004818:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4931      	ldr	r1, [pc, #196]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 8004822:	4313      	orrs	r3, r2
 8004824:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f023 020f 	bic.w	r2, r3, #15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	492d      	ldr	r1, [pc, #180]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 8004834:	4313      	orrs	r3, r2
 8004836:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	430b      	orrs	r3, r1
 800484a:	4927      	ldr	r1, [pc, #156]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004850:	4b26      	ldr	r3, [pc, #152]	; (80048ec <HAL_RCC_OscConfig+0x628>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004856:	f7ff f8e7 	bl	8003a28 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485e:	f7ff f8e3 	bl	8003a28 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e037      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x59a>
 800487c:	e02f      	b.n	80048de <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <HAL_RCC_OscConfig+0x628>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7ff f8d0 	bl	8003a28 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488c:	f7ff f8cc 	bl	8003a28 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e020      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x5c8>
 80048aa:	e018      	b.n	80048de <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e013      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_OscConfig+0x624>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	42420060 	.word	0x42420060

080048f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0d0      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004904:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d910      	bls.n	8004934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004912:	4b67      	ldr	r3, [pc, #412]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 0207 	bic.w	r2, r3, #7
 800491a:	4965      	ldr	r1, [pc, #404]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b63      	ldr	r3, [pc, #396]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0b8      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800494c:	4b59      	ldr	r3, [pc, #356]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a58      	ldr	r2, [pc, #352]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004956:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004964:	4b53      	ldr	r3, [pc, #332]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a52      	ldr	r2, [pc, #328]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800496e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	4b50      	ldr	r3, [pc, #320]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	494d      	ldr	r1, [pc, #308]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d040      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b47      	ldr	r3, [pc, #284]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d115      	bne.n	80049ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e07f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ae:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e073      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e06b      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ce:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f023 0203 	bic.w	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4936      	ldr	r1, [pc, #216]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e0:	f7ff f822 	bl	8003a28 <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e8:	f7ff f81e 	bl	8003a28 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e053      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 020c 	and.w	r2, r3, #12
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d1eb      	bne.n	80049e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d210      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 0207 	bic.w	r2, r3, #7
 8004a26:	4922      	ldr	r1, [pc, #136]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e032      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4c:	4b19      	ldr	r3, [pc, #100]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4916      	ldr	r1, [pc, #88]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	490e      	ldr	r1, [pc, #56]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a7e:	f000 f821 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004a82:	4602      	mov	r2, r0
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	490a      	ldr	r1, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	5ccb      	ldrb	r3, [r1, r3]
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	4a09      	ldr	r2, [pc, #36]	; (8004abc <HAL_RCC_ClockConfig+0x1cc>)
 8004a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe ff80 	bl	80039a4 <HAL_InitTick>

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	08009a7c 	.word	0x08009a7c
 8004abc:	20000064 	.word	0x20000064
 8004ac0:	20000090 	.word	0x20000090

08004ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac8:	b092      	sub	sp, #72	; 0x48
 8004aca:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad8:	2300      	movs	r3, #0
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ae8:	4b6b      	ldr	r3, [pc, #428]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d002      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x3a>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d003      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x40>
 8004afc:	e0c3      	b.n	8004c86 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004afe:	4b67      	ldr	r3, [pc, #412]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004b02:	e0c3      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	0c9b      	lsrs	r3, r3, #18
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	4b64      	ldr	r3, [pc, #400]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80ac 	beq.w	8004c76 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004b1e:	4b5e      	ldr	r3, [pc, #376]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f003 020f 	and.w	r2, r3, #15
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004b2c:	4b5a      	ldr	r3, [pc, #360]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 808c 	beq.w	8004c52 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004b3a:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	3301      	adds	r3, #1
 8004b46:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004b48:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	3302      	adds	r3, #2
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b60:	2200      	movs	r2, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	4611      	mov	r1, r2
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	fb00 f203 	mul.w	r2, r0, r3
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	fb03 f301 	mul.w	r3, r3, r1
 8004b72:	4413      	add	r3, r2
 8004b74:	6a3a      	ldr	r2, [r7, #32]
 8004b76:	fba2 4500 	umull	r4, r5, r2, r0
 8004b7a:	442b      	add	r3, r5
 8004b7c:	461d      	mov	r5, r3
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	0159      	lsls	r1, r3, #5
 8004b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b90:	0150      	lsls	r0, r2, #5
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	ebb2 0a04 	subs.w	sl, r2, r4
 8004b9a:	eb63 0b05 	sbc.w	fp, r3, r5
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004baa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bb2:	ebb2 080a 	subs.w	r8, r2, sl
 8004bb6:	eb63 090b 	sbc.w	r9, r3, fp
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bce:	4690      	mov	r8, r2
 8004bd0:	4699      	mov	r9, r3
 8004bd2:	eb18 0304 	adds.w	r3, r8, r4
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	eb49 0305 	adc.w	r3, r9, r5
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bea:	4629      	mov	r1, r5
 8004bec:	028b      	lsls	r3, r1, #10
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	028a      	lsls	r2, r1, #10
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	617a      	str	r2, [r7, #20]
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	60fa      	str	r2, [r7, #12]
 8004c10:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c14:	4622      	mov	r2, r4
 8004c16:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004c1a:	4645      	mov	r5, r8
 8004c1c:	fb05 f202 	mul.w	r2, r5, r2
 8004c20:	46cc      	mov	ip, r9
 8004c22:	4625      	mov	r5, r4
 8004c24:	461c      	mov	r4, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	fb03 f30c 	mul.w	r3, r3, ip
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4622      	mov	r2, r4
 8004c30:	4644      	mov	r4, r8
 8004c32:	fba2 2404 	umull	r2, r4, r2, r4
 8004c36:	61fc      	str	r4, [r7, #28]
 8004c38:	61ba      	str	r2, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	f7fc f974 	bl	8000f30 <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c50:	e007      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004c56:	fb03 f202 	mul.w	r2, r3, r2
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004c64:	7b5b      	ldrb	r3, [r3, #13]
 8004c66:	461a      	mov	r2, r3
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	647b      	str	r3, [r7, #68]	; 0x44
 8004c74:	e004      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8004c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c84:	e002      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3748      	adds	r7, #72	; 0x48
 8004c92:	46bd      	mov	sp, r7
 8004c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	08009a94 	.word	0x08009a94
 8004ca4:	08009aa4 	.word	0x08009aa4
 8004ca8:	003d0900 	.word	0x003d0900
 8004cac:	007a1200 	.word	0x007a1200

08004cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b02      	ldr	r3, [pc, #8]	; (8004cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr
 8004cc0:	20000064 	.word	0x20000064

08004cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cc8:	f7ff fff2 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4903      	ldr	r1, [pc, #12]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	08009a8c 	.word	0x08009a8c

08004cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cf0:	f7ff ffde 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	0adb      	lsrs	r3, r3, #11
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	08009a8c 	.word	0x08009a8c

08004d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <RCC_Delay+0x34>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <RCC_Delay+0x38>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0a5b      	lsrs	r3, r3, #9
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d30:	bf00      	nop
  }
  while (Delay --);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	60fa      	str	r2, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f9      	bne.n	8004d30 <RCC_Delay+0x1c>
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	20000064 	.word	0x20000064
 8004d4c:	10624dd3 	.word	0x10624dd3

08004d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e076      	b.n	8004e50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d72:	d009      	beq.n	8004d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
 8004d7a:	e005      	b.n	8004d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fd fc44 	bl	8002630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	ea42 0103 	orr.w	r1, r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	0c1a      	lsrs	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f002 0204 	and.w	r2, r2, #4
 8004e2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_SPI_Transmit+0x22>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e12d      	b.n	80050d6 <HAL_SPI_Transmit+0x27e>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e82:	f7fe fdd1 	bl	8003a28 <HAL_GetTick>
 8004e86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e9c:	e116      	b.n	80050cc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x52>
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eae:	e10d      	b.n	80050cc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef6:	d10f      	bne.n	8004f18 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d14f      	bne.n	8004fe0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_SPI_Transmit+0xf6>
 8004f48:	8afb      	ldrh	r3, [r7, #22]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d142      	bne.n	8004fd4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f72:	e02f      	b.n	8004fd4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d112      	bne.n	8004fa8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	881a      	ldrh	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	1c9a      	adds	r2, r3, #2
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fa6:	e015      	b.n	8004fd4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa8:	f7fe fd3e 	bl	8003a28 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d803      	bhi.n	8004fc0 <HAL_SPI_Transmit+0x168>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d102      	bne.n	8004fc6 <HAL_SPI_Transmit+0x16e>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004fd2:	e07b      	b.n	80050cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ca      	bne.n	8004f74 <HAL_SPI_Transmit+0x11c>
 8004fde:	e050      	b.n	8005082 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_Transmit+0x196>
 8004fe8:	8afb      	ldrh	r3, [r7, #22]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d144      	bne.n	8005078 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005014:	e030      	b.n	8005078 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d113      	bne.n	800504c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	86da      	strh	r2, [r3, #54]	; 0x36
 800504a:	e015      	b.n	8005078 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504c:	f7fe fcec 	bl	8003a28 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d803      	bhi.n	8005064 <HAL_SPI_Transmit+0x20c>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d102      	bne.n	800506a <HAL_SPI_Transmit+0x212>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005076:	e029      	b.n	80050cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1c9      	bne.n	8005016 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fbcc 	bl	8005824 <SPI_EndRxTxTransaction>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e003      	b.n	80050cc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b088      	sub	sp, #32
 80050e2:	af02      	add	r7, sp, #8
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005102:	e0fb      	b.n	80052fc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510c:	d112      	bne.n	8005134 <HAL_SPI_Receive+0x56>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10e      	bne.n	8005134 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2204      	movs	r2, #4
 800511a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f8ef 	bl	800530e <HAL_SPI_TransmitReceive>
 8005130:	4603      	mov	r3, r0
 8005132:	e0e8      	b.n	8005306 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_SPI_Receive+0x64>
 800513e:	2302      	movs	r3, #2
 8005140:	e0e1      	b.n	8005306 <HAL_SPI_Receive+0x228>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514a:	f7fe fc6d 	bl	8003a28 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_SPI_Receive+0x7e>
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005160:	e0cc      	b.n	80052fc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2204      	movs	r2, #4
 8005166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d10f      	bne.n	80051ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d16a      	bne.n	80052c6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051f0:	e032      	b.n	8005258 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d115      	bne.n	800522c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f103 020c 	add.w	r2, r3, #12
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800522a:	e015      	b.n	8005258 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522c:	f7fe fbfc 	bl	8003a28 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d803      	bhi.n	8005244 <HAL_SPI_Receive+0x166>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d102      	bne.n	800524a <HAL_SPI_Receive+0x16c>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005256:	e051      	b.n	80052fc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1c7      	bne.n	80051f2 <HAL_SPI_Receive+0x114>
 8005262:	e035      	b.n	80052d0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d113      	bne.n	800529a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	b292      	uxth	r2, r2
 800527e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005298:	e015      	b.n	80052c6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529a:	f7fe fbc5 	bl	8003a28 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d803      	bhi.n	80052b2 <HAL_SPI_Receive+0x1d4>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d102      	bne.n	80052b8 <HAL_SPI_Receive+0x1da>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80052c4:	e01a      	b.n	80052fc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1c9      	bne.n	8005264 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fa53 	bl	8005780 <SPI_EndRxTransaction>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
 80052f2:	e003      	b.n	80052fc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08c      	sub	sp, #48	; 0x30
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x26>
 8005330:	2302      	movs	r3, #2
 8005332:	e198      	b.n	8005666 <HAL_SPI_TransmitReceive+0x358>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533c:	f7fe fb74 	bl	8003a28 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800535a:	2b01      	cmp	r3, #1
 800535c:	d00f      	beq.n	800537e <HAL_SPI_TransmitReceive+0x70>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005364:	d107      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x68>
 800536e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005372:	2b04      	cmp	r3, #4
 8005374:	d003      	beq.n	800537e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005376:	2302      	movs	r3, #2
 8005378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800537c:	e16d      	b.n	800565a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x82>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x82>
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005396:	e160      	b.n	800565a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d003      	beq.n	80053ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2205      	movs	r2, #5
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	887a      	ldrh	r2, [r7, #2]
 80053c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d007      	beq.n	8005400 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005408:	d17c      	bne.n	8005504 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x10a>
 8005412:	8b7b      	ldrh	r3, [r7, #26]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d16a      	bne.n	80054ee <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	e057      	b.n	80054ee <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d11b      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x176>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x176>
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d113      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d119      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x1b8>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d014      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	b292      	uxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c2:	2301      	movs	r3, #1
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054c6:	f7fe faaf 	bl	8003a28 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d80b      	bhi.n	80054ee <HAL_SPI_TransmitReceive+0x1e0>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d007      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80054ec:	e0b5      	b.n	800565a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1a2      	bne.n	800543e <HAL_SPI_TransmitReceive+0x130>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d19d      	bne.n	800543e <HAL_SPI_TransmitReceive+0x130>
 8005502:	e080      	b.n	8005606 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_SPI_TransmitReceive+0x204>
 800550c:	8b7b      	ldrh	r3, [r7, #26]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d16f      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005538:	e05b      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d11c      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x274>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d017      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x274>
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d114      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d119      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x2b6>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d014      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c0:	2301      	movs	r3, #1
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c4:	f7fe fa30 	bl	8003a28 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d803      	bhi.n	80055dc <HAL_SPI_TransmitReceive+0x2ce>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x2d4>
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80055f0:	e033      	b.n	800565a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d19e      	bne.n	800553a <HAL_SPI_TransmitReceive+0x22c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d199      	bne.n	800553a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f90a 	bl	8005824 <SPI_EndRxTxTransaction>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005622:	e01a      	b.n	800565a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005650:	e003      	b.n	800565a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005662:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005666:	4618      	mov	r0, r3
 8005668:	3730      	adds	r7, #48	; 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005680:	f7fe f9d2 	bl	8003a28 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4413      	add	r3, r2
 800568e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005690:	f7fe f9ca 	bl	8003a28 <HAL_GetTick>
 8005694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	015b      	lsls	r3, r3, #5
 800569c:	0d1b      	lsrs	r3, r3, #20
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	fb02 f303 	mul.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a6:	e054      	b.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d050      	beq.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b0:	f7fe f9ba 	bl	8003a28 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d902      	bls.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d13d      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056de:	d111      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e8:	d004      	beq.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d107      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	d10f      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800572c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e017      	b.n	8005772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3b01      	subs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d19b      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000064 	.word	0x20000064

08005780 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005794:	d111      	bne.n	80057ba <SPI_EndRxTransaction+0x3a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579e:	d004      	beq.n	80057aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d107      	bne.n	80057ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c2:	d117      	bne.n	80057f4 <SPI_EndRxTransaction+0x74>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d112      	bne.n	80057f4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2101      	movs	r1, #1
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff ff49 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01a      	beq.n	800581a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e013      	b.n	800581c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff ff36 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e000      	b.n	800581c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff ff18 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e000      	b.n	8005858 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e041      	b.n	80058f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd fa46 	bl	8002d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f000 fd70 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e03f      	b.n	8005998 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0x62>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d00e      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0x62>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <HAL_TIM_Base_Start_IT+0xa8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0x62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIM_Base_Start_IT+0xac>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0x62>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <HAL_TIM_Base_Start_IT+0xb0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d111      	bne.n	8005986 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b06      	cmp	r3, #6
 8005972:	d010      	beq.n	8005996 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	e007      	b.n	8005996 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00

080059b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e041      	b.n	8005a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f839 	bl	8005a52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f000 fcc6 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <HAL_TIM_PWM_Start+0x24>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e022      	b.n	8005ace <HAL_TIM_PWM_Start+0x6a>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d109      	bne.n	8005aa2 <HAL_TIM_PWM_Start+0x3e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e015      	b.n	8005ace <HAL_TIM_PWM_Start+0x6a>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d109      	bne.n	8005abc <HAL_TIM_PWM_Start+0x58>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e008      	b.n	8005ace <HAL_TIM_PWM_Start+0x6a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	bf14      	ite	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	2300      	moveq	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e063      	b.n	8005b9e <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0x82>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae4:	e013      	b.n	8005b0e <HAL_TIM_PWM_Start+0xaa>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0x92>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af4:	e00b      	b.n	8005b0e <HAL_TIM_PWM_Start+0xaa>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start+0xa2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b04:	e003      	b.n	8005b0e <HAL_TIM_PWM_Start+0xaa>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2201      	movs	r2, #1
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 febe 	bl	8006898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <HAL_TIM_PWM_Start+0x144>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d107      	bne.n	8005b36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_TIM_PWM_Start+0x144>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x104>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x104>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a17      	ldr	r2, [pc, #92]	; (8005bac <HAL_TIM_PWM_Start+0x148>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x104>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <HAL_TIM_PWM_Start+0x14c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x104>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <HAL_TIM_PWM_Start+0x150>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d010      	beq.n	8005b9c <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	e007      	b.n	8005b9c <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00

08005bb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e093      	b.n	8005cf4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fd f82b 	bl	8002c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfc:	f023 0307 	bic.w	r3, r3, #7
 8005c00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 fbb9 	bl	8006384 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c58:	f023 030c 	bic.w	r3, r3, #12
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	4313      	orrs	r3, r2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	031b      	lsls	r3, r3, #12
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d110      	bne.n	8005d4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d32:	7b7b      	ldrb	r3, [r7, #13]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e069      	b.n	8005e10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4c:	e031      	b.n	8005db2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d110      	bne.n	8005d76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d102      	bne.n	8005d60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d5a:	7b3b      	ldrb	r3, [r7, #12]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d001      	beq.n	8005d64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e055      	b.n	8005e10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d74:	e01d      	b.n	8005db2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d108      	bne.n	8005d8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d105      	bne.n	8005d8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d82:	7b7b      	ldrb	r3, [r7, #13]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d88:	7b3b      	ldrb	r3, [r7, #12]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d001      	beq.n	8005d92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e03e      	b.n	8005e10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2202      	movs	r2, #2
 8005dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_TIM_Encoder_Start+0xc4>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d008      	beq.n	8005dd0 <HAL_TIM_Encoder_Start+0xd4>
 8005dbe:	e00f      	b.n	8005de0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fd65 	bl	8006898 <TIM_CCxChannelCmd>
      break;
 8005dce:	e016      	b.n	8005dfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	2104      	movs	r1, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fd5d 	bl	8006898 <TIM_CCxChannelCmd>
      break;
 8005dde:	e00e      	b.n	8005dfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fd55 	bl	8006898 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2201      	movs	r2, #1
 8005df4:	2104      	movs	r1, #4
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fd4e 	bl	8006898 <TIM_CCxChannelCmd>
      break;
 8005dfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0202 	mvn.w	r2, #2
 8005e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa76 	bl	800634c <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa69 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa78 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0204 	mvn.w	r2, #4
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa4c 	bl	800634c <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa3f 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa4e 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0208 	mvn.w	r2, #8
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa22 	bl	800634c <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa15 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa24 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d122      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0210 	mvn.w	r2, #16
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2208      	movs	r2, #8
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9f8 	bl	800634c <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f9eb 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f9fa 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0201 	mvn.w	r2, #1
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb fe42 	bl	8001c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b80      	cmp	r3, #128	; 0x80
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fcfb 	bl	80069be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9be 	bl	8006370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d107      	bne.n	8006020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0220 	mvn.w	r2, #32
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fcc6 	bl	80069ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006042:	2302      	movs	r3, #2
 8006044:	e0ae      	b.n	80061a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b0c      	cmp	r3, #12
 8006052:	f200 809f 	bhi.w	8006194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006091 	.word	0x08006091
 8006060:	08006195 	.word	0x08006195
 8006064:	08006195 	.word	0x08006195
 8006068:	08006195 	.word	0x08006195
 800606c:	080060d1 	.word	0x080060d1
 8006070:	08006195 	.word	0x08006195
 8006074:	08006195 	.word	0x08006195
 8006078:	08006195 	.word	0x08006195
 800607c:	08006113 	.word	0x08006113
 8006080:	08006195 	.word	0x08006195
 8006084:	08006195 	.word	0x08006195
 8006088:	08006195 	.word	0x08006195
 800608c:	08006153 	.word	0x08006153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f9e0 	bl	800645c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0208 	orr.w	r2, r2, #8
 80060aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0204 	bic.w	r2, r2, #4
 80060ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6999      	ldr	r1, [r3, #24]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	619a      	str	r2, [r3, #24]
      break;
 80060ce:	e064      	b.n	800619a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fa26 	bl	8006528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6999      	ldr	r1, [r3, #24]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	619a      	str	r2, [r3, #24]
      break;
 8006110:	e043      	b.n	800619a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fa6f 	bl	80065fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0208 	orr.w	r2, r2, #8
 800612c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0204 	bic.w	r2, r2, #4
 800613c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69d9      	ldr	r1, [r3, #28]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	61da      	str	r2, [r3, #28]
      break;
 8006150:	e023      	b.n	800619a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fab9 	bl	80066d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69d9      	ldr	r1, [r3, #28]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	021a      	lsls	r2, r3, #8
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	61da      	str	r2, [r3, #28]
      break;
 8006192:	e002      	b.n	800619a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	75fb      	strb	r3, [r7, #23]
      break;
 8006198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIM_ConfigClockSource+0x1c>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e0b4      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x186>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	d03e      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0xd4>
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006206:	f200 8087 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	f000 8086 	beq.w	800631e <HAL_TIM_ConfigClockSource+0x172>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006216:	d87f      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006218:	2b70      	cmp	r3, #112	; 0x70
 800621a:	d01a      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0xa6>
 800621c:	2b70      	cmp	r3, #112	; 0x70
 800621e:	d87b      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006220:	2b60      	cmp	r3, #96	; 0x60
 8006222:	d050      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d877      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006228:	2b50      	cmp	r3, #80	; 0x50
 800622a:	d03c      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0xfa>
 800622c:	2b50      	cmp	r3, #80	; 0x50
 800622e:	d873      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d058      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d86f      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006238:	2b30      	cmp	r3, #48	; 0x30
 800623a:	d064      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15a>
 800623c:	2b30      	cmp	r3, #48	; 0x30
 800623e:	d86b      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b20      	cmp	r3, #32
 8006242:	d060      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15a>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d867      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d05c      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15a>
 800624c:	2b10      	cmp	r3, #16
 800624e:	d05a      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15a>
 8006250:	e062      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006262:	f000 fafa 	bl	800685a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	609a      	str	r2, [r3, #8]
      break;
 800627e:	e04f      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006290:	f000 fae3 	bl	800685a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a2:	609a      	str	r2, [r3, #8]
      break;
 80062a4:	e03c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 fa5a 	bl	800676c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2150      	movs	r1, #80	; 0x50
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fab1 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 80062c4:	e02c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062d2:	461a      	mov	r2, r3
 80062d4:	f000 fa78 	bl	80067c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2160      	movs	r1, #96	; 0x60
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 faa1 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 80062e4:	e01c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	461a      	mov	r2, r3
 80062f4:	f000 fa3a 	bl	800676c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2140      	movs	r1, #64	; 0x40
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fa91 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8006304:	e00c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4619      	mov	r1, r3
 8006310:	4610      	mov	r0, r2
 8006312:	f000 fa88 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8006316:	e003      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	e000      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800631e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr
	...

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a2d      	ldr	r2, [pc, #180]	; (800644c <TIM_Base_SetConfig+0xc8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d00b      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <TIM_Base_SetConfig+0xcc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a29      	ldr	r2, [pc, #164]	; (8006454 <TIM_Base_SetConfig+0xd0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a28      	ldr	r2, [pc, #160]	; (8006458 <TIM_Base_SetConfig+0xd4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d108      	bne.n	80063ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a1e      	ldr	r2, [pc, #120]	; (800644c <TIM_Base_SetConfig+0xc8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_Base_SetConfig+0x72>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063dc:	d00b      	beq.n	80063f6 <TIM_Base_SetConfig+0x72>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <TIM_Base_SetConfig+0xcc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_Base_SetConfig+0x72>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <TIM_Base_SetConfig+0xd0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_Base_SetConfig+0x72>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a19      	ldr	r2, [pc, #100]	; (8006458 <TIM_Base_SetConfig+0xd4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d108      	bne.n	8006408 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a07      	ldr	r2, [pc, #28]	; (800644c <TIM_Base_SetConfig+0xc8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d103      	bne.n	800643c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	615a      	str	r2, [r3, #20]
}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00

0800645c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f023 0201 	bic.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0303 	bic.w	r3, r3, #3
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 0302 	bic.w	r3, r3, #2
 80064a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <TIM_OC1_SetConfig+0xc8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <TIM_OC1_SetConfig+0xc8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d111      	bne.n	80064fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40012c00 	.word	0x40012c00

08006528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f023 0210 	bic.w	r2, r3, #16
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0320 	bic.w	r3, r3, #32
 8006572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1d      	ldr	r2, [pc, #116]	; (80065f8 <TIM_OC2_SetConfig+0xd0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10d      	bne.n	80065a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800658e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a14      	ldr	r2, [pc, #80]	; (80065f8 <TIM_OC2_SetConfig+0xd0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d113      	bne.n	80065d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	40012c00 	.word	0x40012c00

080065fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <TIM_OC3_SetConfig+0xd0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a14      	ldr	r2, [pc, #80]	; (80066cc <TIM_OC3_SetConfig+0xd0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d113      	bne.n	80066a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	621a      	str	r2, [r3, #32]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40012c00 	.word	0x40012c00

080066d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800671a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0f      	ldr	r2, [pc, #60]	; (8006768 <TIM_OC4_SetConfig+0x98>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d109      	bne.n	8006744 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	019b      	lsls	r3, r3, #6
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr
 8006768:	40012c00 	.word	0x40012c00

0800676c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f023 0201 	bic.w	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f023 030a 	bic.w	r3, r3, #10
 80067a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr

080067c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f023 0210 	bic.w	r2, r3, #16
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	031b      	lsls	r3, r3, #12
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006804:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	f043 0307 	orr.w	r3, r3, #7
 8006848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006874:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	021a      	lsls	r2, r3, #8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	431a      	orrs	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	609a      	str	r2, [r3, #8]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2201      	movs	r2, #1
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	401a      	ands	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	fa01 f303 	lsl.w	r3, r1, r3
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e04b      	b.n	8006990 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a19      	ldr	r2, [pc, #100]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d00e      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a12      	ldr	r2, [pc, #72]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d10c      	bne.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	4313      	orrs	r3, r2
 8006974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00

080069ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e042      	b.n	8006a68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fc fa3a 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2224      	movs	r2, #36	; 0x24
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f91d 	bl	8006c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695a      	ldr	r2, [r3, #20]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d16d      	bne.n	8006b6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_UART_Transmit+0x2c>
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e066      	b.n	8006b6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2221      	movs	r2, #33	; 0x21
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aae:	f7fc ffbb 	bl	8003a28 <HAL_GetTick>
 8006ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d108      	bne.n	8006adc <HAL_UART_Transmit+0x6c>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e003      	b.n	8006ae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ae4:	e02a      	b.n	8006b3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2180      	movs	r1, #128	; 0x80
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f840 	bl	8006b76 <UART_WaitOnFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e036      	b.n	8006b6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	3302      	adds	r3, #2
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	e007      	b.n	8006b2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1cf      	bne.n	8006ae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2140      	movs	r1, #64	; 0x40
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f810 	bl	8006b76 <UART_WaitOnFlagUntilTimeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e006      	b.n	8006b6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b090      	sub	sp, #64	; 0x40
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b86:	e050      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d04c      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b96:	f7fc ff47 	bl	8003a28 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d241      	bcs.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	330c      	adds	r3, #12
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bc6:	637a      	str	r2, [r7, #52]	; 0x34
 8006bc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bfa:	623a      	str	r2, [r7, #32]
 8006bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	69f9      	ldr	r1, [r7, #28]
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e5      	bne.n	8006bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e00f      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4013      	ands	r3, r2
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	bf0c      	ite	eq
 8006c3a:	2301      	moveq	r3, #1
 8006c3c:	2300      	movne	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d09f      	beq.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3740      	adds	r7, #64	; 0x40
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c8e:	f023 030c 	bic.w	r3, r3, #12
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	; (8006d68 <UART_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fe f816 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	e002      	b.n	8006cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fd fffe 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8006cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009a      	lsls	r2, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	4a22      	ldr	r2, [pc, #136]	; (8006d6c <UART_SetConfig+0x118>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	0119      	lsls	r1, r3, #4
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009a      	lsls	r2, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d00:	4b1a      	ldr	r3, [pc, #104]	; (8006d6c <UART_SetConfig+0x118>)
 8006d02:	fba3 0302 	umull	r0, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2064      	movs	r0, #100	; 0x64
 8006d0a:	fb00 f303 	mul.w	r3, r0, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	3332      	adds	r3, #50	; 0x32
 8006d14:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <UART_SetConfig+0x118>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d20:	4419      	add	r1, r3
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009a      	lsls	r2, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d38:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <UART_SetConfig+0x118>)
 8006d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	2064      	movs	r0, #100	; 0x64
 8006d42:	fb00 f303 	mul.w	r3, r0, r3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	3332      	adds	r3, #50	; 0x32
 8006d4c:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <UART_SetConfig+0x118>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	f003 020f 	and.w	r2, r3, #15
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40013800 	.word	0x40013800
 8006d6c:	51eb851f 	.word	0x51eb851f

08006d70 <__cvt>:
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d76:	461f      	mov	r7, r3
 8006d78:	bfbb      	ittet	lt
 8006d7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d7e:	461f      	movlt	r7, r3
 8006d80:	2300      	movge	r3, #0
 8006d82:	232d      	movlt	r3, #45	; 0x2d
 8006d84:	b088      	sub	sp, #32
 8006d86:	4614      	mov	r4, r2
 8006d88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d8c:	7013      	strb	r3, [r2, #0]
 8006d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d94:	f023 0820 	bic.w	r8, r3, #32
 8006d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d9c:	d005      	beq.n	8006daa <__cvt+0x3a>
 8006d9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006da2:	d100      	bne.n	8006da6 <__cvt+0x36>
 8006da4:	3501      	adds	r5, #1
 8006da6:	2302      	movs	r3, #2
 8006da8:	e000      	b.n	8006dac <__cvt+0x3c>
 8006daa:	2303      	movs	r3, #3
 8006dac:	aa07      	add	r2, sp, #28
 8006dae:	9204      	str	r2, [sp, #16]
 8006db0:	aa06      	add	r2, sp, #24
 8006db2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006db6:	e9cd 3500 	strd	r3, r5, [sp]
 8006dba:	4622      	mov	r2, r4
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	f000 fe73 	bl	8007aa8 <_dtoa_r>
 8006dc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	d102      	bne.n	8006dd0 <__cvt+0x60>
 8006dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dcc:	07db      	lsls	r3, r3, #31
 8006dce:	d522      	bpl.n	8006e16 <__cvt+0xa6>
 8006dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dd4:	eb06 0905 	add.w	r9, r6, r5
 8006dd8:	d110      	bne.n	8006dfc <__cvt+0x8c>
 8006dda:	7833      	ldrb	r3, [r6, #0]
 8006ddc:	2b30      	cmp	r3, #48	; 0x30
 8006dde:	d10a      	bne.n	8006df6 <__cvt+0x86>
 8006de0:	2200      	movs	r2, #0
 8006de2:	2300      	movs	r3, #0
 8006de4:	4620      	mov	r0, r4
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 fefe 	bl	8000be8 <__aeabi_dcmpeq>
 8006dec:	b918      	cbnz	r0, 8006df6 <__cvt+0x86>
 8006dee:	f1c5 0501 	rsb	r5, r5, #1
 8006df2:	f8ca 5000 	str.w	r5, [sl]
 8006df6:	f8da 3000 	ldr.w	r3, [sl]
 8006dfa:	4499      	add	r9, r3
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4620      	mov	r0, r4
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fef0 	bl	8000be8 <__aeabi_dcmpeq>
 8006e08:	b108      	cbz	r0, 8006e0e <__cvt+0x9e>
 8006e0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e0e:	2230      	movs	r2, #48	; 0x30
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	454b      	cmp	r3, r9
 8006e14:	d307      	bcc.n	8006e26 <__cvt+0xb6>
 8006e16:	4630      	mov	r0, r6
 8006e18:	9b07      	ldr	r3, [sp, #28]
 8006e1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e1c:	1b9b      	subs	r3, r3, r6
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	b008      	add	sp, #32
 8006e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	9107      	str	r1, [sp, #28]
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e7f0      	b.n	8006e10 <__cvt+0xa0>

08006e2e <__exponent>:
 8006e2e:	4603      	mov	r3, r0
 8006e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e32:	2900      	cmp	r1, #0
 8006e34:	f803 2b02 	strb.w	r2, [r3], #2
 8006e38:	bfb6      	itet	lt
 8006e3a:	222d      	movlt	r2, #45	; 0x2d
 8006e3c:	222b      	movge	r2, #43	; 0x2b
 8006e3e:	4249      	neglt	r1, r1
 8006e40:	2909      	cmp	r1, #9
 8006e42:	7042      	strb	r2, [r0, #1]
 8006e44:	dd2a      	ble.n	8006e9c <__exponent+0x6e>
 8006e46:	f10d 0207 	add.w	r2, sp, #7
 8006e4a:	4617      	mov	r7, r2
 8006e4c:	260a      	movs	r6, #10
 8006e4e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e52:	4694      	mov	ip, r2
 8006e54:	fb06 1415 	mls	r4, r6, r5, r1
 8006e58:	3430      	adds	r4, #48	; 0x30
 8006e5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e5e:	460c      	mov	r4, r1
 8006e60:	2c63      	cmp	r4, #99	; 0x63
 8006e62:	4629      	mov	r1, r5
 8006e64:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e68:	dcf1      	bgt.n	8006e4e <__exponent+0x20>
 8006e6a:	3130      	adds	r1, #48	; 0x30
 8006e6c:	f1ac 0402 	sub.w	r4, ip, #2
 8006e70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e74:	4622      	mov	r2, r4
 8006e76:	1c41      	adds	r1, r0, #1
 8006e78:	42ba      	cmp	r2, r7
 8006e7a:	d30a      	bcc.n	8006e92 <__exponent+0x64>
 8006e7c:	f10d 0209 	add.w	r2, sp, #9
 8006e80:	eba2 020c 	sub.w	r2, r2, ip
 8006e84:	42bc      	cmp	r4, r7
 8006e86:	bf88      	it	hi
 8006e88:	2200      	movhi	r2, #0
 8006e8a:	4413      	add	r3, r2
 8006e8c:	1a18      	subs	r0, r3, r0
 8006e8e:	b003      	add	sp, #12
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e96:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e9a:	e7ed      	b.n	8006e78 <__exponent+0x4a>
 8006e9c:	2330      	movs	r3, #48	; 0x30
 8006e9e:	3130      	adds	r1, #48	; 0x30
 8006ea0:	7083      	strb	r3, [r0, #2]
 8006ea2:	70c1      	strb	r1, [r0, #3]
 8006ea4:	1d03      	adds	r3, r0, #4
 8006ea6:	e7f1      	b.n	8006e8c <__exponent+0x5e>

08006ea8 <_printf_float>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	b091      	sub	sp, #68	; 0x44
 8006eae:	460c      	mov	r4, r1
 8006eb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	4605      	mov	r5, r0
 8006eba:	f000 fce5 	bl	8007888 <_localeconv_r>
 8006ebe:	6803      	ldr	r3, [r0, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec4:	f7f9 f9b0 	bl	8000228 <strlen>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	930e      	str	r3, [sp, #56]	; 0x38
 8006ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed0:	900a      	str	r0, [sp, #40]	; 0x28
 8006ed2:	3307      	adds	r3, #7
 8006ed4:	f023 0307 	bic.w	r3, r3, #7
 8006ed8:	f103 0208 	add.w	r2, r3, #8
 8006edc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ee0:	f8d4 b000 	ldr.w	fp, [r4]
 8006ee4:	f8c8 2000 	str.w	r2, [r8]
 8006ee8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006eec:	4652      	mov	r2, sl
 8006eee:	4643      	mov	r3, r8
 8006ef0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ef4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	4650      	mov	r0, sl
 8006f00:	4b9c      	ldr	r3, [pc, #624]	; (8007174 <_printf_float+0x2cc>)
 8006f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f04:	f7f9 fea2 	bl	8000c4c <__aeabi_dcmpun>
 8006f08:	bb70      	cbnz	r0, 8006f68 <_printf_float+0xc0>
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	4650      	mov	r0, sl
 8006f10:	4b98      	ldr	r3, [pc, #608]	; (8007174 <_printf_float+0x2cc>)
 8006f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f14:	f7f9 fe7c 	bl	8000c10 <__aeabi_dcmple>
 8006f18:	bb30      	cbnz	r0, 8006f68 <_printf_float+0xc0>
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4650      	mov	r0, sl
 8006f20:	4641      	mov	r1, r8
 8006f22:	f7f9 fe6b 	bl	8000bfc <__aeabi_dcmplt>
 8006f26:	b110      	cbz	r0, 8006f2e <_printf_float+0x86>
 8006f28:	232d      	movs	r3, #45	; 0x2d
 8006f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f2e:	4a92      	ldr	r2, [pc, #584]	; (8007178 <_printf_float+0x2d0>)
 8006f30:	4b92      	ldr	r3, [pc, #584]	; (800717c <_printf_float+0x2d4>)
 8006f32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f36:	bf94      	ite	ls
 8006f38:	4690      	movls	r8, r2
 8006f3a:	4698      	movhi	r8, r3
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	f04f 0a00 	mov.w	sl, #0
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	f02b 0304 	bic.w	r3, fp, #4
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	4633      	mov	r3, r6
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4628      	mov	r0, r5
 8006f50:	9700      	str	r7, [sp, #0]
 8006f52:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f54:	f000 f9d6 	bl	8007304 <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f040 8090 	bne.w	800707e <_printf_float+0x1d6>
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	b011      	add	sp, #68	; 0x44
 8006f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f68:	4652      	mov	r2, sl
 8006f6a:	4643      	mov	r3, r8
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	4641      	mov	r1, r8
 8006f70:	f7f9 fe6c 	bl	8000c4c <__aeabi_dcmpun>
 8006f74:	b148      	cbz	r0, 8006f8a <_printf_float+0xe2>
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	bfb8      	it	lt
 8006f7c:	232d      	movlt	r3, #45	; 0x2d
 8006f7e:	4a80      	ldr	r2, [pc, #512]	; (8007180 <_printf_float+0x2d8>)
 8006f80:	bfb8      	it	lt
 8006f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f86:	4b7f      	ldr	r3, [pc, #508]	; (8007184 <_printf_float+0x2dc>)
 8006f88:	e7d3      	b.n	8006f32 <_printf_float+0x8a>
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	d142      	bne.n	800701a <_printf_float+0x172>
 8006f94:	2306      	movs	r3, #6
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	9206      	str	r2, [sp, #24]
 8006f9c:	aa0e      	add	r2, sp, #56	; 0x38
 8006f9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006fa2:	aa0d      	add	r2, sp, #52	; 0x34
 8006fa4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006fa8:	9203      	str	r2, [sp, #12]
 8006faa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006fae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	6863      	ldr	r3, [r4, #4]
 8006fb6:	4652      	mov	r2, sl
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	4628      	mov	r0, r5
 8006fbc:	4643      	mov	r3, r8
 8006fbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fc0:	f7ff fed6 	bl	8006d70 <__cvt>
 8006fc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fc6:	4680      	mov	r8, r0
 8006fc8:	2947      	cmp	r1, #71	; 0x47
 8006fca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fcc:	d108      	bne.n	8006fe0 <_printf_float+0x138>
 8006fce:	1cc8      	adds	r0, r1, #3
 8006fd0:	db02      	blt.n	8006fd8 <_printf_float+0x130>
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	dd40      	ble.n	800705a <_printf_float+0x1b2>
 8006fd8:	f1a9 0902 	sub.w	r9, r9, #2
 8006fdc:	fa5f f989 	uxtb.w	r9, r9
 8006fe0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fe4:	d81f      	bhi.n	8007026 <_printf_float+0x17e>
 8006fe6:	464a      	mov	r2, r9
 8006fe8:	3901      	subs	r1, #1
 8006fea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fee:	910d      	str	r1, [sp, #52]	; 0x34
 8006ff0:	f7ff ff1d 	bl	8006e2e <__exponent>
 8006ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ff6:	4682      	mov	sl, r0
 8006ff8:	1813      	adds	r3, r2, r0
 8006ffa:	2a01      	cmp	r2, #1
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	dc02      	bgt.n	8007006 <_printf_float+0x15e>
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	07d2      	lsls	r2, r2, #31
 8007004:	d501      	bpl.n	800700a <_printf_float+0x162>
 8007006:	3301      	adds	r3, #1
 8007008:	6123      	str	r3, [r4, #16]
 800700a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800700e:	2b00      	cmp	r3, #0
 8007010:	d09b      	beq.n	8006f4a <_printf_float+0xa2>
 8007012:	232d      	movs	r3, #45	; 0x2d
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007018:	e797      	b.n	8006f4a <_printf_float+0xa2>
 800701a:	2947      	cmp	r1, #71	; 0x47
 800701c:	d1bc      	bne.n	8006f98 <_printf_float+0xf0>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1ba      	bne.n	8006f98 <_printf_float+0xf0>
 8007022:	2301      	movs	r3, #1
 8007024:	e7b7      	b.n	8006f96 <_printf_float+0xee>
 8007026:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800702a:	d118      	bne.n	800705e <_printf_float+0x1b6>
 800702c:	2900      	cmp	r1, #0
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	dd0b      	ble.n	800704a <_printf_float+0x1a2>
 8007032:	6121      	str	r1, [r4, #16]
 8007034:	b913      	cbnz	r3, 800703c <_printf_float+0x194>
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	07d0      	lsls	r0, r2, #31
 800703a:	d502      	bpl.n	8007042 <_printf_float+0x19a>
 800703c:	3301      	adds	r3, #1
 800703e:	440b      	add	r3, r1
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	f04f 0a00 	mov.w	sl, #0
 8007046:	65a1      	str	r1, [r4, #88]	; 0x58
 8007048:	e7df      	b.n	800700a <_printf_float+0x162>
 800704a:	b913      	cbnz	r3, 8007052 <_printf_float+0x1aa>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	07d2      	lsls	r2, r2, #31
 8007050:	d501      	bpl.n	8007056 <_printf_float+0x1ae>
 8007052:	3302      	adds	r3, #2
 8007054:	e7f4      	b.n	8007040 <_printf_float+0x198>
 8007056:	2301      	movs	r3, #1
 8007058:	e7f2      	b.n	8007040 <_printf_float+0x198>
 800705a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800705e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007060:	4299      	cmp	r1, r3
 8007062:	db05      	blt.n	8007070 <_printf_float+0x1c8>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	6121      	str	r1, [r4, #16]
 8007068:	07d8      	lsls	r0, r3, #31
 800706a:	d5ea      	bpl.n	8007042 <_printf_float+0x19a>
 800706c:	1c4b      	adds	r3, r1, #1
 800706e:	e7e7      	b.n	8007040 <_printf_float+0x198>
 8007070:	2900      	cmp	r1, #0
 8007072:	bfcc      	ite	gt
 8007074:	2201      	movgt	r2, #1
 8007076:	f1c1 0202 	rsble	r2, r1, #2
 800707a:	4413      	add	r3, r2
 800707c:	e7e0      	b.n	8007040 <_printf_float+0x198>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	055a      	lsls	r2, r3, #21
 8007082:	d407      	bmi.n	8007094 <_printf_float+0x1ec>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	4642      	mov	r2, r8
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	d12b      	bne.n	80070ea <_printf_float+0x242>
 8007092:	e764      	b.n	8006f5e <_printf_float+0xb6>
 8007094:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007098:	f240 80dd 	bls.w	8007256 <_printf_float+0x3ae>
 800709c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	f7f9 fda0 	bl	8000be8 <__aeabi_dcmpeq>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d033      	beq.n	8007114 <_printf_float+0x26c>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	4a35      	ldr	r2, [pc, #212]	; (8007188 <_printf_float+0x2e0>)
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f af51 	beq.w	8006f5e <_printf_float+0xb6>
 80070bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070c0:	429a      	cmp	r2, r3
 80070c2:	db02      	blt.n	80070ca <_printf_float+0x222>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07d8      	lsls	r0, r3, #31
 80070c8:	d50f      	bpl.n	80070ea <_printf_float+0x242>
 80070ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f af42 	beq.w	8006f5e <_printf_float+0xb6>
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	f104 091a 	add.w	r9, r4, #26
 80070e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e4:	3b01      	subs	r3, #1
 80070e6:	4543      	cmp	r3, r8
 80070e8:	dc09      	bgt.n	80070fe <_printf_float+0x256>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	079b      	lsls	r3, r3, #30
 80070ee:	f100 8104 	bmi.w	80072fa <_printf_float+0x452>
 80070f2:	68e0      	ldr	r0, [r4, #12]
 80070f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f6:	4298      	cmp	r0, r3
 80070f8:	bfb8      	it	lt
 80070fa:	4618      	movlt	r0, r3
 80070fc:	e731      	b.n	8006f62 <_printf_float+0xba>
 80070fe:	2301      	movs	r3, #1
 8007100:	464a      	mov	r2, r9
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	f43f af28 	beq.w	8006f5e <_printf_float+0xb6>
 800710e:	f108 0801 	add.w	r8, r8, #1
 8007112:	e7e6      	b.n	80070e2 <_printf_float+0x23a>
 8007114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	dc38      	bgt.n	800718c <_printf_float+0x2e4>
 800711a:	2301      	movs	r3, #1
 800711c:	4631      	mov	r1, r6
 800711e:	4628      	mov	r0, r5
 8007120:	4a19      	ldr	r2, [pc, #100]	; (8007188 <_printf_float+0x2e0>)
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f af1a 	beq.w	8006f5e <_printf_float+0xb6>
 800712a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800712e:	4313      	orrs	r3, r2
 8007130:	d102      	bne.n	8007138 <_printf_float+0x290>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	07d9      	lsls	r1, r3, #31
 8007136:	d5d8      	bpl.n	80070ea <_printf_float+0x242>
 8007138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	f43f af0b 	beq.w	8006f5e <_printf_float+0xb6>
 8007148:	f04f 0900 	mov.w	r9, #0
 800714c:	f104 0a1a 	add.w	sl, r4, #26
 8007150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007152:	425b      	negs	r3, r3
 8007154:	454b      	cmp	r3, r9
 8007156:	dc01      	bgt.n	800715c <_printf_float+0x2b4>
 8007158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715a:	e794      	b.n	8007086 <_printf_float+0x1de>
 800715c:	2301      	movs	r3, #1
 800715e:	4652      	mov	r2, sl
 8007160:	4631      	mov	r1, r6
 8007162:	4628      	mov	r0, r5
 8007164:	47b8      	blx	r7
 8007166:	3001      	adds	r0, #1
 8007168:	f43f aef9 	beq.w	8006f5e <_printf_float+0xb6>
 800716c:	f109 0901 	add.w	r9, r9, #1
 8007170:	e7ee      	b.n	8007150 <_printf_float+0x2a8>
 8007172:	bf00      	nop
 8007174:	7fefffff 	.word	0x7fefffff
 8007178:	08009ab4 	.word	0x08009ab4
 800717c:	08009ab8 	.word	0x08009ab8
 8007180:	08009abc 	.word	0x08009abc
 8007184:	08009ac0 	.word	0x08009ac0
 8007188:	08009ac4 	.word	0x08009ac4
 800718c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800718e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007190:	429a      	cmp	r2, r3
 8007192:	bfa8      	it	ge
 8007194:	461a      	movge	r2, r3
 8007196:	2a00      	cmp	r2, #0
 8007198:	4691      	mov	r9, r2
 800719a:	dc37      	bgt.n	800720c <_printf_float+0x364>
 800719c:	f04f 0b00 	mov.w	fp, #0
 80071a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a4:	f104 021a 	add.w	r2, r4, #26
 80071a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071ac:	ebaa 0309 	sub.w	r3, sl, r9
 80071b0:	455b      	cmp	r3, fp
 80071b2:	dc33      	bgt.n	800721c <_printf_float+0x374>
 80071b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071b8:	429a      	cmp	r2, r3
 80071ba:	db3b      	blt.n	8007234 <_printf_float+0x38c>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	07da      	lsls	r2, r3, #31
 80071c0:	d438      	bmi.n	8007234 <_printf_float+0x38c>
 80071c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80071c6:	eba2 0903 	sub.w	r9, r2, r3
 80071ca:	eba2 020a 	sub.w	r2, r2, sl
 80071ce:	4591      	cmp	r9, r2
 80071d0:	bfa8      	it	ge
 80071d2:	4691      	movge	r9, r2
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	dc34      	bgt.n	8007244 <_printf_float+0x39c>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e2:	f104 0a1a 	add.w	sl, r4, #26
 80071e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	eba3 0309 	sub.w	r3, r3, r9
 80071f0:	4543      	cmp	r3, r8
 80071f2:	f77f af7a 	ble.w	80070ea <_printf_float+0x242>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	f43f aeac 	beq.w	8006f5e <_printf_float+0xb6>
 8007206:	f108 0801 	add.w	r8, r8, #1
 800720a:	e7ec      	b.n	80071e6 <_printf_float+0x33e>
 800720c:	4613      	mov	r3, r2
 800720e:	4631      	mov	r1, r6
 8007210:	4642      	mov	r2, r8
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d1c0      	bne.n	800719c <_printf_float+0x2f4>
 800721a:	e6a0      	b.n	8006f5e <_printf_float+0xb6>
 800721c:	2301      	movs	r3, #1
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	920b      	str	r2, [sp, #44]	; 0x2c
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f ae99 	beq.w	8006f5e <_printf_float+0xb6>
 800722c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800722e:	f10b 0b01 	add.w	fp, fp, #1
 8007232:	e7b9      	b.n	80071a8 <_printf_float+0x300>
 8007234:	4631      	mov	r1, r6
 8007236:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	d1bf      	bne.n	80071c2 <_printf_float+0x31a>
 8007242:	e68c      	b.n	8006f5e <_printf_float+0xb6>
 8007244:	464b      	mov	r3, r9
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	eb08 020a 	add.w	r2, r8, sl
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	d1c2      	bne.n	80071da <_printf_float+0x332>
 8007254:	e683      	b.n	8006f5e <_printf_float+0xb6>
 8007256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007258:	2a01      	cmp	r2, #1
 800725a:	dc01      	bgt.n	8007260 <_printf_float+0x3b8>
 800725c:	07db      	lsls	r3, r3, #31
 800725e:	d539      	bpl.n	80072d4 <_printf_float+0x42c>
 8007260:	2301      	movs	r3, #1
 8007262:	4642      	mov	r2, r8
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f ae77 	beq.w	8006f5e <_printf_float+0xb6>
 8007270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f ae6f 	beq.w	8006f5e <_printf_float+0xb6>
 8007280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007284:	2200      	movs	r2, #0
 8007286:	2300      	movs	r3, #0
 8007288:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800728c:	f7f9 fcac 	bl	8000be8 <__aeabi_dcmpeq>
 8007290:	b9d8      	cbnz	r0, 80072ca <_printf_float+0x422>
 8007292:	f109 33ff 	add.w	r3, r9, #4294967295
 8007296:	f108 0201 	add.w	r2, r8, #1
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	d10e      	bne.n	80072c2 <_printf_float+0x41a>
 80072a4:	e65b      	b.n	8006f5e <_printf_float+0xb6>
 80072a6:	2301      	movs	r3, #1
 80072a8:	464a      	mov	r2, r9
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f ae54 	beq.w	8006f5e <_printf_float+0xb6>
 80072b6:	f108 0801 	add.w	r8, r8, #1
 80072ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072bc:	3b01      	subs	r3, #1
 80072be:	4543      	cmp	r3, r8
 80072c0:	dcf1      	bgt.n	80072a6 <_printf_float+0x3fe>
 80072c2:	4653      	mov	r3, sl
 80072c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072c8:	e6de      	b.n	8007088 <_printf_float+0x1e0>
 80072ca:	f04f 0800 	mov.w	r8, #0
 80072ce:	f104 091a 	add.w	r9, r4, #26
 80072d2:	e7f2      	b.n	80072ba <_printf_float+0x412>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4642      	mov	r2, r8
 80072d8:	e7df      	b.n	800729a <_printf_float+0x3f2>
 80072da:	2301      	movs	r3, #1
 80072dc:	464a      	mov	r2, r9
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae3a 	beq.w	8006f5e <_printf_float+0xb6>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072f2:	1a5b      	subs	r3, r3, r1
 80072f4:	4543      	cmp	r3, r8
 80072f6:	dcf0      	bgt.n	80072da <_printf_float+0x432>
 80072f8:	e6fb      	b.n	80070f2 <_printf_float+0x24a>
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	f104 0919 	add.w	r9, r4, #25
 8007302:	e7f4      	b.n	80072ee <_printf_float+0x446>

08007304 <_printf_common>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	4616      	mov	r6, r2
 800730a:	4699      	mov	r9, r3
 800730c:	688a      	ldr	r2, [r1, #8]
 800730e:	690b      	ldr	r3, [r1, #16]
 8007310:	4607      	mov	r7, r0
 8007312:	4293      	cmp	r3, r2
 8007314:	bfb8      	it	lt
 8007316:	4613      	movlt	r3, r2
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800731e:	460c      	mov	r4, r1
 8007320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007324:	b10a      	cbz	r2, 800732a <_printf_common+0x26>
 8007326:	3301      	adds	r3, #1
 8007328:	6033      	str	r3, [r6, #0]
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	0699      	lsls	r1, r3, #26
 800732e:	bf42      	ittt	mi
 8007330:	6833      	ldrmi	r3, [r6, #0]
 8007332:	3302      	addmi	r3, #2
 8007334:	6033      	strmi	r3, [r6, #0]
 8007336:	6825      	ldr	r5, [r4, #0]
 8007338:	f015 0506 	ands.w	r5, r5, #6
 800733c:	d106      	bne.n	800734c <_printf_common+0x48>
 800733e:	f104 0a19 	add.w	sl, r4, #25
 8007342:	68e3      	ldr	r3, [r4, #12]
 8007344:	6832      	ldr	r2, [r6, #0]
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	42ab      	cmp	r3, r5
 800734a:	dc2b      	bgt.n	80073a4 <_printf_common+0xa0>
 800734c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007350:	1e13      	subs	r3, r2, #0
 8007352:	6822      	ldr	r2, [r4, #0]
 8007354:	bf18      	it	ne
 8007356:	2301      	movne	r3, #1
 8007358:	0692      	lsls	r2, r2, #26
 800735a:	d430      	bmi.n	80073be <_printf_common+0xba>
 800735c:	4649      	mov	r1, r9
 800735e:	4638      	mov	r0, r7
 8007360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007364:	47c0      	blx	r8
 8007366:	3001      	adds	r0, #1
 8007368:	d023      	beq.n	80073b2 <_printf_common+0xae>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	6922      	ldr	r2, [r4, #16]
 800736e:	f003 0306 	and.w	r3, r3, #6
 8007372:	2b04      	cmp	r3, #4
 8007374:	bf14      	ite	ne
 8007376:	2500      	movne	r5, #0
 8007378:	6833      	ldreq	r3, [r6, #0]
 800737a:	f04f 0600 	mov.w	r6, #0
 800737e:	bf08      	it	eq
 8007380:	68e5      	ldreq	r5, [r4, #12]
 8007382:	f104 041a 	add.w	r4, r4, #26
 8007386:	bf08      	it	eq
 8007388:	1aed      	subeq	r5, r5, r3
 800738a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800738e:	bf08      	it	eq
 8007390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007394:	4293      	cmp	r3, r2
 8007396:	bfc4      	itt	gt
 8007398:	1a9b      	subgt	r3, r3, r2
 800739a:	18ed      	addgt	r5, r5, r3
 800739c:	42b5      	cmp	r5, r6
 800739e:	d11a      	bne.n	80073d6 <_printf_common+0xd2>
 80073a0:	2000      	movs	r0, #0
 80073a2:	e008      	b.n	80073b6 <_printf_common+0xb2>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4652      	mov	r2, sl
 80073a8:	4649      	mov	r1, r9
 80073aa:	4638      	mov	r0, r7
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d103      	bne.n	80073ba <_printf_common+0xb6>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ba:	3501      	adds	r5, #1
 80073bc:	e7c1      	b.n	8007342 <_printf_common+0x3e>
 80073be:	2030      	movs	r0, #48	; 0x30
 80073c0:	18e1      	adds	r1, r4, r3
 80073c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073cc:	4422      	add	r2, r4
 80073ce:	3302      	adds	r3, #2
 80073d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073d4:	e7c2      	b.n	800735c <_printf_common+0x58>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4622      	mov	r2, r4
 80073da:	4649      	mov	r1, r9
 80073dc:	4638      	mov	r0, r7
 80073de:	47c0      	blx	r8
 80073e0:	3001      	adds	r0, #1
 80073e2:	d0e6      	beq.n	80073b2 <_printf_common+0xae>
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7d9      	b.n	800739c <_printf_common+0x98>

080073e8 <_printf_i>:
 80073e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	7e0f      	ldrb	r7, [r1, #24]
 80073ee:	4691      	mov	r9, r2
 80073f0:	2f78      	cmp	r7, #120	; 0x78
 80073f2:	4680      	mov	r8, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	469a      	mov	sl, r3
 80073f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073fe:	d807      	bhi.n	8007410 <_printf_i+0x28>
 8007400:	2f62      	cmp	r7, #98	; 0x62
 8007402:	d80a      	bhi.n	800741a <_printf_i+0x32>
 8007404:	2f00      	cmp	r7, #0
 8007406:	f000 80d5 	beq.w	80075b4 <_printf_i+0x1cc>
 800740a:	2f58      	cmp	r7, #88	; 0x58
 800740c:	f000 80c1 	beq.w	8007592 <_printf_i+0x1aa>
 8007410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007418:	e03a      	b.n	8007490 <_printf_i+0xa8>
 800741a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800741e:	2b15      	cmp	r3, #21
 8007420:	d8f6      	bhi.n	8007410 <_printf_i+0x28>
 8007422:	a101      	add	r1, pc, #4	; (adr r1, 8007428 <_printf_i+0x40>)
 8007424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007428:	08007481 	.word	0x08007481
 800742c:	08007495 	.word	0x08007495
 8007430:	08007411 	.word	0x08007411
 8007434:	08007411 	.word	0x08007411
 8007438:	08007411 	.word	0x08007411
 800743c:	08007411 	.word	0x08007411
 8007440:	08007495 	.word	0x08007495
 8007444:	08007411 	.word	0x08007411
 8007448:	08007411 	.word	0x08007411
 800744c:	08007411 	.word	0x08007411
 8007450:	08007411 	.word	0x08007411
 8007454:	0800759b 	.word	0x0800759b
 8007458:	080074c1 	.word	0x080074c1
 800745c:	08007555 	.word	0x08007555
 8007460:	08007411 	.word	0x08007411
 8007464:	08007411 	.word	0x08007411
 8007468:	080075bd 	.word	0x080075bd
 800746c:	08007411 	.word	0x08007411
 8007470:	080074c1 	.word	0x080074c1
 8007474:	08007411 	.word	0x08007411
 8007478:	08007411 	.word	0x08007411
 800747c:	0800755d 	.word	0x0800755d
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	1d1a      	adds	r2, r3, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	602a      	str	r2, [r5, #0]
 8007488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800748c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007490:	2301      	movs	r3, #1
 8007492:	e0a0      	b.n	80075d6 <_printf_i+0x1ee>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	0607      	lsls	r7, r0, #24
 800749a:	f103 0104 	add.w	r1, r3, #4
 800749e:	6029      	str	r1, [r5, #0]
 80074a0:	d501      	bpl.n	80074a6 <_printf_i+0xbe>
 80074a2:	681e      	ldr	r6, [r3, #0]
 80074a4:	e003      	b.n	80074ae <_printf_i+0xc6>
 80074a6:	0646      	lsls	r6, r0, #25
 80074a8:	d5fb      	bpl.n	80074a2 <_printf_i+0xba>
 80074aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	da03      	bge.n	80074ba <_printf_i+0xd2>
 80074b2:	232d      	movs	r3, #45	; 0x2d
 80074b4:	4276      	negs	r6, r6
 80074b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ba:	230a      	movs	r3, #10
 80074bc:	4859      	ldr	r0, [pc, #356]	; (8007624 <_printf_i+0x23c>)
 80074be:	e012      	b.n	80074e6 <_printf_i+0xfe>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1d19      	adds	r1, r3, #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	0605      	lsls	r5, r0, #24
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0xe8>
 80074cc:	681e      	ldr	r6, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0xee>
 80074d0:	0641      	lsls	r1, r0, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0xe4>
 80074d4:	881e      	ldrh	r6, [r3, #0]
 80074d6:	2f6f      	cmp	r7, #111	; 0x6f
 80074d8:	bf0c      	ite	eq
 80074da:	2308      	moveq	r3, #8
 80074dc:	230a      	movne	r3, #10
 80074de:	4851      	ldr	r0, [pc, #324]	; (8007624 <_printf_i+0x23c>)
 80074e0:	2100      	movs	r1, #0
 80074e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074e6:	6865      	ldr	r5, [r4, #4]
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	bfa8      	it	ge
 80074ec:	6821      	ldrge	r1, [r4, #0]
 80074ee:	60a5      	str	r5, [r4, #8]
 80074f0:	bfa4      	itt	ge
 80074f2:	f021 0104 	bicge.w	r1, r1, #4
 80074f6:	6021      	strge	r1, [r4, #0]
 80074f8:	b90e      	cbnz	r6, 80074fe <_printf_i+0x116>
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	d04b      	beq.n	8007596 <_printf_i+0x1ae>
 80074fe:	4615      	mov	r5, r2
 8007500:	fbb6 f1f3 	udiv	r1, r6, r3
 8007504:	fb03 6711 	mls	r7, r3, r1, r6
 8007508:	5dc7      	ldrb	r7, [r0, r7]
 800750a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800750e:	4637      	mov	r7, r6
 8007510:	42bb      	cmp	r3, r7
 8007512:	460e      	mov	r6, r1
 8007514:	d9f4      	bls.n	8007500 <_printf_i+0x118>
 8007516:	2b08      	cmp	r3, #8
 8007518:	d10b      	bne.n	8007532 <_printf_i+0x14a>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	07de      	lsls	r6, r3, #31
 800751e:	d508      	bpl.n	8007532 <_printf_i+0x14a>
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	6861      	ldr	r1, [r4, #4]
 8007524:	4299      	cmp	r1, r3
 8007526:	bfde      	ittt	le
 8007528:	2330      	movle	r3, #48	; 0x30
 800752a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800752e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007532:	1b52      	subs	r2, r2, r5
 8007534:	6122      	str	r2, [r4, #16]
 8007536:	464b      	mov	r3, r9
 8007538:	4621      	mov	r1, r4
 800753a:	4640      	mov	r0, r8
 800753c:	f8cd a000 	str.w	sl, [sp]
 8007540:	aa03      	add	r2, sp, #12
 8007542:	f7ff fedf 	bl	8007304 <_printf_common>
 8007546:	3001      	adds	r0, #1
 8007548:	d14a      	bne.n	80075e0 <_printf_i+0x1f8>
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
 800754e:	b004      	add	sp, #16
 8007550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f043 0320 	orr.w	r3, r3, #32
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	2778      	movs	r7, #120	; 0x78
 800755e:	4832      	ldr	r0, [pc, #200]	; (8007628 <_printf_i+0x240>)
 8007560:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	6829      	ldr	r1, [r5, #0]
 8007568:	061f      	lsls	r7, r3, #24
 800756a:	f851 6b04 	ldr.w	r6, [r1], #4
 800756e:	d402      	bmi.n	8007576 <_printf_i+0x18e>
 8007570:	065f      	lsls	r7, r3, #25
 8007572:	bf48      	it	mi
 8007574:	b2b6      	uxthmi	r6, r6
 8007576:	07df      	lsls	r7, r3, #31
 8007578:	bf48      	it	mi
 800757a:	f043 0320 	orrmi.w	r3, r3, #32
 800757e:	6029      	str	r1, [r5, #0]
 8007580:	bf48      	it	mi
 8007582:	6023      	strmi	r3, [r4, #0]
 8007584:	b91e      	cbnz	r6, 800758e <_printf_i+0x1a6>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f023 0320 	bic.w	r3, r3, #32
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	2310      	movs	r3, #16
 8007590:	e7a6      	b.n	80074e0 <_printf_i+0xf8>
 8007592:	4824      	ldr	r0, [pc, #144]	; (8007624 <_printf_i+0x23c>)
 8007594:	e7e4      	b.n	8007560 <_printf_i+0x178>
 8007596:	4615      	mov	r5, r2
 8007598:	e7bd      	b.n	8007516 <_printf_i+0x12e>
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	6826      	ldr	r6, [r4, #0]
 800759e:	1d18      	adds	r0, r3, #4
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	6028      	str	r0, [r5, #0]
 80075a4:	0635      	lsls	r5, r6, #24
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	d501      	bpl.n	80075ae <_printf_i+0x1c6>
 80075aa:	6019      	str	r1, [r3, #0]
 80075ac:	e002      	b.n	80075b4 <_printf_i+0x1cc>
 80075ae:	0670      	lsls	r0, r6, #25
 80075b0:	d5fb      	bpl.n	80075aa <_printf_i+0x1c2>
 80075b2:	8019      	strh	r1, [r3, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	4615      	mov	r5, r2
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	e7bc      	b.n	8007536 <_printf_i+0x14e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	2100      	movs	r1, #0
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 f9d4 	bl	8007976 <memchr>
 80075ce:	b108      	cbz	r0, 80075d4 <_printf_i+0x1ec>
 80075d0:	1b40      	subs	r0, r0, r5
 80075d2:	6060      	str	r0, [r4, #4]
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	2300      	movs	r3, #0
 80075da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075de:	e7aa      	b.n	8007536 <_printf_i+0x14e>
 80075e0:	462a      	mov	r2, r5
 80075e2:	4649      	mov	r1, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	47d0      	blx	sl
 80075ea:	3001      	adds	r0, #1
 80075ec:	d0ad      	beq.n	800754a <_printf_i+0x162>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	079b      	lsls	r3, r3, #30
 80075f2:	d413      	bmi.n	800761c <_printf_i+0x234>
 80075f4:	68e0      	ldr	r0, [r4, #12]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	4298      	cmp	r0, r3
 80075fa:	bfb8      	it	lt
 80075fc:	4618      	movlt	r0, r3
 80075fe:	e7a6      	b.n	800754e <_printf_i+0x166>
 8007600:	2301      	movs	r3, #1
 8007602:	4632      	mov	r2, r6
 8007604:	4649      	mov	r1, r9
 8007606:	4640      	mov	r0, r8
 8007608:	47d0      	blx	sl
 800760a:	3001      	adds	r0, #1
 800760c:	d09d      	beq.n	800754a <_printf_i+0x162>
 800760e:	3501      	adds	r5, #1
 8007610:	68e3      	ldr	r3, [r4, #12]
 8007612:	9903      	ldr	r1, [sp, #12]
 8007614:	1a5b      	subs	r3, r3, r1
 8007616:	42ab      	cmp	r3, r5
 8007618:	dcf2      	bgt.n	8007600 <_printf_i+0x218>
 800761a:	e7eb      	b.n	80075f4 <_printf_i+0x20c>
 800761c:	2500      	movs	r5, #0
 800761e:	f104 0619 	add.w	r6, r4, #25
 8007622:	e7f5      	b.n	8007610 <_printf_i+0x228>
 8007624:	08009ac6 	.word	0x08009ac6
 8007628:	08009ad7 	.word	0x08009ad7

0800762c <std>:
 800762c:	2300      	movs	r3, #0
 800762e:	b510      	push	{r4, lr}
 8007630:	4604      	mov	r4, r0
 8007632:	e9c0 3300 	strd	r3, r3, [r0]
 8007636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763a:	6083      	str	r3, [r0, #8]
 800763c:	8181      	strh	r1, [r0, #12]
 800763e:	6643      	str	r3, [r0, #100]	; 0x64
 8007640:	81c2      	strh	r2, [r0, #14]
 8007642:	6183      	str	r3, [r0, #24]
 8007644:	4619      	mov	r1, r3
 8007646:	2208      	movs	r2, #8
 8007648:	305c      	adds	r0, #92	; 0x5c
 800764a:	f000 f914 	bl	8007876 <memset>
 800764e:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <std+0x58>)
 8007650:	6224      	str	r4, [r4, #32]
 8007652:	6263      	str	r3, [r4, #36]	; 0x24
 8007654:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <std+0x5c>)
 8007656:	62a3      	str	r3, [r4, #40]	; 0x28
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <std+0x60>)
 800765a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800765c:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <std+0x64>)
 800765e:	6323      	str	r3, [r4, #48]	; 0x30
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <std+0x68>)
 8007662:	429c      	cmp	r4, r3
 8007664:	d006      	beq.n	8007674 <std+0x48>
 8007666:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800766a:	4294      	cmp	r4, r2
 800766c:	d002      	beq.n	8007674 <std+0x48>
 800766e:	33d0      	adds	r3, #208	; 0xd0
 8007670:	429c      	cmp	r4, r3
 8007672:	d105      	bne.n	8007680 <std+0x54>
 8007674:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f000 b978 	b.w	8007970 <__retarget_lock_init_recursive>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	bf00      	nop
 8007684:	080077f1 	.word	0x080077f1
 8007688:	08007813 	.word	0x08007813
 800768c:	0800784b 	.word	0x0800784b
 8007690:	0800786f 	.word	0x0800786f
 8007694:	200005d0 	.word	0x200005d0

08007698 <stdio_exit_handler>:
 8007698:	4a02      	ldr	r2, [pc, #8]	; (80076a4 <stdio_exit_handler+0xc>)
 800769a:	4903      	ldr	r1, [pc, #12]	; (80076a8 <stdio_exit_handler+0x10>)
 800769c:	4803      	ldr	r0, [pc, #12]	; (80076ac <stdio_exit_handler+0x14>)
 800769e:	f000 b869 	b.w	8007774 <_fwalk_sglue>
 80076a2:	bf00      	nop
 80076a4:	20000098 	.word	0x20000098
 80076a8:	0800930d 	.word	0x0800930d
 80076ac:	200000a4 	.word	0x200000a4

080076b0 <cleanup_stdio>:
 80076b0:	6841      	ldr	r1, [r0, #4]
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <cleanup_stdio+0x34>)
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4299      	cmp	r1, r3
 80076b8:	4604      	mov	r4, r0
 80076ba:	d001      	beq.n	80076c0 <cleanup_stdio+0x10>
 80076bc:	f001 fe26 	bl	800930c <_fflush_r>
 80076c0:	68a1      	ldr	r1, [r4, #8]
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <cleanup_stdio+0x38>)
 80076c4:	4299      	cmp	r1, r3
 80076c6:	d002      	beq.n	80076ce <cleanup_stdio+0x1e>
 80076c8:	4620      	mov	r0, r4
 80076ca:	f001 fe1f 	bl	800930c <_fflush_r>
 80076ce:	68e1      	ldr	r1, [r4, #12]
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <cleanup_stdio+0x3c>)
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d004      	beq.n	80076e0 <cleanup_stdio+0x30>
 80076d6:	4620      	mov	r0, r4
 80076d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076dc:	f001 be16 	b.w	800930c <_fflush_r>
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	200005d0 	.word	0x200005d0
 80076e8:	20000638 	.word	0x20000638
 80076ec:	200006a0 	.word	0x200006a0

080076f0 <global_stdio_init.part.0>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <global_stdio_init.part.0+0x30>)
 80076f4:	4c0b      	ldr	r4, [pc, #44]	; (8007724 <global_stdio_init.part.0+0x34>)
 80076f6:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <global_stdio_init.part.0+0x38>)
 80076f8:	4620      	mov	r0, r4
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	2104      	movs	r1, #4
 80076fe:	2200      	movs	r2, #0
 8007700:	f7ff ff94 	bl	800762c <std>
 8007704:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007708:	2201      	movs	r2, #1
 800770a:	2109      	movs	r1, #9
 800770c:	f7ff ff8e 	bl	800762c <std>
 8007710:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007714:	2202      	movs	r2, #2
 8007716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771a:	2112      	movs	r1, #18
 800771c:	f7ff bf86 	b.w	800762c <std>
 8007720:	20000708 	.word	0x20000708
 8007724:	200005d0 	.word	0x200005d0
 8007728:	08007699 	.word	0x08007699

0800772c <__sfp_lock_acquire>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sfp_lock_acquire+0x8>)
 800772e:	f000 b920 	b.w	8007972 <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	20000711 	.word	0x20000711

08007738 <__sfp_lock_release>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__sfp_lock_release+0x8>)
 800773a:	f000 b91b 	b.w	8007974 <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	20000711 	.word	0x20000711

08007744 <__sinit>:
 8007744:	b510      	push	{r4, lr}
 8007746:	4604      	mov	r4, r0
 8007748:	f7ff fff0 	bl	800772c <__sfp_lock_acquire>
 800774c:	6a23      	ldr	r3, [r4, #32]
 800774e:	b11b      	cbz	r3, 8007758 <__sinit+0x14>
 8007750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007754:	f7ff bff0 	b.w	8007738 <__sfp_lock_release>
 8007758:	4b04      	ldr	r3, [pc, #16]	; (800776c <__sinit+0x28>)
 800775a:	6223      	str	r3, [r4, #32]
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <__sinit+0x2c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f5      	bne.n	8007750 <__sinit+0xc>
 8007764:	f7ff ffc4 	bl	80076f0 <global_stdio_init.part.0>
 8007768:	e7f2      	b.n	8007750 <__sinit+0xc>
 800776a:	bf00      	nop
 800776c:	080076b1 	.word	0x080076b1
 8007770:	20000708 	.word	0x20000708

08007774 <_fwalk_sglue>:
 8007774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007778:	4607      	mov	r7, r0
 800777a:	4688      	mov	r8, r1
 800777c:	4614      	mov	r4, r2
 800777e:	2600      	movs	r6, #0
 8007780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007784:	f1b9 0901 	subs.w	r9, r9, #1
 8007788:	d505      	bpl.n	8007796 <_fwalk_sglue+0x22>
 800778a:	6824      	ldr	r4, [r4, #0]
 800778c:	2c00      	cmp	r4, #0
 800778e:	d1f7      	bne.n	8007780 <_fwalk_sglue+0xc>
 8007790:	4630      	mov	r0, r6
 8007792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d907      	bls.n	80077ac <_fwalk_sglue+0x38>
 800779c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a0:	3301      	adds	r3, #1
 80077a2:	d003      	beq.n	80077ac <_fwalk_sglue+0x38>
 80077a4:	4629      	mov	r1, r5
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c0      	blx	r8
 80077aa:	4306      	orrs	r6, r0
 80077ac:	3568      	adds	r5, #104	; 0x68
 80077ae:	e7e9      	b.n	8007784 <_fwalk_sglue+0x10>

080077b0 <siprintf>:
 80077b0:	b40e      	push	{r1, r2, r3}
 80077b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077b6:	b500      	push	{lr}
 80077b8:	b09c      	sub	sp, #112	; 0x70
 80077ba:	ab1d      	add	r3, sp, #116	; 0x74
 80077bc:	9002      	str	r0, [sp, #8]
 80077be:	9006      	str	r0, [sp, #24]
 80077c0:	9107      	str	r1, [sp, #28]
 80077c2:	9104      	str	r1, [sp, #16]
 80077c4:	4808      	ldr	r0, [pc, #32]	; (80077e8 <siprintf+0x38>)
 80077c6:	4909      	ldr	r1, [pc, #36]	; (80077ec <siprintf+0x3c>)
 80077c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077cc:	9105      	str	r1, [sp, #20]
 80077ce:	6800      	ldr	r0, [r0, #0]
 80077d0:	a902      	add	r1, sp, #8
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	f001 fc1a 	bl	800900c <_svfiprintf_r>
 80077d8:	2200      	movs	r2, #0
 80077da:	9b02      	ldr	r3, [sp, #8]
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	b01c      	add	sp, #112	; 0x70
 80077e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e4:	b003      	add	sp, #12
 80077e6:	4770      	bx	lr
 80077e8:	200000f0 	.word	0x200000f0
 80077ec:	ffff0208 	.word	0xffff0208

080077f0 <__sread>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	460c      	mov	r4, r1
 80077f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f8:	f000 f86c 	bl	80078d4 <_read_r>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	bfab      	itete	ge
 8007800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007802:	89a3      	ldrhlt	r3, [r4, #12]
 8007804:	181b      	addge	r3, r3, r0
 8007806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800780a:	bfac      	ite	ge
 800780c:	6563      	strge	r3, [r4, #84]	; 0x54
 800780e:	81a3      	strhlt	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__swrite>:
 8007812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007816:	461f      	mov	r7, r3
 8007818:	898b      	ldrh	r3, [r1, #12]
 800781a:	4605      	mov	r5, r0
 800781c:	05db      	lsls	r3, r3, #23
 800781e:	460c      	mov	r4, r1
 8007820:	4616      	mov	r6, r2
 8007822:	d505      	bpl.n	8007830 <__swrite+0x1e>
 8007824:	2302      	movs	r3, #2
 8007826:	2200      	movs	r2, #0
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	f000 f840 	bl	80078b0 <_lseek_r>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	4632      	mov	r2, r6
 8007834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	4628      	mov	r0, r5
 800783c:	463b      	mov	r3, r7
 800783e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	f000 b857 	b.w	80078f8 <_write_r>

0800784a <__sseek>:
 800784a:	b510      	push	{r4, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007852:	f000 f82d 	bl	80078b0 <_lseek_r>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	bf15      	itete	ne
 800785c:	6560      	strne	r0, [r4, #84]	; 0x54
 800785e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007866:	81a3      	strheq	r3, [r4, #12]
 8007868:	bf18      	it	ne
 800786a:	81a3      	strhne	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__sclose>:
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 b80d 	b.w	8007890 <_close_r>

08007876 <memset>:
 8007876:	4603      	mov	r3, r0
 8007878:	4402      	add	r2, r0
 800787a:	4293      	cmp	r3, r2
 800787c:	d100      	bne.n	8007880 <memset+0xa>
 800787e:	4770      	bx	lr
 8007880:	f803 1b01 	strb.w	r1, [r3], #1
 8007884:	e7f9      	b.n	800787a <memset+0x4>
	...

08007888 <_localeconv_r>:
 8007888:	4800      	ldr	r0, [pc, #0]	; (800788c <_localeconv_r+0x4>)
 800788a:	4770      	bx	lr
 800788c:	200001e4 	.word	0x200001e4

08007890 <_close_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	2300      	movs	r3, #0
 8007894:	4d05      	ldr	r5, [pc, #20]	; (80078ac <_close_r+0x1c>)
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	602b      	str	r3, [r5, #0]
 800789c:	f7fa ffea 	bl	8002874 <_close>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_close_r+0x1a>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_close_r+0x1a>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	2000070c 	.word	0x2000070c

080078b0 <_lseek_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	2200      	movs	r2, #0
 80078ba:	4d05      	ldr	r5, [pc, #20]	; (80078d0 <_lseek_r+0x20>)
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7fa fffc 	bl	80028bc <_lseek>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_lseek_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_lseek_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	2000070c 	.word	0x2000070c

080078d4 <_read_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	2200      	movs	r2, #0
 80078de:	4d05      	ldr	r5, [pc, #20]	; (80078f4 <_read_r+0x20>)
 80078e0:	602a      	str	r2, [r5, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f7fa ff8d 	bl	8002802 <_read>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_read_r+0x1e>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_read_r+0x1e>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	2000070c 	.word	0x2000070c

080078f8 <_write_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	2200      	movs	r2, #0
 8007902:	4d05      	ldr	r5, [pc, #20]	; (8007918 <_write_r+0x20>)
 8007904:	602a      	str	r2, [r5, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f7fa ff98 	bl	800283c <_write>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_write_r+0x1e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_write_r+0x1e>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	2000070c 	.word	0x2000070c

0800791c <__errno>:
 800791c:	4b01      	ldr	r3, [pc, #4]	; (8007924 <__errno+0x8>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	200000f0 	.word	0x200000f0

08007928 <__libc_init_array>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	2600      	movs	r6, #0
 800792c:	4d0c      	ldr	r5, [pc, #48]	; (8007960 <__libc_init_array+0x38>)
 800792e:	4c0d      	ldr	r4, [pc, #52]	; (8007964 <__libc_init_array+0x3c>)
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	42a6      	cmp	r6, r4
 8007936:	d109      	bne.n	800794c <__libc_init_array+0x24>
 8007938:	f002 f888 	bl	8009a4c <_init>
 800793c:	2600      	movs	r6, #0
 800793e:	4d0a      	ldr	r5, [pc, #40]	; (8007968 <__libc_init_array+0x40>)
 8007940:	4c0a      	ldr	r4, [pc, #40]	; (800796c <__libc_init_array+0x44>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	42a6      	cmp	r6, r4
 8007948:	d105      	bne.n	8007956 <__libc_init_array+0x2e>
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007950:	4798      	blx	r3
 8007952:	3601      	adds	r6, #1
 8007954:	e7ee      	b.n	8007934 <__libc_init_array+0xc>
 8007956:	f855 3b04 	ldr.w	r3, [r5], #4
 800795a:	4798      	blx	r3
 800795c:	3601      	adds	r6, #1
 800795e:	e7f2      	b.n	8007946 <__libc_init_array+0x1e>
 8007960:	08009e2c 	.word	0x08009e2c
 8007964:	08009e2c 	.word	0x08009e2c
 8007968:	08009e2c 	.word	0x08009e2c
 800796c:	08009e30 	.word	0x08009e30

08007970 <__retarget_lock_init_recursive>:
 8007970:	4770      	bx	lr

08007972 <__retarget_lock_acquire_recursive>:
 8007972:	4770      	bx	lr

08007974 <__retarget_lock_release_recursive>:
 8007974:	4770      	bx	lr

08007976 <memchr>:
 8007976:	4603      	mov	r3, r0
 8007978:	b510      	push	{r4, lr}
 800797a:	b2c9      	uxtb	r1, r1
 800797c:	4402      	add	r2, r0
 800797e:	4293      	cmp	r3, r2
 8007980:	4618      	mov	r0, r3
 8007982:	d101      	bne.n	8007988 <memchr+0x12>
 8007984:	2000      	movs	r0, #0
 8007986:	e003      	b.n	8007990 <memchr+0x1a>
 8007988:	7804      	ldrb	r4, [r0, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	428c      	cmp	r4, r1
 800798e:	d1f6      	bne.n	800797e <memchr+0x8>
 8007990:	bd10      	pop	{r4, pc}

08007992 <quorem>:
 8007992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007996:	6903      	ldr	r3, [r0, #16]
 8007998:	690c      	ldr	r4, [r1, #16]
 800799a:	4607      	mov	r7, r0
 800799c:	42a3      	cmp	r3, r4
 800799e:	db7f      	blt.n	8007aa0 <quorem+0x10e>
 80079a0:	3c01      	subs	r4, #1
 80079a2:	f100 0514 	add.w	r5, r0, #20
 80079a6:	f101 0814 	add.w	r8, r1, #20
 80079aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b8:	3301      	adds	r3, #1
 80079ba:	429a      	cmp	r2, r3
 80079bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80079c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079c8:	d331      	bcc.n	8007a2e <quorem+0x9c>
 80079ca:	f04f 0e00 	mov.w	lr, #0
 80079ce:	4640      	mov	r0, r8
 80079d0:	46ac      	mov	ip, r5
 80079d2:	46f2      	mov	sl, lr
 80079d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80079d8:	b293      	uxth	r3, r2
 80079da:	fb06 e303 	mla	r3, r6, r3, lr
 80079de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079e2:	0c1a      	lsrs	r2, r3, #16
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	fb06 220e 	mla	r2, r6, lr, r2
 80079ea:	ebaa 0303 	sub.w	r3, sl, r3
 80079ee:	f8dc a000 	ldr.w	sl, [ip]
 80079f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079f6:	fa1f fa8a 	uxth.w	sl, sl
 80079fa:	4453      	add	r3, sl
 80079fc:	f8dc a000 	ldr.w	sl, [ip]
 8007a00:	b292      	uxth	r2, r2
 8007a02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a10:	4581      	cmp	r9, r0
 8007a12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a16:	f84c 3b04 	str.w	r3, [ip], #4
 8007a1a:	d2db      	bcs.n	80079d4 <quorem+0x42>
 8007a1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a20:	b92b      	cbnz	r3, 8007a2e <quorem+0x9c>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	429d      	cmp	r5, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	d32d      	bcc.n	8007a88 <quorem+0xf6>
 8007a2c:	613c      	str	r4, [r7, #16]
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f001 f994 	bl	8008d5c <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	db23      	blt.n	8007a80 <quorem+0xee>
 8007a38:	4629      	mov	r1, r5
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	3601      	adds	r6, #1
 8007a3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a42:	f8d1 c000 	ldr.w	ip, [r1]
 8007a46:	b293      	uxth	r3, r2
 8007a48:	1ac3      	subs	r3, r0, r3
 8007a4a:	0c12      	lsrs	r2, r2, #16
 8007a4c:	fa1f f08c 	uxth.w	r0, ip
 8007a50:	4403      	add	r3, r0
 8007a52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a60:	45c1      	cmp	r9, r8
 8007a62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a66:	f841 3b04 	str.w	r3, [r1], #4
 8007a6a:	d2e8      	bcs.n	8007a3e <quorem+0xac>
 8007a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a74:	b922      	cbnz	r2, 8007a80 <quorem+0xee>
 8007a76:	3b04      	subs	r3, #4
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	d30a      	bcc.n	8007a94 <quorem+0x102>
 8007a7e:	613c      	str	r4, [r7, #16]
 8007a80:	4630      	mov	r0, r6
 8007a82:	b003      	add	sp, #12
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	3b04      	subs	r3, #4
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d1cd      	bne.n	8007a2c <quorem+0x9a>
 8007a90:	3c01      	subs	r4, #1
 8007a92:	e7c8      	b.n	8007a26 <quorem+0x94>
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	3b04      	subs	r3, #4
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	d1f0      	bne.n	8007a7e <quorem+0xec>
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	e7eb      	b.n	8007a78 <quorem+0xe6>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e7ee      	b.n	8007a82 <quorem+0xf0>
 8007aa4:	0000      	movs	r0, r0
	...

08007aa8 <_dtoa_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4616      	mov	r6, r2
 8007aae:	461f      	mov	r7, r3
 8007ab0:	69c4      	ldr	r4, [r0, #28]
 8007ab2:	b099      	sub	sp, #100	; 0x64
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007aba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007abe:	b974      	cbnz	r4, 8007ade <_dtoa_r+0x36>
 8007ac0:	2010      	movs	r0, #16
 8007ac2:	f000 fe1d 	bl	8008700 <malloc>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	61e8      	str	r0, [r5, #28]
 8007aca:	b920      	cbnz	r0, 8007ad6 <_dtoa_r+0x2e>
 8007acc:	21ef      	movs	r1, #239	; 0xef
 8007ace:	4bac      	ldr	r3, [pc, #688]	; (8007d80 <_dtoa_r+0x2d8>)
 8007ad0:	48ac      	ldr	r0, [pc, #688]	; (8007d84 <_dtoa_r+0x2dc>)
 8007ad2:	f001 fc7b 	bl	80093cc <__assert_func>
 8007ad6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ada:	6004      	str	r4, [r0, #0]
 8007adc:	60c4      	str	r4, [r0, #12]
 8007ade:	69eb      	ldr	r3, [r5, #28]
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	b151      	cbz	r1, 8007afa <_dtoa_r+0x52>
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4093      	lsls	r3, r2
 8007aea:	604a      	str	r2, [r1, #4]
 8007aec:	608b      	str	r3, [r1, #8]
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 fefa 	bl	80088e8 <_Bfree>
 8007af4:	2200      	movs	r2, #0
 8007af6:	69eb      	ldr	r3, [r5, #28]
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	1e3b      	subs	r3, r7, #0
 8007afc:	bfaf      	iteee	ge
 8007afe:	2300      	movge	r3, #0
 8007b00:	2201      	movlt	r2, #1
 8007b02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b06:	9305      	strlt	r3, [sp, #20]
 8007b08:	bfa8      	it	ge
 8007b0a:	f8c8 3000 	strge.w	r3, [r8]
 8007b0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b12:	4b9d      	ldr	r3, [pc, #628]	; (8007d88 <_dtoa_r+0x2e0>)
 8007b14:	bfb8      	it	lt
 8007b16:	f8c8 2000 	strlt.w	r2, [r8]
 8007b1a:	ea33 0309 	bics.w	r3, r3, r9
 8007b1e:	d119      	bne.n	8007b54 <_dtoa_r+0xac>
 8007b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b2c:	4333      	orrs	r3, r6
 8007b2e:	f000 8589 	beq.w	8008644 <_dtoa_r+0xb9c>
 8007b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b34:	b953      	cbnz	r3, 8007b4c <_dtoa_r+0xa4>
 8007b36:	4b95      	ldr	r3, [pc, #596]	; (8007d8c <_dtoa_r+0x2e4>)
 8007b38:	e023      	b.n	8007b82 <_dtoa_r+0xda>
 8007b3a:	4b95      	ldr	r3, [pc, #596]	; (8007d90 <_dtoa_r+0x2e8>)
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	9803      	ldr	r0, [sp, #12]
 8007b46:	b019      	add	sp, #100	; 0x64
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	4b8f      	ldr	r3, [pc, #572]	; (8007d8c <_dtoa_r+0x2e4>)
 8007b4e:	9303      	str	r3, [sp, #12]
 8007b50:	3303      	adds	r3, #3
 8007b52:	e7f5      	b.n	8007b40 <_dtoa_r+0x98>
 8007b54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	f7f9 f840 	bl	8000be8 <__aeabi_dcmpeq>
 8007b68:	4680      	mov	r8, r0
 8007b6a:	b160      	cbz	r0, 8007b86 <_dtoa_r+0xde>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8562 	beq.w	800863e <_dtoa_r+0xb96>
 8007b7a:	4b86      	ldr	r3, [pc, #536]	; (8007d94 <_dtoa_r+0x2ec>)
 8007b7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	9303      	str	r3, [sp, #12]
 8007b84:	e7de      	b.n	8007b44 <_dtoa_r+0x9c>
 8007b86:	ab16      	add	r3, sp, #88	; 0x58
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	ab17      	add	r3, sp, #92	; 0x5c
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4628      	mov	r0, r5
 8007b90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b94:	f001 f98a 	bl	8008eac <__d2b>
 8007b98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	d07e      	beq.n	8007ca0 <_dtoa_r+0x1f8>
 8007ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bb0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007bb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bb8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4b75      	ldr	r3, [pc, #468]	; (8007d98 <_dtoa_r+0x2f0>)
 8007bc2:	f7f8 fbf1 	bl	80003a8 <__aeabi_dsub>
 8007bc6:	a368      	add	r3, pc, #416	; (adr r3, 8007d68 <_dtoa_r+0x2c0>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fda4 	bl	8000718 <__aeabi_dmul>
 8007bd0:	a367      	add	r3, pc, #412	; (adr r3, 8007d70 <_dtoa_r+0x2c8>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fbe9 	bl	80003ac <__adddf3>
 8007bda:	4606      	mov	r6, r0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	460f      	mov	r7, r1
 8007be0:	f7f8 fd30 	bl	8000644 <__aeabi_i2d>
 8007be4:	a364      	add	r3, pc, #400	; (adr r3, 8007d78 <_dtoa_r+0x2d0>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fd95 	bl	8000718 <__aeabi_dmul>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fbd9 	bl	80003ac <__adddf3>
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	f7f9 f83b 	bl	8000c78 <__aeabi_d2iz>
 8007c02:	2200      	movs	r2, #0
 8007c04:	4683      	mov	fp, r0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 fff6 	bl	8000bfc <__aeabi_dcmplt>
 8007c10:	b148      	cbz	r0, 8007c26 <_dtoa_r+0x17e>
 8007c12:	4658      	mov	r0, fp
 8007c14:	f7f8 fd16 	bl	8000644 <__aeabi_i2d>
 8007c18:	4632      	mov	r2, r6
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	f7f8 ffe4 	bl	8000be8 <__aeabi_dcmpeq>
 8007c20:	b908      	cbnz	r0, 8007c26 <_dtoa_r+0x17e>
 8007c22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c26:	f1bb 0f16 	cmp.w	fp, #22
 8007c2a:	d857      	bhi.n	8007cdc <_dtoa_r+0x234>
 8007c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c30:	4b5a      	ldr	r3, [pc, #360]	; (8007d9c <_dtoa_r+0x2f4>)
 8007c32:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 ffdf 	bl	8000bfc <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d04e      	beq.n	8007ce0 <_dtoa_r+0x238>
 8007c42:	2300      	movs	r3, #0
 8007c44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c48:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c4c:	1b1b      	subs	r3, r3, r4
 8007c4e:	1e5a      	subs	r2, r3, #1
 8007c50:	bf46      	itte	mi
 8007c52:	f1c3 0901 	rsbmi	r9, r3, #1
 8007c56:	2300      	movmi	r3, #0
 8007c58:	f04f 0900 	movpl.w	r9, #0
 8007c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c5e:	bf48      	it	mi
 8007c60:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c62:	f1bb 0f00 	cmp.w	fp, #0
 8007c66:	db3d      	blt.n	8007ce4 <_dtoa_r+0x23c>
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007c6e:	445b      	add	r3, fp
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	2300      	movs	r3, #0
 8007c74:	930a      	str	r3, [sp, #40]	; 0x28
 8007c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c78:	2b09      	cmp	r3, #9
 8007c7a:	d867      	bhi.n	8007d4c <_dtoa_r+0x2a4>
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	bfc4      	itt	gt
 8007c80:	3b04      	subgt	r3, #4
 8007c82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c86:	bfc8      	it	gt
 8007c88:	2400      	movgt	r4, #0
 8007c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007c8e:	bfd8      	it	le
 8007c90:	2401      	movle	r4, #1
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	f200 8086 	bhi.w	8007da4 <_dtoa_r+0x2fc>
 8007c98:	e8df f003 	tbb	[pc, r3]
 8007c9c:	5637392c 	.word	0x5637392c
 8007ca0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007ca4:	441c      	add	r4, r3
 8007ca6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	bfc1      	itttt	gt
 8007cae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cb2:	fa09 f903 	lslgt.w	r9, r9, r3
 8007cb6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007cba:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007cbe:	bfd6      	itet	le
 8007cc0:	f1c3 0320 	rsble	r3, r3, #32
 8007cc4:	ea49 0003 	orrgt.w	r0, r9, r3
 8007cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8007ccc:	f7f8 fcaa 	bl	8000624 <__aeabi_ui2d>
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cd6:	3c01      	subs	r4, #1
 8007cd8:	9213      	str	r2, [sp, #76]	; 0x4c
 8007cda:	e76f      	b.n	8007bbc <_dtoa_r+0x114>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e7b3      	b.n	8007c48 <_dtoa_r+0x1a0>
 8007ce0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ce2:	e7b2      	b.n	8007c4a <_dtoa_r+0x1a2>
 8007ce4:	f1cb 0300 	rsb	r3, fp, #0
 8007ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cea:	2300      	movs	r3, #0
 8007cec:	eba9 090b 	sub.w	r9, r9, fp
 8007cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf2:	e7c0      	b.n	8007c76 <_dtoa_r+0x1ce>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dc55      	bgt.n	8007daa <_dtoa_r+0x302>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	461a      	mov	r2, r3
 8007d02:	9306      	str	r3, [sp, #24]
 8007d04:	9308      	str	r3, [sp, #32]
 8007d06:	9223      	str	r2, [sp, #140]	; 0x8c
 8007d08:	e00b      	b.n	8007d22 <_dtoa_r+0x27a>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7f3      	b.n	8007cf6 <_dtoa_r+0x24e>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d14:	445b      	add	r3, fp
 8007d16:	9306      	str	r3, [sp, #24]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	9308      	str	r3, [sp, #32]
 8007d1e:	bfb8      	it	lt
 8007d20:	2301      	movlt	r3, #1
 8007d22:	2100      	movs	r1, #0
 8007d24:	2204      	movs	r2, #4
 8007d26:	69e8      	ldr	r0, [r5, #28]
 8007d28:	f102 0614 	add.w	r6, r2, #20
 8007d2c:	429e      	cmp	r6, r3
 8007d2e:	d940      	bls.n	8007db2 <_dtoa_r+0x30a>
 8007d30:	6041      	str	r1, [r0, #4]
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 fd98 	bl	8008868 <_Balloc>
 8007d38:	9003      	str	r0, [sp, #12]
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d13c      	bne.n	8007db8 <_dtoa_r+0x310>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	f240 11af 	movw	r1, #431	; 0x1af
 8007d44:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <_dtoa_r+0x2f8>)
 8007d46:	e6c3      	b.n	8007ad0 <_dtoa_r+0x28>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e7e1      	b.n	8007d10 <_dtoa_r+0x268>
 8007d4c:	2401      	movs	r4, #1
 8007d4e:	2300      	movs	r3, #0
 8007d50:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d52:	9322      	str	r3, [sp, #136]	; 0x88
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	2200      	movs	r2, #0
 8007d5a:	9306      	str	r3, [sp, #24]
 8007d5c:	9308      	str	r3, [sp, #32]
 8007d5e:	2312      	movs	r3, #18
 8007d60:	e7d1      	b.n	8007d06 <_dtoa_r+0x25e>
 8007d62:	bf00      	nop
 8007d64:	f3af 8000 	nop.w
 8007d68:	636f4361 	.word	0x636f4361
 8007d6c:	3fd287a7 	.word	0x3fd287a7
 8007d70:	8b60c8b3 	.word	0x8b60c8b3
 8007d74:	3fc68a28 	.word	0x3fc68a28
 8007d78:	509f79fb 	.word	0x509f79fb
 8007d7c:	3fd34413 	.word	0x3fd34413
 8007d80:	08009af5 	.word	0x08009af5
 8007d84:	08009b0c 	.word	0x08009b0c
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	08009af1 	.word	0x08009af1
 8007d90:	08009ae8 	.word	0x08009ae8
 8007d94:	08009ac5 	.word	0x08009ac5
 8007d98:	3ff80000 	.word	0x3ff80000
 8007d9c:	08009bf8 	.word	0x08009bf8
 8007da0:	08009b64 	.word	0x08009b64
 8007da4:	2301      	movs	r3, #1
 8007da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007da8:	e7d4      	b.n	8007d54 <_dtoa_r+0x2ac>
 8007daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dac:	9306      	str	r3, [sp, #24]
 8007dae:	9308      	str	r3, [sp, #32]
 8007db0:	e7b7      	b.n	8007d22 <_dtoa_r+0x27a>
 8007db2:	3101      	adds	r1, #1
 8007db4:	0052      	lsls	r2, r2, #1
 8007db6:	e7b7      	b.n	8007d28 <_dtoa_r+0x280>
 8007db8:	69eb      	ldr	r3, [r5, #28]
 8007dba:	9a03      	ldr	r2, [sp, #12]
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	9b08      	ldr	r3, [sp, #32]
 8007dc0:	2b0e      	cmp	r3, #14
 8007dc2:	f200 80a8 	bhi.w	8007f16 <_dtoa_r+0x46e>
 8007dc6:	2c00      	cmp	r4, #0
 8007dc8:	f000 80a5 	beq.w	8007f16 <_dtoa_r+0x46e>
 8007dcc:	f1bb 0f00 	cmp.w	fp, #0
 8007dd0:	dd34      	ble.n	8007e3c <_dtoa_r+0x394>
 8007dd2:	4b9a      	ldr	r3, [pc, #616]	; (800803c <_dtoa_r+0x594>)
 8007dd4:	f00b 020f 	and.w	r2, fp, #15
 8007dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ddc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007de8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007dec:	d016      	beq.n	8007e1c <_dtoa_r+0x374>
 8007dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007df2:	4b93      	ldr	r3, [pc, #588]	; (8008040 <_dtoa_r+0x598>)
 8007df4:	2703      	movs	r7, #3
 8007df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dfa:	f7f8 fdb7 	bl	800096c <__aeabi_ddiv>
 8007dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e02:	f004 040f 	and.w	r4, r4, #15
 8007e06:	4e8e      	ldr	r6, [pc, #568]	; (8008040 <_dtoa_r+0x598>)
 8007e08:	b954      	cbnz	r4, 8007e20 <_dtoa_r+0x378>
 8007e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e12:	f7f8 fdab 	bl	800096c <__aeabi_ddiv>
 8007e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e1a:	e029      	b.n	8007e70 <_dtoa_r+0x3c8>
 8007e1c:	2702      	movs	r7, #2
 8007e1e:	e7f2      	b.n	8007e06 <_dtoa_r+0x35e>
 8007e20:	07e1      	lsls	r1, r4, #31
 8007e22:	d508      	bpl.n	8007e36 <_dtoa_r+0x38e>
 8007e24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e2c:	f7f8 fc74 	bl	8000718 <__aeabi_dmul>
 8007e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e34:	3701      	adds	r7, #1
 8007e36:	1064      	asrs	r4, r4, #1
 8007e38:	3608      	adds	r6, #8
 8007e3a:	e7e5      	b.n	8007e08 <_dtoa_r+0x360>
 8007e3c:	f000 80a5 	beq.w	8007f8a <_dtoa_r+0x4e2>
 8007e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e44:	f1cb 0400 	rsb	r4, fp, #0
 8007e48:	4b7c      	ldr	r3, [pc, #496]	; (800803c <_dtoa_r+0x594>)
 8007e4a:	f004 020f 	and.w	r2, r4, #15
 8007e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fc5f 	bl	8000718 <__aeabi_dmul>
 8007e5a:	2702      	movs	r7, #2
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e62:	4e77      	ldr	r6, [pc, #476]	; (8008040 <_dtoa_r+0x598>)
 8007e64:	1124      	asrs	r4, r4, #4
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	f040 8084 	bne.w	8007f74 <_dtoa_r+0x4cc>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1d2      	bne.n	8007e16 <_dtoa_r+0x36e>
 8007e70:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8087 	beq.w	8007f8e <_dtoa_r+0x4e6>
 8007e80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e84:	2200      	movs	r2, #0
 8007e86:	4b6f      	ldr	r3, [pc, #444]	; (8008044 <_dtoa_r+0x59c>)
 8007e88:	f7f8 feb8 	bl	8000bfc <__aeabi_dcmplt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d07e      	beq.n	8007f8e <_dtoa_r+0x4e6>
 8007e90:	9b08      	ldr	r3, [sp, #32]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d07b      	beq.n	8007f8e <_dtoa_r+0x4e6>
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd38      	ble.n	8007f0e <_dtoa_r+0x466>
 8007e9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4b69      	ldr	r3, [pc, #420]	; (8008048 <_dtoa_r+0x5a0>)
 8007ea4:	f7f8 fc38 	bl	8000718 <__aeabi_dmul>
 8007ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eac:	9c06      	ldr	r4, [sp, #24]
 8007eae:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007eb2:	3701      	adds	r7, #1
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7f8 fbc5 	bl	8000644 <__aeabi_i2d>
 8007eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ebe:	f7f8 fc2b 	bl	8000718 <__aeabi_dmul>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4b61      	ldr	r3, [pc, #388]	; (800804c <_dtoa_r+0x5a4>)
 8007ec6:	f7f8 fa71 	bl	80003ac <__adddf3>
 8007eca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007ece:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ed2:	9611      	str	r6, [sp, #68]	; 0x44
 8007ed4:	2c00      	cmp	r4, #0
 8007ed6:	d15d      	bne.n	8007f94 <_dtoa_r+0x4ec>
 8007ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007edc:	2200      	movs	r2, #0
 8007ede:	4b5c      	ldr	r3, [pc, #368]	; (8008050 <_dtoa_r+0x5a8>)
 8007ee0:	f7f8 fa62 	bl	80003a8 <__aeabi_dsub>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007eec:	4633      	mov	r3, r6
 8007eee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ef0:	f7f8 fea2 	bl	8000c38 <__aeabi_dcmpgt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f040 8295 	bne.w	8008424 <_dtoa_r+0x97c>
 8007efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007efe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f04:	f7f8 fe7a 	bl	8000bfc <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f040 8289 	bne.w	8008420 <_dtoa_r+0x978>
 8007f0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007f12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f2c0 8151 	blt.w	80081c0 <_dtoa_r+0x718>
 8007f1e:	f1bb 0f0e 	cmp.w	fp, #14
 8007f22:	f300 814d 	bgt.w	80081c0 <_dtoa_r+0x718>
 8007f26:	4b45      	ldr	r3, [pc, #276]	; (800803c <_dtoa_r+0x594>)
 8007f28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f280 80da 	bge.w	80080f0 <_dtoa_r+0x648>
 8007f3c:	9b08      	ldr	r3, [sp, #32]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f300 80d6 	bgt.w	80080f0 <_dtoa_r+0x648>
 8007f44:	f040 826b 	bne.w	800841e <_dtoa_r+0x976>
 8007f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4b40      	ldr	r3, [pc, #256]	; (8008050 <_dtoa_r+0x5a8>)
 8007f50:	f7f8 fbe2 	bl	8000718 <__aeabi_dmul>
 8007f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f58:	f7f8 fe64 	bl	8000c24 <__aeabi_dcmpge>
 8007f5c:	9c08      	ldr	r4, [sp, #32]
 8007f5e:	4626      	mov	r6, r4
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f040 8241 	bne.w	80083e8 <_dtoa_r+0x940>
 8007f66:	2331      	movs	r3, #49	; 0x31
 8007f68:	9f03      	ldr	r7, [sp, #12]
 8007f6a:	f10b 0b01 	add.w	fp, fp, #1
 8007f6e:	f807 3b01 	strb.w	r3, [r7], #1
 8007f72:	e23d      	b.n	80083f0 <_dtoa_r+0x948>
 8007f74:	07e2      	lsls	r2, r4, #31
 8007f76:	d505      	bpl.n	8007f84 <_dtoa_r+0x4dc>
 8007f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f7c:	f7f8 fbcc 	bl	8000718 <__aeabi_dmul>
 8007f80:	2301      	movs	r3, #1
 8007f82:	3701      	adds	r7, #1
 8007f84:	1064      	asrs	r4, r4, #1
 8007f86:	3608      	adds	r6, #8
 8007f88:	e76d      	b.n	8007e66 <_dtoa_r+0x3be>
 8007f8a:	2702      	movs	r7, #2
 8007f8c:	e770      	b.n	8007e70 <_dtoa_r+0x3c8>
 8007f8e:	46d8      	mov	r8, fp
 8007f90:	9c08      	ldr	r4, [sp, #32]
 8007f92:	e78f      	b.n	8007eb4 <_dtoa_r+0x40c>
 8007f94:	9903      	ldr	r1, [sp, #12]
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <_dtoa_r+0x594>)
 8007f98:	4421      	add	r1, r4
 8007f9a:	9112      	str	r1, [sp, #72]	; 0x48
 8007f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fa2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007faa:	2900      	cmp	r1, #0
 8007fac:	d054      	beq.n	8008058 <_dtoa_r+0x5b0>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	4928      	ldr	r1, [pc, #160]	; (8008054 <_dtoa_r+0x5ac>)
 8007fb2:	f7f8 fcdb 	bl	800096c <__aeabi_ddiv>
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	4632      	mov	r2, r6
 8007fba:	f7f8 f9f5 	bl	80003a8 <__aeabi_dsub>
 8007fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fc2:	9f03      	ldr	r7, [sp, #12]
 8007fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc8:	f7f8 fe56 	bl	8000c78 <__aeabi_d2iz>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	f7f8 fb39 	bl	8000644 <__aeabi_i2d>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fda:	f7f8 f9e5 	bl	80003a8 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	3430      	adds	r4, #48	; 0x30
 8007fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fec:	f807 4b01 	strb.w	r4, [r7], #1
 8007ff0:	f7f8 fe04 	bl	8000bfc <__aeabi_dcmplt>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d173      	bne.n	80080e0 <_dtoa_r+0x638>
 8007ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	4911      	ldr	r1, [pc, #68]	; (8008044 <_dtoa_r+0x59c>)
 8008000:	f7f8 f9d2 	bl	80003a8 <__aeabi_dsub>
 8008004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008008:	f7f8 fdf8 	bl	8000bfc <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f040 80b6 	bne.w	800817e <_dtoa_r+0x6d6>
 8008012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008014:	429f      	cmp	r7, r3
 8008016:	f43f af7a 	beq.w	8007f0e <_dtoa_r+0x466>
 800801a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800801e:	2200      	movs	r2, #0
 8008020:	4b09      	ldr	r3, [pc, #36]	; (8008048 <_dtoa_r+0x5a0>)
 8008022:	f7f8 fb79 	bl	8000718 <__aeabi_dmul>
 8008026:	2200      	movs	r2, #0
 8008028:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	4b05      	ldr	r3, [pc, #20]	; (8008048 <_dtoa_r+0x5a0>)
 8008032:	f7f8 fb71 	bl	8000718 <__aeabi_dmul>
 8008036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800803a:	e7c3      	b.n	8007fc4 <_dtoa_r+0x51c>
 800803c:	08009bf8 	.word	0x08009bf8
 8008040:	08009bd0 	.word	0x08009bd0
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40240000 	.word	0x40240000
 800804c:	401c0000 	.word	0x401c0000
 8008050:	40140000 	.word	0x40140000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fb5c 	bl	8000718 <__aeabi_dmul>
 8008060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008062:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008066:	9c03      	ldr	r4, [sp, #12]
 8008068:	9314      	str	r3, [sp, #80]	; 0x50
 800806a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800806e:	f7f8 fe03 	bl	8000c78 <__aeabi_d2iz>
 8008072:	9015      	str	r0, [sp, #84]	; 0x54
 8008074:	f7f8 fae6 	bl	8000644 <__aeabi_i2d>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008080:	f7f8 f992 	bl	80003a8 <__aeabi_dsub>
 8008084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008086:	4606      	mov	r6, r0
 8008088:	3330      	adds	r3, #48	; 0x30
 800808a:	f804 3b01 	strb.w	r3, [r4], #1
 800808e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008090:	460f      	mov	r7, r1
 8008092:	429c      	cmp	r4, r3
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	d124      	bne.n	80080e4 <_dtoa_r+0x63c>
 800809a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800809e:	4baf      	ldr	r3, [pc, #700]	; (800835c <_dtoa_r+0x8b4>)
 80080a0:	f7f8 f984 	bl	80003ac <__adddf3>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f7f8 fdc4 	bl	8000c38 <__aeabi_dcmpgt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d163      	bne.n	800817c <_dtoa_r+0x6d4>
 80080b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080b8:	2000      	movs	r0, #0
 80080ba:	49a8      	ldr	r1, [pc, #672]	; (800835c <_dtoa_r+0x8b4>)
 80080bc:	f7f8 f974 	bl	80003a8 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4630      	mov	r0, r6
 80080c6:	4639      	mov	r1, r7
 80080c8:	f7f8 fd98 	bl	8000bfc <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f af1e 	beq.w	8007f0e <_dtoa_r+0x466>
 80080d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80080d4:	1e7b      	subs	r3, r7, #1
 80080d6:	9314      	str	r3, [sp, #80]	; 0x50
 80080d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80080dc:	2b30      	cmp	r3, #48	; 0x30
 80080de:	d0f8      	beq.n	80080d2 <_dtoa_r+0x62a>
 80080e0:	46c3      	mov	fp, r8
 80080e2:	e03b      	b.n	800815c <_dtoa_r+0x6b4>
 80080e4:	4b9e      	ldr	r3, [pc, #632]	; (8008360 <_dtoa_r+0x8b8>)
 80080e6:	f7f8 fb17 	bl	8000718 <__aeabi_dmul>
 80080ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ee:	e7bc      	b.n	800806a <_dtoa_r+0x5c2>
 80080f0:	9f03      	ldr	r7, [sp, #12]
 80080f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080fa:	4640      	mov	r0, r8
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 fc35 	bl	800096c <__aeabi_ddiv>
 8008102:	f7f8 fdb9 	bl	8000c78 <__aeabi_d2iz>
 8008106:	4604      	mov	r4, r0
 8008108:	f7f8 fa9c 	bl	8000644 <__aeabi_i2d>
 800810c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008110:	f7f8 fb02 	bl	8000718 <__aeabi_dmul>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4640      	mov	r0, r8
 800811a:	4649      	mov	r1, r9
 800811c:	f7f8 f944 	bl	80003a8 <__aeabi_dsub>
 8008120:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008124:	f807 6b01 	strb.w	r6, [r7], #1
 8008128:	9e03      	ldr	r6, [sp, #12]
 800812a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800812e:	1bbe      	subs	r6, r7, r6
 8008130:	45b4      	cmp	ip, r6
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	d136      	bne.n	80081a6 <_dtoa_r+0x6fe>
 8008138:	f7f8 f938 	bl	80003ac <__adddf3>
 800813c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008140:	4680      	mov	r8, r0
 8008142:	4689      	mov	r9, r1
 8008144:	f7f8 fd78 	bl	8000c38 <__aeabi_dcmpgt>
 8008148:	bb58      	cbnz	r0, 80081a2 <_dtoa_r+0x6fa>
 800814a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800814e:	4640      	mov	r0, r8
 8008150:	4649      	mov	r1, r9
 8008152:	f7f8 fd49 	bl	8000be8 <__aeabi_dcmpeq>
 8008156:	b108      	cbz	r0, 800815c <_dtoa_r+0x6b4>
 8008158:	07e3      	lsls	r3, r4, #31
 800815a:	d422      	bmi.n	80081a2 <_dtoa_r+0x6fa>
 800815c:	4651      	mov	r1, sl
 800815e:	4628      	mov	r0, r5
 8008160:	f000 fbc2 	bl	80088e8 <_Bfree>
 8008164:	2300      	movs	r3, #0
 8008166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008168:	703b      	strb	r3, [r7, #0]
 800816a:	f10b 0301 	add.w	r3, fp, #1
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008172:	2b00      	cmp	r3, #0
 8008174:	f43f ace6 	beq.w	8007b44 <_dtoa_r+0x9c>
 8008178:	601f      	str	r7, [r3, #0]
 800817a:	e4e3      	b.n	8007b44 <_dtoa_r+0x9c>
 800817c:	4627      	mov	r7, r4
 800817e:	463b      	mov	r3, r7
 8008180:	461f      	mov	r7, r3
 8008182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008186:	2a39      	cmp	r2, #57	; 0x39
 8008188:	d107      	bne.n	800819a <_dtoa_r+0x6f2>
 800818a:	9a03      	ldr	r2, [sp, #12]
 800818c:	429a      	cmp	r2, r3
 800818e:	d1f7      	bne.n	8008180 <_dtoa_r+0x6d8>
 8008190:	2230      	movs	r2, #48	; 0x30
 8008192:	9903      	ldr	r1, [sp, #12]
 8008194:	f108 0801 	add.w	r8, r8, #1
 8008198:	700a      	strb	r2, [r1, #0]
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	3201      	adds	r2, #1
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e79e      	b.n	80080e0 <_dtoa_r+0x638>
 80081a2:	46d8      	mov	r8, fp
 80081a4:	e7eb      	b.n	800817e <_dtoa_r+0x6d6>
 80081a6:	2200      	movs	r2, #0
 80081a8:	4b6d      	ldr	r3, [pc, #436]	; (8008360 <_dtoa_r+0x8b8>)
 80081aa:	f7f8 fab5 	bl	8000718 <__aeabi_dmul>
 80081ae:	2200      	movs	r2, #0
 80081b0:	2300      	movs	r3, #0
 80081b2:	4680      	mov	r8, r0
 80081b4:	4689      	mov	r9, r1
 80081b6:	f7f8 fd17 	bl	8000be8 <__aeabi_dcmpeq>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d09b      	beq.n	80080f6 <_dtoa_r+0x64e>
 80081be:	e7cd      	b.n	800815c <_dtoa_r+0x6b4>
 80081c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	f000 80c4 	beq.w	8008350 <_dtoa_r+0x8a8>
 80081c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081ca:	2a01      	cmp	r2, #1
 80081cc:	f300 80a8 	bgt.w	8008320 <_dtoa_r+0x878>
 80081d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	f000 80a0 	beq.w	8008318 <_dtoa_r+0x870>
 80081d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081dc:	464f      	mov	r7, r9
 80081de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081e2:	2101      	movs	r1, #1
 80081e4:	441a      	add	r2, r3
 80081e6:	4628      	mov	r0, r5
 80081e8:	4499      	add	r9, r3
 80081ea:	9209      	str	r2, [sp, #36]	; 0x24
 80081ec:	f000 fc32 	bl	8008a54 <__i2b>
 80081f0:	4606      	mov	r6, r0
 80081f2:	b15f      	cbz	r7, 800820c <_dtoa_r+0x764>
 80081f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd08      	ble.n	800820c <_dtoa_r+0x764>
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	bfa8      	it	ge
 80081fe:	463b      	movge	r3, r7
 8008200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008202:	eba9 0903 	sub.w	r9, r9, r3
 8008206:	1aff      	subs	r7, r7, r3
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	9309      	str	r3, [sp, #36]	; 0x24
 800820c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820e:	b1f3      	cbz	r3, 800824e <_dtoa_r+0x7a6>
 8008210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80a0 	beq.w	8008358 <_dtoa_r+0x8b0>
 8008218:	2c00      	cmp	r4, #0
 800821a:	dd10      	ble.n	800823e <_dtoa_r+0x796>
 800821c:	4631      	mov	r1, r6
 800821e:	4622      	mov	r2, r4
 8008220:	4628      	mov	r0, r5
 8008222:	f000 fcd5 	bl	8008bd0 <__pow5mult>
 8008226:	4652      	mov	r2, sl
 8008228:	4601      	mov	r1, r0
 800822a:	4606      	mov	r6, r0
 800822c:	4628      	mov	r0, r5
 800822e:	f000 fc27 	bl	8008a80 <__multiply>
 8008232:	4680      	mov	r8, r0
 8008234:	4651      	mov	r1, sl
 8008236:	4628      	mov	r0, r5
 8008238:	f000 fb56 	bl	80088e8 <_Bfree>
 800823c:	46c2      	mov	sl, r8
 800823e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008240:	1b1a      	subs	r2, r3, r4
 8008242:	d004      	beq.n	800824e <_dtoa_r+0x7a6>
 8008244:	4651      	mov	r1, sl
 8008246:	4628      	mov	r0, r5
 8008248:	f000 fcc2 	bl	8008bd0 <__pow5mult>
 800824c:	4682      	mov	sl, r0
 800824e:	2101      	movs	r1, #1
 8008250:	4628      	mov	r0, r5
 8008252:	f000 fbff 	bl	8008a54 <__i2b>
 8008256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008258:	4604      	mov	r4, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	f340 8082 	ble.w	8008364 <_dtoa_r+0x8bc>
 8008260:	461a      	mov	r2, r3
 8008262:	4601      	mov	r1, r0
 8008264:	4628      	mov	r0, r5
 8008266:	f000 fcb3 	bl	8008bd0 <__pow5mult>
 800826a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800826c:	4604      	mov	r4, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	dd7b      	ble.n	800836a <_dtoa_r+0x8c2>
 8008272:	f04f 0800 	mov.w	r8, #0
 8008276:	6923      	ldr	r3, [r4, #16]
 8008278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800827c:	6918      	ldr	r0, [r3, #16]
 800827e:	f000 fb9b 	bl	80089b8 <__hi0bits>
 8008282:	f1c0 0020 	rsb	r0, r0, #32
 8008286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008288:	4418      	add	r0, r3
 800828a:	f010 001f 	ands.w	r0, r0, #31
 800828e:	f000 8092 	beq.w	80083b6 <_dtoa_r+0x90e>
 8008292:	f1c0 0320 	rsb	r3, r0, #32
 8008296:	2b04      	cmp	r3, #4
 8008298:	f340 8085 	ble.w	80083a6 <_dtoa_r+0x8fe>
 800829c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829e:	f1c0 001c 	rsb	r0, r0, #28
 80082a2:	4403      	add	r3, r0
 80082a4:	4481      	add	r9, r0
 80082a6:	4407      	add	r7, r0
 80082a8:	9309      	str	r3, [sp, #36]	; 0x24
 80082aa:	f1b9 0f00 	cmp.w	r9, #0
 80082ae:	dd05      	ble.n	80082bc <_dtoa_r+0x814>
 80082b0:	4651      	mov	r1, sl
 80082b2:	464a      	mov	r2, r9
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 fce5 	bl	8008c84 <__lshift>
 80082ba:	4682      	mov	sl, r0
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dd05      	ble.n	80082ce <_dtoa_r+0x826>
 80082c2:	4621      	mov	r1, r4
 80082c4:	461a      	mov	r2, r3
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 fcdc 	bl	8008c84 <__lshift>
 80082cc:	4604      	mov	r4, r0
 80082ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d072      	beq.n	80083ba <_dtoa_r+0x912>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4650      	mov	r0, sl
 80082d8:	f000 fd40 	bl	8008d5c <__mcmp>
 80082dc:	2800      	cmp	r0, #0
 80082de:	da6c      	bge.n	80083ba <_dtoa_r+0x912>
 80082e0:	2300      	movs	r3, #0
 80082e2:	4651      	mov	r1, sl
 80082e4:	220a      	movs	r2, #10
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 fb20 	bl	800892c <__multadd>
 80082ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ee:	4682      	mov	sl, r0
 80082f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 81ac 	beq.w	8008652 <_dtoa_r+0xbaa>
 80082fa:	2300      	movs	r3, #0
 80082fc:	4631      	mov	r1, r6
 80082fe:	220a      	movs	r2, #10
 8008300:	4628      	mov	r0, r5
 8008302:	f000 fb13 	bl	800892c <__multadd>
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	4606      	mov	r6, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	f300 8093 	bgt.w	8008436 <_dtoa_r+0x98e>
 8008310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008312:	2b02      	cmp	r3, #2
 8008314:	dc59      	bgt.n	80083ca <_dtoa_r+0x922>
 8008316:	e08e      	b.n	8008436 <_dtoa_r+0x98e>
 8008318:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800831a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800831e:	e75d      	b.n	80081dc <_dtoa_r+0x734>
 8008320:	9b08      	ldr	r3, [sp, #32]
 8008322:	1e5c      	subs	r4, r3, #1
 8008324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008326:	42a3      	cmp	r3, r4
 8008328:	bfbf      	itttt	lt
 800832a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800832c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800832e:	1ae3      	sublt	r3, r4, r3
 8008330:	18d2      	addlt	r2, r2, r3
 8008332:	bfa8      	it	ge
 8008334:	1b1c      	subge	r4, r3, r4
 8008336:	9b08      	ldr	r3, [sp, #32]
 8008338:	bfbe      	ittt	lt
 800833a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800833c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800833e:	2400      	movlt	r4, #0
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfb5      	itete	lt
 8008344:	eba9 0703 	sublt.w	r7, r9, r3
 8008348:	464f      	movge	r7, r9
 800834a:	2300      	movlt	r3, #0
 800834c:	9b08      	ldrge	r3, [sp, #32]
 800834e:	e747      	b.n	80081e0 <_dtoa_r+0x738>
 8008350:	464f      	mov	r7, r9
 8008352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008356:	e74c      	b.n	80081f2 <_dtoa_r+0x74a>
 8008358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835a:	e773      	b.n	8008244 <_dtoa_r+0x79c>
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	40240000 	.word	0x40240000
 8008364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008366:	2b01      	cmp	r3, #1
 8008368:	dc18      	bgt.n	800839c <_dtoa_r+0x8f4>
 800836a:	9b04      	ldr	r3, [sp, #16]
 800836c:	b9b3      	cbnz	r3, 800839c <_dtoa_r+0x8f4>
 800836e:	9b05      	ldr	r3, [sp, #20]
 8008370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008374:	b993      	cbnz	r3, 800839c <_dtoa_r+0x8f4>
 8008376:	9b05      	ldr	r3, [sp, #20]
 8008378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800837c:	0d1b      	lsrs	r3, r3, #20
 800837e:	051b      	lsls	r3, r3, #20
 8008380:	b17b      	cbz	r3, 80083a2 <_dtoa_r+0x8fa>
 8008382:	f04f 0801 	mov.w	r8, #1
 8008386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008388:	f109 0901 	add.w	r9, r9, #1
 800838c:	3301      	adds	r3, #1
 800838e:	9309      	str	r3, [sp, #36]	; 0x24
 8008390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	f47f af6f 	bne.w	8008276 <_dtoa_r+0x7ce>
 8008398:	2001      	movs	r0, #1
 800839a:	e774      	b.n	8008286 <_dtoa_r+0x7de>
 800839c:	f04f 0800 	mov.w	r8, #0
 80083a0:	e7f6      	b.n	8008390 <_dtoa_r+0x8e8>
 80083a2:	4698      	mov	r8, r3
 80083a4:	e7f4      	b.n	8008390 <_dtoa_r+0x8e8>
 80083a6:	d080      	beq.n	80082aa <_dtoa_r+0x802>
 80083a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083aa:	331c      	adds	r3, #28
 80083ac:	441a      	add	r2, r3
 80083ae:	4499      	add	r9, r3
 80083b0:	441f      	add	r7, r3
 80083b2:	9209      	str	r2, [sp, #36]	; 0x24
 80083b4:	e779      	b.n	80082aa <_dtoa_r+0x802>
 80083b6:	4603      	mov	r3, r0
 80083b8:	e7f6      	b.n	80083a8 <_dtoa_r+0x900>
 80083ba:	9b08      	ldr	r3, [sp, #32]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dc34      	bgt.n	800842a <_dtoa_r+0x982>
 80083c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	dd31      	ble.n	800842a <_dtoa_r+0x982>
 80083c6:	9b08      	ldr	r3, [sp, #32]
 80083c8:	9306      	str	r3, [sp, #24]
 80083ca:	9b06      	ldr	r3, [sp, #24]
 80083cc:	b963      	cbnz	r3, 80083e8 <_dtoa_r+0x940>
 80083ce:	4621      	mov	r1, r4
 80083d0:	2205      	movs	r2, #5
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 faaa 	bl	800892c <__multadd>
 80083d8:	4601      	mov	r1, r0
 80083da:	4604      	mov	r4, r0
 80083dc:	4650      	mov	r0, sl
 80083de:	f000 fcbd 	bl	8008d5c <__mcmp>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f73f adbf 	bgt.w	8007f66 <_dtoa_r+0x4be>
 80083e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083ea:	9f03      	ldr	r7, [sp, #12]
 80083ec:	ea6f 0b03 	mvn.w	fp, r3
 80083f0:	f04f 0800 	mov.w	r8, #0
 80083f4:	4621      	mov	r1, r4
 80083f6:	4628      	mov	r0, r5
 80083f8:	f000 fa76 	bl	80088e8 <_Bfree>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	f43f aead 	beq.w	800815c <_dtoa_r+0x6b4>
 8008402:	f1b8 0f00 	cmp.w	r8, #0
 8008406:	d005      	beq.n	8008414 <_dtoa_r+0x96c>
 8008408:	45b0      	cmp	r8, r6
 800840a:	d003      	beq.n	8008414 <_dtoa_r+0x96c>
 800840c:	4641      	mov	r1, r8
 800840e:	4628      	mov	r0, r5
 8008410:	f000 fa6a 	bl	80088e8 <_Bfree>
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	f000 fa66 	bl	80088e8 <_Bfree>
 800841c:	e69e      	b.n	800815c <_dtoa_r+0x6b4>
 800841e:	2400      	movs	r4, #0
 8008420:	4626      	mov	r6, r4
 8008422:	e7e1      	b.n	80083e8 <_dtoa_r+0x940>
 8008424:	46c3      	mov	fp, r8
 8008426:	4626      	mov	r6, r4
 8008428:	e59d      	b.n	8007f66 <_dtoa_r+0x4be>
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 80c8 	beq.w	80085c2 <_dtoa_r+0xb1a>
 8008432:	9b08      	ldr	r3, [sp, #32]
 8008434:	9306      	str	r3, [sp, #24]
 8008436:	2f00      	cmp	r7, #0
 8008438:	dd05      	ble.n	8008446 <_dtoa_r+0x99e>
 800843a:	4631      	mov	r1, r6
 800843c:	463a      	mov	r2, r7
 800843e:	4628      	mov	r0, r5
 8008440:	f000 fc20 	bl	8008c84 <__lshift>
 8008444:	4606      	mov	r6, r0
 8008446:	f1b8 0f00 	cmp.w	r8, #0
 800844a:	d05b      	beq.n	8008504 <_dtoa_r+0xa5c>
 800844c:	4628      	mov	r0, r5
 800844e:	6871      	ldr	r1, [r6, #4]
 8008450:	f000 fa0a 	bl	8008868 <_Balloc>
 8008454:	4607      	mov	r7, r0
 8008456:	b928      	cbnz	r0, 8008464 <_dtoa_r+0x9bc>
 8008458:	4602      	mov	r2, r0
 800845a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800845e:	4b81      	ldr	r3, [pc, #516]	; (8008664 <_dtoa_r+0xbbc>)
 8008460:	f7ff bb36 	b.w	8007ad0 <_dtoa_r+0x28>
 8008464:	6932      	ldr	r2, [r6, #16]
 8008466:	f106 010c 	add.w	r1, r6, #12
 800846a:	3202      	adds	r2, #2
 800846c:	0092      	lsls	r2, r2, #2
 800846e:	300c      	adds	r0, #12
 8008470:	f000 ff9e 	bl	80093b0 <memcpy>
 8008474:	2201      	movs	r2, #1
 8008476:	4639      	mov	r1, r7
 8008478:	4628      	mov	r0, r5
 800847a:	f000 fc03 	bl	8008c84 <__lshift>
 800847e:	46b0      	mov	r8, r6
 8008480:	4606      	mov	r6, r0
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	9a03      	ldr	r2, [sp, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	9308      	str	r3, [sp, #32]
 800848a:	9b06      	ldr	r3, [sp, #24]
 800848c:	4413      	add	r3, r2
 800848e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	930a      	str	r3, [sp, #40]	; 0x28
 8008498:	9b08      	ldr	r3, [sp, #32]
 800849a:	4621      	mov	r1, r4
 800849c:	3b01      	subs	r3, #1
 800849e:	4650      	mov	r0, sl
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	f7ff fa76 	bl	8007992 <quorem>
 80084a6:	4641      	mov	r1, r8
 80084a8:	9006      	str	r0, [sp, #24]
 80084aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084ae:	4650      	mov	r0, sl
 80084b0:	f000 fc54 	bl	8008d5c <__mcmp>
 80084b4:	4632      	mov	r2, r6
 80084b6:	9009      	str	r0, [sp, #36]	; 0x24
 80084b8:	4621      	mov	r1, r4
 80084ba:	4628      	mov	r0, r5
 80084bc:	f000 fc6a 	bl	8008d94 <__mdiff>
 80084c0:	68c2      	ldr	r2, [r0, #12]
 80084c2:	4607      	mov	r7, r0
 80084c4:	bb02      	cbnz	r2, 8008508 <_dtoa_r+0xa60>
 80084c6:	4601      	mov	r1, r0
 80084c8:	4650      	mov	r0, sl
 80084ca:	f000 fc47 	bl	8008d5c <__mcmp>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4639      	mov	r1, r7
 80084d2:	4628      	mov	r0, r5
 80084d4:	920c      	str	r2, [sp, #48]	; 0x30
 80084d6:	f000 fa07 	bl	80088e8 <_Bfree>
 80084da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084de:	9f08      	ldr	r7, [sp, #32]
 80084e0:	ea43 0102 	orr.w	r1, r3, r2
 80084e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e6:	4319      	orrs	r1, r3
 80084e8:	d110      	bne.n	800850c <_dtoa_r+0xa64>
 80084ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084ee:	d029      	beq.n	8008544 <_dtoa_r+0xa9c>
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dd02      	ble.n	80084fc <_dtoa_r+0xa54>
 80084f6:	9b06      	ldr	r3, [sp, #24]
 80084f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084fc:	9b04      	ldr	r3, [sp, #16]
 80084fe:	f883 9000 	strb.w	r9, [r3]
 8008502:	e777      	b.n	80083f4 <_dtoa_r+0x94c>
 8008504:	4630      	mov	r0, r6
 8008506:	e7ba      	b.n	800847e <_dtoa_r+0x9d6>
 8008508:	2201      	movs	r2, #1
 800850a:	e7e1      	b.n	80084d0 <_dtoa_r+0xa28>
 800850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	db04      	blt.n	800851c <_dtoa_r+0xa74>
 8008512:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008514:	430b      	orrs	r3, r1
 8008516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008518:	430b      	orrs	r3, r1
 800851a:	d120      	bne.n	800855e <_dtoa_r+0xab6>
 800851c:	2a00      	cmp	r2, #0
 800851e:	dded      	ble.n	80084fc <_dtoa_r+0xa54>
 8008520:	4651      	mov	r1, sl
 8008522:	2201      	movs	r2, #1
 8008524:	4628      	mov	r0, r5
 8008526:	f000 fbad 	bl	8008c84 <__lshift>
 800852a:	4621      	mov	r1, r4
 800852c:	4682      	mov	sl, r0
 800852e:	f000 fc15 	bl	8008d5c <__mcmp>
 8008532:	2800      	cmp	r0, #0
 8008534:	dc03      	bgt.n	800853e <_dtoa_r+0xa96>
 8008536:	d1e1      	bne.n	80084fc <_dtoa_r+0xa54>
 8008538:	f019 0f01 	tst.w	r9, #1
 800853c:	d0de      	beq.n	80084fc <_dtoa_r+0xa54>
 800853e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008542:	d1d8      	bne.n	80084f6 <_dtoa_r+0xa4e>
 8008544:	2339      	movs	r3, #57	; 0x39
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	7013      	strb	r3, [r2, #0]
 800854a:	463b      	mov	r3, r7
 800854c:	461f      	mov	r7, r3
 800854e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008552:	3b01      	subs	r3, #1
 8008554:	2a39      	cmp	r2, #57	; 0x39
 8008556:	d06b      	beq.n	8008630 <_dtoa_r+0xb88>
 8008558:	3201      	adds	r2, #1
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e74a      	b.n	80083f4 <_dtoa_r+0x94c>
 800855e:	2a00      	cmp	r2, #0
 8008560:	dd07      	ble.n	8008572 <_dtoa_r+0xaca>
 8008562:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008566:	d0ed      	beq.n	8008544 <_dtoa_r+0xa9c>
 8008568:	9a04      	ldr	r2, [sp, #16]
 800856a:	f109 0301 	add.w	r3, r9, #1
 800856e:	7013      	strb	r3, [r2, #0]
 8008570:	e740      	b.n	80083f4 <_dtoa_r+0x94c>
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008576:	f803 9c01 	strb.w	r9, [r3, #-1]
 800857a:	4293      	cmp	r3, r2
 800857c:	d042      	beq.n	8008604 <_dtoa_r+0xb5c>
 800857e:	4651      	mov	r1, sl
 8008580:	2300      	movs	r3, #0
 8008582:	220a      	movs	r2, #10
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f9d1 	bl	800892c <__multadd>
 800858a:	45b0      	cmp	r8, r6
 800858c:	4682      	mov	sl, r0
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	f04f 020a 	mov.w	r2, #10
 8008596:	4641      	mov	r1, r8
 8008598:	4628      	mov	r0, r5
 800859a:	d107      	bne.n	80085ac <_dtoa_r+0xb04>
 800859c:	f000 f9c6 	bl	800892c <__multadd>
 80085a0:	4680      	mov	r8, r0
 80085a2:	4606      	mov	r6, r0
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	3301      	adds	r3, #1
 80085a8:	9308      	str	r3, [sp, #32]
 80085aa:	e775      	b.n	8008498 <_dtoa_r+0x9f0>
 80085ac:	f000 f9be 	bl	800892c <__multadd>
 80085b0:	4631      	mov	r1, r6
 80085b2:	4680      	mov	r8, r0
 80085b4:	2300      	movs	r3, #0
 80085b6:	220a      	movs	r2, #10
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 f9b7 	bl	800892c <__multadd>
 80085be:	4606      	mov	r6, r0
 80085c0:	e7f0      	b.n	80085a4 <_dtoa_r+0xafc>
 80085c2:	9b08      	ldr	r3, [sp, #32]
 80085c4:	9306      	str	r3, [sp, #24]
 80085c6:	9f03      	ldr	r7, [sp, #12]
 80085c8:	4621      	mov	r1, r4
 80085ca:	4650      	mov	r0, sl
 80085cc:	f7ff f9e1 	bl	8007992 <quorem>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085d6:	f807 9b01 	strb.w	r9, [r7], #1
 80085da:	1afa      	subs	r2, r7, r3
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	4293      	cmp	r3, r2
 80085e0:	dd07      	ble.n	80085f2 <_dtoa_r+0xb4a>
 80085e2:	4651      	mov	r1, sl
 80085e4:	2300      	movs	r3, #0
 80085e6:	220a      	movs	r2, #10
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f99f 	bl	800892c <__multadd>
 80085ee:	4682      	mov	sl, r0
 80085f0:	e7ea      	b.n	80085c8 <_dtoa_r+0xb20>
 80085f2:	9b06      	ldr	r3, [sp, #24]
 80085f4:	f04f 0800 	mov.w	r8, #0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfcc      	ite	gt
 80085fc:	461f      	movgt	r7, r3
 80085fe:	2701      	movle	r7, #1
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	441f      	add	r7, r3
 8008604:	4651      	mov	r1, sl
 8008606:	2201      	movs	r2, #1
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fb3b 	bl	8008c84 <__lshift>
 800860e:	4621      	mov	r1, r4
 8008610:	4682      	mov	sl, r0
 8008612:	f000 fba3 	bl	8008d5c <__mcmp>
 8008616:	2800      	cmp	r0, #0
 8008618:	dc97      	bgt.n	800854a <_dtoa_r+0xaa2>
 800861a:	d102      	bne.n	8008622 <_dtoa_r+0xb7a>
 800861c:	f019 0f01 	tst.w	r9, #1
 8008620:	d193      	bne.n	800854a <_dtoa_r+0xaa2>
 8008622:	463b      	mov	r3, r7
 8008624:	461f      	mov	r7, r3
 8008626:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800862a:	2a30      	cmp	r2, #48	; 0x30
 800862c:	d0fa      	beq.n	8008624 <_dtoa_r+0xb7c>
 800862e:	e6e1      	b.n	80083f4 <_dtoa_r+0x94c>
 8008630:	9a03      	ldr	r2, [sp, #12]
 8008632:	429a      	cmp	r2, r3
 8008634:	d18a      	bne.n	800854c <_dtoa_r+0xaa4>
 8008636:	2331      	movs	r3, #49	; 0x31
 8008638:	f10b 0b01 	add.w	fp, fp, #1
 800863c:	e797      	b.n	800856e <_dtoa_r+0xac6>
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <_dtoa_r+0xbc0>)
 8008640:	f7ff ba9f 	b.w	8007b82 <_dtoa_r+0xda>
 8008644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008646:	2b00      	cmp	r3, #0
 8008648:	f47f aa77 	bne.w	8007b3a <_dtoa_r+0x92>
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <_dtoa_r+0xbc4>)
 800864e:	f7ff ba98 	b.w	8007b82 <_dtoa_r+0xda>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dcb6      	bgt.n	80085c6 <_dtoa_r+0xb1e>
 8008658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800865a:	2b02      	cmp	r3, #2
 800865c:	f73f aeb5 	bgt.w	80083ca <_dtoa_r+0x922>
 8008660:	e7b1      	b.n	80085c6 <_dtoa_r+0xb1e>
 8008662:	bf00      	nop
 8008664:	08009b64 	.word	0x08009b64
 8008668:	08009ac4 	.word	0x08009ac4
 800866c:	08009ae8 	.word	0x08009ae8

08008670 <_free_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4605      	mov	r5, r0
 8008674:	2900      	cmp	r1, #0
 8008676:	d040      	beq.n	80086fa <_free_r+0x8a>
 8008678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867c:	1f0c      	subs	r4, r1, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfb8      	it	lt
 8008682:	18e4      	addlt	r4, r4, r3
 8008684:	f000 f8e4 	bl	8008850 <__malloc_lock>
 8008688:	4a1c      	ldr	r2, [pc, #112]	; (80086fc <_free_r+0x8c>)
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	b933      	cbnz	r3, 800869c <_free_r+0x2c>
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	6014      	str	r4, [r2, #0]
 8008692:	4628      	mov	r0, r5
 8008694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008698:	f000 b8e0 	b.w	800885c <__malloc_unlock>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d908      	bls.n	80086b2 <_free_r+0x42>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	1821      	adds	r1, r4, r0
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf01      	itttt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	1809      	addeq	r1, r1, r0
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	e7ed      	b.n	800868e <_free_r+0x1e>
 80086b2:	461a      	mov	r2, r3
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	b10b      	cbz	r3, 80086bc <_free_r+0x4c>
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x42>
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	1850      	adds	r0, r2, r1
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x6c>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	4401      	add	r1, r0
 80086c8:	1850      	adds	r0, r2, r1
 80086ca:	4283      	cmp	r3, r0
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	d1e0      	bne.n	8008692 <_free_r+0x22>
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4408      	add	r0, r1
 80086d6:	6010      	str	r0, [r2, #0]
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	e7da      	b.n	8008692 <_free_r+0x22>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x74>
 80086de:	230c      	movs	r3, #12
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	e7d6      	b.n	8008692 <_free_r+0x22>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	1821      	adds	r1, r4, r0
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf01      	itttt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	1809      	addeq	r1, r1, r0
 80086f2:	6021      	streq	r1, [r4, #0]
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6054      	str	r4, [r2, #4]
 80086f8:	e7cb      	b.n	8008692 <_free_r+0x22>
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000714 	.word	0x20000714

08008700 <malloc>:
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <malloc+0xc>)
 8008702:	4601      	mov	r1, r0
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	f000 b823 	b.w	8008750 <_malloc_r>
 800870a:	bf00      	nop
 800870c:	200000f0 	.word	0x200000f0

08008710 <sbrk_aligned>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4e0e      	ldr	r6, [pc, #56]	; (800874c <sbrk_aligned+0x3c>)
 8008714:	460c      	mov	r4, r1
 8008716:	6831      	ldr	r1, [r6, #0]
 8008718:	4605      	mov	r5, r0
 800871a:	b911      	cbnz	r1, 8008722 <sbrk_aligned+0x12>
 800871c:	f000 fe38 	bl	8009390 <_sbrk_r>
 8008720:	6030      	str	r0, [r6, #0]
 8008722:	4621      	mov	r1, r4
 8008724:	4628      	mov	r0, r5
 8008726:	f000 fe33 	bl	8009390 <_sbrk_r>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	d00a      	beq.n	8008744 <sbrk_aligned+0x34>
 800872e:	1cc4      	adds	r4, r0, #3
 8008730:	f024 0403 	bic.w	r4, r4, #3
 8008734:	42a0      	cmp	r0, r4
 8008736:	d007      	beq.n	8008748 <sbrk_aligned+0x38>
 8008738:	1a21      	subs	r1, r4, r0
 800873a:	4628      	mov	r0, r5
 800873c:	f000 fe28 	bl	8009390 <_sbrk_r>
 8008740:	3001      	adds	r0, #1
 8008742:	d101      	bne.n	8008748 <sbrk_aligned+0x38>
 8008744:	f04f 34ff 	mov.w	r4, #4294967295
 8008748:	4620      	mov	r0, r4
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	20000718 	.word	0x20000718

08008750 <_malloc_r>:
 8008750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008754:	1ccd      	adds	r5, r1, #3
 8008756:	f025 0503 	bic.w	r5, r5, #3
 800875a:	3508      	adds	r5, #8
 800875c:	2d0c      	cmp	r5, #12
 800875e:	bf38      	it	cc
 8008760:	250c      	movcc	r5, #12
 8008762:	2d00      	cmp	r5, #0
 8008764:	4607      	mov	r7, r0
 8008766:	db01      	blt.n	800876c <_malloc_r+0x1c>
 8008768:	42a9      	cmp	r1, r5
 800876a:	d905      	bls.n	8008778 <_malloc_r+0x28>
 800876c:	230c      	movs	r3, #12
 800876e:	2600      	movs	r6, #0
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	4630      	mov	r0, r6
 8008774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800884c <_malloc_r+0xfc>
 800877c:	f000 f868 	bl	8008850 <__malloc_lock>
 8008780:	f8d8 3000 	ldr.w	r3, [r8]
 8008784:	461c      	mov	r4, r3
 8008786:	bb5c      	cbnz	r4, 80087e0 <_malloc_r+0x90>
 8008788:	4629      	mov	r1, r5
 800878a:	4638      	mov	r0, r7
 800878c:	f7ff ffc0 	bl	8008710 <sbrk_aligned>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	4604      	mov	r4, r0
 8008794:	d155      	bne.n	8008842 <_malloc_r+0xf2>
 8008796:	f8d8 4000 	ldr.w	r4, [r8]
 800879a:	4626      	mov	r6, r4
 800879c:	2e00      	cmp	r6, #0
 800879e:	d145      	bne.n	800882c <_malloc_r+0xdc>
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	d048      	beq.n	8008836 <_malloc_r+0xe6>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	4631      	mov	r1, r6
 80087a8:	4638      	mov	r0, r7
 80087aa:	eb04 0903 	add.w	r9, r4, r3
 80087ae:	f000 fdef 	bl	8009390 <_sbrk_r>
 80087b2:	4581      	cmp	r9, r0
 80087b4:	d13f      	bne.n	8008836 <_malloc_r+0xe6>
 80087b6:	6821      	ldr	r1, [r4, #0]
 80087b8:	4638      	mov	r0, r7
 80087ba:	1a6d      	subs	r5, r5, r1
 80087bc:	4629      	mov	r1, r5
 80087be:	f7ff ffa7 	bl	8008710 <sbrk_aligned>
 80087c2:	3001      	adds	r0, #1
 80087c4:	d037      	beq.n	8008836 <_malloc_r+0xe6>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	442b      	add	r3, r5
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	f8d8 3000 	ldr.w	r3, [r8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d038      	beq.n	8008846 <_malloc_r+0xf6>
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	42a2      	cmp	r2, r4
 80087d8:	d12b      	bne.n	8008832 <_malloc_r+0xe2>
 80087da:	2200      	movs	r2, #0
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	e00f      	b.n	8008800 <_malloc_r+0xb0>
 80087e0:	6822      	ldr	r2, [r4, #0]
 80087e2:	1b52      	subs	r2, r2, r5
 80087e4:	d41f      	bmi.n	8008826 <_malloc_r+0xd6>
 80087e6:	2a0b      	cmp	r2, #11
 80087e8:	d917      	bls.n	800881a <_malloc_r+0xca>
 80087ea:	1961      	adds	r1, r4, r5
 80087ec:	42a3      	cmp	r3, r4
 80087ee:	6025      	str	r5, [r4, #0]
 80087f0:	bf18      	it	ne
 80087f2:	6059      	strne	r1, [r3, #4]
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	bf08      	it	eq
 80087f8:	f8c8 1000 	streq.w	r1, [r8]
 80087fc:	5162      	str	r2, [r4, r5]
 80087fe:	604b      	str	r3, [r1, #4]
 8008800:	4638      	mov	r0, r7
 8008802:	f104 060b 	add.w	r6, r4, #11
 8008806:	f000 f829 	bl	800885c <__malloc_unlock>
 800880a:	f026 0607 	bic.w	r6, r6, #7
 800880e:	1d23      	adds	r3, r4, #4
 8008810:	1af2      	subs	r2, r6, r3
 8008812:	d0ae      	beq.n	8008772 <_malloc_r+0x22>
 8008814:	1b9b      	subs	r3, r3, r6
 8008816:	50a3      	str	r3, [r4, r2]
 8008818:	e7ab      	b.n	8008772 <_malloc_r+0x22>
 800881a:	42a3      	cmp	r3, r4
 800881c:	6862      	ldr	r2, [r4, #4]
 800881e:	d1dd      	bne.n	80087dc <_malloc_r+0x8c>
 8008820:	f8c8 2000 	str.w	r2, [r8]
 8008824:	e7ec      	b.n	8008800 <_malloc_r+0xb0>
 8008826:	4623      	mov	r3, r4
 8008828:	6864      	ldr	r4, [r4, #4]
 800882a:	e7ac      	b.n	8008786 <_malloc_r+0x36>
 800882c:	4634      	mov	r4, r6
 800882e:	6876      	ldr	r6, [r6, #4]
 8008830:	e7b4      	b.n	800879c <_malloc_r+0x4c>
 8008832:	4613      	mov	r3, r2
 8008834:	e7cc      	b.n	80087d0 <_malloc_r+0x80>
 8008836:	230c      	movs	r3, #12
 8008838:	4638      	mov	r0, r7
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f000 f80e 	bl	800885c <__malloc_unlock>
 8008840:	e797      	b.n	8008772 <_malloc_r+0x22>
 8008842:	6025      	str	r5, [r4, #0]
 8008844:	e7dc      	b.n	8008800 <_malloc_r+0xb0>
 8008846:	605b      	str	r3, [r3, #4]
 8008848:	deff      	udf	#255	; 0xff
 800884a:	bf00      	nop
 800884c:	20000714 	.word	0x20000714

08008850 <__malloc_lock>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__malloc_lock+0x8>)
 8008852:	f7ff b88e 	b.w	8007972 <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	20000710 	.word	0x20000710

0800885c <__malloc_unlock>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__malloc_unlock+0x8>)
 800885e:	f7ff b889 	b.w	8007974 <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	20000710 	.word	0x20000710

08008868 <_Balloc>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	69c6      	ldr	r6, [r0, #28]
 800886c:	4604      	mov	r4, r0
 800886e:	460d      	mov	r5, r1
 8008870:	b976      	cbnz	r6, 8008890 <_Balloc+0x28>
 8008872:	2010      	movs	r0, #16
 8008874:	f7ff ff44 	bl	8008700 <malloc>
 8008878:	4602      	mov	r2, r0
 800887a:	61e0      	str	r0, [r4, #28]
 800887c:	b920      	cbnz	r0, 8008888 <_Balloc+0x20>
 800887e:	216b      	movs	r1, #107	; 0x6b
 8008880:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <_Balloc+0x78>)
 8008882:	4818      	ldr	r0, [pc, #96]	; (80088e4 <_Balloc+0x7c>)
 8008884:	f000 fda2 	bl	80093cc <__assert_func>
 8008888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800888c:	6006      	str	r6, [r0, #0]
 800888e:	60c6      	str	r6, [r0, #12]
 8008890:	69e6      	ldr	r6, [r4, #28]
 8008892:	68f3      	ldr	r3, [r6, #12]
 8008894:	b183      	cbz	r3, 80088b8 <_Balloc+0x50>
 8008896:	69e3      	ldr	r3, [r4, #28]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800889e:	b9b8      	cbnz	r0, 80088d0 <_Balloc+0x68>
 80088a0:	2101      	movs	r1, #1
 80088a2:	fa01 f605 	lsl.w	r6, r1, r5
 80088a6:	1d72      	adds	r2, r6, #5
 80088a8:	4620      	mov	r0, r4
 80088aa:	0092      	lsls	r2, r2, #2
 80088ac:	f000 fdac 	bl	8009408 <_calloc_r>
 80088b0:	b160      	cbz	r0, 80088cc <_Balloc+0x64>
 80088b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088b6:	e00e      	b.n	80088d6 <_Balloc+0x6e>
 80088b8:	2221      	movs	r2, #33	; 0x21
 80088ba:	2104      	movs	r1, #4
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fda3 	bl	8009408 <_calloc_r>
 80088c2:	69e3      	ldr	r3, [r4, #28]
 80088c4:	60f0      	str	r0, [r6, #12]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e4      	bne.n	8008896 <_Balloc+0x2e>
 80088cc:	2000      	movs	r0, #0
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	6802      	ldr	r2, [r0, #0]
 80088d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088d6:	2300      	movs	r3, #0
 80088d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088dc:	e7f7      	b.n	80088ce <_Balloc+0x66>
 80088de:	bf00      	nop
 80088e0:	08009af5 	.word	0x08009af5
 80088e4:	08009b75 	.word	0x08009b75

080088e8 <_Bfree>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	69c6      	ldr	r6, [r0, #28]
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b976      	cbnz	r6, 8008910 <_Bfree+0x28>
 80088f2:	2010      	movs	r0, #16
 80088f4:	f7ff ff04 	bl	8008700 <malloc>
 80088f8:	4602      	mov	r2, r0
 80088fa:	61e8      	str	r0, [r5, #28]
 80088fc:	b920      	cbnz	r0, 8008908 <_Bfree+0x20>
 80088fe:	218f      	movs	r1, #143	; 0x8f
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <_Bfree+0x3c>)
 8008902:	4809      	ldr	r0, [pc, #36]	; (8008928 <_Bfree+0x40>)
 8008904:	f000 fd62 	bl	80093cc <__assert_func>
 8008908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800890c:	6006      	str	r6, [r0, #0]
 800890e:	60c6      	str	r6, [r0, #12]
 8008910:	b13c      	cbz	r4, 8008922 <_Bfree+0x3a>
 8008912:	69eb      	ldr	r3, [r5, #28]
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800891c:	6021      	str	r1, [r4, #0]
 800891e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	08009af5 	.word	0x08009af5
 8008928:	08009b75 	.word	0x08009b75

0800892c <__multadd>:
 800892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	4607      	mov	r7, r0
 8008932:	460c      	mov	r4, r1
 8008934:	461e      	mov	r6, r3
 8008936:	2000      	movs	r0, #0
 8008938:	690d      	ldr	r5, [r1, #16]
 800893a:	f101 0c14 	add.w	ip, r1, #20
 800893e:	f8dc 3000 	ldr.w	r3, [ip]
 8008942:	3001      	adds	r0, #1
 8008944:	b299      	uxth	r1, r3
 8008946:	fb02 6101 	mla	r1, r2, r1, r6
 800894a:	0c1e      	lsrs	r6, r3, #16
 800894c:	0c0b      	lsrs	r3, r1, #16
 800894e:	fb02 3306 	mla	r3, r2, r6, r3
 8008952:	b289      	uxth	r1, r1
 8008954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008958:	4285      	cmp	r5, r0
 800895a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800895e:	f84c 1b04 	str.w	r1, [ip], #4
 8008962:	dcec      	bgt.n	800893e <__multadd+0x12>
 8008964:	b30e      	cbz	r6, 80089aa <__multadd+0x7e>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	42ab      	cmp	r3, r5
 800896a:	dc19      	bgt.n	80089a0 <__multadd+0x74>
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4638      	mov	r0, r7
 8008970:	3101      	adds	r1, #1
 8008972:	f7ff ff79 	bl	8008868 <_Balloc>
 8008976:	4680      	mov	r8, r0
 8008978:	b928      	cbnz	r0, 8008986 <__multadd+0x5a>
 800897a:	4602      	mov	r2, r0
 800897c:	21ba      	movs	r1, #186	; 0xba
 800897e:	4b0c      	ldr	r3, [pc, #48]	; (80089b0 <__multadd+0x84>)
 8008980:	480c      	ldr	r0, [pc, #48]	; (80089b4 <__multadd+0x88>)
 8008982:	f000 fd23 	bl	80093cc <__assert_func>
 8008986:	6922      	ldr	r2, [r4, #16]
 8008988:	f104 010c 	add.w	r1, r4, #12
 800898c:	3202      	adds	r2, #2
 800898e:	0092      	lsls	r2, r2, #2
 8008990:	300c      	adds	r0, #12
 8008992:	f000 fd0d 	bl	80093b0 <memcpy>
 8008996:	4621      	mov	r1, r4
 8008998:	4638      	mov	r0, r7
 800899a:	f7ff ffa5 	bl	80088e8 <_Bfree>
 800899e:	4644      	mov	r4, r8
 80089a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089a4:	3501      	adds	r5, #1
 80089a6:	615e      	str	r6, [r3, #20]
 80089a8:	6125      	str	r5, [r4, #16]
 80089aa:	4620      	mov	r0, r4
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	08009b64 	.word	0x08009b64
 80089b4:	08009b75 	.word	0x08009b75

080089b8 <__hi0bits>:
 80089b8:	0c02      	lsrs	r2, r0, #16
 80089ba:	0412      	lsls	r2, r2, #16
 80089bc:	4603      	mov	r3, r0
 80089be:	b9ca      	cbnz	r2, 80089f4 <__hi0bits+0x3c>
 80089c0:	0403      	lsls	r3, r0, #16
 80089c2:	2010      	movs	r0, #16
 80089c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80089c8:	bf04      	itt	eq
 80089ca:	021b      	lsleq	r3, r3, #8
 80089cc:	3008      	addeq	r0, #8
 80089ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80089d2:	bf04      	itt	eq
 80089d4:	011b      	lsleq	r3, r3, #4
 80089d6:	3004      	addeq	r0, #4
 80089d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80089dc:	bf04      	itt	eq
 80089de:	009b      	lsleq	r3, r3, #2
 80089e0:	3002      	addeq	r0, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	db05      	blt.n	80089f2 <__hi0bits+0x3a>
 80089e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80089ea:	f100 0001 	add.w	r0, r0, #1
 80089ee:	bf08      	it	eq
 80089f0:	2020      	moveq	r0, #32
 80089f2:	4770      	bx	lr
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7e5      	b.n	80089c4 <__hi0bits+0xc>

080089f8 <__lo0bits>:
 80089f8:	6803      	ldr	r3, [r0, #0]
 80089fa:	4602      	mov	r2, r0
 80089fc:	f013 0007 	ands.w	r0, r3, #7
 8008a00:	d00b      	beq.n	8008a1a <__lo0bits+0x22>
 8008a02:	07d9      	lsls	r1, r3, #31
 8008a04:	d421      	bmi.n	8008a4a <__lo0bits+0x52>
 8008a06:	0798      	lsls	r0, r3, #30
 8008a08:	bf49      	itett	mi
 8008a0a:	085b      	lsrmi	r3, r3, #1
 8008a0c:	089b      	lsrpl	r3, r3, #2
 8008a0e:	2001      	movmi	r0, #1
 8008a10:	6013      	strmi	r3, [r2, #0]
 8008a12:	bf5c      	itt	pl
 8008a14:	2002      	movpl	r0, #2
 8008a16:	6013      	strpl	r3, [r2, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	b299      	uxth	r1, r3
 8008a1c:	b909      	cbnz	r1, 8008a22 <__lo0bits+0x2a>
 8008a1e:	2010      	movs	r0, #16
 8008a20:	0c1b      	lsrs	r3, r3, #16
 8008a22:	b2d9      	uxtb	r1, r3
 8008a24:	b909      	cbnz	r1, 8008a2a <__lo0bits+0x32>
 8008a26:	3008      	adds	r0, #8
 8008a28:	0a1b      	lsrs	r3, r3, #8
 8008a2a:	0719      	lsls	r1, r3, #28
 8008a2c:	bf04      	itt	eq
 8008a2e:	091b      	lsreq	r3, r3, #4
 8008a30:	3004      	addeq	r0, #4
 8008a32:	0799      	lsls	r1, r3, #30
 8008a34:	bf04      	itt	eq
 8008a36:	089b      	lsreq	r3, r3, #2
 8008a38:	3002      	addeq	r0, #2
 8008a3a:	07d9      	lsls	r1, r3, #31
 8008a3c:	d403      	bmi.n	8008a46 <__lo0bits+0x4e>
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	f100 0001 	add.w	r0, r0, #1
 8008a44:	d003      	beq.n	8008a4e <__lo0bits+0x56>
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	4770      	bx	lr
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	4770      	bx	lr
 8008a4e:	2020      	movs	r0, #32
 8008a50:	4770      	bx	lr
	...

08008a54 <__i2b>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	460c      	mov	r4, r1
 8008a58:	2101      	movs	r1, #1
 8008a5a:	f7ff ff05 	bl	8008868 <_Balloc>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <__i2b+0x1a>
 8008a62:	f240 1145 	movw	r1, #325	; 0x145
 8008a66:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <__i2b+0x24>)
 8008a68:	4804      	ldr	r0, [pc, #16]	; (8008a7c <__i2b+0x28>)
 8008a6a:	f000 fcaf 	bl	80093cc <__assert_func>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	6144      	str	r4, [r0, #20]
 8008a72:	6103      	str	r3, [r0, #16]
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	bf00      	nop
 8008a78:	08009b64 	.word	0x08009b64
 8008a7c:	08009b75 	.word	0x08009b75

08008a80 <__multiply>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4691      	mov	r9, r2
 8008a86:	690a      	ldr	r2, [r1, #16]
 8008a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	bfbe      	ittt	lt
 8008a92:	460b      	movlt	r3, r1
 8008a94:	464c      	movlt	r4, r9
 8008a96:	4699      	movlt	r9, r3
 8008a98:	6927      	ldr	r7, [r4, #16]
 8008a9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	eb07 060a 	add.w	r6, r7, sl
 8008aa6:	42b3      	cmp	r3, r6
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	bfb8      	it	lt
 8008aac:	3101      	addlt	r1, #1
 8008aae:	f7ff fedb 	bl	8008868 <_Balloc>
 8008ab2:	b930      	cbnz	r0, 8008ac2 <__multiply+0x42>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008aba:	4b43      	ldr	r3, [pc, #268]	; (8008bc8 <__multiply+0x148>)
 8008abc:	4843      	ldr	r0, [pc, #268]	; (8008bcc <__multiply+0x14c>)
 8008abe:	f000 fc85 	bl	80093cc <__assert_func>
 8008ac2:	f100 0514 	add.w	r5, r0, #20
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	2200      	movs	r2, #0
 8008aca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	d321      	bcc.n	8008b16 <__multiply+0x96>
 8008ad2:	f104 0314 	add.w	r3, r4, #20
 8008ad6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ada:	f109 0314 	add.w	r3, r9, #20
 8008ade:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ae2:	9202      	str	r2, [sp, #8]
 8008ae4:	1b3a      	subs	r2, r7, r4
 8008ae6:	3a15      	subs	r2, #21
 8008ae8:	f022 0203 	bic.w	r2, r2, #3
 8008aec:	3204      	adds	r2, #4
 8008aee:	f104 0115 	add.w	r1, r4, #21
 8008af2:	428f      	cmp	r7, r1
 8008af4:	bf38      	it	cc
 8008af6:	2204      	movcc	r2, #4
 8008af8:	9201      	str	r2, [sp, #4]
 8008afa:	9a02      	ldr	r2, [sp, #8]
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d80c      	bhi.n	8008b1c <__multiply+0x9c>
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	dd03      	ble.n	8008b0e <__multiply+0x8e>
 8008b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d05a      	beq.n	8008bc4 <__multiply+0x144>
 8008b0e:	6106      	str	r6, [r0, #16]
 8008b10:	b005      	add	sp, #20
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	f843 2b04 	str.w	r2, [r3], #4
 8008b1a:	e7d8      	b.n	8008ace <__multiply+0x4e>
 8008b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b20:	f1ba 0f00 	cmp.w	sl, #0
 8008b24:	d023      	beq.n	8008b6e <__multiply+0xee>
 8008b26:	46a9      	mov	r9, r5
 8008b28:	f04f 0c00 	mov.w	ip, #0
 8008b2c:	f104 0e14 	add.w	lr, r4, #20
 8008b30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b34:	f8d9 1000 	ldr.w	r1, [r9]
 8008b38:	fa1f fb82 	uxth.w	fp, r2
 8008b3c:	b289      	uxth	r1, r1
 8008b3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b42:	4461      	add	r1, ip
 8008b44:	f8d9 c000 	ldr.w	ip, [r9]
 8008b48:	0c12      	lsrs	r2, r2, #16
 8008b4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008b4e:	fb0a c202 	mla	r2, sl, r2, ip
 8008b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b56:	b289      	uxth	r1, r1
 8008b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b5c:	4577      	cmp	r7, lr
 8008b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b62:	f849 1b04 	str.w	r1, [r9], #4
 8008b66:	d8e3      	bhi.n	8008b30 <__multiply+0xb0>
 8008b68:	9a01      	ldr	r2, [sp, #4]
 8008b6a:	f845 c002 	str.w	ip, [r5, r2]
 8008b6e:	9a03      	ldr	r2, [sp, #12]
 8008b70:	3304      	adds	r3, #4
 8008b72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b76:	f1b9 0f00 	cmp.w	r9, #0
 8008b7a:	d021      	beq.n	8008bc0 <__multiply+0x140>
 8008b7c:	46ae      	mov	lr, r5
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	6829      	ldr	r1, [r5, #0]
 8008b84:	f104 0c14 	add.w	ip, r4, #20
 8008b88:	f8bc b000 	ldrh.w	fp, [ip]
 8008b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b90:	b289      	uxth	r1, r1
 8008b92:	fb09 220b 	mla	r2, r9, fp, r2
 8008b96:	4452      	add	r2, sl
 8008b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b9c:	f84e 1b04 	str.w	r1, [lr], #4
 8008ba0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ba8:	f8be 1000 	ldrh.w	r1, [lr]
 8008bac:	4567      	cmp	r7, ip
 8008bae:	fb09 110a 	mla	r1, r9, sl, r1
 8008bb2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008bb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bba:	d8e5      	bhi.n	8008b88 <__multiply+0x108>
 8008bbc:	9a01      	ldr	r2, [sp, #4]
 8008bbe:	50a9      	str	r1, [r5, r2]
 8008bc0:	3504      	adds	r5, #4
 8008bc2:	e79a      	b.n	8008afa <__multiply+0x7a>
 8008bc4:	3e01      	subs	r6, #1
 8008bc6:	e79c      	b.n	8008b02 <__multiply+0x82>
 8008bc8:	08009b64 	.word	0x08009b64
 8008bcc:	08009b75 	.word	0x08009b75

08008bd0 <__pow5mult>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	f012 0203 	ands.w	r2, r2, #3
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	d007      	beq.n	8008bf0 <__pow5mult+0x20>
 8008be0:	4c25      	ldr	r4, [pc, #148]	; (8008c78 <__pow5mult+0xa8>)
 8008be2:	3a01      	subs	r2, #1
 8008be4:	2300      	movs	r3, #0
 8008be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bea:	f7ff fe9f 	bl	800892c <__multadd>
 8008bee:	4607      	mov	r7, r0
 8008bf0:	10ad      	asrs	r5, r5, #2
 8008bf2:	d03d      	beq.n	8008c70 <__pow5mult+0xa0>
 8008bf4:	69f4      	ldr	r4, [r6, #28]
 8008bf6:	b97c      	cbnz	r4, 8008c18 <__pow5mult+0x48>
 8008bf8:	2010      	movs	r0, #16
 8008bfa:	f7ff fd81 	bl	8008700 <malloc>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	61f0      	str	r0, [r6, #28]
 8008c02:	b928      	cbnz	r0, 8008c10 <__pow5mult+0x40>
 8008c04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c08:	4b1c      	ldr	r3, [pc, #112]	; (8008c7c <__pow5mult+0xac>)
 8008c0a:	481d      	ldr	r0, [pc, #116]	; (8008c80 <__pow5mult+0xb0>)
 8008c0c:	f000 fbde 	bl	80093cc <__assert_func>
 8008c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c14:	6004      	str	r4, [r0, #0]
 8008c16:	60c4      	str	r4, [r0, #12]
 8008c18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c20:	b94c      	cbnz	r4, 8008c36 <__pow5mult+0x66>
 8008c22:	f240 2171 	movw	r1, #625	; 0x271
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ff14 	bl	8008a54 <__i2b>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	f04f 0900 	mov.w	r9, #0
 8008c3a:	07eb      	lsls	r3, r5, #31
 8008c3c:	d50a      	bpl.n	8008c54 <__pow5mult+0x84>
 8008c3e:	4639      	mov	r1, r7
 8008c40:	4622      	mov	r2, r4
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff ff1c 	bl	8008a80 <__multiply>
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff fe4b 	bl	80088e8 <_Bfree>
 8008c52:	4647      	mov	r7, r8
 8008c54:	106d      	asrs	r5, r5, #1
 8008c56:	d00b      	beq.n	8008c70 <__pow5mult+0xa0>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	b938      	cbnz	r0, 8008c6c <__pow5mult+0x9c>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7ff ff0d 	bl	8008a80 <__multiply>
 8008c66:	6020      	str	r0, [r4, #0]
 8008c68:	f8c0 9000 	str.w	r9, [r0]
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	e7e4      	b.n	8008c3a <__pow5mult+0x6a>
 8008c70:	4638      	mov	r0, r7
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c76:	bf00      	nop
 8008c78:	08009cc0 	.word	0x08009cc0
 8008c7c:	08009af5 	.word	0x08009af5
 8008c80:	08009b75 	.word	0x08009b75

08008c84 <__lshift>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	6849      	ldr	r1, [r1, #4]
 8008c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c9c:	f108 0601 	add.w	r6, r8, #1
 8008ca0:	42b3      	cmp	r3, r6
 8008ca2:	db0b      	blt.n	8008cbc <__lshift+0x38>
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fddf 	bl	8008868 <_Balloc>
 8008caa:	4605      	mov	r5, r0
 8008cac:	b948      	cbnz	r0, 8008cc2 <__lshift+0x3e>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008cb4:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <__lshift+0xd0>)
 8008cb6:	4828      	ldr	r0, [pc, #160]	; (8008d58 <__lshift+0xd4>)
 8008cb8:	f000 fb88 	bl	80093cc <__assert_func>
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__lshift+0x1c>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f100 0114 	add.w	r1, r0, #20
 8008cc8:	f100 0210 	add.w	r2, r0, #16
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4553      	cmp	r3, sl
 8008cd0:	db33      	blt.n	8008d3a <__lshift+0xb6>
 8008cd2:	6920      	ldr	r0, [r4, #16]
 8008cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd8:	f104 0314 	add.w	r3, r4, #20
 8008cdc:	f019 091f 	ands.w	r9, r9, #31
 8008ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ce8:	d02b      	beq.n	8008d42 <__lshift+0xbe>
 8008cea:	468a      	mov	sl, r1
 8008cec:	2200      	movs	r2, #0
 8008cee:	f1c9 0e20 	rsb	lr, r9, #32
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	fa00 f009 	lsl.w	r0, r0, r9
 8008cf8:	4310      	orrs	r0, r2
 8008cfa:	f84a 0b04 	str.w	r0, [sl], #4
 8008cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d02:	459c      	cmp	ip, r3
 8008d04:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d08:	d8f3      	bhi.n	8008cf2 <__lshift+0x6e>
 8008d0a:	ebac 0304 	sub.w	r3, ip, r4
 8008d0e:	3b15      	subs	r3, #21
 8008d10:	f023 0303 	bic.w	r3, r3, #3
 8008d14:	3304      	adds	r3, #4
 8008d16:	f104 0015 	add.w	r0, r4, #21
 8008d1a:	4584      	cmp	ip, r0
 8008d1c:	bf38      	it	cc
 8008d1e:	2304      	movcc	r3, #4
 8008d20:	50ca      	str	r2, [r1, r3]
 8008d22:	b10a      	cbz	r2, 8008d28 <__lshift+0xa4>
 8008d24:	f108 0602 	add.w	r6, r8, #2
 8008d28:	3e01      	subs	r6, #1
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	612e      	str	r6, [r5, #16]
 8008d30:	f7ff fdda 	bl	80088e8 <_Bfree>
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d3e:	3301      	adds	r3, #1
 8008d40:	e7c5      	b.n	8008cce <__lshift+0x4a>
 8008d42:	3904      	subs	r1, #4
 8008d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d48:	459c      	cmp	ip, r3
 8008d4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d4e:	d8f9      	bhi.n	8008d44 <__lshift+0xc0>
 8008d50:	e7ea      	b.n	8008d28 <__lshift+0xa4>
 8008d52:	bf00      	nop
 8008d54:	08009b64 	.word	0x08009b64
 8008d58:	08009b75 	.word	0x08009b75

08008d5c <__mcmp>:
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	690a      	ldr	r2, [r1, #16]
 8008d60:	6900      	ldr	r0, [r0, #16]
 8008d62:	b530      	push	{r4, r5, lr}
 8008d64:	1a80      	subs	r0, r0, r2
 8008d66:	d10d      	bne.n	8008d84 <__mcmp+0x28>
 8008d68:	3314      	adds	r3, #20
 8008d6a:	3114      	adds	r1, #20
 8008d6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d7c:	4295      	cmp	r5, r2
 8008d7e:	d002      	beq.n	8008d86 <__mcmp+0x2a>
 8008d80:	d304      	bcc.n	8008d8c <__mcmp+0x30>
 8008d82:	2001      	movs	r0, #1
 8008d84:	bd30      	pop	{r4, r5, pc}
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	d3f4      	bcc.n	8008d74 <__mcmp+0x18>
 8008d8a:	e7fb      	b.n	8008d84 <__mcmp+0x28>
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	e7f8      	b.n	8008d84 <__mcmp+0x28>
	...

08008d94 <__mdiff>:
 8008d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	460d      	mov	r5, r1
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4628      	mov	r0, r5
 8008da0:	4614      	mov	r4, r2
 8008da2:	f7ff ffdb 	bl	8008d5c <__mcmp>
 8008da6:	1e06      	subs	r6, r0, #0
 8008da8:	d111      	bne.n	8008dce <__mdiff+0x3a>
 8008daa:	4631      	mov	r1, r6
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff fd5b 	bl	8008868 <_Balloc>
 8008db2:	4602      	mov	r2, r0
 8008db4:	b928      	cbnz	r0, 8008dc2 <__mdiff+0x2e>
 8008db6:	f240 2137 	movw	r1, #567	; 0x237
 8008dba:	4b3a      	ldr	r3, [pc, #232]	; (8008ea4 <__mdiff+0x110>)
 8008dbc:	483a      	ldr	r0, [pc, #232]	; (8008ea8 <__mdiff+0x114>)
 8008dbe:	f000 fb05 	bl	80093cc <__assert_func>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008dc8:	4610      	mov	r0, r2
 8008dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dce:	bfa4      	itt	ge
 8008dd0:	4623      	movge	r3, r4
 8008dd2:	462c      	movge	r4, r5
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	6861      	ldr	r1, [r4, #4]
 8008dd8:	bfa6      	itte	ge
 8008dda:	461d      	movge	r5, r3
 8008ddc:	2600      	movge	r6, #0
 8008dde:	2601      	movlt	r6, #1
 8008de0:	f7ff fd42 	bl	8008868 <_Balloc>
 8008de4:	4602      	mov	r2, r0
 8008de6:	b918      	cbnz	r0, 8008df0 <__mdiff+0x5c>
 8008de8:	f240 2145 	movw	r1, #581	; 0x245
 8008dec:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <__mdiff+0x110>)
 8008dee:	e7e5      	b.n	8008dbc <__mdiff+0x28>
 8008df0:	f102 0814 	add.w	r8, r2, #20
 8008df4:	46c2      	mov	sl, r8
 8008df6:	f04f 0c00 	mov.w	ip, #0
 8008dfa:	6927      	ldr	r7, [r4, #16]
 8008dfc:	60c6      	str	r6, [r0, #12]
 8008dfe:	692e      	ldr	r6, [r5, #16]
 8008e00:	f104 0014 	add.w	r0, r4, #20
 8008e04:	f105 0914 	add.w	r9, r5, #20
 8008e08:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008e0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e10:	3410      	adds	r4, #16
 8008e12:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008e16:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e1a:	fa1f f18b 	uxth.w	r1, fp
 8008e1e:	4461      	add	r1, ip
 8008e20:	fa1f fc83 	uxth.w	ip, r3
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	eba1 010c 	sub.w	r1, r1, ip
 8008e2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e32:	b289      	uxth	r1, r1
 8008e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008e38:	454e      	cmp	r6, r9
 8008e3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008e3e:	f84a 1b04 	str.w	r1, [sl], #4
 8008e42:	d8e6      	bhi.n	8008e12 <__mdiff+0x7e>
 8008e44:	1b73      	subs	r3, r6, r5
 8008e46:	3b15      	subs	r3, #21
 8008e48:	f023 0303 	bic.w	r3, r3, #3
 8008e4c:	3515      	adds	r5, #21
 8008e4e:	3304      	adds	r3, #4
 8008e50:	42ae      	cmp	r6, r5
 8008e52:	bf38      	it	cc
 8008e54:	2304      	movcc	r3, #4
 8008e56:	4418      	add	r0, r3
 8008e58:	4443      	add	r3, r8
 8008e5a:	461e      	mov	r6, r3
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	4575      	cmp	r5, lr
 8008e60:	d30e      	bcc.n	8008e80 <__mdiff+0xec>
 8008e62:	f10e 0103 	add.w	r1, lr, #3
 8008e66:	1a09      	subs	r1, r1, r0
 8008e68:	f021 0103 	bic.w	r1, r1, #3
 8008e6c:	3803      	subs	r0, #3
 8008e6e:	4586      	cmp	lr, r0
 8008e70:	bf38      	it	cc
 8008e72:	2100      	movcc	r1, #0
 8008e74:	440b      	add	r3, r1
 8008e76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e7a:	b189      	cbz	r1, 8008ea0 <__mdiff+0x10c>
 8008e7c:	6117      	str	r7, [r2, #16]
 8008e7e:	e7a3      	b.n	8008dc8 <__mdiff+0x34>
 8008e80:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e84:	fa1f f188 	uxth.w	r1, r8
 8008e88:	4461      	add	r1, ip
 8008e8a:	140c      	asrs	r4, r1, #16
 8008e8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e90:	b289      	uxth	r1, r1
 8008e92:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e96:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008e9a:	f846 1b04 	str.w	r1, [r6], #4
 8008e9e:	e7de      	b.n	8008e5e <__mdiff+0xca>
 8008ea0:	3f01      	subs	r7, #1
 8008ea2:	e7e8      	b.n	8008e76 <__mdiff+0xe2>
 8008ea4:	08009b64 	.word	0x08009b64
 8008ea8:	08009b75 	.word	0x08009b75

08008eac <__d2b>:
 8008eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eae:	2101      	movs	r1, #1
 8008eb0:	4617      	mov	r7, r2
 8008eb2:	461c      	mov	r4, r3
 8008eb4:	9e08      	ldr	r6, [sp, #32]
 8008eb6:	f7ff fcd7 	bl	8008868 <_Balloc>
 8008eba:	4605      	mov	r5, r0
 8008ebc:	b930      	cbnz	r0, 8008ecc <__d2b+0x20>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	f240 310f 	movw	r1, #783	; 0x30f
 8008ec4:	4b22      	ldr	r3, [pc, #136]	; (8008f50 <__d2b+0xa4>)
 8008ec6:	4823      	ldr	r0, [pc, #140]	; (8008f54 <__d2b+0xa8>)
 8008ec8:	f000 fa80 	bl	80093cc <__assert_func>
 8008ecc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008ed0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008ed4:	bb24      	cbnz	r4, 8008f20 <__d2b+0x74>
 8008ed6:	2f00      	cmp	r7, #0
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	d026      	beq.n	8008f2a <__d2b+0x7e>
 8008edc:	4668      	mov	r0, sp
 8008ede:	9700      	str	r7, [sp, #0]
 8008ee0:	f7ff fd8a 	bl	80089f8 <__lo0bits>
 8008ee4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ee8:	b1e8      	cbz	r0, 8008f26 <__d2b+0x7a>
 8008eea:	f1c0 0320 	rsb	r3, r0, #32
 8008eee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef2:	430b      	orrs	r3, r1
 8008ef4:	40c2      	lsrs	r2, r0
 8008ef6:	616b      	str	r3, [r5, #20]
 8008ef8:	9201      	str	r2, [sp, #4]
 8008efa:	9b01      	ldr	r3, [sp, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf14      	ite	ne
 8008f00:	2102      	movne	r1, #2
 8008f02:	2101      	moveq	r1, #1
 8008f04:	61ab      	str	r3, [r5, #24]
 8008f06:	6129      	str	r1, [r5, #16]
 8008f08:	b1bc      	cbz	r4, 8008f3a <__d2b+0x8e>
 8008f0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f0e:	4404      	add	r4, r0
 8008f10:	6034      	str	r4, [r6, #0]
 8008f12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	6018      	str	r0, [r3, #0]
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	b003      	add	sp, #12
 8008f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f24:	e7d7      	b.n	8008ed6 <__d2b+0x2a>
 8008f26:	6169      	str	r1, [r5, #20]
 8008f28:	e7e7      	b.n	8008efa <__d2b+0x4e>
 8008f2a:	a801      	add	r0, sp, #4
 8008f2c:	f7ff fd64 	bl	80089f8 <__lo0bits>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	2101      	movs	r1, #1
 8008f34:	616b      	str	r3, [r5, #20]
 8008f36:	3020      	adds	r0, #32
 8008f38:	e7e5      	b.n	8008f06 <__d2b+0x5a>
 8008f3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f3e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008f42:	6030      	str	r0, [r6, #0]
 8008f44:	6918      	ldr	r0, [r3, #16]
 8008f46:	f7ff fd37 	bl	80089b8 <__hi0bits>
 8008f4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008f4e:	e7e2      	b.n	8008f16 <__d2b+0x6a>
 8008f50:	08009b64 	.word	0x08009b64
 8008f54:	08009b75 	.word	0x08009b75

08008f58 <__ssputs_r>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	461f      	mov	r7, r3
 8008f5e:	688e      	ldr	r6, [r1, #8]
 8008f60:	4682      	mov	sl, r0
 8008f62:	42be      	cmp	r6, r7
 8008f64:	460c      	mov	r4, r1
 8008f66:	4690      	mov	r8, r2
 8008f68:	680b      	ldr	r3, [r1, #0]
 8008f6a:	d82c      	bhi.n	8008fc6 <__ssputs_r+0x6e>
 8008f6c:	898a      	ldrh	r2, [r1, #12]
 8008f6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f72:	d026      	beq.n	8008fc2 <__ssputs_r+0x6a>
 8008f74:	6965      	ldr	r5, [r4, #20]
 8008f76:	6909      	ldr	r1, [r1, #16]
 8008f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f7c:	eba3 0901 	sub.w	r9, r3, r1
 8008f80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f84:	1c7b      	adds	r3, r7, #1
 8008f86:	444b      	add	r3, r9
 8008f88:	106d      	asrs	r5, r5, #1
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	bf38      	it	cc
 8008f8e:	461d      	movcc	r5, r3
 8008f90:	0553      	lsls	r3, r2, #21
 8008f92:	d527      	bpl.n	8008fe4 <__ssputs_r+0x8c>
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7ff fbdb 	bl	8008750 <_malloc_r>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	b360      	cbz	r0, 8008ff8 <__ssputs_r+0xa0>
 8008f9e:	464a      	mov	r2, r9
 8008fa0:	6921      	ldr	r1, [r4, #16]
 8008fa2:	f000 fa05 	bl	80093b0 <memcpy>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	6126      	str	r6, [r4, #16]
 8008fb4:	444e      	add	r6, r9
 8008fb6:	6026      	str	r6, [r4, #0]
 8008fb8:	463e      	mov	r6, r7
 8008fba:	6165      	str	r5, [r4, #20]
 8008fbc:	eba5 0509 	sub.w	r5, r5, r9
 8008fc0:	60a5      	str	r5, [r4, #8]
 8008fc2:	42be      	cmp	r6, r7
 8008fc4:	d900      	bls.n	8008fc8 <__ssputs_r+0x70>
 8008fc6:	463e      	mov	r6, r7
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4641      	mov	r1, r8
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	f000 f9c5 	bl	800935c <memmove>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	1b9b      	subs	r3, r3, r6
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	4433      	add	r3, r6
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	f000 fa35 	bl	8009454 <_realloc_r>
 8008fea:	4606      	mov	r6, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1e0      	bne.n	8008fb2 <__ssputs_r+0x5a>
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	6921      	ldr	r1, [r4, #16]
 8008ff4:	f7ff fb3c 	bl	8008670 <_free_r>
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	f8ca 3000 	str.w	r3, [sl]
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	e7e9      	b.n	8008fe0 <__ssputs_r+0x88>

0800900c <_svfiprintf_r>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	4698      	mov	r8, r3
 8009012:	898b      	ldrh	r3, [r1, #12]
 8009014:	4607      	mov	r7, r0
 8009016:	061b      	lsls	r3, r3, #24
 8009018:	460d      	mov	r5, r1
 800901a:	4614      	mov	r4, r2
 800901c:	b09d      	sub	sp, #116	; 0x74
 800901e:	d50e      	bpl.n	800903e <_svfiprintf_r+0x32>
 8009020:	690b      	ldr	r3, [r1, #16]
 8009022:	b963      	cbnz	r3, 800903e <_svfiprintf_r+0x32>
 8009024:	2140      	movs	r1, #64	; 0x40
 8009026:	f7ff fb93 	bl	8008750 <_malloc_r>
 800902a:	6028      	str	r0, [r5, #0]
 800902c:	6128      	str	r0, [r5, #16]
 800902e:	b920      	cbnz	r0, 800903a <_svfiprintf_r+0x2e>
 8009030:	230c      	movs	r3, #12
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	e0d0      	b.n	80091dc <_svfiprintf_r+0x1d0>
 800903a:	2340      	movs	r3, #64	; 0x40
 800903c:	616b      	str	r3, [r5, #20]
 800903e:	2300      	movs	r3, #0
 8009040:	9309      	str	r3, [sp, #36]	; 0x24
 8009042:	2320      	movs	r3, #32
 8009044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009048:	2330      	movs	r3, #48	; 0x30
 800904a:	f04f 0901 	mov.w	r9, #1
 800904e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009052:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80091f4 <_svfiprintf_r+0x1e8>
 8009056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800905a:	4623      	mov	r3, r4
 800905c:	469a      	mov	sl, r3
 800905e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009062:	b10a      	cbz	r2, 8009068 <_svfiprintf_r+0x5c>
 8009064:	2a25      	cmp	r2, #37	; 0x25
 8009066:	d1f9      	bne.n	800905c <_svfiprintf_r+0x50>
 8009068:	ebba 0b04 	subs.w	fp, sl, r4
 800906c:	d00b      	beq.n	8009086 <_svfiprintf_r+0x7a>
 800906e:	465b      	mov	r3, fp
 8009070:	4622      	mov	r2, r4
 8009072:	4629      	mov	r1, r5
 8009074:	4638      	mov	r0, r7
 8009076:	f7ff ff6f 	bl	8008f58 <__ssputs_r>
 800907a:	3001      	adds	r0, #1
 800907c:	f000 80a9 	beq.w	80091d2 <_svfiprintf_r+0x1c6>
 8009080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009082:	445a      	add	r2, fp
 8009084:	9209      	str	r2, [sp, #36]	; 0x24
 8009086:	f89a 3000 	ldrb.w	r3, [sl]
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 80a1 	beq.w	80091d2 <_svfiprintf_r+0x1c6>
 8009090:	2300      	movs	r3, #0
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800909a:	f10a 0a01 	add.w	sl, sl, #1
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	9307      	str	r3, [sp, #28]
 80090a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090a6:	931a      	str	r3, [sp, #104]	; 0x68
 80090a8:	4654      	mov	r4, sl
 80090aa:	2205      	movs	r2, #5
 80090ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b0:	4850      	ldr	r0, [pc, #320]	; (80091f4 <_svfiprintf_r+0x1e8>)
 80090b2:	f7fe fc60 	bl	8007976 <memchr>
 80090b6:	9a04      	ldr	r2, [sp, #16]
 80090b8:	b9d8      	cbnz	r0, 80090f2 <_svfiprintf_r+0xe6>
 80090ba:	06d0      	lsls	r0, r2, #27
 80090bc:	bf44      	itt	mi
 80090be:	2320      	movmi	r3, #32
 80090c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c4:	0711      	lsls	r1, r2, #28
 80090c6:	bf44      	itt	mi
 80090c8:	232b      	movmi	r3, #43	; 0x2b
 80090ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ce:	f89a 3000 	ldrb.w	r3, [sl]
 80090d2:	2b2a      	cmp	r3, #42	; 0x2a
 80090d4:	d015      	beq.n	8009102 <_svfiprintf_r+0xf6>
 80090d6:	4654      	mov	r4, sl
 80090d8:	2000      	movs	r0, #0
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	9a07      	ldr	r2, [sp, #28]
 80090e0:	4621      	mov	r1, r4
 80090e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090e6:	3b30      	subs	r3, #48	; 0x30
 80090e8:	2b09      	cmp	r3, #9
 80090ea:	d94d      	bls.n	8009188 <_svfiprintf_r+0x17c>
 80090ec:	b1b0      	cbz	r0, 800911c <_svfiprintf_r+0x110>
 80090ee:	9207      	str	r2, [sp, #28]
 80090f0:	e014      	b.n	800911c <_svfiprintf_r+0x110>
 80090f2:	eba0 0308 	sub.w	r3, r0, r8
 80090f6:	fa09 f303 	lsl.w	r3, r9, r3
 80090fa:	4313      	orrs	r3, r2
 80090fc:	46a2      	mov	sl, r4
 80090fe:	9304      	str	r3, [sp, #16]
 8009100:	e7d2      	b.n	80090a8 <_svfiprintf_r+0x9c>
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	1d19      	adds	r1, r3, #4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	9103      	str	r1, [sp, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	bfbb      	ittet	lt
 800910e:	425b      	neglt	r3, r3
 8009110:	f042 0202 	orrlt.w	r2, r2, #2
 8009114:	9307      	strge	r3, [sp, #28]
 8009116:	9307      	strlt	r3, [sp, #28]
 8009118:	bfb8      	it	lt
 800911a:	9204      	strlt	r2, [sp, #16]
 800911c:	7823      	ldrb	r3, [r4, #0]
 800911e:	2b2e      	cmp	r3, #46	; 0x2e
 8009120:	d10c      	bne.n	800913c <_svfiprintf_r+0x130>
 8009122:	7863      	ldrb	r3, [r4, #1]
 8009124:	2b2a      	cmp	r3, #42	; 0x2a
 8009126:	d134      	bne.n	8009192 <_svfiprintf_r+0x186>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	3402      	adds	r4, #2
 800912c:	1d1a      	adds	r2, r3, #4
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	9203      	str	r2, [sp, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	bfb8      	it	lt
 8009136:	f04f 33ff 	movlt.w	r3, #4294967295
 800913a:	9305      	str	r3, [sp, #20]
 800913c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80091f8 <_svfiprintf_r+0x1ec>
 8009140:	2203      	movs	r2, #3
 8009142:	4650      	mov	r0, sl
 8009144:	7821      	ldrb	r1, [r4, #0]
 8009146:	f7fe fc16 	bl	8007976 <memchr>
 800914a:	b138      	cbz	r0, 800915c <_svfiprintf_r+0x150>
 800914c:	2240      	movs	r2, #64	; 0x40
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	eba0 000a 	sub.w	r0, r0, sl
 8009154:	4082      	lsls	r2, r0
 8009156:	4313      	orrs	r3, r2
 8009158:	3401      	adds	r4, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009160:	2206      	movs	r2, #6
 8009162:	4826      	ldr	r0, [pc, #152]	; (80091fc <_svfiprintf_r+0x1f0>)
 8009164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009168:	f7fe fc05 	bl	8007976 <memchr>
 800916c:	2800      	cmp	r0, #0
 800916e:	d038      	beq.n	80091e2 <_svfiprintf_r+0x1d6>
 8009170:	4b23      	ldr	r3, [pc, #140]	; (8009200 <_svfiprintf_r+0x1f4>)
 8009172:	bb1b      	cbnz	r3, 80091bc <_svfiprintf_r+0x1b0>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	3307      	adds	r3, #7
 8009178:	f023 0307 	bic.w	r3, r3, #7
 800917c:	3308      	adds	r3, #8
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009182:	4433      	add	r3, r6
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	e768      	b.n	800905a <_svfiprintf_r+0x4e>
 8009188:	460c      	mov	r4, r1
 800918a:	2001      	movs	r0, #1
 800918c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009190:	e7a6      	b.n	80090e0 <_svfiprintf_r+0xd4>
 8009192:	2300      	movs	r3, #0
 8009194:	f04f 0c0a 	mov.w	ip, #10
 8009198:	4619      	mov	r1, r3
 800919a:	3401      	adds	r4, #1
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	4620      	mov	r0, r4
 80091a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091a4:	3a30      	subs	r2, #48	; 0x30
 80091a6:	2a09      	cmp	r2, #9
 80091a8:	d903      	bls.n	80091b2 <_svfiprintf_r+0x1a6>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0c6      	beq.n	800913c <_svfiprintf_r+0x130>
 80091ae:	9105      	str	r1, [sp, #20]
 80091b0:	e7c4      	b.n	800913c <_svfiprintf_r+0x130>
 80091b2:	4604      	mov	r4, r0
 80091b4:	2301      	movs	r3, #1
 80091b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ba:	e7f0      	b.n	800919e <_svfiprintf_r+0x192>
 80091bc:	ab03      	add	r3, sp, #12
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	462a      	mov	r2, r5
 80091c2:	4638      	mov	r0, r7
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <_svfiprintf_r+0x1f8>)
 80091c6:	a904      	add	r1, sp, #16
 80091c8:	f7fd fe6e 	bl	8006ea8 <_printf_float>
 80091cc:	1c42      	adds	r2, r0, #1
 80091ce:	4606      	mov	r6, r0
 80091d0:	d1d6      	bne.n	8009180 <_svfiprintf_r+0x174>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	065b      	lsls	r3, r3, #25
 80091d6:	f53f af2d 	bmi.w	8009034 <_svfiprintf_r+0x28>
 80091da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091dc:	b01d      	add	sp, #116	; 0x74
 80091de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e2:	ab03      	add	r3, sp, #12
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	462a      	mov	r2, r5
 80091e8:	4638      	mov	r0, r7
 80091ea:	4b06      	ldr	r3, [pc, #24]	; (8009204 <_svfiprintf_r+0x1f8>)
 80091ec:	a904      	add	r1, sp, #16
 80091ee:	f7fe f8fb 	bl	80073e8 <_printf_i>
 80091f2:	e7eb      	b.n	80091cc <_svfiprintf_r+0x1c0>
 80091f4:	08009ccc 	.word	0x08009ccc
 80091f8:	08009cd2 	.word	0x08009cd2
 80091fc:	08009cd6 	.word	0x08009cd6
 8009200:	08006ea9 	.word	0x08006ea9
 8009204:	08008f59 	.word	0x08008f59

08009208 <__sflush_r>:
 8009208:	898a      	ldrh	r2, [r1, #12]
 800920a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920c:	4605      	mov	r5, r0
 800920e:	0710      	lsls	r0, r2, #28
 8009210:	460c      	mov	r4, r1
 8009212:	d457      	bmi.n	80092c4 <__sflush_r+0xbc>
 8009214:	684b      	ldr	r3, [r1, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	dc04      	bgt.n	8009224 <__sflush_r+0x1c>
 800921a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc01      	bgt.n	8009224 <__sflush_r+0x1c>
 8009220:	2000      	movs	r0, #0
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009226:	2e00      	cmp	r6, #0
 8009228:	d0fa      	beq.n	8009220 <__sflush_r+0x18>
 800922a:	2300      	movs	r3, #0
 800922c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009230:	682f      	ldr	r7, [r5, #0]
 8009232:	6a21      	ldr	r1, [r4, #32]
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	d032      	beq.n	800929e <__sflush_r+0x96>
 8009238:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	075a      	lsls	r2, r3, #29
 800923e:	d505      	bpl.n	800924c <__sflush_r+0x44>
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	1ac0      	subs	r0, r0, r3
 8009244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009246:	b10b      	cbz	r3, 800924c <__sflush_r+0x44>
 8009248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800924a:	1ac0      	subs	r0, r0, r3
 800924c:	2300      	movs	r3, #0
 800924e:	4602      	mov	r2, r0
 8009250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009252:	4628      	mov	r0, r5
 8009254:	6a21      	ldr	r1, [r4, #32]
 8009256:	47b0      	blx	r6
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	d106      	bne.n	800926c <__sflush_r+0x64>
 800925e:	6829      	ldr	r1, [r5, #0]
 8009260:	291d      	cmp	r1, #29
 8009262:	d82b      	bhi.n	80092bc <__sflush_r+0xb4>
 8009264:	4a28      	ldr	r2, [pc, #160]	; (8009308 <__sflush_r+0x100>)
 8009266:	410a      	asrs	r2, r1
 8009268:	07d6      	lsls	r6, r2, #31
 800926a:	d427      	bmi.n	80092bc <__sflush_r+0xb4>
 800926c:	2200      	movs	r2, #0
 800926e:	6062      	str	r2, [r4, #4]
 8009270:	6922      	ldr	r2, [r4, #16]
 8009272:	04d9      	lsls	r1, r3, #19
 8009274:	6022      	str	r2, [r4, #0]
 8009276:	d504      	bpl.n	8009282 <__sflush_r+0x7a>
 8009278:	1c42      	adds	r2, r0, #1
 800927a:	d101      	bne.n	8009280 <__sflush_r+0x78>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b903      	cbnz	r3, 8009282 <__sflush_r+0x7a>
 8009280:	6560      	str	r0, [r4, #84]	; 0x54
 8009282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009284:	602f      	str	r7, [r5, #0]
 8009286:	2900      	cmp	r1, #0
 8009288:	d0ca      	beq.n	8009220 <__sflush_r+0x18>
 800928a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800928e:	4299      	cmp	r1, r3
 8009290:	d002      	beq.n	8009298 <__sflush_r+0x90>
 8009292:	4628      	mov	r0, r5
 8009294:	f7ff f9ec 	bl	8008670 <_free_r>
 8009298:	2000      	movs	r0, #0
 800929a:	6360      	str	r0, [r4, #52]	; 0x34
 800929c:	e7c1      	b.n	8009222 <__sflush_r+0x1a>
 800929e:	2301      	movs	r3, #1
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b0      	blx	r6
 80092a4:	1c41      	adds	r1, r0, #1
 80092a6:	d1c8      	bne.n	800923a <__sflush_r+0x32>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0c5      	beq.n	800923a <__sflush_r+0x32>
 80092ae:	2b1d      	cmp	r3, #29
 80092b0:	d001      	beq.n	80092b6 <__sflush_r+0xae>
 80092b2:	2b16      	cmp	r3, #22
 80092b4:	d101      	bne.n	80092ba <__sflush_r+0xb2>
 80092b6:	602f      	str	r7, [r5, #0]
 80092b8:	e7b2      	b.n	8009220 <__sflush_r+0x18>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	e7ae      	b.n	8009222 <__sflush_r+0x1a>
 80092c4:	690f      	ldr	r7, [r1, #16]
 80092c6:	2f00      	cmp	r7, #0
 80092c8:	d0aa      	beq.n	8009220 <__sflush_r+0x18>
 80092ca:	0793      	lsls	r3, r2, #30
 80092cc:	bf18      	it	ne
 80092ce:	2300      	movne	r3, #0
 80092d0:	680e      	ldr	r6, [r1, #0]
 80092d2:	bf08      	it	eq
 80092d4:	694b      	ldreq	r3, [r1, #20]
 80092d6:	1bf6      	subs	r6, r6, r7
 80092d8:	600f      	str	r7, [r1, #0]
 80092da:	608b      	str	r3, [r1, #8]
 80092dc:	2e00      	cmp	r6, #0
 80092de:	dd9f      	ble.n	8009220 <__sflush_r+0x18>
 80092e0:	4633      	mov	r3, r6
 80092e2:	463a      	mov	r2, r7
 80092e4:	4628      	mov	r0, r5
 80092e6:	6a21      	ldr	r1, [r4, #32]
 80092e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80092ec:	47e0      	blx	ip
 80092ee:	2800      	cmp	r0, #0
 80092f0:	dc06      	bgt.n	8009300 <__sflush_r+0xf8>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	e790      	b.n	8009222 <__sflush_r+0x1a>
 8009300:	4407      	add	r7, r0
 8009302:	1a36      	subs	r6, r6, r0
 8009304:	e7ea      	b.n	80092dc <__sflush_r+0xd4>
 8009306:	bf00      	nop
 8009308:	dfbffffe 	.word	0xdfbffffe

0800930c <_fflush_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	690b      	ldr	r3, [r1, #16]
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	b913      	cbnz	r3, 800931c <_fflush_r+0x10>
 8009316:	2500      	movs	r5, #0
 8009318:	4628      	mov	r0, r5
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	b118      	cbz	r0, 8009326 <_fflush_r+0x1a>
 800931e:	6a03      	ldr	r3, [r0, #32]
 8009320:	b90b      	cbnz	r3, 8009326 <_fflush_r+0x1a>
 8009322:	f7fe fa0f 	bl	8007744 <__sinit>
 8009326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0f3      	beq.n	8009316 <_fflush_r+0xa>
 800932e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009330:	07d0      	lsls	r0, r2, #31
 8009332:	d404      	bmi.n	800933e <_fflush_r+0x32>
 8009334:	0599      	lsls	r1, r3, #22
 8009336:	d402      	bmi.n	800933e <_fflush_r+0x32>
 8009338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933a:	f7fe fb1a 	bl	8007972 <__retarget_lock_acquire_recursive>
 800933e:	4628      	mov	r0, r5
 8009340:	4621      	mov	r1, r4
 8009342:	f7ff ff61 	bl	8009208 <__sflush_r>
 8009346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009348:	4605      	mov	r5, r0
 800934a:	07da      	lsls	r2, r3, #31
 800934c:	d4e4      	bmi.n	8009318 <_fflush_r+0xc>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	059b      	lsls	r3, r3, #22
 8009352:	d4e1      	bmi.n	8009318 <_fflush_r+0xc>
 8009354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009356:	f7fe fb0d 	bl	8007974 <__retarget_lock_release_recursive>
 800935a:	e7dd      	b.n	8009318 <_fflush_r+0xc>

0800935c <memmove>:
 800935c:	4288      	cmp	r0, r1
 800935e:	b510      	push	{r4, lr}
 8009360:	eb01 0402 	add.w	r4, r1, r2
 8009364:	d902      	bls.n	800936c <memmove+0x10>
 8009366:	4284      	cmp	r4, r0
 8009368:	4623      	mov	r3, r4
 800936a:	d807      	bhi.n	800937c <memmove+0x20>
 800936c:	1e43      	subs	r3, r0, #1
 800936e:	42a1      	cmp	r1, r4
 8009370:	d008      	beq.n	8009384 <memmove+0x28>
 8009372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800937a:	e7f8      	b.n	800936e <memmove+0x12>
 800937c:	4601      	mov	r1, r0
 800937e:	4402      	add	r2, r0
 8009380:	428a      	cmp	r2, r1
 8009382:	d100      	bne.n	8009386 <memmove+0x2a>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800938a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800938e:	e7f7      	b.n	8009380 <memmove+0x24>

08009390 <_sbrk_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	2300      	movs	r3, #0
 8009394:	4d05      	ldr	r5, [pc, #20]	; (80093ac <_sbrk_r+0x1c>)
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7f9 fa9a 	bl	80028d4 <_sbrk>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_sbrk_r+0x1a>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_sbrk_r+0x1a>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	2000070c 	.word	0x2000070c

080093b0 <memcpy>:
 80093b0:	440a      	add	r2, r1
 80093b2:	4291      	cmp	r1, r2
 80093b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b8:	d100      	bne.n	80093bc <memcpy+0xc>
 80093ba:	4770      	bx	lr
 80093bc:	b510      	push	{r4, lr}
 80093be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c2:	4291      	cmp	r1, r2
 80093c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c8:	d1f9      	bne.n	80093be <memcpy+0xe>
 80093ca:	bd10      	pop	{r4, pc}

080093cc <__assert_func>:
 80093cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ce:	4614      	mov	r4, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <__assert_func+0x2c>)
 80093d4:	4605      	mov	r5, r0
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68d8      	ldr	r0, [r3, #12]
 80093da:	b14c      	cbz	r4, 80093f0 <__assert_func+0x24>
 80093dc:	4b07      	ldr	r3, [pc, #28]	; (80093fc <__assert_func+0x30>)
 80093de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093e2:	9100      	str	r1, [sp, #0]
 80093e4:	462b      	mov	r3, r5
 80093e6:	4906      	ldr	r1, [pc, #24]	; (8009400 <__assert_func+0x34>)
 80093e8:	f000 f870 	bl	80094cc <fiprintf>
 80093ec:	f000 f880 	bl	80094f0 <abort>
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <__assert_func+0x38>)
 80093f2:	461c      	mov	r4, r3
 80093f4:	e7f3      	b.n	80093de <__assert_func+0x12>
 80093f6:	bf00      	nop
 80093f8:	200000f0 	.word	0x200000f0
 80093fc:	08009ce7 	.word	0x08009ce7
 8009400:	08009cf4 	.word	0x08009cf4
 8009404:	08009d22 	.word	0x08009d22

08009408 <_calloc_r>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	fba1 5402 	umull	r5, r4, r1, r2
 800940e:	b934      	cbnz	r4, 800941e <_calloc_r+0x16>
 8009410:	4629      	mov	r1, r5
 8009412:	f7ff f99d 	bl	8008750 <_malloc_r>
 8009416:	4606      	mov	r6, r0
 8009418:	b928      	cbnz	r0, 8009426 <_calloc_r+0x1e>
 800941a:	4630      	mov	r0, r6
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	220c      	movs	r2, #12
 8009420:	2600      	movs	r6, #0
 8009422:	6002      	str	r2, [r0, #0]
 8009424:	e7f9      	b.n	800941a <_calloc_r+0x12>
 8009426:	462a      	mov	r2, r5
 8009428:	4621      	mov	r1, r4
 800942a:	f7fe fa24 	bl	8007876 <memset>
 800942e:	e7f4      	b.n	800941a <_calloc_r+0x12>

08009430 <__ascii_mbtowc>:
 8009430:	b082      	sub	sp, #8
 8009432:	b901      	cbnz	r1, 8009436 <__ascii_mbtowc+0x6>
 8009434:	a901      	add	r1, sp, #4
 8009436:	b142      	cbz	r2, 800944a <__ascii_mbtowc+0x1a>
 8009438:	b14b      	cbz	r3, 800944e <__ascii_mbtowc+0x1e>
 800943a:	7813      	ldrb	r3, [r2, #0]
 800943c:	600b      	str	r3, [r1, #0]
 800943e:	7812      	ldrb	r2, [r2, #0]
 8009440:	1e10      	subs	r0, r2, #0
 8009442:	bf18      	it	ne
 8009444:	2001      	movne	r0, #1
 8009446:	b002      	add	sp, #8
 8009448:	4770      	bx	lr
 800944a:	4610      	mov	r0, r2
 800944c:	e7fb      	b.n	8009446 <__ascii_mbtowc+0x16>
 800944e:	f06f 0001 	mvn.w	r0, #1
 8009452:	e7f8      	b.n	8009446 <__ascii_mbtowc+0x16>

08009454 <_realloc_r>:
 8009454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	4680      	mov	r8, r0
 800945a:	4614      	mov	r4, r2
 800945c:	460e      	mov	r6, r1
 800945e:	b921      	cbnz	r1, 800946a <_realloc_r+0x16>
 8009460:	4611      	mov	r1, r2
 8009462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	f7ff b973 	b.w	8008750 <_malloc_r>
 800946a:	b92a      	cbnz	r2, 8009478 <_realloc_r+0x24>
 800946c:	f7ff f900 	bl	8008670 <_free_r>
 8009470:	4625      	mov	r5, r4
 8009472:	4628      	mov	r0, r5
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	f000 f841 	bl	80094fe <_malloc_usable_size_r>
 800947c:	4284      	cmp	r4, r0
 800947e:	4607      	mov	r7, r0
 8009480:	d802      	bhi.n	8009488 <_realloc_r+0x34>
 8009482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009486:	d812      	bhi.n	80094ae <_realloc_r+0x5a>
 8009488:	4621      	mov	r1, r4
 800948a:	4640      	mov	r0, r8
 800948c:	f7ff f960 	bl	8008750 <_malloc_r>
 8009490:	4605      	mov	r5, r0
 8009492:	2800      	cmp	r0, #0
 8009494:	d0ed      	beq.n	8009472 <_realloc_r+0x1e>
 8009496:	42bc      	cmp	r4, r7
 8009498:	4622      	mov	r2, r4
 800949a:	4631      	mov	r1, r6
 800949c:	bf28      	it	cs
 800949e:	463a      	movcs	r2, r7
 80094a0:	f7ff ff86 	bl	80093b0 <memcpy>
 80094a4:	4631      	mov	r1, r6
 80094a6:	4640      	mov	r0, r8
 80094a8:	f7ff f8e2 	bl	8008670 <_free_r>
 80094ac:	e7e1      	b.n	8009472 <_realloc_r+0x1e>
 80094ae:	4635      	mov	r5, r6
 80094b0:	e7df      	b.n	8009472 <_realloc_r+0x1e>

080094b2 <__ascii_wctomb>:
 80094b2:	4603      	mov	r3, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	b141      	cbz	r1, 80094ca <__ascii_wctomb+0x18>
 80094b8:	2aff      	cmp	r2, #255	; 0xff
 80094ba:	d904      	bls.n	80094c6 <__ascii_wctomb+0x14>
 80094bc:	228a      	movs	r2, #138	; 0x8a
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	4770      	bx	lr
 80094c6:	2001      	movs	r0, #1
 80094c8:	700a      	strb	r2, [r1, #0]
 80094ca:	4770      	bx	lr

080094cc <fiprintf>:
 80094cc:	b40e      	push	{r1, r2, r3}
 80094ce:	b503      	push	{r0, r1, lr}
 80094d0:	4601      	mov	r1, r0
 80094d2:	ab03      	add	r3, sp, #12
 80094d4:	4805      	ldr	r0, [pc, #20]	; (80094ec <fiprintf+0x20>)
 80094d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094da:	6800      	ldr	r0, [r0, #0]
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	f000 f83d 	bl	800955c <_vfiprintf_r>
 80094e2:	b002      	add	sp, #8
 80094e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e8:	b003      	add	sp, #12
 80094ea:	4770      	bx	lr
 80094ec:	200000f0 	.word	0x200000f0

080094f0 <abort>:
 80094f0:	2006      	movs	r0, #6
 80094f2:	b508      	push	{r3, lr}
 80094f4:	f000 fa0a 	bl	800990c <raise>
 80094f8:	2001      	movs	r0, #1
 80094fa:	f7f9 f978 	bl	80027ee <_exit>

080094fe <_malloc_usable_size_r>:
 80094fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009502:	1f18      	subs	r0, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfbc      	itt	lt
 8009508:	580b      	ldrlt	r3, [r1, r0]
 800950a:	18c0      	addlt	r0, r0, r3
 800950c:	4770      	bx	lr

0800950e <__sfputc_r>:
 800950e:	6893      	ldr	r3, [r2, #8]
 8009510:	b410      	push	{r4}
 8009512:	3b01      	subs	r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	6093      	str	r3, [r2, #8]
 8009518:	da07      	bge.n	800952a <__sfputc_r+0x1c>
 800951a:	6994      	ldr	r4, [r2, #24]
 800951c:	42a3      	cmp	r3, r4
 800951e:	db01      	blt.n	8009524 <__sfputc_r+0x16>
 8009520:	290a      	cmp	r1, #10
 8009522:	d102      	bne.n	800952a <__sfputc_r+0x1c>
 8009524:	bc10      	pop	{r4}
 8009526:	f000 b933 	b.w	8009790 <__swbuf_r>
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	1c58      	adds	r0, r3, #1
 800952e:	6010      	str	r0, [r2, #0]
 8009530:	7019      	strb	r1, [r3, #0]
 8009532:	4608      	mov	r0, r1
 8009534:	bc10      	pop	{r4}
 8009536:	4770      	bx	lr

08009538 <__sfputs_r>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	4614      	mov	r4, r2
 8009540:	18d5      	adds	r5, r2, r3
 8009542:	42ac      	cmp	r4, r5
 8009544:	d101      	bne.n	800954a <__sfputs_r+0x12>
 8009546:	2000      	movs	r0, #0
 8009548:	e007      	b.n	800955a <__sfputs_r+0x22>
 800954a:	463a      	mov	r2, r7
 800954c:	4630      	mov	r0, r6
 800954e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009552:	f7ff ffdc 	bl	800950e <__sfputc_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d1f3      	bne.n	8009542 <__sfputs_r+0xa>
 800955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800955c <_vfiprintf_r>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	460d      	mov	r5, r1
 8009562:	4614      	mov	r4, r2
 8009564:	4698      	mov	r8, r3
 8009566:	4606      	mov	r6, r0
 8009568:	b09d      	sub	sp, #116	; 0x74
 800956a:	b118      	cbz	r0, 8009574 <_vfiprintf_r+0x18>
 800956c:	6a03      	ldr	r3, [r0, #32]
 800956e:	b90b      	cbnz	r3, 8009574 <_vfiprintf_r+0x18>
 8009570:	f7fe f8e8 	bl	8007744 <__sinit>
 8009574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009576:	07d9      	lsls	r1, r3, #31
 8009578:	d405      	bmi.n	8009586 <_vfiprintf_r+0x2a>
 800957a:	89ab      	ldrh	r3, [r5, #12]
 800957c:	059a      	lsls	r2, r3, #22
 800957e:	d402      	bmi.n	8009586 <_vfiprintf_r+0x2a>
 8009580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009582:	f7fe f9f6 	bl	8007972 <__retarget_lock_acquire_recursive>
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	071b      	lsls	r3, r3, #28
 800958a:	d501      	bpl.n	8009590 <_vfiprintf_r+0x34>
 800958c:	692b      	ldr	r3, [r5, #16]
 800958e:	b99b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x5c>
 8009590:	4629      	mov	r1, r5
 8009592:	4630      	mov	r0, r6
 8009594:	f000 f93a 	bl	800980c <__swsetup_r>
 8009598:	b170      	cbz	r0, 80095b8 <_vfiprintf_r+0x5c>
 800959a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800959c:	07dc      	lsls	r4, r3, #31
 800959e:	d504      	bpl.n	80095aa <_vfiprintf_r+0x4e>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	b01d      	add	sp, #116	; 0x74
 80095a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	0598      	lsls	r0, r3, #22
 80095ae:	d4f7      	bmi.n	80095a0 <_vfiprintf_r+0x44>
 80095b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b2:	f7fe f9df 	bl	8007974 <__retarget_lock_release_recursive>
 80095b6:	e7f3      	b.n	80095a0 <_vfiprintf_r+0x44>
 80095b8:	2300      	movs	r3, #0
 80095ba:	9309      	str	r3, [sp, #36]	; 0x24
 80095bc:	2320      	movs	r3, #32
 80095be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c2:	2330      	movs	r3, #48	; 0x30
 80095c4:	f04f 0901 	mov.w	r9, #1
 80095c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800977c <_vfiprintf_r+0x220>
 80095d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d4:	4623      	mov	r3, r4
 80095d6:	469a      	mov	sl, r3
 80095d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095dc:	b10a      	cbz	r2, 80095e2 <_vfiprintf_r+0x86>
 80095de:	2a25      	cmp	r2, #37	; 0x25
 80095e0:	d1f9      	bne.n	80095d6 <_vfiprintf_r+0x7a>
 80095e2:	ebba 0b04 	subs.w	fp, sl, r4
 80095e6:	d00b      	beq.n	8009600 <_vfiprintf_r+0xa4>
 80095e8:	465b      	mov	r3, fp
 80095ea:	4622      	mov	r2, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	4630      	mov	r0, r6
 80095f0:	f7ff ffa2 	bl	8009538 <__sfputs_r>
 80095f4:	3001      	adds	r0, #1
 80095f6:	f000 80a9 	beq.w	800974c <_vfiprintf_r+0x1f0>
 80095fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fc:	445a      	add	r2, fp
 80095fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009600:	f89a 3000 	ldrb.w	r3, [sl]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80a1 	beq.w	800974c <_vfiprintf_r+0x1f0>
 800960a:	2300      	movs	r3, #0
 800960c:	f04f 32ff 	mov.w	r2, #4294967295
 8009610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009614:	f10a 0a01 	add.w	sl, sl, #1
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	9307      	str	r3, [sp, #28]
 800961c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009620:	931a      	str	r3, [sp, #104]	; 0x68
 8009622:	4654      	mov	r4, sl
 8009624:	2205      	movs	r2, #5
 8009626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962a:	4854      	ldr	r0, [pc, #336]	; (800977c <_vfiprintf_r+0x220>)
 800962c:	f7fe f9a3 	bl	8007976 <memchr>
 8009630:	9a04      	ldr	r2, [sp, #16]
 8009632:	b9d8      	cbnz	r0, 800966c <_vfiprintf_r+0x110>
 8009634:	06d1      	lsls	r1, r2, #27
 8009636:	bf44      	itt	mi
 8009638:	2320      	movmi	r3, #32
 800963a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800963e:	0713      	lsls	r3, r2, #28
 8009640:	bf44      	itt	mi
 8009642:	232b      	movmi	r3, #43	; 0x2b
 8009644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009648:	f89a 3000 	ldrb.w	r3, [sl]
 800964c:	2b2a      	cmp	r3, #42	; 0x2a
 800964e:	d015      	beq.n	800967c <_vfiprintf_r+0x120>
 8009650:	4654      	mov	r4, sl
 8009652:	2000      	movs	r0, #0
 8009654:	f04f 0c0a 	mov.w	ip, #10
 8009658:	9a07      	ldr	r2, [sp, #28]
 800965a:	4621      	mov	r1, r4
 800965c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009660:	3b30      	subs	r3, #48	; 0x30
 8009662:	2b09      	cmp	r3, #9
 8009664:	d94d      	bls.n	8009702 <_vfiprintf_r+0x1a6>
 8009666:	b1b0      	cbz	r0, 8009696 <_vfiprintf_r+0x13a>
 8009668:	9207      	str	r2, [sp, #28]
 800966a:	e014      	b.n	8009696 <_vfiprintf_r+0x13a>
 800966c:	eba0 0308 	sub.w	r3, r0, r8
 8009670:	fa09 f303 	lsl.w	r3, r9, r3
 8009674:	4313      	orrs	r3, r2
 8009676:	46a2      	mov	sl, r4
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	e7d2      	b.n	8009622 <_vfiprintf_r+0xc6>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1d19      	adds	r1, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	9103      	str	r1, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfbb      	ittet	lt
 8009688:	425b      	neglt	r3, r3
 800968a:	f042 0202 	orrlt.w	r2, r2, #2
 800968e:	9307      	strge	r3, [sp, #28]
 8009690:	9307      	strlt	r3, [sp, #28]
 8009692:	bfb8      	it	lt
 8009694:	9204      	strlt	r2, [sp, #16]
 8009696:	7823      	ldrb	r3, [r4, #0]
 8009698:	2b2e      	cmp	r3, #46	; 0x2e
 800969a:	d10c      	bne.n	80096b6 <_vfiprintf_r+0x15a>
 800969c:	7863      	ldrb	r3, [r4, #1]
 800969e:	2b2a      	cmp	r3, #42	; 0x2a
 80096a0:	d134      	bne.n	800970c <_vfiprintf_r+0x1b0>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	3402      	adds	r4, #2
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	9203      	str	r2, [sp, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	bfb8      	it	lt
 80096b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b4:	9305      	str	r3, [sp, #20]
 80096b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009780 <_vfiprintf_r+0x224>
 80096ba:	2203      	movs	r2, #3
 80096bc:	4650      	mov	r0, sl
 80096be:	7821      	ldrb	r1, [r4, #0]
 80096c0:	f7fe f959 	bl	8007976 <memchr>
 80096c4:	b138      	cbz	r0, 80096d6 <_vfiprintf_r+0x17a>
 80096c6:	2240      	movs	r2, #64	; 0x40
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	eba0 000a 	sub.w	r0, r0, sl
 80096ce:	4082      	lsls	r2, r0
 80096d0:	4313      	orrs	r3, r2
 80096d2:	3401      	adds	r4, #1
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096da:	2206      	movs	r2, #6
 80096dc:	4829      	ldr	r0, [pc, #164]	; (8009784 <_vfiprintf_r+0x228>)
 80096de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e2:	f7fe f948 	bl	8007976 <memchr>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d03f      	beq.n	800976a <_vfiprintf_r+0x20e>
 80096ea:	4b27      	ldr	r3, [pc, #156]	; (8009788 <_vfiprintf_r+0x22c>)
 80096ec:	bb1b      	cbnz	r3, 8009736 <_vfiprintf_r+0x1da>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	3307      	adds	r3, #7
 80096f2:	f023 0307 	bic.w	r3, r3, #7
 80096f6:	3308      	adds	r3, #8
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fc:	443b      	add	r3, r7
 80096fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009700:	e768      	b.n	80095d4 <_vfiprintf_r+0x78>
 8009702:	460c      	mov	r4, r1
 8009704:	2001      	movs	r0, #1
 8009706:	fb0c 3202 	mla	r2, ip, r2, r3
 800970a:	e7a6      	b.n	800965a <_vfiprintf_r+0xfe>
 800970c:	2300      	movs	r3, #0
 800970e:	f04f 0c0a 	mov.w	ip, #10
 8009712:	4619      	mov	r1, r3
 8009714:	3401      	adds	r4, #1
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	4620      	mov	r0, r4
 800971a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971e:	3a30      	subs	r2, #48	; 0x30
 8009720:	2a09      	cmp	r2, #9
 8009722:	d903      	bls.n	800972c <_vfiprintf_r+0x1d0>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0c6      	beq.n	80096b6 <_vfiprintf_r+0x15a>
 8009728:	9105      	str	r1, [sp, #20]
 800972a:	e7c4      	b.n	80096b6 <_vfiprintf_r+0x15a>
 800972c:	4604      	mov	r4, r0
 800972e:	2301      	movs	r3, #1
 8009730:	fb0c 2101 	mla	r1, ip, r1, r2
 8009734:	e7f0      	b.n	8009718 <_vfiprintf_r+0x1bc>
 8009736:	ab03      	add	r3, sp, #12
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	462a      	mov	r2, r5
 800973c:	4630      	mov	r0, r6
 800973e:	4b13      	ldr	r3, [pc, #76]	; (800978c <_vfiprintf_r+0x230>)
 8009740:	a904      	add	r1, sp, #16
 8009742:	f7fd fbb1 	bl	8006ea8 <_printf_float>
 8009746:	4607      	mov	r7, r0
 8009748:	1c78      	adds	r0, r7, #1
 800974a:	d1d6      	bne.n	80096fa <_vfiprintf_r+0x19e>
 800974c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800974e:	07d9      	lsls	r1, r3, #31
 8009750:	d405      	bmi.n	800975e <_vfiprintf_r+0x202>
 8009752:	89ab      	ldrh	r3, [r5, #12]
 8009754:	059a      	lsls	r2, r3, #22
 8009756:	d402      	bmi.n	800975e <_vfiprintf_r+0x202>
 8009758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800975a:	f7fe f90b 	bl	8007974 <__retarget_lock_release_recursive>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	065b      	lsls	r3, r3, #25
 8009762:	f53f af1d 	bmi.w	80095a0 <_vfiprintf_r+0x44>
 8009766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009768:	e71c      	b.n	80095a4 <_vfiprintf_r+0x48>
 800976a:	ab03      	add	r3, sp, #12
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	462a      	mov	r2, r5
 8009770:	4630      	mov	r0, r6
 8009772:	4b06      	ldr	r3, [pc, #24]	; (800978c <_vfiprintf_r+0x230>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	f7fd fe37 	bl	80073e8 <_printf_i>
 800977a:	e7e4      	b.n	8009746 <_vfiprintf_r+0x1ea>
 800977c:	08009ccc 	.word	0x08009ccc
 8009780:	08009cd2 	.word	0x08009cd2
 8009784:	08009cd6 	.word	0x08009cd6
 8009788:	08006ea9 	.word	0x08006ea9
 800978c:	08009539 	.word	0x08009539

08009790 <__swbuf_r>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	460e      	mov	r6, r1
 8009794:	4614      	mov	r4, r2
 8009796:	4605      	mov	r5, r0
 8009798:	b118      	cbz	r0, 80097a2 <__swbuf_r+0x12>
 800979a:	6a03      	ldr	r3, [r0, #32]
 800979c:	b90b      	cbnz	r3, 80097a2 <__swbuf_r+0x12>
 800979e:	f7fd ffd1 	bl	8007744 <__sinit>
 80097a2:	69a3      	ldr	r3, [r4, #24]
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	071a      	lsls	r2, r3, #28
 80097aa:	d525      	bpl.n	80097f8 <__swbuf_r+0x68>
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	b31b      	cbz	r3, 80097f8 <__swbuf_r+0x68>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	6922      	ldr	r2, [r4, #16]
 80097b4:	b2f6      	uxtb	r6, r6
 80097b6:	1a98      	subs	r0, r3, r2
 80097b8:	6963      	ldr	r3, [r4, #20]
 80097ba:	4637      	mov	r7, r6
 80097bc:	4283      	cmp	r3, r0
 80097be:	dc04      	bgt.n	80097ca <__swbuf_r+0x3a>
 80097c0:	4621      	mov	r1, r4
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7ff fda2 	bl	800930c <_fflush_r>
 80097c8:	b9e0      	cbnz	r0, 8009804 <__swbuf_r+0x74>
 80097ca:	68a3      	ldr	r3, [r4, #8]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	60a3      	str	r3, [r4, #8]
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	701e      	strb	r6, [r3, #0]
 80097d8:	6962      	ldr	r2, [r4, #20]
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	429a      	cmp	r2, r3
 80097de:	d004      	beq.n	80097ea <__swbuf_r+0x5a>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	07db      	lsls	r3, r3, #31
 80097e4:	d506      	bpl.n	80097f4 <__swbuf_r+0x64>
 80097e6:	2e0a      	cmp	r6, #10
 80097e8:	d104      	bne.n	80097f4 <__swbuf_r+0x64>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f7ff fd8d 	bl	800930c <_fflush_r>
 80097f2:	b938      	cbnz	r0, 8009804 <__swbuf_r+0x74>
 80097f4:	4638      	mov	r0, r7
 80097f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f8:	4621      	mov	r1, r4
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 f806 	bl	800980c <__swsetup_r>
 8009800:	2800      	cmp	r0, #0
 8009802:	d0d5      	beq.n	80097b0 <__swbuf_r+0x20>
 8009804:	f04f 37ff 	mov.w	r7, #4294967295
 8009808:	e7f4      	b.n	80097f4 <__swbuf_r+0x64>
	...

0800980c <__swsetup_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4b2a      	ldr	r3, [pc, #168]	; (80098b8 <__swsetup_r+0xac>)
 8009810:	4605      	mov	r5, r0
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	460c      	mov	r4, r1
 8009816:	b118      	cbz	r0, 8009820 <__swsetup_r+0x14>
 8009818:	6a03      	ldr	r3, [r0, #32]
 800981a:	b90b      	cbnz	r3, 8009820 <__swsetup_r+0x14>
 800981c:	f7fd ff92 	bl	8007744 <__sinit>
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009826:	0718      	lsls	r0, r3, #28
 8009828:	d422      	bmi.n	8009870 <__swsetup_r+0x64>
 800982a:	06d9      	lsls	r1, r3, #27
 800982c:	d407      	bmi.n	800983e <__swsetup_r+0x32>
 800982e:	2309      	movs	r3, #9
 8009830:	602b      	str	r3, [r5, #0]
 8009832:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009836:	f04f 30ff 	mov.w	r0, #4294967295
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	e034      	b.n	80098a8 <__swsetup_r+0x9c>
 800983e:	0758      	lsls	r0, r3, #29
 8009840:	d512      	bpl.n	8009868 <__swsetup_r+0x5c>
 8009842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009844:	b141      	cbz	r1, 8009858 <__swsetup_r+0x4c>
 8009846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800984a:	4299      	cmp	r1, r3
 800984c:	d002      	beq.n	8009854 <__swsetup_r+0x48>
 800984e:	4628      	mov	r0, r5
 8009850:	f7fe ff0e 	bl	8008670 <_free_r>
 8009854:	2300      	movs	r3, #0
 8009856:	6363      	str	r3, [r4, #52]	; 0x34
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	2300      	movs	r3, #0
 8009862:	6063      	str	r3, [r4, #4]
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f043 0308 	orr.w	r3, r3, #8
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	b94b      	cbnz	r3, 8009888 <__swsetup_r+0x7c>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800987a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800987e:	d003      	beq.n	8009888 <__swsetup_r+0x7c>
 8009880:	4621      	mov	r1, r4
 8009882:	4628      	mov	r0, r5
 8009884:	f000 f883 	bl	800998e <__smakebuf_r>
 8009888:	89a0      	ldrh	r0, [r4, #12]
 800988a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800988e:	f010 0301 	ands.w	r3, r0, #1
 8009892:	d00a      	beq.n	80098aa <__swsetup_r+0x9e>
 8009894:	2300      	movs	r3, #0
 8009896:	60a3      	str	r3, [r4, #8]
 8009898:	6963      	ldr	r3, [r4, #20]
 800989a:	425b      	negs	r3, r3
 800989c:	61a3      	str	r3, [r4, #24]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	b943      	cbnz	r3, 80098b4 <__swsetup_r+0xa8>
 80098a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098a6:	d1c4      	bne.n	8009832 <__swsetup_r+0x26>
 80098a8:	bd38      	pop	{r3, r4, r5, pc}
 80098aa:	0781      	lsls	r1, r0, #30
 80098ac:	bf58      	it	pl
 80098ae:	6963      	ldrpl	r3, [r4, #20]
 80098b0:	60a3      	str	r3, [r4, #8]
 80098b2:	e7f4      	b.n	800989e <__swsetup_r+0x92>
 80098b4:	2000      	movs	r0, #0
 80098b6:	e7f7      	b.n	80098a8 <__swsetup_r+0x9c>
 80098b8:	200000f0 	.word	0x200000f0

080098bc <_raise_r>:
 80098bc:	291f      	cmp	r1, #31
 80098be:	b538      	push	{r3, r4, r5, lr}
 80098c0:	4604      	mov	r4, r0
 80098c2:	460d      	mov	r5, r1
 80098c4:	d904      	bls.n	80098d0 <_raise_r+0x14>
 80098c6:	2316      	movs	r3, #22
 80098c8:	6003      	str	r3, [r0, #0]
 80098ca:	f04f 30ff 	mov.w	r0, #4294967295
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098d2:	b112      	cbz	r2, 80098da <_raise_r+0x1e>
 80098d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098d8:	b94b      	cbnz	r3, 80098ee <_raise_r+0x32>
 80098da:	4620      	mov	r0, r4
 80098dc:	f000 f830 	bl	8009940 <_getpid_r>
 80098e0:	462a      	mov	r2, r5
 80098e2:	4601      	mov	r1, r0
 80098e4:	4620      	mov	r0, r4
 80098e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ea:	f000 b817 	b.w	800991c <_kill_r>
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d00a      	beq.n	8009908 <_raise_r+0x4c>
 80098f2:	1c59      	adds	r1, r3, #1
 80098f4:	d103      	bne.n	80098fe <_raise_r+0x42>
 80098f6:	2316      	movs	r3, #22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	2001      	movs	r0, #1
 80098fc:	e7e7      	b.n	80098ce <_raise_r+0x12>
 80098fe:	2400      	movs	r4, #0
 8009900:	4628      	mov	r0, r5
 8009902:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009906:	4798      	blx	r3
 8009908:	2000      	movs	r0, #0
 800990a:	e7e0      	b.n	80098ce <_raise_r+0x12>

0800990c <raise>:
 800990c:	4b02      	ldr	r3, [pc, #8]	; (8009918 <raise+0xc>)
 800990e:	4601      	mov	r1, r0
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	f7ff bfd3 	b.w	80098bc <_raise_r>
 8009916:	bf00      	nop
 8009918:	200000f0 	.word	0x200000f0

0800991c <_kill_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	2300      	movs	r3, #0
 8009920:	4d06      	ldr	r5, [pc, #24]	; (800993c <_kill_r+0x20>)
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	4611      	mov	r1, r2
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	f7f8 ff50 	bl	80027ce <_kill>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	d102      	bne.n	8009938 <_kill_r+0x1c>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	b103      	cbz	r3, 8009938 <_kill_r+0x1c>
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	bd38      	pop	{r3, r4, r5, pc}
 800993a:	bf00      	nop
 800993c:	2000070c 	.word	0x2000070c

08009940 <_getpid_r>:
 8009940:	f7f8 bf3e 	b.w	80027c0 <_getpid>

08009944 <__swhatbuf_r>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	460c      	mov	r4, r1
 8009948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994c:	4615      	mov	r5, r2
 800994e:	2900      	cmp	r1, #0
 8009950:	461e      	mov	r6, r3
 8009952:	b096      	sub	sp, #88	; 0x58
 8009954:	da0c      	bge.n	8009970 <__swhatbuf_r+0x2c>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	2100      	movs	r1, #0
 800995a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800995e:	bf0c      	ite	eq
 8009960:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009964:	2340      	movne	r3, #64	; 0x40
 8009966:	2000      	movs	r0, #0
 8009968:	6031      	str	r1, [r6, #0]
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	b016      	add	sp, #88	; 0x58
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	466a      	mov	r2, sp
 8009972:	f000 f849 	bl	8009a08 <_fstat_r>
 8009976:	2800      	cmp	r0, #0
 8009978:	dbed      	blt.n	8009956 <__swhatbuf_r+0x12>
 800997a:	9901      	ldr	r1, [sp, #4]
 800997c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009980:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009984:	4259      	negs	r1, r3
 8009986:	4159      	adcs	r1, r3
 8009988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800998c:	e7eb      	b.n	8009966 <__swhatbuf_r+0x22>

0800998e <__smakebuf_r>:
 800998e:	898b      	ldrh	r3, [r1, #12]
 8009990:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009992:	079d      	lsls	r5, r3, #30
 8009994:	4606      	mov	r6, r0
 8009996:	460c      	mov	r4, r1
 8009998:	d507      	bpl.n	80099aa <__smakebuf_r+0x1c>
 800999a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	2301      	movs	r3, #1
 80099a4:	6163      	str	r3, [r4, #20]
 80099a6:	b002      	add	sp, #8
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	466a      	mov	r2, sp
 80099ac:	ab01      	add	r3, sp, #4
 80099ae:	f7ff ffc9 	bl	8009944 <__swhatbuf_r>
 80099b2:	9900      	ldr	r1, [sp, #0]
 80099b4:	4605      	mov	r5, r0
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7fe feca 	bl	8008750 <_malloc_r>
 80099bc:	b948      	cbnz	r0, 80099d2 <__smakebuf_r+0x44>
 80099be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c2:	059a      	lsls	r2, r3, #22
 80099c4:	d4ef      	bmi.n	80099a6 <__smakebuf_r+0x18>
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	f043 0302 	orr.w	r3, r3, #2
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	e7e3      	b.n	800999a <__smakebuf_r+0xc>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	6020      	str	r0, [r4, #0]
 80099d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	6120      	str	r0, [r4, #16]
 80099e0:	6163      	str	r3, [r4, #20]
 80099e2:	9b01      	ldr	r3, [sp, #4]
 80099e4:	b15b      	cbz	r3, 80099fe <__smakebuf_r+0x70>
 80099e6:	4630      	mov	r0, r6
 80099e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ec:	f000 f81e 	bl	8009a2c <_isatty_r>
 80099f0:	b128      	cbz	r0, 80099fe <__smakebuf_r+0x70>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	f043 0301 	orr.w	r3, r3, #1
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	431d      	orrs	r5, r3
 8009a02:	81a5      	strh	r5, [r4, #12]
 8009a04:	e7cf      	b.n	80099a6 <__smakebuf_r+0x18>
	...

08009a08 <_fstat_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4d06      	ldr	r5, [pc, #24]	; (8009a28 <_fstat_r+0x20>)
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	f7f8 ff38 	bl	800288a <_fstat>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	d102      	bne.n	8009a24 <_fstat_r+0x1c>
 8009a1e:	682b      	ldr	r3, [r5, #0]
 8009a20:	b103      	cbz	r3, 8009a24 <_fstat_r+0x1c>
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	bd38      	pop	{r3, r4, r5, pc}
 8009a26:	bf00      	nop
 8009a28:	2000070c 	.word	0x2000070c

08009a2c <_isatty_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	2300      	movs	r3, #0
 8009a30:	4d05      	ldr	r5, [pc, #20]	; (8009a48 <_isatty_r+0x1c>)
 8009a32:	4604      	mov	r4, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	602b      	str	r3, [r5, #0]
 8009a38:	f7f8 ff36 	bl	80028a8 <_isatty>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_isatty_r+0x1a>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_isatty_r+0x1a>
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	2000070c 	.word	0x2000070c

08009a4c <_init>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr

08009a58 <_fini>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	bf00      	nop
 8009a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5e:	bc08      	pop	{r3}
 8009a60:	469e      	mov	lr, r3
 8009a62:	4770      	bx	lr
