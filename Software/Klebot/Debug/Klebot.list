
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c94  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ebc  08004ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec4  08004ec4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  08004ed8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004ed8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9cb  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c10  00000000  00000000  0002fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00032658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8b  00000000  00000000  000337f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d43  00000000  00000000  0003457b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017055  00000000  00000000  000552be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd4f7  00000000  00000000  0006c313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004838  00000000  00000000  0012980c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012e044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004e60 	.word	0x08004e60

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004e60 	.word	0x08004e60

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f1xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000536:	3301      	adds	r3, #1
 8000538:	425a      	negs	r2, r3
 800053a:	f003 031f 	and.w	r3, r3, #31
 800053e:	f002 021f 	and.w	r2, r2, #31
 8000542:	bf58      	it	pl
 8000544:	4253      	negpl	r3, r2
 8000546:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	429a      	cmp	r2, r3
 8000552:	d101      	bne.n	8000558 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	e00b      	b.n	8000570 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800055e:	4619      	mov	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	78fa      	ldrb	r2, [r7, #3]
 8000564:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7bfa      	ldrb	r2, [r7, #15]
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800058a:	3301      	adds	r3, #1
 800058c:	425a      	negs	r2, r3
 800058e:	f003 031f 	and.w	r3, r3, #31
 8000592:	f002 021f 	and.w	r2, r2, #31
 8000596:	bf58      	it	pl
 8000598:	4253      	negpl	r3, r2
 800059a:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d101      	bne.n	80005b0 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 80005ac:	2301      	movs	r3, #1
 80005ae:	e00c      	b.n	80005ca <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	5c9a      	ldrb	r2, [r3, r2]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4611      	mov	r1, r2
 80005e0:	461a      	mov	r2, r3
 80005e2:	460b      	mov	r3, r1
 80005e4:	80fb      	strh	r3, [r7, #6]
 80005e6:	4613      	mov	r3, r2
 80005e8:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	88ba      	ldrh	r2, [r7, #4]
 80005fa:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	8b3a      	ldrh	r2, [r7, #24]
 8000600:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	8bba      	ldrh	r2, [r7, #28]
 8000606:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	891b      	ldrh	r3, [r3, #8]
 8000610:	4619      	mov	r1, r3
 8000612:	4610      	mov	r0, r2
 8000614:	f003 fe0e 	bl	8004234 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	895b      	ldrh	r3, [r3, #10]
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	f003 fe06 	bl	8004234 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	899b      	ldrh	r3, [r3, #12]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f003 fdfe 	bl	8004234 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	89db      	ldrh	r3, [r3, #14]
 8000640:	4619      	mov	r1, r3
 8000642:	4610      	mov	r0, r2
 8000644:	f003 fdf6 	bl	8004234 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d105      	bne.n	800065a <DRV8836_Init+0x86>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
 8000658:	e016      	b.n	8000688 <DRV8836_Init+0xb4>
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d105      	bne.n	800066c <DRV8836_Init+0x98>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	6393      	str	r3, [r2, #56]	; 0x38
 800066a:	e00d      	b.n	8000688 <DRV8836_Init+0xb4>
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	2b08      	cmp	r3, #8
 8000670:	d105      	bne.n	800067e <DRV8836_Init+0xaa>
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800067c:	e004      	b.n	8000688 <DRV8836_Init+0xb4>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d105      	bne.n	800069a <DRV8836_Init+0xc6>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
 8000698:	e016      	b.n	80006c8 <DRV8836_Init+0xf4>
 800069a:	88bb      	ldrh	r3, [r7, #4]
 800069c:	2b04      	cmp	r3, #4
 800069e:	d105      	bne.n	80006ac <DRV8836_Init+0xd8>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	6393      	str	r3, [r2, #56]	; 0x38
 80006aa:	e00d      	b.n	80006c8 <DRV8836_Init+0xf4>
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	2b08      	cmp	r3, #8
 80006b0:	d105      	bne.n	80006be <DRV8836_Init+0xea>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006bc:	e004      	b.n	80006c8 <DRV8836_Init+0xf4>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 80006c8:	8b3b      	ldrh	r3, [r7, #24]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d105      	bne.n	80006da <DRV8836_Init+0x106>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2200      	movs	r2, #0
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34
 80006d8:	e016      	b.n	8000708 <DRV8836_Init+0x134>
 80006da:	8b3b      	ldrh	r3, [r7, #24]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d105      	bne.n	80006ec <DRV8836_Init+0x118>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	6393      	str	r3, [r2, #56]	; 0x38
 80006ea:	e00d      	b.n	8000708 <DRV8836_Init+0x134>
 80006ec:	8b3b      	ldrh	r3, [r7, #24]
 80006ee:	2b08      	cmp	r3, #8
 80006f0:	d105      	bne.n	80006fe <DRV8836_Init+0x12a>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fc:	e004      	b.n	8000708 <DRV8836_Init+0x134>
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000708:	8bbb      	ldrh	r3, [r7, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d105      	bne.n	800071a <DRV8836_Init+0x146>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000718:	e016      	b.n	8000748 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800071a:	8bbb      	ldrh	r3, [r7, #28]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d105      	bne.n	800072c <DRV8836_Init+0x158>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	6393      	str	r3, [r2, #56]	; 0x38
}
 800072a:	e00d      	b.n	8000748 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800072c:	8bbb      	ldrh	r3, [r7, #28]
 800072e:	2b08      	cmp	r3, #8
 8000730:	d105      	bne.n	800073e <DRV8836_Init+0x16a>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800073c:	e004      	b.n	8000748 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <DRV8836_SetDirection>:

void DRV8836_SetDirection(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction)		//maybe this set of 2 function can be raplaced by: set speed, set direction, apply changes
{																										//also consider switch to gpio when coast and brake because of spikes
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
 800075c:	4613      	mov	r3, r2
 800075e:	70bb      	strb	r3, [r7, #2]
	DRV8836_Direction_t *TargetDirection;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;
	uint16_t TargetSpeed;

	if(Output_A == output)
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10c      	bne.n	8000780 <DRV8836_SetDirection+0x30>
	{
		TargetForwardChannel = ic->a_forward_channel;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	891b      	ldrh	r3, [r3, #8]
 800076a:	827b      	strh	r3, [r7, #18]
		TargetReverseChannel = ic->a_reverse_channel;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	895b      	ldrh	r3, [r3, #10]
 8000770:	823b      	strh	r3, [r7, #16]
		TargetSpeed = ic->a_speed;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	8a1b      	ldrh	r3, [r3, #16]
 8000776:	81fb      	strh	r3, [r7, #14]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3314      	adds	r3, #20
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	e00e      	b.n	800079e <DRV8836_SetDirection+0x4e>
	}
	else if(Output_B == output)
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10b      	bne.n	800079e <DRV8836_SetDirection+0x4e>
	{
		TargetForwardChannel = ic->b_forward_channel;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	899b      	ldrh	r3, [r3, #12]
 800078a:	827b      	strh	r3, [r7, #18]
		TargetReverseChannel = ic->b_reverse_channel;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	89db      	ldrh	r3, [r3, #14]
 8000790:	823b      	strh	r3, [r7, #16]
		TargetSpeed = ic->b_speed;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	8a5b      	ldrh	r3, [r3, #18]
 8000796:	81fb      	strh	r3, [r7, #14]
		TargetDirection = &(ic->b_direction);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3315      	adds	r3, #21
 800079c:	617b      	str	r3, [r7, #20]
	else
	{
		//error
	}

	switch(direction)
 800079e:	78bb      	ldrb	r3, [r7, #2]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	f200 811f 	bhi.w	80009e4 <DRV8836_SetDirection+0x294>
 80007a6:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <DRV8836_SetDirection+0x5c>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	080007bd 	.word	0x080007bd
 80007b0:	0800083f 	.word	0x0800083f
 80007b4:	080008c1 	.word	0x080008c1
 80007b8:	08000943 	.word	0x08000943
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 80007bc:	8a7b      	ldrh	r3, [r7, #18]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d105      	bne.n	80007ce <DRV8836_SetDirection+0x7e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
 80007cc:	e016      	b.n	80007fc <DRV8836_SetDirection+0xac>
 80007ce:	8a7b      	ldrh	r3, [r7, #18]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d105      	bne.n	80007e0 <DRV8836_SetDirection+0x90>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	6393      	str	r3, [r2, #56]	; 0x38
 80007de:	e00d      	b.n	80007fc <DRV8836_SetDirection+0xac>
 80007e0:	8a7b      	ldrh	r3, [r7, #18]
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	d105      	bne.n	80007f2 <DRV8836_SetDirection+0xa2>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007f0:	e004      	b.n	80007fc <DRV8836_SetDirection+0xac>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80007fc:	8a3b      	ldrh	r3, [r7, #16]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d105      	bne.n	800080e <DRV8836_SetDirection+0xbe>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800080c:	e0eb      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800080e:	8a3b      	ldrh	r3, [r7, #16]
 8000810:	2b04      	cmp	r3, #4
 8000812:	d105      	bne.n	8000820 <DRV8836_SetDirection+0xd0>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800081e:	e0e2      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000820:	8a3b      	ldrh	r3, [r7, #16]
 8000822:	2b08      	cmp	r3, #8
 8000824:	d105      	bne.n	8000832 <DRV8836_SetDirection+0xe2>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2300      	movs	r3, #0
 800082e:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000830:	e0d9      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800083c:	e0d3      	b.n	80009e6 <DRV8836_SetDirection+0x296>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 800083e:	8a7b      	ldrh	r3, [r7, #18]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d105      	bne.n	8000850 <DRV8836_SetDirection+0x100>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	e016      	b.n	800087e <DRV8836_SetDirection+0x12e>
 8000850:	8a7b      	ldrh	r3, [r7, #18]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d105      	bne.n	8000862 <DRV8836_SetDirection+0x112>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	6393      	str	r3, [r2, #56]	; 0x38
 8000860:	e00d      	b.n	800087e <DRV8836_SetDirection+0x12e>
 8000862:	8a7b      	ldrh	r3, [r7, #18]
 8000864:	2b08      	cmp	r3, #8
 8000866:	d105      	bne.n	8000874 <DRV8836_SetDirection+0x124>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000872:	e004      	b.n	800087e <DRV8836_SetDirection+0x12e>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	2300      	movs	r3, #0
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 800087e:	8a3b      	ldrh	r3, [r7, #16]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <DRV8836_SetDirection+0x140>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	89fa      	ldrh	r2, [r7, #14]
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800088e:	e0aa      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 8000890:	8a3b      	ldrh	r3, [r7, #16]
 8000892:	2b04      	cmp	r3, #4
 8000894:	d105      	bne.n	80008a2 <DRV8836_SetDirection+0x152>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80008a0:	e0a1      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 80008a2:	8a3b      	ldrh	r3, [r7, #16]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d105      	bne.n	80008b4 <DRV8836_SetDirection+0x164>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80008b2:	e098      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80008be:	e092      	b.n	80009e6 <DRV8836_SetDirection+0x296>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, TargetSpeed);
 80008c0:	8a7b      	ldrh	r3, [r7, #18]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d105      	bne.n	80008d2 <DRV8836_SetDirection+0x182>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	89fa      	ldrh	r2, [r7, #14]
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
 80008d0:	e016      	b.n	8000900 <DRV8836_SetDirection+0x1b0>
 80008d2:	8a7b      	ldrh	r3, [r7, #18]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d105      	bne.n	80008e4 <DRV8836_SetDirection+0x194>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	89fb      	ldrh	r3, [r7, #14]
 80008e0:	6393      	str	r3, [r2, #56]	; 0x38
 80008e2:	e00d      	b.n	8000900 <DRV8836_SetDirection+0x1b0>
 80008e4:	8a7b      	ldrh	r3, [r7, #18]
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	d105      	bne.n	80008f6 <DRV8836_SetDirection+0x1a6>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	89fb      	ldrh	r3, [r7, #14]
 80008f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008f4:	e004      	b.n	8000900 <DRV8836_SetDirection+0x1b0>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000900:	8a3b      	ldrh	r3, [r7, #16]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <DRV8836_SetDirection+0x1c2>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000910:	e069      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000912:	8a3b      	ldrh	r3, [r7, #16]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d105      	bne.n	8000924 <DRV8836_SetDirection+0x1d4>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000922:	e060      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000924:	8a3b      	ldrh	r3, [r7, #16]
 8000926:	2b08      	cmp	r3, #8
 8000928:	d105      	bne.n	8000936 <DRV8836_SetDirection+0x1e6>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	2300      	movs	r3, #0
 8000932:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000934:	e057      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000940:	e051      	b.n	80009e6 <DRV8836_SetDirection+0x296>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8000942:	8a7b      	ldrh	r3, [r7, #18]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d107      	bne.n	8000958 <DRV8836_SetDirection+0x208>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68d2      	ldr	r2, [r2, #12]
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
 8000956:	e01c      	b.n	8000992 <DRV8836_SetDirection+0x242>
 8000958:	8a7b      	ldrh	r3, [r7, #18]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d107      	bne.n	800096e <DRV8836_SetDirection+0x21e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6852      	ldr	r2, [r2, #4]
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	6393      	str	r3, [r2, #56]	; 0x38
 800096c:	e011      	b.n	8000992 <DRV8836_SetDirection+0x242>
 800096e:	8a7b      	ldrh	r3, [r7, #18]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d107      	bne.n	8000984 <DRV8836_SetDirection+0x234>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6852      	ldr	r2, [r2, #4]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000982:	e006      	b.n	8000992 <DRV8836_SetDirection+0x242>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	6852      	ldr	r2, [r2, #4]
 800098c:	6812      	ldr	r2, [r2, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8000992:	8a3b      	ldrh	r3, [r7, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d107      	bne.n	80009a8 <DRV8836_SetDirection+0x258>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68d2      	ldr	r2, [r2, #12]
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80009a6:	e01e      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80009a8:	8a3b      	ldrh	r3, [r7, #16]
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d107      	bne.n	80009be <DRV8836_SetDirection+0x26e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	6852      	ldr	r2, [r2, #4]
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80009bc:	e013      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80009be:	8a3b      	ldrh	r3, [r7, #16]
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d107      	bne.n	80009d4 <DRV8836_SetDirection+0x284>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6852      	ldr	r2, [r2, #4]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80009d2:	e008      	b.n	80009e6 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	6852      	ldr	r2, [r2, #4]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80009e2:	e000      	b.n	80009e6 <DRV8836_SetDirection+0x296>

	default:
		break;
 80009e4:	bf00      	nop
	}

	*TargetDirection = direction;	//save set direction
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	78ba      	ldrb	r2, [r7, #2]
 80009ea:	701a      	strb	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <DRV8836_SetSpeed>:

void DRV8836_SetSpeed(DRV8836_t *ic, DRV8836_Output_t output, uint16_t speed)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
 8000a04:	4613      	mov	r3, r2
 8000a06:	803b      	strh	r3, [r7, #0]
	if(speed > ic->drv_htim->Init.Period)
 8000a08:	883a      	ldrh	r2, [r7, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d909      	bls.n	8000a28 <DRV8836_SetSpeed+0x30>
	{
		//error
		ic->a_speed = speed;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	883a      	ldrh	r2, [r7, #0]
 8000a18:	821a      	strh	r2, [r3, #16]
				DRV8836_SetDirection(ic, output, ic->a_direction);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7d1a      	ldrb	r2, [r3, #20]
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fe94 	bl	8000750 <DRV8836_SetDirection>
	}

	if(Output_A == output)
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10a      	bne.n	8000a44 <DRV8836_SetSpeed+0x4c>
	{
		ic->a_speed = speed;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	883a      	ldrh	r2, [r7, #0]
 8000a32:	821a      	strh	r2, [r3, #16]
		DRV8836_SetDirection(ic, output, ic->a_direction);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7d1a      	ldrb	r2, [r3, #20]
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe87 	bl	8000750 <DRV8836_SetDirection>
	else
	{

	}

}
 8000a42:	e00c      	b.n	8000a5e <DRV8836_SetSpeed+0x66>
	else if(Output_B == output)
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d109      	bne.n	8000a5e <DRV8836_SetSpeed+0x66>
		ic->b_speed = speed;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	883a      	ldrh	r2, [r7, #0]
 8000a4e:	825a      	strh	r2, [r3, #18]
		DRV8836_SetDirection(ic, output, ic->b_direction);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7d5a      	ldrb	r2, [r3, #21]
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fe79 	bl	8000750 <DRV8836_SetDirection>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7c:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a42      	ldr	r2, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a3c      	ldr	r2, [pc, #240]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0308 	and.w	r3, r3, #8
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f246 0103 	movw	r1, #24579	; 0x6003
 8000ae2:	4837      	ldr	r0, [pc, #220]	; (8000bc0 <MX_GPIO_Init+0x158>)
 8000ae4:	f001 fed0 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2104      	movs	r1, #4
 8000aec:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000aee:	f001 fecb 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	4834      	ldr	r0, [pc, #208]	; (8000bc8 <MX_GPIO_Init+0x160>)
 8000af8:	f001 fec6 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8000afc:	f246 0302 	movw	r3, #24578	; 0x6002
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0x158>)
 8000b16:	f001 fd33 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x158>)
 8000b32:	f001 fd25 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4820      	ldr	r0, [pc, #128]	; (8000bcc <MX_GPIO_Init+0x164>)
 8000b4c:	f001 fd18 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_GPIO_Init+0x168>)
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4619      	mov	r1, r3
 8000b64:	4819      	ldr	r0, [pc, #100]	; (8000bcc <MX_GPIO_Init+0x164>)
 8000b66:	f001 fd0b 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000b82:	f001 fcfd 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000b86:	2310      	movs	r3, #16
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <MX_GPIO_Init+0x160>)
 8000b9e:	f001 fcef 	bl	8002580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f001 fcb3 	bl	8002512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bac:	2028      	movs	r0, #40	; 0x28
 8000bae:	f001 fccc 	bl	800254a <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40011400 	.word	0x40011400
 8000bc8:	40010c00 	.word	0x40010c00
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	10210000 	.word	0x10210000

08000bd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f001 fe69 	bl	80028e8 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fb35 	bl	800128a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000028 	.word	0x20000028
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	00061a80 	.word	0x00061a80

08000c30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_I2C_MspInit+0x90>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d132      	bne.n	8000cb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_I2C_MspInit+0x94>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <HAL_I2C_MspInit+0x94>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_I2C_MspInit+0x94>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <HAL_I2C_MspInit+0x98>)
 8000c7e:	f001 fc7f 	bl	8002580 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_I2C_MspInit+0x9c>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <HAL_I2C_MspInit+0x9c>)
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_I2C_MspInit+0x94>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0x94>)
 8000ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_I2C_MspInit+0x94>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <Parser_Klebot>:

#include "klebot_parser.h"


void Parser_Klebot(uint8_t *command, uint8_t length)							//main parser funciton
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
	uint8_t Length = length;
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	72fb      	strb	r3, [r7, #11]



	switch(*CurrentByte)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2ba1      	cmp	r3, #161	; 0xa1
 8000cea:	d10b      	bne.n	8000d04 <Parser_Klebot+0x34>
	{
	case FREERIDE_PROG:
		CurrentByte++;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
		Length--;
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	72fb      	strb	r3, [r7, #11]
		FreeRide_Parser(CurrentByte, Length);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 f855 	bl	8000dac <FreeRide_Parser>
		break;
 8000d02:	e000      	b.n	8000d06 <Parser_Klebot+0x36>

	default:

		break;
 8000d04:	bf00      	nop
	}


}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <Programs_SetProgram>:
//
// --------------------- General functions to manage programs ---------------------
//

void Programs_SetProgram(uint8_t (*Program)(void))
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	ProgramToPerform = Program;
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <Programs_SetProgram+0x18>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000094 	.word	0x20000094

08000d2c <Programs_ClearProgram>:
{
	return ProgramToPerform;
}

void Programs_ClearProgram(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	ProgramToPerform = NULL;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <Programs_ClearProgram+0x14>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000094 	.word	0x20000094

08000d44 <Programs_PerformProgram>:

Programs_status_t Programs_PerformProgram(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	Programs_status_t status;
	if(NULL != ProgramToPerform)		//if there is a program to perform
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <Programs_PerformProgram+0x28>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <Programs_PerformProgram+0x1a>
	{
		status = ProgramToPerform();	//perform it and return it's status
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <Programs_PerformProgram+0x28>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4798      	blx	r3
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	e001      	b.n	8000d62 <Programs_PerformProgram+0x1e>
	}
	else
	{
		status = NO_PROGRAM_SET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000094 	.word	0x20000094

08000d70 <FreeRide>:

//
// --- Free Ride Program ---
//
Programs_status_t FreeRide (void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af02      	add	r7, sp, #8
	static uint8_t StartupInitFlag = 0;
	if(0 == StartupInitFlag)
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <FreeRide+0x30>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10c      	bne.n	8000d98 <FreeRide+0x28>
	{
		DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000d7e:	230c      	movs	r3, #12
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	2308      	movs	r3, #8
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2304      	movs	r3, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4906      	ldr	r1, [pc, #24]	; (8000da4 <FreeRide+0x34>)
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <FreeRide+0x38>)
 8000d8e:	f7ff fc21 	bl	80005d4 <DRV8836_Init>
		StartupInitFlag = 1;
 8000d92:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <FreeRide+0x30>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
	}
	return PROGRAM_IN_PROGESS;
 8000d98:	2302      	movs	r3, #2
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000098 	.word	0x20000098
 8000da4:	20000198 	.word	0x20000198
 8000da8:	2000007c 	.word	0x2000007c

08000dac <FreeRide_Parser>:

void FreeRide_Parser(uint8_t *command, uint8_t length)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
	//uint8_t Length = length;

	switch(*CurrentByte)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3b10      	subs	r3, #16
 8000dc2:	2b13      	cmp	r3, #19
 8000dc4:	d85c      	bhi.n	8000e80 <FreeRide_Parser+0xd4>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <FreeRide_Parser+0x20>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000e1d 	.word	0x08000e1d
 8000dd0:	08000e81 	.word	0x08000e81
 8000dd4:	08000e81 	.word	0x08000e81
 8000dd8:	08000e81 	.word	0x08000e81
 8000ddc:	08000e81 	.word	0x08000e81
 8000de0:	08000e81 	.word	0x08000e81
 8000de4:	08000e81 	.word	0x08000e81
 8000de8:	08000e81 	.word	0x08000e81
 8000dec:	08000e81 	.word	0x08000e81
 8000df0:	08000e81 	.word	0x08000e81
 8000df4:	08000e81 	.word	0x08000e81
 8000df8:	08000e81 	.word	0x08000e81
 8000dfc:	08000e81 	.word	0x08000e81
 8000e00:	08000e81 	.word	0x08000e81
 8000e04:	08000e81 	.word	0x08000e81
 8000e08:	08000e81 	.word	0x08000e81
 8000e0c:	08000e25 	.word	0x08000e25
 8000e10:	08000e3d 	.word	0x08000e3d
 8000e14:	08000e55 	.word	0x08000e55
 8000e18:	08000e6b 	.word	0x08000e6b
	{
	case START_PROGRAM:
		Programs_SetProgram(FreeRide);
 8000e1c:	481b      	ldr	r0, [pc, #108]	; (8000e8c <FreeRide_Parser+0xe0>)
 8000e1e:	f7ff ff77 	bl	8000d10 <Programs_SetProgram>
		break;
 8000e22:	e02e      	b.n	8000e82 <FreeRide_Parser+0xd6>
	case EXIT_PROGRAM:

		break;
	case LEFT_MOTOR_SPEED:
		CurrentByte++;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
		DRV8836_SetSpeed(&MotorDriver, Output_A, *CurrentByte);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	4816      	ldr	r0, [pc, #88]	; (8000e90 <FreeRide_Parser+0xe4>)
 8000e36:	f7ff fddf 	bl	80009f8 <DRV8836_SetSpeed>
		break;
 8000e3a:	e022      	b.n	8000e82 <FreeRide_Parser+0xd6>

	case RIGHT_MOTOR_SPEED:
		CurrentByte++;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
		DRV8836_SetSpeed(&MotorDriver, Output_B, *CurrentByte);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <FreeRide_Parser+0xe4>)
 8000e4e:	f7ff fdd3 	bl	80009f8 <DRV8836_SetSpeed>
		break;
 8000e52:	e016      	b.n	8000e82 <FreeRide_Parser+0xd6>

	case LEFT_MOTOR_DIRECTION:
		CurrentByte++;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
		DRV8836_SetDirection(&MotorDriver, Output_A, *CurrentByte);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <FreeRide_Parser+0xe4>)
 8000e64:	f7ff fc74 	bl	8000750 <DRV8836_SetDirection>
		break;
 8000e68:	e00b      	b.n	8000e82 <FreeRide_Parser+0xd6>

	case RIGHT_MOTOR_DIRECTION:
		CurrentByte++;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
		DRV8836_SetDirection(&MotorDriver, Output_B, *CurrentByte);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	2101      	movs	r1, #1
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <FreeRide_Parser+0xe4>)
 8000e7a:	f7ff fc69 	bl	8000750 <DRV8836_SetDirection>
		break;
 8000e7e:	e000      	b.n	8000e82 <FreeRide_Parser+0xd6>

	default:
		break;
 8000e80:	bf00      	nop
	}



}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08000d71 	.word	0x08000d71
 8000e90:	2000007c 	.word	0x2000007c

08000e94 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fe1d 	bl	8001adc <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8000ea2:	4906      	ldr	r1, [pc, #24]	; (8000ebc <Radio_Init+0x28>)
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fc86 	bl	80017b6 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <Radio_Init+0x2c>)
 8000eac:	f000 fcbc 	bl	8001828 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8000eb0:	f000 fac0 	bl	8001434 <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08004e78 	.word	0x08004e78
 8000ec0:	08004e7c 	.word	0x08004e7c

08000ec4 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	e010      	b.n	8000efc <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <Radio_RxBufferPut+0x4c>)
 8000ee2:	f7ff fb1f 	bl	8000524 <RBuffer_Write>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	7bba      	ldrb	r2, [r7, #14]
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3ea      	bcc.n	8000eda <Radio_RxBufferPut+0x16>
	}
	return Status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000c0 	.word	0x200000c0

08000f14 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8000f26:	f107 030d 	add.w	r3, r7, #13
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <Radio_RxBufferGet+0x6c>)
 8000f2e:	f7ff fb24 	bl	800057a <RBuffer_Read>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8000f3c:	e012      	b.n	8000f64 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;				//write received byte to destination
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	7b7a      	ldrb	r2, [r7, #13]
 8000f46:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 8000f4e:	f107 030d 	add.w	r3, r7, #13
 8000f52:	4619      	mov	r1, r3
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <Radio_RxBufferGet+0x6c>)
 8000f56:	f7ff fb10 	bl	800057a <RBuffer_Read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d002      	beq.n	8000f70 <Radio_RxBufferGet+0x5c>
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0e6      	beq.n	8000f3e <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	701a      	strb	r2, [r3, #0]
	return Status;
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000c0 	.word	0x200000c0

08000f84 <Radio_TxBufferSend>:
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
	return Status;
}

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8000f96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4816      	ldr	r0, [pc, #88]	; (8000ffc <Radio_TxBufferSend+0x78>)
 8000fa2:	f7ff faea 	bl	800057a <RBuffer_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8000fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	443b      	add	r3, r7
 8000fc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d003      	beq.n	8000fd2 <Radio_TxBufferSend+0x4e>
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0e1      	beq.n	8000f96 <Radio_TxBufferSend+0x12>
		TxStatus = RADIO_BUSY;
	}
#endif

#ifdef ROBOT
	if(Status == RADIO_OK)
 8000fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <Radio_TxBufferSend+0x6a>
	{
		nRF24_WriteAckPayload(0, DataToSend, Length);
 8000fda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fde2 	bl	8001bac <nRF24_WriteAckPayload>
		TxStatus = RADIO_BUSY;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <Radio_TxBufferSend+0x7c>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	701a      	strb	r2, [r3, #0]
	}
#endif

	return Status;
 8000fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000009c 	.word	0x2000009c
 8001000:	2000009a 	.word	0x2000009a

08001004 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 800100a:	f000 fd3f 	bl	8001a8c <nRF24_Event>
	}
#endif

#ifdef ROBOT

	if(TxStatus == RADIO_OK)	//If Tx is free, send response
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <Radio_Process+0x64>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <Radio_Process+0x16>
	{
		Radio_TxBufferSend();	//send ack payload
 8001016:	f7ff ffb5 	bl	8000f84 <Radio_TxBufferSend>
	}

	if((HAL_GetTick() - ConnectionTimeoutCounter) > (3 * PACKET_SEND_DELAY) )	//check when last message came to know if connection isnt dead
 800101a:	f001 f975 	bl	8002308 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <Radio_Process+0x68>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b96      	cmp	r3, #150	; 0x96
 8001028:	d904      	bls.n	8001034 <Radio_Process+0x30>
	{
		ConnectionStatus = RADIO_ERROR;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <Radio_Process+0x6c>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
		Radio_NoConnectionCallback();
 8001030:	f000 f828 	bl	8001084 <Radio_NoConnectionCallback>
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <Radio_Process+0x70>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d110      	bne.n	800105e <Radio_Process+0x5a>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 800103c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff65 	bl	8000f14 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 800104a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f87e 	bl	8001154 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <Radio_Process+0x70>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
	}
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000009a 	.word	0x2000009a
 800106c:	200000e4 	.word	0x200000e4
 8001070:	20000099 	.word	0x20000099
 8001074:	2000009b 	.word	0x2000009b

08001078 <Radio_HandlerIRQ>:

//
//Klebot radio callbacks to use
//
void Radio_HandlerIRQ(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Handler();
 800107c:	f000 fcb4 	bl	80019e8 <nRF24_IRQ_Handler>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <Radio_NoConnectionCallback>:

__weak void Radio_NoConnectionCallback(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <nRF24_EventTxCallback+0x18>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <nRF24_EventTxCallback+0x1c>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	2000009a 	.word	0x2000009a
 80010ac:	20000099 	.word	0x20000099

080010b0 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 80010b6:	1dfa      	adds	r2, r7, #7
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fc7b 	bl	80019ba <nRF24_ReadRXPaylaod>

#ifdef ROBOT
	ConnectionStatus = RADIO_OK;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <nRF24_EventRxCallback+0x48>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
 80010ca:	f001 f91d 	bl	8002308 <HAL_GetTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <nRF24_EventRxCallback+0x4c>)
 80010d2:	6013      	str	r3, [r2, #0]
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 80010d4:	7a3b      	ldrb	r3, [r7, #8]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d00a      	beq.n	80010f0 <nRF24_EventRxCallback+0x40>
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff feee 	bl	8000ec4 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <nRF24_EventRxCallback+0x50>)
 80010ea:	2203      	movs	r2, #3
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e000      	b.n	80010f2 <nRF24_EventRxCallback+0x42>
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 80010f0:	bf00      	nop
}
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000099 	.word	0x20000099
 80010fc:	200000e4 	.word	0x200000e4
 8001100:	2000009b 	.word	0x2000009b

08001104 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <nRF24_EventMrCallback+0x14>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000099 	.word	0x20000099

0800111c <KlebotScheduler>:
#include "klebot_scheduler.h"

uint8_t CommandSource = RADIO_DATA_SOURCE;

void KlebotScheduler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	Radio_Process();
 8001122:	f7ff ff6f 	bl	8001004 <Radio_Process>

	if(0 == StartupInitFlag)
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <KlebotScheduler+0x34>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <KlebotScheduler+0x18>
	{
		//startup things
		StartupInitFlag = 1;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <KlebotScheduler+0x34>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
	}

	SubProgramStatus = Programs_PerformProgram();
 8001134:	f7ff fe06 	bl	8000d44 <Programs_PerformProgram>
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <KlebotScheduler+0x2a>
	{
		Programs_ClearProgram();
 8001142:	f7ff fdf3 	bl	8000d2c <Programs_ClearProgram>

	//app pointer



}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000e9 	.word	0x200000e9

08001154 <Radio_NewCommandReceivedCallback>:




void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	if(RADIO_DATA_SOURCE == CommandSource)
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <Radio_NewCommandReceivedCallback+0x28>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <Radio_NewCommandReceivedCallback+0x1e>
	{
		Parser_Klebot(command, length);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fdaf 	bl	8000cd0 <Parser_Klebot>
	}
	else
	{

	}
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000e8 	.word	0x200000e8

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f001 f868 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f822 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f7ff fc6c 	bl	8000a68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001190:	f7ff fd20 	bl	8000bd4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001194:	f000 fd2a 	bl	8001bec <MX_SPI3_Init>
  MX_TIM1_Init();
 8001198:	f000 fe22 	bl	8001de0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800119c:	f000 fe78 	bl	8001e90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011a0:	f000 ff0c 	bl	8001fbc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <main+0x48>)
 80011ac:	f001 fb6c 	bl	8002888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <main+0x48>)
 80011b8:	f001 fb66 	bl	8002888 <HAL_GPIO_WritePin>



  Radio_Init(&hspi3);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <main+0x4c>)
 80011be:	f7ff fe69 	bl	8000e94 <Radio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KlebotScheduler();
 80011c2:	f7ff ffab 	bl	800111c <KlebotScheduler>
 80011c6:	e7fc      	b.n	80011c2 <main+0x42>
 80011c8:	40011000 	.word	0x40011000
 80011cc:	200000f8 	.word	0x200000f8

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	2238      	movs	r2, #56	; 0x38
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fe12 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80011fc:	2301      	movs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001210:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fca5 	bl	8002b70 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800122c:	f000 f82d 	bl	800128a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2102      	movs	r1, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 ffa6 	bl	800319c <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001256:	f000 f818 	bl	800128a <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <SystemClock_Config+0x98>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	3750      	adds	r7, #80	; 0x50
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	42420070 	.word	0x42420070

0800126c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 800127e:	f7ff fefb 	bl	8001078 <Radio_HandlerIRQ>
	}
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128e:	b672      	cpsid	i
}
 8001290:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001292:	e7fe      	b.n	8001292 <Error_Handler+0x8>

08001294 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 f83b 	bl	800231c <HAL_Delay>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <nRF24_SendSpi+0x28>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	f002 fa07 	bl	80036dc <HAL_SPI_Transmit>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000ec 	.word	0x200000ec

080012dc <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <nRF24_ReadSpi+0x28>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	f002 fb34 	bl	8003962 <HAL_SPI_Receive>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000ec 	.word	0x200000ec

08001308 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001316:	2200      	movs	r2, #0
 8001318:	2104      	movs	r1, #4
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <nRF24_ReadRegister+0x44>)
 800131c:	f001 fab4 	bl	8002888 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	2101      	movs	r1, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffc3 	bl	80012b0 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800132a:	f107 030f 	add.w	r3, r7, #15
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ffd3 	bl	80012dc <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001336:	2201      	movs	r2, #1
 8001338:	2104      	movs	r1, #4
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <nRF24_ReadRegister+0x44>)
 800133c:	f001 faa4 	bl	8002888 <HAL_GPIO_WritePin>

	return result;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40011400 	.word	0x40011400

08001350 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001364:	2200      	movs	r2, #0
 8001366:	2104      	movs	r1, #4
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <nRF24_ReadRegisters+0x44>)
 800136a:	f001 fa8d 	bl	8002888 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	2101      	movs	r1, #1
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff9c 	bl	80012b0 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	4619      	mov	r1, r3
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f7ff ffad 	bl	80012dc <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001382:	2201      	movs	r2, #1
 8001384:	2104      	movs	r1, #4
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <nRF24_ReadRegisters+0x44>)
 8001388:	f001 fa7e 	bl	8002888 <HAL_GPIO_WritePin>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40011400 	.word	0x40011400

08001398 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80013b6:	2200      	movs	r2, #0
 80013b8:	2104      	movs	r1, #4
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <nRF24_WriteRegister+0x48>)
 80013bc:	f001 fa64 	bl	8002888 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2102      	movs	r1, #2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff72 	bl	80012b0 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80013cc:	2201      	movs	r2, #1
 80013ce:	2104      	movs	r1, #4
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <nRF24_WriteRegister+0x48>)
 80013d2:	f001 fa59 	bl	8002888 <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40011400 	.word	0x40011400

080013e4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80013fe:	2200      	movs	r2, #0
 8001400:	2104      	movs	r1, #4
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <nRF24_WriteRegisters+0x4c>)
 8001404:	f001 fa40 	bl	8002888 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff4f 	bl	80012b0 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	4619      	mov	r1, r3
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7ff ff4a 	bl	80012b0 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 800141c:	2201      	movs	r2, #1
 800141e:	2104      	movs	r1, #4
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <nRF24_WriteRegisters+0x4c>)
 8001422:	f001 fa31 	bl	8002888 <HAL_GPIO_WritePin>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40011400 	.word	0x40011400

08001434 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 800143a:	f000 f829 	bl	8001490 <nRF24_ReadConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001442:	4911      	ldr	r1, [pc, #68]	; (8001488 <nRF24_RX_Mode+0x54>)
 8001444:	2000      	movs	r0, #0
 8001446:	f000 f9b6 	bl	80017b6 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f81f 	bl	80014a0 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001462:	2070      	movs	r0, #112	; 0x70
 8001464:	f000 f877 	bl	8001556 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001468:	f000 f884 	bl	8001574 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800146c:	f000 f89c 	bl	80015a8 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001470:	2201      	movs	r2, #1
 8001472:	2110      	movs	r1, #16
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <nRF24_RX_Mode+0x58>)
 8001476:	f001 fa07 	bl	8002888 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff ff0a 	bl	8001294 <nRF24_Delay_ms>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000f0 	.word	0x200000f0
 800148c:	40010c00 	.word	0x40010c00

08001490 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ff37 	bl	8001308 <nRF24_ReadRegister>
 800149a:	4603      	mov	r3, r0
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}

080014a0 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4619      	mov	r1, r3
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff72 	bl	8001398 <nRF24_WriteRegister>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff ff1e 	bl	8001308 <nRF24_ReadRegister>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f023 0307 	bic.w	r3, r3, #7
 80014d6:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	4619      	mov	r1, r3
 80014ec:	2006      	movs	r0, #6
 80014ee:	f7ff ff53 	bl	8001398 <nRF24_WriteRegister>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001504:	2006      	movs	r0, #6
 8001506:	f7ff feff 	bl	8001308 <nRF24_ReadRegister>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001514:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d104      	bne.n	8001526 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	f043 0320 	orr.w	r3, r3, #32
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e006      	b.n	8001534 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d103      	bne.n	8001534 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4619      	mov	r1, r3
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff ff2d 	bl	8001398 <nRF24_WriteRegister>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800154a:	2007      	movs	r0, #7
 800154c:	f7ff fedc 	bl	8001308 <nRF24_ReadRegister>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}

08001556 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4619      	mov	r1, r3
 8001564:	2007      	movs	r0, #7
 8001566:	f7ff ff17 	bl	8001398 <nRF24_WriteRegister>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800157a:	23e2      	movs	r3, #226	; 0xe2
 800157c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800157e:	2200      	movs	r2, #0
 8001580:	2104      	movs	r1, #4
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <nRF24_FlushRX+0x30>)
 8001584:	f001 f980 	bl	8002888 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe8f 	bl	80012b0 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001592:	2201      	movs	r2, #1
 8001594:	2104      	movs	r1, #4
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <nRF24_FlushRX+0x30>)
 8001598:	f001 f976 	bl	8002888 <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40011400 	.word	0x40011400

080015a8 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80015ae:	23e1      	movs	r3, #225	; 0xe1
 80015b0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80015b2:	2200      	movs	r2, #0
 80015b4:	2104      	movs	r1, #4
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <nRF24_FlushTX+0x30>)
 80015b8:	f001 f966 	bl	8002888 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe75 	bl	80012b0 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <nRF24_FlushTX+0x30>)
 80015cc:	f001 f95c 	bl	8002888 <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40011400 	.word	0x40011400

080015dc <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80015e6:	f7ff ff53 	bl	8001490 <nRF24_ReadConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e003      	b.n	8001606 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f023 0308 	bic.w	r3, r3, #8
 8001604:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff49 	bl	80014a0 <nRF24_WriteConfig>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001620:	f7ff ff36 	bl	8001490 <nRF24_ReadConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d104      	bne.n	8001638 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e003      	b.n	8001640 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff2c 	bl	80014a0 <nRF24_WriteConfig>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	b25a      	sxtb	r2, r3
 8001666:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4619      	mov	r1, r3
 8001678:	2004      	movs	r0, #4
 800167a:	f7ff fe8d 	bl	8001398 <nRF24_WriteRegister>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4619      	mov	r1, r3
 800169a:	2005      	movs	r0, #5
 800169c:	f7ff fe7c 	bl	8001398 <nRF24_WriteRegister>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	460a      	mov	r2, r1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d901      	bls.n	80016c2 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80016be:	2305      	movs	r3, #5
 80016c0:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7ff fe20 	bl	8001308 <nRF24_ReadRegister>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10a      	bne.n	80016e8 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2201      	movs	r2, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e00b      	b.n	8001700 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2201      	movs	r2, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4013      	ands	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	4619      	mov	r1, r3
 8001704:	2002      	movs	r0, #2
 8001706:	f7ff fe47 	bl	8001398 <nRF24_WriteRegister>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	460a      	mov	r2, r1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	4613      	mov	r3, r2
 8001720:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d901      	bls.n	800172c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001728:	2305      	movs	r3, #5
 800172a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fdeb 	bl	8001308 <nRF24_ReadRegister>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10a      	bne.n	8001752 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2201      	movs	r2, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	b25a      	sxtb	r2, r3
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4313      	orrs	r3, r2
 800174c:	b25b      	sxtb	r3, r3
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e00b      	b.n	800176a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	b25b      	sxtb	r3, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	b25a      	sxtb	r2, r3
 8001760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001764:	4013      	ands	r3, r2
 8001766:	b25b      	sxtb	r3, r3
 8001768:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	4619      	mov	r1, r3
 800176e:	2001      	movs	r0, #1
 8001770:	f7ff fe12 	bl	8001398 <nRF24_WriteRegister>
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d901      	bls.n	8001790 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 800178c:	2305      	movs	r3, #5
 800178e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d801      	bhi.n	800179a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001796:	2303      	movs	r3, #3
 8001798:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3b02      	subs	r3, #2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	2003      	movs	r0, #3
 80017aa:	f7ff fdf5 	bl	8001398 <nRF24_WriteRegister>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	6039      	str	r1, [r7, #0]
 80017c0:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <nRF24_SetRXAddress+0x18>
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d11d      	bne.n	800180a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e00d      	b.n	80017f0 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	441a      	add	r2, r3
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f1c3 0302 	rsb	r3, r3, #2
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	3310      	adds	r3, #16
 80017e4:	443b      	add	r3, r7
 80017e6:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	3301      	adds	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d9ee      	bls.n	80017d4 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	330a      	adds	r3, #10
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f107 010c 	add.w	r1, r7, #12
 8001800:	2203      	movs	r2, #3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fdee 	bl	80013e4 <nRF24_WriteRegisters>
	{
 8001808:	e00a      	b.n	8001820 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	330a      	adds	r3, #10
 800180e:	b2da      	uxtb	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3302      	adds	r3, #2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f7ff fdbd 	bl	8001398 <nRF24_WriteRegister>
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2203      	movs	r2, #3
 8001836:	4619      	mov	r1, r3
 8001838:	200a      	movs	r0, #10
 800183a:	f7ff fd89 	bl	8001350 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e00c      	b.n	800185e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	f1c3 0302 	rsb	r3, r3, #2
 800184c:	3210      	adds	r2, #16
 800184e:	443a      	add	r2, r7
 8001850:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <nRF24_SetTXAddress+0x88>)
 8001856:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	3301      	adds	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d9ef      	bls.n	8001844 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e00d      	b.n	8001886 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	441a      	add	r2, r3
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	f1c3 0302 	rsb	r3, r3, #2
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	3310      	adds	r3, #16
 800187a:	443b      	add	r3, r7
 800187c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d9ee      	bls.n	800186a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2203      	movs	r2, #3
 8001892:	4619      	mov	r1, r3
 8001894:	200a      	movs	r0, #10
 8001896:	f7ff fda5 	bl	80013e4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2203      	movs	r2, #3
 80018a0:	4619      	mov	r1, r3
 80018a2:	2010      	movs	r0, #16
 80018a4:	f7ff fd9e 	bl	80013e4 <nRF24_WriteRegisters>

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200000f0 	.word	0x200000f0

080018b4 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80018ba:	f7ff fe44 	bl	8001546 <nRF24_ReadStatus>
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80018c8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe42 	bl	8001556 <nRF24_WriteStatus>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80018e4:	2060      	movs	r0, #96	; 0x60
 80018e6:	f7ff fd0f 	bl	8001308 <nRF24_ReadRegister>
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d906      	bls.n	8001902 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 80018f4:	f7ff fe3e 	bl	8001574 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80018f8:	2002      	movs	r0, #2
 80018fa:	f7ff fccb 	bl	8001294 <nRF24_Delay_ms>
        return 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8001902:	79fb      	ldrb	r3, [r7, #7]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001916:	f7ff fdbb 	bl	8001490 <nRF24_ReadConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e003      	b.n	8001936 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001934:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fdb1 	bl	80014a0 <nRF24_WriteConfig>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001950:	f7ff fd9e 	bl	8001490 <nRF24_ReadConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d104      	bne.n	8001968 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e003      	b.n	8001970 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f023 0320 	bic.w	r3, r3, #32
 800196e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fd94 	bl	80014a0 <nRF24_WriteConfig>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800198a:	f7ff fd81 	bl	8001490 <nRF24_ReadConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d104      	bne.n	80019a2 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e003      	b.n	80019aa <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	f023 0310 	bic.w	r3, r3, #16
 80019a8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fd77 	bl	80014a0 <nRF24_WriteConfig>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 80019c4:	f7ff ff89 	bl	80018da <nRF24_GetDynamicPayloadSize>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	2061      	movs	r0, #97	; 0x61
 80019da:	f7ff fcb9 	bl	8001350 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <nRF24_IRQ_Handler+0x14>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200000f6 	.word	0x200000f6

08001a00 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <nRF24_IRQ_Read+0x7c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d130      	bne.n	8001a72 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <nRF24_IRQ_Read+0x7c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8001a16:	f7ff fd96 	bl	8001546 <nRF24_ReadStatus>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <nRF24_IRQ_Read+0x80>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a38:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <nRF24_IRQ_Read+0x84>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <nRF24_IRQ_Read+0x88>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fd72 	bl	8001556 <nRF24_WriteStatus>
	}
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000f6 	.word	0x200000f6
 8001a80:	200000f3 	.word	0x200000f3
 8001a84:	200000f4 	.word	0x200000f4
 8001a88:	200000f5 	.word	0x200000f5

08001a8c <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8001a90:	f7ff ffb6 	bl	8001a00 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <nRF24_Event+0x44>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8001a9c:	f7ff fb08 	bl	80010b0 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <nRF24_Event+0x44>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <nRF24_Event+0x48>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8001aae:	f7ff faef 	bl	8001090 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <nRF24_Event+0x48>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <nRF24_Event+0x4c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8001ac0:	f7ff fb20 	bl	8001104 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <nRF24_Event+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
	}
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200000f3 	.word	0x200000f3
 8001ad4:	200000f4 	.word	0x200000f4
 8001ad8:	200000f5 	.word	0x200000f5

08001adc <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001ae4:	4a2e      	ldr	r2, [pc, #184]	; (8001ba0 <nRF24_Init+0xc4>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001aea:	2200      	movs	r2, #0
 8001aec:	2110      	movs	r1, #16
 8001aee:	482d      	ldr	r0, [pc, #180]	; (8001ba4 <nRF24_Init+0xc8>)
 8001af0:	f000 feca 	bl	8002888 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001af4:	2201      	movs	r2, #1
 8001af6:	2104      	movs	r1, #4
 8001af8:	482b      	ldr	r0, [pc, #172]	; (8001ba8 <nRF24_Init+0xcc>)
 8001afa:	f000 fec5 	bl	8002888 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8001afe:	2005      	movs	r0, #5
 8001b00:	f7ff fbc8 	bl	8001294 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001b04:	2003      	movs	r0, #3
 8001b06:	f7ff fcd9 	bl	80014bc <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7ff fcf5 	bl	80014fa <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff fd63 	bl	80015dc <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fd7d 	bl	8001616 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001b1c:	2107      	movs	r1, #7
 8001b1e:	2004      	movs	r0, #4
 8001b20:	f7ff fd96 	bl	8001650 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8001b24:	201d      	movs	r0, #29
 8001b26:	f7ff fbef 	bl	8001308 <nRF24_ReadRegister>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	201d      	movs	r0, #29
 8001b36:	f7ff fc2f 	bl	8001398 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8001b3a:	213f      	movs	r1, #63	; 0x3f
 8001b3c:	201c      	movs	r0, #28
 8001b3e:	f7ff fc2b 	bl	8001398 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001b42:	200a      	movs	r0, #10
 8001b44:	f7ff fd9f 	bl	8001686 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001b48:	2101      	movs	r1, #1
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fdac 	bl	80016a8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001b50:	2101      	movs	r1, #1
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fddd 	bl	8001712 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f7ff fe0f 	bl	800177c <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fb98 	bl	8001294 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff fed1 	bl	800190c <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff feeb 	bl	8001946 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ff05 	bl	8001980 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fb8c 	bl	8001294 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8001b7c:	f7ff fe9a 	bl	80018b4 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8001b80:	201d      	movs	r0, #29
 8001b82:	f7ff fbc1 	bl	8001308 <nRF24_ReadRegister>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	201d      	movs	r0, #29
 8001b92:	f7ff fc01 	bl	8001398 <nRF24_WriteRegister>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000ec 	.word	0x200000ec
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011400 	.word	0x40011400

08001bac <nRF24_WriteAckPayload>:
//
//
//

nRF24_TX_Status nRF24_WriteAckPayload(uint8_t pipe, uint8_t * data, uint8_t size)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71bb      	strb	r3, [r7, #6]
	if(size > 32)
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d901      	bls.n	8001bc6 <nRF24_WriteAckPayload+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00d      	b.n	8001be2 <nRF24_WriteAckPayload+0x36>

	pipe &= 0x07;
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegisters((NRF24_CMD_W_ACK_PAYLOAD | pipe), data, size);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	79ba      	ldrb	r2, [r7, #6]
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fc02 	bl	80013e4 <nRF24_WriteRegisters>

	return NRF24_TRANSMITTED_PACKET;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <MX_SPI3_Init+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c20:	2218      	movs	r2, #24
 8001c22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c38:	220a      	movs	r2, #10
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_SPI3_Init+0x64>)
 8001c3e:	f001 fcc9 	bl	80035d4 <HAL_SPI_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c48:	f7ff fb1f 	bl	800128a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200000f8 	.word	0x200000f8
 8001c54:	40003c00 	.word	0x40003c00

08001c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_SPI_MspInit+0xa8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d13f      	bne.n	8001cf8 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_SPI_MspInit+0xac>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <HAL_SPI_MspInit+0xac>)
 8001c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c82:	61d3      	str	r3, [r2, #28]
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_SPI_MspInit+0xac>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_SPI_MspInit+0xac>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_SPI_MspInit+0xac>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_SPI_MspInit+0xac>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8001ca8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <HAL_SPI_MspInit+0xb0>)
 8001cbe:	f000 fc5f 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8001cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <HAL_SPI_MspInit+0xb0>)
 8001cd8:	f000 fc52 	bl	8002580 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_SPI_MspInit+0xb4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_SPI_MspInit+0xb4>)
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40003c00 	.word	0x40003c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40010000 	.word	0x40010000

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6193      	str	r3, [r2, #24]
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_MspInit+0x60>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_MspInit+0x60>)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 fa93 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8001dc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dca:	f000 fd75 	bl	80028b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2224      	movs	r2, #36	; 0x24
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 f80a 	bl	8004e08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <MX_TIM1_Init+0xac>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e30:	2301      	movs	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	4619      	mov	r1, r3
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e54:	f002 fa98 	bl	8004388 <HAL_TIM_Encoder_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e5e:	f7ff fa14 	bl	800128a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <MX_TIM1_Init+0xa8>)
 8001e70:	f002 ff64 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e7a:	f7ff fa06 	bl	800128a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3730      	adds	r7, #48	; 0x30
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000150 	.word	0x20000150
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	f107 0320 	add.w	r3, r7, #32
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	615a      	str	r2, [r3, #20]
 8001ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ec0:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001ec2:	4a3d      	ldr	r2, [pc, #244]	; (8001fb8 <MX_TIM3_Init+0x128>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee4:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001ee6:	f002 f8fd 	bl	80040e4 <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ef0:	f7ff f9cb 	bl	800128a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efe:	4619      	mov	r1, r3
 8001f00:	482c      	ldr	r0, [pc, #176]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f02:	f002 fba5 	bl	8004650 <HAL_TIM_ConfigClockSource>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001f0c:	f7ff f9bd 	bl	800128a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f10:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f12:	f002 f936 	bl	8004182 <HAL_TIM_PWM_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001f1c:	f7ff f9b5 	bl	800128a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4821      	ldr	r0, [pc, #132]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f30:	f002 ff04 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001f3a:	f7ff f9a6 	bl	800128a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3e:	2360      	movs	r3, #96	; 0x60
 8001f40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4817      	ldr	r0, [pc, #92]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f56:	f002 fab9 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001f60:	f7ff f993 	bl	800128a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2204      	movs	r2, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f6c:	f002 faae 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001f76:	f7ff f988 	bl	800128a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f82:	f002 faa3 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001f8c:	f7ff f97d 	bl	800128a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	220c      	movs	r2, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001f98:	f002 fa98 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001fa2:	f7ff f972 	bl	800128a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <MX_TIM3_Init+0x124>)
 8001fa8:	f000 f8e8 	bl	800217c <HAL_TIM_MspPostInit>

}
 8001fac:	bf00      	nop
 8001fae:	3738      	adds	r7, #56	; 0x38
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000198 	.word	0x20000198
 8001fb8:	40000400 	.word	0x40000400

08001fbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08c      	sub	sp, #48	; 0x30
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 ff1c 	bl	8004e08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <MX_TIM4_Init+0xa0>)
 8001fda:	4a21      	ldr	r2, [pc, #132]	; (8002060 <MX_TIM4_Init+0xa4>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <MX_TIM4_Init+0xa0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_TIM4_Init+0xa0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <MX_TIM4_Init+0xa0>)
 8001fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_TIM4_Init+0xa0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_TIM4_Init+0xa0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002006:	2301      	movs	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002016:	2301      	movs	r3, #1
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4619      	mov	r1, r3
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <MX_TIM4_Init+0xa0>)
 800202a:	f002 f9ad 	bl	8004388 <HAL_TIM_Encoder_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002034:	f7ff f929 	bl	800128a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_TIM4_Init+0xa0>)
 8002046:	f002 fe79 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002050:	f7ff f91b 	bl	800128a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	3730      	adds	r7, #48	; 0x30
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200001e0 	.word	0x200001e0
 8002060:	40000800 	.word	0x40000800

08002064 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a2b      	ldr	r2, [pc, #172]	; (800212c <HAL_TIM_Encoder_MspInit+0xc8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d125      	bne.n	80020d0 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 800208a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 80020b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0318 	add.w	r3, r7, #24
 80020c6:	4619      	mov	r1, r3
 80020c8:	481a      	ldr	r0, [pc, #104]	; (8002134 <HAL_TIM_Encoder_MspInit+0xd0>)
 80020ca:	f000 fa59 	bl	8002580 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020ce:	e028      	b.n	8002122 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a18      	ldr	r2, [pc, #96]	; (8002138 <HAL_TIM_Encoder_MspInit+0xd4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d123      	bne.n	8002122 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6193      	str	r3, [r2, #24]
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 800210a:	23c0      	movs	r3, #192	; 0xc0
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	; (800213c <HAL_TIM_Encoder_MspInit+0xd8>)
 800211e:	f000 fa2f 	bl	8002580 <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40010800 	.word	0x40010800
 8002138:	40000800 	.word	0x40000800
 800213c:	40010c00 	.word	0x40010c00

08002140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_TIM_Base_MspInit+0x34>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10b      	bne.n	800216a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_TIM_Base_MspInit+0x38>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_TIM_Base_MspInit+0x38>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_TIM_Base_MspInit+0x38>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40000400 	.word	0x40000400
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_TIM_MspPostInit+0x80>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d12a      	bne.n	80021f2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_TIM_MspPostInit+0x84>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_TIM_MspPostInit+0x84>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_TIM_MspPostInit+0x84>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 80021b4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4619      	mov	r1, r3
 80021c8:	480e      	ldr	r0, [pc, #56]	; (8002204 <HAL_TIM_MspPostInit+0x88>)
 80021ca:	f000 f9d9 	bl	8002580 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_TIM_MspPostInit+0x8c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <HAL_TIM_MspPostInit+0x8c>)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40000400 	.word	0x40000400
 8002200:	40021000 	.word	0x40021000
 8002204:	40011000 	.word	0x40011000
 8002208:	40010000 	.word	0x40010000

0800220c <Reset_Handler>:
 800220c:	f7ff fde1 	bl	8001dd2 <SystemInit>
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <LoopFillZerobss+0xe>)
 8002212:	490c      	ldr	r1, [pc, #48]	; (8002244 <LoopFillZerobss+0x12>)
 8002214:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <LoopFillZerobss+0x16>)
 8002216:	2300      	movs	r3, #0
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:
 800221a:	58d4      	ldr	r4, [r2, r3]
 800221c:	50c4      	str	r4, [r0, r3]
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:
 8002220:	18c4      	adds	r4, r0, r3
 8002222:	428c      	cmp	r4, r1
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <LoopFillZerobss+0x1a>)
 8002228:	4c09      	ldr	r4, [pc, #36]	; (8002250 <LoopFillZerobss+0x1e>)
 800222a:	2300      	movs	r3, #0
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:
 8002232:	42a2      	cmp	r2, r4
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>
 8002236:	f002 fdef 	bl	8004e18 <__libc_init_array>
 800223a:	f7fe ffa1 	bl	8001180 <main>
 800223e:	4770      	bx	lr
 8002240:	20000000 	.word	0x20000000
 8002244:	2000000c 	.word	0x2000000c
 8002248:	08004ecc 	.word	0x08004ecc
 800224c:	2000000c 	.word	0x2000000c
 8002250:	2000022c 	.word	0x2000022c

08002254 <ADC1_2_IRQHandler>:
 8002254:	e7fe      	b.n	8002254 <ADC1_2_IRQHandler>
	...

08002258 <HAL_Init>:
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_Init+0x28>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_Init+0x28>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	2003      	movs	r0, #3
 800226a:	f000 f947 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f808 	bl	8002284 <HAL_InitTick>
 8002274:	f7ff fd4c 	bl	8001d10 <HAL_MspInit>
 8002278:	2300      	movs	r3, #0
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_InitTick>:
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f95f 	bl	8002566 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f927 	bl	8002512 <HAL_NVIC_SetPriority>
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
 80022ce:	2301      	movs	r3, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_IncTick>:
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_IncTick+0x1c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_IncTick+0x20>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_IncTick+0x20>)
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000008 	.word	0x20000008
 8002304:	20000228 	.word	0x20000228

08002308 <HAL_GetTick>:
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_GetTick+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000228 	.word	0x20000228

0800231c <HAL_Delay>:
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	f7ff fff0 	bl	8002308 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	bf00      	nop
 8002344:	f7ff ffe0 	bl	8002308 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008

08002364 <__NVIC_SetPriorityGrouping>:
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4906      	ldr	r1, [pc, #24]	; (80023fc <__NVIC_EnableIRQ+0x34>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
 80024ac:	4313      	orrs	r3, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Config>:
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff90 	bl	8002400 <__NVIC_SetPriority>
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff2d 	bl	8002364 <__NVIC_SetPriorityGrouping>
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	f7ff ff42 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff90 	bl	8002454 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5f 	bl	8002400 <__NVIC_SetPriority>
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff35 	bl	80023c8 <__NVIC_EnableIRQ>
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_GPIO_Init>:
 8002580:	b480      	push	{r7}
 8002582:	b08b      	sub	sp, #44	; 0x2c
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	e169      	b.n	8002868 <HAL_GPIO_Init+0x2e8>
 8002594:	2201      	movs	r2, #1
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 8158 	bne.w	8002862 <HAL_GPIO_Init+0x2e2>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a9a      	ldr	r2, [pc, #616]	; (8002820 <HAL_GPIO_Init+0x2a0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d05e      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025bc:	4a98      	ldr	r2, [pc, #608]	; (8002820 <HAL_GPIO_Init+0x2a0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d875      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025c2:	4a98      	ldr	r2, [pc, #608]	; (8002824 <HAL_GPIO_Init+0x2a4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d058      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025c8:	4a96      	ldr	r2, [pc, #600]	; (8002824 <HAL_GPIO_Init+0x2a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d86f      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025ce:	4a96      	ldr	r2, [pc, #600]	; (8002828 <HAL_GPIO_Init+0x2a8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d052      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025d4:	4a94      	ldr	r2, [pc, #592]	; (8002828 <HAL_GPIO_Init+0x2a8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d869      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025da:	4a94      	ldr	r2, [pc, #592]	; (800282c <HAL_GPIO_Init+0x2ac>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d04c      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025e0:	4a92      	ldr	r2, [pc, #584]	; (800282c <HAL_GPIO_Init+0x2ac>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d863      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025e6:	4a92      	ldr	r2, [pc, #584]	; (8002830 <HAL_GPIO_Init+0x2b0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d046      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025ec:	4a90      	ldr	r2, [pc, #576]	; (8002830 <HAL_GPIO_Init+0x2b0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d85d      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d82a      	bhi.n	800264c <HAL_GPIO_Init+0xcc>
 80025f6:	2b12      	cmp	r3, #18
 80025f8:	d859      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025fa:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <HAL_GPIO_Init+0x80>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	0800267b 	.word	0x0800267b
 8002604:	08002655 	.word	0x08002655
 8002608:	08002667 	.word	0x08002667
 800260c:	080026a9 	.word	0x080026a9
 8002610:	080026af 	.word	0x080026af
 8002614:	080026af 	.word	0x080026af
 8002618:	080026af 	.word	0x080026af
 800261c:	080026af 	.word	0x080026af
 8002620:	080026af 	.word	0x080026af
 8002624:	080026af 	.word	0x080026af
 8002628:	080026af 	.word	0x080026af
 800262c:	080026af 	.word	0x080026af
 8002630:	080026af 	.word	0x080026af
 8002634:	080026af 	.word	0x080026af
 8002638:	080026af 	.word	0x080026af
 800263c:	080026af 	.word	0x080026af
 8002640:	080026af 	.word	0x080026af
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002671 	.word	0x08002671
 800264c:	4a79      	ldr	r2, [pc, #484]	; (8002834 <HAL_GPIO_Init+0x2b4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 8002652:	e02c      	b.n	80026ae <HAL_GPIO_Init+0x12e>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	e029      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	3304      	adds	r3, #4
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	e024      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	3308      	adds	r3, #8
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	e01f      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	330c      	adds	r3, #12
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	e01a      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_GPIO_Init+0x108>
 8002682:	2304      	movs	r3, #4
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	e013      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_GPIO_Init+0x11c>
 8002690:	2308      	movs	r3, #8
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	e009      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 800269c:	2308      	movs	r3, #8
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	e003      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 80026a8:	2300      	movs	r3, #0
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x130>
 80026ae:	bf00      	nop
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2bff      	cmp	r3, #255	; 0xff
 80026b4:	d801      	bhi.n	80026ba <HAL_GPIO_Init+0x13a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	e001      	b.n	80026be <HAL_GPIO_Init+0x13e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d802      	bhi.n	80026cc <HAL_GPIO_Init+0x14c>
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	e002      	b.n	80026d2 <HAL_GPIO_Init+0x152>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	3b08      	subs	r3, #8
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	210f      	movs	r1, #15
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	6a39      	ldr	r1, [r7, #32]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	431a      	orrs	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80b1 	beq.w	8002862 <HAL_GPIO_Init+0x2e2>
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <HAL_GPIO_Init+0x2b8>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <HAL_GPIO_Init+0x2b8>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_GPIO_Init+0x2b8>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4a48      	ldr	r2, [pc, #288]	; (800283c <HAL_GPIO_Init+0x2bc>)
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a40      	ldr	r2, [pc, #256]	; (8002840 <HAL_GPIO_Init+0x2c0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <HAL_GPIO_Init+0x1ec>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <HAL_GPIO_Init+0x2c4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00d      	beq.n	8002768 <HAL_GPIO_Init+0x1e8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <HAL_GPIO_Init+0x2c8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <HAL_GPIO_Init+0x1e4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3d      	ldr	r2, [pc, #244]	; (800284c <HAL_GPIO_Init+0x2cc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_GPIO_Init+0x1e0>
 800275c:	2303      	movs	r3, #3
 800275e:	e006      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 8002760:	2304      	movs	r3, #4
 8002762:	e004      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 8002764:	2302      	movs	r3, #2
 8002766:	e002      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 800276c:	2300      	movs	r3, #0
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	f002 0203 	and.w	r2, r2, #3
 8002774:	0092      	lsls	r2, r2, #2
 8002776:	4093      	lsls	r3, r2
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	492f      	ldr	r1, [pc, #188]	; (800283c <HAL_GPIO_Init+0x2bc>)
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_GPIO_Init+0x226>
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	492c      	ldr	r1, [pc, #176]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x234>
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4928      	ldr	r1, [pc, #160]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_GPIO_Init+0x24e>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4922      	ldr	r1, [pc, #136]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x25c>
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	491e      	ldr	r1, [pc, #120]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027d8:	4013      	ands	r3, r2
 80027da:	60cb      	str	r3, [r1, #12]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x276>
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4918      	ldr	r1, [pc, #96]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x284>
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4914      	ldr	r1, [pc, #80]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d021      	beq.n	8002854 <HAL_GPIO_Init+0x2d4>
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	490e      	ldr	r1, [pc, #56]	; (8002850 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e021      	b.n	8002862 <HAL_GPIO_Init+0x2e2>
 800281e:	bf00      	nop
 8002820:	10320000 	.word	0x10320000
 8002824:	10310000 	.word	0x10310000
 8002828:	10220000 	.word	0x10220000
 800282c:	10210000 	.word	0x10210000
 8002830:	10120000 	.word	0x10120000
 8002834:	10110000 	.word	0x10110000
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	40010800 	.word	0x40010800
 8002844:	40010c00 	.word	0x40010c00
 8002848:	40011000 	.word	0x40011000
 800284c:	40011400 	.word	0x40011400
 8002850:	40010400 	.word	0x40010400
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_GPIO_Init+0x304>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	43db      	mvns	r3, r3
 800285c:	4909      	ldr	r1, [pc, #36]	; (8002884 <HAL_GPIO_Init+0x304>)
 800285e:	4013      	ands	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	3301      	adds	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	f47f ae8e 	bne.w	8002594 <HAL_GPIO_Init+0x14>
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	372c      	adds	r7, #44	; 0x2c
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40010400 	.word	0x40010400

08002888 <HAL_GPIO_WritePin>:
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_GPIO_EXTI_IRQHandler>:
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_GPIO_EXTI_IRQHandler+0x24>
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	6153      	str	r3, [r2, #20]
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fcc8 	bl	800126c <HAL_GPIO_EXTI_Callback>
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_I2C_Init>:
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Init+0x12>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12b      	b.n	8002b52 <HAL_I2C_Init+0x26a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_I2C_Init+0x2c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f98e 	bl	8000c30 <HAL_I2C_MspInit>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f000 fe10 	bl	8003570 <HAL_RCC_GetPCLK1Freq>
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a81      	ldr	r2, [pc, #516]	; (8002b5c <HAL_I2C_Init+0x274>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d807      	bhi.n	800296c <HAL_I2C_Init+0x84>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a80      	ldr	r2, [pc, #512]	; (8002b60 <HAL_I2C_Init+0x278>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e006      	b.n	800297a <HAL_I2C_Init+0x92>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a7d      	ldr	r2, [pc, #500]	; (8002b64 <HAL_I2C_Init+0x27c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Init+0x9a>
 800297e:	2301      	movs	r3, #1
 8002980:	e0e7      	b.n	8002b52 <HAL_I2C_Init+0x26a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a78      	ldr	r2, [pc, #480]	; (8002b68 <HAL_I2C_Init+0x280>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_I2C_Init+0x274>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d802      	bhi.n	80029bc <HAL_I2C_Init+0xd4>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	e009      	b.n	80029d0 <HAL_I2C_Init+0xe8>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	4a69      	ldr	r2, [pc, #420]	; (8002b6c <HAL_I2C_Init+0x284>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	3301      	adds	r3, #1
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	495c      	ldr	r1, [pc, #368]	; (8002b5c <HAL_I2C_Init+0x274>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d819      	bhi.n	8002a24 <HAL_I2C_Init+0x13c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e59      	subs	r1, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fe:	1c59      	adds	r1, r3, #1
 8002a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a04:	400b      	ands	r3, r1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_I2C_Init+0x138>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e59      	subs	r1, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1e:	e051      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e04f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_I2C_Init+0x168>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_I2C_Init+0x18e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x196>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_I2C_Init+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e58      	subs	r0, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6093      	str	r3, [r2, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b50:	2300      	movs	r3, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	000186a0 	.word	0x000186a0
 8002b60:	001e847f 	.word	0x001e847f
 8002b64:	003d08ff 	.word	0x003d08ff
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_RCC_OscConfig>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x12>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e304      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8087 	beq.w	8002c9e <HAL_RCC_OscConfig+0x12e>
 8002b90:	4b92      	ldr	r3, [pc, #584]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x46>
 8002b9c:	4b8f      	ldr	r3, [pc, #572]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d112      	bne.n	8002bce <HAL_RCC_OscConfig+0x5e>
 8002ba8:	4b8c      	ldr	r3, [pc, #560]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d10b      	bne.n	8002bce <HAL_RCC_OscConfig+0x5e>
 8002bb6:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d06c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x12c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d168      	bne.n	8002c9c <HAL_RCC_OscConfig+0x12c>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e2de      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd6:	d106      	bne.n	8002be6 <HAL_RCC_OscConfig+0x76>
 8002bd8:	4b80      	ldr	r3, [pc, #512]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a7f      	ldr	r2, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e02e      	b.n	8002c44 <HAL_RCC_OscConfig+0xd4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x98>
 8002bee:	4b7b      	ldr	r3, [pc, #492]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7a      	ldr	r2, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b78      	ldr	r3, [pc, #480]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a77      	ldr	r2, [pc, #476]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xd4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0xbc>
 8002c12:	4b72      	ldr	r3, [pc, #456]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a71      	ldr	r2, [pc, #452]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xd4>
 8002c2c:	4b6b      	ldr	r3, [pc, #428]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6a      	ldr	r2, [pc, #424]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a67      	ldr	r2, [pc, #412]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0x104>
 8002c4c:	f7ff fb5c 	bl	8002308 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xf6>
 8002c54:	f7ff fb58 	bl	8002308 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xf6>
 8002c62:	2303      	movs	r3, #3
 8002c64:	e292      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002c66:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xe4>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x12e>
 8002c74:	f7ff fb48 	bl	8002308 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x11e>
 8002c7c:	f7ff fb44 	bl	8002308 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x11e>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e27e      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002c8e:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x10c>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x12e>
 8002c9c:	bf00      	nop
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x202>
 8002caa:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_OscConfig+0x15e>
 8002cb6:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x18c>
 8002cc2:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x18c>
 8002cce:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x176>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x176>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e252      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4939      	ldr	r1, [pc, #228]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
 8002cfa:	e03a      	b.n	8002d72 <HAL_RCC_OscConfig+0x202>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1d6>
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x270>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f7ff fafd 	bl	8002308 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x1b4>
 8002d12:	f7ff faf9 	bl	8002308 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x1b4>
 8002d20:	2303      	movs	r3, #3
 8002d22:	e233      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1a2>
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4927      	ldr	r1, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x202>
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCC_OscConfig+0x270>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f7ff fadc 	bl	8002308 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1f6>
 8002d54:	f7ff fad8 	bl	8002308 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1f6>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e212      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002d66:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1e4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d03a      	beq.n	8002df4 <HAL_RCC_OscConfig+0x284>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d019      	beq.n	8002dba <HAL_RCC_OscConfig+0x24a>
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_RCC_OscConfig+0x274>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f7ff fabc 	bl	8002308 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x236>
 8002d94:	f7ff fab8 	bl	8002308 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x236>
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1f2      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_OscConfig+0x26c>)
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x224>
 8002db2:	2001      	movs	r0, #1
 8002db4:	f000 fbf0 	bl	8003598 <RCC_Delay>
 8002db8:	e01c      	b.n	8002df4 <HAL_RCC_OscConfig+0x284>
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f7ff faa2 	bl	8002308 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]
 8002dc6:	e00f      	b.n	8002de8 <HAL_RCC_OscConfig+0x278>
 8002dc8:	f7ff fa9e 	bl	8002308 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d908      	bls.n	8002de8 <HAL_RCC_OscConfig+0x278>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1d8      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	42420000 	.word	0x42420000
 8002de4:	42420480 	.word	0x42420480
 8002de8:	4b9b      	ldr	r3, [pc, #620]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e9      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x258>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a6 	beq.w	8002f4e <HAL_RCC_OscConfig+0x3de>
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
 8002e06:	4b94      	ldr	r3, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2be>
 8002e12:	4b91      	ldr	r3, [pc, #580]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4a90      	ldr	r2, [pc, #576]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	61d3      	str	r3, [r2, #28]
 8002e1e:	4b8e      	ldr	r3, [pc, #568]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2fc>
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a87      	ldr	r2, [pc, #540]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	f7ff fa5f 	bl	8002308 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
 8002e4e:	f7ff fa5b 	bl	8002308 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e195      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002e60:	4b7e      	ldr	r3, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2de>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x312>
 8002e74:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_OscConfig+0x36e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x334>
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a72      	ldr	r2, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6213      	str	r3, [r2, #32]
 8002e96:	4b70      	ldr	r3, [pc, #448]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a6f      	ldr	r2, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	e01c      	b.n	8002ede <HAL_RCC_OscConfig+0x36e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x356>
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a69      	ldr	r2, [pc, #420]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a66      	ldr	r2, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x36e>
 8002ec6:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
 8002ee6:	f7ff fa0f 	bl	8002308 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x394>
 8002eee:	f7ff fa0b 	bl	8002308 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x394>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e143      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002f04:	4b54      	ldr	r3, [pc, #336]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x37e>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x3cc>
 8002f12:	f7ff f9f9 	bl	8002308 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
 8002f1a:	f7ff f9f5 	bl	8002308 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e12d      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002f30:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3aa>
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3de>
 8002f42:	4b45      	ldr	r3, [pc, #276]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a44      	ldr	r2, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 808c 	beq.w	8003070 <HAL_RCC_OscConfig+0x500>
 8002f58:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d10e      	bne.n	8002f84 <HAL_RCC_OscConfig+0x414>
 8002f66:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_OscConfig+0x414>
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_OscConfig+0x414>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e103      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d14e      	bne.n	800302a <HAL_RCC_OscConfig+0x4ba>
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_OscConfig+0x43c>
 8002f98:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_OscConfig+0x43c>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0ef      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002fac:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <HAL_RCC_OscConfig+0x4f0>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f7ff f9a9 	bl	8002308 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x45c>
 8002fba:	f7ff f9a5 	bl	8002308 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x45c>
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0df      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x44a>
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	491c      	ldr	r1, [pc, #112]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4918      	ldr	r1, [pc, #96]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_RCC_OscConfig+0x4f0>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f7ff f981 	bl	8002308 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x4ac>
 800300a:	f7ff f97d 	bl	8002308 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x4ac>
 8003018:	2303      	movs	r3, #3
 800301a:	e0b7      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x49a>
 8003028:	e022      	b.n	8003070 <HAL_RCC_OscConfig+0x500>
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_RCC_OscConfig+0x4e8>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_OscConfig+0x4f0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f7ff f964 	bl	8002308 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x4f4>
 8003044:	f7ff f960 	bl	8002308 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d908      	bls.n	8003064 <HAL_RCC_OscConfig+0x4f4>
 8003052:	2303      	movs	r3, #3
 8003054:	e09a      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420068 	.word	0x42420068
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e9      	bne.n	8003044 <HAL_RCC_OscConfig+0x4d4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8088 	beq.w	800318a <HAL_RCC_OscConfig+0x61a>
 800307a:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b08      	cmp	r3, #8
 8003084:	d068      	beq.n	8003158 <HAL_RCC_OscConfig+0x5e8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d14d      	bne.n	800312a <HAL_RCC_OscConfig+0x5ba>
 800308e:	4b42      	ldr	r3, [pc, #264]	; (8003198 <HAL_RCC_OscConfig+0x628>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f7ff f938 	bl	8002308 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x53e>
 800309c:	f7ff f934 	bl	8002308 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x53e>
 80030aa:	2303      	movs	r3, #3
 80030ac:	e06e      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x52c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c2:	d10f      	bne.n	80030e4 <HAL_RCC_OscConfig+0x574>
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4931      	ldr	r1, [pc, #196]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f023 020f 	bic.w	r2, r3, #15
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	492d      	ldr	r1, [pc, #180]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	430b      	orrs	r3, r1
 80030f6:	4927      	ldr	r1, [pc, #156]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x628>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f7ff f901 	bl	8002308 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x5ac>
 800310a:	f7ff f8fd 	bl	8002308 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x5ac>
 8003118:	2303      	movs	r3, #3
 800311a:	e037      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x59a>
 8003128:	e02f      	b.n	800318a <HAL_RCC_OscConfig+0x61a>
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x628>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f7ff f8ea 	bl	8002308 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x5da>
 8003138:	f7ff f8e6 	bl	8002308 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x5da>
 8003146:	2303      	movs	r3, #3
 8003148:	e020      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c8>
 8003156:	e018      	b.n	800318a <HAL_RCC_OscConfig+0x61a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0x5f4>
 8003160:	2301      	movs	r3, #1
 8003162:	e013      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_OscConfig+0x624>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	429a      	cmp	r2, r3
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x616>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	429a      	cmp	r2, r3
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x61a>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_RCC_OscConfig+0x61c>
 800318a:	2300      	movs	r3, #0
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	42420060 	.word	0x42420060

0800319c <HAL_RCC_ClockConfig>:
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0d0      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 80031b0:	4b6a      	ldr	r3, [pc, #424]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d910      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x44>
 80031be:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 0207 	bic.w	r2, r3, #7
 80031c6:	4965      	ldr	r1, [pc, #404]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x44>
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b8      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_ClockConfig+0x92>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x68>
 80031f8:	4b59      	ldr	r3, [pc, #356]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a58      	ldr	r2, [pc, #352]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003202:	6053      	str	r3, [r2, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x80>
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a52      	ldr	r2, [pc, #328]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800321a:	6053      	str	r3, [r2, #4]
 800321c:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	494d      	ldr	r1, [pc, #308]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d040      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xb6>
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
 800324e:	2301      	movs	r3, #1
 8003250:	e07f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
 8003266:	2301      	movs	r3, #1
 8003268:	e073      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
 8003276:	2301      	movs	r3, #1
 8003278:	e06b      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 800327a:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4936      	ldr	r1, [pc, #216]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	f7ff f83c 	bl	8002308 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
 8003294:	f7ff f838 	bl	8002308 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e053      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d210      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x150>
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	4922      	ldr	r1, [pc, #136]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x150>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e032      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x16e>
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4916      	ldr	r1, [pc, #88]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x18e>
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 800332a:	f000 f821 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800332e:	4602      	mov	r2, r0
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	490a      	ldr	r1, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	5ccb      	ldrb	r3, [r1, r3]
 800333e:	fa22 f303 	lsr.w	r3, r2, r3
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x1cc>)
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1d0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe ff9a 	bl	8002284 <HAL_InitTick>
 8003350:	2300      	movs	r3, #0
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40022000 	.word	0x40022000
 8003360:	40021000 	.word	0x40021000
 8003364:	08004e84 	.word	0x08004e84
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004

08003370 <HAL_RCC_GetSysClockFreq>:
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b092      	sub	sp, #72	; 0x48
 8003376:	af00      	add	r7, sp, #0
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337c:	2300      	movs	r3, #0
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
 800338c:	2300      	movs	r3, #0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003394:	4b6b      	ldr	r3, [pc, #428]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d002      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x3a>
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x40>
 80033a8:	e0c3      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x1c2>
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
 80033ae:	e0c3      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x1c8>
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
 80033be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80ac 	beq.w	8003522 <HAL_RCC_GetSysClockFreq+0x1b2>
 80033ca:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	4b5f      	ldr	r3, [pc, #380]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1e0>)
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d8:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 808c 	beq.w	80034fe <HAL_RCC_GetSysClockFreq+0x18e>
 80033e6:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	3301      	adds	r3, #1
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3302      	adds	r3, #2
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2200      	movs	r2, #0
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	627a      	str	r2, [r7, #36]	; 0x24
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	2200      	movs	r2, #0
 800340e:	4618      	mov	r0, r3
 8003410:	4611      	mov	r1, r2
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	fb00 f203 	mul.w	r2, r0, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	fb03 f301 	mul.w	r3, r3, r1
 800341e:	4413      	add	r3, r2
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	fba2 4500 	umull	r4, r5, r2, r0
 8003426:	442b      	add	r3, r5
 8003428:	461d      	mov	r5, r3
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	ebb2 0a04 	subs.w	sl, r2, r4
 8003446:	eb63 0b05 	sbc.w	fp, r3, r5
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003456:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800345a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800345e:	ebb2 080a 	subs.w	r8, r2, sl
 8003462:	eb63 090b 	sbc.w	r9, r3, fp
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	eb18 0304 	adds.w	r3, r8, r4
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	eb49 0305 	adc.w	r3, r9, r5
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003496:	4629      	mov	r1, r5
 8003498:	028b      	lsls	r3, r1, #10
 800349a:	4620      	mov	r0, r4
 800349c:	4629      	mov	r1, r5
 800349e:	4604      	mov	r4, r0
 80034a0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80034a4:	4601      	mov	r1, r0
 80034a6:	028a      	lsls	r2, r1, #10
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	2200      	movs	r2, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	617a      	str	r2, [r7, #20]
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	2200      	movs	r2, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	60fa      	str	r2, [r7, #12]
 80034bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034c0:	4622      	mov	r2, r4
 80034c2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80034c6:	4645      	mov	r5, r8
 80034c8:	fb05 f202 	mul.w	r2, r5, r2
 80034cc:	46cc      	mov	ip, r9
 80034ce:	4625      	mov	r5, r4
 80034d0:	461c      	mov	r4, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	fb03 f30c 	mul.w	r3, r3, ip
 80034d8:	4413      	add	r3, r2
 80034da:	4622      	mov	r2, r4
 80034dc:	4644      	mov	r4, r8
 80034de:	fba2 2404 	umull	r2, r4, r2, r4
 80034e2:	61fc      	str	r4, [r7, #28]
 80034e4:	61ba      	str	r2, [r7, #24]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f0:	f7fc fe98 	bl	8000224 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	647b      	str	r3, [r7, #68]	; 0x44
 80034fc:	e007      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x19e>
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	4a11      	ldr	r2, [pc, #68]	; (8003548 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003502:	fb03 f202 	mul.w	r2, r3, r2
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	647b      	str	r3, [r7, #68]	; 0x44
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003510:	7b5b      	ldrb	r3, [r3, #13]
 8003512:	461a      	mov	r2, r3
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x1bc>
 800351a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	647b      	str	r3, [r7, #68]	; 0x44
 8003520:	e004      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x1bc>
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	643b      	str	r3, [r7, #64]	; 0x40
 8003530:	e002      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003534:	643b      	str	r3, [r7, #64]	; 0x40
 8003536:	bf00      	nop
 8003538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353a:	4618      	mov	r0, r3
 800353c:	3748      	adds	r7, #72	; 0x48
 800353e:	46bd      	mov	sp, r7
 8003540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	00f42400 	.word	0x00f42400
 800354c:	08004e9c 	.word	0x08004e9c
 8003550:	08004eac 	.word	0x08004eac
 8003554:	003d0900 	.word	0x003d0900
 8003558:	007a1200 	.word	0x007a1200

0800355c <HAL_RCC_GetHCLKFreq>:
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <HAL_RCC_GetHCLKFreq+0x10>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	20000000 	.word	0x20000000

08003570 <HAL_RCC_GetPCLK1Freq>:
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
 8003574:	f7ff fff2 	bl	800355c <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4903      	ldr	r1, [pc, #12]	; (8003594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	08004e94 	.word	0x08004e94

08003598 <RCC_Delay>:
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <RCC_Delay+0x34>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <RCC_Delay+0x38>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	0a5b      	lsrs	r3, r3, #9
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	bf00      	nop
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1e5a      	subs	r2, r3, #1
 80035ba:	60fa      	str	r2, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f9      	bne.n	80035b4 <RCC_Delay+0x1c>
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	20000000 	.word	0x20000000
 80035d0:	10624dd3 	.word	0x10624dd3

080035d4 <HAL_SPI_Init>:
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_SPI_Init+0x12>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e076      	b.n	80036d4 <HAL_SPI_Init+0x100>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <HAL_SPI_Init+0x2c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f6:	d009      	beq.n	800360c <HAL_SPI_Init+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
 80035fe:	e005      	b.n	800360c <HAL_SPI_Init+0x38>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_SPI_Init+0x58>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe fb16 	bl	8001c58 <HAL_SPI_MspInit>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	ea42 0103 	orr.w	r1, r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	0c1a      	lsrs	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f002 0204 	and.w	r2, r2, #4
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c2:	61da      	str	r2, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80036d2:	2300      	movs	r3, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_SPI_Transmit>:
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_SPI_Transmit+0x22>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e12d      	b.n	800395a <HAL_SPI_Transmit+0x27e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003706:	f7fe fdff 	bl	8002308 <HAL_GetTick>
 800370a:	61b8      	str	r0, [r7, #24]
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	82fb      	strh	r3, [r7, #22]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x46>
 800371c:	2302      	movs	r3, #2
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e116      	b.n	8003950 <HAL_SPI_Transmit+0x274>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_SPI_Transmit+0x52>
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_SPI_Transmit+0x58>
 800372e:	2301      	movs	r3, #1
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e10d      	b.n	8003950 <HAL_SPI_Transmit+0x274>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2203      	movs	r2, #3
 8003738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	869a      	strh	r2, [r3, #52]	; 0x34
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	86da      	strh	r2, [r3, #54]	; 0x36
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	645a      	str	r2, [r3, #68]	; 0x44
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377a:	d10f      	bne.n	800379c <HAL_SPI_Transmit+0xc0>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d007      	beq.n	80037ba <HAL_SPI_Transmit+0xde>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d14f      	bne.n	8003864 <HAL_SPI_Transmit+0x188>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_Transmit+0xf6>
 80037cc:	8afb      	ldrh	r3, [r7, #22]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d142      	bne.n	8003858 <HAL_SPI_Transmit+0x17c>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	1c9a      	adds	r2, r3, #2
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80037f6:	e02f      	b.n	8003858 <HAL_SPI_Transmit+0x17c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d112      	bne.n	800382c <HAL_SPI_Transmit+0x150>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	86da      	strh	r2, [r3, #54]	; 0x36
 800382a:	e015      	b.n	8003858 <HAL_SPI_Transmit+0x17c>
 800382c:	f7fe fd6c 	bl	8002308 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d803      	bhi.n	8003844 <HAL_SPI_Transmit+0x168>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d102      	bne.n	800384a <HAL_SPI_Transmit+0x16e>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_SPI_Transmit+0x17c>
 800384a:	2303      	movs	r3, #3
 800384c:	77fb      	strb	r3, [r7, #31]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003856:	e07b      	b.n	8003950 <HAL_SPI_Transmit+0x274>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ca      	bne.n	80037f8 <HAL_SPI_Transmit+0x11c>
 8003862:	e050      	b.n	8003906 <HAL_SPI_Transmit+0x22a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Transmit+0x196>
 800386c:	8afb      	ldrh	r3, [r7, #22]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d144      	bne.n	80038fc <HAL_SPI_Transmit+0x220>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	86da      	strh	r2, [r3, #54]	; 0x36
 8003898:	e030      	b.n	80038fc <HAL_SPI_Transmit+0x220>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d113      	bne.n	80038d0 <HAL_SPI_Transmit+0x1f4>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	7812      	ldrb	r2, [r2, #0]
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80038ce:	e015      	b.n	80038fc <HAL_SPI_Transmit+0x220>
 80038d0:	f7fe fd1a 	bl	8002308 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d803      	bhi.n	80038e8 <HAL_SPI_Transmit+0x20c>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d102      	bne.n	80038ee <HAL_SPI_Transmit+0x212>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_SPI_Transmit+0x220>
 80038ee:	2303      	movs	r3, #3
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80038fa:	e029      	b.n	8003950 <HAL_SPI_Transmit+0x274>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1c9      	bne.n	800389a <HAL_SPI_Transmit+0x1be>
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fbcc 	bl	80040a8 <SPI_EndRxTxTransaction>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_Transmit+0x240>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_SPI_Transmit+0x25e>
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_SPI_Transmit+0x26c>
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e003      	b.n	8003950 <HAL_SPI_Transmit+0x274>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003958:	7ffb      	ldrb	r3, [r7, #31]
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SPI_Receive>:
 8003962:	b580      	push	{r7, lr}
 8003964:	b088      	sub	sp, #32
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Receive+0x26>
 8003982:	2302      	movs	r3, #2
 8003984:	75fb      	strb	r3, [r7, #23]
 8003986:	e0fb      	b.n	8003b80 <HAL_SPI_Receive+0x21e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003990:	d112      	bne.n	80039b8 <HAL_SPI_Receive+0x56>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <HAL_SPI_Receive+0x56>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2204      	movs	r2, #4
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f8ef 	bl	8003b92 <HAL_SPI_TransmitReceive>
 80039b4:	4603      	mov	r3, r0
 80039b6:	e0e8      	b.n	8003b8a <HAL_SPI_Receive+0x228>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_SPI_Receive+0x64>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0e1      	b.n	8003b8a <HAL_SPI_Receive+0x228>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039ce:	f7fe fc9b 	bl	8002308 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Receive+0x7e>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_Receive+0x84>
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
 80039e4:	e0cc      	b.n	8003b80 <HAL_SPI_Receive+0x21e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2204      	movs	r2, #4
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	869a      	strh	r2, [r3, #52]	; 0x34
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2c:	d10f      	bne.n	8003a4e <HAL_SPI_Receive+0xec>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d007      	beq.n	8003a6c <HAL_SPI_Receive+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d16a      	bne.n	8003b4a <HAL_SPI_Receive+0x1e8>
 8003a74:	e032      	b.n	8003adc <HAL_SPI_Receive+0x17a>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d115      	bne.n	8003ab0 <HAL_SPI_Receive+0x14e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f103 020c 	add.w	r2, r3, #12
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aae:	e015      	b.n	8003adc <HAL_SPI_Receive+0x17a>
 8003ab0:	f7fe fc2a 	bl	8002308 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_Receive+0x166>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Receive+0x16c>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_SPI_Receive+0x17a>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	75fb      	strb	r3, [r7, #23]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003ada:	e051      	b.n	8003b80 <HAL_SPI_Receive+0x21e>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1c7      	bne.n	8003a76 <HAL_SPI_Receive+0x114>
 8003ae6:	e035      	b.n	8003b54 <HAL_SPI_Receive+0x1f2>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d113      	bne.n	8003b1e <HAL_SPI_Receive+0x1bc>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	b292      	uxth	r2, r2
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1c:	e015      	b.n	8003b4a <HAL_SPI_Receive+0x1e8>
 8003b1e:	f7fe fbf3 	bl	8002308 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d803      	bhi.n	8003b36 <HAL_SPI_Receive+0x1d4>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_Receive+0x1da>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_SPI_Receive+0x1e8>
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	75fb      	strb	r3, [r7, #23]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003b48:	e01a      	b.n	8003b80 <HAL_SPI_Receive+0x21e>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1c9      	bne.n	8003ae8 <HAL_SPI_Receive+0x186>
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa53 	bl	8004004 <SPI_EndRxTransaction>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Receive+0x208>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_SPI_Receive+0x216>
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
 8003b76:	e003      	b.n	8003b80 <HAL_SPI_Receive+0x21e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_SPI_TransmitReceive>:
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08c      	sub	sp, #48	; 0x30
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x26>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e198      	b.n	8003eea <HAL_SPI_TransmitReceive+0x358>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003bc0:	f7fe fba2 	bl	8002308 <HAL_GetTick>
 8003bc4:	6278      	str	r0, [r7, #36]	; 0x24
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	837b      	strh	r3, [r7, #26]
 8003bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d00f      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x70>
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be8:	d107      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x68>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x68>
 8003bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x70>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c00:	e16d      	b.n	8003ede <HAL_SPI_TransmitReceive+0x34c>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x82>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x82>
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x8a>
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e160      	b.n	8003ede <HAL_SPI_TransmitReceive+0x34c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d003      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x9e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	887a      	ldrh	r2, [r7, #2]
 8003c40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	887a      	ldrh	r2, [r7, #2]
 8003c46:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	887a      	ldrh	r2, [r7, #2]
 8003c52:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	869a      	strh	r2, [r3, #52]	; 0x34
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d007      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0xf2>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8c:	d17c      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x1f6>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x10a>
 8003c96:	8b7b      	ldrh	r3, [r7, #26]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d16a      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x1e0>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cc0:	e057      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x1e0>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d11b      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x176>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x176>
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d113      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x176>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	881a      	ldrh	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d119      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x1b8>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d014      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x1b8>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d46:	2301      	movs	r3, #1
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4a:	f7fe fadd 	bl	8002308 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d80b      	bhi.n	8003d72 <HAL_SPI_TransmitReceive+0x1e0>
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d007      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0x1e0>
 8003d62:	2303      	movs	r3, #3
 8003d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003d70:	e0b5      	b.n	8003ede <HAL_SPI_TransmitReceive+0x34c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1a2      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x130>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d19d      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x130>
 8003d86:	e080      	b.n	8003e8a <HAL_SPI_TransmitReceive+0x2f8>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_TransmitReceive+0x204>
 8003d90:	8b7b      	ldrh	r3, [r7, #26]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d16f      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x2e4>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	7812      	ldrb	r2, [r2, #0]
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dbc:	e05b      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x2e4>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d11c      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x274>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d017      	beq.n	8003e06 <HAL_SPI_TransmitReceive+0x274>
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d114      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x274>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e02:	2300      	movs	r3, #0
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d119      	bne.n	8003e48 <HAL_SPI_TransmitReceive+0x2b6>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d014      	beq.n	8003e48 <HAL_SPI_TransmitReceive+0x2b6>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e44:	2301      	movs	r3, #1
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	f7fe fa5e 	bl	8002308 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d803      	bhi.n	8003e60 <HAL_SPI_TransmitReceive+0x2ce>
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d102      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x2d4>
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x2e4>
 8003e66:	2303      	movs	r3, #3
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003e74:	e033      	b.n	8003ede <HAL_SPI_TransmitReceive+0x34c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d19e      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x22c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d199      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x22c>
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f90a 	bl	80040a8 <SPI_EndRxTxTransaction>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x316>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8003ea6:	e01a      	b.n	8003ede <HAL_SPI_TransmitReceive+0x34c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x334>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x344>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed4:	e003      	b.n	8003ede <HAL_SPI_TransmitReceive+0x34c>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eea:	4618      	mov	r0, r3
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <SPI_WaitFlagStateUntilTimeout>:
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
 8003f04:	f7fe fa00 	bl	8002308 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	f7fe f9f8 	bl	8002308 <HAL_GetTick>
 8003f18:	61b8      	str	r0, [r7, #24]
 8003f1a:	4b39      	ldr	r3, [pc, #228]	; (8004000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	015b      	lsls	r3, r3, #5
 8003f20:	0d1b      	lsrs	r3, r3, #20
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e054      	b.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d050      	beq.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003f34:	f7fe f9e8 	bl	8002308 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d902      	bls.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d13d      	bne.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f62:	d111      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d004      	beq.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x84>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d107      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	d10f      	bne.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e017      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d19b      	bne.n	8003f2c <SPI_WaitFlagStateUntilTimeout+0x38>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000000 	.word	0x20000000

08004004 <SPI_EndRxTransaction>:
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004018:	d111      	bne.n	800403e <SPI_EndRxTransaction+0x3a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004022:	d004      	beq.n	800402e <SPI_EndRxTransaction+0x2a>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d107      	bne.n	800403e <SPI_EndRxTransaction+0x3a>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004046:	d117      	bne.n	8004078 <SPI_EndRxTransaction+0x74>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d112      	bne.n	8004078 <SPI_EndRxTransaction+0x74>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	2101      	movs	r1, #1
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff ff49 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <SPI_EndRxTransaction+0x9a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
 8004074:	2303      	movs	r3, #3
 8004076:	e013      	b.n	80040a0 <SPI_EndRxTransaction+0x9c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff ff36 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <SPI_EndRxTransaction+0x9a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
 800409a:	2303      	movs	r3, #3
 800409c:	e000      	b.n	80040a0 <SPI_EndRxTransaction+0x9c>
 800409e:	2300      	movs	r3, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <SPI_EndRxTxTransaction>:
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff ff18 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <SPI_EndRxTxTransaction+0x32>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
 80040d6:	2303      	movs	r3, #3
 80040d8:	e000      	b.n	80040dc <SPI_EndRxTxTransaction+0x34>
 80040da:	2300      	movs	r3, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_Base_Init>:
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_Base_Init+0x12>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e041      	b.n	800417a <HAL_TIM_Base_Init+0x96>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_Base_Init+0x2c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fe f818 	bl	8002140 <HAL_TIM_Base_MspInit>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 fb5c 	bl	80047e0 <TIM_Base_SetConfig>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004178:	2300      	movs	r3, #0
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_PWM_Init>:
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_TIM_PWM_Init+0x12>
 8004190:	2301      	movs	r3, #1
 8004192:	e041      	b.n	8004218 <HAL_TIM_PWM_Init+0x96>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_TIM_PWM_Init+0x2c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f839 	bl	8004220 <HAL_TIM_PWM_MspInit>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 fb0d 	bl	80047e0 <TIM_Base_SetConfig>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004216:	2300      	movs	r3, #0
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_PWM_MspInit>:
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
	...

08004234 <HAL_TIM_PWM_Start>:
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_TIM_PWM_Start+0x24>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e022      	b.n	800429e <HAL_TIM_PWM_Start+0x6a>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d109      	bne.n	8004272 <HAL_TIM_PWM_Start+0x3e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e015      	b.n	800429e <HAL_TIM_PWM_Start+0x6a>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d109      	bne.n	800428c <HAL_TIM_PWM_Start+0x58>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e008      	b.n	800429e <HAL_TIM_PWM_Start+0x6a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x72>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e063      	b.n	800436e <HAL_TIM_PWM_Start+0x13a>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Start+0x82>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b4:	e013      	b.n	80042de <HAL_TIM_PWM_Start+0xaa>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x92>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	e00b      	b.n	80042de <HAL_TIM_PWM_Start+0xaa>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Start+0xa2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	e003      	b.n	80042de <HAL_TIM_PWM_Start+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd04 	bl	8004cf4 <TIM_CCxChannelCmd>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a21      	ldr	r2, [pc, #132]	; (8004378 <HAL_TIM_PWM_Start+0x144>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_PWM_Start+0xd2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_TIM_PWM_Start+0x144>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_TIM_PWM_Start+0x104>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_PWM_Start+0x104>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <HAL_TIM_PWM_Start+0x148>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_TIM_PWM_Start+0x104>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <HAL_TIM_PWM_Start+0x14c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_PWM_Start+0x104>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a14      	ldr	r2, [pc, #80]	; (8004384 <HAL_TIM_PWM_Start+0x150>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d111      	bne.n	800435c <HAL_TIM_PWM_Start+0x128>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d010      	beq.n	800436c <HAL_TIM_PWM_Start+0x138>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e007      	b.n	800436c <HAL_TIM_PWM_Start+0x138>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	2300      	movs	r3, #0
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00

08004388 <HAL_TIM_Encoder_Init>:
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_TIM_Encoder_Init+0x14>
 8004398:	2301      	movs	r3, #1
 800439a:	e093      	b.n	80044c4 <HAL_TIM_Encoder_Init+0x13c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_TIM_Encoder_Init+0x2e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fd fe57 	bl	8002064 <HAL_TIM_Encoder_MspInit>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	6093      	str	r3, [r2, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 f9ff 	bl	80047e0 <TIM_Base_SetConfig>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	4313      	orrs	r3, r2
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004428:	f023 030c 	bic.w	r3, r3, #12
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	4313      	orrs	r3, r2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	011a      	lsls	r2, r3, #4
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	031b      	lsls	r3, r3, #12
 8004458:	4313      	orrs	r3, r2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4313      	orrs	r3, r2
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	609a      	str	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	619a      	str	r2, [r3, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	621a      	str	r2, [r3, #32]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044c2:	2300      	movs	r3, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_PWM_ConfigChannel>:
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	2300      	movs	r3, #0
 80044da:	75fb      	strb	r3, [r7, #23]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0ae      	b.n	8004648 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	f200 809f 	bhi.w	8004638 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004535 	.word	0x08004535
 8004504:	08004639 	.word	0x08004639
 8004508:	08004639 	.word	0x08004639
 800450c:	08004639 	.word	0x08004639
 8004510:	08004575 	.word	0x08004575
 8004514:	08004639 	.word	0x08004639
 8004518:	08004639 	.word	0x08004639
 800451c:	08004639 	.word	0x08004639
 8004520:	080045b7 	.word	0x080045b7
 8004524:	08004639 	.word	0x08004639
 8004528:	08004639 	.word	0x08004639
 800452c:	08004639 	.word	0x08004639
 8004530:	080045f7 	.word	0x080045f7
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f9bc 	bl	80048b8 <TIM_OC1_SetConfig>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0208 	orr.w	r2, r2, #8
 800454e:	619a      	str	r2, [r3, #24]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	619a      	str	r2, [r3, #24]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	619a      	str	r2, [r3, #24]
 8004572:	e064      	b.n	800463e <HAL_TIM_PWM_ConfigChannel+0x172>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fa02 	bl	8004984 <TIM_OC2_SetConfig>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458e:	619a      	str	r2, [r3, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459e:	619a      	str	r2, [r3, #24]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6999      	ldr	r1, [r3, #24]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	021a      	lsls	r2, r3, #8
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	619a      	str	r2, [r3, #24]
 80045b4:	e043      	b.n	800463e <HAL_TIM_PWM_ConfigChannel+0x172>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fa4b 	bl	8004a58 <TIM_OC3_SetConfig>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0208 	orr.w	r2, r2, #8
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0204 	bic.w	r2, r2, #4
 80045e0:	61da      	str	r2, [r3, #28]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69d9      	ldr	r1, [r3, #28]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	61da      	str	r2, [r3, #28]
 80045f4:	e023      	b.n	800463e <HAL_TIM_PWM_ConfigChannel+0x172>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fa95 	bl	8004b2c <TIM_OC4_SetConfig>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004610:	61da      	str	r2, [r3, #28]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004620:	61da      	str	r2, [r3, #28]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69d9      	ldr	r1, [r3, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	021a      	lsls	r2, r3, #8
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	61da      	str	r2, [r3, #28]
 8004636:	e002      	b.n	800463e <HAL_TIM_PWM_ConfigChannel+0x172>
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
 800463c:	bf00      	nop
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_ConfigClockSource>:
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIM_ConfigClockSource+0x1c>
 8004668:	2302      	movs	r3, #2
 800466a:	e0b4      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x186>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a4:	d03e      	beq.n	8004724 <HAL_TIM_ConfigClockSource+0xd4>
 80046a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046aa:	f200 8087 	bhi.w	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	f000 8086 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x172>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	d87f      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b70      	cmp	r3, #112	; 0x70
 80046be:	d01a      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xa6>
 80046c0:	2b70      	cmp	r3, #112	; 0x70
 80046c2:	d87b      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b60      	cmp	r3, #96	; 0x60
 80046c6:	d050      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x11a>
 80046c8:	2b60      	cmp	r3, #96	; 0x60
 80046ca:	d877      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b50      	cmp	r3, #80	; 0x50
 80046ce:	d03c      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xfa>
 80046d0:	2b50      	cmp	r3, #80	; 0x50
 80046d2:	d873      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	d058      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x13a>
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d86f      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b30      	cmp	r3, #48	; 0x30
 80046de:	d064      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046e0:	2b30      	cmp	r3, #48	; 0x30
 80046e2:	d86b      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d060      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d867      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05c      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d05a      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046f4:	e062      	b.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6899      	ldr	r1, [r3, #8]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f000 fad6 	bl	8004cb6 <TIM_ETR_SetConfig>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	e04f      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6899      	ldr	r1, [r3, #8]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f000 fabf 	bl	8004cb6 <TIM_ETR_SetConfig>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e03c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fa36 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2150      	movs	r1, #80	; 0x50
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fa8d 	bl	8004c82 <TIM_ITRx_SetConfig>
 8004768:	e02c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	461a      	mov	r2, r3
 8004778:	f000 fa54 	bl	8004c24 <TIM_TI2_ConfigInputStage>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2160      	movs	r1, #96	; 0x60
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fa7d 	bl	8004c82 <TIM_ITRx_SetConfig>
 8004788:	e01c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	461a      	mov	r2, r3
 8004798:	f000 fa16 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2140      	movs	r1, #64	; 0x40
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fa6d 	bl	8004c82 <TIM_ITRx_SetConfig>
 80047a8:	e00c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f000 fa64 	bl	8004c82 <TIM_ITRx_SetConfig>
 80047ba:	e003      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	e000      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
 80047c2:	bf00      	nop
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <TIM_Base_SetConfig>:
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <TIM_Base_SetConfig+0xc8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00f      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d00b      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <TIM_Base_SetConfig+0xcc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <TIM_Base_SetConfig+0xd0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <TIM_Base_SetConfig+0xd4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <TIM_Base_SetConfig+0x4a>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <TIM_Base_SetConfig+0xc8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00f      	beq.n	8004852 <TIM_Base_SetConfig+0x72>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x72>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <TIM_Base_SetConfig+0xcc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x72>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <TIM_Base_SetConfig+0xd0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x72>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <TIM_Base_SetConfig+0xd4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x84>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <TIM_Base_SetConfig+0xc8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <TIM_Base_SetConfig+0xb8>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	615a      	str	r2, [r3, #20]
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00

080048b8 <TIM_OC1_SetConfig>:
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 0201 	bic.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 0302 	bic.w	r3, r3, #2
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <TIM_OC1_SetConfig+0xc8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10c      	bne.n	800492e <TIM_OC1_SetConfig+0x76>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0308 	bic.w	r3, r3, #8
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a13      	ldr	r2, [pc, #76]	; (8004980 <TIM_OC1_SetConfig+0xc8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d111      	bne.n	800495a <TIM_OC1_SetConfig+0xa2>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	619a      	str	r2, [r3, #24]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	635a      	str	r2, [r3, #52]	; 0x34
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	621a      	str	r2, [r3, #32]
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40012c00 	.word	0x40012c00

08004984 <TIM_OC2_SetConfig>:
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f023 0210 	bic.w	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	621a      	str	r2, [r3, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0320 	bic.w	r3, r3, #32
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <TIM_OC2_SetConfig+0xd0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10d      	bne.n	8004a00 <TIM_OC2_SetConfig+0x7c>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <TIM_OC2_SetConfig+0xd0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d113      	bne.n	8004a30 <TIM_OC2_SetConfig+0xac>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	619a      	str	r2, [r3, #24]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	621a      	str	r2, [r3, #32]
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	40012c00 	.word	0x40012c00

08004a58 <TIM_OC3_SetConfig>:
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <TIM_OC3_SetConfig+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10d      	bne.n	8004ad2 <TIM_OC3_SetConfig+0x7a>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <TIM_OC3_SetConfig+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d113      	bne.n	8004b02 <TIM_OC3_SetConfig+0xaa>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	61da      	str	r2, [r3, #28]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	621a      	str	r2, [r3, #32]
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00

08004b2c <TIM_OC4_SetConfig>:
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	031b      	lsls	r3, r3, #12
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <TIM_OC4_SetConfig+0x98>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d109      	bne.n	8004ba0 <TIM_OC4_SetConfig+0x74>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	61da      	str	r2, [r3, #28]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00

08004bc8 <TIM_TI1_ConfigInputStage>:
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	621a      	str	r2, [r3, #32]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 030a 	bic.w	r3, r3, #10
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	619a      	str	r2, [r3, #24]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	621a      	str	r2, [r3, #32]
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <TIM_TI2_ConfigInputStage>:
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f023 0210 	bic.w	r2, r3, #16
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	621a      	str	r2, [r3, #32]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	031b      	lsls	r3, r3, #12
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	619a      	str	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	621a      	str	r2, [r3, #32]
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <TIM_ITRx_SetConfig>:
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f043 0307 	orr.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <TIM_ETR_SetConfig>:
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	021a      	lsls	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_CCxChannelCmd>:
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2201      	movs	r2, #1
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1a      	ldr	r2, [r3, #32]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	401a      	ands	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIMEx_MasterConfigSynchronization>:
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e04b      	b.n	8004dec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d00e      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10c      	bne.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dea:	2300      	movs	r3, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00

08004e08 <memset>:
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4402      	add	r2, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <__libc_init_array>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	4d0c      	ldr	r5, [pc, #48]	; (8004e50 <__libc_init_array+0x38>)
 8004e1e:	4c0d      	ldr	r4, [pc, #52]	; (8004e54 <__libc_init_array+0x3c>)
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	42a6      	cmp	r6, r4
 8004e26:	d109      	bne.n	8004e3c <__libc_init_array+0x24>
 8004e28:	f000 f81a 	bl	8004e60 <_init>
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	4d0a      	ldr	r5, [pc, #40]	; (8004e58 <__libc_init_array+0x40>)
 8004e30:	4c0a      	ldr	r4, [pc, #40]	; (8004e5c <__libc_init_array+0x44>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	42a6      	cmp	r6, r4
 8004e38:	d105      	bne.n	8004e46 <__libc_init_array+0x2e>
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e40:	4798      	blx	r3
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7ee      	b.n	8004e24 <__libc_init_array+0xc>
 8004e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4a:	4798      	blx	r3
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	e7f2      	b.n	8004e36 <__libc_init_array+0x1e>
 8004e50:	08004ec4 	.word	0x08004ec4
 8004e54:	08004ec4 	.word	0x08004ec4
 8004e58:	08004ec4 	.word	0x08004ec4
 8004e5c:	08004ec8 	.word	0x08004ec8

08004e60 <_init>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr

08004e6c <_fini>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr
