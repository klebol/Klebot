
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080099a0  080099a0  000199a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d5c  08009d5c  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d64  08009d64  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08009d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000260  08009fcc  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000788  08009fcc  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001627e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e88  00000000  00000000  0003654a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fc  00000000  00000000  0003b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230f9  00000000  00000000  0003caec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c736  00000000  00000000  0005fbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c230a  00000000  00000000  0007c31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b88  00000000  00000000  0013e628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001451b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000260 	.word	0x20000260
 8000204:	00000000 	.word	0x00000000
 8000208:	08009984 	.word	0x08009984

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000264 	.word	0x20000264
 8000224:	08009984 	.word	0x08009984

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_f2iz>:
 8000ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30f      	bcc.n	8000f0e <__aeabi_f2iz+0x2a>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d90d      	bls.n	8000f14 <__aeabi_f2iz+0x30>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f04:	fa23 f002 	lsr.w	r0, r3, r2
 8000f08:	bf18      	it	ne
 8000f0a:	4240      	negne	r0, r0
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2iz+0x3a>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d105      	bne.n	8000f2a <__aeabi_f2iz+0x46>
 8000f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f28:	4770      	bx	lr
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_uldivmod>:
 8000f30:	b953      	cbnz	r3, 8000f48 <__aeabi_uldivmod+0x18>
 8000f32:	b94a      	cbnz	r2, 8000f48 <__aeabi_uldivmod+0x18>
 8000f34:	2900      	cmp	r1, #0
 8000f36:	bf08      	it	eq
 8000f38:	2800      	cmpeq	r0, #0
 8000f3a:	bf1c      	itt	ne
 8000f3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f40:	f04f 30ff 	movne.w	r0, #4294967295
 8000f44:	f000 b972 	b.w	800122c <__aeabi_idiv0>
 8000f48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f50:	f000 f806 	bl	8000f60 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <__udivmoddi4>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	9e08      	ldr	r6, [sp, #32]
 8000f66:	460d      	mov	r5, r1
 8000f68:	4604      	mov	r4, r0
 8000f6a:	468e      	mov	lr, r1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d14c      	bne.n	800100a <__udivmoddi4+0xaa>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	4694      	mov	ip, r2
 8000f74:	d967      	bls.n	8001046 <__udivmoddi4+0xe6>
 8000f76:	fab2 f382 	clz	r3, r2
 8000f7a:	b153      	cbz	r3, 8000f92 <__udivmoddi4+0x32>
 8000f7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f80:	f1c3 0220 	rsb	r2, r3, #32
 8000f84:	fa01 fe03 	lsl.w	lr, r1, r3
 8000f88:	fa20 f202 	lsr.w	r2, r0, r2
 8000f8c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000f90:	409c      	lsls	r4, r3
 8000f92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f96:	fbbe f1f7 	udiv	r1, lr, r7
 8000f9a:	fa1f f58c 	uxth.w	r5, ip
 8000f9e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000fa2:	fb01 f005 	mul.w	r0, r1, r5
 8000fa6:	0c22      	lsrs	r2, r4, #16
 8000fa8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d90a      	bls.n	8000fc6 <__udivmoddi4+0x66>
 8000fb0:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000fb8:	f080 8119 	bcs.w	80011ee <__udivmoddi4+0x28e>
 8000fbc:	4290      	cmp	r0, r2
 8000fbe:	f240 8116 	bls.w	80011ee <__udivmoddi4+0x28e>
 8000fc2:	3902      	subs	r1, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000fd0:	fb00 f505 	mul.w	r5, r0, r5
 8000fd4:	b2a4      	uxth	r4, r4
 8000fd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fda:	42a5      	cmp	r5, r4
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x94>
 8000fde:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe6:	f080 8104 	bcs.w	80011f2 <__udivmoddi4+0x292>
 8000fea:	42a5      	cmp	r5, r4
 8000fec:	f240 8101 	bls.w	80011f2 <__udivmoddi4+0x292>
 8000ff0:	4464      	add	r4, ip
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	1b64      	subs	r4, r4, r5
 8000ffc:	b11e      	cbz	r6, 8001006 <__udivmoddi4+0xa6>
 8000ffe:	40dc      	lsrs	r4, r3
 8001000:	2300      	movs	r3, #0
 8001002:	e9c6 4300 	strd	r4, r3, [r6]
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	428b      	cmp	r3, r1
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0xc0>
 800100e:	2e00      	cmp	r6, #0
 8001010:	f000 80ea 	beq.w	80011e8 <__udivmoddi4+0x288>
 8001014:	2100      	movs	r1, #0
 8001016:	e9c6 0500 	strd	r0, r5, [r6]
 800101a:	4608      	mov	r0, r1
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001020:	fab3 f183 	clz	r1, r3
 8001024:	2900      	cmp	r1, #0
 8001026:	d148      	bne.n	80010ba <__udivmoddi4+0x15a>
 8001028:	42ab      	cmp	r3, r5
 800102a:	d302      	bcc.n	8001032 <__udivmoddi4+0xd2>
 800102c:	4282      	cmp	r2, r0
 800102e:	f200 80f8 	bhi.w	8001222 <__udivmoddi4+0x2c2>
 8001032:	1a84      	subs	r4, r0, r2
 8001034:	eb65 0203 	sbc.w	r2, r5, r3
 8001038:	2001      	movs	r0, #1
 800103a:	4696      	mov	lr, r2
 800103c:	2e00      	cmp	r6, #0
 800103e:	d0e2      	beq.n	8001006 <__udivmoddi4+0xa6>
 8001040:	e9c6 4e00 	strd	r4, lr, [r6]
 8001044:	e7df      	b.n	8001006 <__udivmoddi4+0xa6>
 8001046:	b902      	cbnz	r2, 800104a <__udivmoddi4+0xea>
 8001048:	deff      	udf	#255	; 0xff
 800104a:	fab2 f382 	clz	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 808e 	bne.w	8001170 <__udivmoddi4+0x210>
 8001054:	1a88      	subs	r0, r1, r2
 8001056:	2101      	movs	r1, #1
 8001058:	0c17      	lsrs	r7, r2, #16
 800105a:	fa1f fe82 	uxth.w	lr, r2
 800105e:	fbb0 f5f7 	udiv	r5, r0, r7
 8001062:	fb07 0015 	mls	r0, r7, r5, r0
 8001066:	0c22      	lsrs	r2, r4, #16
 8001068:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800106c:	fb0e f005 	mul.w	r0, lr, r5
 8001070:	4290      	cmp	r0, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x126>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d202      	bcs.n	8001084 <__udivmoddi4+0x124>
 800107e:	4290      	cmp	r0, r2
 8001080:	f200 80cc 	bhi.w	800121c <__udivmoddi4+0x2bc>
 8001084:	4645      	mov	r5, r8
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	fbb2 f0f7 	udiv	r0, r2, r7
 800108c:	fb07 2210 	mls	r2, r7, r0, r2
 8001090:	fb0e fe00 	mul.w	lr, lr, r0
 8001094:	b2a4      	uxth	r4, r4
 8001096:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800109a:	45a6      	cmp	lr, r4
 800109c:	d908      	bls.n	80010b0 <__udivmoddi4+0x150>
 800109e:	eb1c 0404 	adds.w	r4, ip, r4
 80010a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80010a6:	d202      	bcs.n	80010ae <__udivmoddi4+0x14e>
 80010a8:	45a6      	cmp	lr, r4
 80010aa:	f200 80b4 	bhi.w	8001216 <__udivmoddi4+0x2b6>
 80010ae:	4610      	mov	r0, r2
 80010b0:	eba4 040e 	sub.w	r4, r4, lr
 80010b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80010b8:	e7a0      	b.n	8000ffc <__udivmoddi4+0x9c>
 80010ba:	f1c1 0720 	rsb	r7, r1, #32
 80010be:	408b      	lsls	r3, r1
 80010c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80010c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80010cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d0:	fbba f8f9 	udiv	r8, sl, r9
 80010d4:	408d      	lsls	r5, r1
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	432b      	orrs	r3, r5
 80010e4:	fa00 f501 	lsl.w	r5, r0, r1
 80010e8:	fb08 f00e 	mul.w	r0, r8, lr
 80010ec:	0c1c      	lsrs	r4, r3, #16
 80010ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f2:	42a0      	cmp	r0, r4
 80010f4:	fa02 f201 	lsl.w	r2, r2, r1
 80010f8:	d90b      	bls.n	8001112 <__udivmoddi4+0x1b2>
 80010fa:	eb1c 0404 	adds.w	r4, ip, r4
 80010fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8001102:	f080 8086 	bcs.w	8001212 <__udivmoddi4+0x2b2>
 8001106:	42a0      	cmp	r0, r4
 8001108:	f240 8083 	bls.w	8001212 <__udivmoddi4+0x2b2>
 800110c:	f1a8 0802 	sub.w	r8, r8, #2
 8001110:	4464      	add	r4, ip
 8001112:	1a24      	subs	r4, r4, r0
 8001114:	b298      	uxth	r0, r3
 8001116:	fbb4 f3f9 	udiv	r3, r4, r9
 800111a:	fb09 4413 	mls	r4, r9, r3, r4
 800111e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001122:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001126:	45a6      	cmp	lr, r4
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x1dc>
 800112a:	eb1c 0404 	adds.w	r4, ip, r4
 800112e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001132:	d26a      	bcs.n	800120a <__udivmoddi4+0x2aa>
 8001134:	45a6      	cmp	lr, r4
 8001136:	d968      	bls.n	800120a <__udivmoddi4+0x2aa>
 8001138:	3b02      	subs	r3, #2
 800113a:	4464      	add	r4, ip
 800113c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001140:	fba0 9302 	umull	r9, r3, r0, r2
 8001144:	eba4 040e 	sub.w	r4, r4, lr
 8001148:	429c      	cmp	r4, r3
 800114a:	46c8      	mov	r8, r9
 800114c:	469e      	mov	lr, r3
 800114e:	d354      	bcc.n	80011fa <__udivmoddi4+0x29a>
 8001150:	d051      	beq.n	80011f6 <__udivmoddi4+0x296>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d067      	beq.n	8001226 <__udivmoddi4+0x2c6>
 8001156:	ebb5 0308 	subs.w	r3, r5, r8
 800115a:	eb64 040e 	sbc.w	r4, r4, lr
 800115e:	40cb      	lsrs	r3, r1
 8001160:	fa04 f707 	lsl.w	r7, r4, r7
 8001164:	431f      	orrs	r7, r3
 8001166:	40cc      	lsrs	r4, r1
 8001168:	e9c6 7400 	strd	r7, r4, [r6]
 800116c:	2100      	movs	r1, #0
 800116e:	e74a      	b.n	8001006 <__udivmoddi4+0xa6>
 8001170:	fa02 fc03 	lsl.w	ip, r2, r3
 8001174:	f1c3 0020 	rsb	r0, r3, #32
 8001178:	40c1      	lsrs	r1, r0
 800117a:	409d      	lsls	r5, r3
 800117c:	fa24 f000 	lsr.w	r0, r4, r0
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	4328      	orrs	r0, r5
 8001186:	fbb1 f5f7 	udiv	r5, r1, r7
 800118a:	fb07 1115 	mls	r1, r7, r5, r1
 800118e:	fa1f fe8c 	uxth.w	lr, ip
 8001192:	0c02      	lsrs	r2, r0, #16
 8001194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001198:	fb05 f10e 	mul.w	r1, r5, lr
 800119c:	4291      	cmp	r1, r2
 800119e:	fa04 f403 	lsl.w	r4, r4, r3
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x256>
 80011a4:	eb1c 0202 	adds.w	r2, ip, r2
 80011a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011ac:	d22f      	bcs.n	800120e <__udivmoddi4+0x2ae>
 80011ae:	4291      	cmp	r1, r2
 80011b0:	d92d      	bls.n	800120e <__udivmoddi4+0x2ae>
 80011b2:	3d02      	subs	r5, #2
 80011b4:	4462      	add	r2, ip
 80011b6:	1a52      	subs	r2, r2, r1
 80011b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80011bc:	fb07 2211 	mls	r2, r7, r1, r2
 80011c0:	b280      	uxth	r0, r0
 80011c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011c6:	fb01 f20e 	mul.w	r2, r1, lr
 80011ca:	4282      	cmp	r2, r0
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x280>
 80011ce:	eb1c 0000 	adds.w	r0, ip, r0
 80011d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80011d6:	d216      	bcs.n	8001206 <__udivmoddi4+0x2a6>
 80011d8:	4282      	cmp	r2, r0
 80011da:	d914      	bls.n	8001206 <__udivmoddi4+0x2a6>
 80011dc:	3902      	subs	r1, #2
 80011de:	4460      	add	r0, ip
 80011e0:	1a80      	subs	r0, r0, r2
 80011e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011e6:	e73a      	b.n	800105e <__udivmoddi4+0xfe>
 80011e8:	4631      	mov	r1, r6
 80011ea:	4630      	mov	r0, r6
 80011ec:	e70b      	b.n	8001006 <__udivmoddi4+0xa6>
 80011ee:	4671      	mov	r1, lr
 80011f0:	e6e9      	b.n	8000fc6 <__udivmoddi4+0x66>
 80011f2:	4610      	mov	r0, r2
 80011f4:	e6fe      	b.n	8000ff4 <__udivmoddi4+0x94>
 80011f6:	454d      	cmp	r5, r9
 80011f8:	d2ab      	bcs.n	8001152 <__udivmoddi4+0x1f2>
 80011fa:	ebb9 0802 	subs.w	r8, r9, r2
 80011fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001202:	3801      	subs	r0, #1
 8001204:	e7a5      	b.n	8001152 <__udivmoddi4+0x1f2>
 8001206:	4641      	mov	r1, r8
 8001208:	e7ea      	b.n	80011e0 <__udivmoddi4+0x280>
 800120a:	4603      	mov	r3, r0
 800120c:	e796      	b.n	800113c <__udivmoddi4+0x1dc>
 800120e:	4645      	mov	r5, r8
 8001210:	e7d1      	b.n	80011b6 <__udivmoddi4+0x256>
 8001212:	46d0      	mov	r8, sl
 8001214:	e77d      	b.n	8001112 <__udivmoddi4+0x1b2>
 8001216:	4464      	add	r4, ip
 8001218:	3802      	subs	r0, #2
 800121a:	e749      	b.n	80010b0 <__udivmoddi4+0x150>
 800121c:	3d02      	subs	r5, #2
 800121e:	4462      	add	r2, ip
 8001220:	e731      	b.n	8001086 <__udivmoddi4+0x126>
 8001222:	4608      	mov	r0, r1
 8001224:	e70a      	b.n	800103c <__udivmoddi4+0xdc>
 8001226:	4631      	mov	r1, r6
 8001228:	e6ed      	b.n	8001006 <__udivmoddi4+0xa6>
 800122a:	bf00      	nop

0800122c <__aeabi_idiv0>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <FIRFilter_Init>:




void FIRFilter_Init(FIRFilter *fir)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e008      	b.n	8001250 <FIRFilter_Init+0x20>
	{
		fir->buf[n] = 0.0f;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f04f 0100 	mov.w	r1, #0
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	3301      	adds	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b18      	cmp	r3, #24
 8001254:	d9f3      	bls.n	800123e <FIRFilter_Init+0xe>
	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	/* Clear filter output */
	fir->out = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001280:	4619      	mov	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	if(fir->bufIndex == FIR_FILTER_LENGTH)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80012a0:	2b19      	cmp	r3, #25
 80012a2:	d103      	bne.n	80012ac <FIRFilter_Update+0x3c>
	{
		fir->bufIndex = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}

	/* Compute new output sample (via convulation) */
	fir->out = 0.0f;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	669a      	str	r2, [r3, #104]	; 0x68

	uint8_t sumIndex = fir->bufIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80012ba:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73bb      	strb	r3, [r7, #14]
 80012c0:	e021      	b.n	8001306 <FIRFilter_Update+0x96>
	{
		/* Decrement index and wrap if necessary */
		if (sumIndex > 0)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <FIRFilter_Update+0x60>
		{
			sumIndex--;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e001      	b.n	80012d4 <FIRFilter_Update+0x64>
		}
		else
		{
			sumIndex = FIR_FILTER_LENGTH - 1;
 80012d0:	2318      	movs	r3, #24
 80012d2:	73fb      	strb	r3, [r7, #15]
		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <FIRFilter_Update+0xa8>)
 80012dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7fe ffa5 	bl	8000238 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fcee 	bl	8000cd4 <__addsf3>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	669a      	str	r2, [r3, #104]	; 0x68
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	3301      	adds	r3, #1
 8001304:	73bb      	strb	r3, [r7, #14]
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	2b18      	cmp	r3, #24
 800130a:	d9da      	bls.n	80012c2 <FIRFilter_Update+0x52>
	}

	/* Return filtered output */
	return fir->out;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000000 	.word	0x20000000

0800131c <RBuffer_Write>:
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132e:	3301      	adds	r3, #1
 8001330:	425a      	negs	r2, r3
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	f002 021f 	and.w	r2, r2, #31
 800133a:	bf58      	it	pl
 800133c:	4253      	negpl	r3, r2
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	429a      	cmp	r2, r3
 800134a:	d101      	bne.n	8001350 <RBuffer_Write+0x34>
 800134c:	2301      	movs	r3, #1
 800134e:	e00b      	b.n	8001368 <RBuffer_Write+0x4c>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	4619      	mov	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	545a      	strb	r2, [r3, r1]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
 8001366:	2300      	movs	r3, #0
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <RBuffer_Read>:
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001382:	3301      	adds	r3, #1
 8001384:	425a      	negs	r2, r3
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	bf58      	it	pl
 8001390:	4253      	negpl	r3, r2
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d101      	bne.n	80013a8 <RBuffer_Read+0x36>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e00c      	b.n	80013c2 <RBuffer_Read+0x50>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	5c9a      	ldrb	r2, [r3, r2]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80013c0:	2300      	movs	r3, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <MX_GPIO_Init>:
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <MX_GPIO_Init+0x154>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <MX_GPIO_Init+0x154>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <MX_GPIO_Init+0x154>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <MX_GPIO_Init+0x154>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <MX_GPIO_Init+0x154>)
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <MX_GPIO_Init+0x154>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <MX_GPIO_Init+0x154>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a42      	ldr	r2, [pc, #264]	; (8001520 <MX_GPIO_Init+0x154>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b40      	ldr	r3, [pc, #256]	; (8001520 <MX_GPIO_Init+0x154>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <MX_GPIO_Init+0x154>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <MX_GPIO_Init+0x154>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <MX_GPIO_Init+0x154>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	f246 0103 	movw	r1, #24579	; 0x6003
 8001446:	4837      	ldr	r0, [pc, #220]	; (8001524 <MX_GPIO_Init+0x158>)
 8001448:	f002 fd4c 	bl	8003ee4 <HAL_GPIO_WritePin>
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	4835      	ldr	r0, [pc, #212]	; (8001528 <MX_GPIO_Init+0x15c>)
 8001452:	f002 fd47 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001456:	2200      	movs	r2, #0
 8001458:	2110      	movs	r1, #16
 800145a:	4834      	ldr	r0, [pc, #208]	; (800152c <MX_GPIO_Init+0x160>)
 800145c:	f002 fd42 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001460:	f246 0302 	movw	r3, #24578	; 0x6002
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	482a      	ldr	r0, [pc, #168]	; (8001524 <MX_GPIO_Init+0x158>)
 800147a:	f002 fbaf 	bl	8003bdc <HAL_GPIO_Init>
 800147e:	2301      	movs	r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	2303      	movs	r3, #3
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_GPIO_Init+0x158>)
 8001496:	f002 fba1 	bl	8003bdc <HAL_GPIO_Init>
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4820      	ldr	r0, [pc, #128]	; (8001530 <MX_GPIO_Init+0x164>)
 80014b0:	f002 fb94 	bl	8003bdc <HAL_GPIO_Init>
 80014b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_GPIO_Init+0x168>)
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <MX_GPIO_Init+0x164>)
 80014ca:	f002 fb87 	bl	8003bdc <HAL_GPIO_Init>
 80014ce:	2304      	movs	r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	2301      	movs	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	2302      	movs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_GPIO_Init+0x15c>)
 80014e6:	f002 fb79 	bl	8003bdc <HAL_GPIO_Init>
 80014ea:	2310      	movs	r3, #16
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <MX_GPIO_Init+0x160>)
 8001502:	f002 fb6b 	bl	8003bdc <HAL_GPIO_Init>
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f002 fb2f 	bl	8003b6e <HAL_NVIC_SetPriority>
 8001510:	2028      	movs	r0, #40	; 0x28
 8001512:	f002 fb48 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40011000 	.word	0x40011000
 8001528:	40011400 	.word	0x40011400
 800152c:	40010c00 	.word	0x40010c00
 8001530:	40010800 	.word	0x40010800
 8001534:	10210000 	.word	0x10210000

08001538 <MX_I2C1_Init>:
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C1_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C1_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C1_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C1_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C1_Init+0x50>)
 8001576:	f002 fcff 	bl	8003f78 <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x4c>
 8001580:	f000 fb6f 	bl	8001c62 <Error_Handler>
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000027c 	.word	0x2000027c
 800158c:	40005400 	.word	0x40005400
 8001590:	00061a80 	.word	0x00061a80

08001594 <HAL_I2C_MspInit>:
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_I2C_MspInit+0x90>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d132      	bne.n	800161a <HAL_I2C_MspInit+0x86>
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_I2C_MspInit+0x94>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <HAL_I2C_MspInit+0x94>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_I2C_MspInit+0x94>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	2312      	movs	r3, #18
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <HAL_I2C_MspInit+0x98>)
 80015e2:	f002 fafb 	bl	8003bdc <HAL_GPIO_Init>
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_I2C_MspInit+0x9c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_I2C_MspInit+0x9c>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	6053      	str	r3, [r2, #4]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_I2C_MspInit+0x94>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_I2C_MspInit+0x94>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_I2C_MspInit+0x94>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40005400 	.word	0x40005400
 8001628:	40021000 	.word	0x40021000
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40010000 	.word	0x40010000

08001634 <Parser_ParseProgramLaunchCommand>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2bd0      	cmp	r3, #208	; 0xd0
 8001642:	d002      	beq.n	800164a <Parser_ParseProgramLaunchCommand+0x16>
 8001644:	2bd1      	cmp	r3, #209	; 0xd1
 8001646:	d005      	beq.n	8001654 <Parser_ParseProgramLaunchCommand+0x20>
 8001648:	e009      	b.n	800165e <Parser_ParseProgramLaunchCommand+0x2a>
 800164a:	f001 ffd1 	bl	80035f0 <Prog_DiodeTest_Launch>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e007      	b.n	8001664 <Parser_ParseProgramLaunchCommand+0x30>
 8001654:	f002 f82c 	bl	80036b0 <Prog_MotorsDebug_Launch>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e002      	b.n	8001664 <Parser_ParseProgramLaunchCommand+0x30>
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	bf00      	nop
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <Parser_ParseProgramLaunchCommand+0x42>
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	21f0      	movs	r1, #240	; 0xf0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f8cc 	bl	800380c <Programs_SendProgramStartedACK>
 8001674:	e004      	b.n	8001680 <Parser_ParseProgramLaunchCommand+0x4c>
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	21f1      	movs	r1, #241	; 0xf1
 800167a:	4618      	mov	r0, r3
 800167c:	f002 f8c6 	bl	800380c <Programs_SendProgramStartedACK>
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <Parser_Klebot>:
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	74fb      	strb	r3, [r7, #19]
 800169c:	f002 f876 	bl	800378c <Programs_GetProgram>
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d012      	beq.n	80016ce <Parser_Klebot+0x46>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	7c1b      	ldrb	r3, [r3, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10c      	bne.n	80016ce <Parser_Klebot+0x46>
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	7cfb      	ldrb	r3, [r7, #19]
 80016bc:	3b01      	subs	r3, #1
 80016be:	74fb      	strb	r3, [r7, #19]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	7cfa      	ldrb	r2, [r7, #19]
 80016c6:	4611      	mov	r1, r2
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	4798      	blx	r3
 80016cc:	e014      	b.n	80016f8 <Parser_Klebot+0x70>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d002      	beq.n	80016dc <Parser_Klebot+0x54>
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d008      	beq.n	80016ec <Parser_Klebot+0x64>
 80016da:	e00d      	b.n	80016f8 <Parser_Klebot+0x70>
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	72fb      	strb	r3, [r7, #11]
 80016e2:	7afb      	ldrb	r3, [r7, #11]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ffa5 	bl	8001634 <Parser_ParseProgramLaunchCommand>
 80016ea:	e005      	b.n	80016f8 <Parser_Klebot+0x70>
 80016ec:	f002 f83e 	bl	800376c <Programs_ExitProgram>
 80016f0:	20f0      	movs	r0, #240	; 0xf0
 80016f2:	f002 f8a4 	bl	800383e <Programs_SendProgramExitACK>
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <Radio_Init>:
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fed3 	bl	80024b4 <nRF24_Init>
 800170e:	4906      	ldr	r1, [pc, #24]	; (8001728 <Radio_Init+0x28>)
 8001710:	2000      	movs	r0, #0
 8001712:	f000 fd3c 	bl	800218e <nRF24_SetRXAddress>
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <Radio_Init+0x2c>)
 8001718:	f000 fd72 	bl	8002200 <nRF24_SetTXAddress>
 800171c:	f000 fb76 	bl	8001e0c <nRF24_RX_Mode>
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	080099a0 	.word	0x080099a0
 800172c:	080099a4 	.word	0x080099a4

08001730 <Radio_RxBufferPut>:
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	2300      	movs	r3, #0
 8001742:	73bb      	strb	r3, [r7, #14]
 8001744:	e010      	b.n	8001768 <Radio_RxBufferPut+0x38>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <Radio_RxBufferPut+0x4c>)
 800174e:	f7ff fde5 	bl	800131c <RBuffer_Write>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4313      	orrs	r3, r2
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	3301      	adds	r3, #1
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	7bba      	ldrb	r2, [r7, #14]
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3ea      	bcc.n	8001746 <Radio_RxBufferPut+0x16>
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002f8 	.word	0x200002f8

08001780 <Radio_RxBufferGet>:
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	2300      	movs	r3, #0
 8001790:	73bb      	strb	r3, [r7, #14]
 8001792:	f107 030d 	add.w	r3, r7, #13
 8001796:	4619      	mov	r1, r3
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <Radio_RxBufferGet+0x6c>)
 800179a:	f7ff fdea 	bl	8001372 <RBuffer_Read>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	73bb      	strb	r3, [r7, #14]
 80017a8:	e012      	b.n	80017d0 <Radio_RxBufferGet+0x50>
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	7b7a      	ldrb	r2, [r7, #13]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	3301      	adds	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	f107 030d 	add.w	r3, r7, #13
 80017be:	4619      	mov	r1, r3
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <Radio_RxBufferGet+0x6c>)
 80017c2:	f7ff fdd6 	bl	8001372 <RBuffer_Read>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	73bb      	strb	r3, [r7, #14]
 80017d0:	7b7b      	ldrb	r3, [r7, #13]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d002      	beq.n	80017dc <Radio_RxBufferGet+0x5c>
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0e6      	beq.n	80017aa <Radio_RxBufferGet+0x2a>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200002f8 	.word	0x200002f8

080017f0 <Radio_TxBufferPut>:
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	2300      	movs	r3, #0
 8001802:	73bb      	strb	r3, [r7, #14]
 8001804:	e010      	b.n	8001828 <Radio_TxBufferPut+0x38>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	480f      	ldr	r0, [pc, #60]	; (800184c <Radio_TxBufferPut+0x5c>)
 800180e:	f7ff fd85 	bl	800131c <RBuffer_Write>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	4313      	orrs	r3, r2
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	3301      	adds	r3, #1
 8001826:	73bb      	strb	r3, [r7, #14]
 8001828:	7bba      	ldrb	r2, [r7, #14]
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3ea      	bcc.n	8001806 <Radio_TxBufferPut+0x16>
 8001830:	2104      	movs	r1, #4
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <Radio_TxBufferPut+0x5c>)
 8001834:	f7ff fd72 	bl	800131c <RBuffer_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002d4 	.word	0x200002d4

08001850 <Radio_TxBufferSend>:
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001866:	1d3a      	adds	r2, r7, #4
 8001868:	4413      	add	r3, r2
 800186a:	4619      	mov	r1, r3
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <Radio_TxBufferSend+0x78>)
 800186e:	f7ff fd80 	bl	8001372 <RBuffer_Read>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800187a:	4313      	orrs	r3, r2
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800188a:	3328      	adds	r3, #40	; 0x28
 800188c:	443b      	add	r3, r7
 800188e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d003      	beq.n	800189e <Radio_TxBufferSend+0x4e>
 8001896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <Radio_TxBufferSend+0x12>
 800189e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <Radio_TxBufferSend+0x6a>
 80018a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 fe68 	bl	8002584 <nRF24_WriteAckPayload>
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <Radio_TxBufferSend+0x7c>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018be:	4618      	mov	r0, r3
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200002d4 	.word	0x200002d4
 80018cc:	200002d1 	.word	0x200002d1

080018d0 <Radio_Process>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	f000 fdc5 	bl	8002464 <nRF24_Event>
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <Radio_Process+0x64>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <Radio_Process+0x16>
 80018e2:	f7ff ffb5 	bl	8001850 <Radio_TxBufferSend>
 80018e6:	f002 f83d 	bl	8003964 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <Radio_Process+0x68>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b96      	cmp	r3, #150	; 0x96
 80018f4:	d904      	bls.n	8001900 <Radio_Process+0x30>
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <Radio_Process+0x6c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	f000 f832 	bl	8001964 <Radio_NoConnectionCallback>
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <Radio_Process+0x70>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d110      	bne.n	800192a <Radio_Process+0x5a>
 8001908:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff35 	bl	8001780 <Radio_RxBufferGet>
 8001916:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8b2 	bl	8001a88 <Radio_NewCommandReceivedCallback>
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <Radio_Process+0x70>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002d1 	.word	0x200002d1
 8001938:	2000031c 	.word	0x2000031c
 800193c:	200002d0 	.word	0x200002d0
 8001940:	200002d2 	.word	0x200002d2

08001944 <Radio_GetConnectionStatus>:
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <Radio_GetConnectionStatus+0x10>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	200002d0 	.word	0x200002d0

08001958 <Radio_HandlerIRQ>:
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
 800195c:	f000 fd30 	bl	80023c0 <nRF24_IRQ_Handler>
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <Radio_NoConnectionCallback>:
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <nRF24_EventTxCallback>:
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <nRF24_EventTxCallback+0x18>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <nRF24_EventTxCallback+0x1c>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	200002d1 	.word	0x200002d1
 800198c:	200002d0 	.word	0x200002d0

08001990 <nRF24_EventRxCallback>:
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	1dfa      	adds	r2, r7, #7
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fcf7 	bl	8002392 <nRF24_ReadRXPaylaod>
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <nRF24_EventRxCallback+0x48>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	f001 ffdb 	bl	8003964 <HAL_GetTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <nRF24_EventRxCallback+0x4c>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	7a3b      	ldrb	r3, [r7, #8]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d00a      	beq.n	80019d0 <nRF24_EventRxCallback+0x40>
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff feb4 	bl	8001730 <Radio_RxBufferPut>
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <nRF24_EventRxCallback+0x50>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e000      	b.n	80019d2 <nRF24_EventRxCallback+0x42>
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200002d0 	.word	0x200002d0
 80019dc:	2000031c 	.word	0x2000031c
 80019e0:	200002d2 	.word	0x200002d2

080019e4 <nRF24_EventMrCallback>:
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <nRF24_EventMrCallback+0x14>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200002d0 	.word	0x200002d0

080019fc <ConnectionBlinkLED>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	f7ff ffa0 	bl	8001944 <Radio_GetConnectionStatus>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <ConnectionBlinkLED+0x1a>
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <ConnectionBlinkLED+0x40>)
 8001a10:	f002 fa68 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001a14:	e011      	b.n	8001a3a <ConnectionBlinkLED+0x3e>
 8001a16:	f001 ffa5 	bl	8003964 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <ConnectionBlinkLED+0x44>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a26:	d908      	bls.n	8001a3a <ConnectionBlinkLED+0x3e>
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <ConnectionBlinkLED+0x40>)
 8001a2c:	f002 fa72 	bl	8003f14 <HAL_GPIO_TogglePin>
 8001a30:	f001 ff98 	bl	8003964 <HAL_GetTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a02      	ldr	r2, [pc, #8]	; (8001a40 <ConnectionBlinkLED+0x44>)
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	20000324 	.word	0x20000324

08001a44 <KlebotScheduler>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	f7ff ff41 	bl	80018d0 <Radio_Process>
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <KlebotScheduler+0x40>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <KlebotScheduler+0x18>
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <KlebotScheduler+0x40>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	f001 feb0 	bl	80037c0 <Programs_PerformProgram>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d102      	bne.n	8001a70 <KlebotScheduler+0x2c>
 8001a6a:	f001 fe99 	bl	80037a0 <Programs_ClearProgram>
 8001a6e:	e004      	b.n	8001a7a <KlebotScheduler+0x36>
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <KlebotScheduler+0x36>
 8001a76:	f7ff ffc1 	bl	80019fc <ConnectionBlinkLED>
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000328 	.word	0x20000328

08001a88 <Radio_NewCommandReceivedCallback>:
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <Radio_NewCommandReceivedCallback+0x28>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <Radio_NewCommandReceivedCallback+0x1e>
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fdf1 	bl	8001688 <Parser_Klebot>
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000320 	.word	0x20000320

08001ab4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001abc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ac0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001acc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ad0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ad4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001adc:	e000      	b.n	8001ae0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ade:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ae0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f9      	beq.n	8001ade <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001aea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f001 fed6 	bl	80038b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f82e 	bl	8001b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f7ff fc5e 	bl	80013cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b10:	f7ff fd12 	bl	8001538 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001b14:	f000 fd56 	bl	80025c4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001b18:	f000 ff18 	bl	800294c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b1c:	f000 ff6e 	bl	80029fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b20:	f001 f802 	bl	8002b28 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001b24:	f001 f854 	bl	8002bd0 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001b28:	f001 f978 	bl	8002e1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <main+0x5c>)
 8001b34:	f002 f9d6 	bl	8003ee4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <main+0x5c>)
 8001b40:	f002 f9d0 	bl	8003ee4 <HAL_GPIO_WritePin>

  //MotorEnc_Init(&MotorEncoderA, &htim4);
  Motors_Init();
 8001b44:	f001 fc48 	bl	80033d8 <Motors_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <main+0x60>)
 8001b4a:	f003 fe77 	bl	800583c <HAL_TIM_Base_Start_IT>



  Radio_Init(&hspi3);
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <main+0x64>)
 8001b50:	f7ff fdd6 	bl	8001700 <Radio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KlebotScheduler();
 8001b54:	f7ff ff76 	bl	8001a44 <KlebotScheduler>
 8001b58:	e7fc      	b.n	8001b54 <main+0x54>
 8001b5a:	bf00      	nop
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	2000046c 	.word	0x2000046c
 8001b64:	20000338 	.word	0x20000338

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b094      	sub	sp, #80	; 0x50
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 fe1b 	bl	80077b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001baa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fb21 	bl	8004200 <HAL_RCC_OscConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001bc4:	f000 f84d 	bl	8001c62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	230f      	movs	r3, #15
 8001bca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fe22 	bl	800482c <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001bee:	f000 f838 	bl	8001c62 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001bf2:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <SystemClock_Config+0x98>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	42420070 	.word	0x42420070

08001c04 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff50 	bl	8001ab4 <ITM_SendChar>

	return ch;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_TIM_PeriodElapsedCallback>:
		return 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Motors_EncoderSample();
 8001c32:	f001 fc71 	bl	8003518 <Motors_EncoderSample>
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;", MotorEncoderA.Velocity );
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;",(int16_t) MotorEncoderA.Position );
		//HAL_UART_Transmit(&huart2, USB_Buffer, USB_Buffer_Length, 500);

	}
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40001400 	.word	0x40001400

08001c44 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 8001c56:	f7ff fe7f 	bl	8001958 <Radio_HandlerIRQ>

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c66:	b672      	cpsid	i
}
 8001c68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <Error_Handler+0x8>

08001c6c <nRF24_Delay_ms>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fe7d 	bl	8003978 <HAL_Delay>
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <nRF24_SendSpi>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <nRF24_SendSpi+0x28>)
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	f003 f877 	bl	8004d94 <HAL_SPI_Transmit>
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000032c 	.word	0x2000032c

08001cb4 <nRF24_ReadSpi>:
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <nRF24_ReadSpi+0x28>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	f003 f9a4 	bl	800501a <HAL_SPI_Receive>
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000032c 	.word	0x2000032c

08001ce0 <nRF24_ReadRegister>:
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <nRF24_ReadRegister+0x44>)
 8001cf4:	f002 f8f6 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ffc3 	bl	8001c88 <nRF24_SendSpi>
 8001d02:	f107 030f 	add.w	r3, r7, #15
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffd3 	bl	8001cb4 <nRF24_ReadSpi>
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2104      	movs	r1, #4
 8001d12:	4804      	ldr	r0, [pc, #16]	; (8001d24 <nRF24_ReadRegister+0x44>)
 8001d14:	f002 f8e6 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40011400 	.word	0x40011400

08001d28 <nRF24_ReadRegisters>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2104      	movs	r1, #4
 8001d40:	480a      	ldr	r0, [pc, #40]	; (8001d6c <nRF24_ReadRegisters+0x44>)
 8001d42:	f002 f8cf 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff9c 	bl	8001c88 <nRF24_SendSpi>
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f7ff ffad 	bl	8001cb4 <nRF24_ReadSpi>
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <nRF24_ReadRegisters+0x44>)
 8001d60:	f002 f8c0 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40011400 	.word	0x40011400

08001d70 <nRF24_WriteRegister>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f043 0320 	orr.w	r3, r3, #32
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	733b      	strb	r3, [r7, #12]
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	737b      	strb	r3, [r7, #13]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2104      	movs	r1, #4
 8001d92:	4809      	ldr	r0, [pc, #36]	; (8001db8 <nRF24_WriteRegister+0x48>)
 8001d94:	f002 f8a6 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff72 	bl	8001c88 <nRF24_SendSpi>
 8001da4:	2201      	movs	r2, #1
 8001da6:	2104      	movs	r1, #4
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <nRF24_WriteRegister+0x48>)
 8001daa:	f002 f89b 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40011400 	.word	0x40011400

08001dbc <nRF24_WriteRegisters>:
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f043 0320 	orr.w	r3, r3, #32
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2104      	movs	r1, #4
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <nRF24_WriteRegisters+0x4c>)
 8001ddc:	f002 f882 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff4f 	bl	8001c88 <nRF24_SendSpi>
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f7ff ff4a 	bl	8001c88 <nRF24_SendSpi>
 8001df4:	2201      	movs	r2, #1
 8001df6:	2104      	movs	r1, #4
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <nRF24_WriteRegisters+0x4c>)
 8001dfa:	f002 f873 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40011400 	.word	0x40011400

08001e0c <nRF24_RX_Mode>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	f000 f829 	bl	8001e68 <nRF24_ReadConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	4911      	ldr	r1, [pc, #68]	; (8001e60 <nRF24_RX_Mode+0x54>)
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 f9b6 	bl	800218e <nRF24_SetRXAddress>
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 f81f 	bl	8001e78 <nRF24_WriteConfig>
 8001e3a:	2070      	movs	r0, #112	; 0x70
 8001e3c:	f000 f877 	bl	8001f2e <nRF24_WriteStatus>
 8001e40:	f000 f884 	bl	8001f4c <nRF24_FlushRX>
 8001e44:	f000 f89c 	bl	8001f80 <nRF24_FlushTX>
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <nRF24_RX_Mode+0x58>)
 8001e4e:	f002 f849 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff ff0a 	bl	8001c6c <nRF24_Delay_ms>
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000330 	.word	0x20000330
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <nRF24_ReadConfig>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff ff37 	bl	8001ce0 <nRF24_ReadRegister>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <nRF24_WriteConfig>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff ff72 	bl	8001d70 <nRF24_WriteRegister>
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <nRF24_SetPALevel>:
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	2006      	movs	r0, #6
 8001ea0:	f7ff ff1e 	bl	8001ce0 <nRF24_ReadRegister>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b25a      	sxtb	r2, r3
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2006      	movs	r0, #6
 8001ec6:	f7ff ff53 	bl	8001d70 <nRF24_WriteRegister>
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <nRF24_SetDataRate>:
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	2006      	movs	r0, #6
 8001ede:	f7ff feff 	bl	8001ce0 <nRF24_ReadRegister>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d104      	bne.n	8001efe <nRF24_SetDataRate+0x2c>
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e006      	b.n	8001f0c <nRF24_SetDataRate+0x3a>
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d103      	bne.n	8001f0c <nRF24_SetDataRate+0x3a>
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2006      	movs	r0, #6
 8001f12:	f7ff ff2d 	bl	8001d70 <nRF24_WriteRegister>
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <nRF24_ReadStatus>:
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	2007      	movs	r0, #7
 8001f24:	f7ff fedc 	bl	8001ce0 <nRF24_ReadRegister>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <nRF24_WriteStatus>:
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2007      	movs	r0, #7
 8001f3e:	f7ff ff17 	bl	8001d70 <nRF24_WriteRegister>
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <nRF24_FlushRX>:
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	23e2      	movs	r3, #226	; 0xe2
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2104      	movs	r1, #4
 8001f5a:	4808      	ldr	r0, [pc, #32]	; (8001f7c <nRF24_FlushRX+0x30>)
 8001f5c:	f001 ffc2 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	2101      	movs	r1, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe8f 	bl	8001c88 <nRF24_SendSpi>
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <nRF24_FlushRX+0x30>)
 8001f70:	f001 ffb8 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40011400 	.word	0x40011400

08001f80 <nRF24_FlushTX>:
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	23e1      	movs	r3, #225	; 0xe1
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <nRF24_FlushTX+0x30>)
 8001f90:	f001 ffa8 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe75 	bl	8001c88 <nRF24_SendSpi>
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <nRF24_FlushTX+0x30>)
 8001fa4:	f001 ff9e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40011400 	.word	0x40011400

08001fb4 <nRF24_EnableCRC>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	f7ff ff53 	bl	8001e68 <nRF24_ReadConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <nRF24_EnableCRC+0x22>
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e003      	b.n	8001fde <nRF24_EnableCRC+0x2a>
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	f023 0308 	bic.w	r3, r3, #8
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff49 	bl	8001e78 <nRF24_WriteConfig>
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <nRF24_SetCRCLength>:
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	f7ff ff36 	bl	8001e68 <nRF24_ReadConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d104      	bne.n	8002010 <nRF24_SetCRCLength+0x22>
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e003      	b.n	8002018 <nRF24_SetCRCLength+0x2a>
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff2c 	bl	8001e78 <nRF24_WriteConfig>
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <nRF24_SetRetries>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	71bb      	strb	r3, [r7, #6]
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	b25a      	sxtb	r2, r3
 800203e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	2004      	movs	r0, #4
 8002052:	f7ff fe8d 	bl	8001d70 <nRF24_WriteRegister>
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <nRF24_SetRFChannel>:
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	2005      	movs	r0, #5
 8002074:	f7ff fe7c 	bl	8001d70 <nRF24_WriteRegister>
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <nRF24_EnablePipe>:
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d901      	bls.n	800209a <nRF24_EnablePipe+0x1a>
 8002096:	2305      	movs	r3, #5
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	2002      	movs	r0, #2
 800209c:	f7ff fe20 	bl	8001ce0 <nRF24_ReadRegister>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10a      	bne.n	80020c0 <nRF24_EnablePipe+0x40>
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e00b      	b.n	80020d8 <nRF24_EnablePipe+0x58>
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2201      	movs	r2, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4013      	ands	r3, r2
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	4619      	mov	r1, r3
 80020dc:	2002      	movs	r0, #2
 80020de:	f7ff fe47 	bl	8001d70 <nRF24_WriteRegister>
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <nRF24_AutoACK>:
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	460a      	mov	r2, r1
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4613      	mov	r3, r2
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d901      	bls.n	8002104 <nRF24_AutoACK+0x1a>
 8002100:	2305      	movs	r3, #5
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff fdeb 	bl	8001ce0 <nRF24_ReadRegister>
 800210a:	4603      	mov	r3, r0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10a      	bne.n	800212a <nRF24_AutoACK+0x40>
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2201      	movs	r2, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	b25a      	sxtb	r2, r3
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4313      	orrs	r3, r2
 8002124:	b25b      	sxtb	r3, r3
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e00b      	b.n	8002142 <nRF24_AutoACK+0x58>
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	b25b      	sxtb	r3, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	b25a      	sxtb	r2, r3
 8002138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213c:	4013      	ands	r3, r2
 800213e:	b25b      	sxtb	r3, r3
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	4619      	mov	r1, r3
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff fe12 	bl	8001d70 <nRF24_WriteRegister>
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <nRF24_SetAddressWidth>:
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d901      	bls.n	8002168 <nRF24_SetAddressWidth+0x14>
 8002164:	2305      	movs	r3, #5
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d801      	bhi.n	8002172 <nRF24_SetAddressWidth+0x1e>
 800216e:	2303      	movs	r3, #3
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	3b02      	subs	r3, #2
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	2003      	movs	r0, #3
 8002182:	f7ff fdf5 	bl	8001d70 <nRF24_WriteRegister>
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <nRF24_SetRXAddress>:
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	6039      	str	r1, [r7, #0]
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <nRF24_SetRXAddress+0x18>
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d11d      	bne.n	80021e2 <nRF24_SetRXAddress+0x54>
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e00d      	b.n	80021c8 <nRF24_SetRXAddress+0x3a>
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	441a      	add	r2, r3
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	f1c3 0302 	rsb	r3, r3, #2
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	3310      	adds	r3, #16
 80021bc:	443b      	add	r3, r7
 80021be:	f803 2c04 	strb.w	r2, [r3, #-4]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d9ee      	bls.n	80021ac <nRF24_SetRXAddress+0x1e>
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	330a      	adds	r3, #10
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f107 010c 	add.w	r1, r7, #12
 80021d8:	2203      	movs	r2, #3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fdee 	bl	8001dbc <nRF24_WriteRegisters>
 80021e0:	e00a      	b.n	80021f8 <nRF24_SetRXAddress+0x6a>
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	330a      	adds	r3, #10
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	3302      	adds	r3, #2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7ff fdbd 	bl	8001d70 <nRF24_WriteRegister>
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <nRF24_SetTXAddress>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2203      	movs	r2, #3
 800220e:	4619      	mov	r1, r3
 8002210:	200a      	movs	r0, #10
 8002212:	f7ff fd89 	bl	8001d28 <nRF24_ReadRegisters>
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e00c      	b.n	8002236 <nRF24_SetTXAddress+0x36>
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	f1c3 0302 	rsb	r3, r3, #2
 8002224:	3210      	adds	r2, #16
 8002226:	443a      	add	r2, r7
 8002228:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <nRF24_SetTXAddress+0x88>)
 800222e:	54d1      	strb	r1, [r2, r3]
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3301      	adds	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d9ef      	bls.n	800221c <nRF24_SetTXAddress+0x1c>
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e00d      	b.n	800225e <nRF24_SetTXAddress+0x5e>
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	441a      	add	r2, r3
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	f1c3 0302 	rsb	r3, r3, #2
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	3310      	adds	r3, #16
 8002252:	443b      	add	r3, r7
 8002254:	f803 2c04 	strb.w	r2, [r3, #-4]
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	3301      	adds	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d9ee      	bls.n	8002242 <nRF24_SetTXAddress+0x42>
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2203      	movs	r2, #3
 800226a:	4619      	mov	r1, r3
 800226c:	200a      	movs	r0, #10
 800226e:	f7ff fda5 	bl	8001dbc <nRF24_WriteRegisters>
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	2203      	movs	r2, #3
 8002278:	4619      	mov	r1, r3
 800227a:	2010      	movs	r0, #16
 800227c:	f7ff fd9e 	bl	8001dbc <nRF24_WriteRegisters>
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000330 	.word	0x20000330

0800228c <nRF24_ClearInterrupts>:
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	f7ff fe44 	bl	8001f1e <nRF24_ReadStatus>
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fe42 	bl	8001f2e <nRF24_WriteStatus>
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <nRF24_GetDynamicPayloadSize>:
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	2300      	movs	r3, #0
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	2060      	movs	r0, #96	; 0x60
 80022be:	f7ff fd0f 	bl	8001ce0 <nRF24_ReadRegister>
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d906      	bls.n	80022da <nRF24_GetDynamicPayloadSize+0x28>
 80022cc:	f7ff fe3e 	bl	8001f4c <nRF24_FlushRX>
 80022d0:	2002      	movs	r0, #2
 80022d2:	f7ff fccb 	bl	8001c6c <nRF24_Delay_ms>
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <nRF24_GetDynamicPayloadSize+0x2a>
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <nRF24_EnableRXDataReadyIRQ>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	f7ff fdbb 	bl	8001e68 <nRF24_ReadConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <nRF24_EnableRXDataReadyIRQ+0x22>
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e003      	b.n	800230e <nRF24_EnableRXDataReadyIRQ+0x2a>
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fdb1 	bl	8001e78 <nRF24_WriteConfig>
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <nRF24_EnableTXDataSentIRQ>:
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	f7ff fd9e 	bl	8001e68 <nRF24_ReadConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <nRF24_EnableTXDataSentIRQ+0x22>
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e003      	b.n	8002348 <nRF24_EnableTXDataSentIRQ+0x2a>
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	f023 0320 	bic.w	r3, r3, #32
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fd94 	bl	8001e78 <nRF24_WriteConfig>
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <nRF24_EnableMaxRetransmitIRQ>:
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	f7ff fd81 	bl	8001e68 <nRF24_ReadConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <nRF24_EnableMaxRetransmitIRQ+0x22>
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e003      	b.n	8002382 <nRF24_EnableMaxRetransmitIRQ+0x2a>
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	f023 0310 	bic.w	r3, r3, #16
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fd77 	bl	8001e78 <nRF24_WriteConfig>
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <nRF24_ReadRXPaylaod>:
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
 800239c:	f7ff ff89 	bl	80022b2 <nRF24_GetDynamicPayloadSize>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	2061      	movs	r0, #97	; 0x61
 80023b2:	f7ff fcb9 	bl	8001d28 <nRF24_ReadRegisters>
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <nRF24_IRQ_Handler>:
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <nRF24_IRQ_Handler+0x14>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000336 	.word	0x20000336

080023d8 <nRF24_IRQ_Read>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <nRF24_IRQ_Read+0x7c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d130      	bne.n	800244a <nRF24_IRQ_Read+0x72>
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <nRF24_IRQ_Read+0x7c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	f7ff fd96 	bl	8001f1e <nRF24_ReadStatus>
 80023f2:	4603      	mov	r3, r0
 80023f4:	71bb      	strb	r3, [r7, #6]
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <nRF24_IRQ_Read+0x3a>
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <nRF24_IRQ_Read+0x80>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	79bb      	ldrb	r3, [r7, #6]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <nRF24_IRQ_Read+0x52>
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <nRF24_IRQ_Read+0x84>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <nRF24_IRQ_Read+0x6a>
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <nRF24_IRQ_Read+0x88>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fd72 	bl	8001f2e <nRF24_WriteStatus>
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000336 	.word	0x20000336
 8002458:	20000333 	.word	0x20000333
 800245c:	20000334 	.word	0x20000334
 8002460:	20000335 	.word	0x20000335

08002464 <nRF24_Event>:
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
 8002468:	f7ff ffb6 	bl	80023d8 <nRF24_IRQ_Read>
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <nRF24_Event+0x44>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <nRF24_Event+0x1a>
 8002474:	f7ff fa8c 	bl	8001990 <nRF24_EventRxCallback>
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <nRF24_Event+0x44>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <nRF24_Event+0x48>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <nRF24_Event+0x2c>
 8002486:	f7ff fa73 	bl	8001970 <nRF24_EventTxCallback>
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <nRF24_Event+0x48>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <nRF24_Event+0x4c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <nRF24_Event+0x3e>
 8002498:	f7ff faa4 	bl	80019e4 <nRF24_EventMrCallback>
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <nRF24_Event+0x4c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000333 	.word	0x20000333
 80024ac:	20000334 	.word	0x20000334
 80024b0:	20000335 	.word	0x20000335

080024b4 <nRF24_Init>:
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <nRF24_Init+0xc4>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2110      	movs	r1, #16
 80024c6:	482d      	ldr	r0, [pc, #180]	; (800257c <nRF24_Init+0xc8>)
 80024c8:	f001 fd0c 	bl	8003ee4 <HAL_GPIO_WritePin>
 80024cc:	2201      	movs	r2, #1
 80024ce:	2104      	movs	r1, #4
 80024d0:	482b      	ldr	r0, [pc, #172]	; (8002580 <nRF24_Init+0xcc>)
 80024d2:	f001 fd07 	bl	8003ee4 <HAL_GPIO_WritePin>
 80024d6:	2005      	movs	r0, #5
 80024d8:	f7ff fbc8 	bl	8001c6c <nRF24_Delay_ms>
 80024dc:	2003      	movs	r0, #3
 80024de:	f7ff fcd9 	bl	8001e94 <nRF24_SetPALevel>
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7ff fcf5 	bl	8001ed2 <nRF24_SetDataRate>
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7ff fd63 	bl	8001fb4 <nRF24_EnableCRC>
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7ff fd7d 	bl	8001fee <nRF24_SetCRCLength>
 80024f4:	2107      	movs	r1, #7
 80024f6:	2004      	movs	r0, #4
 80024f8:	f7ff fd96 	bl	8002028 <nRF24_SetRetries>
 80024fc:	201d      	movs	r0, #29
 80024fe:	f7ff fbef 	bl	8001ce0 <nRF24_ReadRegister>
 8002502:	4603      	mov	r3, r0
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4619      	mov	r1, r3
 800250c:	201d      	movs	r0, #29
 800250e:	f7ff fc2f 	bl	8001d70 <nRF24_WriteRegister>
 8002512:	213f      	movs	r1, #63	; 0x3f
 8002514:	201c      	movs	r0, #28
 8002516:	f7ff fc2b 	bl	8001d70 <nRF24_WriteRegister>
 800251a:	200a      	movs	r0, #10
 800251c:	f7ff fd9f 	bl	800205e <nRF24_SetRFChannel>
 8002520:	2101      	movs	r1, #1
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fdac 	bl	8002080 <nRF24_EnablePipe>
 8002528:	2101      	movs	r1, #1
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff fddd 	bl	80020ea <nRF24_AutoACK>
 8002530:	2003      	movs	r0, #3
 8002532:	f7ff fe0f 	bl	8002154 <nRF24_SetAddressWidth>
 8002536:	2001      	movs	r0, #1
 8002538:	f7ff fb98 	bl	8001c6c <nRF24_Delay_ms>
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff fed1 	bl	80022e4 <nRF24_EnableRXDataReadyIRQ>
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff feeb 	bl	800231e <nRF24_EnableTXDataSentIRQ>
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ff05 	bl	8002358 <nRF24_EnableMaxRetransmitIRQ>
 800254e:	2001      	movs	r0, #1
 8002550:	f7ff fb8c 	bl	8001c6c <nRF24_Delay_ms>
 8002554:	f7ff fe9a 	bl	800228c <nRF24_ClearInterrupts>
 8002558:	201d      	movs	r0, #29
 800255a:	f7ff fbc1 	bl	8001ce0 <nRF24_ReadRegister>
 800255e:	4603      	mov	r3, r0
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	201d      	movs	r0, #29
 800256a:	f7ff fc01 	bl	8001d70 <nRF24_WriteRegister>
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000032c 	.word	0x2000032c
 800257c:	40010c00 	.word	0x40010c00
 8002580:	40011400 	.word	0x40011400

08002584 <nRF24_WriteAckPayload>:
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	4613      	mov	r3, r2
 8002592:	71bb      	strb	r3, [r7, #6]
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	2b20      	cmp	r3, #32
 8002598:	d901      	bls.n	800259e <nRF24_WriteAckPayload+0x1a>
 800259a:	2301      	movs	r3, #1
 800259c:	e00d      	b.n	80025ba <nRF24_WriteAckPayload+0x36>
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	71fb      	strb	r3, [r7, #7]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f063 0357 	orn	r3, r3, #87	; 0x57
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	79ba      	ldrb	r2, [r7, #6]
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc02 	bl	8001dbc <nRF24_WriteRegisters>
 80025b8:	2300      	movs	r3, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <MX_SPI3_Init>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <MX_SPI3_Init+0x64>)
 80025ca:	4a18      	ldr	r2, [pc, #96]	; (800262c <MX_SPI3_Init+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <MX_SPI3_Init+0x64>)
 80025d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_SPI3_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_SPI3_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_SPI3_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_SPI3_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_SPI3_Init+0x64>)
 80025f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f4:	619a      	str	r2, [r3, #24]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_SPI3_Init+0x64>)
 80025f8:	2218      	movs	r2, #24
 80025fa:	61da      	str	r2, [r3, #28]
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <MX_SPI3_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	621a      	str	r2, [r3, #32]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_SPI3_Init+0x64>)
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <MX_SPI3_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_SPI3_Init+0x64>)
 8002610:	220a      	movs	r2, #10
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_SPI3_Init+0x64>)
 8002616:	f002 fb39 	bl	8004c8c <HAL_SPI_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_SPI3_Init+0x60>
 8002620:	f7ff fb1f 	bl	8001c62 <Error_Handler>
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000338 	.word	0x20000338
 800262c:	40003c00 	.word	0x40003c00

08002630 <HAL_SPI_MspInit>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <HAL_SPI_MspInit+0xa8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d13f      	bne.n	80026d0 <HAL_SPI_MspInit+0xa0>
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_SPI_MspInit+0xac>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <HAL_SPI_MspInit+0xac>)
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	61d3      	str	r3, [r2, #28]
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_SPI_MspInit+0xac>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_SPI_MspInit+0xac>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_SPI_MspInit+0xac>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_SPI_MspInit+0xac>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4812      	ldr	r0, [pc, #72]	; (80026e0 <HAL_SPI_MspInit+0xb0>)
 8002696:	f001 faa1 	bl	8003bdc <HAL_GPIO_Init>
 800269a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	480c      	ldr	r0, [pc, #48]	; (80026e0 <HAL_SPI_MspInit+0xb0>)
 80026b0:	f001 fa94 	bl	8003bdc <HAL_GPIO_Init>
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_SPI_MspInit+0xb4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_SPI_MspInit+0xb4>)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	6053      	str	r3, [r2, #4]
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40003c00 	.word	0x40003c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40011000 	.word	0x40011000
 80026e4:	40010000 	.word	0x40010000

080026e8 <HAL_MspInit>:
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_MspInit+0x5c>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_MspInit+0x5c>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6193      	str	r3, [r2, #24]
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_MspInit+0x5c>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_MspInit+0x5c>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_MspInit+0x5c>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_MspInit+0x5c>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_MspInit+0x60>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_MspInit+0x60>)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6053      	str	r3, [r2, #4]
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000

0800274c <NMI_Handler>:
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <DebugMon_Handler>:
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <SysTick_Handler>:
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
 8002792:	f001 f8d5 	bl	8003940 <HAL_IncTick>
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <EXTI15_10_IRQHandler>:
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
 800279e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027a2:	f001 fbd1 	bl	8003f48 <HAL_GPIO_EXTI_IRQHandler>
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <TIM7_IRQHandler>:
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM7_IRQHandler+0x10>)
 80027b2:	f003 facf 	bl	8005d54 <HAL_TIM_IRQHandler>
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000046c 	.word	0x2000046c

080027c0 <_getpid>:
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	2301      	movs	r3, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <_kill>:
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
 80027d8:	f005 f83e 	bl	8007858 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	2216      	movs	r2, #22
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_exit>:
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	f04f 31ff 	mov.w	r1, #4294967295
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffe7 	bl	80027ce <_kill>
 8002800:	e7fe      	b.n	8002800 <_exit+0x12>

08002802 <_read>:
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e00a      	b.n	800282a <_read+0x28>
 8002814:	f3af 8000 	nop.w
 8002818:	4601      	mov	r1, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60ba      	str	r2, [r7, #8]
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbf0      	blt.n	8002814 <_read+0x12>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_write>:
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e009      	b.n	8002862 <_write+0x26>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	60ba      	str	r2, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f9d4 	bl	8001c04 <__io_putchar>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf1      	blt.n	800284e <_write+0x12>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_close>:
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <_fstat>:
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	2300      	movs	r3, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_isatty>:
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	2301      	movs	r3, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <_lseek>:
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	2300      	movs	r3, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <_sbrk>:
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <_sbrk+0x5c>)
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <_sbrk+0x60>)
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <_sbrk+0x22>
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_sbrk+0x64>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <_sbrk+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <_sbrk+0x40>
 8002904:	f004 ffa8 	bl	8007858 <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e009      	b.n	8002928 <_sbrk+0x54>
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <_sbrk+0x64>)
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20010000 	.word	0x20010000
 8002934:	00001000 	.word	0x00001000
 8002938:	20000390 	.word	0x20000390
 800293c:	20000788 	.word	0x20000788

08002940 <SystemInit>:
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f004 ff29 	bl	80077b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <MX_TIM1_Init+0xa8>)
 800296a:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <MX_TIM1_Init+0xac>)
 800296c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <MX_TIM1_Init+0xa8>)
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_TIM1_Init+0xa8>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <MX_TIM1_Init+0xa8>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002994:	2303      	movs	r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800299c:	2301      	movs	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4619      	mov	r1, r3
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <MX_TIM1_Init+0xa8>)
 80029c0:	f003 f898 	bl	8005af4 <HAL_TIM_Encoder_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80029ca:	f7ff f94a 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <MX_TIM1_Init+0xa8>)
 80029dc:	f003 ff1e 	bl	800681c <HAL_TIMEx_MasterConfigSynchronization>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80029e6:	f7ff f93c 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	3730      	adds	r7, #48	; 0x30
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000394 	.word	0x20000394
 80029f8:	40012c00 	.word	0x40012c00

080029fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	; (8002b24 <MX_TIM3_Init+0x128>)
 8002a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a50:	4833      	ldr	r0, [pc, #204]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a52:	f002 fea3 	bl	800579c <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002a5c:	f7ff f901 	bl	8001c62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	482c      	ldr	r0, [pc, #176]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a6e:	f003 fb3b 	bl	80060e8 <HAL_TIM_ConfigClockSource>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002a78:	f7ff f8f3 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a7c:	4828      	ldr	r0, [pc, #160]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a7e:	f002 ff37 	bl	80058f0 <HAL_TIM_PWM_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002a88:	f7ff f8eb 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002a9c:	f003 febe 	bl	800681c <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002aa6:	f7ff f8dc 	bl	8001c62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aaa:	2360      	movs	r3, #96	; 0x60
 8002aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4817      	ldr	r0, [pc, #92]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002ac2:	f003 fa4f 	bl	8005f64 <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002acc:	f7ff f8c9 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4812      	ldr	r0, [pc, #72]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002ad8:	f003 fa44 	bl	8005f64 <HAL_TIM_PWM_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002ae2:	f7ff f8be 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2208      	movs	r2, #8
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002aee:	f003 fa39 	bl	8005f64 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002af8:	f7ff f8b3 	bl	8001c62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	220c      	movs	r2, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	4807      	ldr	r0, [pc, #28]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002b04:	f003 fa2e 	bl	8005f64 <HAL_TIM_PWM_ConfigChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002b0e:	f7ff f8a8 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <MX_TIM3_Init+0x124>)
 8002b14:	f000 f93a 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200003dc 	.word	0x200003dc
 8002b24:	40000400 	.word	0x40000400

08002b28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fe3b 	bl	80077b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b46:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <MX_TIM4_Init+0xa4>)
 8002b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b82:	2301      	movs	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002b96:	f002 ffad 	bl	8005af4 <HAL_TIM_Encoder_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ba0:	f7ff f85f 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM4_Init+0xa0>)
 8002bb2:	f003 fe33 	bl	800681c <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002bbc:	f7ff f851 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000424 	.word	0x20000424
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <MX_TIM7_Init+0x68>)
 8002be2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002be6:	2247      	movs	r2, #71	; 0x47
 8002be8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002bf2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002c00:	f002 fdcc 	bl	800579c <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002c0a:	f7ff f82a 	bl	8001c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c16:	463b      	mov	r3, r7
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4806      	ldr	r0, [pc, #24]	; (8002c34 <MX_TIM7_Init+0x64>)
 8002c1c:	f003 fdfe 	bl	800681c <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002c26:	f7ff f81c 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000046c 	.word	0x2000046c
 8002c38:	40001400 	.word	0x40001400

08002c3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d125      	bne.n	8002ca8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8002c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	481a      	ldr	r0, [pc, #104]	; (8002d0c <HAL_TIM_Encoder_MspInit+0xd0>)
 8002ca2:	f000 ff9b 	bl	8003bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ca6:	e028      	b.n	8002cfa <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d123      	bne.n	8002cfa <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6193      	str	r3, [r2, #24]
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f107 0318 	add.w	r3, r7, #24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002cf6:	f000 ff71 	bl	8003bdc <HAL_GPIO_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	40000800 	.word	0x40000800
 8002d14:	40010c00 	.word	0x40010c00

08002d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_TIM_Base_MspInit+0x68>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10c      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d42:	e018      	b.n	8002d76 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_TIM_Base_MspInit+0x70>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d113      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d54:	f043 0320 	orr.w	r3, r3, #32
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_TIM_Base_MspInit+0x6c>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2037      	movs	r0, #55	; 0x37
 8002d6c:	f000 feff 	bl	8003b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d70:	2037      	movs	r0, #55	; 0x37
 8002d72:	f000 ff18 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40001400 	.word	0x40001400

08002d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_MspPostInit+0x80>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d12a      	bne.n	8002e02 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_TIM_MspPostInit+0x84>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_TIM_MspPostInit+0x84>)
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_TIM_MspPostInit+0x84>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8002dc4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480e      	ldr	r0, [pc, #56]	; (8002e14 <HAL_TIM_MspPostInit+0x88>)
 8002dda:	f000 feff 	bl	8003bdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_TIM_MspPostInit+0x8c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <HAL_TIM_MspPostInit+0x8c>)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40010000 	.word	0x40010000

08002e1c <MX_USART2_UART_Init>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <MX_USART2_UART_Init+0x50>)
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_USART2_UART_Init+0x4c>)
 8002e54:	f003 fd5a 	bl	800690c <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART2_UART_Init+0x46>
 8002e5e:	f7fe ff00 	bl	8001c62 <Error_Handler>
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200004b4 	.word	0x200004b4
 8002e6c:	40004400 	.word	0x40004400

08002e70 <HAL_UART_MspInit>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_UART_MspInit+0x88>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d12f      	bne.n	8002ef0 <HAL_UART_MspInit+0x80>
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9a:	61d3      	str	r3, [r2, #28]
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	2303      	movs	r3, #3
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480b      	ldr	r0, [pc, #44]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002ed4:	f000 fe82 	bl	8003bdc <HAL_GPIO_Init>
 8002ed8:	2308      	movs	r3, #8
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002eec:	f000 fe76 	bl	8003bdc <HAL_GPIO_Init>
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40004400 	.word	0x40004400
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010800 	.word	0x40010800

08002f04 <DRV8836_Init>:
 */
#include "Motors/drv8836.h"
#include "tim.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	460b      	mov	r3, r1
 8002f14:	80fb      	strh	r3, [r7, #6]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88ba      	ldrh	r2, [r7, #4]
 8002f2a:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8b3a      	ldrh	r2, [r7, #24]
 8002f30:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8bba      	ldrh	r2, [r7, #28]
 8002f36:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	891b      	ldrh	r3, [r3, #8]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f002 fd2c 	bl	80059a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	895b      	ldrh	r3, [r3, #10]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f002 fd24 	bl	80059a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	899b      	ldrh	r3, [r3, #12]
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f002 fd1c 	bl	80059a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	89db      	ldrh	r3, [r3, #14]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f002 fd14 	bl	80059a0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <DRV8836_Init+0x86>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
 8002f88:	e016      	b.n	8002fb8 <DRV8836_Init+0xb4>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d105      	bne.n	8002f9c <DRV8836_Init+0x98>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	6393      	str	r3, [r2, #56]	; 0x38
 8002f9a:	e00d      	b.n	8002fb8 <DRV8836_Init+0xb4>
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d105      	bne.n	8002fae <DRV8836_Init+0xaa>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002fac:	e004      	b.n	8002fb8 <DRV8836_Init+0xb4>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <DRV8836_Init+0xc6>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc8:	e016      	b.n	8002ff8 <DRV8836_Init+0xf4>
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d105      	bne.n	8002fdc <DRV8836_Init+0xd8>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6393      	str	r3, [r2, #56]	; 0x38
 8002fda:	e00d      	b.n	8002ff8 <DRV8836_Init+0xf4>
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d105      	bne.n	8002fee <DRV8836_Init+0xea>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002fec:	e004      	b.n	8002ff8 <DRV8836_Init+0xf4>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 8002ff8:	8b3b      	ldrh	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <DRV8836_Init+0x106>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34
 8003008:	e016      	b.n	8003038 <DRV8836_Init+0x134>
 800300a:	8b3b      	ldrh	r3, [r7, #24]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d105      	bne.n	800301c <DRV8836_Init+0x118>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	6393      	str	r3, [r2, #56]	; 0x38
 800301a:	e00d      	b.n	8003038 <DRV8836_Init+0x134>
 800301c:	8b3b      	ldrh	r3, [r7, #24]
 800301e:	2b08      	cmp	r3, #8
 8003020:	d105      	bne.n	800302e <DRV8836_Init+0x12a>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800302c:	e004      	b.n	8003038 <DRV8836_Init+0x134>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8003038:	8bbb      	ldrh	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <DRV8836_Init+0x146>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003048:	e016      	b.n	8003078 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800304a:	8bbb      	ldrh	r3, [r7, #28]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d105      	bne.n	800305c <DRV8836_Init+0x158>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	6393      	str	r3, [r2, #56]	; 0x38
}
 800305a:	e00d      	b.n	8003078 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800305c:	8bbb      	ldrh	r3, [r7, #28]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d105      	bne.n	800306e <DRV8836_Init+0x16a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800306c:	e004      	b.n	8003078 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <DRV8836_SetMotor>:

DRV8836_Error_t DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	70bb      	strb	r3, [r7, #2]
 8003096:	4613      	mov	r3, r2
 8003098:	803b      	strh	r3, [r7, #0]
	DRV8836_Direction_t *TargetDirection;
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;

	if(speed > ic->drv_htim->Instance->ARR) //check if pwm value fit the counter period range
 800309a:	883a      	ldrh	r2, [r7, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d901      	bls.n	80030ac <DRV8836_SetMotor+0x2c>
	{
		return DRV8836_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e14e      	b.n	800334a <DRV8836_SetMotor+0x2ca>
	}

	if(Output_A == output)
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <DRV8836_SetMotor+0x4c>
	{
		TargetForwardChannel = ic->a_forward_channel;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	891b      	ldrh	r3, [r3, #8]
 80030b6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	895b      	ldrh	r3, [r3, #10]
 80030bc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3310      	adds	r3, #16
 80030c2:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3314      	adds	r3, #20
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e011      	b.n	80030f0 <DRV8836_SetMotor+0x70>
	}
	else if(Output_B == output)
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10c      	bne.n	80030ec <DRV8836_SetMotor+0x6c>
	{
		TargetForwardChannel = ic->b_forward_channel;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	899b      	ldrh	r3, [r3, #12]
 80030d6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	89db      	ldrh	r3, [r3, #14]
 80030dc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3312      	adds	r3, #18
 80030e2:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3315      	adds	r3, #21
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e001      	b.n	80030f0 <DRV8836_SetMotor+0x70>
	}
	else
	{
		return DRV8836_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e12c      	b.n	800334a <DRV8836_SetMotor+0x2ca>
	}

	switch(direction)
 80030f0:	78bb      	ldrb	r3, [r7, #2]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	f200 8120 	bhi.w	8003338 <DRV8836_SetMotor+0x2b8>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <DRV8836_SetMotor+0x80>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003111 	.word	0x08003111
 8003104:	08003193 	.word	0x08003193
 8003108:	08003215 	.word	0x08003215
 800310c:	08003297 	.word	0x08003297
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <DRV8836_SetMotor+0xa2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34
 8003120:	e016      	b.n	8003150 <DRV8836_SetMotor+0xd0>
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d105      	bne.n	8003134 <DRV8836_SetMotor+0xb4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	6393      	str	r3, [r2, #56]	; 0x38
 8003132:	e00d      	b.n	8003150 <DRV8836_SetMotor+0xd0>
 8003134:	89fb      	ldrh	r3, [r7, #14]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d105      	bne.n	8003146 <DRV8836_SetMotor+0xc6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2300      	movs	r3, #0
 8003142:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003144:	e004      	b.n	8003150 <DRV8836_SetMotor+0xd0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003150:	89bb      	ldrh	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <DRV8836_SetMotor+0xe2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003160:	e0ec      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003162:	89bb      	ldrh	r3, [r7, #12]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d105      	bne.n	8003174 <DRV8836_SetMotor+0xf4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003172:	e0e3      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003174:	89bb      	ldrh	r3, [r7, #12]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d105      	bne.n	8003186 <DRV8836_SetMotor+0x106>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	2300      	movs	r3, #0
 8003182:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003184:	e0da      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003190:	e0d4      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <DRV8836_SetMotor+0x124>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34
 80031a2:	e016      	b.n	80031d2 <DRV8836_SetMotor+0x152>
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d105      	bne.n	80031b6 <DRV8836_SetMotor+0x136>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	6393      	str	r3, [r2, #56]	; 0x38
 80031b4:	e00d      	b.n	80031d2 <DRV8836_SetMotor+0x152>
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d105      	bne.n	80031c8 <DRV8836_SetMotor+0x148>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80031c6:	e004      	b.n	80031d2 <DRV8836_SetMotor+0x152>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80031d2:	89bb      	ldrh	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <DRV8836_SetMotor+0x164>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	883a      	ldrh	r2, [r7, #0]
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80031e2:	e0ab      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80031e4:	89bb      	ldrh	r3, [r7, #12]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d105      	bne.n	80031f6 <DRV8836_SetMotor+0x176>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	883b      	ldrh	r3, [r7, #0]
 80031f2:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80031f4:	e0a2      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80031f6:	89bb      	ldrh	r3, [r7, #12]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d105      	bne.n	8003208 <DRV8836_SetMotor+0x188>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	883b      	ldrh	r3, [r7, #0]
 8003204:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003206:	e099      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	883b      	ldrh	r3, [r7, #0]
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003212:	e093      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 8003214:	89fb      	ldrh	r3, [r7, #14]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <DRV8836_SetMotor+0x1a6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	883a      	ldrh	r2, [r7, #0]
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
 8003224:	e016      	b.n	8003254 <DRV8836_SetMotor+0x1d4>
 8003226:	89fb      	ldrh	r3, [r7, #14]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d105      	bne.n	8003238 <DRV8836_SetMotor+0x1b8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	883b      	ldrh	r3, [r7, #0]
 8003234:	6393      	str	r3, [r2, #56]	; 0x38
 8003236:	e00d      	b.n	8003254 <DRV8836_SetMotor+0x1d4>
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	2b08      	cmp	r3, #8
 800323c:	d105      	bne.n	800324a <DRV8836_SetMotor+0x1ca>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	883b      	ldrh	r3, [r7, #0]
 8003246:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003248:	e004      	b.n	8003254 <DRV8836_SetMotor+0x1d4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	883b      	ldrh	r3, [r7, #0]
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003254:	89bb      	ldrh	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <DRV8836_SetMotor+0x1e6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003264:	e06a      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003266:	89bb      	ldrh	r3, [r7, #12]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d105      	bne.n	8003278 <DRV8836_SetMotor+0x1f8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003276:	e061      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003278:	89bb      	ldrh	r3, [r7, #12]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d105      	bne.n	800328a <DRV8836_SetMotor+0x20a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003288:	e058      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003294:	e052      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <DRV8836_SetMotor+0x22c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
 80032aa:	e01c      	b.n	80032e6 <DRV8836_SetMotor+0x266>
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d107      	bne.n	80032c2 <DRV8836_SetMotor+0x242>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6852      	ldr	r2, [r2, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	6393      	str	r3, [r2, #56]	; 0x38
 80032c0:	e011      	b.n	80032e6 <DRV8836_SetMotor+0x266>
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d107      	bne.n	80032d8 <DRV8836_SetMotor+0x258>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6852      	ldr	r2, [r2, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80032d6:	e006      	b.n	80032e6 <DRV8836_SetMotor+0x266>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6852      	ldr	r2, [r2, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80032e6:	89bb      	ldrh	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <DRV8836_SetMotor+0x27c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80032fa:	e01f      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80032fc:	89bb      	ldrh	r3, [r7, #12]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <DRV8836_SetMotor+0x292>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6852      	ldr	r2, [r2, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003310:	e014      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d107      	bne.n	8003328 <DRV8836_SetMotor+0x2a8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6852      	ldr	r2, [r2, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003326:	e009      	b.n	800333c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6852      	ldr	r2, [r2, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003336:	e001      	b.n	800333c <DRV8836_SetMotor+0x2bc>

	default:
		return DRV8836_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e006      	b.n	800334a <DRV8836_SetMotor+0x2ca>
		break;
	}

	*TargetDirection = direction;	//save set direction and speed to struct
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	78ba      	ldrb	r2, [r7, #2]
 8003340:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	883a      	ldrh	r2, [r7, #0]
 8003346:	801a      	strh	r2, [r3, #0]

	return DRV8836_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8003364:	213c      	movs	r1, #60	; 0x3c
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f002 fc66 	bl	8005c38 <HAL_TIM_Encoder_Start>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <MotorEnc_Update>:


void MotorEnc_Update(MotorEncoder_t *encoder)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	/* Calculate counter difference */
	int CounterDif = encoder->htimEnc->Instance->CNT - encoder->LastCounter;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
	/* Check if counter has changed */
	if(CounterDif >= 1 || CounterDif <= -1)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	dc02      	bgt.n	8003398 <MotorEnc_Update+0x24>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da0a      	bge.n	80033ae <MotorEnc_Update+0x3a>
	{
		/* Velocity is equal to difference, very important type casting! */
		/* Casting uint32_t to int8_t solves overflow problem in fast and correct way */
		encoder->Velocity = (int8_t)(CounterDif);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	b25a      	sxtb	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	711a      	strb	r2, [r3, #4]
		encoder->LastCounter = encoder->htimEnc->Instance->CNT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	e002      	b.n	80033b4 <MotorEnc_Update+0x40>
	}
	else
	{
		encoder->Velocity = 0;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	711a      	strb	r2, [r3, #4]
	}

	encoder->Position += encoder->Velocity;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	b21a      	sxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	819a      	strh	r2, [r3, #12]

	//TODO: calculate RPM, position and start working on PID
	// 300RPM, 1:50 ratio,

}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <Motors_Init>:
//
// -- Init --
//

void Motors_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af02      	add	r7, sp, #8
	DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80033de:	230c      	movs	r3, #12
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2308      	movs	r3, #8
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2304      	movs	r3, #4
 80033e8:	2200      	movs	r2, #0
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <Motors_Init+0x3c>)
 80033ec:	480a      	ldr	r0, [pc, #40]	; (8003418 <Motors_Init+0x40>)
 80033ee:	f7ff fd89 	bl	8002f04 <DRV8836_Init>
	MotorEnc_Init(&MotorEncoderA, &htim1);
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <Motors_Init+0x44>)
 80033f4:	480a      	ldr	r0, [pc, #40]	; (8003420 <Motors_Init+0x48>)
 80033f6:	f7ff ffad 	bl	8003354 <MotorEnc_Init>
	MotorEnc_Init(&MotorEncoderB, &htim4);
 80033fa:	490a      	ldr	r1, [pc, #40]	; (8003424 <Motors_Init+0x4c>)
 80033fc:	480a      	ldr	r0, [pc, #40]	; (8003428 <Motors_Init+0x50>)
 80033fe:	f7ff ffa9 	bl	8003354 <MotorEnc_Init>

	FIRFilter_Init(&EncoderFilterA);
 8003402:	480a      	ldr	r0, [pc, #40]	; (800342c <Motors_Init+0x54>)
 8003404:	f7fd ff14 	bl	8001230 <FIRFilter_Init>
	FIRFilter_Init(&EncoderFilterB);
 8003408:	4809      	ldr	r0, [pc, #36]	; (8003430 <Motors_Init+0x58>)
 800340a:	f7fd ff11 	bl	8001230 <FIRFilter_Init>
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200003dc 	.word	0x200003dc
 8003418:	200004fc 	.word	0x200004fc
 800341c:	20000394 	.word	0x20000394
 8003420:	20000514 	.word	0x20000514
 8003424:	20000424 	.word	0x20000424
 8003428:	2000052c 	.word	0x2000052c
 800342c:	20000544 	.word	0x20000544
 8003430:	200005b0 	.word	0x200005b0

08003434 <Motors_SetMotorPWM>:
{
	DRV8836_SetMotor(&MotorDriver, motorAB, direction, speed);
}

Motors_Error_t Motors_SetMotorPWM(DRV8836_Output_t motorAB, uint16_t speed)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	460a      	mov	r2, r1
 800343e:	71fb      	strb	r3, [r7, #7]
 8003440:	4613      	mov	r3, r2
 8003442:	80bb      	strh	r3, [r7, #4]
	switch(motorAB)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <Motors_SetMotorPWM+0x1c>
 800344a:	2b01      	cmp	r3, #1
 800344c:	d009      	beq.n	8003462 <Motors_SetMotorPWM+0x2e>
 800344e:	e011      	b.n	8003474 <Motors_SetMotorPWM+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.a_direction, speed);
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <Motors_SetMotorPWM+0x4c>)
 8003452:	7d1a      	ldrb	r2, [r3, #20]
 8003454:	88bb      	ldrh	r3, [r7, #4]
 8003456:	79f9      	ldrb	r1, [r7, #7]
 8003458:	4809      	ldr	r0, [pc, #36]	; (8003480 <Motors_SetMotorPWM+0x4c>)
 800345a:	f7ff fe11 	bl	8003080 <DRV8836_SetMotor>
 800345e:	4603      	mov	r3, r0
 8003460:	e009      	b.n	8003476 <Motors_SetMotorPWM+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.b_direction, speed);
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <Motors_SetMotorPWM+0x4c>)
 8003464:	7d5a      	ldrb	r2, [r3, #21]
 8003466:	88bb      	ldrh	r3, [r7, #4]
 8003468:	79f9      	ldrb	r1, [r7, #7]
 800346a:	4805      	ldr	r0, [pc, #20]	; (8003480 <Motors_SetMotorPWM+0x4c>)
 800346c:	f7ff fe08 	bl	8003080 <DRV8836_SetMotor>
 8003470:	4603      	mov	r3, r0
 8003472:	e000      	b.n	8003476 <Motors_SetMotorPWM+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8003474:	2301      	movs	r3, #1
		break;
	}
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200004fc 	.word	0x200004fc

08003484 <Motors_SetMotorDirection>:

Motors_Error_t Motors_SetMotorDirection(DRV8836_Output_t motorAB, DRV8836_Direction_t direction)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	460a      	mov	r2, r1
 800348e:	71fb      	strb	r3, [r7, #7]
 8003490:	4613      	mov	r3, r2
 8003492:	71bb      	strb	r3, [r7, #6]
	switch(motorAB)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <Motors_SetMotorDirection+0x1c>
 800349a:	2b01      	cmp	r3, #1
 800349c:	d009      	beq.n	80034b2 <Motors_SetMotorDirection+0x2e>
 800349e:	e011      	b.n	80034c4 <Motors_SetMotorDirection+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.a_speed);
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <Motors_SetMotorDirection+0x4c>)
 80034a2:	8a1b      	ldrh	r3, [r3, #16]
 80034a4:	79ba      	ldrb	r2, [r7, #6]
 80034a6:	79f9      	ldrb	r1, [r7, #7]
 80034a8:	4809      	ldr	r0, [pc, #36]	; (80034d0 <Motors_SetMotorDirection+0x4c>)
 80034aa:	f7ff fde9 	bl	8003080 <DRV8836_SetMotor>
 80034ae:	4603      	mov	r3, r0
 80034b0:	e009      	b.n	80034c6 <Motors_SetMotorDirection+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.b_speed);
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <Motors_SetMotorDirection+0x4c>)
 80034b4:	8a5b      	ldrh	r3, [r3, #18]
 80034b6:	79ba      	ldrb	r2, [r7, #6]
 80034b8:	79f9      	ldrb	r1, [r7, #7]
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <Motors_SetMotorDirection+0x4c>)
 80034bc:	f7ff fde0 	bl	8003080 <DRV8836_SetMotor>
 80034c0:	4603      	mov	r3, r0
 80034c2:	e000      	b.n	80034c6 <Motors_SetMotorDirection+0x42>
		break;

	default:
		return MOTORS_ERROR;
 80034c4:	2301      	movs	r3, #1
		break;
	}
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200004fc 	.word	0x200004fc

080034d4 <Motors_SetMotorsOff>:

Motors_Error_t Motors_SetMotorsOff(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
	Motors_Error_t status = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, Output_A, Coast, 0);
 80034de:	2300      	movs	r3, #0
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	480b      	ldr	r0, [pc, #44]	; (8003514 <Motors_SetMotorsOff+0x40>)
 80034e6:	f7ff fdcb 	bl	8003080 <DRV8836_SetMotor>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, Output_B, Coast, 0);
 80034f4:	2300      	movs	r3, #0
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	4806      	ldr	r0, [pc, #24]	; (8003514 <Motors_SetMotorsOff+0x40>)
 80034fc:	f7ff fdc0 	bl	8003080 <DRV8836_SetMotor>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	4313      	orrs	r3, r2
 8003508:	71fb      	strb	r3, [r7, #7]
	return status;
 800350a:	79fb      	ldrb	r3, [r7, #7]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200004fc 	.word	0x200004fc

08003518 <Motors_EncoderSample>:
//
// -- Encoder routine --
//

void Motors_EncoderSample(void)						//call this function with encoder sampling frequency
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	MotorEnc_Update(&MotorEncoderA);
 800351c:	481f      	ldr	r0, [pc, #124]	; (800359c <Motors_EncoderSample+0x84>)
 800351e:	f7ff ff29 	bl	8003374 <MotorEnc_Update>
	MotorEnc_Update(&MotorEncoderB);
 8003522:	481f      	ldr	r0, [pc, #124]	; (80035a0 <Motors_EncoderSample+0x88>)
 8003524:	f7ff ff26 	bl	8003374 <MotorEnc_Update>
	//MotorEnc_FilterVelocity(&MotorEncoderA);
	//MotorEnc_FilterVelocity(&MotorEncoderB);

	MotorEncoderA.VelocityFiltered = FIRFilter_Update(&EncoderFilterA, MotorEncoderA.Velocity);
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <Motors_EncoderSample+0x84>)
 800352a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fc84 	bl	8000e3c <__aeabi_i2f>
 8003534:	4603      	mov	r3, r0
 8003536:	4619      	mov	r1, r3
 8003538:	481a      	ldr	r0, [pc, #104]	; (80035a4 <Motors_EncoderSample+0x8c>)
 800353a:	f7fd fe99 	bl	8001270 <FIRFilter_Update>
 800353e:	4603      	mov	r3, r0
 8003540:	4a16      	ldr	r2, [pc, #88]	; (800359c <Motors_EncoderSample+0x84>)
 8003542:	6093      	str	r3, [r2, #8]
	MotorEncoderB.VelocityFiltered = FIRFilter_Update(&EncoderFilterB, MotorEncoderB.Velocity);
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <Motors_EncoderSample+0x88>)
 8003546:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fc76 	bl	8000e3c <__aeabi_i2f>
 8003550:	4603      	mov	r3, r0
 8003552:	4619      	mov	r1, r3
 8003554:	4814      	ldr	r0, [pc, #80]	; (80035a8 <Motors_EncoderSample+0x90>)
 8003556:	f7fd fe8b 	bl	8001270 <FIRFilter_Update>
 800355a:	4603      	mov	r3, r0
 800355c:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <Motors_EncoderSample+0x88>)
 800355e:	6093      	str	r3, [r2, #8]


	UartBufferLength = sprintf((char*) UartBuffer, "$%d %d;",(int16_t) MotorEncoderB.VelocityFiltered, MotorEncoderB.Velocity );
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <Motors_EncoderSample+0x88>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fcbd 	bl	8000ee4 <__aeabi_f2iz>
 800356a:	4603      	mov	r3, r0
 800356c:	b21b      	sxth	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <Motors_EncoderSample+0x88>)
 8003572:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003576:	490d      	ldr	r1, [pc, #52]	; (80035ac <Motors_EncoderSample+0x94>)
 8003578:	480d      	ldr	r0, [pc, #52]	; (80035b0 <Motors_EncoderSample+0x98>)
 800357a:	f004 f8b7 	bl	80076ec <siprintf>
 800357e:	4603      	mov	r3, r0
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <Motors_EncoderSample+0x9c>)
 8003584:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, UartBuffer, UartBufferLength, 500);
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <Motors_EncoderSample+0x9c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b29a      	uxth	r2, r3
 800358c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <Motors_EncoderSample+0x98>)
 8003592:	4809      	ldr	r0, [pc, #36]	; (80035b8 <Motors_EncoderSample+0xa0>)
 8003594:	f003 fa0a 	bl	80069ac <HAL_UART_Transmit>

}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000514 	.word	0x20000514
 80035a0:	2000052c 	.word	0x2000052c
 80035a4:	20000544 	.word	0x20000544
 80035a8:	200005b0 	.word	0x200005b0
 80035ac:	080099ac 	.word	0x080099ac
 80035b0:	2000061c 	.word	0x2000061c
 80035b4:	2000062c 	.word	0x2000062c
 80035b8:	200004b4 	.word	0x200004b4

080035bc <Prog_DiodeTest_Init>:
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
 80035c0:	2201      	movs	r2, #1
 80035c2:	2101      	movs	r1, #1
 80035c4:	4802      	ldr	r0, [pc, #8]	; (80035d0 <Prog_DiodeTest_Init+0x14>)
 80035c6:	f000 fc8d 	bl	8003ee4 <HAL_GPIO_WritePin>
 80035ca:	2300      	movs	r3, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40011000 	.word	0x40011000

080035d4 <Prog_DiodeTest_Deinit>:
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	2300      	movs	r3, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <Prog_DiodeTest_Program>:
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	2300      	movs	r3, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <Prog_DiodeTest_Launch>:
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <Prog_DiodeTest_Launch+0x10>)
 80035f6:	f000 f897 	bl	8003728 <Programs_SetProgram>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000068 	.word	0x20000068

08003604 <Prog_DiodeTest_Parser>:
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b20      	cmp	r3, #32
 800361a:	d002      	beq.n	8003622 <Prog_DiodeTest_Parser+0x1e>
 800361c:	2b21      	cmp	r3, #33	; 0x21
 800361e:	d012      	beq.n	8003646 <Prog_DiodeTest_Parser+0x42>
 8003620:	e023      	b.n	800366a <Prog_DiodeTest_Parser+0x66>
 8003622:	2200      	movs	r2, #0
 8003624:	2101      	movs	r1, #1
 8003626:	4813      	ldr	r0, [pc, #76]	; (8003674 <Prog_DiodeTest_Parser+0x70>)
 8003628:	f000 fc5c 	bl	8003ee4 <HAL_GPIO_WritePin>
 800362c:	23d0      	movs	r3, #208	; 0xd0
 800362e:	723b      	strb	r3, [r7, #8]
 8003630:	2322      	movs	r3, #34	; 0x22
 8003632:	727b      	strb	r3, [r7, #9]
 8003634:	2301      	movs	r3, #1
 8003636:	72bb      	strb	r3, [r7, #10]
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	2103      	movs	r1, #3
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe f8d6 	bl	80017f0 <Radio_TxBufferPut>
 8003644:	e011      	b.n	800366a <Prog_DiodeTest_Parser+0x66>
 8003646:	2201      	movs	r2, #1
 8003648:	2101      	movs	r1, #1
 800364a:	480a      	ldr	r0, [pc, #40]	; (8003674 <Prog_DiodeTest_Parser+0x70>)
 800364c:	f000 fc4a 	bl	8003ee4 <HAL_GPIO_WritePin>
 8003650:	23d0      	movs	r3, #208	; 0xd0
 8003652:	723b      	strb	r3, [r7, #8]
 8003654:	2322      	movs	r3, #34	; 0x22
 8003656:	727b      	strb	r3, [r7, #9]
 8003658:	2300      	movs	r3, #0
 800365a:	72bb      	strb	r3, [r7, #10]
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	2103      	movs	r1, #3
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe f8c4 	bl	80017f0 <Radio_TxBufferPut>
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40011000 	.word	0x40011000

08003678 <Prog_MotorsDebug_Init>:
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
 800367c:	2201      	movs	r2, #1
 800367e:	2101      	movs	r1, #1
 8003680:	4803      	ldr	r0, [pc, #12]	; (8003690 <Prog_MotorsDebug_Init+0x18>)
 8003682:	f000 fc2f 	bl	8003ee4 <HAL_GPIO_WritePin>
 8003686:	f7ff ff25 	bl	80034d4 <Motors_SetMotorsOff>
 800368a:	2300      	movs	r3, #0
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40011000 	.word	0x40011000

08003694 <Prog_MotorsDebug_Deinit>:
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
 8003698:	f7ff ff1c 	bl	80034d4 <Motors_SetMotorsOff>
 800369c:	2300      	movs	r3, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <Prog_MotorsDebug_Program>:
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	2300      	movs	r3, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <Prog_MotorsDebug_Launch>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4802      	ldr	r0, [pc, #8]	; (80036c0 <Prog_MotorsDebug_Launch+0x10>)
 80036b6:	f000 f837 	bl	8003728 <Programs_SetProgram>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000007c 	.word	0x2000007c

080036c4 <Prog_MotorsDebug_Parser>:
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d002      	beq.n	80036e2 <Prog_MotorsDebug_Parser+0x1e>
 80036dc:	2b21      	cmp	r3, #33	; 0x21
 80036de:	d00f      	beq.n	8003700 <Prog_MotorsDebug_Parser+0x3c>
 80036e0:	e01d      	b.n	800371e <Prog_MotorsDebug_Parser+0x5a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	72fb      	strb	r3, [r7, #11]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	789b      	ldrb	r3, [r3, #2]
 80036ee:	727b      	strb	r3, [r7, #9]
 80036f0:	7a7b      	ldrb	r3, [r7, #9]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	7afb      	ldrb	r3, [r7, #11]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fe9b 	bl	8003434 <Motors_SetMotorPWM>
 80036fe:	e00e      	b.n	800371e <Prog_MotorsDebug_Parser+0x5a>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	72fb      	strb	r3, [r7, #11]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3302      	adds	r3, #2
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	72bb      	strb	r3, [r7, #10]
 8003710:	7aba      	ldrb	r2, [r7, #10]
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff feb4 	bl	8003484 <Motors_SetMotorDirection>
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <Programs_SetProgram>:
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <Programs_SetProgram+0x12>
 8003736:	2301      	movs	r3, #1
 8003738:	e010      	b.n	800375c <Programs_SetProgram+0x34>
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <Programs_SetProgram+0x3c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <Programs_SetProgram+0x32>
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <Programs_SetProgram+0x3c>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <Programs_SetProgram+0x3c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4798      	blx	r3
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <Programs_SetProgram+0x40>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	e000      	b.n	800375c <Programs_SetProgram+0x34>
 800375a:	2301      	movs	r3, #1
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000630 	.word	0x20000630
 8003768:	20000634 	.word	0x20000634

0800376c <Programs_ExitProgram>:
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <Programs_ExitProgram+0x18>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4798      	blx	r3
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <Programs_ExitProgram+0x1c>)
 800377a:	2202      	movs	r2, #2
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000630 	.word	0x20000630
 8003788:	20000634 	.word	0x20000634

0800378c <Programs_GetProgram>:
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
 8003790:	4b02      	ldr	r3, [pc, #8]	; (800379c <Programs_GetProgram+0x10>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	20000630 	.word	0x20000630

080037a0 <Programs_ClearProgram>:
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <Programs_ClearProgram+0x18>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <Programs_ClearProgram+0x1c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	20000630 	.word	0x20000630
 80037bc:	20000634 	.word	0x20000634

080037c0 <Programs_PerformProgram>:
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <Programs_PerformProgram+0x44>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d010      	beq.n	80037ee <Programs_PerformProgram+0x2e>
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	dc10      	bgt.n	80037f2 <Programs_PerformProgram+0x32>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <Programs_PerformProgram+0x36>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d000      	beq.n	80037da <Programs_PerformProgram+0x1a>
 80037d8:	e00b      	b.n	80037f2 <Programs_PerformProgram+0x32>
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <Programs_PerformProgram+0x48>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <Programs_PerformProgram+0x3a>
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <Programs_PerformProgram+0x48>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4798      	blx	r3
 80037ec:	e005      	b.n	80037fa <Programs_PerformProgram+0x3a>
 80037ee:	bf00      	nop
 80037f0:	e004      	b.n	80037fc <Programs_PerformProgram+0x3c>
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <Programs_PerformProgram+0x3c>
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <Programs_PerformProgram+0x3c>
 80037fa:	bf00      	nop
 80037fc:	4b01      	ldr	r3, [pc, #4]	; (8003804 <Programs_PerformProgram+0x44>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000634 	.word	0x20000634
 8003808:	20000630 	.word	0x20000630

0800380c <Programs_SendProgramStartedACK>:
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	460a      	mov	r2, r1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	71bb      	strb	r3, [r7, #6]
 800381c:	2310      	movs	r3, #16
 800381e:	733b      	strb	r3, [r7, #12]
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	737b      	strb	r3, [r7, #13]
 8003824:	79bb      	ldrb	r3, [r7, #6]
 8003826:	73bb      	strb	r3, [r7, #14]
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	2103      	movs	r1, #3
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd ffde 	bl	80017f0 <Radio_TxBufferPut>
 8003834:	4603      	mov	r3, r0
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <Programs_SendProgramExitACK>:
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	71fb      	strb	r3, [r7, #7]
 8003848:	2311      	movs	r3, #17
 800384a:	733b      	strb	r3, [r7, #12]
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	737b      	strb	r3, [r7, #13]
 8003850:	f107 030c 	add.w	r3, r7, #12
 8003854:	2102      	movs	r1, #2
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd ffca 	bl	80017f0 <Radio_TxBufferPut>
 800385c:	4603      	mov	r3, r0
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003868:	f7ff f86a 	bl	8002940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800386c:	480b      	ldr	r0, [pc, #44]	; (800389c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800386e:	490c      	ldr	r1, [pc, #48]	; (80038a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003874:	e002      	b.n	800387c <LoopCopyDataInit>

08003876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800387a:	3304      	adds	r3, #4

0800387c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800387c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003880:	d3f9      	bcc.n	8003876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003884:	4c09      	ldr	r4, [pc, #36]	; (80038ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003888:	e001      	b.n	800388e <LoopFillZerobss>

0800388a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800388a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800388c:	3204      	adds	r2, #4

0800388e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003890:	d3fb      	bcc.n	800388a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003892:	f003 ffe7 	bl	8007864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003896:	f7fe f933 	bl	8001b00 <main>
  bx lr
 800389a:	4770      	bx	lr
  ldr r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a0:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80038a4:	08009d6c 	.word	0x08009d6c
  ldr r2, =_sbss
 80038a8:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80038ac:	20000788 	.word	0x20000788

080038b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <ADC1_2_IRQHandler>
	...

080038b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_Init+0x28>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a07      	ldr	r2, [pc, #28]	; (80038dc <HAL_Init+0x28>)
 80038be:	f043 0310 	orr.w	r3, r3, #16
 80038c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c4:	2003      	movs	r0, #3
 80038c6:	f000 f947 	bl	8003b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ca:	200f      	movs	r0, #15
 80038cc:	f000 f808 	bl	80038e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d0:	f7fe ff0a 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40022000 	.word	0x40022000

080038e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_InitTick+0x54>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_InitTick+0x58>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f95f 	bl	8003bc2 <HAL_SYSTICK_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e00e      	b.n	800392c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b0f      	cmp	r3, #15
 8003912:	d80a      	bhi.n	800392a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003914:	2200      	movs	r2, #0
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	f000 f927 	bl	8003b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003920:	4a06      	ldr	r2, [pc, #24]	; (800393c <HAL_InitTick+0x5c>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000064 	.word	0x20000064
 8003938:	20000094 	.word	0x20000094
 800393c:	20000090 	.word	0x20000090

08003940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_IncTick+0x1c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_IncTick+0x20>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4a03      	ldr	r2, [pc, #12]	; (8003960 <HAL_IncTick+0x20>)
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000094 	.word	0x20000094
 8003960:	20000638 	.word	0x20000638

08003964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b02      	ldr	r3, [pc, #8]	; (8003974 <HAL_GetTick+0x10>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	20000638 	.word	0x20000638

08003978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff fff0 	bl	8003964 <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d005      	beq.n	800399e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_Delay+0x44>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800399e:	bf00      	nop
 80039a0:	f7ff ffe0 	bl	8003964 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d8f7      	bhi.n	80039a0 <HAL_Delay+0x28>
  {
  }
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000094 	.word	0x20000094

080039c0 <__NVIC_SetPriorityGrouping>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <__NVIC_SetPriorityGrouping+0x44>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039dc:	4013      	ands	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <__NVIC_SetPriorityGrouping+0x44>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	60d3      	str	r3, [r2, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <__NVIC_GetPriorityGrouping>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <__NVIC_GetPriorityGrouping+0x18>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f003 0307 	and.w	r3, r3, #7
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <__NVIC_EnableIRQ>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	db0b      	blt.n	8003a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	f003 021f 	and.w	r2, r3, #31
 8003a3c:	4906      	ldr	r1, [pc, #24]	; (8003a58 <__NVIC_EnableIRQ+0x34>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2001      	movs	r0, #1
 8003a46:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	e000e100 	.word	0xe000e100

08003a5c <__NVIC_SetPriority>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db0a      	blt.n	8003a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	490c      	ldr	r1, [pc, #48]	; (8003aa8 <__NVIC_SetPriority+0x4c>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a84:	e00a      	b.n	8003a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4908      	ldr	r1, [pc, #32]	; (8003aac <__NVIC_SetPriority+0x50>)
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	3b04      	subs	r3, #4
 8003a94:	0112      	lsls	r2, r2, #4
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	440b      	add	r3, r1
 8003a9a:	761a      	strb	r2, [r3, #24]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000e100 	.word	0xe000e100
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <NVIC_EncodePriority>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f1c3 0307 	rsb	r3, r3, #7
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	bf28      	it	cs
 8003ace:	2304      	movcs	r3, #4
 8003ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d902      	bls.n	8003ae0 <NVIC_EncodePriority+0x30>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3b03      	subs	r3, #3
 8003ade:	e000      	b.n	8003ae2 <NVIC_EncodePriority+0x32>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	401a      	ands	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af8:	f04f 31ff 	mov.w	r1, #4294967295
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	43d9      	mvns	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b08:	4313      	orrs	r3, r2
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <SysTick_Config>:
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b24:	d301      	bcc.n	8003b2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00f      	b.n	8003b4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <SysTick_Config+0x40>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b32:	210f      	movs	r1, #15
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	f7ff ff90 	bl	8003a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <SysTick_Config+0x40>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <SysTick_Config+0x40>)
 8003b44:	2207      	movs	r2, #7
 8003b46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	e000e010 	.word	0xe000e010

08003b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ff2d 	bl	80039c0 <__NVIC_SetPriorityGrouping>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b086      	sub	sp, #24
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b80:	f7ff ff42 	bl	8003a08 <__NVIC_GetPriorityGrouping>
 8003b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff90 	bl	8003ab0 <NVIC_EncodePriority>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff5f 	bl	8003a5c <__NVIC_SetPriority>
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	4603      	mov	r3, r0
 8003bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff35 	bl	8003a24 <__NVIC_EnableIRQ>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ffa2 	bl	8003b14 <SysTick_Config>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b08b      	sub	sp, #44	; 0x2c
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bee:	e169      	b.n	8003ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f040 8158 	bne.w	8003ebe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a9a      	ldr	r2, [pc, #616]	; (8003e7c <HAL_GPIO_Init+0x2a0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d05e      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c18:	4a98      	ldr	r2, [pc, #608]	; (8003e7c <HAL_GPIO_Init+0x2a0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d875      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c1e:	4a98      	ldr	r2, [pc, #608]	; (8003e80 <HAL_GPIO_Init+0x2a4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d058      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c24:	4a96      	ldr	r2, [pc, #600]	; (8003e80 <HAL_GPIO_Init+0x2a4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d86f      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c2a:	4a96      	ldr	r2, [pc, #600]	; (8003e84 <HAL_GPIO_Init+0x2a8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d052      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c30:	4a94      	ldr	r2, [pc, #592]	; (8003e84 <HAL_GPIO_Init+0x2a8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d869      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c36:	4a94      	ldr	r2, [pc, #592]	; (8003e88 <HAL_GPIO_Init+0x2ac>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04c      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c3c:	4a92      	ldr	r2, [pc, #584]	; (8003e88 <HAL_GPIO_Init+0x2ac>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d863      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c42:	4a92      	ldr	r2, [pc, #584]	; (8003e8c <HAL_GPIO_Init+0x2b0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d046      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c48:	4a90      	ldr	r2, [pc, #576]	; (8003e8c <HAL_GPIO_Init+0x2b0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d85d      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c4e:	2b12      	cmp	r3, #18
 8003c50:	d82a      	bhi.n	8003ca8 <HAL_GPIO_Init+0xcc>
 8003c52:	2b12      	cmp	r3, #18
 8003c54:	d859      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <HAL_GPIO_Init+0x80>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003cd7 	.word	0x08003cd7
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003cc3 	.word	0x08003cc3
 8003c68:	08003d05 	.word	0x08003d05
 8003c6c:	08003d0b 	.word	0x08003d0b
 8003c70:	08003d0b 	.word	0x08003d0b
 8003c74:	08003d0b 	.word	0x08003d0b
 8003c78:	08003d0b 	.word	0x08003d0b
 8003c7c:	08003d0b 	.word	0x08003d0b
 8003c80:	08003d0b 	.word	0x08003d0b
 8003c84:	08003d0b 	.word	0x08003d0b
 8003c88:	08003d0b 	.word	0x08003d0b
 8003c8c:	08003d0b 	.word	0x08003d0b
 8003c90:	08003d0b 	.word	0x08003d0b
 8003c94:	08003d0b 	.word	0x08003d0b
 8003c98:	08003d0b 	.word	0x08003d0b
 8003c9c:	08003d0b 	.word	0x08003d0b
 8003ca0:	08003cb9 	.word	0x08003cb9
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	4a79      	ldr	r2, [pc, #484]	; (8003e90 <HAL_GPIO_Init+0x2b4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cae:	e02c      	b.n	8003d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	623b      	str	r3, [r7, #32]
          break;
 8003cb6:	e029      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	623b      	str	r3, [r7, #32]
          break;
 8003cc0:	e024      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	623b      	str	r3, [r7, #32]
          break;
 8003cca:	e01f      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	623b      	str	r3, [r7, #32]
          break;
 8003cd4:	e01a      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	623b      	str	r3, [r7, #32]
          break;
 8003ce2:	e013      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cec:	2308      	movs	r3, #8
 8003cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	611a      	str	r2, [r3, #16]
          break;
 8003cf6:	e009      	b.n	8003d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	615a      	str	r2, [r3, #20]
          break;
 8003d02:	e003      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
          break;
 8003d08:	e000      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          break;
 8003d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2bff      	cmp	r3, #255	; 0xff
 8003d10:	d801      	bhi.n	8003d16 <HAL_GPIO_Init+0x13a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	e001      	b.n	8003d1a <HAL_GPIO_Init+0x13e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2bff      	cmp	r3, #255	; 0xff
 8003d20:	d802      	bhi.n	8003d28 <HAL_GPIO_Init+0x14c>
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	e002      	b.n	8003d2e <HAL_GPIO_Init+0x152>
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	3b08      	subs	r3, #8
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	210f      	movs	r1, #15
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80b1 	beq.w	8003ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d74:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_GPIO_Init+0x2bc>)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <HAL_GPIO_Init+0x2c0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_GPIO_Init+0x1ec>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3f      	ldr	r2, [pc, #252]	; (8003ea0 <HAL_GPIO_Init+0x2c4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00d      	beq.n	8003dc4 <HAL_GPIO_Init+0x1e8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <HAL_GPIO_Init+0x2c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <HAL_GPIO_Init+0x1e4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3d      	ldr	r2, [pc, #244]	; (8003ea8 <HAL_GPIO_Init+0x2cc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_GPIO_Init+0x1e0>
 8003db8:	2303      	movs	r3, #3
 8003dba:	e006      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	e004      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	f002 0203 	and.w	r2, r2, #3
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	4093      	lsls	r3, r2
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dda:	492f      	ldr	r1, [pc, #188]	; (8003e98 <HAL_GPIO_Init+0x2bc>)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	492c      	ldr	r1, [pc, #176]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]
 8003e00:	e006      	b.n	8003e10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e02:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	4928      	ldr	r1, [pc, #160]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	4922      	ldr	r1, [pc, #136]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60cb      	str	r3, [r1, #12]
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	491e      	ldr	r1, [pc, #120]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4918      	ldr	r1, [pc, #96]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	e006      	b.n	8003e60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	4914      	ldr	r1, [pc, #80]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d021      	beq.n	8003eb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	e021      	b.n	8003ebe <HAL_GPIO_Init+0x2e2>
 8003e7a:	bf00      	nop
 8003e7c:	10320000 	.word	0x10320000
 8003e80:	10310000 	.word	0x10310000
 8003e84:	10220000 	.word	0x10220000
 8003e88:	10210000 	.word	0x10210000
 8003e8c:	10120000 	.word	0x10120000
 8003e90:	10110000 	.word	0x10110000
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010800 	.word	0x40010800
 8003ea0:	40010c00 	.word	0x40010c00
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_GPIO_Init+0x304>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	4909      	ldr	r1, [pc, #36]	; (8003ee0 <HAL_GPIO_Init+0x304>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f47f ae8e 	bne.w	8003bf0 <HAL_GPIO_Init+0x14>
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	372c      	adds	r7, #44	; 0x2c
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef4:	787b      	ldrb	r3, [r7, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f00:	e003      	b.n	8003f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	041a      	lsls	r2, r3, #16
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	43d9      	mvns	r1, r3
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	400b      	ands	r3, r1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	611a      	str	r2, [r3, #16]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f52:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f5e:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fe6c 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e12b      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd faf8 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f000 fe10 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a81      	ldr	r2, [pc, #516]	; (80041ec <HAL_I2C_Init+0x274>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d807      	bhi.n	8003ffc <HAL_I2C_Init+0x84>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_I2C_Init+0x278>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf94      	ite	ls
 8003ff4:	2301      	movls	r3, #1
 8003ff6:	2300      	movhi	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e006      	b.n	800400a <HAL_I2C_Init+0x92>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <HAL_I2C_Init+0x27c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	bf94      	ite	ls
 8004004:	2301      	movls	r3, #1
 8004006:	2300      	movhi	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0e7      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a78      	ldr	r2, [pc, #480]	; (80041f8 <HAL_I2C_Init+0x280>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0c9b      	lsrs	r3, r3, #18
 800401c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a6a      	ldr	r2, [pc, #424]	; (80041ec <HAL_I2C_Init+0x274>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d802      	bhi.n	800404c <HAL_I2C_Init+0xd4>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3301      	adds	r3, #1
 800404a:	e009      	b.n	8004060 <HAL_I2C_Init+0xe8>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_I2C_Init+0x284>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	3301      	adds	r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	495c      	ldr	r1, [pc, #368]	; (80041ec <HAL_I2C_Init+0x274>)
 800407c:	428b      	cmp	r3, r1
 800407e:	d819      	bhi.n	80040b4 <HAL_I2C_Init+0x13c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e59      	subs	r1, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fbb1 f3f3 	udiv	r3, r1, r3
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004094:	400b      	ands	r3, r1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_I2C_Init+0x138>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e59      	subs	r1, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ae:	e051      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e04f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <HAL_I2C_Init+0x168>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e012      	b.n	8004106 <HAL_I2C_Init+0x18e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1e58      	subs	r0, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	0099      	lsls	r1, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Init+0x196>
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10e      	bne.n	8004134 <HAL_I2C_Init+0x1bc>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e58      	subs	r0, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	440b      	add	r3, r1
 8004124:	fbb0 f3f3 	udiv	r3, r0, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	0099      	lsls	r1, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	6809      	ldr	r1, [r1, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6911      	ldr	r1, [r2, #16]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	430b      	orrs	r3, r1
 8004196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	000186a0 	.word	0x000186a0
 80041f0:	001e847f 	.word	0x001e847f
 80041f4:	003d08ff 	.word	0x003d08ff
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e304      	b.n	800481c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8087 	beq.w	800432e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004220:	4b92      	ldr	r3, [pc, #584]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b04      	cmp	r3, #4
 800422a:	d00c      	beq.n	8004246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800422c:	4b8f      	ldr	r3, [pc, #572]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	d112      	bne.n	800425e <HAL_RCC_OscConfig+0x5e>
 8004238:	4b8c      	ldr	r3, [pc, #560]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d10b      	bne.n	800425e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004246:	4b89      	ldr	r3, [pc, #548]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d06c      	beq.n	800432c <HAL_RCC_OscConfig+0x12c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d168      	bne.n	800432c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e2de      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x76>
 8004268:	4b80      	ldr	r3, [pc, #512]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a7f      	ldr	r2, [pc, #508]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e02e      	b.n	80042d4 <HAL_RCC_OscConfig+0xd4>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x98>
 800427e:	4b7b      	ldr	r3, [pc, #492]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7a      	ldr	r2, [pc, #488]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b78      	ldr	r3, [pc, #480]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a77      	ldr	r2, [pc, #476]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e01d      	b.n	80042d4 <HAL_RCC_OscConfig+0xd4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0xbc>
 80042a2:	4b72      	ldr	r3, [pc, #456]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a71      	ldr	r2, [pc, #452]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b6f      	ldr	r3, [pc, #444]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6e      	ldr	r2, [pc, #440]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0xd4>
 80042bc:	4b6b      	ldr	r3, [pc, #428]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6a      	ldr	r2, [pc, #424]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7ff fb42 	bl	8003964 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7ff fb3e 	bl	8003964 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e292      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b5d      	ldr	r3, [pc, #372]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0xe4>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7ff fb2e 	bl	8003964 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430c:	f7ff fb2a 	bl	8003964 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e27e      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x10c>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d063      	beq.n	8004402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800433a:	4b4c      	ldr	r3, [pc, #304]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004346:	4b49      	ldr	r3, [pc, #292]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b08      	cmp	r3, #8
 8004350:	d11c      	bne.n	800438c <HAL_RCC_OscConfig+0x18c>
 8004352:	4b46      	ldr	r3, [pc, #280]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435e:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x176>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e252      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b3d      	ldr	r3, [pc, #244]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4939      	ldr	r1, [pc, #228]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	e03a      	b.n	8004402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCC_OscConfig+0x270>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7ff fae3 	bl	8003964 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a2:	f7ff fadf 	bl	8003964 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e233      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4927      	ldr	r1, [pc, #156]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
 80043d4:	e015      	b.n	8004402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d6:	4b26      	ldr	r3, [pc, #152]	; (8004470 <HAL_RCC_OscConfig+0x270>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7ff fac2 	bl	8003964 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e4:	f7ff fabe 	bl	8003964 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e212      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d03a      	beq.n	8004484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d019      	beq.n	800444a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004416:	4b17      	ldr	r3, [pc, #92]	; (8004474 <HAL_RCC_OscConfig+0x274>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441c:	f7ff faa2 	bl	8003964 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004424:	f7ff fa9e 	bl	8003964 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1f2      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_RCC_OscConfig+0x26c>)
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004442:	2001      	movs	r0, #1
 8004444:	f000 fc04 	bl	8004c50 <RCC_Delay>
 8004448:	e01c      	b.n	8004484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <HAL_RCC_OscConfig+0x274>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004450:	f7ff fa88 	bl	8003964 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004456:	e00f      	b.n	8004478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004458:	f7ff fa84 	bl	8003964 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d908      	bls.n	8004478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1d8      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	42420000 	.word	0x42420000
 8004474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004478:	4b9b      	ldr	r3, [pc, #620]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e9      	bne.n	8004458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a6 	beq.w	80045de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004496:	4b94      	ldr	r3, [pc, #592]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a2:	4b91      	ldr	r3, [pc, #580]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	4a90      	ldr	r2, [pc, #576]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	61d3      	str	r3, [r2, #28]
 80044ae:	4b8e      	ldr	r3, [pc, #568]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044be:	4b8b      	ldr	r3, [pc, #556]	; (80046ec <HAL_RCC_OscConfig+0x4ec>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d118      	bne.n	80044fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ca:	4b88      	ldr	r3, [pc, #544]	; (80046ec <HAL_RCC_OscConfig+0x4ec>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a87      	ldr	r2, [pc, #540]	; (80046ec <HAL_RCC_OscConfig+0x4ec>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d6:	f7ff fa45 	bl	8003964 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044de:	f7ff fa41 	bl	8003964 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b64      	cmp	r3, #100	; 0x64
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e195      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	4b7e      	ldr	r3, [pc, #504]	; (80046ec <HAL_RCC_OscConfig+0x4ec>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d106      	bne.n	8004512 <HAL_RCC_OscConfig+0x312>
 8004504:	4b78      	ldr	r3, [pc, #480]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4a77      	ldr	r2, [pc, #476]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6213      	str	r3, [r2, #32]
 8004510:	e02d      	b.n	800456e <HAL_RCC_OscConfig+0x36e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x334>
 800451a:	4b73      	ldr	r3, [pc, #460]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4a72      	ldr	r2, [pc, #456]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	6213      	str	r3, [r2, #32]
 8004526:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	4a6f      	ldr	r2, [pc, #444]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	6213      	str	r3, [r2, #32]
 8004532:	e01c      	b.n	800456e <HAL_RCC_OscConfig+0x36e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b05      	cmp	r3, #5
 800453a:	d10c      	bne.n	8004556 <HAL_RCC_OscConfig+0x356>
 800453c:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4a69      	ldr	r2, [pc, #420]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004542:	f043 0304 	orr.w	r3, r3, #4
 8004546:	6213      	str	r3, [r2, #32]
 8004548:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4a66      	ldr	r2, [pc, #408]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6213      	str	r3, [r2, #32]
 8004554:	e00b      	b.n	800456e <HAL_RCC_OscConfig+0x36e>
 8004556:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4a60      	ldr	r2, [pc, #384]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d015      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004576:	f7ff f9f5 	bl	8003964 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7ff f9f1 	bl	8003964 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e143      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ee      	beq.n	800457e <HAL_RCC_OscConfig+0x37e>
 80045a0:	e014      	b.n	80045cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7ff f9df 	bl	8003964 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7ff f9db 	bl	8003964 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e12d      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c0:	4b49      	ldr	r3, [pc, #292]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1ee      	bne.n	80045aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d2:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	4a44      	ldr	r2, [pc, #272]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80045d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045dc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 808c 	beq.w	8004700 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80045e8:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d10e      	bne.n	8004614 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80045f6:	4b3c      	ldr	r3, [pc, #240]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d108      	bne.n	8004614 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d101      	bne.n	8004614 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e103      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	2b02      	cmp	r3, #2
 800461a:	d14e      	bne.n	80046ba <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800461c:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0ef      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <HAL_RCC_OscConfig+0x4f0>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7ff f98f 	bl	8003964 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800464a:	f7ff f98b 	bl	8003964 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	; 0x64
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0df      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004668:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	491c      	ldr	r1, [pc, #112]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004676:	4313      	orrs	r3, r2
 8004678:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	4918      	ldr	r1, [pc, #96]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_RCC_OscConfig+0x4f0>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7ff f967 	bl	8003964 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800469a:	f7ff f963 	bl	8003964 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e0b7      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x49a>
 80046b8:	e022      	b.n	8004700 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_RCC_OscConfig+0x4e8>)
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_RCC_OscConfig+0x4f0>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7ff f94a 	bl	8003964 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80046d2:	e00f      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046d4:	f7ff f946 	bl	8003964 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d908      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e09a      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40007000 	.word	0x40007000
 80046f0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e9      	bne.n	80046d4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8088 	beq.w	800481a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800470a:	4b46      	ldr	r3, [pc, #280]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b08      	cmp	r3, #8
 8004714:	d068      	beq.n	80047e8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d14d      	bne.n	80047ba <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b42      	ldr	r3, [pc, #264]	; (8004828 <HAL_RCC_OscConfig+0x628>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7ff f91e 	bl	8003964 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7ff f91a 	bl	8003964 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e06e      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473e:	4b39      	ldr	r3, [pc, #228]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004752:	d10f      	bne.n	8004774 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004754:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4931      	ldr	r1, [pc, #196]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 800475e:	4313      	orrs	r3, r2
 8004760:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004762:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	f023 020f 	bic.w	r2, r3, #15
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	492d      	ldr	r1, [pc, #180]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004770:	4313      	orrs	r3, r2
 8004772:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	430b      	orrs	r3, r1
 8004786:	4927      	ldr	r1, [pc, #156]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <HAL_RCC_OscConfig+0x628>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7ff f8e7 	bl	8003964 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7ff f8e3 	bl	8003964 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e037      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x59a>
 80047b8:	e02f      	b.n	800481a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x628>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7ff f8d0 	bl	8003964 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7ff f8cc 	bl	8003964 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e020      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x5c8>
 80047e6:	e018      	b.n	800481a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e013      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	429a      	cmp	r2, r3
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	42420060 	.word	0x42420060

0800482c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0d0      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b6a      	ldr	r3, [pc, #424]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d910      	bls.n	8004870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b67      	ldr	r3, [pc, #412]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	4965      	ldr	r1, [pc, #404]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b8      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	494d      	ldr	r1, [pc, #308]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d040      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d115      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e073      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3d      	ldr	r3, [pc, #244]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e06b      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4936      	ldr	r1, [pc, #216]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7ff f822 	bl	8003964 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7ff f81e 	bl	8003964 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e053      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b27      	ldr	r3, [pc, #156]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d210      	bcs.n	800497c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0207 	bic.w	r2, r3, #7
 8004962:	4922      	ldr	r1, [pc, #136]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e032      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4916      	ldr	r1, [pc, #88]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	490e      	ldr	r1, [pc, #56]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ba:	f000 f821 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	490a      	ldr	r1, [pc, #40]	; (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	5ccb      	ldrb	r3, [r1, r3]
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x1cc>)
 80049d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x1d0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe ff80 	bl	80038e0 <HAL_InitTick>

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40022000 	.word	0x40022000
 80049f0:	40021000 	.word	0x40021000
 80049f4:	080099b4 	.word	0x080099b4
 80049f8:	20000064 	.word	0x20000064
 80049fc:	20000090 	.word	0x20000090

08004a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b092      	sub	sp, #72	; 0x48
 8004a06:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a10:	2300      	movs	r3, #0
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	2300      	movs	r3, #0
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a20:	2300      	movs	r3, #0
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a24:	4b6b      	ldr	r3, [pc, #428]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d002      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d003      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x40>
 8004a38:	e0c3      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a3a:	4b67      	ldr	r3, [pc, #412]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004a3c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004a3e:	e0c3      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	4b64      	ldr	r3, [pc, #400]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004a4a:	5c9b      	ldrb	r3, [r3, r2]
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80ac 	beq.w	8004bb2 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004a5a:	4b5e      	ldr	r3, [pc, #376]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	4b5f      	ldr	r3, [pc, #380]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004a64:	5c9b      	ldrb	r3, [r3, r2]
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004a68:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 808c 	beq.w	8004b8e <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004a76:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	3301      	adds	r3, #1
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	3302      	adds	r3, #2
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2200      	movs	r2, #0
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	627a      	str	r2, [r7, #36]	; 0x24
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	fb00 f203 	mul.w	r2, r0, r3
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	fb03 f301 	mul.w	r3, r3, r1
 8004aae:	4413      	add	r3, r2
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	fba2 4500 	umull	r4, r5, r2, r0
 8004ab6:	442b      	add	r3, r5
 8004ab8:	461d      	mov	r5, r3
 8004aba:	4622      	mov	r2, r4
 8004abc:	462b      	mov	r3, r5
 8004abe:	f04f 0000 	mov.w	r0, #0
 8004ac2:	f04f 0100 	mov.w	r1, #0
 8004ac6:	0159      	lsls	r1, r3, #5
 8004ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004acc:	0150      	lsls	r0, r2, #5
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	ebb2 0a04 	subs.w	sl, r2, r4
 8004ad6:	eb63 0b05 	sbc.w	fp, r3, r5
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aee:	ebb2 080a 	subs.w	r8, r2, sl
 8004af2:	eb63 090b 	sbc.w	r9, r3, fp
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0a:	4690      	mov	r8, r2
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	eb18 0304 	adds.w	r3, r8, r4
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	eb49 0305 	adc.w	r3, r9, r5
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b26:	4629      	mov	r1, r5
 8004b28:	028b      	lsls	r3, r1, #10
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4604      	mov	r4, r0
 8004b30:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004b34:	4601      	mov	r1, r0
 8004b36:	028a      	lsls	r2, r1, #10
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2200      	movs	r2, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	617a      	str	r2, [r7, #20]
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	2200      	movs	r2, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	60fa      	str	r2, [r7, #12]
 8004b4c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004b50:	4622      	mov	r2, r4
 8004b52:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004b56:	4645      	mov	r5, r8
 8004b58:	fb05 f202 	mul.w	r2, r5, r2
 8004b5c:	46cc      	mov	ip, r9
 8004b5e:	4625      	mov	r5, r4
 8004b60:	461c      	mov	r4, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	fb03 f30c 	mul.w	r3, r3, ip
 8004b68:	4413      	add	r3, r2
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	4644      	mov	r4, r8
 8004b6e:	fba2 2404 	umull	r2, r4, r2, r4
 8004b72:	61fc      	str	r4, [r7, #28]
 8004b74:	61ba      	str	r2, [r7, #24]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b80:	f7fc f9d6 	bl	8000f30 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8c:	e007      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004b92:	fb03 f202 	mul.w	r2, r3, r2
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004ba0:	7b5b      	ldrb	r3, [r3, #13]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb0:	e004      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	4a0b      	ldr	r2, [pc, #44]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8004bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bbe:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3748      	adds	r7, #72	; 0x48
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	080099cc 	.word	0x080099cc
 8004be0:	080099dc 	.word	0x080099dc
 8004be4:	003d0900 	.word	0x003d0900
 8004be8:	007a1200 	.word	0x007a1200

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf0:	4b02      	ldr	r3, [pc, #8]	; (8004bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	20000064 	.word	0x20000064

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c04:	f7ff fff2 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4903      	ldr	r1, [pc, #12]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	080099c4 	.word	0x080099c4

08004c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c2c:	f7ff ffde 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	0adb      	lsrs	r3, r3, #11
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4903      	ldr	r1, [pc, #12]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	080099c4 	.word	0x080099c4

08004c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <RCC_Delay+0x34>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <RCC_Delay+0x38>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	0a5b      	lsrs	r3, r3, #9
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c6c:	bf00      	nop
  }
  while (Delay --);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	60fa      	str	r2, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f9      	bne.n	8004c6c <RCC_Delay+0x1c>
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	20000064 	.word	0x20000064
 8004c88:	10624dd3 	.word	0x10624dd3

08004c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e076      	b.n	8004d8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cae:	d009      	beq.n	8004cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61da      	str	r2, [r3, #28]
 8004cb6:	e005      	b.n	8004cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fca6 	bl	8002630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	ea42 0103 	orr.w	r1, r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	0c1a      	lsrs	r2, r3, #16
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f002 0204 	and.w	r2, r2, #4
 8004d6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_SPI_Transmit+0x22>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e12d      	b.n	8005012 <HAL_SPI_Transmit+0x27e>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dbe:	f7fe fdd1 	bl	8003964 <HAL_GetTick>
 8004dc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d002      	beq.n	8004dda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dd8:	e116      	b.n	8005008 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_SPI_Transmit+0x52>
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dea:	e10d      	b.n	8005008 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2203      	movs	r2, #3
 8004df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e32:	d10f      	bne.n	8004e54 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d007      	beq.n	8004e72 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7a:	d14f      	bne.n	8004f1c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_Transmit+0xf6>
 8004e84:	8afb      	ldrh	r3, [r7, #22]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d142      	bne.n	8004f10 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eae:	e02f      	b.n	8004f10 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d112      	bne.n	8004ee4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	881a      	ldrh	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	1c9a      	adds	r2, r3, #2
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ee2:	e015      	b.n	8004f10 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee4:	f7fe fd3e 	bl	8003964 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d803      	bhi.n	8004efc <HAL_SPI_Transmit+0x168>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d102      	bne.n	8004f02 <HAL_SPI_Transmit+0x16e>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f0e:	e07b      	b.n	8005008 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ca      	bne.n	8004eb0 <HAL_SPI_Transmit+0x11c>
 8004f1a:	e050      	b.n	8004fbe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_SPI_Transmit+0x196>
 8004f24:	8afb      	ldrh	r3, [r7, #22]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d144      	bne.n	8004fb4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f50:	e030      	b.n	8004fb4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d113      	bne.n	8004f88 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f86:	e015      	b.n	8004fb4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f88:	f7fe fcec 	bl	8003964 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d803      	bhi.n	8004fa0 <HAL_SPI_Transmit+0x20c>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d102      	bne.n	8004fa6 <HAL_SPI_Transmit+0x212>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004fb2:	e029      	b.n	8005008 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1c9      	bne.n	8004f52 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fbcc 	bl	8005760 <SPI_EndRxTxTransaction>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e003      	b.n	8005008 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005010:	7ffb      	ldrb	r3, [r7, #31]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b088      	sub	sp, #32
 800501e:	af02      	add	r7, sp, #8
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d002      	beq.n	8005040 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800503a:	2302      	movs	r3, #2
 800503c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800503e:	e0fb      	b.n	8005238 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005048:	d112      	bne.n	8005070 <HAL_SPI_Receive+0x56>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10e      	bne.n	8005070 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2204      	movs	r2, #4
 8005056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f8ef 	bl	800524a <HAL_SPI_TransmitReceive>
 800506c:	4603      	mov	r3, r0
 800506e:	e0e8      	b.n	8005242 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_SPI_Receive+0x64>
 800507a:	2302      	movs	r3, #2
 800507c:	e0e1      	b.n	8005242 <HAL_SPI_Receive+0x228>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005086:	f7fe fc6d 	bl	8003964 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Receive+0x7e>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800509c:	e0cc      	b.n	8005238 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2204      	movs	r2, #4
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	d10f      	bne.n	8005106 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d007      	beq.n	8005124 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d16a      	bne.n	8005202 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800512c:	e032      	b.n	8005194 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d115      	bne.n	8005168 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f103 020c 	add.w	r2, r3, #12
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005166:	e015      	b.n	8005194 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005168:	f7fe fbfc 	bl	8003964 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d803      	bhi.n	8005180 <HAL_SPI_Receive+0x166>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d102      	bne.n	8005186 <HAL_SPI_Receive+0x16c>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005192:	e051      	b.n	8005238 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1c7      	bne.n	800512e <HAL_SPI_Receive+0x114>
 800519e:	e035      	b.n	800520c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d113      	bne.n	80051d6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	b292      	uxth	r2, r2
 80051ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051d4:	e015      	b.n	8005202 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d6:	f7fe fbc5 	bl	8003964 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d803      	bhi.n	80051ee <HAL_SPI_Receive+0x1d4>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Receive+0x1da>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005200:	e01a      	b.n	8005238 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1c9      	bne.n	80051a0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fa53 	bl	80056bc <SPI_EndRxTransaction>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
 800522e:	e003      	b.n	8005238 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b08c      	sub	sp, #48	; 0x30
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x26>
 800526c:	2302      	movs	r3, #2
 800526e:	e198      	b.n	80055a2 <HAL_SPI_TransmitReceive+0x358>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005278:	f7fe fb74 	bl	8003964 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005296:	2b01      	cmp	r3, #1
 8005298:	d00f      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x70>
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a0:	d107      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x68>
 80052aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d003      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052b8:	e16d      	b.n	8005596 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x82>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x82>
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052d2:	e160      	b.n	8005596 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d003      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2205      	movs	r2, #5
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	887a      	ldrh	r2, [r7, #2]
 80052f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	887a      	ldrh	r2, [r7, #2]
 80052fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	887a      	ldrh	r2, [r7, #2]
 800530a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d007      	beq.n	800533c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005344:	d17c      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x10a>
 800534e:	8b7b      	ldrh	r3, [r7, #26]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d16a      	bne.n	800542a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005378:	e057      	b.n	800542a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11b      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x176>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d016      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x176>
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d113      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d119      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x1b8>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d014      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	b292      	uxth	r2, r2
 80053e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053fe:	2301      	movs	r3, #1
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005402:	f7fe faaf 	bl	8003964 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800540e:	429a      	cmp	r2, r3
 8005410:	d80b      	bhi.n	800542a <HAL_SPI_TransmitReceive+0x1e0>
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d007      	beq.n	800542a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005428:	e0b5      	b.n	8005596 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1a2      	bne.n	800537a <HAL_SPI_TransmitReceive+0x130>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d19d      	bne.n	800537a <HAL_SPI_TransmitReceive+0x130>
 800543e:	e080      	b.n	8005542 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_SPI_TransmitReceive+0x204>
 8005448:	8b7b      	ldrh	r3, [r7, #26]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d16f      	bne.n	800552e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005474:	e05b      	b.n	800552e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d11c      	bne.n	80054be <HAL_SPI_TransmitReceive+0x274>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <HAL_SPI_TransmitReceive+0x274>
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d114      	bne.n	80054be <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d119      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x2b6>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d014      	beq.n	8005500 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054fc:	2301      	movs	r3, #1
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005500:	f7fe fa30 	bl	8003964 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550c:	429a      	cmp	r2, r3
 800550e:	d803      	bhi.n	8005518 <HAL_SPI_TransmitReceive+0x2ce>
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d102      	bne.n	800551e <HAL_SPI_TransmitReceive+0x2d4>
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800552c:	e033      	b.n	8005596 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d19e      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x22c>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d199      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f90a 	bl	8005760 <SPI_EndRxTxTransaction>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800555e:	e01a      	b.n	8005596 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800558c:	e003      	b.n	8005596 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800559e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055bc:	f7fe f9d2 	bl	8003964 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	4413      	add	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055cc:	f7fe f9ca 	bl	8003964 <HAL_GetTick>
 80055d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055d2:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	015b      	lsls	r3, r3, #5
 80055d8:	0d1b      	lsrs	r3, r3, #20
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055e2:	e054      	b.n	800568e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d050      	beq.n	800568e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ec:	f7fe f9ba 	bl	8003964 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d902      	bls.n	8005602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d13d      	bne.n	800567e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561a:	d111      	bne.n	8005640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	d004      	beq.n	8005630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d107      	bne.n	8005640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005648:	d10f      	bne.n	800566a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e017      	b.n	80056ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	3b01      	subs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d19b      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000064 	.word	0x20000064

080056bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d0:	d111      	bne.n	80056f6 <SPI_EndRxTransaction+0x3a>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056da:	d004      	beq.n	80056e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d107      	bne.n	80056f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d117      	bne.n	8005730 <SPI_EndRxTransaction+0x74>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005708:	d112      	bne.n	8005730 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	2101      	movs	r1, #1
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ff49 	bl	80055ac <SPI_WaitFlagStateUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e013      	b.n	8005758 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	2180      	movs	r1, #128	; 0x80
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff ff36 	bl	80055ac <SPI_WaitFlagStateUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e000      	b.n	8005758 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ff18 	bl	80055ac <SPI_WaitFlagStateUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e000      	b.n	8005794 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e041      	b.n	8005832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fd faa8 	bl	8002d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f000 fd70 	bl	80062c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d001      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e03f      	b.n	80058d4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_TIM_Base_Start_IT+0x62>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d00e      	beq.n	800589e <HAL_TIM_Base_Start_IT+0x62>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_TIM_Base_Start_IT+0x62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <HAL_TIM_Base_Start_IT+0xac>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_TIM_Base_Start_IT+0x62>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a14      	ldr	r2, [pc, #80]	; (80058ec <HAL_TIM_Base_Start_IT+0xb0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d010      	beq.n	80058d2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	e007      	b.n	80058d2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00

080058f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e041      	b.n	8005986 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f839 	bl	800598e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fcc6 	bl	80062c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <HAL_TIM_PWM_Start+0x24>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e022      	b.n	8005a0a <HAL_TIM_PWM_Start+0x6a>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d109      	bne.n	80059de <HAL_TIM_PWM_Start+0x3e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	bf14      	ite	ne
 80059d6:	2301      	movne	r3, #1
 80059d8:	2300      	moveq	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e015      	b.n	8005a0a <HAL_TIM_PWM_Start+0x6a>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d109      	bne.n	80059f8 <HAL_TIM_PWM_Start+0x58>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e008      	b.n	8005a0a <HAL_TIM_PWM_Start+0x6a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	bf14      	ite	ne
 8005a04:	2301      	movne	r3, #1
 8005a06:	2300      	moveq	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e063      	b.n	8005ada <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x82>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a20:	e013      	b.n	8005a4a <HAL_TIM_PWM_Start+0xaa>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x92>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	e00b      	b.n	8005a4a <HAL_TIM_PWM_Start+0xaa>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Start+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a40:	e003      	b.n	8005a4a <HAL_TIM_PWM_Start+0xaa>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 febe 	bl	80067d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a21      	ldr	r2, [pc, #132]	; (8005ae4 <HAL_TIM_PWM_Start+0x144>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d107      	bne.n	8005a72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIM_PWM_Start+0x144>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x104>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x104>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <HAL_TIM_PWM_Start+0x148>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x104>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIM_PWM_Start+0x14c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x104>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <HAL_TIM_PWM_Start+0x150>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d111      	bne.n	8005ac8 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d010      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	e007      	b.n	8005ad8 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00

08005af4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e093      	b.n	8005c30 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fd f88d 	bl	8002c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b38:	f023 0307 	bic.w	r3, r3, #7
 8005b3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 fbb9 	bl	80062c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	4313      	orrs	r3, r2
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b94:	f023 030c 	bic.w	r3, r3, #12
 8005b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	031b      	lsls	r3, r3, #12
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4313      	orrs	r3, r2
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d110      	bne.n	8005c8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d102      	bne.n	8005c74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c6e:	7b7b      	ldrb	r3, [r7, #13]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e069      	b.n	8005d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c88:	e031      	b.n	8005cee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d110      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d102      	bne.n	8005c9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c96:	7b3b      	ldrb	r3, [r7, #12]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d001      	beq.n	8005ca0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e055      	b.n	8005d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cb0:	e01d      	b.n	8005cee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d108      	bne.n	8005cca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d105      	bne.n	8005cca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cbe:	7b7b      	ldrb	r3, [r7, #13]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d102      	bne.n	8005cca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cc4:	7b3b      	ldrb	r3, [r7, #12]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e03e      	b.n	8005d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_Encoder_Start+0xc4>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d008      	beq.n	8005d0c <HAL_TIM_Encoder_Start+0xd4>
 8005cfa:	e00f      	b.n	8005d1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2201      	movs	r2, #1
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fd65 	bl	80067d4 <TIM_CCxChannelCmd>
      break;
 8005d0a:	e016      	b.n	8005d3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	2104      	movs	r1, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fd5d 	bl	80067d4 <TIM_CCxChannelCmd>
      break;
 8005d1a:	e00e      	b.n	8005d3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2201      	movs	r2, #1
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fd55 	bl	80067d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	2104      	movs	r1, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fd4e 	bl	80067d4 <TIM_CCxChannelCmd>
      break;
 8005d38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0201 	orr.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d122      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0202 	mvn.w	r2, #2
 8005d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa76 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa69 	bl	8006276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fa78 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0204 	mvn.w	r2, #4
 8005dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa4c 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa3f 	bl	8006276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fa4e 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0208 	mvn.w	r2, #8
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa22 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa15 	bl	8006276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fa24 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0210 	mvn.w	r2, #16
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2208      	movs	r2, #8
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9f8 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9eb 	bl	8006276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f9fa 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0201 	mvn.w	r2, #1
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fb fea4 	bl	8001c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fcfb 	bl	80068fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d10e      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d107      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9be 	bl	80062ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d10e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d107      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0220 	mvn.w	r2, #32
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fcc6 	bl	80068e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e0ae      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	f200 809f 	bhi.w	80060d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	080060d1 	.word	0x080060d1
 8005fa0:	080060d1 	.word	0x080060d1
 8005fa4:	080060d1 	.word	0x080060d1
 8005fa8:	0800600d 	.word	0x0800600d
 8005fac:	080060d1 	.word	0x080060d1
 8005fb0:	080060d1 	.word	0x080060d1
 8005fb4:	080060d1 	.word	0x080060d1
 8005fb8:	0800604f 	.word	0x0800604f
 8005fbc:	080060d1 	.word	0x080060d1
 8005fc0:	080060d1 	.word	0x080060d1
 8005fc4:	080060d1 	.word	0x080060d1
 8005fc8:	0800608f 	.word	0x0800608f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f9e0 	bl	8006398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0208 	orr.w	r2, r2, #8
 8005fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0204 	bic.w	r2, r2, #4
 8005ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6999      	ldr	r1, [r3, #24]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	619a      	str	r2, [r3, #24]
      break;
 800600a:	e064      	b.n	80060d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fa26 	bl	8006464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6999      	ldr	r1, [r3, #24]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	619a      	str	r2, [r3, #24]
      break;
 800604c:	e043      	b.n	80060d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fa6f 	bl	8006538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0208 	orr.w	r2, r2, #8
 8006068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0204 	bic.w	r2, r2, #4
 8006078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	61da      	str	r2, [r3, #28]
      break;
 800608c:	e023      	b.n	80060d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fab9 	bl	800660c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69d9      	ldr	r1, [r3, #28]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	021a      	lsls	r2, r3, #8
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	61da      	str	r2, [r3, #28]
      break;
 80060ce:	e002      	b.n	80060d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
      break;
 80060d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_ConfigClockSource+0x1c>
 8006100:	2302      	movs	r3, #2
 8006102:	e0b4      	b.n	800626e <HAL_TIM_ConfigClockSource+0x186>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613c:	d03e      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0xd4>
 800613e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006142:	f200 8087 	bhi.w	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	f000 8086 	beq.w	800625a <HAL_TIM_ConfigClockSource+0x172>
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006152:	d87f      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 8006154:	2b70      	cmp	r3, #112	; 0x70
 8006156:	d01a      	beq.n	800618e <HAL_TIM_ConfigClockSource+0xa6>
 8006158:	2b70      	cmp	r3, #112	; 0x70
 800615a:	d87b      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 800615c:	2b60      	cmp	r3, #96	; 0x60
 800615e:	d050      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x11a>
 8006160:	2b60      	cmp	r3, #96	; 0x60
 8006162:	d877      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 8006164:	2b50      	cmp	r3, #80	; 0x50
 8006166:	d03c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006168:	2b50      	cmp	r3, #80	; 0x50
 800616a:	d873      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d058      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x13a>
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d86f      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d064      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x15a>
 8006178:	2b30      	cmp	r3, #48	; 0x30
 800617a:	d86b      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d060      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x15a>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d867      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d05c      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x15a>
 8006188:	2b10      	cmp	r3, #16
 800618a:	d05a      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	e062      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800619e:	f000 fafa 	bl	8006796 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	609a      	str	r2, [r3, #8]
      break;
 80061ba:	e04f      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061cc:	f000 fae3 	bl	8006796 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061de:	609a      	str	r2, [r3, #8]
      break;
 80061e0:	e03c      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	461a      	mov	r2, r3
 80061f0:	f000 fa5a 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2150      	movs	r1, #80	; 0x50
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fab1 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006200:	e02c      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800620e:	461a      	mov	r2, r3
 8006210:	f000 fa78 	bl	8006704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2160      	movs	r1, #96	; 0x60
 800621a:	4618      	mov	r0, r3
 800621c:	f000 faa1 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006220:	e01c      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	461a      	mov	r2, r3
 8006230:	f000 fa3a 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2140      	movs	r1, #64	; 0x40
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa91 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006240:	e00c      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f000 fa88 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006252:	e003      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
      break;
 8006258:	e000      	b.n	800625c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800625a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
	...

080062c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <TIM_Base_SetConfig+0xc8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062de:	d00b      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a2a      	ldr	r2, [pc, #168]	; (800638c <TIM_Base_SetConfig+0xcc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a29      	ldr	r2, [pc, #164]	; (8006390 <TIM_Base_SetConfig+0xd0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a28      	ldr	r2, [pc, #160]	; (8006394 <TIM_Base_SetConfig+0xd4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <TIM_Base_SetConfig+0xc8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <TIM_Base_SetConfig+0x72>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0x72>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1b      	ldr	r2, [pc, #108]	; (800638c <TIM_Base_SetConfig+0xcc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0x72>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <TIM_Base_SetConfig+0xd0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0x72>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a19      	ldr	r2, [pc, #100]	; (8006394 <TIM_Base_SetConfig+0xd4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d108      	bne.n	8006344 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a07      	ldr	r2, [pc, #28]	; (8006388 <TIM_Base_SetConfig+0xc8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d103      	bne.n	8006378 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	615a      	str	r2, [r3, #20]
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00

08006398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f023 0201 	bic.w	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f023 0302 	bic.w	r3, r3, #2
 80063e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1c      	ldr	r2, [pc, #112]	; (8006460 <TIM_OC1_SetConfig+0xc8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10c      	bne.n	800640e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0308 	bic.w	r3, r3, #8
 80063fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a13      	ldr	r2, [pc, #76]	; (8006460 <TIM_OC1_SetConfig+0xc8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d111      	bne.n	800643a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800641c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	621a      	str	r2, [r3, #32]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00

08006464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f023 0210 	bic.w	r2, r3, #16
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <TIM_OC2_SetConfig+0xd0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d10d      	bne.n	80064e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a14      	ldr	r2, [pc, #80]	; (8006534 <TIM_OC2_SetConfig+0xd0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d113      	bne.n	8006510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	40012c00 	.word	0x40012c00

08006538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <TIM_OC3_SetConfig+0xd0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10d      	bne.n	80065b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <TIM_OC3_SetConfig+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d113      	bne.n	80065e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00

0800660c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	031b      	lsls	r3, r3, #12
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a0f      	ldr	r2, [pc, #60]	; (80066a4 <TIM_OC4_SetConfig+0x98>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d109      	bne.n	8006680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr
 80066a4:	40012c00 	.word	0x40012c00

080066a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 030a 	bic.w	r3, r3, #10
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0210 	bic.w	r2, r3, #16
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800672e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	031b      	lsls	r3, r3, #12
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	f043 0307 	orr.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr

08006796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006796:	b480      	push	{r7}
 8006798:	b087      	sub	sp, #28
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	021a      	lsls	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	609a      	str	r2, [r3, #8]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2201      	movs	r2, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	401a      	ands	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006830:	2302      	movs	r3, #2
 8006832:	e04b      	b.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d013      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d00e      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a15      	ldr	r2, [pc, #84]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d009      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10c      	bne.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00

080068e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr

080068fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e042      	b.n	80069a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fc fa9c 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2224      	movs	r2, #36	; 0x24
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800694e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f91d 	bl	8006b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695a      	ldr	r2, [r3, #20]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d16d      	bne.n	8006aa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_UART_Transmit+0x2c>
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e066      	b.n	8006aaa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ea:	f7fc ffbb 	bl	8003964 <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d108      	bne.n	8006a18 <HAL_UART_Transmit+0x6c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e003      	b.n	8006a20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a20:	e02a      	b.n	8006a78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f840 	bl	8006ab2 <UART_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e036      	b.n	8006aaa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	3302      	adds	r3, #2
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	e007      	b.n	8006a6a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1cf      	bne.n	8006a22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2140      	movs	r1, #64	; 0x40
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f810 	bl	8006ab2 <UART_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e006      	b.n	8006aaa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b090      	sub	sp, #64	; 0x40
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac2:	e050      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d04c      	beq.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ad2:	f7fc ff47 	bl	8003964 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d241      	bcs.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b02:	637a      	str	r2, [r7, #52]	; 0x34
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	613b      	str	r3, [r7, #16]
   return(result);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b36:	623a      	str	r2, [r7, #32]
 8006b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	69f9      	ldr	r1, [r7, #28]
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e5      	bne.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00f      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d09f      	beq.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3740      	adds	r7, #64	; 0x40
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bca:	f023 030c 	bic.w	r3, r3, #12
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2c      	ldr	r2, [pc, #176]	; (8006ca4 <UART_SetConfig+0x114>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d103      	bne.n	8006c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bf8:	f7fe f816 	bl	8004c28 <HAL_RCC_GetPCLK2Freq>
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	e002      	b.n	8006c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fd fffe 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8006c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009a      	lsls	r2, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	4a22      	ldr	r2, [pc, #136]	; (8006ca8 <UART_SetConfig+0x118>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	0119      	lsls	r1, r3, #4
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009a      	lsls	r2, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ca8 <UART_SetConfig+0x118>)
 8006c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2064      	movs	r0, #100	; 0x64
 8006c46:	fb00 f303 	mul.w	r3, r0, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	3332      	adds	r3, #50	; 0x32
 8006c50:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <UART_SetConfig+0x118>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5c:	4419      	add	r1, r3
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009a      	lsls	r2, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <UART_SetConfig+0x118>)
 8006c76:	fba3 0302 	umull	r0, r3, r3, r2
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	2064      	movs	r0, #100	; 0x64
 8006c7e:	fb00 f303 	mul.w	r3, r0, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	3332      	adds	r3, #50	; 0x32
 8006c88:	4a07      	ldr	r2, [pc, #28]	; (8006ca8 <UART_SetConfig+0x118>)
 8006c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	440a      	add	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40013800 	.word	0x40013800
 8006ca8:	51eb851f 	.word	0x51eb851f

08006cac <__cvt>:
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb2:	461f      	mov	r7, r3
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006cba:	461f      	movlt	r7, r3
 8006cbc:	2300      	movge	r3, #0
 8006cbe:	232d      	movlt	r3, #45	; 0x2d
 8006cc0:	b088      	sub	sp, #32
 8006cc2:	4614      	mov	r4, r2
 8006cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006cc8:	7013      	strb	r3, [r2, #0]
 8006cca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ccc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006cd0:	f023 0820 	bic.w	r8, r3, #32
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd8:	d005      	beq.n	8006ce6 <__cvt+0x3a>
 8006cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cde:	d100      	bne.n	8006ce2 <__cvt+0x36>
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e000      	b.n	8006ce8 <__cvt+0x3c>
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	aa07      	add	r2, sp, #28
 8006cea:	9204      	str	r2, [sp, #16]
 8006cec:	aa06      	add	r2, sp, #24
 8006cee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006cf2:	e9cd 3500 	strd	r3, r5, [sp]
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	f000 fe71 	bl	80079e0 <_dtoa_r>
 8006cfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d02:	4606      	mov	r6, r0
 8006d04:	d102      	bne.n	8006d0c <__cvt+0x60>
 8006d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d08:	07db      	lsls	r3, r3, #31
 8006d0a:	d522      	bpl.n	8006d52 <__cvt+0xa6>
 8006d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d10:	eb06 0905 	add.w	r9, r6, r5
 8006d14:	d110      	bne.n	8006d38 <__cvt+0x8c>
 8006d16:	7833      	ldrb	r3, [r6, #0]
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d10a      	bne.n	8006d32 <__cvt+0x86>
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4620      	mov	r0, r4
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 ff60 	bl	8000be8 <__aeabi_dcmpeq>
 8006d28:	b918      	cbnz	r0, 8006d32 <__cvt+0x86>
 8006d2a:	f1c5 0501 	rsb	r5, r5, #1
 8006d2e:	f8ca 5000 	str.w	r5, [sl]
 8006d32:	f8da 3000 	ldr.w	r3, [sl]
 8006d36:	4499      	add	r9, r3
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 ff52 	bl	8000be8 <__aeabi_dcmpeq>
 8006d44:	b108      	cbz	r0, 8006d4a <__cvt+0x9e>
 8006d46:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d4a:	2230      	movs	r2, #48	; 0x30
 8006d4c:	9b07      	ldr	r3, [sp, #28]
 8006d4e:	454b      	cmp	r3, r9
 8006d50:	d307      	bcc.n	8006d62 <__cvt+0xb6>
 8006d52:	4630      	mov	r0, r6
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d58:	1b9b      	subs	r3, r3, r6
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	b008      	add	sp, #32
 8006d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	9107      	str	r1, [sp, #28]
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	e7f0      	b.n	8006d4c <__cvt+0xa0>

08006d6a <__exponent>:
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	f803 2b02 	strb.w	r2, [r3], #2
 8006d74:	bfb6      	itet	lt
 8006d76:	222d      	movlt	r2, #45	; 0x2d
 8006d78:	222b      	movge	r2, #43	; 0x2b
 8006d7a:	4249      	neglt	r1, r1
 8006d7c:	2909      	cmp	r1, #9
 8006d7e:	7042      	strb	r2, [r0, #1]
 8006d80:	dd2a      	ble.n	8006dd8 <__exponent+0x6e>
 8006d82:	f10d 0207 	add.w	r2, sp, #7
 8006d86:	4617      	mov	r7, r2
 8006d88:	260a      	movs	r6, #10
 8006d8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d8e:	4694      	mov	ip, r2
 8006d90:	fb06 1415 	mls	r4, r6, r5, r1
 8006d94:	3430      	adds	r4, #48	; 0x30
 8006d96:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	2c63      	cmp	r4, #99	; 0x63
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f102 32ff 	add.w	r2, r2, #4294967295
 8006da4:	dcf1      	bgt.n	8006d8a <__exponent+0x20>
 8006da6:	3130      	adds	r1, #48	; 0x30
 8006da8:	f1ac 0402 	sub.w	r4, ip, #2
 8006dac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006db0:	4622      	mov	r2, r4
 8006db2:	1c41      	adds	r1, r0, #1
 8006db4:	42ba      	cmp	r2, r7
 8006db6:	d30a      	bcc.n	8006dce <__exponent+0x64>
 8006db8:	f10d 0209 	add.w	r2, sp, #9
 8006dbc:	eba2 020c 	sub.w	r2, r2, ip
 8006dc0:	42bc      	cmp	r4, r7
 8006dc2:	bf88      	it	hi
 8006dc4:	2200      	movhi	r2, #0
 8006dc6:	4413      	add	r3, r2
 8006dc8:	1a18      	subs	r0, r3, r0
 8006dca:	b003      	add	sp, #12
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dce:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006dd2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006dd6:	e7ed      	b.n	8006db4 <__exponent+0x4a>
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	3130      	adds	r1, #48	; 0x30
 8006ddc:	7083      	strb	r3, [r0, #2]
 8006dde:	70c1      	strb	r1, [r0, #3]
 8006de0:	1d03      	adds	r3, r0, #4
 8006de2:	e7f1      	b.n	8006dc8 <__exponent+0x5e>

08006de4 <_printf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	b091      	sub	sp, #68	; 0x44
 8006dea:	460c      	mov	r4, r1
 8006dec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006df0:	4616      	mov	r6, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	4605      	mov	r5, r0
 8006df6:	f000 fce5 	bl	80077c4 <_localeconv_r>
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006e00:	f7f9 fa12 	bl	8000228 <strlen>
 8006e04:	2300      	movs	r3, #0
 8006e06:	930e      	str	r3, [sp, #56]	; 0x38
 8006e08:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e0e:	3307      	adds	r3, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	f103 0208 	add.w	r2, r3, #8
 8006e18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e1c:	f8d4 b000 	ldr.w	fp, [r4]
 8006e20:	f8c8 2000 	str.w	r2, [r8]
 8006e24:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006e28:	4652      	mov	r2, sl
 8006e2a:	4643      	mov	r3, r8
 8006e2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e30:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	4b9c      	ldr	r3, [pc, #624]	; (80070b0 <_printf_float+0x2cc>)
 8006e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e40:	f7f9 ff04 	bl	8000c4c <__aeabi_dcmpun>
 8006e44:	bb70      	cbnz	r0, 8006ea4 <_printf_float+0xc0>
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	4b98      	ldr	r3, [pc, #608]	; (80070b0 <_printf_float+0x2cc>)
 8006e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e50:	f7f9 fede 	bl	8000c10 <__aeabi_dcmple>
 8006e54:	bb30      	cbnz	r0, 8006ea4 <_printf_float+0xc0>
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4650      	mov	r0, sl
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	f7f9 fecd 	bl	8000bfc <__aeabi_dcmplt>
 8006e62:	b110      	cbz	r0, 8006e6a <_printf_float+0x86>
 8006e64:	232d      	movs	r3, #45	; 0x2d
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6a:	4a92      	ldr	r2, [pc, #584]	; (80070b4 <_printf_float+0x2d0>)
 8006e6c:	4b92      	ldr	r3, [pc, #584]	; (80070b8 <_printf_float+0x2d4>)
 8006e6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e72:	bf94      	ite	ls
 8006e74:	4690      	movls	r8, r2
 8006e76:	4698      	movhi	r8, r3
 8006e78:	2303      	movs	r3, #3
 8006e7a:	f04f 0a00 	mov.w	sl, #0
 8006e7e:	6123      	str	r3, [r4, #16]
 8006e80:	f02b 0304 	bic.w	r3, fp, #4
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	4633      	mov	r3, r6
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	9700      	str	r7, [sp, #0]
 8006e8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006e90:	f000 f9d6 	bl	8007240 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	f040 8090 	bne.w	8006fba <_printf_float+0x1d6>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	b011      	add	sp, #68	; 0x44
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4643      	mov	r3, r8
 8006ea8:	4650      	mov	r0, sl
 8006eaa:	4641      	mov	r1, r8
 8006eac:	f7f9 fece 	bl	8000c4c <__aeabi_dcmpun>
 8006eb0:	b148      	cbz	r0, 8006ec6 <_printf_float+0xe2>
 8006eb2:	f1b8 0f00 	cmp.w	r8, #0
 8006eb6:	bfb8      	it	lt
 8006eb8:	232d      	movlt	r3, #45	; 0x2d
 8006eba:	4a80      	ldr	r2, [pc, #512]	; (80070bc <_printf_float+0x2d8>)
 8006ebc:	bfb8      	it	lt
 8006ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ec2:	4b7f      	ldr	r3, [pc, #508]	; (80070c0 <_printf_float+0x2dc>)
 8006ec4:	e7d3      	b.n	8006e6e <_printf_float+0x8a>
 8006ec6:	6863      	ldr	r3, [r4, #4]
 8006ec8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	d142      	bne.n	8006f56 <_printf_float+0x172>
 8006ed0:	2306      	movs	r3, #6
 8006ed2:	6063      	str	r3, [r4, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	9206      	str	r2, [sp, #24]
 8006ed8:	aa0e      	add	r2, sp, #56	; 0x38
 8006eda:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006ede:	aa0d      	add	r2, sp, #52	; 0x34
 8006ee0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006ee4:	9203      	str	r2, [sp, #12]
 8006ee6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006eea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	4643      	mov	r3, r8
 8006efa:	910b      	str	r1, [sp, #44]	; 0x2c
 8006efc:	f7ff fed6 	bl	8006cac <__cvt>
 8006f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f02:	4680      	mov	r8, r0
 8006f04:	2947      	cmp	r1, #71	; 0x47
 8006f06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f08:	d108      	bne.n	8006f1c <_printf_float+0x138>
 8006f0a:	1cc8      	adds	r0, r1, #3
 8006f0c:	db02      	blt.n	8006f14 <_printf_float+0x130>
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	4299      	cmp	r1, r3
 8006f12:	dd40      	ble.n	8006f96 <_printf_float+0x1b2>
 8006f14:	f1a9 0902 	sub.w	r9, r9, #2
 8006f18:	fa5f f989 	uxtb.w	r9, r9
 8006f1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f20:	d81f      	bhi.n	8006f62 <_printf_float+0x17e>
 8006f22:	464a      	mov	r2, r9
 8006f24:	3901      	subs	r1, #1
 8006f26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f2a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f2c:	f7ff ff1d 	bl	8006d6a <__exponent>
 8006f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f32:	4682      	mov	sl, r0
 8006f34:	1813      	adds	r3, r2, r0
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	dc02      	bgt.n	8006f42 <_printf_float+0x15e>
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	07d2      	lsls	r2, r2, #31
 8006f40:	d501      	bpl.n	8006f46 <_printf_float+0x162>
 8006f42:	3301      	adds	r3, #1
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d09b      	beq.n	8006e86 <_printf_float+0xa2>
 8006f4e:	232d      	movs	r3, #45	; 0x2d
 8006f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f54:	e797      	b.n	8006e86 <_printf_float+0xa2>
 8006f56:	2947      	cmp	r1, #71	; 0x47
 8006f58:	d1bc      	bne.n	8006ed4 <_printf_float+0xf0>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1ba      	bne.n	8006ed4 <_printf_float+0xf0>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e7b7      	b.n	8006ed2 <_printf_float+0xee>
 8006f62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f66:	d118      	bne.n	8006f9a <_printf_float+0x1b6>
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	dd0b      	ble.n	8006f86 <_printf_float+0x1a2>
 8006f6e:	6121      	str	r1, [r4, #16]
 8006f70:	b913      	cbnz	r3, 8006f78 <_printf_float+0x194>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d502      	bpl.n	8006f7e <_printf_float+0x19a>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	440b      	add	r3, r1
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	f04f 0a00 	mov.w	sl, #0
 8006f82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f84:	e7df      	b.n	8006f46 <_printf_float+0x162>
 8006f86:	b913      	cbnz	r3, 8006f8e <_printf_float+0x1aa>
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	07d2      	lsls	r2, r2, #31
 8006f8c:	d501      	bpl.n	8006f92 <_printf_float+0x1ae>
 8006f8e:	3302      	adds	r3, #2
 8006f90:	e7f4      	b.n	8006f7c <_printf_float+0x198>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f2      	b.n	8006f7c <_printf_float+0x198>
 8006f96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	db05      	blt.n	8006fac <_printf_float+0x1c8>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	6121      	str	r1, [r4, #16]
 8006fa4:	07d8      	lsls	r0, r3, #31
 8006fa6:	d5ea      	bpl.n	8006f7e <_printf_float+0x19a>
 8006fa8:	1c4b      	adds	r3, r1, #1
 8006faa:	e7e7      	b.n	8006f7c <_printf_float+0x198>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	bfcc      	ite	gt
 8006fb0:	2201      	movgt	r2, #1
 8006fb2:	f1c1 0202 	rsble	r2, r1, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	e7e0      	b.n	8006f7c <_printf_float+0x198>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	055a      	lsls	r2, r3, #21
 8006fbe:	d407      	bmi.n	8006fd0 <_printf_float+0x1ec>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d12b      	bne.n	8007026 <_printf_float+0x242>
 8006fce:	e764      	b.n	8006e9a <_printf_float+0xb6>
 8006fd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fd4:	f240 80dd 	bls.w	8007192 <_printf_float+0x3ae>
 8006fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f7f9 fe02 	bl	8000be8 <__aeabi_dcmpeq>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d033      	beq.n	8007050 <_printf_float+0x26c>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	4a35      	ldr	r2, [pc, #212]	; (80070c4 <_printf_float+0x2e0>)
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f af51 	beq.w	8006e9a <_printf_float+0xb6>
 8006ff8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db02      	blt.n	8007006 <_printf_float+0x222>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07d8      	lsls	r0, r3, #31
 8007004:	d50f      	bpl.n	8007026 <_printf_float+0x242>
 8007006:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f af42 	beq.w	8006e9a <_printf_float+0xb6>
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	f104 091a 	add.w	r9, r4, #26
 800701e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007020:	3b01      	subs	r3, #1
 8007022:	4543      	cmp	r3, r8
 8007024:	dc09      	bgt.n	800703a <_printf_float+0x256>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	079b      	lsls	r3, r3, #30
 800702a:	f100 8104 	bmi.w	8007236 <_printf_float+0x452>
 800702e:	68e0      	ldr	r0, [r4, #12]
 8007030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007032:	4298      	cmp	r0, r3
 8007034:	bfb8      	it	lt
 8007036:	4618      	movlt	r0, r3
 8007038:	e731      	b.n	8006e9e <_printf_float+0xba>
 800703a:	2301      	movs	r3, #1
 800703c:	464a      	mov	r2, r9
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f af28 	beq.w	8006e9a <_printf_float+0xb6>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e7e6      	b.n	800701e <_printf_float+0x23a>
 8007050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc38      	bgt.n	80070c8 <_printf_float+0x2e4>
 8007056:	2301      	movs	r3, #1
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	4a19      	ldr	r2, [pc, #100]	; (80070c4 <_printf_float+0x2e0>)
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f af1a 	beq.w	8006e9a <_printf_float+0xb6>
 8007066:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800706a:	4313      	orrs	r3, r2
 800706c:	d102      	bne.n	8007074 <_printf_float+0x290>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	07d9      	lsls	r1, r3, #31
 8007072:	d5d8      	bpl.n	8007026 <_printf_float+0x242>
 8007074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af0b 	beq.w	8006e9a <_printf_float+0xb6>
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	f104 0a1a 	add.w	sl, r4, #26
 800708c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800708e:	425b      	negs	r3, r3
 8007090:	454b      	cmp	r3, r9
 8007092:	dc01      	bgt.n	8007098 <_printf_float+0x2b4>
 8007094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007096:	e794      	b.n	8006fc2 <_printf_float+0x1de>
 8007098:	2301      	movs	r3, #1
 800709a:	4652      	mov	r2, sl
 800709c:	4631      	mov	r1, r6
 800709e:	4628      	mov	r0, r5
 80070a0:	47b8      	blx	r7
 80070a2:	3001      	adds	r0, #1
 80070a4:	f43f aef9 	beq.w	8006e9a <_printf_float+0xb6>
 80070a8:	f109 0901 	add.w	r9, r9, #1
 80070ac:	e7ee      	b.n	800708c <_printf_float+0x2a8>
 80070ae:	bf00      	nop
 80070b0:	7fefffff 	.word	0x7fefffff
 80070b4:	080099ec 	.word	0x080099ec
 80070b8:	080099f0 	.word	0x080099f0
 80070bc:	080099f4 	.word	0x080099f4
 80070c0:	080099f8 	.word	0x080099f8
 80070c4:	080099fc 	.word	0x080099fc
 80070c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070cc:	429a      	cmp	r2, r3
 80070ce:	bfa8      	it	ge
 80070d0:	461a      	movge	r2, r3
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	4691      	mov	r9, r2
 80070d6:	dc37      	bgt.n	8007148 <_printf_float+0x364>
 80070d8:	f04f 0b00 	mov.w	fp, #0
 80070dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e0:	f104 021a 	add.w	r2, r4, #26
 80070e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80070e8:	ebaa 0309 	sub.w	r3, sl, r9
 80070ec:	455b      	cmp	r3, fp
 80070ee:	dc33      	bgt.n	8007158 <_printf_float+0x374>
 80070f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070f4:	429a      	cmp	r2, r3
 80070f6:	db3b      	blt.n	8007170 <_printf_float+0x38c>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	07da      	lsls	r2, r3, #31
 80070fc:	d438      	bmi.n	8007170 <_printf_float+0x38c>
 80070fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007102:	eba2 0903 	sub.w	r9, r2, r3
 8007106:	eba2 020a 	sub.w	r2, r2, sl
 800710a:	4591      	cmp	r9, r2
 800710c:	bfa8      	it	ge
 800710e:	4691      	movge	r9, r2
 8007110:	f1b9 0f00 	cmp.w	r9, #0
 8007114:	dc34      	bgt.n	8007180 <_printf_float+0x39c>
 8007116:	f04f 0800 	mov.w	r8, #0
 800711a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800711e:	f104 0a1a 	add.w	sl, r4, #26
 8007122:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	eba3 0309 	sub.w	r3, r3, r9
 800712c:	4543      	cmp	r3, r8
 800712e:	f77f af7a 	ble.w	8007026 <_printf_float+0x242>
 8007132:	2301      	movs	r3, #1
 8007134:	4652      	mov	r2, sl
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f aeac 	beq.w	8006e9a <_printf_float+0xb6>
 8007142:	f108 0801 	add.w	r8, r8, #1
 8007146:	e7ec      	b.n	8007122 <_printf_float+0x33e>
 8007148:	4613      	mov	r3, r2
 800714a:	4631      	mov	r1, r6
 800714c:	4642      	mov	r2, r8
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	d1c0      	bne.n	80070d8 <_printf_float+0x2f4>
 8007156:	e6a0      	b.n	8006e9a <_printf_float+0xb6>
 8007158:	2301      	movs	r3, #1
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f ae99 	beq.w	8006e9a <_printf_float+0xb6>
 8007168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800716a:	f10b 0b01 	add.w	fp, fp, #1
 800716e:	e7b9      	b.n	80070e4 <_printf_float+0x300>
 8007170:	4631      	mov	r1, r6
 8007172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	d1bf      	bne.n	80070fe <_printf_float+0x31a>
 800717e:	e68c      	b.n	8006e9a <_printf_float+0xb6>
 8007180:	464b      	mov	r3, r9
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	eb08 020a 	add.w	r2, r8, sl
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	d1c2      	bne.n	8007116 <_printf_float+0x332>
 8007190:	e683      	b.n	8006e9a <_printf_float+0xb6>
 8007192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007194:	2a01      	cmp	r2, #1
 8007196:	dc01      	bgt.n	800719c <_printf_float+0x3b8>
 8007198:	07db      	lsls	r3, r3, #31
 800719a:	d539      	bpl.n	8007210 <_printf_float+0x42c>
 800719c:	2301      	movs	r3, #1
 800719e:	4642      	mov	r2, r8
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f ae77 	beq.w	8006e9a <_printf_float+0xb6>
 80071ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f ae6f 	beq.w	8006e9a <_printf_float+0xb6>
 80071bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071c0:	2200      	movs	r2, #0
 80071c2:	2300      	movs	r3, #0
 80071c4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80071c8:	f7f9 fd0e 	bl	8000be8 <__aeabi_dcmpeq>
 80071cc:	b9d8      	cbnz	r0, 8007206 <_printf_float+0x422>
 80071ce:	f109 33ff 	add.w	r3, r9, #4294967295
 80071d2:	f108 0201 	add.w	r2, r8, #1
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	d10e      	bne.n	80071fe <_printf_float+0x41a>
 80071e0:	e65b      	b.n	8006e9a <_printf_float+0xb6>
 80071e2:	2301      	movs	r3, #1
 80071e4:	464a      	mov	r2, r9
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	f43f ae54 	beq.w	8006e9a <_printf_float+0xb6>
 80071f2:	f108 0801 	add.w	r8, r8, #1
 80071f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4543      	cmp	r3, r8
 80071fc:	dcf1      	bgt.n	80071e2 <_printf_float+0x3fe>
 80071fe:	4653      	mov	r3, sl
 8007200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007204:	e6de      	b.n	8006fc4 <_printf_float+0x1e0>
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	f104 091a 	add.w	r9, r4, #26
 800720e:	e7f2      	b.n	80071f6 <_printf_float+0x412>
 8007210:	2301      	movs	r3, #1
 8007212:	4642      	mov	r2, r8
 8007214:	e7df      	b.n	80071d6 <_printf_float+0x3f2>
 8007216:	2301      	movs	r3, #1
 8007218:	464a      	mov	r2, r9
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	f43f ae3a 	beq.w	8006e9a <_printf_float+0xb6>
 8007226:	f108 0801 	add.w	r8, r8, #1
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800722e:	1a5b      	subs	r3, r3, r1
 8007230:	4543      	cmp	r3, r8
 8007232:	dcf0      	bgt.n	8007216 <_printf_float+0x432>
 8007234:	e6fb      	b.n	800702e <_printf_float+0x24a>
 8007236:	f04f 0800 	mov.w	r8, #0
 800723a:	f104 0919 	add.w	r9, r4, #25
 800723e:	e7f4      	b.n	800722a <_printf_float+0x446>

08007240 <_printf_common>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	4616      	mov	r6, r2
 8007246:	4699      	mov	r9, r3
 8007248:	688a      	ldr	r2, [r1, #8]
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	4607      	mov	r7, r0
 800724e:	4293      	cmp	r3, r2
 8007250:	bfb8      	it	lt
 8007252:	4613      	movlt	r3, r2
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800725a:	460c      	mov	r4, r1
 800725c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007260:	b10a      	cbz	r2, 8007266 <_printf_common+0x26>
 8007262:	3301      	adds	r3, #1
 8007264:	6033      	str	r3, [r6, #0]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	0699      	lsls	r1, r3, #26
 800726a:	bf42      	ittt	mi
 800726c:	6833      	ldrmi	r3, [r6, #0]
 800726e:	3302      	addmi	r3, #2
 8007270:	6033      	strmi	r3, [r6, #0]
 8007272:	6825      	ldr	r5, [r4, #0]
 8007274:	f015 0506 	ands.w	r5, r5, #6
 8007278:	d106      	bne.n	8007288 <_printf_common+0x48>
 800727a:	f104 0a19 	add.w	sl, r4, #25
 800727e:	68e3      	ldr	r3, [r4, #12]
 8007280:	6832      	ldr	r2, [r6, #0]
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	42ab      	cmp	r3, r5
 8007286:	dc2b      	bgt.n	80072e0 <_printf_common+0xa0>
 8007288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800728c:	1e13      	subs	r3, r2, #0
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	bf18      	it	ne
 8007292:	2301      	movne	r3, #1
 8007294:	0692      	lsls	r2, r2, #26
 8007296:	d430      	bmi.n	80072fa <_printf_common+0xba>
 8007298:	4649      	mov	r1, r9
 800729a:	4638      	mov	r0, r7
 800729c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a0:	47c0      	blx	r8
 80072a2:	3001      	adds	r0, #1
 80072a4:	d023      	beq.n	80072ee <_printf_common+0xae>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	6922      	ldr	r2, [r4, #16]
 80072aa:	f003 0306 	and.w	r3, r3, #6
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	bf14      	ite	ne
 80072b2:	2500      	movne	r5, #0
 80072b4:	6833      	ldreq	r3, [r6, #0]
 80072b6:	f04f 0600 	mov.w	r6, #0
 80072ba:	bf08      	it	eq
 80072bc:	68e5      	ldreq	r5, [r4, #12]
 80072be:	f104 041a 	add.w	r4, r4, #26
 80072c2:	bf08      	it	eq
 80072c4:	1aed      	subeq	r5, r5, r3
 80072c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072ca:	bf08      	it	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bfc4      	itt	gt
 80072d4:	1a9b      	subgt	r3, r3, r2
 80072d6:	18ed      	addgt	r5, r5, r3
 80072d8:	42b5      	cmp	r5, r6
 80072da:	d11a      	bne.n	8007312 <_printf_common+0xd2>
 80072dc:	2000      	movs	r0, #0
 80072de:	e008      	b.n	80072f2 <_printf_common+0xb2>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4652      	mov	r2, sl
 80072e4:	4649      	mov	r1, r9
 80072e6:	4638      	mov	r0, r7
 80072e8:	47c0      	blx	r8
 80072ea:	3001      	adds	r0, #1
 80072ec:	d103      	bne.n	80072f6 <_printf_common+0xb6>
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7c1      	b.n	800727e <_printf_common+0x3e>
 80072fa:	2030      	movs	r0, #48	; 0x30
 80072fc:	18e1      	adds	r1, r4, r3
 80072fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007308:	4422      	add	r2, r4
 800730a:	3302      	adds	r3, #2
 800730c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007310:	e7c2      	b.n	8007298 <_printf_common+0x58>
 8007312:	2301      	movs	r3, #1
 8007314:	4622      	mov	r2, r4
 8007316:	4649      	mov	r1, r9
 8007318:	4638      	mov	r0, r7
 800731a:	47c0      	blx	r8
 800731c:	3001      	adds	r0, #1
 800731e:	d0e6      	beq.n	80072ee <_printf_common+0xae>
 8007320:	3601      	adds	r6, #1
 8007322:	e7d9      	b.n	80072d8 <_printf_common+0x98>

08007324 <_printf_i>:
 8007324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	7e0f      	ldrb	r7, [r1, #24]
 800732a:	4691      	mov	r9, r2
 800732c:	2f78      	cmp	r7, #120	; 0x78
 800732e:	4680      	mov	r8, r0
 8007330:	460c      	mov	r4, r1
 8007332:	469a      	mov	sl, r3
 8007334:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800733a:	d807      	bhi.n	800734c <_printf_i+0x28>
 800733c:	2f62      	cmp	r7, #98	; 0x62
 800733e:	d80a      	bhi.n	8007356 <_printf_i+0x32>
 8007340:	2f00      	cmp	r7, #0
 8007342:	f000 80d5 	beq.w	80074f0 <_printf_i+0x1cc>
 8007346:	2f58      	cmp	r7, #88	; 0x58
 8007348:	f000 80c1 	beq.w	80074ce <_printf_i+0x1aa>
 800734c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007354:	e03a      	b.n	80073cc <_printf_i+0xa8>
 8007356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800735a:	2b15      	cmp	r3, #21
 800735c:	d8f6      	bhi.n	800734c <_printf_i+0x28>
 800735e:	a101      	add	r1, pc, #4	; (adr r1, 8007364 <_printf_i+0x40>)
 8007360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007364:	080073bd 	.word	0x080073bd
 8007368:	080073d1 	.word	0x080073d1
 800736c:	0800734d 	.word	0x0800734d
 8007370:	0800734d 	.word	0x0800734d
 8007374:	0800734d 	.word	0x0800734d
 8007378:	0800734d 	.word	0x0800734d
 800737c:	080073d1 	.word	0x080073d1
 8007380:	0800734d 	.word	0x0800734d
 8007384:	0800734d 	.word	0x0800734d
 8007388:	0800734d 	.word	0x0800734d
 800738c:	0800734d 	.word	0x0800734d
 8007390:	080074d7 	.word	0x080074d7
 8007394:	080073fd 	.word	0x080073fd
 8007398:	08007491 	.word	0x08007491
 800739c:	0800734d 	.word	0x0800734d
 80073a0:	0800734d 	.word	0x0800734d
 80073a4:	080074f9 	.word	0x080074f9
 80073a8:	0800734d 	.word	0x0800734d
 80073ac:	080073fd 	.word	0x080073fd
 80073b0:	0800734d 	.word	0x0800734d
 80073b4:	0800734d 	.word	0x0800734d
 80073b8:	08007499 	.word	0x08007499
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	1d1a      	adds	r2, r3, #4
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0a0      	b.n	8007512 <_printf_i+0x1ee>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	0607      	lsls	r7, r0, #24
 80073d6:	f103 0104 	add.w	r1, r3, #4
 80073da:	6029      	str	r1, [r5, #0]
 80073dc:	d501      	bpl.n	80073e2 <_printf_i+0xbe>
 80073de:	681e      	ldr	r6, [r3, #0]
 80073e0:	e003      	b.n	80073ea <_printf_i+0xc6>
 80073e2:	0646      	lsls	r6, r0, #25
 80073e4:	d5fb      	bpl.n	80073de <_printf_i+0xba>
 80073e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073ea:	2e00      	cmp	r6, #0
 80073ec:	da03      	bge.n	80073f6 <_printf_i+0xd2>
 80073ee:	232d      	movs	r3, #45	; 0x2d
 80073f0:	4276      	negs	r6, r6
 80073f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f6:	230a      	movs	r3, #10
 80073f8:	4859      	ldr	r0, [pc, #356]	; (8007560 <_printf_i+0x23c>)
 80073fa:	e012      	b.n	8007422 <_printf_i+0xfe>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	6820      	ldr	r0, [r4, #0]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	6029      	str	r1, [r5, #0]
 8007404:	0605      	lsls	r5, r0, #24
 8007406:	d501      	bpl.n	800740c <_printf_i+0xe8>
 8007408:	681e      	ldr	r6, [r3, #0]
 800740a:	e002      	b.n	8007412 <_printf_i+0xee>
 800740c:	0641      	lsls	r1, r0, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0xe4>
 8007410:	881e      	ldrh	r6, [r3, #0]
 8007412:	2f6f      	cmp	r7, #111	; 0x6f
 8007414:	bf0c      	ite	eq
 8007416:	2308      	moveq	r3, #8
 8007418:	230a      	movne	r3, #10
 800741a:	4851      	ldr	r0, [pc, #324]	; (8007560 <_printf_i+0x23c>)
 800741c:	2100      	movs	r1, #0
 800741e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007422:	6865      	ldr	r5, [r4, #4]
 8007424:	2d00      	cmp	r5, #0
 8007426:	bfa8      	it	ge
 8007428:	6821      	ldrge	r1, [r4, #0]
 800742a:	60a5      	str	r5, [r4, #8]
 800742c:	bfa4      	itt	ge
 800742e:	f021 0104 	bicge.w	r1, r1, #4
 8007432:	6021      	strge	r1, [r4, #0]
 8007434:	b90e      	cbnz	r6, 800743a <_printf_i+0x116>
 8007436:	2d00      	cmp	r5, #0
 8007438:	d04b      	beq.n	80074d2 <_printf_i+0x1ae>
 800743a:	4615      	mov	r5, r2
 800743c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007440:	fb03 6711 	mls	r7, r3, r1, r6
 8007444:	5dc7      	ldrb	r7, [r0, r7]
 8007446:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800744a:	4637      	mov	r7, r6
 800744c:	42bb      	cmp	r3, r7
 800744e:	460e      	mov	r6, r1
 8007450:	d9f4      	bls.n	800743c <_printf_i+0x118>
 8007452:	2b08      	cmp	r3, #8
 8007454:	d10b      	bne.n	800746e <_printf_i+0x14a>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	07de      	lsls	r6, r3, #31
 800745a:	d508      	bpl.n	800746e <_printf_i+0x14a>
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	6861      	ldr	r1, [r4, #4]
 8007460:	4299      	cmp	r1, r3
 8007462:	bfde      	ittt	le
 8007464:	2330      	movle	r3, #48	; 0x30
 8007466:	f805 3c01 	strble.w	r3, [r5, #-1]
 800746a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800746e:	1b52      	subs	r2, r2, r5
 8007470:	6122      	str	r2, [r4, #16]
 8007472:	464b      	mov	r3, r9
 8007474:	4621      	mov	r1, r4
 8007476:	4640      	mov	r0, r8
 8007478:	f8cd a000 	str.w	sl, [sp]
 800747c:	aa03      	add	r2, sp, #12
 800747e:	f7ff fedf 	bl	8007240 <_printf_common>
 8007482:	3001      	adds	r0, #1
 8007484:	d14a      	bne.n	800751c <_printf_i+0x1f8>
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
 800748a:	b004      	add	sp, #16
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	f043 0320 	orr.w	r3, r3, #32
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	2778      	movs	r7, #120	; 0x78
 800749a:	4832      	ldr	r0, [pc, #200]	; (8007564 <_printf_i+0x240>)
 800749c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	6829      	ldr	r1, [r5, #0]
 80074a4:	061f      	lsls	r7, r3, #24
 80074a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80074aa:	d402      	bmi.n	80074b2 <_printf_i+0x18e>
 80074ac:	065f      	lsls	r7, r3, #25
 80074ae:	bf48      	it	mi
 80074b0:	b2b6      	uxthmi	r6, r6
 80074b2:	07df      	lsls	r7, r3, #31
 80074b4:	bf48      	it	mi
 80074b6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ba:	6029      	str	r1, [r5, #0]
 80074bc:	bf48      	it	mi
 80074be:	6023      	strmi	r3, [r4, #0]
 80074c0:	b91e      	cbnz	r6, 80074ca <_printf_i+0x1a6>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	f023 0320 	bic.w	r3, r3, #32
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	2310      	movs	r3, #16
 80074cc:	e7a6      	b.n	800741c <_printf_i+0xf8>
 80074ce:	4824      	ldr	r0, [pc, #144]	; (8007560 <_printf_i+0x23c>)
 80074d0:	e7e4      	b.n	800749c <_printf_i+0x178>
 80074d2:	4615      	mov	r5, r2
 80074d4:	e7bd      	b.n	8007452 <_printf_i+0x12e>
 80074d6:	682b      	ldr	r3, [r5, #0]
 80074d8:	6826      	ldr	r6, [r4, #0]
 80074da:	1d18      	adds	r0, r3, #4
 80074dc:	6961      	ldr	r1, [r4, #20]
 80074de:	6028      	str	r0, [r5, #0]
 80074e0:	0635      	lsls	r5, r6, #24
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	d501      	bpl.n	80074ea <_printf_i+0x1c6>
 80074e6:	6019      	str	r1, [r3, #0]
 80074e8:	e002      	b.n	80074f0 <_printf_i+0x1cc>
 80074ea:	0670      	lsls	r0, r6, #25
 80074ec:	d5fb      	bpl.n	80074e6 <_printf_i+0x1c2>
 80074ee:	8019      	strh	r1, [r3, #0]
 80074f0:	2300      	movs	r3, #0
 80074f2:	4615      	mov	r5, r2
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	e7bc      	b.n	8007472 <_printf_i+0x14e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	2100      	movs	r1, #0
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	602a      	str	r2, [r5, #0]
 8007500:	681d      	ldr	r5, [r3, #0]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	4628      	mov	r0, r5
 8007506:	f000 f9d4 	bl	80078b2 <memchr>
 800750a:	b108      	cbz	r0, 8007510 <_printf_i+0x1ec>
 800750c:	1b40      	subs	r0, r0, r5
 800750e:	6060      	str	r0, [r4, #4]
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	2300      	movs	r3, #0
 8007516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751a:	e7aa      	b.n	8007472 <_printf_i+0x14e>
 800751c:	462a      	mov	r2, r5
 800751e:	4649      	mov	r1, r9
 8007520:	4640      	mov	r0, r8
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	47d0      	blx	sl
 8007526:	3001      	adds	r0, #1
 8007528:	d0ad      	beq.n	8007486 <_printf_i+0x162>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	079b      	lsls	r3, r3, #30
 800752e:	d413      	bmi.n	8007558 <_printf_i+0x234>
 8007530:	68e0      	ldr	r0, [r4, #12]
 8007532:	9b03      	ldr	r3, [sp, #12]
 8007534:	4298      	cmp	r0, r3
 8007536:	bfb8      	it	lt
 8007538:	4618      	movlt	r0, r3
 800753a:	e7a6      	b.n	800748a <_printf_i+0x166>
 800753c:	2301      	movs	r3, #1
 800753e:	4632      	mov	r2, r6
 8007540:	4649      	mov	r1, r9
 8007542:	4640      	mov	r0, r8
 8007544:	47d0      	blx	sl
 8007546:	3001      	adds	r0, #1
 8007548:	d09d      	beq.n	8007486 <_printf_i+0x162>
 800754a:	3501      	adds	r5, #1
 800754c:	68e3      	ldr	r3, [r4, #12]
 800754e:	9903      	ldr	r1, [sp, #12]
 8007550:	1a5b      	subs	r3, r3, r1
 8007552:	42ab      	cmp	r3, r5
 8007554:	dcf2      	bgt.n	800753c <_printf_i+0x218>
 8007556:	e7eb      	b.n	8007530 <_printf_i+0x20c>
 8007558:	2500      	movs	r5, #0
 800755a:	f104 0619 	add.w	r6, r4, #25
 800755e:	e7f5      	b.n	800754c <_printf_i+0x228>
 8007560:	080099fe 	.word	0x080099fe
 8007564:	08009a0f 	.word	0x08009a0f

08007568 <std>:
 8007568:	2300      	movs	r3, #0
 800756a:	b510      	push	{r4, lr}
 800756c:	4604      	mov	r4, r0
 800756e:	e9c0 3300 	strd	r3, r3, [r0]
 8007572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007576:	6083      	str	r3, [r0, #8]
 8007578:	8181      	strh	r1, [r0, #12]
 800757a:	6643      	str	r3, [r0, #100]	; 0x64
 800757c:	81c2      	strh	r2, [r0, #14]
 800757e:	6183      	str	r3, [r0, #24]
 8007580:	4619      	mov	r1, r3
 8007582:	2208      	movs	r2, #8
 8007584:	305c      	adds	r0, #92	; 0x5c
 8007586:	f000 f914 	bl	80077b2 <memset>
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <std+0x58>)
 800758c:	6224      	str	r4, [r4, #32]
 800758e:	6263      	str	r3, [r4, #36]	; 0x24
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <std+0x5c>)
 8007592:	62a3      	str	r3, [r4, #40]	; 0x28
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <std+0x60>)
 8007596:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <std+0x64>)
 800759a:	6323      	str	r3, [r4, #48]	; 0x30
 800759c:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <std+0x68>)
 800759e:	429c      	cmp	r4, r3
 80075a0:	d006      	beq.n	80075b0 <std+0x48>
 80075a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80075a6:	4294      	cmp	r4, r2
 80075a8:	d002      	beq.n	80075b0 <std+0x48>
 80075aa:	33d0      	adds	r3, #208	; 0xd0
 80075ac:	429c      	cmp	r4, r3
 80075ae:	d105      	bne.n	80075bc <std+0x54>
 80075b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f000 b978 	b.w	80078ac <__retarget_lock_init_recursive>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	0800772d 	.word	0x0800772d
 80075c4:	0800774f 	.word	0x0800774f
 80075c8:	08007787 	.word	0x08007787
 80075cc:	080077ab 	.word	0x080077ab
 80075d0:	2000063c 	.word	0x2000063c

080075d4 <stdio_exit_handler>:
 80075d4:	4a02      	ldr	r2, [pc, #8]	; (80075e0 <stdio_exit_handler+0xc>)
 80075d6:	4903      	ldr	r1, [pc, #12]	; (80075e4 <stdio_exit_handler+0x10>)
 80075d8:	4803      	ldr	r0, [pc, #12]	; (80075e8 <stdio_exit_handler+0x14>)
 80075da:	f000 b869 	b.w	80076b0 <_fwalk_sglue>
 80075de:	bf00      	nop
 80075e0:	20000098 	.word	0x20000098
 80075e4:	08009245 	.word	0x08009245
 80075e8:	200000a4 	.word	0x200000a4

080075ec <cleanup_stdio>:
 80075ec:	6841      	ldr	r1, [r0, #4]
 80075ee:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <cleanup_stdio+0x34>)
 80075f0:	b510      	push	{r4, lr}
 80075f2:	4299      	cmp	r1, r3
 80075f4:	4604      	mov	r4, r0
 80075f6:	d001      	beq.n	80075fc <cleanup_stdio+0x10>
 80075f8:	f001 fe24 	bl	8009244 <_fflush_r>
 80075fc:	68a1      	ldr	r1, [r4, #8]
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <cleanup_stdio+0x38>)
 8007600:	4299      	cmp	r1, r3
 8007602:	d002      	beq.n	800760a <cleanup_stdio+0x1e>
 8007604:	4620      	mov	r0, r4
 8007606:	f001 fe1d 	bl	8009244 <_fflush_r>
 800760a:	68e1      	ldr	r1, [r4, #12]
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <cleanup_stdio+0x3c>)
 800760e:	4299      	cmp	r1, r3
 8007610:	d004      	beq.n	800761c <cleanup_stdio+0x30>
 8007612:	4620      	mov	r0, r4
 8007614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007618:	f001 be14 	b.w	8009244 <_fflush_r>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	bf00      	nop
 8007620:	2000063c 	.word	0x2000063c
 8007624:	200006a4 	.word	0x200006a4
 8007628:	2000070c 	.word	0x2000070c

0800762c <global_stdio_init.part.0>:
 800762c:	b510      	push	{r4, lr}
 800762e:	4b0b      	ldr	r3, [pc, #44]	; (800765c <global_stdio_init.part.0+0x30>)
 8007630:	4c0b      	ldr	r4, [pc, #44]	; (8007660 <global_stdio_init.part.0+0x34>)
 8007632:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <global_stdio_init.part.0+0x38>)
 8007634:	4620      	mov	r0, r4
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	2104      	movs	r1, #4
 800763a:	2200      	movs	r2, #0
 800763c:	f7ff ff94 	bl	8007568 <std>
 8007640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007644:	2201      	movs	r2, #1
 8007646:	2109      	movs	r1, #9
 8007648:	f7ff ff8e 	bl	8007568 <std>
 800764c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007650:	2202      	movs	r2, #2
 8007652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007656:	2112      	movs	r1, #18
 8007658:	f7ff bf86 	b.w	8007568 <std>
 800765c:	20000774 	.word	0x20000774
 8007660:	2000063c 	.word	0x2000063c
 8007664:	080075d5 	.word	0x080075d5

08007668 <__sfp_lock_acquire>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sfp_lock_acquire+0x8>)
 800766a:	f000 b920 	b.w	80078ae <__retarget_lock_acquire_recursive>
 800766e:	bf00      	nop
 8007670:	2000077d 	.word	0x2000077d

08007674 <__sfp_lock_release>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__sfp_lock_release+0x8>)
 8007676:	f000 b91b 	b.w	80078b0 <__retarget_lock_release_recursive>
 800767a:	bf00      	nop
 800767c:	2000077d 	.word	0x2000077d

08007680 <__sinit>:
 8007680:	b510      	push	{r4, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	f7ff fff0 	bl	8007668 <__sfp_lock_acquire>
 8007688:	6a23      	ldr	r3, [r4, #32]
 800768a:	b11b      	cbz	r3, 8007694 <__sinit+0x14>
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007690:	f7ff bff0 	b.w	8007674 <__sfp_lock_release>
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <__sinit+0x28>)
 8007696:	6223      	str	r3, [r4, #32]
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <__sinit+0x2c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f5      	bne.n	800768c <__sinit+0xc>
 80076a0:	f7ff ffc4 	bl	800762c <global_stdio_init.part.0>
 80076a4:	e7f2      	b.n	800768c <__sinit+0xc>
 80076a6:	bf00      	nop
 80076a8:	080075ed 	.word	0x080075ed
 80076ac:	20000774 	.word	0x20000774

080076b0 <_fwalk_sglue>:
 80076b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4607      	mov	r7, r0
 80076b6:	4688      	mov	r8, r1
 80076b8:	4614      	mov	r4, r2
 80076ba:	2600      	movs	r6, #0
 80076bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076c0:	f1b9 0901 	subs.w	r9, r9, #1
 80076c4:	d505      	bpl.n	80076d2 <_fwalk_sglue+0x22>
 80076c6:	6824      	ldr	r4, [r4, #0]
 80076c8:	2c00      	cmp	r4, #0
 80076ca:	d1f7      	bne.n	80076bc <_fwalk_sglue+0xc>
 80076cc:	4630      	mov	r0, r6
 80076ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d907      	bls.n	80076e8 <_fwalk_sglue+0x38>
 80076d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076dc:	3301      	adds	r3, #1
 80076de:	d003      	beq.n	80076e8 <_fwalk_sglue+0x38>
 80076e0:	4629      	mov	r1, r5
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c0      	blx	r8
 80076e6:	4306      	orrs	r6, r0
 80076e8:	3568      	adds	r5, #104	; 0x68
 80076ea:	e7e9      	b.n	80076c0 <_fwalk_sglue+0x10>

080076ec <siprintf>:
 80076ec:	b40e      	push	{r1, r2, r3}
 80076ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076f2:	b500      	push	{lr}
 80076f4:	b09c      	sub	sp, #112	; 0x70
 80076f6:	ab1d      	add	r3, sp, #116	; 0x74
 80076f8:	9002      	str	r0, [sp, #8]
 80076fa:	9006      	str	r0, [sp, #24]
 80076fc:	9107      	str	r1, [sp, #28]
 80076fe:	9104      	str	r1, [sp, #16]
 8007700:	4808      	ldr	r0, [pc, #32]	; (8007724 <siprintf+0x38>)
 8007702:	4909      	ldr	r1, [pc, #36]	; (8007728 <siprintf+0x3c>)
 8007704:	f853 2b04 	ldr.w	r2, [r3], #4
 8007708:	9105      	str	r1, [sp, #20]
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	a902      	add	r1, sp, #8
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f001 fc18 	bl	8008f44 <_svfiprintf_r>
 8007714:	2200      	movs	r2, #0
 8007716:	9b02      	ldr	r3, [sp, #8]
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	b01c      	add	sp, #112	; 0x70
 800771c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007720:	b003      	add	sp, #12
 8007722:	4770      	bx	lr
 8007724:	200000f0 	.word	0x200000f0
 8007728:	ffff0208 	.word	0xffff0208

0800772c <__sread>:
 800772c:	b510      	push	{r4, lr}
 800772e:	460c      	mov	r4, r1
 8007730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007734:	f000 f86c 	bl	8007810 <_read_r>
 8007738:	2800      	cmp	r0, #0
 800773a:	bfab      	itete	ge
 800773c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800773e:	89a3      	ldrhlt	r3, [r4, #12]
 8007740:	181b      	addge	r3, r3, r0
 8007742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007746:	bfac      	ite	ge
 8007748:	6563      	strge	r3, [r4, #84]	; 0x54
 800774a:	81a3      	strhlt	r3, [r4, #12]
 800774c:	bd10      	pop	{r4, pc}

0800774e <__swrite>:
 800774e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007752:	461f      	mov	r7, r3
 8007754:	898b      	ldrh	r3, [r1, #12]
 8007756:	4605      	mov	r5, r0
 8007758:	05db      	lsls	r3, r3, #23
 800775a:	460c      	mov	r4, r1
 800775c:	4616      	mov	r6, r2
 800775e:	d505      	bpl.n	800776c <__swrite+0x1e>
 8007760:	2302      	movs	r3, #2
 8007762:	2200      	movs	r2, #0
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	f000 f840 	bl	80077ec <_lseek_r>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	4632      	mov	r2, r6
 8007770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	4628      	mov	r0, r5
 8007778:	463b      	mov	r3, r7
 800777a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007782:	f000 b857 	b.w	8007834 <_write_r>

08007786 <__sseek>:
 8007786:	b510      	push	{r4, lr}
 8007788:	460c      	mov	r4, r1
 800778a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778e:	f000 f82d 	bl	80077ec <_lseek_r>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	bf15      	itete	ne
 8007798:	6560      	strne	r0, [r4, #84]	; 0x54
 800779a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800779e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077a2:	81a3      	strheq	r3, [r4, #12]
 80077a4:	bf18      	it	ne
 80077a6:	81a3      	strhne	r3, [r4, #12]
 80077a8:	bd10      	pop	{r4, pc}

080077aa <__sclose>:
 80077aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ae:	f000 b80d 	b.w	80077cc <_close_r>

080077b2 <memset>:
 80077b2:	4603      	mov	r3, r0
 80077b4:	4402      	add	r2, r0
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d100      	bne.n	80077bc <memset+0xa>
 80077ba:	4770      	bx	lr
 80077bc:	f803 1b01 	strb.w	r1, [r3], #1
 80077c0:	e7f9      	b.n	80077b6 <memset+0x4>
	...

080077c4 <_localeconv_r>:
 80077c4:	4800      	ldr	r0, [pc, #0]	; (80077c8 <_localeconv_r+0x4>)
 80077c6:	4770      	bx	lr
 80077c8:	200001e4 	.word	0x200001e4

080077cc <_close_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	2300      	movs	r3, #0
 80077d0:	4d05      	ldr	r5, [pc, #20]	; (80077e8 <_close_r+0x1c>)
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7fb f84c 	bl	8002874 <_close>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_close_r+0x1a>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_close_r+0x1a>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000778 	.word	0x20000778

080077ec <_lseek_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	2200      	movs	r2, #0
 80077f6:	4d05      	ldr	r5, [pc, #20]	; (800780c <_lseek_r+0x20>)
 80077f8:	602a      	str	r2, [r5, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f7fb f85e 	bl	80028bc <_lseek>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_lseek_r+0x1e>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_lseek_r+0x1e>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000778 	.word	0x20000778

08007810 <_read_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	2200      	movs	r2, #0
 800781a:	4d05      	ldr	r5, [pc, #20]	; (8007830 <_read_r+0x20>)
 800781c:	602a      	str	r2, [r5, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	f7fa ffef 	bl	8002802 <_read>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_read_r+0x1e>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_read_r+0x1e>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20000778 	.word	0x20000778

08007834 <_write_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	4611      	mov	r1, r2
 800783c:	2200      	movs	r2, #0
 800783e:	4d05      	ldr	r5, [pc, #20]	; (8007854 <_write_r+0x20>)
 8007840:	602a      	str	r2, [r5, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	f7fa fffa 	bl	800283c <_write>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_write_r+0x1e>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_write_r+0x1e>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	20000778 	.word	0x20000778

08007858 <__errno>:
 8007858:	4b01      	ldr	r3, [pc, #4]	; (8007860 <__errno+0x8>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	200000f0 	.word	0x200000f0

08007864 <__libc_init_array>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	2600      	movs	r6, #0
 8007868:	4d0c      	ldr	r5, [pc, #48]	; (800789c <__libc_init_array+0x38>)
 800786a:	4c0d      	ldr	r4, [pc, #52]	; (80078a0 <__libc_init_array+0x3c>)
 800786c:	1b64      	subs	r4, r4, r5
 800786e:	10a4      	asrs	r4, r4, #2
 8007870:	42a6      	cmp	r6, r4
 8007872:	d109      	bne.n	8007888 <__libc_init_array+0x24>
 8007874:	f002 f886 	bl	8009984 <_init>
 8007878:	2600      	movs	r6, #0
 800787a:	4d0a      	ldr	r5, [pc, #40]	; (80078a4 <__libc_init_array+0x40>)
 800787c:	4c0a      	ldr	r4, [pc, #40]	; (80078a8 <__libc_init_array+0x44>)
 800787e:	1b64      	subs	r4, r4, r5
 8007880:	10a4      	asrs	r4, r4, #2
 8007882:	42a6      	cmp	r6, r4
 8007884:	d105      	bne.n	8007892 <__libc_init_array+0x2e>
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	f855 3b04 	ldr.w	r3, [r5], #4
 800788c:	4798      	blx	r3
 800788e:	3601      	adds	r6, #1
 8007890:	e7ee      	b.n	8007870 <__libc_init_array+0xc>
 8007892:	f855 3b04 	ldr.w	r3, [r5], #4
 8007896:	4798      	blx	r3
 8007898:	3601      	adds	r6, #1
 800789a:	e7f2      	b.n	8007882 <__libc_init_array+0x1e>
 800789c:	08009d64 	.word	0x08009d64
 80078a0:	08009d64 	.word	0x08009d64
 80078a4:	08009d64 	.word	0x08009d64
 80078a8:	08009d68 	.word	0x08009d68

080078ac <__retarget_lock_init_recursive>:
 80078ac:	4770      	bx	lr

080078ae <__retarget_lock_acquire_recursive>:
 80078ae:	4770      	bx	lr

080078b0 <__retarget_lock_release_recursive>:
 80078b0:	4770      	bx	lr

080078b2 <memchr>:
 80078b2:	4603      	mov	r3, r0
 80078b4:	b510      	push	{r4, lr}
 80078b6:	b2c9      	uxtb	r1, r1
 80078b8:	4402      	add	r2, r0
 80078ba:	4293      	cmp	r3, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	d101      	bne.n	80078c4 <memchr+0x12>
 80078c0:	2000      	movs	r0, #0
 80078c2:	e003      	b.n	80078cc <memchr+0x1a>
 80078c4:	7804      	ldrb	r4, [r0, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	428c      	cmp	r4, r1
 80078ca:	d1f6      	bne.n	80078ba <memchr+0x8>
 80078cc:	bd10      	pop	{r4, pc}

080078ce <quorem>:
 80078ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d2:	6903      	ldr	r3, [r0, #16]
 80078d4:	690c      	ldr	r4, [r1, #16]
 80078d6:	4607      	mov	r7, r0
 80078d8:	42a3      	cmp	r3, r4
 80078da:	db7f      	blt.n	80079dc <quorem+0x10e>
 80078dc:	3c01      	subs	r4, #1
 80078de:	f100 0514 	add.w	r5, r0, #20
 80078e2:	f101 0814 	add.w	r8, r1, #20
 80078e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f4:	3301      	adds	r3, #1
 80078f6:	429a      	cmp	r2, r3
 80078f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80078fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007900:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007904:	d331      	bcc.n	800796a <quorem+0x9c>
 8007906:	f04f 0e00 	mov.w	lr, #0
 800790a:	4640      	mov	r0, r8
 800790c:	46ac      	mov	ip, r5
 800790e:	46f2      	mov	sl, lr
 8007910:	f850 2b04 	ldr.w	r2, [r0], #4
 8007914:	b293      	uxth	r3, r2
 8007916:	fb06 e303 	mla	r3, r6, r3, lr
 800791a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800791e:	0c1a      	lsrs	r2, r3, #16
 8007920:	b29b      	uxth	r3, r3
 8007922:	fb06 220e 	mla	r2, r6, lr, r2
 8007926:	ebaa 0303 	sub.w	r3, sl, r3
 800792a:	f8dc a000 	ldr.w	sl, [ip]
 800792e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007932:	fa1f fa8a 	uxth.w	sl, sl
 8007936:	4453      	add	r3, sl
 8007938:	f8dc a000 	ldr.w	sl, [ip]
 800793c:	b292      	uxth	r2, r2
 800793e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794c:	4581      	cmp	r9, r0
 800794e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007952:	f84c 3b04 	str.w	r3, [ip], #4
 8007956:	d2db      	bcs.n	8007910 <quorem+0x42>
 8007958:	f855 300b 	ldr.w	r3, [r5, fp]
 800795c:	b92b      	cbnz	r3, 800796a <quorem+0x9c>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	3b04      	subs	r3, #4
 8007962:	429d      	cmp	r5, r3
 8007964:	461a      	mov	r2, r3
 8007966:	d32d      	bcc.n	80079c4 <quorem+0xf6>
 8007968:	613c      	str	r4, [r7, #16]
 800796a:	4638      	mov	r0, r7
 800796c:	f001 f992 	bl	8008c94 <__mcmp>
 8007970:	2800      	cmp	r0, #0
 8007972:	db23      	blt.n	80079bc <quorem+0xee>
 8007974:	4629      	mov	r1, r5
 8007976:	2000      	movs	r0, #0
 8007978:	3601      	adds	r6, #1
 800797a:	f858 2b04 	ldr.w	r2, [r8], #4
 800797e:	f8d1 c000 	ldr.w	ip, [r1]
 8007982:	b293      	uxth	r3, r2
 8007984:	1ac3      	subs	r3, r0, r3
 8007986:	0c12      	lsrs	r2, r2, #16
 8007988:	fa1f f08c 	uxth.w	r0, ip
 800798c:	4403      	add	r3, r0
 800798e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007992:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800799c:	45c1      	cmp	r9, r8
 800799e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079a2:	f841 3b04 	str.w	r3, [r1], #4
 80079a6:	d2e8      	bcs.n	800797a <quorem+0xac>
 80079a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079b0:	b922      	cbnz	r2, 80079bc <quorem+0xee>
 80079b2:	3b04      	subs	r3, #4
 80079b4:	429d      	cmp	r5, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	d30a      	bcc.n	80079d0 <quorem+0x102>
 80079ba:	613c      	str	r4, [r7, #16]
 80079bc:	4630      	mov	r0, r6
 80079be:	b003      	add	sp, #12
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	3b04      	subs	r3, #4
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	d1cd      	bne.n	8007968 <quorem+0x9a>
 80079cc:	3c01      	subs	r4, #1
 80079ce:	e7c8      	b.n	8007962 <quorem+0x94>
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	3b04      	subs	r3, #4
 80079d4:	2a00      	cmp	r2, #0
 80079d6:	d1f0      	bne.n	80079ba <quorem+0xec>
 80079d8:	3c01      	subs	r4, #1
 80079da:	e7eb      	b.n	80079b4 <quorem+0xe6>
 80079dc:	2000      	movs	r0, #0
 80079de:	e7ee      	b.n	80079be <quorem+0xf0>

080079e0 <_dtoa_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	4616      	mov	r6, r2
 80079e6:	461f      	mov	r7, r3
 80079e8:	69c4      	ldr	r4, [r0, #28]
 80079ea:	b099      	sub	sp, #100	; 0x64
 80079ec:	4605      	mov	r5, r0
 80079ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80079f6:	b974      	cbnz	r4, 8007a16 <_dtoa_r+0x36>
 80079f8:	2010      	movs	r0, #16
 80079fa:	f000 fe1d 	bl	8008638 <malloc>
 80079fe:	4602      	mov	r2, r0
 8007a00:	61e8      	str	r0, [r5, #28]
 8007a02:	b920      	cbnz	r0, 8007a0e <_dtoa_r+0x2e>
 8007a04:	21ef      	movs	r1, #239	; 0xef
 8007a06:	4bac      	ldr	r3, [pc, #688]	; (8007cb8 <_dtoa_r+0x2d8>)
 8007a08:	48ac      	ldr	r0, [pc, #688]	; (8007cbc <_dtoa_r+0x2dc>)
 8007a0a:	f001 fc7b 	bl	8009304 <__assert_func>
 8007a0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a12:	6004      	str	r4, [r0, #0]
 8007a14:	60c4      	str	r4, [r0, #12]
 8007a16:	69eb      	ldr	r3, [r5, #28]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	b151      	cbz	r1, 8007a32 <_dtoa_r+0x52>
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4093      	lsls	r3, r2
 8007a22:	604a      	str	r2, [r1, #4]
 8007a24:	608b      	str	r3, [r1, #8]
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 fefa 	bl	8008820 <_Bfree>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	69eb      	ldr	r3, [r5, #28]
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	1e3b      	subs	r3, r7, #0
 8007a34:	bfaf      	iteee	ge
 8007a36:	2300      	movge	r3, #0
 8007a38:	2201      	movlt	r2, #1
 8007a3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a3e:	9305      	strlt	r3, [sp, #20]
 8007a40:	bfa8      	it	ge
 8007a42:	f8c8 3000 	strge.w	r3, [r8]
 8007a46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007a4a:	4b9d      	ldr	r3, [pc, #628]	; (8007cc0 <_dtoa_r+0x2e0>)
 8007a4c:	bfb8      	it	lt
 8007a4e:	f8c8 2000 	strlt.w	r2, [r8]
 8007a52:	ea33 0309 	bics.w	r3, r3, r9
 8007a56:	d119      	bne.n	8007a8c <_dtoa_r+0xac>
 8007a58:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a64:	4333      	orrs	r3, r6
 8007a66:	f000 8589 	beq.w	800857c <_dtoa_r+0xb9c>
 8007a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a6c:	b953      	cbnz	r3, 8007a84 <_dtoa_r+0xa4>
 8007a6e:	4b95      	ldr	r3, [pc, #596]	; (8007cc4 <_dtoa_r+0x2e4>)
 8007a70:	e023      	b.n	8007aba <_dtoa_r+0xda>
 8007a72:	4b95      	ldr	r3, [pc, #596]	; (8007cc8 <_dtoa_r+0x2e8>)
 8007a74:	9303      	str	r3, [sp, #12]
 8007a76:	3308      	adds	r3, #8
 8007a78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	9803      	ldr	r0, [sp, #12]
 8007a7e:	b019      	add	sp, #100	; 0x64
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	4b8f      	ldr	r3, [pc, #572]	; (8007cc4 <_dtoa_r+0x2e4>)
 8007a86:	9303      	str	r3, [sp, #12]
 8007a88:	3303      	adds	r3, #3
 8007a8a:	e7f5      	b.n	8007a78 <_dtoa_r+0x98>
 8007a8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f7f9 f8a4 	bl	8000be8 <__aeabi_dcmpeq>
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	b160      	cbz	r0, 8007abe <_dtoa_r+0xde>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8562 	beq.w	8008576 <_dtoa_r+0xb96>
 8007ab2:	4b86      	ldr	r3, [pc, #536]	; (8007ccc <_dtoa_r+0x2ec>)
 8007ab4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	9303      	str	r3, [sp, #12]
 8007abc:	e7de      	b.n	8007a7c <_dtoa_r+0x9c>
 8007abe:	ab16      	add	r3, sp, #88	; 0x58
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	ab17      	add	r3, sp, #92	; 0x5c
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007acc:	f001 f98a 	bl	8008de4 <__d2b>
 8007ad0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	2c00      	cmp	r4, #0
 8007ad8:	d07e      	beq.n	8007bd8 <_dtoa_r+0x1f8>
 8007ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007aec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007af0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007af4:	4619      	mov	r1, r3
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b75      	ldr	r3, [pc, #468]	; (8007cd0 <_dtoa_r+0x2f0>)
 8007afa:	f7f8 fc55 	bl	80003a8 <__aeabi_dsub>
 8007afe:	a368      	add	r3, pc, #416	; (adr r3, 8007ca0 <_dtoa_r+0x2c0>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fe08 	bl	8000718 <__aeabi_dmul>
 8007b08:	a367      	add	r3, pc, #412	; (adr r3, 8007ca8 <_dtoa_r+0x2c8>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fc4d 	bl	80003ac <__adddf3>
 8007b12:	4606      	mov	r6, r0
 8007b14:	4620      	mov	r0, r4
 8007b16:	460f      	mov	r7, r1
 8007b18:	f7f8 fd94 	bl	8000644 <__aeabi_i2d>
 8007b1c:	a364      	add	r3, pc, #400	; (adr r3, 8007cb0 <_dtoa_r+0x2d0>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f7f8 fdf9 	bl	8000718 <__aeabi_dmul>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f8 fc3d 	bl	80003ac <__adddf3>
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	f7f9 f89f 	bl	8000c78 <__aeabi_d2iz>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	4683      	mov	fp, r0
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f9 f85a 	bl	8000bfc <__aeabi_dcmplt>
 8007b48:	b148      	cbz	r0, 8007b5e <_dtoa_r+0x17e>
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f7f8 fd7a 	bl	8000644 <__aeabi_i2d>
 8007b50:	4632      	mov	r2, r6
 8007b52:	463b      	mov	r3, r7
 8007b54:	f7f9 f848 	bl	8000be8 <__aeabi_dcmpeq>
 8007b58:	b908      	cbnz	r0, 8007b5e <_dtoa_r+0x17e>
 8007b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b5e:	f1bb 0f16 	cmp.w	fp, #22
 8007b62:	d857      	bhi.n	8007c14 <_dtoa_r+0x234>
 8007b64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b68:	4b5a      	ldr	r3, [pc, #360]	; (8007cd4 <_dtoa_r+0x2f4>)
 8007b6a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f9 f843 	bl	8000bfc <__aeabi_dcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d04e      	beq.n	8007c18 <_dtoa_r+0x238>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b84:	1b1b      	subs	r3, r3, r4
 8007b86:	1e5a      	subs	r2, r3, #1
 8007b88:	bf46      	itte	mi
 8007b8a:	f1c3 0901 	rsbmi	r9, r3, #1
 8007b8e:	2300      	movmi	r3, #0
 8007b90:	f04f 0900 	movpl.w	r9, #0
 8007b94:	9209      	str	r2, [sp, #36]	; 0x24
 8007b96:	bf48      	it	mi
 8007b98:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007b9a:	f1bb 0f00 	cmp.w	fp, #0
 8007b9e:	db3d      	blt.n	8007c1c <_dtoa_r+0x23c>
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007ba6:	445b      	add	r3, fp
 8007ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8007baa:	2300      	movs	r3, #0
 8007bac:	930a      	str	r3, [sp, #40]	; 0x28
 8007bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d867      	bhi.n	8007c84 <_dtoa_r+0x2a4>
 8007bb4:	2b05      	cmp	r3, #5
 8007bb6:	bfc4      	itt	gt
 8007bb8:	3b04      	subgt	r3, #4
 8007bba:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bbe:	bfc8      	it	gt
 8007bc0:	2400      	movgt	r4, #0
 8007bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bc6:	bfd8      	it	le
 8007bc8:	2401      	movle	r4, #1
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	f200 8086 	bhi.w	8007cdc <_dtoa_r+0x2fc>
 8007bd0:	e8df f003 	tbb	[pc, r3]
 8007bd4:	5637392c 	.word	0x5637392c
 8007bd8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007bdc:	441c      	add	r4, r3
 8007bde:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	bfc1      	itttt	gt
 8007be6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bea:	fa09 f903 	lslgt.w	r9, r9, r3
 8007bee:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007bf2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007bf6:	bfd6      	itet	le
 8007bf8:	f1c3 0320 	rsble	r3, r3, #32
 8007bfc:	ea49 0003 	orrgt.w	r0, r9, r3
 8007c00:	fa06 f003 	lslle.w	r0, r6, r3
 8007c04:	f7f8 fd0e 	bl	8000624 <__aeabi_ui2d>
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c0e:	3c01      	subs	r4, #1
 8007c10:	9213      	str	r2, [sp, #76]	; 0x4c
 8007c12:	e76f      	b.n	8007af4 <_dtoa_r+0x114>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e7b3      	b.n	8007b80 <_dtoa_r+0x1a0>
 8007c18:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c1a:	e7b2      	b.n	8007b82 <_dtoa_r+0x1a2>
 8007c1c:	f1cb 0300 	rsb	r3, fp, #0
 8007c20:	930a      	str	r3, [sp, #40]	; 0x28
 8007c22:	2300      	movs	r3, #0
 8007c24:	eba9 090b 	sub.w	r9, r9, fp
 8007c28:	930e      	str	r3, [sp, #56]	; 0x38
 8007c2a:	e7c0      	b.n	8007bae <_dtoa_r+0x1ce>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dc55      	bgt.n	8007ce2 <_dtoa_r+0x302>
 8007c36:	2301      	movs	r3, #1
 8007c38:	461a      	mov	r2, r3
 8007c3a:	9306      	str	r3, [sp, #24]
 8007c3c:	9308      	str	r3, [sp, #32]
 8007c3e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c40:	e00b      	b.n	8007c5a <_dtoa_r+0x27a>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7f3      	b.n	8007c2e <_dtoa_r+0x24e>
 8007c46:	2300      	movs	r3, #0
 8007c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c4c:	445b      	add	r3, fp
 8007c4e:	9306      	str	r3, [sp, #24]
 8007c50:	3301      	adds	r3, #1
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	9308      	str	r3, [sp, #32]
 8007c56:	bfb8      	it	lt
 8007c58:	2301      	movlt	r3, #1
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	69e8      	ldr	r0, [r5, #28]
 8007c60:	f102 0614 	add.w	r6, r2, #20
 8007c64:	429e      	cmp	r6, r3
 8007c66:	d940      	bls.n	8007cea <_dtoa_r+0x30a>
 8007c68:	6041      	str	r1, [r0, #4]
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 fd98 	bl	80087a0 <_Balloc>
 8007c70:	9003      	str	r0, [sp, #12]
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d13c      	bne.n	8007cf0 <_dtoa_r+0x310>
 8007c76:	4602      	mov	r2, r0
 8007c78:	f240 11af 	movw	r1, #431	; 0x1af
 8007c7c:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <_dtoa_r+0x2f8>)
 8007c7e:	e6c3      	b.n	8007a08 <_dtoa_r+0x28>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e7e1      	b.n	8007c48 <_dtoa_r+0x268>
 8007c84:	2401      	movs	r4, #1
 8007c86:	2300      	movs	r3, #0
 8007c88:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c8a:	9322      	str	r3, [sp, #136]	; 0x88
 8007c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c90:	2200      	movs	r2, #0
 8007c92:	9306      	str	r3, [sp, #24]
 8007c94:	9308      	str	r3, [sp, #32]
 8007c96:	2312      	movs	r3, #18
 8007c98:	e7d1      	b.n	8007c3e <_dtoa_r+0x25e>
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	636f4361 	.word	0x636f4361
 8007ca4:	3fd287a7 	.word	0x3fd287a7
 8007ca8:	8b60c8b3 	.word	0x8b60c8b3
 8007cac:	3fc68a28 	.word	0x3fc68a28
 8007cb0:	509f79fb 	.word	0x509f79fb
 8007cb4:	3fd34413 	.word	0x3fd34413
 8007cb8:	08009a2d 	.word	0x08009a2d
 8007cbc:	08009a44 	.word	0x08009a44
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	08009a29 	.word	0x08009a29
 8007cc8:	08009a20 	.word	0x08009a20
 8007ccc:	080099fd 	.word	0x080099fd
 8007cd0:	3ff80000 	.word	0x3ff80000
 8007cd4:	08009b30 	.word	0x08009b30
 8007cd8:	08009a9c 	.word	0x08009a9c
 8007cdc:	2301      	movs	r3, #1
 8007cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce0:	e7d4      	b.n	8007c8c <_dtoa_r+0x2ac>
 8007ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ce4:	9306      	str	r3, [sp, #24]
 8007ce6:	9308      	str	r3, [sp, #32]
 8007ce8:	e7b7      	b.n	8007c5a <_dtoa_r+0x27a>
 8007cea:	3101      	adds	r1, #1
 8007cec:	0052      	lsls	r2, r2, #1
 8007cee:	e7b7      	b.n	8007c60 <_dtoa_r+0x280>
 8007cf0:	69eb      	ldr	r3, [r5, #28]
 8007cf2:	9a03      	ldr	r2, [sp, #12]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	9b08      	ldr	r3, [sp, #32]
 8007cf8:	2b0e      	cmp	r3, #14
 8007cfa:	f200 80a8 	bhi.w	8007e4e <_dtoa_r+0x46e>
 8007cfe:	2c00      	cmp	r4, #0
 8007d00:	f000 80a5 	beq.w	8007e4e <_dtoa_r+0x46e>
 8007d04:	f1bb 0f00 	cmp.w	fp, #0
 8007d08:	dd34      	ble.n	8007d74 <_dtoa_r+0x394>
 8007d0a:	4b9a      	ldr	r3, [pc, #616]	; (8007f74 <_dtoa_r+0x594>)
 8007d0c:	f00b 020f 	and.w	r2, fp, #15
 8007d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d20:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007d24:	d016      	beq.n	8007d54 <_dtoa_r+0x374>
 8007d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d2a:	4b93      	ldr	r3, [pc, #588]	; (8007f78 <_dtoa_r+0x598>)
 8007d2c:	2703      	movs	r7, #3
 8007d2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d32:	f7f8 fe1b 	bl	800096c <__aeabi_ddiv>
 8007d36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d3a:	f004 040f 	and.w	r4, r4, #15
 8007d3e:	4e8e      	ldr	r6, [pc, #568]	; (8007f78 <_dtoa_r+0x598>)
 8007d40:	b954      	cbnz	r4, 8007d58 <_dtoa_r+0x378>
 8007d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d4a:	f7f8 fe0f 	bl	800096c <__aeabi_ddiv>
 8007d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d52:	e029      	b.n	8007da8 <_dtoa_r+0x3c8>
 8007d54:	2702      	movs	r7, #2
 8007d56:	e7f2      	b.n	8007d3e <_dtoa_r+0x35e>
 8007d58:	07e1      	lsls	r1, r4, #31
 8007d5a:	d508      	bpl.n	8007d6e <_dtoa_r+0x38e>
 8007d5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d64:	f7f8 fcd8 	bl	8000718 <__aeabi_dmul>
 8007d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d6c:	3701      	adds	r7, #1
 8007d6e:	1064      	asrs	r4, r4, #1
 8007d70:	3608      	adds	r6, #8
 8007d72:	e7e5      	b.n	8007d40 <_dtoa_r+0x360>
 8007d74:	f000 80a5 	beq.w	8007ec2 <_dtoa_r+0x4e2>
 8007d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d7c:	f1cb 0400 	rsb	r4, fp, #0
 8007d80:	4b7c      	ldr	r3, [pc, #496]	; (8007f74 <_dtoa_r+0x594>)
 8007d82:	f004 020f 	and.w	r2, r4, #15
 8007d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fcc3 	bl	8000718 <__aeabi_dmul>
 8007d92:	2702      	movs	r7, #2
 8007d94:	2300      	movs	r3, #0
 8007d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d9a:	4e77      	ldr	r6, [pc, #476]	; (8007f78 <_dtoa_r+0x598>)
 8007d9c:	1124      	asrs	r4, r4, #4
 8007d9e:	2c00      	cmp	r4, #0
 8007da0:	f040 8084 	bne.w	8007eac <_dtoa_r+0x4cc>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1d2      	bne.n	8007d4e <_dtoa_r+0x36e>
 8007da8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007dac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007db0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 8087 	beq.w	8007ec6 <_dtoa_r+0x4e6>
 8007db8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4b6f      	ldr	r3, [pc, #444]	; (8007f7c <_dtoa_r+0x59c>)
 8007dc0:	f7f8 ff1c 	bl	8000bfc <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d07e      	beq.n	8007ec6 <_dtoa_r+0x4e6>
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d07b      	beq.n	8007ec6 <_dtoa_r+0x4e6>
 8007dce:	9b06      	ldr	r3, [sp, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dd38      	ble.n	8007e46 <_dtoa_r+0x466>
 8007dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4b69      	ldr	r3, [pc, #420]	; (8007f80 <_dtoa_r+0x5a0>)
 8007ddc:	f7f8 fc9c 	bl	8000718 <__aeabi_dmul>
 8007de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de4:	9c06      	ldr	r4, [sp, #24]
 8007de6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007dea:	3701      	adds	r7, #1
 8007dec:	4638      	mov	r0, r7
 8007dee:	f7f8 fc29 	bl	8000644 <__aeabi_i2d>
 8007df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df6:	f7f8 fc8f 	bl	8000718 <__aeabi_dmul>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4b61      	ldr	r3, [pc, #388]	; (8007f84 <_dtoa_r+0x5a4>)
 8007dfe:	f7f8 fad5 	bl	80003ac <__adddf3>
 8007e02:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e0a:	9611      	str	r6, [sp, #68]	; 0x44
 8007e0c:	2c00      	cmp	r4, #0
 8007e0e:	d15d      	bne.n	8007ecc <_dtoa_r+0x4ec>
 8007e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e14:	2200      	movs	r2, #0
 8007e16:	4b5c      	ldr	r3, [pc, #368]	; (8007f88 <_dtoa_r+0x5a8>)
 8007e18:	f7f8 fac6 	bl	80003a8 <__aeabi_dsub>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e24:	4633      	mov	r3, r6
 8007e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e28:	f7f8 ff06 	bl	8000c38 <__aeabi_dcmpgt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f040 8295 	bne.w	800835c <_dtoa_r+0x97c>
 8007e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e3c:	f7f8 fede 	bl	8000bfc <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f040 8289 	bne.w	8008358 <_dtoa_r+0x978>
 8007e46:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007e4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f2c0 8151 	blt.w	80080f8 <_dtoa_r+0x718>
 8007e56:	f1bb 0f0e 	cmp.w	fp, #14
 8007e5a:	f300 814d 	bgt.w	80080f8 <_dtoa_r+0x718>
 8007e5e:	4b45      	ldr	r3, [pc, #276]	; (8007f74 <_dtoa_r+0x594>)
 8007e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e68:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007e6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f280 80da 	bge.w	8008028 <_dtoa_r+0x648>
 8007e74:	9b08      	ldr	r3, [sp, #32]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f300 80d6 	bgt.w	8008028 <_dtoa_r+0x648>
 8007e7c:	f040 826b 	bne.w	8008356 <_dtoa_r+0x976>
 8007e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e84:	2200      	movs	r2, #0
 8007e86:	4b40      	ldr	r3, [pc, #256]	; (8007f88 <_dtoa_r+0x5a8>)
 8007e88:	f7f8 fc46 	bl	8000718 <__aeabi_dmul>
 8007e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e90:	f7f8 fec8 	bl	8000c24 <__aeabi_dcmpge>
 8007e94:	9c08      	ldr	r4, [sp, #32]
 8007e96:	4626      	mov	r6, r4
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f040 8241 	bne.w	8008320 <_dtoa_r+0x940>
 8007e9e:	2331      	movs	r3, #49	; 0x31
 8007ea0:	9f03      	ldr	r7, [sp, #12]
 8007ea2:	f10b 0b01 	add.w	fp, fp, #1
 8007ea6:	f807 3b01 	strb.w	r3, [r7], #1
 8007eaa:	e23d      	b.n	8008328 <_dtoa_r+0x948>
 8007eac:	07e2      	lsls	r2, r4, #31
 8007eae:	d505      	bpl.n	8007ebc <_dtoa_r+0x4dc>
 8007eb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eb4:	f7f8 fc30 	bl	8000718 <__aeabi_dmul>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	3701      	adds	r7, #1
 8007ebc:	1064      	asrs	r4, r4, #1
 8007ebe:	3608      	adds	r6, #8
 8007ec0:	e76d      	b.n	8007d9e <_dtoa_r+0x3be>
 8007ec2:	2702      	movs	r7, #2
 8007ec4:	e770      	b.n	8007da8 <_dtoa_r+0x3c8>
 8007ec6:	46d8      	mov	r8, fp
 8007ec8:	9c08      	ldr	r4, [sp, #32]
 8007eca:	e78f      	b.n	8007dec <_dtoa_r+0x40c>
 8007ecc:	9903      	ldr	r1, [sp, #12]
 8007ece:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <_dtoa_r+0x594>)
 8007ed0:	4421      	add	r1, r4
 8007ed2:	9112      	str	r1, [sp, #72]	; 0x48
 8007ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eda:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	d054      	beq.n	8007f90 <_dtoa_r+0x5b0>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	4928      	ldr	r1, [pc, #160]	; (8007f8c <_dtoa_r+0x5ac>)
 8007eea:	f7f8 fd3f 	bl	800096c <__aeabi_ddiv>
 8007eee:	463b      	mov	r3, r7
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	f7f8 fa59 	bl	80003a8 <__aeabi_dsub>
 8007ef6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007efa:	9f03      	ldr	r7, [sp, #12]
 8007efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f00:	f7f8 feba 	bl	8000c78 <__aeabi_d2iz>
 8007f04:	4604      	mov	r4, r0
 8007f06:	f7f8 fb9d 	bl	8000644 <__aeabi_i2d>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f12:	f7f8 fa49 	bl	80003a8 <__aeabi_dsub>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	3430      	adds	r4, #48	; 0x30
 8007f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f24:	f807 4b01 	strb.w	r4, [r7], #1
 8007f28:	f7f8 fe68 	bl	8000bfc <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d173      	bne.n	8008018 <_dtoa_r+0x638>
 8007f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f34:	2000      	movs	r0, #0
 8007f36:	4911      	ldr	r1, [pc, #68]	; (8007f7c <_dtoa_r+0x59c>)
 8007f38:	f7f8 fa36 	bl	80003a8 <__aeabi_dsub>
 8007f3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f40:	f7f8 fe5c 	bl	8000bfc <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 80b6 	bne.w	80080b6 <_dtoa_r+0x6d6>
 8007f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f4c:	429f      	cmp	r7, r3
 8007f4e:	f43f af7a 	beq.w	8007e46 <_dtoa_r+0x466>
 8007f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f56:	2200      	movs	r2, #0
 8007f58:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <_dtoa_r+0x5a0>)
 8007f5a:	f7f8 fbdd 	bl	8000718 <__aeabi_dmul>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f68:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <_dtoa_r+0x5a0>)
 8007f6a:	f7f8 fbd5 	bl	8000718 <__aeabi_dmul>
 8007f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f72:	e7c3      	b.n	8007efc <_dtoa_r+0x51c>
 8007f74:	08009b30 	.word	0x08009b30
 8007f78:	08009b08 	.word	0x08009b08
 8007f7c:	3ff00000 	.word	0x3ff00000
 8007f80:	40240000 	.word	0x40240000
 8007f84:	401c0000 	.word	0x401c0000
 8007f88:	40140000 	.word	0x40140000
 8007f8c:	3fe00000 	.word	0x3fe00000
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fbc0 	bl	8000718 <__aeabi_dmul>
 8007f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f9e:	9c03      	ldr	r4, [sp, #12]
 8007fa0:	9314      	str	r3, [sp, #80]	; 0x50
 8007fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa6:	f7f8 fe67 	bl	8000c78 <__aeabi_d2iz>
 8007faa:	9015      	str	r0, [sp, #84]	; 0x54
 8007fac:	f7f8 fb4a 	bl	8000644 <__aeabi_i2d>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fb8:	f7f8 f9f6 	bl	80003a8 <__aeabi_dsub>
 8007fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	3330      	adds	r3, #48	; 0x30
 8007fc2:	f804 3b01 	strb.w	r3, [r4], #1
 8007fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fc8:	460f      	mov	r7, r1
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	d124      	bne.n	800801c <_dtoa_r+0x63c>
 8007fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fd6:	4baf      	ldr	r3, [pc, #700]	; (8008294 <_dtoa_r+0x8b4>)
 8007fd8:	f7f8 f9e8 	bl	80003ac <__adddf3>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f8 fe28 	bl	8000c38 <__aeabi_dcmpgt>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d163      	bne.n	80080b4 <_dtoa_r+0x6d4>
 8007fec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	49a8      	ldr	r1, [pc, #672]	; (8008294 <_dtoa_r+0x8b4>)
 8007ff4:	f7f8 f9d8 	bl	80003a8 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 fdfc 	bl	8000bfc <__aeabi_dcmplt>
 8008004:	2800      	cmp	r0, #0
 8008006:	f43f af1e 	beq.w	8007e46 <_dtoa_r+0x466>
 800800a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800800c:	1e7b      	subs	r3, r7, #1
 800800e:	9314      	str	r3, [sp, #80]	; 0x50
 8008010:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d0f8      	beq.n	800800a <_dtoa_r+0x62a>
 8008018:	46c3      	mov	fp, r8
 800801a:	e03b      	b.n	8008094 <_dtoa_r+0x6b4>
 800801c:	4b9e      	ldr	r3, [pc, #632]	; (8008298 <_dtoa_r+0x8b8>)
 800801e:	f7f8 fb7b 	bl	8000718 <__aeabi_dmul>
 8008022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008026:	e7bc      	b.n	8007fa2 <_dtoa_r+0x5c2>
 8008028:	9f03      	ldr	r7, [sp, #12]
 800802a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800802e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008032:	4640      	mov	r0, r8
 8008034:	4649      	mov	r1, r9
 8008036:	f7f8 fc99 	bl	800096c <__aeabi_ddiv>
 800803a:	f7f8 fe1d 	bl	8000c78 <__aeabi_d2iz>
 800803e:	4604      	mov	r4, r0
 8008040:	f7f8 fb00 	bl	8000644 <__aeabi_i2d>
 8008044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008048:	f7f8 fb66 	bl	8000718 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 f9a8 	bl	80003a8 <__aeabi_dsub>
 8008058:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800805c:	f807 6b01 	strb.w	r6, [r7], #1
 8008060:	9e03      	ldr	r6, [sp, #12]
 8008062:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008066:	1bbe      	subs	r6, r7, r6
 8008068:	45b4      	cmp	ip, r6
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	d136      	bne.n	80080de <_dtoa_r+0x6fe>
 8008070:	f7f8 f99c 	bl	80003ac <__adddf3>
 8008074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008078:	4680      	mov	r8, r0
 800807a:	4689      	mov	r9, r1
 800807c:	f7f8 fddc 	bl	8000c38 <__aeabi_dcmpgt>
 8008080:	bb58      	cbnz	r0, 80080da <_dtoa_r+0x6fa>
 8008082:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fdad 	bl	8000be8 <__aeabi_dcmpeq>
 800808e:	b108      	cbz	r0, 8008094 <_dtoa_r+0x6b4>
 8008090:	07e3      	lsls	r3, r4, #31
 8008092:	d422      	bmi.n	80080da <_dtoa_r+0x6fa>
 8008094:	4651      	mov	r1, sl
 8008096:	4628      	mov	r0, r5
 8008098:	f000 fbc2 	bl	8008820 <_Bfree>
 800809c:	2300      	movs	r3, #0
 800809e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080a0:	703b      	strb	r3, [r7, #0]
 80080a2:	f10b 0301 	add.w	r3, fp, #1
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f43f ace6 	beq.w	8007a7c <_dtoa_r+0x9c>
 80080b0:	601f      	str	r7, [r3, #0]
 80080b2:	e4e3      	b.n	8007a7c <_dtoa_r+0x9c>
 80080b4:	4627      	mov	r7, r4
 80080b6:	463b      	mov	r3, r7
 80080b8:	461f      	mov	r7, r3
 80080ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080be:	2a39      	cmp	r2, #57	; 0x39
 80080c0:	d107      	bne.n	80080d2 <_dtoa_r+0x6f2>
 80080c2:	9a03      	ldr	r2, [sp, #12]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d1f7      	bne.n	80080b8 <_dtoa_r+0x6d8>
 80080c8:	2230      	movs	r2, #48	; 0x30
 80080ca:	9903      	ldr	r1, [sp, #12]
 80080cc:	f108 0801 	add.w	r8, r8, #1
 80080d0:	700a      	strb	r2, [r1, #0]
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	3201      	adds	r2, #1
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	e79e      	b.n	8008018 <_dtoa_r+0x638>
 80080da:	46d8      	mov	r8, fp
 80080dc:	e7eb      	b.n	80080b6 <_dtoa_r+0x6d6>
 80080de:	2200      	movs	r2, #0
 80080e0:	4b6d      	ldr	r3, [pc, #436]	; (8008298 <_dtoa_r+0x8b8>)
 80080e2:	f7f8 fb19 	bl	8000718 <__aeabi_dmul>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	f7f8 fd7b 	bl	8000be8 <__aeabi_dcmpeq>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d09b      	beq.n	800802e <_dtoa_r+0x64e>
 80080f6:	e7cd      	b.n	8008094 <_dtoa_r+0x6b4>
 80080f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	f000 80c4 	beq.w	8008288 <_dtoa_r+0x8a8>
 8008100:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008102:	2a01      	cmp	r2, #1
 8008104:	f300 80a8 	bgt.w	8008258 <_dtoa_r+0x878>
 8008108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800810a:	2a00      	cmp	r2, #0
 800810c:	f000 80a0 	beq.w	8008250 <_dtoa_r+0x870>
 8008110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008114:	464f      	mov	r7, r9
 8008116:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811a:	2101      	movs	r1, #1
 800811c:	441a      	add	r2, r3
 800811e:	4628      	mov	r0, r5
 8008120:	4499      	add	r9, r3
 8008122:	9209      	str	r2, [sp, #36]	; 0x24
 8008124:	f000 fc32 	bl	800898c <__i2b>
 8008128:	4606      	mov	r6, r0
 800812a:	b15f      	cbz	r7, 8008144 <_dtoa_r+0x764>
 800812c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	dd08      	ble.n	8008144 <_dtoa_r+0x764>
 8008132:	42bb      	cmp	r3, r7
 8008134:	bfa8      	it	ge
 8008136:	463b      	movge	r3, r7
 8008138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800813a:	eba9 0903 	sub.w	r9, r9, r3
 800813e:	1aff      	subs	r7, r7, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008146:	b1f3      	cbz	r3, 8008186 <_dtoa_r+0x7a6>
 8008148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80a0 	beq.w	8008290 <_dtoa_r+0x8b0>
 8008150:	2c00      	cmp	r4, #0
 8008152:	dd10      	ble.n	8008176 <_dtoa_r+0x796>
 8008154:	4631      	mov	r1, r6
 8008156:	4622      	mov	r2, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fcd5 	bl	8008b08 <__pow5mult>
 800815e:	4652      	mov	r2, sl
 8008160:	4601      	mov	r1, r0
 8008162:	4606      	mov	r6, r0
 8008164:	4628      	mov	r0, r5
 8008166:	f000 fc27 	bl	80089b8 <__multiply>
 800816a:	4680      	mov	r8, r0
 800816c:	4651      	mov	r1, sl
 800816e:	4628      	mov	r0, r5
 8008170:	f000 fb56 	bl	8008820 <_Bfree>
 8008174:	46c2      	mov	sl, r8
 8008176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008178:	1b1a      	subs	r2, r3, r4
 800817a:	d004      	beq.n	8008186 <_dtoa_r+0x7a6>
 800817c:	4651      	mov	r1, sl
 800817e:	4628      	mov	r0, r5
 8008180:	f000 fcc2 	bl	8008b08 <__pow5mult>
 8008184:	4682      	mov	sl, r0
 8008186:	2101      	movs	r1, #1
 8008188:	4628      	mov	r0, r5
 800818a:	f000 fbff 	bl	800898c <__i2b>
 800818e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008190:	4604      	mov	r4, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	f340 8082 	ble.w	800829c <_dtoa_r+0x8bc>
 8008198:	461a      	mov	r2, r3
 800819a:	4601      	mov	r1, r0
 800819c:	4628      	mov	r0, r5
 800819e:	f000 fcb3 	bl	8008b08 <__pow5mult>
 80081a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081a4:	4604      	mov	r4, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	dd7b      	ble.n	80082a2 <_dtoa_r+0x8c2>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	f000 fb9b 	bl	80088f0 <__hi0bits>
 80081ba:	f1c0 0020 	rsb	r0, r0, #32
 80081be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c0:	4418      	add	r0, r3
 80081c2:	f010 001f 	ands.w	r0, r0, #31
 80081c6:	f000 8092 	beq.w	80082ee <_dtoa_r+0x90e>
 80081ca:	f1c0 0320 	rsb	r3, r0, #32
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	f340 8085 	ble.w	80082de <_dtoa_r+0x8fe>
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	f1c0 001c 	rsb	r0, r0, #28
 80081da:	4403      	add	r3, r0
 80081dc:	4481      	add	r9, r0
 80081de:	4407      	add	r7, r0
 80081e0:	9309      	str	r3, [sp, #36]	; 0x24
 80081e2:	f1b9 0f00 	cmp.w	r9, #0
 80081e6:	dd05      	ble.n	80081f4 <_dtoa_r+0x814>
 80081e8:	4651      	mov	r1, sl
 80081ea:	464a      	mov	r2, r9
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 fce5 	bl	8008bbc <__lshift>
 80081f2:	4682      	mov	sl, r0
 80081f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd05      	ble.n	8008206 <_dtoa_r+0x826>
 80081fa:	4621      	mov	r1, r4
 80081fc:	461a      	mov	r2, r3
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 fcdc 	bl	8008bbc <__lshift>
 8008204:	4604      	mov	r4, r0
 8008206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d072      	beq.n	80082f2 <_dtoa_r+0x912>
 800820c:	4621      	mov	r1, r4
 800820e:	4650      	mov	r0, sl
 8008210:	f000 fd40 	bl	8008c94 <__mcmp>
 8008214:	2800      	cmp	r0, #0
 8008216:	da6c      	bge.n	80082f2 <_dtoa_r+0x912>
 8008218:	2300      	movs	r3, #0
 800821a:	4651      	mov	r1, sl
 800821c:	220a      	movs	r2, #10
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fb20 	bl	8008864 <__multadd>
 8008224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008226:	4682      	mov	sl, r0
 8008228:	f10b 3bff 	add.w	fp, fp, #4294967295
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 81ac 	beq.w	800858a <_dtoa_r+0xbaa>
 8008232:	2300      	movs	r3, #0
 8008234:	4631      	mov	r1, r6
 8008236:	220a      	movs	r2, #10
 8008238:	4628      	mov	r0, r5
 800823a:	f000 fb13 	bl	8008864 <__multadd>
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	4606      	mov	r6, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	f300 8093 	bgt.w	800836e <_dtoa_r+0x98e>
 8008248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800824a:	2b02      	cmp	r3, #2
 800824c:	dc59      	bgt.n	8008302 <_dtoa_r+0x922>
 800824e:	e08e      	b.n	800836e <_dtoa_r+0x98e>
 8008250:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008252:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008256:	e75d      	b.n	8008114 <_dtoa_r+0x734>
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	1e5c      	subs	r4, r3, #1
 800825c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825e:	42a3      	cmp	r3, r4
 8008260:	bfbf      	itttt	lt
 8008262:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008264:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008266:	1ae3      	sublt	r3, r4, r3
 8008268:	18d2      	addlt	r2, r2, r3
 800826a:	bfa8      	it	ge
 800826c:	1b1c      	subge	r4, r3, r4
 800826e:	9b08      	ldr	r3, [sp, #32]
 8008270:	bfbe      	ittt	lt
 8008272:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008274:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008276:	2400      	movlt	r4, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	bfb5      	itete	lt
 800827c:	eba9 0703 	sublt.w	r7, r9, r3
 8008280:	464f      	movge	r7, r9
 8008282:	2300      	movlt	r3, #0
 8008284:	9b08      	ldrge	r3, [sp, #32]
 8008286:	e747      	b.n	8008118 <_dtoa_r+0x738>
 8008288:	464f      	mov	r7, r9
 800828a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800828c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800828e:	e74c      	b.n	800812a <_dtoa_r+0x74a>
 8008290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008292:	e773      	b.n	800817c <_dtoa_r+0x79c>
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	40240000 	.word	0x40240000
 800829c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800829e:	2b01      	cmp	r3, #1
 80082a0:	dc18      	bgt.n	80082d4 <_dtoa_r+0x8f4>
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	b9b3      	cbnz	r3, 80082d4 <_dtoa_r+0x8f4>
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ac:	b993      	cbnz	r3, 80082d4 <_dtoa_r+0x8f4>
 80082ae:	9b05      	ldr	r3, [sp, #20]
 80082b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082b4:	0d1b      	lsrs	r3, r3, #20
 80082b6:	051b      	lsls	r3, r3, #20
 80082b8:	b17b      	cbz	r3, 80082da <_dtoa_r+0x8fa>
 80082ba:	f04f 0801 	mov.w	r8, #1
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	f109 0901 	add.w	r9, r9, #1
 80082c4:	3301      	adds	r3, #1
 80082c6:	9309      	str	r3, [sp, #36]	; 0x24
 80082c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f47f af6f 	bne.w	80081ae <_dtoa_r+0x7ce>
 80082d0:	2001      	movs	r0, #1
 80082d2:	e774      	b.n	80081be <_dtoa_r+0x7de>
 80082d4:	f04f 0800 	mov.w	r8, #0
 80082d8:	e7f6      	b.n	80082c8 <_dtoa_r+0x8e8>
 80082da:	4698      	mov	r8, r3
 80082dc:	e7f4      	b.n	80082c8 <_dtoa_r+0x8e8>
 80082de:	d080      	beq.n	80081e2 <_dtoa_r+0x802>
 80082e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e2:	331c      	adds	r3, #28
 80082e4:	441a      	add	r2, r3
 80082e6:	4499      	add	r9, r3
 80082e8:	441f      	add	r7, r3
 80082ea:	9209      	str	r2, [sp, #36]	; 0x24
 80082ec:	e779      	b.n	80081e2 <_dtoa_r+0x802>
 80082ee:	4603      	mov	r3, r0
 80082f0:	e7f6      	b.n	80082e0 <_dtoa_r+0x900>
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc34      	bgt.n	8008362 <_dtoa_r+0x982>
 80082f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	dd31      	ble.n	8008362 <_dtoa_r+0x982>
 80082fe:	9b08      	ldr	r3, [sp, #32]
 8008300:	9306      	str	r3, [sp, #24]
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	b963      	cbnz	r3, 8008320 <_dtoa_r+0x940>
 8008306:	4621      	mov	r1, r4
 8008308:	2205      	movs	r2, #5
 800830a:	4628      	mov	r0, r5
 800830c:	f000 faaa 	bl	8008864 <__multadd>
 8008310:	4601      	mov	r1, r0
 8008312:	4604      	mov	r4, r0
 8008314:	4650      	mov	r0, sl
 8008316:	f000 fcbd 	bl	8008c94 <__mcmp>
 800831a:	2800      	cmp	r0, #0
 800831c:	f73f adbf 	bgt.w	8007e9e <_dtoa_r+0x4be>
 8008320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008322:	9f03      	ldr	r7, [sp, #12]
 8008324:	ea6f 0b03 	mvn.w	fp, r3
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	4621      	mov	r1, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 fa76 	bl	8008820 <_Bfree>
 8008334:	2e00      	cmp	r6, #0
 8008336:	f43f aead 	beq.w	8008094 <_dtoa_r+0x6b4>
 800833a:	f1b8 0f00 	cmp.w	r8, #0
 800833e:	d005      	beq.n	800834c <_dtoa_r+0x96c>
 8008340:	45b0      	cmp	r8, r6
 8008342:	d003      	beq.n	800834c <_dtoa_r+0x96c>
 8008344:	4641      	mov	r1, r8
 8008346:	4628      	mov	r0, r5
 8008348:	f000 fa6a 	bl	8008820 <_Bfree>
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fa66 	bl	8008820 <_Bfree>
 8008354:	e69e      	b.n	8008094 <_dtoa_r+0x6b4>
 8008356:	2400      	movs	r4, #0
 8008358:	4626      	mov	r6, r4
 800835a:	e7e1      	b.n	8008320 <_dtoa_r+0x940>
 800835c:	46c3      	mov	fp, r8
 800835e:	4626      	mov	r6, r4
 8008360:	e59d      	b.n	8007e9e <_dtoa_r+0x4be>
 8008362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 80c8 	beq.w	80084fa <_dtoa_r+0xb1a>
 800836a:	9b08      	ldr	r3, [sp, #32]
 800836c:	9306      	str	r3, [sp, #24]
 800836e:	2f00      	cmp	r7, #0
 8008370:	dd05      	ble.n	800837e <_dtoa_r+0x99e>
 8008372:	4631      	mov	r1, r6
 8008374:	463a      	mov	r2, r7
 8008376:	4628      	mov	r0, r5
 8008378:	f000 fc20 	bl	8008bbc <__lshift>
 800837c:	4606      	mov	r6, r0
 800837e:	f1b8 0f00 	cmp.w	r8, #0
 8008382:	d05b      	beq.n	800843c <_dtoa_r+0xa5c>
 8008384:	4628      	mov	r0, r5
 8008386:	6871      	ldr	r1, [r6, #4]
 8008388:	f000 fa0a 	bl	80087a0 <_Balloc>
 800838c:	4607      	mov	r7, r0
 800838e:	b928      	cbnz	r0, 800839c <_dtoa_r+0x9bc>
 8008390:	4602      	mov	r2, r0
 8008392:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008396:	4b81      	ldr	r3, [pc, #516]	; (800859c <_dtoa_r+0xbbc>)
 8008398:	f7ff bb36 	b.w	8007a08 <_dtoa_r+0x28>
 800839c:	6932      	ldr	r2, [r6, #16]
 800839e:	f106 010c 	add.w	r1, r6, #12
 80083a2:	3202      	adds	r2, #2
 80083a4:	0092      	lsls	r2, r2, #2
 80083a6:	300c      	adds	r0, #12
 80083a8:	f000 ff9e 	bl	80092e8 <memcpy>
 80083ac:	2201      	movs	r2, #1
 80083ae:	4639      	mov	r1, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 fc03 	bl	8008bbc <__lshift>
 80083b6:	46b0      	mov	r8, r6
 80083b8:	4606      	mov	r6, r0
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	9a03      	ldr	r2, [sp, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	4413      	add	r3, r2
 80083c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	930a      	str	r3, [sp, #40]	; 0x28
 80083d0:	9b08      	ldr	r3, [sp, #32]
 80083d2:	4621      	mov	r1, r4
 80083d4:	3b01      	subs	r3, #1
 80083d6:	4650      	mov	r0, sl
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	f7ff fa78 	bl	80078ce <quorem>
 80083de:	4641      	mov	r1, r8
 80083e0:	9006      	str	r0, [sp, #24]
 80083e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083e6:	4650      	mov	r0, sl
 80083e8:	f000 fc54 	bl	8008c94 <__mcmp>
 80083ec:	4632      	mov	r2, r6
 80083ee:	9009      	str	r0, [sp, #36]	; 0x24
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 fc6a 	bl	8008ccc <__mdiff>
 80083f8:	68c2      	ldr	r2, [r0, #12]
 80083fa:	4607      	mov	r7, r0
 80083fc:	bb02      	cbnz	r2, 8008440 <_dtoa_r+0xa60>
 80083fe:	4601      	mov	r1, r0
 8008400:	4650      	mov	r0, sl
 8008402:	f000 fc47 	bl	8008c94 <__mcmp>
 8008406:	4602      	mov	r2, r0
 8008408:	4639      	mov	r1, r7
 800840a:	4628      	mov	r0, r5
 800840c:	920c      	str	r2, [sp, #48]	; 0x30
 800840e:	f000 fa07 	bl	8008820 <_Bfree>
 8008412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008416:	9f08      	ldr	r7, [sp, #32]
 8008418:	ea43 0102 	orr.w	r1, r3, r2
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	4319      	orrs	r1, r3
 8008420:	d110      	bne.n	8008444 <_dtoa_r+0xa64>
 8008422:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008426:	d029      	beq.n	800847c <_dtoa_r+0xa9c>
 8008428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	dd02      	ble.n	8008434 <_dtoa_r+0xa54>
 800842e:	9b06      	ldr	r3, [sp, #24]
 8008430:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008434:	9b04      	ldr	r3, [sp, #16]
 8008436:	f883 9000 	strb.w	r9, [r3]
 800843a:	e777      	b.n	800832c <_dtoa_r+0x94c>
 800843c:	4630      	mov	r0, r6
 800843e:	e7ba      	b.n	80083b6 <_dtoa_r+0x9d6>
 8008440:	2201      	movs	r2, #1
 8008442:	e7e1      	b.n	8008408 <_dtoa_r+0xa28>
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	db04      	blt.n	8008454 <_dtoa_r+0xa74>
 800844a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800844c:	430b      	orrs	r3, r1
 800844e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008450:	430b      	orrs	r3, r1
 8008452:	d120      	bne.n	8008496 <_dtoa_r+0xab6>
 8008454:	2a00      	cmp	r2, #0
 8008456:	dded      	ble.n	8008434 <_dtoa_r+0xa54>
 8008458:	4651      	mov	r1, sl
 800845a:	2201      	movs	r2, #1
 800845c:	4628      	mov	r0, r5
 800845e:	f000 fbad 	bl	8008bbc <__lshift>
 8008462:	4621      	mov	r1, r4
 8008464:	4682      	mov	sl, r0
 8008466:	f000 fc15 	bl	8008c94 <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	dc03      	bgt.n	8008476 <_dtoa_r+0xa96>
 800846e:	d1e1      	bne.n	8008434 <_dtoa_r+0xa54>
 8008470:	f019 0f01 	tst.w	r9, #1
 8008474:	d0de      	beq.n	8008434 <_dtoa_r+0xa54>
 8008476:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800847a:	d1d8      	bne.n	800842e <_dtoa_r+0xa4e>
 800847c:	2339      	movs	r3, #57	; 0x39
 800847e:	9a04      	ldr	r2, [sp, #16]
 8008480:	7013      	strb	r3, [r2, #0]
 8008482:	463b      	mov	r3, r7
 8008484:	461f      	mov	r7, r3
 8008486:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800848a:	3b01      	subs	r3, #1
 800848c:	2a39      	cmp	r2, #57	; 0x39
 800848e:	d06b      	beq.n	8008568 <_dtoa_r+0xb88>
 8008490:	3201      	adds	r2, #1
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	e74a      	b.n	800832c <_dtoa_r+0x94c>
 8008496:	2a00      	cmp	r2, #0
 8008498:	dd07      	ble.n	80084aa <_dtoa_r+0xaca>
 800849a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800849e:	d0ed      	beq.n	800847c <_dtoa_r+0xa9c>
 80084a0:	9a04      	ldr	r2, [sp, #16]
 80084a2:	f109 0301 	add.w	r3, r9, #1
 80084a6:	7013      	strb	r3, [r2, #0]
 80084a8:	e740      	b.n	800832c <_dtoa_r+0x94c>
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ae:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d042      	beq.n	800853c <_dtoa_r+0xb5c>
 80084b6:	4651      	mov	r1, sl
 80084b8:	2300      	movs	r3, #0
 80084ba:	220a      	movs	r2, #10
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 f9d1 	bl	8008864 <__multadd>
 80084c2:	45b0      	cmp	r8, r6
 80084c4:	4682      	mov	sl, r0
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	f04f 020a 	mov.w	r2, #10
 80084ce:	4641      	mov	r1, r8
 80084d0:	4628      	mov	r0, r5
 80084d2:	d107      	bne.n	80084e4 <_dtoa_r+0xb04>
 80084d4:	f000 f9c6 	bl	8008864 <__multadd>
 80084d8:	4680      	mov	r8, r0
 80084da:	4606      	mov	r6, r0
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	3301      	adds	r3, #1
 80084e0:	9308      	str	r3, [sp, #32]
 80084e2:	e775      	b.n	80083d0 <_dtoa_r+0x9f0>
 80084e4:	f000 f9be 	bl	8008864 <__multadd>
 80084e8:	4631      	mov	r1, r6
 80084ea:	4680      	mov	r8, r0
 80084ec:	2300      	movs	r3, #0
 80084ee:	220a      	movs	r2, #10
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 f9b7 	bl	8008864 <__multadd>
 80084f6:	4606      	mov	r6, r0
 80084f8:	e7f0      	b.n	80084dc <_dtoa_r+0xafc>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	9306      	str	r3, [sp, #24]
 80084fe:	9f03      	ldr	r7, [sp, #12]
 8008500:	4621      	mov	r1, r4
 8008502:	4650      	mov	r0, sl
 8008504:	f7ff f9e3 	bl	80078ce <quorem>
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800850e:	f807 9b01 	strb.w	r9, [r7], #1
 8008512:	1afa      	subs	r2, r7, r3
 8008514:	9b06      	ldr	r3, [sp, #24]
 8008516:	4293      	cmp	r3, r2
 8008518:	dd07      	ble.n	800852a <_dtoa_r+0xb4a>
 800851a:	4651      	mov	r1, sl
 800851c:	2300      	movs	r3, #0
 800851e:	220a      	movs	r2, #10
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f99f 	bl	8008864 <__multadd>
 8008526:	4682      	mov	sl, r0
 8008528:	e7ea      	b.n	8008500 <_dtoa_r+0xb20>
 800852a:	9b06      	ldr	r3, [sp, #24]
 800852c:	f04f 0800 	mov.w	r8, #0
 8008530:	2b00      	cmp	r3, #0
 8008532:	bfcc      	ite	gt
 8008534:	461f      	movgt	r7, r3
 8008536:	2701      	movle	r7, #1
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	441f      	add	r7, r3
 800853c:	4651      	mov	r1, sl
 800853e:	2201      	movs	r2, #1
 8008540:	4628      	mov	r0, r5
 8008542:	f000 fb3b 	bl	8008bbc <__lshift>
 8008546:	4621      	mov	r1, r4
 8008548:	4682      	mov	sl, r0
 800854a:	f000 fba3 	bl	8008c94 <__mcmp>
 800854e:	2800      	cmp	r0, #0
 8008550:	dc97      	bgt.n	8008482 <_dtoa_r+0xaa2>
 8008552:	d102      	bne.n	800855a <_dtoa_r+0xb7a>
 8008554:	f019 0f01 	tst.w	r9, #1
 8008558:	d193      	bne.n	8008482 <_dtoa_r+0xaa2>
 800855a:	463b      	mov	r3, r7
 800855c:	461f      	mov	r7, r3
 800855e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008562:	2a30      	cmp	r2, #48	; 0x30
 8008564:	d0fa      	beq.n	800855c <_dtoa_r+0xb7c>
 8008566:	e6e1      	b.n	800832c <_dtoa_r+0x94c>
 8008568:	9a03      	ldr	r2, [sp, #12]
 800856a:	429a      	cmp	r2, r3
 800856c:	d18a      	bne.n	8008484 <_dtoa_r+0xaa4>
 800856e:	2331      	movs	r3, #49	; 0x31
 8008570:	f10b 0b01 	add.w	fp, fp, #1
 8008574:	e797      	b.n	80084a6 <_dtoa_r+0xac6>
 8008576:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <_dtoa_r+0xbc0>)
 8008578:	f7ff ba9f 	b.w	8007aba <_dtoa_r+0xda>
 800857c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800857e:	2b00      	cmp	r3, #0
 8008580:	f47f aa77 	bne.w	8007a72 <_dtoa_r+0x92>
 8008584:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <_dtoa_r+0xbc4>)
 8008586:	f7ff ba98 	b.w	8007aba <_dtoa_r+0xda>
 800858a:	9b06      	ldr	r3, [sp, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dcb6      	bgt.n	80084fe <_dtoa_r+0xb1e>
 8008590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008592:	2b02      	cmp	r3, #2
 8008594:	f73f aeb5 	bgt.w	8008302 <_dtoa_r+0x922>
 8008598:	e7b1      	b.n	80084fe <_dtoa_r+0xb1e>
 800859a:	bf00      	nop
 800859c:	08009a9c 	.word	0x08009a9c
 80085a0:	080099fc 	.word	0x080099fc
 80085a4:	08009a20 	.word	0x08009a20

080085a8 <_free_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4605      	mov	r5, r0
 80085ac:	2900      	cmp	r1, #0
 80085ae:	d040      	beq.n	8008632 <_free_r+0x8a>
 80085b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b4:	1f0c      	subs	r4, r1, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfb8      	it	lt
 80085ba:	18e4      	addlt	r4, r4, r3
 80085bc:	f000 f8e4 	bl	8008788 <__malloc_lock>
 80085c0:	4a1c      	ldr	r2, [pc, #112]	; (8008634 <_free_r+0x8c>)
 80085c2:	6813      	ldr	r3, [r2, #0]
 80085c4:	b933      	cbnz	r3, 80085d4 <_free_r+0x2c>
 80085c6:	6063      	str	r3, [r4, #4]
 80085c8:	6014      	str	r4, [r2, #0]
 80085ca:	4628      	mov	r0, r5
 80085cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085d0:	f000 b8e0 	b.w	8008794 <__malloc_unlock>
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	d908      	bls.n	80085ea <_free_r+0x42>
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	1821      	adds	r1, r4, r0
 80085dc:	428b      	cmp	r3, r1
 80085de:	bf01      	itttt	eq
 80085e0:	6819      	ldreq	r1, [r3, #0]
 80085e2:	685b      	ldreq	r3, [r3, #4]
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	e7ed      	b.n	80085c6 <_free_r+0x1e>
 80085ea:	461a      	mov	r2, r3
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b10b      	cbz	r3, 80085f4 <_free_r+0x4c>
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d9fa      	bls.n	80085ea <_free_r+0x42>
 80085f4:	6811      	ldr	r1, [r2, #0]
 80085f6:	1850      	adds	r0, r2, r1
 80085f8:	42a0      	cmp	r0, r4
 80085fa:	d10b      	bne.n	8008614 <_free_r+0x6c>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	4401      	add	r1, r0
 8008600:	1850      	adds	r0, r2, r1
 8008602:	4283      	cmp	r3, r0
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	d1e0      	bne.n	80085ca <_free_r+0x22>
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4408      	add	r0, r1
 800860e:	6010      	str	r0, [r2, #0]
 8008610:	6053      	str	r3, [r2, #4]
 8008612:	e7da      	b.n	80085ca <_free_r+0x22>
 8008614:	d902      	bls.n	800861c <_free_r+0x74>
 8008616:	230c      	movs	r3, #12
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	e7d6      	b.n	80085ca <_free_r+0x22>
 800861c:	6820      	ldr	r0, [r4, #0]
 800861e:	1821      	adds	r1, r4, r0
 8008620:	428b      	cmp	r3, r1
 8008622:	bf01      	itttt	eq
 8008624:	6819      	ldreq	r1, [r3, #0]
 8008626:	685b      	ldreq	r3, [r3, #4]
 8008628:	1809      	addeq	r1, r1, r0
 800862a:	6021      	streq	r1, [r4, #0]
 800862c:	6063      	str	r3, [r4, #4]
 800862e:	6054      	str	r4, [r2, #4]
 8008630:	e7cb      	b.n	80085ca <_free_r+0x22>
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	20000780 	.word	0x20000780

08008638 <malloc>:
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <malloc+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f000 b823 	b.w	8008688 <_malloc_r>
 8008642:	bf00      	nop
 8008644:	200000f0 	.word	0x200000f0

08008648 <sbrk_aligned>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4e0e      	ldr	r6, [pc, #56]	; (8008684 <sbrk_aligned+0x3c>)
 800864c:	460c      	mov	r4, r1
 800864e:	6831      	ldr	r1, [r6, #0]
 8008650:	4605      	mov	r5, r0
 8008652:	b911      	cbnz	r1, 800865a <sbrk_aligned+0x12>
 8008654:	f000 fe38 	bl	80092c8 <_sbrk_r>
 8008658:	6030      	str	r0, [r6, #0]
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f000 fe33 	bl	80092c8 <_sbrk_r>
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	d00a      	beq.n	800867c <sbrk_aligned+0x34>
 8008666:	1cc4      	adds	r4, r0, #3
 8008668:	f024 0403 	bic.w	r4, r4, #3
 800866c:	42a0      	cmp	r0, r4
 800866e:	d007      	beq.n	8008680 <sbrk_aligned+0x38>
 8008670:	1a21      	subs	r1, r4, r0
 8008672:	4628      	mov	r0, r5
 8008674:	f000 fe28 	bl	80092c8 <_sbrk_r>
 8008678:	3001      	adds	r0, #1
 800867a:	d101      	bne.n	8008680 <sbrk_aligned+0x38>
 800867c:	f04f 34ff 	mov.w	r4, #4294967295
 8008680:	4620      	mov	r0, r4
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	20000784 	.word	0x20000784

08008688 <_malloc_r>:
 8008688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800868c:	1ccd      	adds	r5, r1, #3
 800868e:	f025 0503 	bic.w	r5, r5, #3
 8008692:	3508      	adds	r5, #8
 8008694:	2d0c      	cmp	r5, #12
 8008696:	bf38      	it	cc
 8008698:	250c      	movcc	r5, #12
 800869a:	2d00      	cmp	r5, #0
 800869c:	4607      	mov	r7, r0
 800869e:	db01      	blt.n	80086a4 <_malloc_r+0x1c>
 80086a0:	42a9      	cmp	r1, r5
 80086a2:	d905      	bls.n	80086b0 <_malloc_r+0x28>
 80086a4:	230c      	movs	r3, #12
 80086a6:	2600      	movs	r6, #0
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	4630      	mov	r0, r6
 80086ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008784 <_malloc_r+0xfc>
 80086b4:	f000 f868 	bl	8008788 <__malloc_lock>
 80086b8:	f8d8 3000 	ldr.w	r3, [r8]
 80086bc:	461c      	mov	r4, r3
 80086be:	bb5c      	cbnz	r4, 8008718 <_malloc_r+0x90>
 80086c0:	4629      	mov	r1, r5
 80086c2:	4638      	mov	r0, r7
 80086c4:	f7ff ffc0 	bl	8008648 <sbrk_aligned>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	4604      	mov	r4, r0
 80086cc:	d155      	bne.n	800877a <_malloc_r+0xf2>
 80086ce:	f8d8 4000 	ldr.w	r4, [r8]
 80086d2:	4626      	mov	r6, r4
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	d145      	bne.n	8008764 <_malloc_r+0xdc>
 80086d8:	2c00      	cmp	r4, #0
 80086da:	d048      	beq.n	800876e <_malloc_r+0xe6>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	4631      	mov	r1, r6
 80086e0:	4638      	mov	r0, r7
 80086e2:	eb04 0903 	add.w	r9, r4, r3
 80086e6:	f000 fdef 	bl	80092c8 <_sbrk_r>
 80086ea:	4581      	cmp	r9, r0
 80086ec:	d13f      	bne.n	800876e <_malloc_r+0xe6>
 80086ee:	6821      	ldr	r1, [r4, #0]
 80086f0:	4638      	mov	r0, r7
 80086f2:	1a6d      	subs	r5, r5, r1
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7ff ffa7 	bl	8008648 <sbrk_aligned>
 80086fa:	3001      	adds	r0, #1
 80086fc:	d037      	beq.n	800876e <_malloc_r+0xe6>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	442b      	add	r3, r5
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	f8d8 3000 	ldr.w	r3, [r8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d038      	beq.n	800877e <_malloc_r+0xf6>
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	42a2      	cmp	r2, r4
 8008710:	d12b      	bne.n	800876a <_malloc_r+0xe2>
 8008712:	2200      	movs	r2, #0
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	e00f      	b.n	8008738 <_malloc_r+0xb0>
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	1b52      	subs	r2, r2, r5
 800871c:	d41f      	bmi.n	800875e <_malloc_r+0xd6>
 800871e:	2a0b      	cmp	r2, #11
 8008720:	d917      	bls.n	8008752 <_malloc_r+0xca>
 8008722:	1961      	adds	r1, r4, r5
 8008724:	42a3      	cmp	r3, r4
 8008726:	6025      	str	r5, [r4, #0]
 8008728:	bf18      	it	ne
 800872a:	6059      	strne	r1, [r3, #4]
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	bf08      	it	eq
 8008730:	f8c8 1000 	streq.w	r1, [r8]
 8008734:	5162      	str	r2, [r4, r5]
 8008736:	604b      	str	r3, [r1, #4]
 8008738:	4638      	mov	r0, r7
 800873a:	f104 060b 	add.w	r6, r4, #11
 800873e:	f000 f829 	bl	8008794 <__malloc_unlock>
 8008742:	f026 0607 	bic.w	r6, r6, #7
 8008746:	1d23      	adds	r3, r4, #4
 8008748:	1af2      	subs	r2, r6, r3
 800874a:	d0ae      	beq.n	80086aa <_malloc_r+0x22>
 800874c:	1b9b      	subs	r3, r3, r6
 800874e:	50a3      	str	r3, [r4, r2]
 8008750:	e7ab      	b.n	80086aa <_malloc_r+0x22>
 8008752:	42a3      	cmp	r3, r4
 8008754:	6862      	ldr	r2, [r4, #4]
 8008756:	d1dd      	bne.n	8008714 <_malloc_r+0x8c>
 8008758:	f8c8 2000 	str.w	r2, [r8]
 800875c:	e7ec      	b.n	8008738 <_malloc_r+0xb0>
 800875e:	4623      	mov	r3, r4
 8008760:	6864      	ldr	r4, [r4, #4]
 8008762:	e7ac      	b.n	80086be <_malloc_r+0x36>
 8008764:	4634      	mov	r4, r6
 8008766:	6876      	ldr	r6, [r6, #4]
 8008768:	e7b4      	b.n	80086d4 <_malloc_r+0x4c>
 800876a:	4613      	mov	r3, r2
 800876c:	e7cc      	b.n	8008708 <_malloc_r+0x80>
 800876e:	230c      	movs	r3, #12
 8008770:	4638      	mov	r0, r7
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	f000 f80e 	bl	8008794 <__malloc_unlock>
 8008778:	e797      	b.n	80086aa <_malloc_r+0x22>
 800877a:	6025      	str	r5, [r4, #0]
 800877c:	e7dc      	b.n	8008738 <_malloc_r+0xb0>
 800877e:	605b      	str	r3, [r3, #4]
 8008780:	deff      	udf	#255	; 0xff
 8008782:	bf00      	nop
 8008784:	20000780 	.word	0x20000780

08008788 <__malloc_lock>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__malloc_lock+0x8>)
 800878a:	f7ff b890 	b.w	80078ae <__retarget_lock_acquire_recursive>
 800878e:	bf00      	nop
 8008790:	2000077c 	.word	0x2000077c

08008794 <__malloc_unlock>:
 8008794:	4801      	ldr	r0, [pc, #4]	; (800879c <__malloc_unlock+0x8>)
 8008796:	f7ff b88b 	b.w	80078b0 <__retarget_lock_release_recursive>
 800879a:	bf00      	nop
 800879c:	2000077c 	.word	0x2000077c

080087a0 <_Balloc>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	69c6      	ldr	r6, [r0, #28]
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	b976      	cbnz	r6, 80087c8 <_Balloc+0x28>
 80087aa:	2010      	movs	r0, #16
 80087ac:	f7ff ff44 	bl	8008638 <malloc>
 80087b0:	4602      	mov	r2, r0
 80087b2:	61e0      	str	r0, [r4, #28]
 80087b4:	b920      	cbnz	r0, 80087c0 <_Balloc+0x20>
 80087b6:	216b      	movs	r1, #107	; 0x6b
 80087b8:	4b17      	ldr	r3, [pc, #92]	; (8008818 <_Balloc+0x78>)
 80087ba:	4818      	ldr	r0, [pc, #96]	; (800881c <_Balloc+0x7c>)
 80087bc:	f000 fda2 	bl	8009304 <__assert_func>
 80087c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087c4:	6006      	str	r6, [r0, #0]
 80087c6:	60c6      	str	r6, [r0, #12]
 80087c8:	69e6      	ldr	r6, [r4, #28]
 80087ca:	68f3      	ldr	r3, [r6, #12]
 80087cc:	b183      	cbz	r3, 80087f0 <_Balloc+0x50>
 80087ce:	69e3      	ldr	r3, [r4, #28]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087d6:	b9b8      	cbnz	r0, 8008808 <_Balloc+0x68>
 80087d8:	2101      	movs	r1, #1
 80087da:	fa01 f605 	lsl.w	r6, r1, r5
 80087de:	1d72      	adds	r2, r6, #5
 80087e0:	4620      	mov	r0, r4
 80087e2:	0092      	lsls	r2, r2, #2
 80087e4:	f000 fdac 	bl	8009340 <_calloc_r>
 80087e8:	b160      	cbz	r0, 8008804 <_Balloc+0x64>
 80087ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087ee:	e00e      	b.n	800880e <_Balloc+0x6e>
 80087f0:	2221      	movs	r2, #33	; 0x21
 80087f2:	2104      	movs	r1, #4
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fda3 	bl	8009340 <_calloc_r>
 80087fa:	69e3      	ldr	r3, [r4, #28]
 80087fc:	60f0      	str	r0, [r6, #12]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e4      	bne.n	80087ce <_Balloc+0x2e>
 8008804:	2000      	movs	r0, #0
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	6802      	ldr	r2, [r0, #0]
 800880a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800880e:	2300      	movs	r3, #0
 8008810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008814:	e7f7      	b.n	8008806 <_Balloc+0x66>
 8008816:	bf00      	nop
 8008818:	08009a2d 	.word	0x08009a2d
 800881c:	08009aad 	.word	0x08009aad

08008820 <_Bfree>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	69c6      	ldr	r6, [r0, #28]
 8008824:	4605      	mov	r5, r0
 8008826:	460c      	mov	r4, r1
 8008828:	b976      	cbnz	r6, 8008848 <_Bfree+0x28>
 800882a:	2010      	movs	r0, #16
 800882c:	f7ff ff04 	bl	8008638 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	61e8      	str	r0, [r5, #28]
 8008834:	b920      	cbnz	r0, 8008840 <_Bfree+0x20>
 8008836:	218f      	movs	r1, #143	; 0x8f
 8008838:	4b08      	ldr	r3, [pc, #32]	; (800885c <_Bfree+0x3c>)
 800883a:	4809      	ldr	r0, [pc, #36]	; (8008860 <_Bfree+0x40>)
 800883c:	f000 fd62 	bl	8009304 <__assert_func>
 8008840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008844:	6006      	str	r6, [r0, #0]
 8008846:	60c6      	str	r6, [r0, #12]
 8008848:	b13c      	cbz	r4, 800885a <_Bfree+0x3a>
 800884a:	69eb      	ldr	r3, [r5, #28]
 800884c:	6862      	ldr	r2, [r4, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008854:	6021      	str	r1, [r4, #0]
 8008856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	08009a2d 	.word	0x08009a2d
 8008860:	08009aad 	.word	0x08009aad

08008864 <__multadd>:
 8008864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008868:	4607      	mov	r7, r0
 800886a:	460c      	mov	r4, r1
 800886c:	461e      	mov	r6, r3
 800886e:	2000      	movs	r0, #0
 8008870:	690d      	ldr	r5, [r1, #16]
 8008872:	f101 0c14 	add.w	ip, r1, #20
 8008876:	f8dc 3000 	ldr.w	r3, [ip]
 800887a:	3001      	adds	r0, #1
 800887c:	b299      	uxth	r1, r3
 800887e:	fb02 6101 	mla	r1, r2, r1, r6
 8008882:	0c1e      	lsrs	r6, r3, #16
 8008884:	0c0b      	lsrs	r3, r1, #16
 8008886:	fb02 3306 	mla	r3, r2, r6, r3
 800888a:	b289      	uxth	r1, r1
 800888c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008890:	4285      	cmp	r5, r0
 8008892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008896:	f84c 1b04 	str.w	r1, [ip], #4
 800889a:	dcec      	bgt.n	8008876 <__multadd+0x12>
 800889c:	b30e      	cbz	r6, 80088e2 <__multadd+0x7e>
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	dc19      	bgt.n	80088d8 <__multadd+0x74>
 80088a4:	6861      	ldr	r1, [r4, #4]
 80088a6:	4638      	mov	r0, r7
 80088a8:	3101      	adds	r1, #1
 80088aa:	f7ff ff79 	bl	80087a0 <_Balloc>
 80088ae:	4680      	mov	r8, r0
 80088b0:	b928      	cbnz	r0, 80088be <__multadd+0x5a>
 80088b2:	4602      	mov	r2, r0
 80088b4:	21ba      	movs	r1, #186	; 0xba
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <__multadd+0x84>)
 80088b8:	480c      	ldr	r0, [pc, #48]	; (80088ec <__multadd+0x88>)
 80088ba:	f000 fd23 	bl	8009304 <__assert_func>
 80088be:	6922      	ldr	r2, [r4, #16]
 80088c0:	f104 010c 	add.w	r1, r4, #12
 80088c4:	3202      	adds	r2, #2
 80088c6:	0092      	lsls	r2, r2, #2
 80088c8:	300c      	adds	r0, #12
 80088ca:	f000 fd0d 	bl	80092e8 <memcpy>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff ffa5 	bl	8008820 <_Bfree>
 80088d6:	4644      	mov	r4, r8
 80088d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088dc:	3501      	adds	r5, #1
 80088de:	615e      	str	r6, [r3, #20]
 80088e0:	6125      	str	r5, [r4, #16]
 80088e2:	4620      	mov	r0, r4
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	08009a9c 	.word	0x08009a9c
 80088ec:	08009aad 	.word	0x08009aad

080088f0 <__hi0bits>:
 80088f0:	0c02      	lsrs	r2, r0, #16
 80088f2:	0412      	lsls	r2, r2, #16
 80088f4:	4603      	mov	r3, r0
 80088f6:	b9ca      	cbnz	r2, 800892c <__hi0bits+0x3c>
 80088f8:	0403      	lsls	r3, r0, #16
 80088fa:	2010      	movs	r0, #16
 80088fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008900:	bf04      	itt	eq
 8008902:	021b      	lsleq	r3, r3, #8
 8008904:	3008      	addeq	r0, #8
 8008906:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800890a:	bf04      	itt	eq
 800890c:	011b      	lsleq	r3, r3, #4
 800890e:	3004      	addeq	r0, #4
 8008910:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008914:	bf04      	itt	eq
 8008916:	009b      	lsleq	r3, r3, #2
 8008918:	3002      	addeq	r0, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	db05      	blt.n	800892a <__hi0bits+0x3a>
 800891e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008922:	f100 0001 	add.w	r0, r0, #1
 8008926:	bf08      	it	eq
 8008928:	2020      	moveq	r0, #32
 800892a:	4770      	bx	lr
 800892c:	2000      	movs	r0, #0
 800892e:	e7e5      	b.n	80088fc <__hi0bits+0xc>

08008930 <__lo0bits>:
 8008930:	6803      	ldr	r3, [r0, #0]
 8008932:	4602      	mov	r2, r0
 8008934:	f013 0007 	ands.w	r0, r3, #7
 8008938:	d00b      	beq.n	8008952 <__lo0bits+0x22>
 800893a:	07d9      	lsls	r1, r3, #31
 800893c:	d421      	bmi.n	8008982 <__lo0bits+0x52>
 800893e:	0798      	lsls	r0, r3, #30
 8008940:	bf49      	itett	mi
 8008942:	085b      	lsrmi	r3, r3, #1
 8008944:	089b      	lsrpl	r3, r3, #2
 8008946:	2001      	movmi	r0, #1
 8008948:	6013      	strmi	r3, [r2, #0]
 800894a:	bf5c      	itt	pl
 800894c:	2002      	movpl	r0, #2
 800894e:	6013      	strpl	r3, [r2, #0]
 8008950:	4770      	bx	lr
 8008952:	b299      	uxth	r1, r3
 8008954:	b909      	cbnz	r1, 800895a <__lo0bits+0x2a>
 8008956:	2010      	movs	r0, #16
 8008958:	0c1b      	lsrs	r3, r3, #16
 800895a:	b2d9      	uxtb	r1, r3
 800895c:	b909      	cbnz	r1, 8008962 <__lo0bits+0x32>
 800895e:	3008      	adds	r0, #8
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	0719      	lsls	r1, r3, #28
 8008964:	bf04      	itt	eq
 8008966:	091b      	lsreq	r3, r3, #4
 8008968:	3004      	addeq	r0, #4
 800896a:	0799      	lsls	r1, r3, #30
 800896c:	bf04      	itt	eq
 800896e:	089b      	lsreq	r3, r3, #2
 8008970:	3002      	addeq	r0, #2
 8008972:	07d9      	lsls	r1, r3, #31
 8008974:	d403      	bmi.n	800897e <__lo0bits+0x4e>
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	f100 0001 	add.w	r0, r0, #1
 800897c:	d003      	beq.n	8008986 <__lo0bits+0x56>
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	4770      	bx	lr
 8008982:	2000      	movs	r0, #0
 8008984:	4770      	bx	lr
 8008986:	2020      	movs	r0, #32
 8008988:	4770      	bx	lr
	...

0800898c <__i2b>:
 800898c:	b510      	push	{r4, lr}
 800898e:	460c      	mov	r4, r1
 8008990:	2101      	movs	r1, #1
 8008992:	f7ff ff05 	bl	80087a0 <_Balloc>
 8008996:	4602      	mov	r2, r0
 8008998:	b928      	cbnz	r0, 80089a6 <__i2b+0x1a>
 800899a:	f240 1145 	movw	r1, #325	; 0x145
 800899e:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <__i2b+0x24>)
 80089a0:	4804      	ldr	r0, [pc, #16]	; (80089b4 <__i2b+0x28>)
 80089a2:	f000 fcaf 	bl	8009304 <__assert_func>
 80089a6:	2301      	movs	r3, #1
 80089a8:	6144      	str	r4, [r0, #20]
 80089aa:	6103      	str	r3, [r0, #16]
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	bf00      	nop
 80089b0:	08009a9c 	.word	0x08009a9c
 80089b4:	08009aad 	.word	0x08009aad

080089b8 <__multiply>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	4691      	mov	r9, r2
 80089be:	690a      	ldr	r2, [r1, #16]
 80089c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089c4:	460c      	mov	r4, r1
 80089c6:	429a      	cmp	r2, r3
 80089c8:	bfbe      	ittt	lt
 80089ca:	460b      	movlt	r3, r1
 80089cc:	464c      	movlt	r4, r9
 80089ce:	4699      	movlt	r9, r3
 80089d0:	6927      	ldr	r7, [r4, #16]
 80089d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	6861      	ldr	r1, [r4, #4]
 80089da:	eb07 060a 	add.w	r6, r7, sl
 80089de:	42b3      	cmp	r3, r6
 80089e0:	b085      	sub	sp, #20
 80089e2:	bfb8      	it	lt
 80089e4:	3101      	addlt	r1, #1
 80089e6:	f7ff fedb 	bl	80087a0 <_Balloc>
 80089ea:	b930      	cbnz	r0, 80089fa <__multiply+0x42>
 80089ec:	4602      	mov	r2, r0
 80089ee:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80089f2:	4b43      	ldr	r3, [pc, #268]	; (8008b00 <__multiply+0x148>)
 80089f4:	4843      	ldr	r0, [pc, #268]	; (8008b04 <__multiply+0x14c>)
 80089f6:	f000 fc85 	bl	8009304 <__assert_func>
 80089fa:	f100 0514 	add.w	r5, r0, #20
 80089fe:	462b      	mov	r3, r5
 8008a00:	2200      	movs	r2, #0
 8008a02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a06:	4543      	cmp	r3, r8
 8008a08:	d321      	bcc.n	8008a4e <__multiply+0x96>
 8008a0a:	f104 0314 	add.w	r3, r4, #20
 8008a0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a12:	f109 0314 	add.w	r3, r9, #20
 8008a16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a1a:	9202      	str	r2, [sp, #8]
 8008a1c:	1b3a      	subs	r2, r7, r4
 8008a1e:	3a15      	subs	r2, #21
 8008a20:	f022 0203 	bic.w	r2, r2, #3
 8008a24:	3204      	adds	r2, #4
 8008a26:	f104 0115 	add.w	r1, r4, #21
 8008a2a:	428f      	cmp	r7, r1
 8008a2c:	bf38      	it	cc
 8008a2e:	2204      	movcc	r2, #4
 8008a30:	9201      	str	r2, [sp, #4]
 8008a32:	9a02      	ldr	r2, [sp, #8]
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d80c      	bhi.n	8008a54 <__multiply+0x9c>
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	dd03      	ble.n	8008a46 <__multiply+0x8e>
 8008a3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d05a      	beq.n	8008afc <__multiply+0x144>
 8008a46:	6106      	str	r6, [r0, #16]
 8008a48:	b005      	add	sp, #20
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	f843 2b04 	str.w	r2, [r3], #4
 8008a52:	e7d8      	b.n	8008a06 <__multiply+0x4e>
 8008a54:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d023      	beq.n	8008aa6 <__multiply+0xee>
 8008a5e:	46a9      	mov	r9, r5
 8008a60:	f04f 0c00 	mov.w	ip, #0
 8008a64:	f104 0e14 	add.w	lr, r4, #20
 8008a68:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a6c:	f8d9 1000 	ldr.w	r1, [r9]
 8008a70:	fa1f fb82 	uxth.w	fp, r2
 8008a74:	b289      	uxth	r1, r1
 8008a76:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a7a:	4461      	add	r1, ip
 8008a7c:	f8d9 c000 	ldr.w	ip, [r9]
 8008a80:	0c12      	lsrs	r2, r2, #16
 8008a82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008a86:	fb0a c202 	mla	r2, sl, r2, ip
 8008a8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a8e:	b289      	uxth	r1, r1
 8008a90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a94:	4577      	cmp	r7, lr
 8008a96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a9a:	f849 1b04 	str.w	r1, [r9], #4
 8008a9e:	d8e3      	bhi.n	8008a68 <__multiply+0xb0>
 8008aa0:	9a01      	ldr	r2, [sp, #4]
 8008aa2:	f845 c002 	str.w	ip, [r5, r2]
 8008aa6:	9a03      	ldr	r2, [sp, #12]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008aae:	f1b9 0f00 	cmp.w	r9, #0
 8008ab2:	d021      	beq.n	8008af8 <__multiply+0x140>
 8008ab4:	46ae      	mov	lr, r5
 8008ab6:	f04f 0a00 	mov.w	sl, #0
 8008aba:	6829      	ldr	r1, [r5, #0]
 8008abc:	f104 0c14 	add.w	ip, r4, #20
 8008ac0:	f8bc b000 	ldrh.w	fp, [ip]
 8008ac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ac8:	b289      	uxth	r1, r1
 8008aca:	fb09 220b 	mla	r2, r9, fp, r2
 8008ace:	4452      	add	r2, sl
 8008ad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ad4:	f84e 1b04 	str.w	r1, [lr], #4
 8008ad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008adc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ae0:	f8be 1000 	ldrh.w	r1, [lr]
 8008ae4:	4567      	cmp	r7, ip
 8008ae6:	fb09 110a 	mla	r1, r9, sl, r1
 8008aea:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008aee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008af2:	d8e5      	bhi.n	8008ac0 <__multiply+0x108>
 8008af4:	9a01      	ldr	r2, [sp, #4]
 8008af6:	50a9      	str	r1, [r5, r2]
 8008af8:	3504      	adds	r5, #4
 8008afa:	e79a      	b.n	8008a32 <__multiply+0x7a>
 8008afc:	3e01      	subs	r6, #1
 8008afe:	e79c      	b.n	8008a3a <__multiply+0x82>
 8008b00:	08009a9c 	.word	0x08009a9c
 8008b04:	08009aad 	.word	0x08009aad

08008b08 <__pow5mult>:
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	4615      	mov	r5, r2
 8008b0e:	f012 0203 	ands.w	r2, r2, #3
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	d007      	beq.n	8008b28 <__pow5mult+0x20>
 8008b18:	4c25      	ldr	r4, [pc, #148]	; (8008bb0 <__pow5mult+0xa8>)
 8008b1a:	3a01      	subs	r2, #1
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b22:	f7ff fe9f 	bl	8008864 <__multadd>
 8008b26:	4607      	mov	r7, r0
 8008b28:	10ad      	asrs	r5, r5, #2
 8008b2a:	d03d      	beq.n	8008ba8 <__pow5mult+0xa0>
 8008b2c:	69f4      	ldr	r4, [r6, #28]
 8008b2e:	b97c      	cbnz	r4, 8008b50 <__pow5mult+0x48>
 8008b30:	2010      	movs	r0, #16
 8008b32:	f7ff fd81 	bl	8008638 <malloc>
 8008b36:	4602      	mov	r2, r0
 8008b38:	61f0      	str	r0, [r6, #28]
 8008b3a:	b928      	cbnz	r0, 8008b48 <__pow5mult+0x40>
 8008b3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b40:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <__pow5mult+0xac>)
 8008b42:	481d      	ldr	r0, [pc, #116]	; (8008bb8 <__pow5mult+0xb0>)
 8008b44:	f000 fbde 	bl	8009304 <__assert_func>
 8008b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b4c:	6004      	str	r4, [r0, #0]
 8008b4e:	60c4      	str	r4, [r0, #12]
 8008b50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b58:	b94c      	cbnz	r4, 8008b6e <__pow5mult+0x66>
 8008b5a:	f240 2171 	movw	r1, #625	; 0x271
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ff14 	bl	800898c <__i2b>
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b6c:	6003      	str	r3, [r0, #0]
 8008b6e:	f04f 0900 	mov.w	r9, #0
 8008b72:	07eb      	lsls	r3, r5, #31
 8008b74:	d50a      	bpl.n	8008b8c <__pow5mult+0x84>
 8008b76:	4639      	mov	r1, r7
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f7ff ff1c 	bl	80089b8 <__multiply>
 8008b80:	4680      	mov	r8, r0
 8008b82:	4639      	mov	r1, r7
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7ff fe4b 	bl	8008820 <_Bfree>
 8008b8a:	4647      	mov	r7, r8
 8008b8c:	106d      	asrs	r5, r5, #1
 8008b8e:	d00b      	beq.n	8008ba8 <__pow5mult+0xa0>
 8008b90:	6820      	ldr	r0, [r4, #0]
 8008b92:	b938      	cbnz	r0, 8008ba4 <__pow5mult+0x9c>
 8008b94:	4622      	mov	r2, r4
 8008b96:	4621      	mov	r1, r4
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f7ff ff0d 	bl	80089b8 <__multiply>
 8008b9e:	6020      	str	r0, [r4, #0]
 8008ba0:	f8c0 9000 	str.w	r9, [r0]
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	e7e4      	b.n	8008b72 <__pow5mult+0x6a>
 8008ba8:	4638      	mov	r0, r7
 8008baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bae:	bf00      	nop
 8008bb0:	08009bf8 	.word	0x08009bf8
 8008bb4:	08009a2d 	.word	0x08009a2d
 8008bb8:	08009aad 	.word	0x08009aad

08008bbc <__lshift>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	4691      	mov	r9, r2
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	6849      	ldr	r1, [r1, #4]
 8008bca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bd4:	f108 0601 	add.w	r6, r8, #1
 8008bd8:	42b3      	cmp	r3, r6
 8008bda:	db0b      	blt.n	8008bf4 <__lshift+0x38>
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f7ff fddf 	bl	80087a0 <_Balloc>
 8008be2:	4605      	mov	r5, r0
 8008be4:	b948      	cbnz	r0, 8008bfa <__lshift+0x3e>
 8008be6:	4602      	mov	r2, r0
 8008be8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008bec:	4b27      	ldr	r3, [pc, #156]	; (8008c8c <__lshift+0xd0>)
 8008bee:	4828      	ldr	r0, [pc, #160]	; (8008c90 <__lshift+0xd4>)
 8008bf0:	f000 fb88 	bl	8009304 <__assert_func>
 8008bf4:	3101      	adds	r1, #1
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	e7ee      	b.n	8008bd8 <__lshift+0x1c>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f100 0114 	add.w	r1, r0, #20
 8008c00:	f100 0210 	add.w	r2, r0, #16
 8008c04:	4618      	mov	r0, r3
 8008c06:	4553      	cmp	r3, sl
 8008c08:	db33      	blt.n	8008c72 <__lshift+0xb6>
 8008c0a:	6920      	ldr	r0, [r4, #16]
 8008c0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c10:	f104 0314 	add.w	r3, r4, #20
 8008c14:	f019 091f 	ands.w	r9, r9, #31
 8008c18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c20:	d02b      	beq.n	8008c7a <__lshift+0xbe>
 8008c22:	468a      	mov	sl, r1
 8008c24:	2200      	movs	r2, #0
 8008c26:	f1c9 0e20 	rsb	lr, r9, #32
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	fa00 f009 	lsl.w	r0, r0, r9
 8008c30:	4310      	orrs	r0, r2
 8008c32:	f84a 0b04 	str.w	r0, [sl], #4
 8008c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3a:	459c      	cmp	ip, r3
 8008c3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c40:	d8f3      	bhi.n	8008c2a <__lshift+0x6e>
 8008c42:	ebac 0304 	sub.w	r3, ip, r4
 8008c46:	3b15      	subs	r3, #21
 8008c48:	f023 0303 	bic.w	r3, r3, #3
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	f104 0015 	add.w	r0, r4, #21
 8008c52:	4584      	cmp	ip, r0
 8008c54:	bf38      	it	cc
 8008c56:	2304      	movcc	r3, #4
 8008c58:	50ca      	str	r2, [r1, r3]
 8008c5a:	b10a      	cbz	r2, 8008c60 <__lshift+0xa4>
 8008c5c:	f108 0602 	add.w	r6, r8, #2
 8008c60:	3e01      	subs	r6, #1
 8008c62:	4638      	mov	r0, r7
 8008c64:	4621      	mov	r1, r4
 8008c66:	612e      	str	r6, [r5, #16]
 8008c68:	f7ff fdda 	bl	8008820 <_Bfree>
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c76:	3301      	adds	r3, #1
 8008c78:	e7c5      	b.n	8008c06 <__lshift+0x4a>
 8008c7a:	3904      	subs	r1, #4
 8008c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c80:	459c      	cmp	ip, r3
 8008c82:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c86:	d8f9      	bhi.n	8008c7c <__lshift+0xc0>
 8008c88:	e7ea      	b.n	8008c60 <__lshift+0xa4>
 8008c8a:	bf00      	nop
 8008c8c:	08009a9c 	.word	0x08009a9c
 8008c90:	08009aad 	.word	0x08009aad

08008c94 <__mcmp>:
 8008c94:	4603      	mov	r3, r0
 8008c96:	690a      	ldr	r2, [r1, #16]
 8008c98:	6900      	ldr	r0, [r0, #16]
 8008c9a:	b530      	push	{r4, r5, lr}
 8008c9c:	1a80      	subs	r0, r0, r2
 8008c9e:	d10d      	bne.n	8008cbc <__mcmp+0x28>
 8008ca0:	3314      	adds	r3, #20
 8008ca2:	3114      	adds	r1, #20
 8008ca4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ca8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008cac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008cb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008cb4:	4295      	cmp	r5, r2
 8008cb6:	d002      	beq.n	8008cbe <__mcmp+0x2a>
 8008cb8:	d304      	bcc.n	8008cc4 <__mcmp+0x30>
 8008cba:	2001      	movs	r0, #1
 8008cbc:	bd30      	pop	{r4, r5, pc}
 8008cbe:	42a3      	cmp	r3, r4
 8008cc0:	d3f4      	bcc.n	8008cac <__mcmp+0x18>
 8008cc2:	e7fb      	b.n	8008cbc <__mcmp+0x28>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	e7f8      	b.n	8008cbc <__mcmp+0x28>
	...

08008ccc <__mdiff>:
 8008ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	4614      	mov	r4, r2
 8008cda:	f7ff ffdb 	bl	8008c94 <__mcmp>
 8008cde:	1e06      	subs	r6, r0, #0
 8008ce0:	d111      	bne.n	8008d06 <__mdiff+0x3a>
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f7ff fd5b 	bl	80087a0 <_Balloc>
 8008cea:	4602      	mov	r2, r0
 8008cec:	b928      	cbnz	r0, 8008cfa <__mdiff+0x2e>
 8008cee:	f240 2137 	movw	r1, #567	; 0x237
 8008cf2:	4b3a      	ldr	r3, [pc, #232]	; (8008ddc <__mdiff+0x110>)
 8008cf4:	483a      	ldr	r0, [pc, #232]	; (8008de0 <__mdiff+0x114>)
 8008cf6:	f000 fb05 	bl	8009304 <__assert_func>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008d00:	4610      	mov	r0, r2
 8008d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	bfa4      	itt	ge
 8008d08:	4623      	movge	r3, r4
 8008d0a:	462c      	movge	r4, r5
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	6861      	ldr	r1, [r4, #4]
 8008d10:	bfa6      	itte	ge
 8008d12:	461d      	movge	r5, r3
 8008d14:	2600      	movge	r6, #0
 8008d16:	2601      	movlt	r6, #1
 8008d18:	f7ff fd42 	bl	80087a0 <_Balloc>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	b918      	cbnz	r0, 8008d28 <__mdiff+0x5c>
 8008d20:	f240 2145 	movw	r1, #581	; 0x245
 8008d24:	4b2d      	ldr	r3, [pc, #180]	; (8008ddc <__mdiff+0x110>)
 8008d26:	e7e5      	b.n	8008cf4 <__mdiff+0x28>
 8008d28:	f102 0814 	add.w	r8, r2, #20
 8008d2c:	46c2      	mov	sl, r8
 8008d2e:	f04f 0c00 	mov.w	ip, #0
 8008d32:	6927      	ldr	r7, [r4, #16]
 8008d34:	60c6      	str	r6, [r0, #12]
 8008d36:	692e      	ldr	r6, [r5, #16]
 8008d38:	f104 0014 	add.w	r0, r4, #20
 8008d3c:	f105 0914 	add.w	r9, r5, #20
 8008d40:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008d44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d48:	3410      	adds	r4, #16
 8008d4a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008d4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d52:	fa1f f18b 	uxth.w	r1, fp
 8008d56:	4461      	add	r1, ip
 8008d58:	fa1f fc83 	uxth.w	ip, r3
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	eba1 010c 	sub.w	r1, r1, ip
 8008d62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d6a:	b289      	uxth	r1, r1
 8008d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d70:	454e      	cmp	r6, r9
 8008d72:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008d76:	f84a 1b04 	str.w	r1, [sl], #4
 8008d7a:	d8e6      	bhi.n	8008d4a <__mdiff+0x7e>
 8008d7c:	1b73      	subs	r3, r6, r5
 8008d7e:	3b15      	subs	r3, #21
 8008d80:	f023 0303 	bic.w	r3, r3, #3
 8008d84:	3515      	adds	r5, #21
 8008d86:	3304      	adds	r3, #4
 8008d88:	42ae      	cmp	r6, r5
 8008d8a:	bf38      	it	cc
 8008d8c:	2304      	movcc	r3, #4
 8008d8e:	4418      	add	r0, r3
 8008d90:	4443      	add	r3, r8
 8008d92:	461e      	mov	r6, r3
 8008d94:	4605      	mov	r5, r0
 8008d96:	4575      	cmp	r5, lr
 8008d98:	d30e      	bcc.n	8008db8 <__mdiff+0xec>
 8008d9a:	f10e 0103 	add.w	r1, lr, #3
 8008d9e:	1a09      	subs	r1, r1, r0
 8008da0:	f021 0103 	bic.w	r1, r1, #3
 8008da4:	3803      	subs	r0, #3
 8008da6:	4586      	cmp	lr, r0
 8008da8:	bf38      	it	cc
 8008daa:	2100      	movcc	r1, #0
 8008dac:	440b      	add	r3, r1
 8008dae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008db2:	b189      	cbz	r1, 8008dd8 <__mdiff+0x10c>
 8008db4:	6117      	str	r7, [r2, #16]
 8008db6:	e7a3      	b.n	8008d00 <__mdiff+0x34>
 8008db8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008dbc:	fa1f f188 	uxth.w	r1, r8
 8008dc0:	4461      	add	r1, ip
 8008dc2:	140c      	asrs	r4, r1, #16
 8008dc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dc8:	b289      	uxth	r1, r1
 8008dca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008dce:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008dd2:	f846 1b04 	str.w	r1, [r6], #4
 8008dd6:	e7de      	b.n	8008d96 <__mdiff+0xca>
 8008dd8:	3f01      	subs	r7, #1
 8008dda:	e7e8      	b.n	8008dae <__mdiff+0xe2>
 8008ddc:	08009a9c 	.word	0x08009a9c
 8008de0:	08009aad 	.word	0x08009aad

08008de4 <__d2b>:
 8008de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de6:	2101      	movs	r1, #1
 8008de8:	4617      	mov	r7, r2
 8008dea:	461c      	mov	r4, r3
 8008dec:	9e08      	ldr	r6, [sp, #32]
 8008dee:	f7ff fcd7 	bl	80087a0 <_Balloc>
 8008df2:	4605      	mov	r5, r0
 8008df4:	b930      	cbnz	r0, 8008e04 <__d2b+0x20>
 8008df6:	4602      	mov	r2, r0
 8008df8:	f240 310f 	movw	r1, #783	; 0x30f
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <__d2b+0xa4>)
 8008dfe:	4823      	ldr	r0, [pc, #140]	; (8008e8c <__d2b+0xa8>)
 8008e00:	f000 fa80 	bl	8009304 <__assert_func>
 8008e04:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e08:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008e0c:	bb24      	cbnz	r4, 8008e58 <__d2b+0x74>
 8008e0e:	2f00      	cmp	r7, #0
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	d026      	beq.n	8008e62 <__d2b+0x7e>
 8008e14:	4668      	mov	r0, sp
 8008e16:	9700      	str	r7, [sp, #0]
 8008e18:	f7ff fd8a 	bl	8008930 <__lo0bits>
 8008e1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e20:	b1e8      	cbz	r0, 8008e5e <__d2b+0x7a>
 8008e22:	f1c0 0320 	rsb	r3, r0, #32
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	40c2      	lsrs	r2, r0
 8008e2e:	616b      	str	r3, [r5, #20]
 8008e30:	9201      	str	r2, [sp, #4]
 8008e32:	9b01      	ldr	r3, [sp, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bf14      	ite	ne
 8008e38:	2102      	movne	r1, #2
 8008e3a:	2101      	moveq	r1, #1
 8008e3c:	61ab      	str	r3, [r5, #24]
 8008e3e:	6129      	str	r1, [r5, #16]
 8008e40:	b1bc      	cbz	r4, 8008e72 <__d2b+0x8e>
 8008e42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008e46:	4404      	add	r4, r0
 8008e48:	6034      	str	r4, [r6, #0]
 8008e4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	6018      	str	r0, [r3, #0]
 8008e52:	4628      	mov	r0, r5
 8008e54:	b003      	add	sp, #12
 8008e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e5c:	e7d7      	b.n	8008e0e <__d2b+0x2a>
 8008e5e:	6169      	str	r1, [r5, #20]
 8008e60:	e7e7      	b.n	8008e32 <__d2b+0x4e>
 8008e62:	a801      	add	r0, sp, #4
 8008e64:	f7ff fd64 	bl	8008930 <__lo0bits>
 8008e68:	9b01      	ldr	r3, [sp, #4]
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	616b      	str	r3, [r5, #20]
 8008e6e:	3020      	adds	r0, #32
 8008e70:	e7e5      	b.n	8008e3e <__d2b+0x5a>
 8008e72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e76:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008e7a:	6030      	str	r0, [r6, #0]
 8008e7c:	6918      	ldr	r0, [r3, #16]
 8008e7e:	f7ff fd37 	bl	80088f0 <__hi0bits>
 8008e82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008e86:	e7e2      	b.n	8008e4e <__d2b+0x6a>
 8008e88:	08009a9c 	.word	0x08009a9c
 8008e8c:	08009aad 	.word	0x08009aad

08008e90 <__ssputs_r>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	461f      	mov	r7, r3
 8008e96:	688e      	ldr	r6, [r1, #8]
 8008e98:	4682      	mov	sl, r0
 8008e9a:	42be      	cmp	r6, r7
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	4690      	mov	r8, r2
 8008ea0:	680b      	ldr	r3, [r1, #0]
 8008ea2:	d82c      	bhi.n	8008efe <__ssputs_r+0x6e>
 8008ea4:	898a      	ldrh	r2, [r1, #12]
 8008ea6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008eaa:	d026      	beq.n	8008efa <__ssputs_r+0x6a>
 8008eac:	6965      	ldr	r5, [r4, #20]
 8008eae:	6909      	ldr	r1, [r1, #16]
 8008eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb4:	eba3 0901 	sub.w	r9, r3, r1
 8008eb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ebc:	1c7b      	adds	r3, r7, #1
 8008ebe:	444b      	add	r3, r9
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	bf38      	it	cc
 8008ec6:	461d      	movcc	r5, r3
 8008ec8:	0553      	lsls	r3, r2, #21
 8008eca:	d527      	bpl.n	8008f1c <__ssputs_r+0x8c>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7ff fbdb 	bl	8008688 <_malloc_r>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b360      	cbz	r0, 8008f30 <__ssputs_r+0xa0>
 8008ed6:	464a      	mov	r2, r9
 8008ed8:	6921      	ldr	r1, [r4, #16]
 8008eda:	f000 fa05 	bl	80092e8 <memcpy>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	6126      	str	r6, [r4, #16]
 8008eec:	444e      	add	r6, r9
 8008eee:	6026      	str	r6, [r4, #0]
 8008ef0:	463e      	mov	r6, r7
 8008ef2:	6165      	str	r5, [r4, #20]
 8008ef4:	eba5 0509 	sub.w	r5, r5, r9
 8008ef8:	60a5      	str	r5, [r4, #8]
 8008efa:	42be      	cmp	r6, r7
 8008efc:	d900      	bls.n	8008f00 <__ssputs_r+0x70>
 8008efe:	463e      	mov	r6, r7
 8008f00:	4632      	mov	r2, r6
 8008f02:	4641      	mov	r1, r8
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	f000 f9c5 	bl	8009294 <memmove>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	1b9b      	subs	r3, r3, r6
 8008f10:	60a3      	str	r3, [r4, #8]
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	4433      	add	r3, r6
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	f000 fa35 	bl	800938c <_realloc_r>
 8008f22:	4606      	mov	r6, r0
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d1e0      	bne.n	8008eea <__ssputs_r+0x5a>
 8008f28:	4650      	mov	r0, sl
 8008f2a:	6921      	ldr	r1, [r4, #16]
 8008f2c:	f7ff fb3c 	bl	80085a8 <_free_r>
 8008f30:	230c      	movs	r3, #12
 8008f32:	f8ca 3000 	str.w	r3, [sl]
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	e7e9      	b.n	8008f18 <__ssputs_r+0x88>

08008f44 <_svfiprintf_r>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4698      	mov	r8, r3
 8008f4a:	898b      	ldrh	r3, [r1, #12]
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	061b      	lsls	r3, r3, #24
 8008f50:	460d      	mov	r5, r1
 8008f52:	4614      	mov	r4, r2
 8008f54:	b09d      	sub	sp, #116	; 0x74
 8008f56:	d50e      	bpl.n	8008f76 <_svfiprintf_r+0x32>
 8008f58:	690b      	ldr	r3, [r1, #16]
 8008f5a:	b963      	cbnz	r3, 8008f76 <_svfiprintf_r+0x32>
 8008f5c:	2140      	movs	r1, #64	; 0x40
 8008f5e:	f7ff fb93 	bl	8008688 <_malloc_r>
 8008f62:	6028      	str	r0, [r5, #0]
 8008f64:	6128      	str	r0, [r5, #16]
 8008f66:	b920      	cbnz	r0, 8008f72 <_svfiprintf_r+0x2e>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	e0d0      	b.n	8009114 <_svfiprintf_r+0x1d0>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	616b      	str	r3, [r5, #20]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7a:	2320      	movs	r3, #32
 8008f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f80:	2330      	movs	r3, #48	; 0x30
 8008f82:	f04f 0901 	mov.w	r9, #1
 8008f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800912c <_svfiprintf_r+0x1e8>
 8008f8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f92:	4623      	mov	r3, r4
 8008f94:	469a      	mov	sl, r3
 8008f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9a:	b10a      	cbz	r2, 8008fa0 <_svfiprintf_r+0x5c>
 8008f9c:	2a25      	cmp	r2, #37	; 0x25
 8008f9e:	d1f9      	bne.n	8008f94 <_svfiprintf_r+0x50>
 8008fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa4:	d00b      	beq.n	8008fbe <_svfiprintf_r+0x7a>
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	4622      	mov	r2, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff ff6f 	bl	8008e90 <__ssputs_r>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	f000 80a9 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fba:	445a      	add	r2, fp
 8008fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 80a1 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f04f 32ff 	mov.w	r2, #4294967295
 8008fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd2:	f10a 0a01 	add.w	sl, sl, #1
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fde:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe0:	4654      	mov	r4, sl
 8008fe2:	2205      	movs	r2, #5
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	4850      	ldr	r0, [pc, #320]	; (800912c <_svfiprintf_r+0x1e8>)
 8008fea:	f7fe fc62 	bl	80078b2 <memchr>
 8008fee:	9a04      	ldr	r2, [sp, #16]
 8008ff0:	b9d8      	cbnz	r0, 800902a <_svfiprintf_r+0xe6>
 8008ff2:	06d0      	lsls	r0, r2, #27
 8008ff4:	bf44      	itt	mi
 8008ff6:	2320      	movmi	r3, #32
 8008ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffc:	0711      	lsls	r1, r2, #28
 8008ffe:	bf44      	itt	mi
 8009000:	232b      	movmi	r3, #43	; 0x2b
 8009002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009006:	f89a 3000 	ldrb.w	r3, [sl]
 800900a:	2b2a      	cmp	r3, #42	; 0x2a
 800900c:	d015      	beq.n	800903a <_svfiprintf_r+0xf6>
 800900e:	4654      	mov	r4, sl
 8009010:	2000      	movs	r0, #0
 8009012:	f04f 0c0a 	mov.w	ip, #10
 8009016:	9a07      	ldr	r2, [sp, #28]
 8009018:	4621      	mov	r1, r4
 800901a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800901e:	3b30      	subs	r3, #48	; 0x30
 8009020:	2b09      	cmp	r3, #9
 8009022:	d94d      	bls.n	80090c0 <_svfiprintf_r+0x17c>
 8009024:	b1b0      	cbz	r0, 8009054 <_svfiprintf_r+0x110>
 8009026:	9207      	str	r2, [sp, #28]
 8009028:	e014      	b.n	8009054 <_svfiprintf_r+0x110>
 800902a:	eba0 0308 	sub.w	r3, r0, r8
 800902e:	fa09 f303 	lsl.w	r3, r9, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	46a2      	mov	sl, r4
 8009036:	9304      	str	r3, [sp, #16]
 8009038:	e7d2      	b.n	8008fe0 <_svfiprintf_r+0x9c>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	1d19      	adds	r1, r3, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	bfbb      	ittet	lt
 8009046:	425b      	neglt	r3, r3
 8009048:	f042 0202 	orrlt.w	r2, r2, #2
 800904c:	9307      	strge	r3, [sp, #28]
 800904e:	9307      	strlt	r3, [sp, #28]
 8009050:	bfb8      	it	lt
 8009052:	9204      	strlt	r2, [sp, #16]
 8009054:	7823      	ldrb	r3, [r4, #0]
 8009056:	2b2e      	cmp	r3, #46	; 0x2e
 8009058:	d10c      	bne.n	8009074 <_svfiprintf_r+0x130>
 800905a:	7863      	ldrb	r3, [r4, #1]
 800905c:	2b2a      	cmp	r3, #42	; 0x2a
 800905e:	d134      	bne.n	80090ca <_svfiprintf_r+0x186>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	3402      	adds	r4, #2
 8009064:	1d1a      	adds	r2, r3, #4
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	9203      	str	r2, [sp, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfb8      	it	lt
 800906e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009130 <_svfiprintf_r+0x1ec>
 8009078:	2203      	movs	r2, #3
 800907a:	4650      	mov	r0, sl
 800907c:	7821      	ldrb	r1, [r4, #0]
 800907e:	f7fe fc18 	bl	80078b2 <memchr>
 8009082:	b138      	cbz	r0, 8009094 <_svfiprintf_r+0x150>
 8009084:	2240      	movs	r2, #64	; 0x40
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	eba0 000a 	sub.w	r0, r0, sl
 800908c:	4082      	lsls	r2, r0
 800908e:	4313      	orrs	r3, r2
 8009090:	3401      	adds	r4, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	2206      	movs	r2, #6
 800909a:	4826      	ldr	r0, [pc, #152]	; (8009134 <_svfiprintf_r+0x1f0>)
 800909c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a0:	f7fe fc07 	bl	80078b2 <memchr>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d038      	beq.n	800911a <_svfiprintf_r+0x1d6>
 80090a8:	4b23      	ldr	r3, [pc, #140]	; (8009138 <_svfiprintf_r+0x1f4>)
 80090aa:	bb1b      	cbnz	r3, 80090f4 <_svfiprintf_r+0x1b0>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	3308      	adds	r3, #8
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	4433      	add	r3, r6
 80090bc:	9309      	str	r3, [sp, #36]	; 0x24
 80090be:	e768      	b.n	8008f92 <_svfiprintf_r+0x4e>
 80090c0:	460c      	mov	r4, r1
 80090c2:	2001      	movs	r0, #1
 80090c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c8:	e7a6      	b.n	8009018 <_svfiprintf_r+0xd4>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f04f 0c0a 	mov.w	ip, #10
 80090d0:	4619      	mov	r1, r3
 80090d2:	3401      	adds	r4, #1
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	4620      	mov	r0, r4
 80090d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090dc:	3a30      	subs	r2, #48	; 0x30
 80090de:	2a09      	cmp	r2, #9
 80090e0:	d903      	bls.n	80090ea <_svfiprintf_r+0x1a6>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0c6      	beq.n	8009074 <_svfiprintf_r+0x130>
 80090e6:	9105      	str	r1, [sp, #20]
 80090e8:	e7c4      	b.n	8009074 <_svfiprintf_r+0x130>
 80090ea:	4604      	mov	r4, r0
 80090ec:	2301      	movs	r3, #1
 80090ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f2:	e7f0      	b.n	80090d6 <_svfiprintf_r+0x192>
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4638      	mov	r0, r7
 80090fc:	4b0f      	ldr	r3, [pc, #60]	; (800913c <_svfiprintf_r+0x1f8>)
 80090fe:	a904      	add	r1, sp, #16
 8009100:	f7fd fe70 	bl	8006de4 <_printf_float>
 8009104:	1c42      	adds	r2, r0, #1
 8009106:	4606      	mov	r6, r0
 8009108:	d1d6      	bne.n	80090b8 <_svfiprintf_r+0x174>
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	065b      	lsls	r3, r3, #25
 800910e:	f53f af2d 	bmi.w	8008f6c <_svfiprintf_r+0x28>
 8009112:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009114:	b01d      	add	sp, #116	; 0x74
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	ab03      	add	r3, sp, #12
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	462a      	mov	r2, r5
 8009120:	4638      	mov	r0, r7
 8009122:	4b06      	ldr	r3, [pc, #24]	; (800913c <_svfiprintf_r+0x1f8>)
 8009124:	a904      	add	r1, sp, #16
 8009126:	f7fe f8fd 	bl	8007324 <_printf_i>
 800912a:	e7eb      	b.n	8009104 <_svfiprintf_r+0x1c0>
 800912c:	08009c04 	.word	0x08009c04
 8009130:	08009c0a 	.word	0x08009c0a
 8009134:	08009c0e 	.word	0x08009c0e
 8009138:	08006de5 	.word	0x08006de5
 800913c:	08008e91 	.word	0x08008e91

08009140 <__sflush_r>:
 8009140:	898a      	ldrh	r2, [r1, #12]
 8009142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009144:	4605      	mov	r5, r0
 8009146:	0710      	lsls	r0, r2, #28
 8009148:	460c      	mov	r4, r1
 800914a:	d457      	bmi.n	80091fc <__sflush_r+0xbc>
 800914c:	684b      	ldr	r3, [r1, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	dc04      	bgt.n	800915c <__sflush_r+0x1c>
 8009152:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc01      	bgt.n	800915c <__sflush_r+0x1c>
 8009158:	2000      	movs	r0, #0
 800915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800915e:	2e00      	cmp	r6, #0
 8009160:	d0fa      	beq.n	8009158 <__sflush_r+0x18>
 8009162:	2300      	movs	r3, #0
 8009164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009168:	682f      	ldr	r7, [r5, #0]
 800916a:	6a21      	ldr	r1, [r4, #32]
 800916c:	602b      	str	r3, [r5, #0]
 800916e:	d032      	beq.n	80091d6 <__sflush_r+0x96>
 8009170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	075a      	lsls	r2, r3, #29
 8009176:	d505      	bpl.n	8009184 <__sflush_r+0x44>
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	1ac0      	subs	r0, r0, r3
 800917c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800917e:	b10b      	cbz	r3, 8009184 <__sflush_r+0x44>
 8009180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009182:	1ac0      	subs	r0, r0, r3
 8009184:	2300      	movs	r3, #0
 8009186:	4602      	mov	r2, r0
 8009188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918a:	4628      	mov	r0, r5
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	47b0      	blx	r6
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	d106      	bne.n	80091a4 <__sflush_r+0x64>
 8009196:	6829      	ldr	r1, [r5, #0]
 8009198:	291d      	cmp	r1, #29
 800919a:	d82b      	bhi.n	80091f4 <__sflush_r+0xb4>
 800919c:	4a28      	ldr	r2, [pc, #160]	; (8009240 <__sflush_r+0x100>)
 800919e:	410a      	asrs	r2, r1
 80091a0:	07d6      	lsls	r6, r2, #31
 80091a2:	d427      	bmi.n	80091f4 <__sflush_r+0xb4>
 80091a4:	2200      	movs	r2, #0
 80091a6:	6062      	str	r2, [r4, #4]
 80091a8:	6922      	ldr	r2, [r4, #16]
 80091aa:	04d9      	lsls	r1, r3, #19
 80091ac:	6022      	str	r2, [r4, #0]
 80091ae:	d504      	bpl.n	80091ba <__sflush_r+0x7a>
 80091b0:	1c42      	adds	r2, r0, #1
 80091b2:	d101      	bne.n	80091b8 <__sflush_r+0x78>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b903      	cbnz	r3, 80091ba <__sflush_r+0x7a>
 80091b8:	6560      	str	r0, [r4, #84]	; 0x54
 80091ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091bc:	602f      	str	r7, [r5, #0]
 80091be:	2900      	cmp	r1, #0
 80091c0:	d0ca      	beq.n	8009158 <__sflush_r+0x18>
 80091c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d002      	beq.n	80091d0 <__sflush_r+0x90>
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7ff f9ec 	bl	80085a8 <_free_r>
 80091d0:	2000      	movs	r0, #0
 80091d2:	6360      	str	r0, [r4, #52]	; 0x34
 80091d4:	e7c1      	b.n	800915a <__sflush_r+0x1a>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4628      	mov	r0, r5
 80091da:	47b0      	blx	r6
 80091dc:	1c41      	adds	r1, r0, #1
 80091de:	d1c8      	bne.n	8009172 <__sflush_r+0x32>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0c5      	beq.n	8009172 <__sflush_r+0x32>
 80091e6:	2b1d      	cmp	r3, #29
 80091e8:	d001      	beq.n	80091ee <__sflush_r+0xae>
 80091ea:	2b16      	cmp	r3, #22
 80091ec:	d101      	bne.n	80091f2 <__sflush_r+0xb2>
 80091ee:	602f      	str	r7, [r5, #0]
 80091f0:	e7b2      	b.n	8009158 <__sflush_r+0x18>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	e7ae      	b.n	800915a <__sflush_r+0x1a>
 80091fc:	690f      	ldr	r7, [r1, #16]
 80091fe:	2f00      	cmp	r7, #0
 8009200:	d0aa      	beq.n	8009158 <__sflush_r+0x18>
 8009202:	0793      	lsls	r3, r2, #30
 8009204:	bf18      	it	ne
 8009206:	2300      	movne	r3, #0
 8009208:	680e      	ldr	r6, [r1, #0]
 800920a:	bf08      	it	eq
 800920c:	694b      	ldreq	r3, [r1, #20]
 800920e:	1bf6      	subs	r6, r6, r7
 8009210:	600f      	str	r7, [r1, #0]
 8009212:	608b      	str	r3, [r1, #8]
 8009214:	2e00      	cmp	r6, #0
 8009216:	dd9f      	ble.n	8009158 <__sflush_r+0x18>
 8009218:	4633      	mov	r3, r6
 800921a:	463a      	mov	r2, r7
 800921c:	4628      	mov	r0, r5
 800921e:	6a21      	ldr	r1, [r4, #32]
 8009220:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009224:	47e0      	blx	ip
 8009226:	2800      	cmp	r0, #0
 8009228:	dc06      	bgt.n	8009238 <__sflush_r+0xf8>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	e790      	b.n	800915a <__sflush_r+0x1a>
 8009238:	4407      	add	r7, r0
 800923a:	1a36      	subs	r6, r6, r0
 800923c:	e7ea      	b.n	8009214 <__sflush_r+0xd4>
 800923e:	bf00      	nop
 8009240:	dfbffffe 	.word	0xdfbffffe

08009244 <_fflush_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	690b      	ldr	r3, [r1, #16]
 8009248:	4605      	mov	r5, r0
 800924a:	460c      	mov	r4, r1
 800924c:	b913      	cbnz	r3, 8009254 <_fflush_r+0x10>
 800924e:	2500      	movs	r5, #0
 8009250:	4628      	mov	r0, r5
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	b118      	cbz	r0, 800925e <_fflush_r+0x1a>
 8009256:	6a03      	ldr	r3, [r0, #32]
 8009258:	b90b      	cbnz	r3, 800925e <_fflush_r+0x1a>
 800925a:	f7fe fa11 	bl	8007680 <__sinit>
 800925e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0f3      	beq.n	800924e <_fflush_r+0xa>
 8009266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009268:	07d0      	lsls	r0, r2, #31
 800926a:	d404      	bmi.n	8009276 <_fflush_r+0x32>
 800926c:	0599      	lsls	r1, r3, #22
 800926e:	d402      	bmi.n	8009276 <_fflush_r+0x32>
 8009270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009272:	f7fe fb1c 	bl	80078ae <__retarget_lock_acquire_recursive>
 8009276:	4628      	mov	r0, r5
 8009278:	4621      	mov	r1, r4
 800927a:	f7ff ff61 	bl	8009140 <__sflush_r>
 800927e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009280:	4605      	mov	r5, r0
 8009282:	07da      	lsls	r2, r3, #31
 8009284:	d4e4      	bmi.n	8009250 <_fflush_r+0xc>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	059b      	lsls	r3, r3, #22
 800928a:	d4e1      	bmi.n	8009250 <_fflush_r+0xc>
 800928c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928e:	f7fe fb0f 	bl	80078b0 <__retarget_lock_release_recursive>
 8009292:	e7dd      	b.n	8009250 <_fflush_r+0xc>

08009294 <memmove>:
 8009294:	4288      	cmp	r0, r1
 8009296:	b510      	push	{r4, lr}
 8009298:	eb01 0402 	add.w	r4, r1, r2
 800929c:	d902      	bls.n	80092a4 <memmove+0x10>
 800929e:	4284      	cmp	r4, r0
 80092a0:	4623      	mov	r3, r4
 80092a2:	d807      	bhi.n	80092b4 <memmove+0x20>
 80092a4:	1e43      	subs	r3, r0, #1
 80092a6:	42a1      	cmp	r1, r4
 80092a8:	d008      	beq.n	80092bc <memmove+0x28>
 80092aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092b2:	e7f8      	b.n	80092a6 <memmove+0x12>
 80092b4:	4601      	mov	r1, r0
 80092b6:	4402      	add	r2, r0
 80092b8:	428a      	cmp	r2, r1
 80092ba:	d100      	bne.n	80092be <memmove+0x2a>
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092c6:	e7f7      	b.n	80092b8 <memmove+0x24>

080092c8 <_sbrk_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	2300      	movs	r3, #0
 80092cc:	4d05      	ldr	r5, [pc, #20]	; (80092e4 <_sbrk_r+0x1c>)
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f9 fafe 	bl	80028d4 <_sbrk>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_sbrk_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_sbrk_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20000778 	.word	0x20000778

080092e8 <memcpy>:
 80092e8:	440a      	add	r2, r1
 80092ea:	4291      	cmp	r1, r2
 80092ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f0:	d100      	bne.n	80092f4 <memcpy+0xc>
 80092f2:	4770      	bx	lr
 80092f4:	b510      	push	{r4, lr}
 80092f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fa:	4291      	cmp	r1, r2
 80092fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009300:	d1f9      	bne.n	80092f6 <memcpy+0xe>
 8009302:	bd10      	pop	{r4, pc}

08009304 <__assert_func>:
 8009304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009306:	4614      	mov	r4, r2
 8009308:	461a      	mov	r2, r3
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <__assert_func+0x2c>)
 800930c:	4605      	mov	r5, r0
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68d8      	ldr	r0, [r3, #12]
 8009312:	b14c      	cbz	r4, 8009328 <__assert_func+0x24>
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <__assert_func+0x30>)
 8009316:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800931a:	9100      	str	r1, [sp, #0]
 800931c:	462b      	mov	r3, r5
 800931e:	4906      	ldr	r1, [pc, #24]	; (8009338 <__assert_func+0x34>)
 8009320:	f000 f870 	bl	8009404 <fiprintf>
 8009324:	f000 f880 	bl	8009428 <abort>
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <__assert_func+0x38>)
 800932a:	461c      	mov	r4, r3
 800932c:	e7f3      	b.n	8009316 <__assert_func+0x12>
 800932e:	bf00      	nop
 8009330:	200000f0 	.word	0x200000f0
 8009334:	08009c1f 	.word	0x08009c1f
 8009338:	08009c2c 	.word	0x08009c2c
 800933c:	08009c5a 	.word	0x08009c5a

08009340 <_calloc_r>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	fba1 5402 	umull	r5, r4, r1, r2
 8009346:	b934      	cbnz	r4, 8009356 <_calloc_r+0x16>
 8009348:	4629      	mov	r1, r5
 800934a:	f7ff f99d 	bl	8008688 <_malloc_r>
 800934e:	4606      	mov	r6, r0
 8009350:	b928      	cbnz	r0, 800935e <_calloc_r+0x1e>
 8009352:	4630      	mov	r0, r6
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	220c      	movs	r2, #12
 8009358:	2600      	movs	r6, #0
 800935a:	6002      	str	r2, [r0, #0]
 800935c:	e7f9      	b.n	8009352 <_calloc_r+0x12>
 800935e:	462a      	mov	r2, r5
 8009360:	4621      	mov	r1, r4
 8009362:	f7fe fa26 	bl	80077b2 <memset>
 8009366:	e7f4      	b.n	8009352 <_calloc_r+0x12>

08009368 <__ascii_mbtowc>:
 8009368:	b082      	sub	sp, #8
 800936a:	b901      	cbnz	r1, 800936e <__ascii_mbtowc+0x6>
 800936c:	a901      	add	r1, sp, #4
 800936e:	b142      	cbz	r2, 8009382 <__ascii_mbtowc+0x1a>
 8009370:	b14b      	cbz	r3, 8009386 <__ascii_mbtowc+0x1e>
 8009372:	7813      	ldrb	r3, [r2, #0]
 8009374:	600b      	str	r3, [r1, #0]
 8009376:	7812      	ldrb	r2, [r2, #0]
 8009378:	1e10      	subs	r0, r2, #0
 800937a:	bf18      	it	ne
 800937c:	2001      	movne	r0, #1
 800937e:	b002      	add	sp, #8
 8009380:	4770      	bx	lr
 8009382:	4610      	mov	r0, r2
 8009384:	e7fb      	b.n	800937e <__ascii_mbtowc+0x16>
 8009386:	f06f 0001 	mvn.w	r0, #1
 800938a:	e7f8      	b.n	800937e <__ascii_mbtowc+0x16>

0800938c <_realloc_r>:
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	4680      	mov	r8, r0
 8009392:	4614      	mov	r4, r2
 8009394:	460e      	mov	r6, r1
 8009396:	b921      	cbnz	r1, 80093a2 <_realloc_r+0x16>
 8009398:	4611      	mov	r1, r2
 800939a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800939e:	f7ff b973 	b.w	8008688 <_malloc_r>
 80093a2:	b92a      	cbnz	r2, 80093b0 <_realloc_r+0x24>
 80093a4:	f7ff f900 	bl	80085a8 <_free_r>
 80093a8:	4625      	mov	r5, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b0:	f000 f841 	bl	8009436 <_malloc_usable_size_r>
 80093b4:	4284      	cmp	r4, r0
 80093b6:	4607      	mov	r7, r0
 80093b8:	d802      	bhi.n	80093c0 <_realloc_r+0x34>
 80093ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093be:	d812      	bhi.n	80093e6 <_realloc_r+0x5a>
 80093c0:	4621      	mov	r1, r4
 80093c2:	4640      	mov	r0, r8
 80093c4:	f7ff f960 	bl	8008688 <_malloc_r>
 80093c8:	4605      	mov	r5, r0
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d0ed      	beq.n	80093aa <_realloc_r+0x1e>
 80093ce:	42bc      	cmp	r4, r7
 80093d0:	4622      	mov	r2, r4
 80093d2:	4631      	mov	r1, r6
 80093d4:	bf28      	it	cs
 80093d6:	463a      	movcs	r2, r7
 80093d8:	f7ff ff86 	bl	80092e8 <memcpy>
 80093dc:	4631      	mov	r1, r6
 80093de:	4640      	mov	r0, r8
 80093e0:	f7ff f8e2 	bl	80085a8 <_free_r>
 80093e4:	e7e1      	b.n	80093aa <_realloc_r+0x1e>
 80093e6:	4635      	mov	r5, r6
 80093e8:	e7df      	b.n	80093aa <_realloc_r+0x1e>

080093ea <__ascii_wctomb>:
 80093ea:	4603      	mov	r3, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	b141      	cbz	r1, 8009402 <__ascii_wctomb+0x18>
 80093f0:	2aff      	cmp	r2, #255	; 0xff
 80093f2:	d904      	bls.n	80093fe <__ascii_wctomb+0x14>
 80093f4:	228a      	movs	r2, #138	; 0x8a
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	4770      	bx	lr
 80093fe:	2001      	movs	r0, #1
 8009400:	700a      	strb	r2, [r1, #0]
 8009402:	4770      	bx	lr

08009404 <fiprintf>:
 8009404:	b40e      	push	{r1, r2, r3}
 8009406:	b503      	push	{r0, r1, lr}
 8009408:	4601      	mov	r1, r0
 800940a:	ab03      	add	r3, sp, #12
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <fiprintf+0x20>)
 800940e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009412:	6800      	ldr	r0, [r0, #0]
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	f000 f83d 	bl	8009494 <_vfiprintf_r>
 800941a:	b002      	add	sp, #8
 800941c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009420:	b003      	add	sp, #12
 8009422:	4770      	bx	lr
 8009424:	200000f0 	.word	0x200000f0

08009428 <abort>:
 8009428:	2006      	movs	r0, #6
 800942a:	b508      	push	{r3, lr}
 800942c:	f000 fa0a 	bl	8009844 <raise>
 8009430:	2001      	movs	r0, #1
 8009432:	f7f9 f9dc 	bl	80027ee <_exit>

08009436 <_malloc_usable_size_r>:
 8009436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800943a:	1f18      	subs	r0, r3, #4
 800943c:	2b00      	cmp	r3, #0
 800943e:	bfbc      	itt	lt
 8009440:	580b      	ldrlt	r3, [r1, r0]
 8009442:	18c0      	addlt	r0, r0, r3
 8009444:	4770      	bx	lr

08009446 <__sfputc_r>:
 8009446:	6893      	ldr	r3, [r2, #8]
 8009448:	b410      	push	{r4}
 800944a:	3b01      	subs	r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	6093      	str	r3, [r2, #8]
 8009450:	da07      	bge.n	8009462 <__sfputc_r+0x1c>
 8009452:	6994      	ldr	r4, [r2, #24]
 8009454:	42a3      	cmp	r3, r4
 8009456:	db01      	blt.n	800945c <__sfputc_r+0x16>
 8009458:	290a      	cmp	r1, #10
 800945a:	d102      	bne.n	8009462 <__sfputc_r+0x1c>
 800945c:	bc10      	pop	{r4}
 800945e:	f000 b933 	b.w	80096c8 <__swbuf_r>
 8009462:	6813      	ldr	r3, [r2, #0]
 8009464:	1c58      	adds	r0, r3, #1
 8009466:	6010      	str	r0, [r2, #0]
 8009468:	7019      	strb	r1, [r3, #0]
 800946a:	4608      	mov	r0, r1
 800946c:	bc10      	pop	{r4}
 800946e:	4770      	bx	lr

08009470 <__sfputs_r>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
 8009476:	4614      	mov	r4, r2
 8009478:	18d5      	adds	r5, r2, r3
 800947a:	42ac      	cmp	r4, r5
 800947c:	d101      	bne.n	8009482 <__sfputs_r+0x12>
 800947e:	2000      	movs	r0, #0
 8009480:	e007      	b.n	8009492 <__sfputs_r+0x22>
 8009482:	463a      	mov	r2, r7
 8009484:	4630      	mov	r0, r6
 8009486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948a:	f7ff ffdc 	bl	8009446 <__sfputc_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d1f3      	bne.n	800947a <__sfputs_r+0xa>
 8009492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009494 <_vfiprintf_r>:
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	460d      	mov	r5, r1
 800949a:	4614      	mov	r4, r2
 800949c:	4698      	mov	r8, r3
 800949e:	4606      	mov	r6, r0
 80094a0:	b09d      	sub	sp, #116	; 0x74
 80094a2:	b118      	cbz	r0, 80094ac <_vfiprintf_r+0x18>
 80094a4:	6a03      	ldr	r3, [r0, #32]
 80094a6:	b90b      	cbnz	r3, 80094ac <_vfiprintf_r+0x18>
 80094a8:	f7fe f8ea 	bl	8007680 <__sinit>
 80094ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	d405      	bmi.n	80094be <_vfiprintf_r+0x2a>
 80094b2:	89ab      	ldrh	r3, [r5, #12]
 80094b4:	059a      	lsls	r2, r3, #22
 80094b6:	d402      	bmi.n	80094be <_vfiprintf_r+0x2a>
 80094b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ba:	f7fe f9f8 	bl	80078ae <__retarget_lock_acquire_recursive>
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	071b      	lsls	r3, r3, #28
 80094c2:	d501      	bpl.n	80094c8 <_vfiprintf_r+0x34>
 80094c4:	692b      	ldr	r3, [r5, #16]
 80094c6:	b99b      	cbnz	r3, 80094f0 <_vfiprintf_r+0x5c>
 80094c8:	4629      	mov	r1, r5
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 f93a 	bl	8009744 <__swsetup_r>
 80094d0:	b170      	cbz	r0, 80094f0 <_vfiprintf_r+0x5c>
 80094d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094d4:	07dc      	lsls	r4, r3, #31
 80094d6:	d504      	bpl.n	80094e2 <_vfiprintf_r+0x4e>
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	b01d      	add	sp, #116	; 0x74
 80094de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	0598      	lsls	r0, r3, #22
 80094e6:	d4f7      	bmi.n	80094d8 <_vfiprintf_r+0x44>
 80094e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ea:	f7fe f9e1 	bl	80078b0 <__retarget_lock_release_recursive>
 80094ee:	e7f3      	b.n	80094d8 <_vfiprintf_r+0x44>
 80094f0:	2300      	movs	r3, #0
 80094f2:	9309      	str	r3, [sp, #36]	; 0x24
 80094f4:	2320      	movs	r3, #32
 80094f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094fa:	2330      	movs	r3, #48	; 0x30
 80094fc:	f04f 0901 	mov.w	r9, #1
 8009500:	f8cd 800c 	str.w	r8, [sp, #12]
 8009504:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80096b4 <_vfiprintf_r+0x220>
 8009508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800950c:	4623      	mov	r3, r4
 800950e:	469a      	mov	sl, r3
 8009510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009514:	b10a      	cbz	r2, 800951a <_vfiprintf_r+0x86>
 8009516:	2a25      	cmp	r2, #37	; 0x25
 8009518:	d1f9      	bne.n	800950e <_vfiprintf_r+0x7a>
 800951a:	ebba 0b04 	subs.w	fp, sl, r4
 800951e:	d00b      	beq.n	8009538 <_vfiprintf_r+0xa4>
 8009520:	465b      	mov	r3, fp
 8009522:	4622      	mov	r2, r4
 8009524:	4629      	mov	r1, r5
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ffa2 	bl	8009470 <__sfputs_r>
 800952c:	3001      	adds	r0, #1
 800952e:	f000 80a9 	beq.w	8009684 <_vfiprintf_r+0x1f0>
 8009532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009534:	445a      	add	r2, fp
 8009536:	9209      	str	r2, [sp, #36]	; 0x24
 8009538:	f89a 3000 	ldrb.w	r3, [sl]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80a1 	beq.w	8009684 <_vfiprintf_r+0x1f0>
 8009542:	2300      	movs	r3, #0
 8009544:	f04f 32ff 	mov.w	r2, #4294967295
 8009548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800954c:	f10a 0a01 	add.w	sl, sl, #1
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	9307      	str	r3, [sp, #28]
 8009554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009558:	931a      	str	r3, [sp, #104]	; 0x68
 800955a:	4654      	mov	r4, sl
 800955c:	2205      	movs	r2, #5
 800955e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009562:	4854      	ldr	r0, [pc, #336]	; (80096b4 <_vfiprintf_r+0x220>)
 8009564:	f7fe f9a5 	bl	80078b2 <memchr>
 8009568:	9a04      	ldr	r2, [sp, #16]
 800956a:	b9d8      	cbnz	r0, 80095a4 <_vfiprintf_r+0x110>
 800956c:	06d1      	lsls	r1, r2, #27
 800956e:	bf44      	itt	mi
 8009570:	2320      	movmi	r3, #32
 8009572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009576:	0713      	lsls	r3, r2, #28
 8009578:	bf44      	itt	mi
 800957a:	232b      	movmi	r3, #43	; 0x2b
 800957c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009580:	f89a 3000 	ldrb.w	r3, [sl]
 8009584:	2b2a      	cmp	r3, #42	; 0x2a
 8009586:	d015      	beq.n	80095b4 <_vfiprintf_r+0x120>
 8009588:	4654      	mov	r4, sl
 800958a:	2000      	movs	r0, #0
 800958c:	f04f 0c0a 	mov.w	ip, #10
 8009590:	9a07      	ldr	r2, [sp, #28]
 8009592:	4621      	mov	r1, r4
 8009594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009598:	3b30      	subs	r3, #48	; 0x30
 800959a:	2b09      	cmp	r3, #9
 800959c:	d94d      	bls.n	800963a <_vfiprintf_r+0x1a6>
 800959e:	b1b0      	cbz	r0, 80095ce <_vfiprintf_r+0x13a>
 80095a0:	9207      	str	r2, [sp, #28]
 80095a2:	e014      	b.n	80095ce <_vfiprintf_r+0x13a>
 80095a4:	eba0 0308 	sub.w	r3, r0, r8
 80095a8:	fa09 f303 	lsl.w	r3, r9, r3
 80095ac:	4313      	orrs	r3, r2
 80095ae:	46a2      	mov	sl, r4
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	e7d2      	b.n	800955a <_vfiprintf_r+0xc6>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	1d19      	adds	r1, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	9103      	str	r1, [sp, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfbb      	ittet	lt
 80095c0:	425b      	neglt	r3, r3
 80095c2:	f042 0202 	orrlt.w	r2, r2, #2
 80095c6:	9307      	strge	r3, [sp, #28]
 80095c8:	9307      	strlt	r3, [sp, #28]
 80095ca:	bfb8      	it	lt
 80095cc:	9204      	strlt	r2, [sp, #16]
 80095ce:	7823      	ldrb	r3, [r4, #0]
 80095d0:	2b2e      	cmp	r3, #46	; 0x2e
 80095d2:	d10c      	bne.n	80095ee <_vfiprintf_r+0x15a>
 80095d4:	7863      	ldrb	r3, [r4, #1]
 80095d6:	2b2a      	cmp	r3, #42	; 0x2a
 80095d8:	d134      	bne.n	8009644 <_vfiprintf_r+0x1b0>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	3402      	adds	r4, #2
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	9203      	str	r2, [sp, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bfb8      	it	lt
 80095e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096b8 <_vfiprintf_r+0x224>
 80095f2:	2203      	movs	r2, #3
 80095f4:	4650      	mov	r0, sl
 80095f6:	7821      	ldrb	r1, [r4, #0]
 80095f8:	f7fe f95b 	bl	80078b2 <memchr>
 80095fc:	b138      	cbz	r0, 800960e <_vfiprintf_r+0x17a>
 80095fe:	2240      	movs	r2, #64	; 0x40
 8009600:	9b04      	ldr	r3, [sp, #16]
 8009602:	eba0 000a 	sub.w	r0, r0, sl
 8009606:	4082      	lsls	r2, r0
 8009608:	4313      	orrs	r3, r2
 800960a:	3401      	adds	r4, #1
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009612:	2206      	movs	r2, #6
 8009614:	4829      	ldr	r0, [pc, #164]	; (80096bc <_vfiprintf_r+0x228>)
 8009616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800961a:	f7fe f94a 	bl	80078b2 <memchr>
 800961e:	2800      	cmp	r0, #0
 8009620:	d03f      	beq.n	80096a2 <_vfiprintf_r+0x20e>
 8009622:	4b27      	ldr	r3, [pc, #156]	; (80096c0 <_vfiprintf_r+0x22c>)
 8009624:	bb1b      	cbnz	r3, 800966e <_vfiprintf_r+0x1da>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	3307      	adds	r3, #7
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	3308      	adds	r3, #8
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009634:	443b      	add	r3, r7
 8009636:	9309      	str	r3, [sp, #36]	; 0x24
 8009638:	e768      	b.n	800950c <_vfiprintf_r+0x78>
 800963a:	460c      	mov	r4, r1
 800963c:	2001      	movs	r0, #1
 800963e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009642:	e7a6      	b.n	8009592 <_vfiprintf_r+0xfe>
 8009644:	2300      	movs	r3, #0
 8009646:	f04f 0c0a 	mov.w	ip, #10
 800964a:	4619      	mov	r1, r3
 800964c:	3401      	adds	r4, #1
 800964e:	9305      	str	r3, [sp, #20]
 8009650:	4620      	mov	r0, r4
 8009652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009656:	3a30      	subs	r2, #48	; 0x30
 8009658:	2a09      	cmp	r2, #9
 800965a:	d903      	bls.n	8009664 <_vfiprintf_r+0x1d0>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0c6      	beq.n	80095ee <_vfiprintf_r+0x15a>
 8009660:	9105      	str	r1, [sp, #20]
 8009662:	e7c4      	b.n	80095ee <_vfiprintf_r+0x15a>
 8009664:	4604      	mov	r4, r0
 8009666:	2301      	movs	r3, #1
 8009668:	fb0c 2101 	mla	r1, ip, r1, r2
 800966c:	e7f0      	b.n	8009650 <_vfiprintf_r+0x1bc>
 800966e:	ab03      	add	r3, sp, #12
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	462a      	mov	r2, r5
 8009674:	4630      	mov	r0, r6
 8009676:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <_vfiprintf_r+0x230>)
 8009678:	a904      	add	r1, sp, #16
 800967a:	f7fd fbb3 	bl	8006de4 <_printf_float>
 800967e:	4607      	mov	r7, r0
 8009680:	1c78      	adds	r0, r7, #1
 8009682:	d1d6      	bne.n	8009632 <_vfiprintf_r+0x19e>
 8009684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009686:	07d9      	lsls	r1, r3, #31
 8009688:	d405      	bmi.n	8009696 <_vfiprintf_r+0x202>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d402      	bmi.n	8009696 <_vfiprintf_r+0x202>
 8009690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009692:	f7fe f90d 	bl	80078b0 <__retarget_lock_release_recursive>
 8009696:	89ab      	ldrh	r3, [r5, #12]
 8009698:	065b      	lsls	r3, r3, #25
 800969a:	f53f af1d 	bmi.w	80094d8 <_vfiprintf_r+0x44>
 800969e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a0:	e71c      	b.n	80094dc <_vfiprintf_r+0x48>
 80096a2:	ab03      	add	r3, sp, #12
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	462a      	mov	r2, r5
 80096a8:	4630      	mov	r0, r6
 80096aa:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <_vfiprintf_r+0x230>)
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	f7fd fe39 	bl	8007324 <_printf_i>
 80096b2:	e7e4      	b.n	800967e <_vfiprintf_r+0x1ea>
 80096b4:	08009c04 	.word	0x08009c04
 80096b8:	08009c0a 	.word	0x08009c0a
 80096bc:	08009c0e 	.word	0x08009c0e
 80096c0:	08006de5 	.word	0x08006de5
 80096c4:	08009471 	.word	0x08009471

080096c8 <__swbuf_r>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	460e      	mov	r6, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	4605      	mov	r5, r0
 80096d0:	b118      	cbz	r0, 80096da <__swbuf_r+0x12>
 80096d2:	6a03      	ldr	r3, [r0, #32]
 80096d4:	b90b      	cbnz	r3, 80096da <__swbuf_r+0x12>
 80096d6:	f7fd ffd3 	bl	8007680 <__sinit>
 80096da:	69a3      	ldr	r3, [r4, #24]
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	071a      	lsls	r2, r3, #28
 80096e2:	d525      	bpl.n	8009730 <__swbuf_r+0x68>
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	b31b      	cbz	r3, 8009730 <__swbuf_r+0x68>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	6922      	ldr	r2, [r4, #16]
 80096ec:	b2f6      	uxtb	r6, r6
 80096ee:	1a98      	subs	r0, r3, r2
 80096f0:	6963      	ldr	r3, [r4, #20]
 80096f2:	4637      	mov	r7, r6
 80096f4:	4283      	cmp	r3, r0
 80096f6:	dc04      	bgt.n	8009702 <__swbuf_r+0x3a>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4628      	mov	r0, r5
 80096fc:	f7ff fda2 	bl	8009244 <_fflush_r>
 8009700:	b9e0      	cbnz	r0, 800973c <__swbuf_r+0x74>
 8009702:	68a3      	ldr	r3, [r4, #8]
 8009704:	3b01      	subs	r3, #1
 8009706:	60a3      	str	r3, [r4, #8]
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	6022      	str	r2, [r4, #0]
 800970e:	701e      	strb	r6, [r3, #0]
 8009710:	6962      	ldr	r2, [r4, #20]
 8009712:	1c43      	adds	r3, r0, #1
 8009714:	429a      	cmp	r2, r3
 8009716:	d004      	beq.n	8009722 <__swbuf_r+0x5a>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	07db      	lsls	r3, r3, #31
 800971c:	d506      	bpl.n	800972c <__swbuf_r+0x64>
 800971e:	2e0a      	cmp	r6, #10
 8009720:	d104      	bne.n	800972c <__swbuf_r+0x64>
 8009722:	4621      	mov	r1, r4
 8009724:	4628      	mov	r0, r5
 8009726:	f7ff fd8d 	bl	8009244 <_fflush_r>
 800972a:	b938      	cbnz	r0, 800973c <__swbuf_r+0x74>
 800972c:	4638      	mov	r0, r7
 800972e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009730:	4621      	mov	r1, r4
 8009732:	4628      	mov	r0, r5
 8009734:	f000 f806 	bl	8009744 <__swsetup_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	d0d5      	beq.n	80096e8 <__swbuf_r+0x20>
 800973c:	f04f 37ff 	mov.w	r7, #4294967295
 8009740:	e7f4      	b.n	800972c <__swbuf_r+0x64>
	...

08009744 <__swsetup_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <__swsetup_r+0xac>)
 8009748:	4605      	mov	r5, r0
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	460c      	mov	r4, r1
 800974e:	b118      	cbz	r0, 8009758 <__swsetup_r+0x14>
 8009750:	6a03      	ldr	r3, [r0, #32]
 8009752:	b90b      	cbnz	r3, 8009758 <__swsetup_r+0x14>
 8009754:	f7fd ff94 	bl	8007680 <__sinit>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800975e:	0718      	lsls	r0, r3, #28
 8009760:	d422      	bmi.n	80097a8 <__swsetup_r+0x64>
 8009762:	06d9      	lsls	r1, r3, #27
 8009764:	d407      	bmi.n	8009776 <__swsetup_r+0x32>
 8009766:	2309      	movs	r3, #9
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800976e:	f04f 30ff 	mov.w	r0, #4294967295
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	e034      	b.n	80097e0 <__swsetup_r+0x9c>
 8009776:	0758      	lsls	r0, r3, #29
 8009778:	d512      	bpl.n	80097a0 <__swsetup_r+0x5c>
 800977a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977c:	b141      	cbz	r1, 8009790 <__swsetup_r+0x4c>
 800977e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009782:	4299      	cmp	r1, r3
 8009784:	d002      	beq.n	800978c <__swsetup_r+0x48>
 8009786:	4628      	mov	r0, r5
 8009788:	f7fe ff0e 	bl	80085a8 <_free_r>
 800978c:	2300      	movs	r3, #0
 800978e:	6363      	str	r3, [r4, #52]	; 0x34
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	2300      	movs	r3, #0
 800979a:	6063      	str	r3, [r4, #4]
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f043 0308 	orr.w	r3, r3, #8
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	b94b      	cbnz	r3, 80097c0 <__swsetup_r+0x7c>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b6:	d003      	beq.n	80097c0 <__swsetup_r+0x7c>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 f883 	bl	80098c6 <__smakebuf_r>
 80097c0:	89a0      	ldrh	r0, [r4, #12]
 80097c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097c6:	f010 0301 	ands.w	r3, r0, #1
 80097ca:	d00a      	beq.n	80097e2 <__swsetup_r+0x9e>
 80097cc:	2300      	movs	r3, #0
 80097ce:	60a3      	str	r3, [r4, #8]
 80097d0:	6963      	ldr	r3, [r4, #20]
 80097d2:	425b      	negs	r3, r3
 80097d4:	61a3      	str	r3, [r4, #24]
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	b943      	cbnz	r3, 80097ec <__swsetup_r+0xa8>
 80097da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097de:	d1c4      	bne.n	800976a <__swsetup_r+0x26>
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	0781      	lsls	r1, r0, #30
 80097e4:	bf58      	it	pl
 80097e6:	6963      	ldrpl	r3, [r4, #20]
 80097e8:	60a3      	str	r3, [r4, #8]
 80097ea:	e7f4      	b.n	80097d6 <__swsetup_r+0x92>
 80097ec:	2000      	movs	r0, #0
 80097ee:	e7f7      	b.n	80097e0 <__swsetup_r+0x9c>
 80097f0:	200000f0 	.word	0x200000f0

080097f4 <_raise_r>:
 80097f4:	291f      	cmp	r1, #31
 80097f6:	b538      	push	{r3, r4, r5, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	d904      	bls.n	8009808 <_raise_r+0x14>
 80097fe:	2316      	movs	r3, #22
 8009800:	6003      	str	r3, [r0, #0]
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800980a:	b112      	cbz	r2, 8009812 <_raise_r+0x1e>
 800980c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009810:	b94b      	cbnz	r3, 8009826 <_raise_r+0x32>
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f830 	bl	8009878 <_getpid_r>
 8009818:	462a      	mov	r2, r5
 800981a:	4601      	mov	r1, r0
 800981c:	4620      	mov	r0, r4
 800981e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009822:	f000 b817 	b.w	8009854 <_kill_r>
 8009826:	2b01      	cmp	r3, #1
 8009828:	d00a      	beq.n	8009840 <_raise_r+0x4c>
 800982a:	1c59      	adds	r1, r3, #1
 800982c:	d103      	bne.n	8009836 <_raise_r+0x42>
 800982e:	2316      	movs	r3, #22
 8009830:	6003      	str	r3, [r0, #0]
 8009832:	2001      	movs	r0, #1
 8009834:	e7e7      	b.n	8009806 <_raise_r+0x12>
 8009836:	2400      	movs	r4, #0
 8009838:	4628      	mov	r0, r5
 800983a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800983e:	4798      	blx	r3
 8009840:	2000      	movs	r0, #0
 8009842:	e7e0      	b.n	8009806 <_raise_r+0x12>

08009844 <raise>:
 8009844:	4b02      	ldr	r3, [pc, #8]	; (8009850 <raise+0xc>)
 8009846:	4601      	mov	r1, r0
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	f7ff bfd3 	b.w	80097f4 <_raise_r>
 800984e:	bf00      	nop
 8009850:	200000f0 	.word	0x200000f0

08009854 <_kill_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	2300      	movs	r3, #0
 8009858:	4d06      	ldr	r5, [pc, #24]	; (8009874 <_kill_r+0x20>)
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f7f8 ffb4 	bl	80027ce <_kill>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d102      	bne.n	8009870 <_kill_r+0x1c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	b103      	cbz	r3, 8009870 <_kill_r+0x1c>
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	bd38      	pop	{r3, r4, r5, pc}
 8009872:	bf00      	nop
 8009874:	20000778 	.word	0x20000778

08009878 <_getpid_r>:
 8009878:	f7f8 bfa2 	b.w	80027c0 <_getpid>

0800987c <__swhatbuf_r>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	4615      	mov	r5, r2
 8009886:	2900      	cmp	r1, #0
 8009888:	461e      	mov	r6, r3
 800988a:	b096      	sub	sp, #88	; 0x58
 800988c:	da0c      	bge.n	80098a8 <__swhatbuf_r+0x2c>
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	2100      	movs	r1, #0
 8009892:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009896:	bf0c      	ite	eq
 8009898:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800989c:	2340      	movne	r3, #64	; 0x40
 800989e:	2000      	movs	r0, #0
 80098a0:	6031      	str	r1, [r6, #0]
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	b016      	add	sp, #88	; 0x58
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	466a      	mov	r2, sp
 80098aa:	f000 f849 	bl	8009940 <_fstat_r>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	dbed      	blt.n	800988e <__swhatbuf_r+0x12>
 80098b2:	9901      	ldr	r1, [sp, #4]
 80098b4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80098b8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098bc:	4259      	negs	r1, r3
 80098be:	4159      	adcs	r1, r3
 80098c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098c4:	e7eb      	b.n	800989e <__swhatbuf_r+0x22>

080098c6 <__smakebuf_r>:
 80098c6:	898b      	ldrh	r3, [r1, #12]
 80098c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098ca:	079d      	lsls	r5, r3, #30
 80098cc:	4606      	mov	r6, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	d507      	bpl.n	80098e2 <__smakebuf_r+0x1c>
 80098d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	2301      	movs	r3, #1
 80098dc:	6163      	str	r3, [r4, #20]
 80098de:	b002      	add	sp, #8
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	466a      	mov	r2, sp
 80098e4:	ab01      	add	r3, sp, #4
 80098e6:	f7ff ffc9 	bl	800987c <__swhatbuf_r>
 80098ea:	9900      	ldr	r1, [sp, #0]
 80098ec:	4605      	mov	r5, r0
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7fe feca 	bl	8008688 <_malloc_r>
 80098f4:	b948      	cbnz	r0, 800990a <__smakebuf_r+0x44>
 80098f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fa:	059a      	lsls	r2, r3, #22
 80098fc:	d4ef      	bmi.n	80098de <__smakebuf_r+0x18>
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	f043 0302 	orr.w	r3, r3, #2
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	e7e3      	b.n	80098d2 <__smakebuf_r+0xc>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	6020      	str	r0, [r4, #0]
 800990e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	6120      	str	r0, [r4, #16]
 8009918:	6163      	str	r3, [r4, #20]
 800991a:	9b01      	ldr	r3, [sp, #4]
 800991c:	b15b      	cbz	r3, 8009936 <__smakebuf_r+0x70>
 800991e:	4630      	mov	r0, r6
 8009920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009924:	f000 f81e 	bl	8009964 <_isatty_r>
 8009928:	b128      	cbz	r0, 8009936 <__smakebuf_r+0x70>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	431d      	orrs	r5, r3
 800993a:	81a5      	strh	r5, [r4, #12]
 800993c:	e7cf      	b.n	80098de <__smakebuf_r+0x18>
	...

08009940 <_fstat_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	2300      	movs	r3, #0
 8009944:	4d06      	ldr	r5, [pc, #24]	; (8009960 <_fstat_r+0x20>)
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	4611      	mov	r1, r2
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	f7f8 ff9c 	bl	800288a <_fstat>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	d102      	bne.n	800995c <_fstat_r+0x1c>
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	b103      	cbz	r3, 800995c <_fstat_r+0x1c>
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	bd38      	pop	{r3, r4, r5, pc}
 800995e:	bf00      	nop
 8009960:	20000778 	.word	0x20000778

08009964 <_isatty_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	2300      	movs	r3, #0
 8009968:	4d05      	ldr	r5, [pc, #20]	; (8009980 <_isatty_r+0x1c>)
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f8 ff9a 	bl	80028a8 <_isatty>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_isatty_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_isatty_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	20000778 	.word	0x20000778

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
